/*
 * Converts a value (or list of values) into a standard scale with base 4px
 * Example:
 * get-unit(1) -> 4px
 * get-unit(2 1) -> 4px 8px
 * get-unit(4 2 4 -1) -> 16px 8px 16px -4px
 */
@function get-unit($value) {
  //  If value is a list
  @if type-of($value) == list {
    $result: ();
    @each $i in $value {
      $result: append($result, get-unit($i));
    }
    @return $result;
  }

  @if $value == auto {
    @return auto;
  }

  @if $value == 0 {
    @return 0;
  }

  $base: 4px;

  @return $value * $base;
}

/* get-color
 * Determines color and available shades
 * Each color has 9 levels and 5 is the default mid color one
*/
@function get-color($color-name, $shade: 5) {
  $colors: (
    blue: #598ffd,
    gray: #6f7273,
    green: #49d156,
    orange: #fea245,
    pink: #fb9cf0,
    purple: #9e8ef0,
    red: #d14949,
    teal: #34ac9e,
    yellow: #ffd700,
    white: #ffffff,
    black: #222222,
    brown: #875131,
    lime: #1fda1f,
  );

  $shade-levels: (
    1: 50%,
    2: 40%,
    3: 30%,
    4: 15%,
    5: 0,
    6: -15%,
    7: -30%,
    8: -40%,
    9: -50%,
  );

  $color: null;

  // Determine color
  @if map-has-key($colors, $color-name) {
    $color: map-get($colors, $color-name);
  } @else {
    @error "Invalid color name: `#{$color-name}`.";
  }

  $shade-level: null;

  // Determine shade
  @if map-has-key($shade-levels, $shade) {
    $shade-level: map-get($shade-levels, $shade);
  } @else {
    @error "Invalid shade value: `#{$shade}`.";
  }

  @return adjust-color($color, $lightness: $shade-level);
}
