{"version":3,"file":"static/js/linhas-cruzadas.8c894b79.chunk.js","mappings":"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","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/icons/TrophyIcon.tsx","components/timers/TimerBar.tsx","components/timers/TimedTimerBar.tsx","games/linhas-cruzadas/StepSelectPrompt.tsx","games/linhas-cruzadas/PhasePromptSelection.tsx","games/linhas-cruzadas/utils/api-requests.ts","games/linhas-cruzadas/StepTimedDrawing.tsx","games/linhas-cruzadas/utils/constants.ts","games/linhas-cruzadas/PhaseDrawing.tsx","games/linhas-cruzadas/StepNameDrawing.tsx","games/linhas-cruzadas/PhaseNaming.tsx","games/linhas-cruzadas/components/Page.tsx","games/linhas-cruzadas/components/Album.tsx","games/linhas-cruzadas/StepAlbum.tsx","games/linhas-cruzadas/PhasePresentation.tsx","games/linhas-cruzadas/PhaseGameOver.tsx","games/linhas-cruzadas/SessionLinhasCruzadas.tsx"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\n// State & Hooks\nimport { useGlobalState } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\n/**\n * Floating canvas resizer bar positioned on the top-left of the page\n * @returns\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <div className=\"canvas-resizer\">\n      <div className=\"canvas-resizer__label\">\n        <Translate pt=\"Tamanho das Images\" en=\"Image Size\" />\n      </div>\n      <Slider\n        className=\"canvas-resizer__slider\"\n        value={canvasSize ?? 100}\n        min={150}\n        max={500}\n        step={50}\n        onChange={setCanvasSize}\n      />\n    </div>\n  );\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  size?: number;\n};\n\nexport const CanvasSVG = ({ drawing = '', className = '', size = 250 }: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 500 500\"\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${size}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  /**\n   * Lines drawn in the canvas\n   */\n  lines: CanvasLine[];\n  /**\n   * Function where any new version of the drawing is sent to\n   */\n  setLines: CanvasSetLine;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Show controls to undo, redo, or erase drawing. Default: false\n   */\n  showControls?: boolean;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n};\n\n/**\n * Canvas drawing board using react-konva\n * It requires an array of lines and an setState function to save the lines\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  /**\n   * Toggles off the isDrawing flag\n   */\n  const startDrawing = () => {\n    isDrawing.current = true;\n  };\n\n  /**\n   * Toggles off the isDrawing flag and resets history\n   */\n  const stopDrawing = () => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n  };\n\n  const startLine = (e: any) => {\n    startDrawing();\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const finishLine = (e: any) => {\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLineEntry);\n    setLines(lines.concat());\n  };\n\n  /**\n   * Start recording drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseDown = (e: any) => {\n    startLine(e);\n  };\n\n  /**\n   * Tracks mouse moving during the drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    if (isDrawing.current) {\n      stopDrawing();\n\n      finishLine(e);\n    }\n  };\n\n  /**\n   * Handles case when a current drawing is stopped off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseUp = () => {\n    stopDrawing();\n  };\n\n  /**\n   * Handles case when a current drawing is started off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseDown = () => {\n    startDrawing();\n  };\n\n  /**\n   * Handles when mouse leaves the stage\n   * @param e - konva mouse event\n   */\n  const handleMouseLeave = (e: any) => {\n    if (isDrawing.current) {\n      finishLine(e);\n\n      window.document.addEventListener('mouseup', handleOffsetMouseUp);\n      window.document.addEventListener('touchEnd', handleOffsetMouseUp);\n      window.document.addEventListener('mousedown', handleOffsetMouseDown);\n      window.document.addEventListener('touchStart', handleOffsetMouseDown);\n    }\n  };\n\n  /**\n   * Handles when mouse reenters the state\n   * @param e\n   */\n  const handleMouseEnter = (e: any) => {\n    if (isDrawing.current) {\n      startLine(e);\n    }\n    window.document.removeEventListener('mouseup', handleOffsetMouseUp);\n    window.document.removeEventListener('touchEnd', handleOffsetMouseUp);\n    window.document.removeEventListener('mousedown', handleOffsetMouseDown);\n    window.document.removeEventListener('touchStart', handleOffsetMouseDown);\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={500}\n        height={500}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onMouseEnter={handleMouseEnter}\n        className={clsx('drawing-canvas', className)}\n        id=\"drawing-canvas\"\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","export function TrophyIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M397.763 87.5h-98.509v213.476h98.509c58.855 0 106.737-47.882 106.737-106.738S456.618 87.5 397.763 87.5zm0 183.476h-68.509V117.5h68.509c42.381 0 76.738 34.357 76.738 76.738-.001 42.381-34.357 76.738-76.738 76.738zM114.237 87.5C55.382 87.5 7.5 135.382 7.5 194.238s47.882 106.738 106.737 106.738h98.509V87.5zm68.509 183.476h-68.509c-42.381 0-76.738-34.357-76.738-76.738S71.856 117.5 114.237 117.5h68.509zM314 419.5H198l15-91h86z\"\n      ></path>\n      <path fill=\"#fee97d\" d=\"M299 328.5h-30l15 91h30z\"></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M382.221 504.5H129.779a7 7 0 01-7-7v-11.629c0-22.091 17.909-40 40-40h186.442c22.091 0 40 17.909 40 40V497.5a7 7 0 01-7 7z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M349.221 445.871h-30c22.092 0 40 17.909 40 40V497.5a7 7 0 01-7 7h30a7 7 0 007-7v-11.629c0-22.092-17.909-40-40-40zm-5 0H167.779v-3.629c0-22.091 17.909-40 40-40h96.442c22.091 0 40 17.909 40 40z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M304.221 402.241h-30c22.092 0 40 17.909 40 40v3.629h30v-3.629c0-22.091-17.909-40-40-40z\"\n      ></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M411.5 57.5h-311c-13.807 0-25-11.193-25-25s11.193-25 25-25h311c13.807 0 25 11.193 25 25s-11.193 25-25 25z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M411.5 7.5h-30c13.807 0 25 11.193 25 25s-11.193 25-25 25h30c13.807 0 25-11.193 25-25s-11.193-25-25-25zM256 362.5c-83.119 0-150.5-67.381-150.5-150.5V57.5h301V212c0 83.119-67.381 150.5-150.5 150.5z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M376.5 57.5V212c0 78.056-59.424 142.229-135.5 149.757 4.934.488 9.937.743 15 .743 83.119 0 150.5-67.381 150.5-150.5V57.5z\"\n      ></path>\n      <circle cx=\"256\" cy=\"207.96\" r=\"94.169\" fill=\"#fff\"></circle>\n      <path\n        fill=\"#fee97d\"\n        d=\"M262.277 154.391l13.139 26.623a7 7 0 005.271 3.829l29.38 4.269c5.742.834 8.034 7.89 3.879 11.94l-21.26 20.723a6.998 6.998 0 00-2.013 6.196l5.019 29.261c.981 5.718-5.021 10.079-10.157 7.379l-26.278-13.815a7.001 7.001 0 00-6.515 0l-26.278 13.815c-5.135 2.7-11.137-1.661-10.157-7.379l5.019-29.261a7 7 0 00-2.013-6.196l-21.26-20.723c-4.155-4.05-1.862-11.106 3.879-11.94l29.38-4.269a7 7 0 005.271-3.829l13.139-26.623c2.569-5.203 9.987-5.203 12.555 0z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M313.946 201.052c4.155-4.05 1.862-11.106-3.88-11.94l-29.38-4.269a6.997 6.997 0 01-5.27-3.829l-13.139-26.623c-2.568-5.203-9.987-5.203-12.554 0l-10.888 22.061 3.874 7.85a18.632 18.632 0 0014.03 10.193c15.284 2.221 21.386 21.003 10.327 31.783a18.632 18.632 0 00-5.359 16.493l1.755 10.236 22.073 11.604c5.135 2.7 11.137-1.661 10.157-7.379l-5.019-29.261a7 7 0 012.013-6.196z\"\n      ></path>\n      <path d=\"M282.025 177.458l-13.022-26.387c-2.462-4.985-7.443-8.082-13.003-8.082s-10.541 3.097-13.003 8.083l-13.022 26.387-29.119 4.231c-5.502.799-9.987 4.581-11.706 9.868-1.718 5.288-.312 10.983 3.669 14.865l21.071 20.539-4.975 29.003c-.939 5.479 1.271 10.914 5.77 14.182s10.349 3.691 15.271 1.104L256 257.557l26.045 13.693c4.903 2.578 10.759 2.174 15.271-1.104 4.498-3.268 6.709-8.702 5.769-14.182l-4.974-29.003 21.071-20.539c3.981-3.881 5.387-9.577 3.669-14.865-1.719-5.287-6.204-9.068-11.706-9.867zm5.426 38.946a14.494 14.494 0 00-4.169 12.834l4.847 28.264-25.382-13.345a14.498 14.498 0 00-13.495 0l-25.381 13.344 4.847-28.262a14.495 14.495 0 00-4.169-12.835l-20.534-20.016 28.377-4.124a14.494 14.494 0 0010.918-7.932L256 158.618l12.69 25.714a14.494 14.494 0 0010.918 7.932l28.377 4.124zm194.096-99.749c-17.941-19.36-41.716-31.799-67.547-35.49v-16.27c16.756-1.282 30-15.316 30-32.394C444 14.58 429.421 0 411.5 0h-311C82.579 0 68 14.58 68 32.5c0 17.078 13.244 31.112 30 32.394v16.27c-25.714 3.676-49.409 16.029-67.321 35.248a7.5 7.5 0 0010.972 10.228C56.721 110.471 76.495 99.908 98 96.352v15.236c-39.204 7.62-68 42.024-68 82.652 0 22.509 8.765 43.663 24.675 59.561 15.532 15.543 36.076 24.242 57.996 24.641a157.847 157.847 0 008.007 15.038h-6.438c-54.722 0-99.24-44.519-99.24-99.24 0-14.091 2.904-27.711 8.633-40.48a7.5 7.5 0 00-13.685-6.14C3.347 162.333 0 178.019 0 194.24c0 62.992 51.248 114.24 114.24 114.24h16.729c17.756 22.957 41.679 40.906 69.267 51.348l-6.089 36.917c-18.396 5.522-32.123 21.915-33.701 41.685-25.112 1.221-45.167 22.032-45.167 47.441V497.5c0 7.995 6.505 14.5 14.5 14.5H382.22c7.995 0 14.5-6.505 14.5-14.5v-11.629c0-25.409-20.055-46.22-45.167-47.441-1.579-19.771-15.306-36.163-33.701-41.685l-6.089-36.917c27.588-10.441 51.511-28.391 69.267-51.348h16.729c62.992 0 114.24-51.248 114.24-114.24.001-28.841-10.814-56.394-30.452-77.585zM65.281 243.195C52.203 230.126 45 212.74 45 194.24c0-32.392 22.265-59.968 53-67.308V212c0 17.851 2.98 35.018 8.461 51.034-15.554-1.728-29.958-8.609-41.18-19.839zM100.5 50C90.851 50 83 42.149 83 32.5S90.851 15 100.5 15h311c9.649 0 17.5 7.851 17.5 17.5S421.149 50 411.5 50zM414 126.932c30.735 7.34 53 34.916 53 67.308 0 18.5-7.203 35.886-20.286 48.958-11.218 11.227-25.621 18.108-41.175 19.836C411.02 247.018 414 229.851 414 212zm-77.518 311.439h-22.895c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h35.634c17.921 0 32.5 14.58 32.5 32.5V497H130.279v-11.129c0-17.92 14.579-32.5 32.5-32.5h115.808c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5H175.518c1.921-16.101 15.651-28.629 32.261-28.629h96.441c16.611-.001 30.342 12.527 32.262 28.629zm-126.801-43.63l4.987-30.237C227.849 368.08 241.703 370 256 370s28.151-1.92 41.332-5.496l4.987 30.237zM256 355c-78.851 0-143-64.149-143-143V65h286v147c0 78.851-64.149 143-143 143zm141.76-61.52h-6.438a157.741 157.741 0 008.007-15.038c21.919-.399 42.463-9.097 57.991-24.637C473.235 237.903 482 216.749 482 194.24c0-40.627-28.796-75.032-68-82.652V96.352c21.605 3.57 41.449 14.208 56.545 30.498C487.604 145.259 497 169.192 497 194.24c0 54.721-44.519 99.24-99.24 99.24zM256 106.291c-56.061 0-101.67 45.609-101.67 101.669S199.939 309.629 256 309.629 357.67 264.02 357.67 207.96 312.061 106.291 256 106.291zm0 188.338c-47.79 0-86.67-38.88-86.67-86.669s38.88-86.669 86.67-86.669 86.67 38.88 86.67 86.669-38.88 86.669-86.67 86.669z\"></path>\n    </svg>\n  );\n}\n","import { Progress, ProgressProps } from 'antd';\n\ninterface TimerBarProps extends ProgressProps {\n  steps?: number;\n  value: number;\n  total: number;\n}\n\n/**\n * Time Bar presentational component used in timed operations\n * @param props\n * @returns\n */\nexport function TimerBar({\n  steps,\n  strokeLinecap,\n  total,\n  type = 'line',\n  value,\n  status = 'active',\n  ...props\n}: TimerBarProps) {\n  const percentage = 100 - (value * 100) / total;\n  return (\n    <Progress\n      percent={percentage}\n      steps={steps}\n      showInfo={false}\n      style={{ marginBottom: '1rem' }}\n      size={steps && steps > 30 ? 'small' : undefined}\n      type={type}\n      {...props}\n    />\n  );\n}\n","import { useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\nimport { TimerBar } from './TimerBar';\n\ntype TimedTimerBarProps = {\n  /**\n   * Duration in seconds\n   */\n  duration: number;\n  /**\n   * Number of ticks in the bar\n   */\n  steps: number;\n  /**\n   * Function executed when the time is up\n   */\n  onExpire: GenericFunction;\n  /**\n   * Type of bar. Default: line\n   */\n  type?: 'circle' | 'line' | 'dashboard';\n};\n\nexport function TimedTimerBar({ duration, onExpire, type, steps = 10 }: TimedTimerBarProps) {\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    autoStart: true,\n    onExpire,\n  });\n\n  const timer = minutes * 60 + seconds;\n\n  return (\n    <div>\n      {timer} <TimerBar steps={steps} value={timer} total={duration} type={type} /> {timer}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\n// Hooks\nimport { useLoading, useMock } from 'hooks';\n// Utils\nimport { shuffle } from 'utils/helpers';\n// Components\n\ntype StepSelectPromptProps = {\n  prompts: PromptCard[];\n  onSubmitPrompt: GenericFunction;\n};\n\nexport function StepSelectPrompt({ prompts, onSubmitPrompt }: StepSelectPromptProps) {\n  const { isLoading } = useLoading();\n\n  const onRandomSelect = () => {\n    onSubmitPrompt({ promptId: shuffle(prompts.map((prompt) => prompt.id))[0] });\n  };\n\n  // DEV: Auto auto-select\n  useMock(onRandomSelect, []);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Seleção de Carta\" en=\"Card Selection\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione uma das cartas abaixo a ser usada no jogo\"\n          en=\"Select one of the cards below to be used in the game\"\n        />\n      </Instruction>\n\n      <div className=\"l-cards\">\n        {prompts.map((prompt) => {\n          return (\n            <TransparentButton\n              key={prompt.id}\n              onClick={() => onSubmitPrompt({ promptId: prompt.id })}\n              disabled={isLoading}\n            >\n              <Card>{prompt.text}</Card>\n            </TransparentButton>\n          );\n        })}\n      </div>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={onRandomSelect} disabled={isLoading} ghost>\n          <Translate pt=\"Escolha pra mim\" en=\"Select for me\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitPromptAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepSelectPrompt } from './StepSelectPrompt';\nimport { ListIcon } from 'components/icons/ListIcon';\n\nfunction PhasePromptSelection({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitPrompt = useOnSubmitPromptAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<ListIcon />}\n          title={translate('Seleção da Carta', 'Card Selection')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={20}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Neste jogo, você recebe uma carta e a desenha, daí o próximo jogador tentar adivinhar o que\n                  é, daí o próximo jogador desenha a adivinhação, e por ai vai até seu album original voltar\n                  pra você.\n                  <br />\n                  Selecione a palavra a ser desenhada, talvez seja para você, talvez seja para um outro\n                  jogador.\n                </>\n              }\n              en={\n                <>\n                  In this game, you receive a prompt and will have to draw it, then the next player will\n                  attempt to guess your drawing, then the next player will draw the guess attempt, and so on\n                  until your album comes back to you.\n                  <br />\n                  Select a card to be drawn this round, it might be for you to draw or the next player... who\n                  knows?\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectPrompt prompts={user.prompts} onSubmitPrompt={onSubmitPrompt} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePromptSelection;\n","import { LINHAS_CRUZADAS_API } from 'services/adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitPromptAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-prompt',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Carta enviada com sucesso!', 'Card send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to submit the card'\n    ),\n  });\n\n  return (payload: SubmitPromptPayload) => {\n    request({\n      action: 'SUBMIT_PROMPT',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-guess',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Resposta enviado com sucesso!', 'Guess submitted successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua resposta',\n      'Oops, the application failed to submit your guess'\n    ),\n  });\n\n  return (payload: SubmitGuessPayload) => {\n    request({\n      action: 'SUBMIT_GUESS',\n      ...payload,\n    });\n  };\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n\n// Components\nimport { Step } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { TimedTimerBar } from 'components/timers';\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { AnimatedLoaderIcon } from 'components/icons/AnimatedLoaderIcon';\n\ntype StepTimedDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitDrawing: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepTimedDrawing({ currentPrompt, onSubmitDrawing, players }: StepTimedDrawingProps) {\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const onExpire = () => {\n    setTimesUp(true);\n    onSubmit();\n  };\n\n  const onSubmit = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(lines),\n    });\n\n  const author = players[currentPrompt.author];\n\n  return (\n    <Step>\n      <Card size=\"large\" header={author.name} color={AVATARS[author.avatarId].color}>\n        {currentPrompt.content}\n      </Card>\n      <TimedTimerBar steps={90} duration={DRAWING_TIME_IN_SECONDS} onExpire={onExpire} />\n      {isTimesUp ? (\n        <AnimatedLoaderIcon style={{ background: 'white', width: '250px', padding: '125px' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} showControls />\n      )}\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={() => onSubmit()} size=\"large\">\n          <Translate pt=\"Enviar desenho\" en=\"Submit drawing\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","export const DRAWING_TIME_IN_SECONDS = 120;\n\nexport const PAGE_DURATION = 7;\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\n\nimport { StepTimedDrawing } from './StepTimedDrawing';\nimport { DrawingIcon } from 'components/icons/DrawingIcon';\n\nfunction PhaseDrawing({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.DRAWING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DrawingIcon />}\n          title={translate('Desenhe', 'Draw')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          buttonText={translate('Um dó, lá, si... vamos ir... já!', 'Ready! Set! Go!')}\n          withoutTimer\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você receberá uma carta.\n                  <br />\n                  Desenhe-a da melhor maneira possível, você tem {DRAWING_TIME_IN_SECONDS} segundos.\n                </>\n              }\n              en={\n                <>\n                  You will receive a card.\n                  <br />\n                  Draw it the best way possible, you have {DRAWING_TIME_IN_SECONDS} seconds.\n                </>\n              }\n            />\n\n            <TurnOrder\n              title={translate('Ordem dos Álbuns', \"Albums' Order\")}\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepTimedDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitDrawing={onSubmitDrawing}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDrawing;\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage, useMock } from 'hooks';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\n// Components\n\ntype StepNameDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitGuess: GenericFunction;\n  players: GamePlayers;\n  // for mock\n  user: GamePlayer;\n  round: GameRound;\n};\n\nexport function StepNameDrawing({\n  currentPrompt,\n  onSubmitGuess,\n  players,\n  user,\n  round,\n}: StepNameDrawingProps) {\n  const { translate } = useLanguage();\n  const [title, setTitle] = useState<string>('');\n\n  const author = players[currentPrompt.author];\n\n  const onTitleChange = (e: any) => setTitle(e.target.value);\n\n  const onSubmitTitle = () => onSubmitGuess({ guess: title });\n\n  // DEV: Auto write\n  useMock(() => onSubmitGuess({ guess: `${round.current}${user.id}` }), []);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"O que é isso?\" en=\"What is this?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={author} /> desenhou isso, o que é?\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={author} /> draw this, so what is it?\n            </>\n          }\n        />\n      </Instruction>\n\n      <CanvasSVG drawing={currentPrompt.content} className=\"l-drawing\" size={300} />\n\n      <Input\n        onChange={onTitleChange}\n        size=\"large\"\n        placeholder={translate('Escreva seu chute aqui', 'Write your guess here')}\n        className=\"l-drawing-guess-input\"\n        onPressEnter={onSubmitTitle}\n      />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={onSubmitTitle} size=\"large\" disabled={!title}>\n          <Translate pt=\"Enviar\" en=\"Submit name\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitGuessAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepNameDrawing } from './StepNameDrawing';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { WriteIdeaIcon } from 'components/icons/WriteIdeaIcon';\n\nfunction PhaseNaming({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitGuess = useOnSubmitGuessAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.NAMING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<WriteIdeaIcon />}\n          title={translate('O que é isso?', 'What is it?')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate pt=\"Tente adivinhar o que é a obra\" en=\"Try to guess what the artwork is\" />\n\n            <TurnOrder\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepNameDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitGuess={onSubmitGuess}\n          players={players}\n          user={user}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseNaming;\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { CanvasSVG } from 'components/canvas';\nimport { Avatar, AvatarName } from 'components/avatars';\n// Componentes\n\ntype PageProps = {\n  slide: LSlide;\n  players: GamePlayers;\n  albumColor: string;\n  currentPage: number;\n  totalSlides: number;\n};\n\nexport function Page({ slide, players, albumColor, currentPage, totalSlides }: PageProps) {\n  const author = players[slide.author];\n  const animationClass = useMemo(() => getAnimationClass('flipInY'), []);\n\n  return (\n    <div className=\"l-page\" style={{ background: slide.type === 'cover' ? albumColor : 0 }}>\n      <div className=\"l-page__pagination\">\n        <AntAvatar style={{ backgroundColor: albumColor }}>{currentPage + 1}</AntAvatar>\n        <span className=\"l-page__pagination-of\">\n          <Translate pt=\"de\" en=\"of\" />\n        </span>\n        <AntAvatar style={{ backgroundColor: albumColor }}>{totalSlides}</AntAvatar>\n      </div>\n\n      {slide.type === 'cover' && (\n        <div className={clsx('l-page__container', animationClass)} style={{ backgroundColor: albumColor }}>\n          <Avatar id={author.avatarId} size={96} />\n        </div>\n      )}\n\n      {slide.type === 'title' &&\n        (currentPage === 0 ? (\n          <div className={clsx('l-page__container', animationClass)}>\n            <Card>{slide.content}</Card>\n          </div>\n        ) : (\n          <div className={clsx('l-page__container l-page__text', animationClass)}>\"{slide.content}\"</div>\n        ))}\n\n      {slide.type === 'drawing' && (\n        <CanvasSVG\n          drawing={slide.content}\n          className={clsx('l-page__container l-artwork', animationClass)}\n          size={350}\n        />\n      )}\n\n      {slide.type !== 'cover' && (\n        <div className=\"l-page__author\">\n          <Translate pt=\"por \" en=\"by \" />\n          <AvatarName player={author} addressUser />\n        </div>\n      )}\n    </div>\n  );\n}\n","// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\nimport { Page } from './Page';\n\ntype AlbumProps = {\n  albumEntry: LAlbumEntry;\n  currentPage: number;\n  players: GamePlayers;\n};\n\nexport function Album({ albumEntry, currentPage, players }: AlbumProps) {\n  const albumOwner = players[albumEntry.id];\n  const albumColor = getAvatarColorById(albumOwner.avatarId);\n\n  return (\n    <div className=\"l-album\">\n      <h2 className=\"l-album__owner\" style={{ backgroundColor: albumColor }}>\n        <Avatar id={albumOwner.avatarId} size=\"large\" />{' '}\n        <Translate pt={<>Álbum de {albumOwner.name}</>} en={<>{albumOwner.name}'s Album</>} />\n      </h2>\n\n      <Page\n        slide={albumEntry.slides[currentPage]}\n        players={players}\n        albumColor={albumColor}\n        currentPage={currentPage}\n        totalSlides={albumEntry.slides.length}\n      />\n    </div>\n  );\n}\n","import { Button, Space } from 'antd';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n\nimport { AdminNextRoundButton } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { inNSeconds } from 'utils/helpers';\nimport { Album } from './components/Album';\nimport { PAGE_DURATION } from './utils/constants';\n\ntype StepAlbumProps = {\n  players: GamePlayers;\n  album: LAlbumEntry[];\n};\n\nexport function StepAlbum({ players, album }: StepAlbumProps) {\n  const [areControlsLocked, setAreControlsLocked] = useState(true);\n  const [currentEntry, setCurrentEntry] = useState(0);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [barSize, setBarSize] = useState(1);\n\n  const totalPages = useMemo(() => {\n    return album.reduce((total, albumEntry) => total + albumEntry.slides.length, 0);\n  }, [album]);\n\n  const totalTime = PAGE_DURATION * totalPages;\n\n  const { minutes, seconds, isRunning } = useTimer({\n    expiryTimestamp: inNSeconds(PAGE_DURATION * totalPages),\n    autoStart: true,\n    onExpire: () => setAreControlsLocked(false),\n  });\n\n  const currentAlbumEntry = album[currentEntry];\n  const currentAlbumLastPageIndex = (currentAlbumEntry?.slides?.length || 0) - 1;\n  const isLastAlbum = !Boolean(album[currentEntry + 1]);\n\n  const time = minutes * 60 + seconds;\n\n  // Control Functions\n  const onPrevAlbum = () => {\n    setCurrentEntry(currentEntry - 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  };\n  const onPrevPage = () => setCurrentPage((c) => c - 1);\n  const onNextPage = useCallback(() => {\n    setCurrentPage((c) => c + 1);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n  const onNextAlbum = useCallback(() => {\n    setCurrentEntry((c) => c + 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n\n  useEffect(() => {\n    if (isRunning && time < totalTime && time % PAGE_DURATION === 0) {\n      // If next page exists, go for it, otherwise, next album\n      if (currentPage < currentAlbumLastPageIndex) {\n        onNextPage();\n      } else if (!isLastAlbum) {\n        onNextAlbum();\n      }\n    }\n  }, [time, isRunning, currentAlbumLastPageIndex]); // eslint-disable-line\n\n  return (\n    <Step className=\"l-step-album\">\n      <Title>\n        <Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />\n      </Title>\n      {currentPage < 0 || !currentAlbumEntry ? (\n        <div className=\"a\">?</div>\n      ) : (\n        <Album albumEntry={currentAlbumEntry} currentPage={currentPage} players={players} />\n      )}\n      <div className=\"l-timer-bar\">\n        <span\n          className=\"l-timer-bar__pill\"\n          style={{\n            width: `${Math.abs((100 * barSize) / totalPages)}%`,\n            backgroundColor: 'gray',\n          }}\n        />\n      </div>\n      <Space className=\"space-container\" align=\"center\">\n        <Button disabled={areControlsLocked || currentEntry === 0} onClick={onPrevAlbum}>\n          Prev Album\n        </Button>\n        <Button disabled={areControlsLocked || currentPage === 0} onClick={onPrevPage}>\n          Prev Page\n        </Button>\n        <Button\n          disabled={areControlsLocked || currentPage === currentAlbumLastPageIndex}\n          onClick={onNextPage}\n        >\n          Next Page\n        </Button>\n        <Button disabled={areControlsLocked || isLastAlbum} onClick={onNextAlbum}>\n          Next Album\n        </Button>\n      </Space>\n      <AdminNextRoundButton />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepAlbum } from './StepAlbum';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { PhotoAlbumIcon } from 'components/icons/PhotoAlbumIcon';\n\nfunction PhasePresentation({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PRESENTATION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PhotoAlbumIcon />}\n          title={translate('Álbum de Fotos', 'Album de Fotos')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          duration={7}\n        >\n          <Instruction>\n            <Translate pt=\"A ordem dos albums será:\" en=\"The albums' order will be:\" />\n            <TurnOrder players={players} order={state.gameOrder} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepAlbum players={players} album={state.album} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePresentation;\n","// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { GameOverWrapper } from 'components/game-over';\nimport { TrophyIcon } from 'components/icons/TrophyIcon';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  const slideCount = Math.min(state.album[0]?.slides.length ?? 5, 8);\n  const cardWidth = useCardWidth(slideCount, 32, 100);\n\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon={<TrophyIcon />}>\n      <ul className=\"l-album-strips\">\n        {state.album.map((albumEntry: LAlbumEntry) => (\n          <li key={`album-strip-${albumEntry.id}`} className=\"l-album-strip-entry\">\n            <div className=\"l-album-strip-entry__author\">\n              <AvatarName player={players[albumEntry.id]} />\n            </div>\n            <ul\n              className=\"l-album-strip\"\n              style={{ gridTemplateColumns: `repeat(${albumEntry.slides.length - 1}, 1fr)` }}\n            >\n              {albumEntry.slides.slice(1).map((slide) => {\n                const key = `slide-${albumEntry.id}-${slide.author}-${slide.type}`;\n\n                if (slide.type === 'title') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-text\" style={{ width: `${cardWidth}px` }}>\n                      {slide.content}\n                    </li>\n                  );\n                }\n\n                if (slide.type === 'drawing') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-drawing\">\n                      <CanvasSVG drawing={slide.content} size={cardWidth} />\n                    </li>\n                  );\n                }\n                return <></>;\n              })}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhasePromptSelection from './PhasePromptSelection';\nimport PhaseDrawing from './PhaseDrawing';\nimport PhaseNaming from './PhaseNaming';\nimport PhasePresentation from './PhasePresentation';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionInstrumentosCodificados({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION:\n        return PhasePromptSelection;\n      case PHASES.LINHAS_CRUZADAS.DRAWING:\n        return PhaseDrawing;\n      case PHASES.LINHAS_CRUZADAS.NAMING:\n        return PhaseNaming;\n      case PHASES.LINHAS_CRUZADAS.PRESENTATION:\n        return PhasePresentation;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.LINHAS_CRUZADAS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionInstrumentosCodificados;\n"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","className","pt","en","value","min","max","step","onChange","CanvasSVG","drawing","size","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","xmlns","viewBox","overflow","style","width","index","d","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","startDrawing","current","stopDrawing","startLine","e","pos","target","getStage","getPointerPosition","Math","round","finishLine","point","lastLineEntry","concat","splice","handleMouseDown","handleMouseMove","lastLine","handleMouseUp","handleOffsetMouseUp","handleOffsetMouseDown","strokeWidthBySize","small","medium","large","direction","align","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onMouseLeave","window","document","addEventListener","onMouseEnter","removeEventListener","clsx","id","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","TrophyIcon","props","cx","cy","r","TimerBar","steps","total","type","status","percentage","percent","showInfo","marginBottom","undefined","TimedTimerBar","duration","onExpire","useTimer","expiryTimestamp","inNSeconds","autoStart","timer","minutes","seconds","StepSelectPrompt","prompts","onSubmitPrompt","isLoading","useLoading","onRandomSelect","promptId","shuffle","prompt","useMock","fullWidth","contained","text","ghost","players","state","info","translate","useLanguage","useStep","goToNextStep","setStep","user","useUser","isUserReady","useIsUserReady","request","useAPICall","apiFunction","LINHAS_CRUZADAS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitPromptAPIRequest","phase","allowedPhase","PHASES","conditions","icon","ListIcon","title","onClose","currentRound","StepTimedDrawing","currentPrompt","onSubmitDrawing","isTimesUp","setTimesUp","onSubmit","stringify","author","header","name","color","AVATARS","avatarId","content","AnimatedLoaderIcon","background","padding","useOnSubmitDrawingAPIRequest","DrawingIcon","buttonText","withoutTimer","order","gameOrder","activePlayerId","reorderByUser","StepNameDrawing","onSubmitGuess","setTitle","onSubmitTitle","guess","player","placeholder","onPressEnter","useOnSubmitGuessAPIRequest","WriteIdeaIcon","Page","slide","albumColor","currentPage","totalSlides","animationClass","useMemo","getAnimationClass","backgroundColor","addressUser","Album","albumEntry","albumOwner","getAvatarColorById","slides","StepAlbum","album","areControlsLocked","setAreControlsLocked","currentEntry","setCurrentEntry","setCurrentPage","barSize","setBarSize","totalPages","reduce","totalTime","isRunning","currentAlbumEntry","currentAlbumLastPageIndex","isLastAlbum","Boolean","time","onNextPage","useCallback","c","s","onNextAlbum","useEffect","abs","PhotoAlbumIcon","unskippable","slideCount","cardWidth","useCardWidth","announcementIcon","gridTemplateColumns","slice","key","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhasePromptSelection","PhaseDrawing","PhaseNaming","PhasePresentation","PhaseGameOver","PageError"],"sourceRoot":""}