{"version":3,"file":"static/js/442.fece0226.chunk.js","mappings":"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","sources":["games/retrato-falado/constants.ts","games/retrato-falado/ViewAnnouncement.tsx","games/retrato-falado/ViewLastSeconds.tsx","games/retrato-falado/MonsterCard.tsx","games/retrato-falado/ViewSketching.tsx","games/retrato-falado/ViewWitnessing.tsx","games/retrato-falado/StepTestimonial.tsx","games/retrato-falado/PhaseCompositeSketch.tsx","games/retrato-falado/api-requests.ts","games/retrato-falado/StepVote.tsx","games/retrato-falado/PhaseEvaluation.tsx","games/retrato-falado/MonsterSketches.tsx","games/retrato-falado/StepResults.tsx","games/retrato-falado/StepRanking.tsx","games/retrato-falado/PhaseReveal.tsx","games/retrato-falado/PhaseGameOver.tsx","games/retrato-falado/SessionRetratoFalado.tsx"],"sourcesContent":["export const VIEWS = {\n  WITNESSING: 'WITNESSING',\n  ANNOUNCEMENT: 'ANNOUNCEMENT',\n  SKETCHING: 'SKETCHING',\n  FINISHING: 'FINISHING',\n};\n\nconst MEMORY_TIME = 20;\nconst ANNOUNCEMENT_TIME = 5;\nconst SKETCH_TIME = 120;\nconst EXTRA_TIME = 5;\n\nexport const TIMES = {\n  MEMORY: MEMORY_TIME,\n  ANNOUNCEMENT: ANNOUNCEMENT_TIME,\n  SKETCH: SKETCH_TIME,\n  EXTRA: EXTRA_TIME,\n  TOTAL: MEMORY_TIME + ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  MEMORY_MARK: ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  ANNOUNCEMENT_MARK: SKETCH_TIME + EXTRA_TIME,\n  SKETCH_MARK: EXTRA_TIME,\n};\n","import { PhaseAnnouncement, Translate } from '../../components';\n\ntype ViewAnnouncementProps = {\n  isUserTheWitness: boolean;\n};\n\nfunction ViewAnnouncement({ isUserTheWitness }: ViewAnnouncementProps) {\n  return (\n    <PhaseAnnouncement\n      title={\n        isUserTheWitness ? (\n          <Translate pt=\"Descreva!\" en=\"Describe!\" />\n        ) : (\n          <Translate pt=\"Hora de desenhar!\" en=\"Time to draw!\" />\n        )\n      }\n      unskippable\n      duration={5}\n      type={isUserTheWitness ? 'timer' : 'sketch'}\n      onClose={() => {}}\n    ></PhaseAnnouncement>\n  );\n}\n\nexport default ViewAnnouncement;\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from '../../components';\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nfunction ViewLastSeconds({ isUserTheWitness, remainingTime, lines, setLines }: ViewSketchingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done! \" />\n      </Title>\n      <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n      <Instruction contained>\n        <Translate\n          pt=\"Boca fechada! Aguarde os jogadores darem os últimos retoques.\"\n          en=\"Shut up! Wait for the other players to finish their drawings.\"\n        />\n      </Instruction>\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Termine!\" en=\"Finish it!\" />\n      </Title>\n      <Instruction contained>\n        <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n      </Instruction>\n      <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\nexport default ViewLastSeconds;\n","import clsx from 'clsx';\n// Design Resources\nimport { Button, Space, SpaceProps } from 'antd';\nimport { RotateLeftOutlined, RotateRightOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useGlobalState } from '../../hooks';\n// Components\nimport { ImageCard, Translate } from '../../components';\nimport { useEffect } from 'react';\n\ninterface MonsterCardProps extends SpaceProps {\n  currentMonster: Monster;\n  showControls?: boolean;\n}\n\nfunction MonsterCard({ currentMonster, showControls = true, ...props }: MonsterCardProps) {\n  const [monsterOrientation, setMonsterOrientation] = useGlobalState('monsterOrientation');\n  const cardWidth = useCardWidth(5, 16, 120, 360);\n\n  useEffect(() => {\n    if (currentMonster.orientation === 'horizontal') {\n      setMonsterOrientation(currentMonster.orientation);\n    }\n  }, []); // eslint-disable-line\n\n  const onChangeOrientation = () => {\n    const newOrientation = monsterOrientation === 'vertical' ? 'horizontal' : 'vertical';\n    setMonsterOrientation(newOrientation);\n  };\n\n  const baseClass = 'r-monster-card';\n  return (\n    <Space direction=\"vertical\" align=\"center\" {...props}>\n      <ImageCard\n        imageId={currentMonster.id}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          monsterOrientation === 'vertical' ? `${baseClass}--vertical` : `${baseClass}--horizontal`\n        )}\n      />\n      {showControls && (\n        <Button onClick={onChangeOrientation}>\n          {monsterOrientation === 'vertical' ? <RotateRightOutlined /> : <RotateLeftOutlined />}\n          <Translate pt=\"Girar\" en=\"Rotate\" />\n        </Button>\n      )}\n    </Space>\n  );\n}\n\nexport default MonsterCard;\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from '../../components';\nimport MonsterCard from './MonsterCard';\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingSketchingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nfunction ViewSketching({ isUserTheWitness, remainingSketchingTime, lines, setLines }: ViewSketchingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Descreva o monstro!\" en=\"Describe the monstro!\" />\n      </Title>\n      <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n      <MonsterCard currentMonster={{ id: 'md-bs-000', orientation: 'vertical' }} showControls={false} />\n      <Instruction contained>\n        <Translate\n          pt=\"Tente dar o maior número de detalhes possível. Os jogadores podem te fazer perguntas.\"\n          en=\"Try to give the largest number of details. Player may ask you questions too.\"\n        />\n      </Instruction>\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Desenhe!\" en=\"Sketch it!\" />\n      </Title>\n      <Instruction contained>\n        {remainingSketchingTime > 0 ? (\n          <Translate\n            pt=\"Você pode também fazer perguntas à testemunha.\"\n            en=\"You may also ask the witness questions\"\n          />\n        ) : (\n          <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n        )}\n      </Instruction>\n      <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\nexport default ViewSketching;\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from '../../components';\nimport MonsterCard from './MonsterCard';\n\ntype ViewWitnessingProps = {\n  isUserTheWitness: boolean;\n  remainingWitnessingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n  currentMonster: Monster;\n};\n\nfunction ViewWitnessing({\n  isUserTheWitness,\n  currentMonster,\n  remainingWitnessingTime,\n  lines,\n  setLines,\n}: ViewWitnessingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Memorize!\" en=\"Memorize!\" />\n      </Title>\n      <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n      <MonsterCard currentMonster={currentMonster} />\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"A testemunha está tendo um flashback do monstro.\"\n          en=\"The witness is having a flashback of the monster event now.\"\n        />\n      </Instruction>\n      <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\n\nexport default ViewWitnessing;\n","import { useEffect, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { TIMES, VIEWS } from './constants';\nimport { inNSeconds } from '../../utils/helpers';\n// Components\nimport { ViewSwitch } from '../../components';\nimport ViewAnnouncement from './ViewAnnouncement';\nimport ViewLastSeconds from './ViewLastSeconds';\nimport ViewSketching from './ViewSketching';\nimport ViewWitnessing from './ViewWitnessing';\nimport { useGlobalState } from '../../hooks';\n\ntype StepTestimonialProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitSketch: GenericFunction;\n  onSubmitOrientation: GenericFunction;\n};\n\nfunction StepTestimonial({\n  isUserTheWitness,\n  currentMonster,\n  onSubmitSketch,\n  onSubmitOrientation,\n}: StepTestimonialProps) {\n  const [monsterOrientation] = useGlobalState('monsterOrientation');\n  const [view, setView] = useState(VIEWS.WITNESSING);\n  const [lines, setLines] = useState<any>([]);\n\n  const onEnd = () => {\n    if (isUserTheWitness && monsterOrientation === 'horizontal') {\n      // Submit orientation change if any\n      onSubmitOrientation({ orientation: monsterOrientation });\n    }\n    onSubmitSketch({ sketch: JSON.stringify(lines) });\n  };\n\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(TIMES.TOTAL),\n    autoStart: true,\n    onExpire: onEnd,\n  });\n\n  const timer = minutes * 60 + seconds;\n\n  useEffect(() => {\n    // When time is done for memorizing\n    if (timer === TIMES.MEMORY_MARK) {\n      setView(VIEWS.ANNOUNCEMENT);\n    } else if (timer === TIMES.ANNOUNCEMENT_MARK) {\n      setView(VIEWS.SKETCHING);\n    } else if (timer === TIMES.SKETCH_MARK) {\n      setView(VIEWS.FINISHING);\n    }\n  }, [timer]);\n\n  return (\n    <ViewSwitch\n      cases={[\n        view === VIEWS.WITNESSING,\n        view === VIEWS.ANNOUNCEMENT,\n        view === VIEWS.SKETCHING,\n        view === VIEWS.FINISHING,\n      ]}\n    >\n      <ViewWitnessing\n        isUserTheWitness={isUserTheWitness}\n        currentMonster={currentMonster}\n        remainingWitnessingTime={timer - TIMES.MEMORY_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewAnnouncement isUserTheWitness={isUserTheWitness} />\n      <ViewSketching\n        isUserTheWitness={isUserTheWitness}\n        remainingSketchingTime={timer - TIMES.SKETCH_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewLastSeconds\n        isUserTheWitness={isUserTheWitness}\n        remainingTime={timer}\n        lines={lines}\n        setLines={setLines}\n      />\n    </ViewSwitch>\n  );\n}\n\nexport default StepTestimonial;\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe } from '../../hooks';\nimport { useOnSubmitOrientationAPIRequest, useOnSubmitSketchAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\nimport { TIMES } from './constants';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from '../../components';\nimport StepTestimonial from './StepTestimonial';\n\nfunction PhaseCompositeSketch({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const isUserReady = useIsUserReady(players, state);\n  const [step, setStep] = useState(0);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitSketch = useOnSubmitSketchAPIRequest(setStep);\n  const onSubmitOrientation = useOnSubmitOrientationAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.COMPOSITE_SKETCH}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={() => setStep(1)}\n          buttonText=\" \"\n          time={7}\n          unskippable\n          circleColor=\"green\"\n        >\n          <Instruction contained>\n            <Translate\n              pt={\n                <>\n                  Um meliante monstruoso está a solta!\n                  <br />\n                  A testemunha <AvatarName player={witness} /> tentará relembrar o incidente!\n                </>\n              }\n              en={\n                <>\n                  A monstrous miscreant is on the loose!\n                  <br />\n                  The witness <AvatarName player={witness} /> must recall all of its features!\n                </>\n              }\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"monster\"\n          title={translate('Memorize! Descreva! Desenhe!', 'Memorize! Describe! Sketch!')}\n          onClose={() => setStep(2)}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 2 ? 20 : 5}\n          unskippable\n        >\n          <Instruction>\n            {isUserTheWitness ? (\n              <Translate\n                pt={\n                  <>\n                    Você terá {TIMES.MEMORY} segundos para memorizar as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para descrevê-lo para\n                    os outros jogadores.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    You'll have {TIMES.MEMORY} seconds to memorize the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to describe it to the other\n                    players.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            ) : (\n              <Translate\n                pt={\n                  <>\n                    A testemunha <AvatarName player={witness} /> terá {TIMES.MEMORY} segundos para memorizar\n                    as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para desenhá-lo\n                    enquanto a testemunha o descreve.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    The witness <AvatarName player={witness} /> will have {TIMES.MEMORY} seconds to memorize\n                    the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to draw the monster while\n                    the witness describes it.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            )}\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTestimonial\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          onSubmitSketch={onSubmitSketch}\n          onSubmitOrientation={onSubmitOrientation}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCompositeSketch;\n","import { RETRATO_FALADO_API } from '../../adapters';\n\nimport { useAPICall, useLanguage } from '../../hooks';\n\nexport function useOnSubmitOrientationAPIRequest(setStep: GenericFunction) {\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n  });\n\n  return (payload: SubmitOrientationPayload) => {\n    request({\n      action: 'SUBMIT_ORIENTATION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitSketchAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Desenho enviado com sucesso',\n      \"Time's up! Sketch submitted successfully\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your sketch'\n    ),\n  });\n\n  return (payload: SubmitSketchPayload) => {\n    request({\n      action: 'SUBMIT_SKETCH',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVoteAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-vote',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Voto enviado com sucesso', 'Vote submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu voto',\n      'Oops, the application failed to send your vote'\n    ),\n  });\n\n  return (payload: SubmitVotePayload) => {\n    request({\n      action: 'SUBMIT_VOTE',\n      ...payload,\n    });\n  };\n}\n","import { useEffect } from 'react';\n// Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { useCardWidth, useGlobalState } from '../../hooks';\n// Components\nimport {\n  Avatar,\n  CanvasResizer,\n  CanvasSVG,\n  ButtonContainer,\n  Instruction,\n  Title,\n  Translate,\n} from '../../components';\n\nimport MonsterCard from './MonsterCard';\n\ntype StepVoteProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitVote: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n};\n\nfunction StepVote({\n  isUserTheWitness,\n  currentMonster,\n  sketches,\n  onSubmitVote,\n  user,\n  players,\n}: StepVoteProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  return (\n    <div>\n      <Title>\n        <Translate pt=\"Vote!\" en=\"Vote!\" />\n      </Title>\n      <Instruction contained>\n        {isUserTheWitness ? (\n          <Translate\n            pt={\n              <>\n                Você só ganha ponto se você escolher o desenho mais votado.\n                <br />\n                Caso você não escolha o mais votado, o jogador que você escolher ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                You only score if you choose the best sketch (the one with the most votes).\n                <br />\n                If you didn't pick the one, the player you chose gets 1 point.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                Vote no desenho que mais se aproxima do monstro.\n                <br />\n                Você não pode votar em si mesmo.\n                <br />O desenho (ou desenhos) mais votado receberá 1 ponto!\n              </>\n            }\n            en={\n              <>\n                Vote for the sketch that best represents the monster.\n                <br />\n                You cannot vote for yourself.\n                <br />\n                The sketch (or sketches) with the most votes gets 1 point.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <CanvasResizer />\n\n      <ButtonContainer>\n        {sketches.map((sketchObj) => {\n          const player = players[sketchObj.playerId];\n          return (\n            <Space direction=\"vertical\" align=\"center\" key={`sketch-for-player-${sketchObj.playerId}`}>\n              <CanvasSVG\n                key={`sketch-${sketchObj.playerId}`}\n                size={canvasSize || canvasWidth}\n                drawing={sketchObj.sketch}\n                className=\"r-sketch\"\n              />\n              <Button\n                type=\"primary\"\n                onClick={() => onSubmitVote({ vote: player.id })}\n                disabled={sketchObj.playerId === user.id}\n              >\n                <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n              </Button>\n            </Space>\n          );\n        })}\n      </ButtonContainer>\n\n      <ButtonContainer>\n        <MonsterCard currentMonster={currentMonster} />\n      </ButtonContainer>\n    </div>\n  );\n}\n\nexport default StepVote;\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser } from '../../hooks';\nimport { useOnSubmitVoteAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from '../../components';\nimport StepVote from './StepVote';\n\nfunction PhaseEvaluation({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const [step, setStep] = useState(0);\n  const [, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitVote = useOnSubmitVoteAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.EVALUATION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"choice\"\n          title={translate('Vote!', 'Vote!')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={<>Vote no desenho que você acha que mais parece com o mostro meliante.</>}\n              en={<>Vote for the sketch that best represents the monster.</>}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepVote\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          onSubmitVote={onSubmitVote}\n          user={user}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseEvaluation;\n","// Design Resources\nimport { Space } from 'antd';\n// Components\nimport { Avatar, CanvasSVG } from '../../components';\n\ntype MonsterSketchesProps = {\n  sketches: Sketch[];\n  players: Players;\n  canvasSize: number;\n  canvasWidth: number;\n};\n\nfunction MonsterSketches({ sketches, players, canvasSize, canvasWidth }: MonsterSketchesProps) {\n  return (\n    <>\n      {sketches.map((sketchObj) => {\n        const player = players[sketchObj.playerId];\n        return (\n          <Space\n            key={`monster-sketch-item-${sketchObj.playerId}`}\n            direction=\"vertical\"\n            align=\"center\"\n            className=\"r-monster-sketch\"\n          >\n            <CanvasSVG\n              key={`sketch-${sketchObj.playerId}`}\n              size={canvasSize || canvasWidth}\n              drawing={sketchObj.sketch}\n              className=\"r-sketch\"\n            />\n            <div>\n              <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n            </div>\n          </Space>\n        );\n      })}\n    </>\n  );\n}\n\nexport default MonsterSketches;\n","// Utils\nimport { useCardWidth, useGlobalState } from '../../hooks';\n// Components\nimport {\n  AvatarName,\n  ButtonContainer,\n  Instruction,\n  Step,\n  TimedButton,\n  Title,\n  Translate,\n} from '../../components';\nimport MonsterCard from './MonsterCard';\nimport MonsterSketches from './MonsterSketches';\n\ntype StepResultsProps = {\n  currentMonster: Monster;\n  setStep: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n  mostVotes: PlayerId[];\n  witnessVote: any;\n  witness: Player | PlainObject;\n};\n\ntype Sketches = {\n  mostVotedSketches: Sketch[];\n  otherSketches: Sketch[];\n};\n\nfunction StepResults({\n  sketches,\n  players,\n  currentMonster,\n  setStep,\n  mostVotes,\n  witnessVote,\n  witness,\n}: StepResultsProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize] = useGlobalState('canvasSize');\n\n  const { mostVotedSketches, otherSketches } = sketches.reduce(\n    (acc: Sketches, sketch) => {\n      if (mostVotes.includes(sketch.playerId)) {\n        acc.mostVotedSketches.push(sketch);\n      } else {\n        acc.otherSketches.push(sketch);\n      }\n      return acc;\n    },\n    {\n      mostVotedSketches: [],\n      otherSketches: [],\n    }\n  );\n\n  return (\n    <Step fullWidth>\n      <Title>\n        {mostVotes.length > 1 ? (\n          <Translate\n            pt=\"Os monstros mais votados foram...\"\n            en=\"The monsters who got the most votes were...\"\n          />\n        ) : (\n          <Translate pt=\"O mostro mais votado foi...\" en=\"The monster who got the most votes was...\" />\n        )}\n      </Title>\n\n      <Instruction contained>\n        {mostVotes.length > 1 ? (\n          <Translate pt=\"Esses jogadores ganharam 3 pontos cada.\" en=\"These players get 3 points each.\" />\n        ) : (\n          <Translate pt=\"Esse jogador ganha 3 pontos.\" en=\"This player gets 3 points.\" />\n        )}\n      </Instruction>\n\n      <div className=\"r-monster-list\">\n        <MonsterCard currentMonster={currentMonster} style={{ width: `${canvasWidth * 1.5}px` }} />\n        <MonsterSketches\n          sketches={mostVotedSketches}\n          players={players}\n          canvasSize={canvasSize}\n          canvasWidth={canvasWidth}\n        />\n      </div>\n\n      <Instruction contained>\n        {mostVotes.includes(witnessVote) ? (\n          <Translate\n            pt={\n              <>\n                A testemunha <AvatarName player={witness} /> votou no mais votado, logo, é uma testemunha\n                confiável e ganha 3 pontos também.\n              </>\n            }\n            en={\n              <>\n                The witness <AvatarName player={witness} /> voted with the group which means s(he) is a\n                credible witness and gets 3 points as well.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                A testemunha achou que o desenho de <AvatarName player={players[witnessVote]} /> foi o melhor,\n                esse jogador ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                The witness thought that <AvatarName player={players[witnessVote]} />\n                's sketch was the best, so s(he) gets 1 point.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <TimedButton label=\"Ranking\" duration={30} onExpire={() => setStep(2)} onClick={() => setStep(2)} />\n\n      <Title level={3} className=\"r-other-sketches-title\">\n        <Translate pt=\"Outros desenhos\" en=\"Other sketches\" />\n      </Title>\n\n      <ButtonContainer>\n        <MonsterSketches\n          sketches={otherSketches}\n          players={players}\n          canvasSize={canvasSize / 1.5}\n          canvasWidth={canvasWidth / 1.5}\n        />\n      </ButtonContainer>\n    </Step>\n  );\n}\n\nexport default StepResults;\n","import { AdminNextRoundButton } from '../../components/admin';\nimport { Instruction, RankingBoard, Step, Title, Translate } from '../../components';\n\ntype StepRankingProps = {\n  ranking: any;\n  players: Players;\n  round: GameRound;\n};\n\nfunction StepRanking({ ranking, players, round }: StepRankingProps) {\n  return (\n    <Step fullWidth>\n      <Title>Ranking</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Distribuição de pontos: Mais votado | Votou com o grupo | Votado pela testemunha\"\n          en=\"Points Distribution: Most votes | Voted with the group | Voted by the witness\"\n        />\n      </Instruction>\n\n      <RankingBoard ranking={ranking} players={players} />\n      <AdminNextRoundButton round={round} />\n    </Step>\n  );\n}\n\nexport default StepRanking;\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from '../../components';\nimport StepResults from './StepResults';\nimport StepRanking from './StepRanking';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const [step, setStep] = useState(0);\n  const [witness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"quality-seal\"\n          title={translate('Resultado', 'Results')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt={<>E o mais votado é...</>} en={<>And the one who got the most votes is...</>} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          witness={witness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          mostVotes={state.mostVotes}\n          witnessVote={state.witnessVote}\n          user={user}\n          players={players}\n          setStep={setStep}\n        />\n\n        {/* Step 2 */}\n        <StepRanking ranking={state.ranking} players={players} round={state.round} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Hooks\nimport { useCardWidth } from '../../hooks';\n// Components\nimport { GameOverWrapper, Title, Translate } from '../../components';\nimport MonsterSketches from './MonsterSketches';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  const canvasWidth = useCardWidth(6, 16, 150, 500);\n\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\">\n      <div>\n        <Title level={2}>\n          <Translate pt=\"Desenhos\" en=\"Sketches\" />\n        </Title>\n        <div className=\"r-gallery\">\n          <MonsterSketches\n            sketches={state.gallery}\n            players={players}\n            canvasSize={canvasWidth}\n            canvasWidth={canvasWidth}\n          />\n        </div>\n      </div>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from '../../utils/constants';\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from '../../components';\nimport PhaseCompositeSketch from './PhaseCompositeSketch';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionRetratoFalado({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.RETRATO_FALADO.COMPOSITE_SKETCH:\n        return PhaseCompositeSketch;\n      case PHASES.RETRATO_FALADO.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.RETRATO_FALADO.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.RETRATO_FALADO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionRetratoFalado;\n"],"names":["VIEWS","SKETCH_TIME","TIMES","MEMORY","ANNOUNCEMENT","SKETCH","EXTRA","TOTAL","MEMORY_TIME","MEMORY_MARK","ANNOUNCEMENT_TIME","ANNOUNCEMENT_MARK","SKETCH_MARK","isUserTheWitness","title","pt","en","unskippable","duration","type","onClose","remainingTime","lines","setLines","className","steps","value","total","strokeColor","contained","showControls","strokeWidth","currentMonster","props","useGlobalState","monsterOrientation","setMonsterOrientation","cardWidth","useCardWidth","useEffect","orientation","baseClass","direction","align","imageId","id","clsx","onClick","RotateRightOutlined","RotateLeftOutlined","remainingSketchingTime","remainingWitnessingTime","onSubmitSketch","onSubmitOrientation","useState","view","setView","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","sketch","JSON","stringify","timer","minutes","seconds","cases","players","state","info","translate","useLanguage","isUserReady","useIsUserReady","step","setStep","useWhichPlayerIsThe","witness","request","useAPICall","apiFunction","RETRATO_FALADO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitSketchAPIRequest","useOnSubmitOrientationAPIRequest","phase","allowedPhase","PHASES","conditions","round","onPressButton","buttonText","time","circleColor","player","currentRound","current","sketches","onSubmitVote","user","canvasWidth","Math","min","Object","keys","length","canvasSize","setCanvasSize","floor","map","sketchObj","playerId","size","drawing","vote","disabled","avatarId","name","useUser","useOnSubmitVoteAPIRequest","mostVotes","witnessVote","reduce","acc","includes","mostVotedSketches","push","otherSketches","fullWidth","style","width","label","level","ranking","announcementIcon","gallery","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseCompositeSketch","PhaseEvaluation","PhaseReveal","PhaseGameOver","PageError"],"sourceRoot":""}