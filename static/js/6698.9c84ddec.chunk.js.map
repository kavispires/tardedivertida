{"version":3,"file":"static/js/6698.9c84ddec.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextRoundButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","components/debug/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","mock/players.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/SectionSettings.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useIdleRedirect.ts","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","utils/phases.ts"],"sourcesContent":["import { FireFilled } from '@ant-design/icons';\nimport { Space, SpaceProps } from 'antd';\nimport clsx from 'clsx';\nimport { useGlobalState } from 'hooks';\nimport { ReactNode } from 'react';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\nimport { useState } from 'react';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  isLoading?: boolean;\n  state: GameState;\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n\ntype PlayersReadyStateProps = {\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { FireFilled } from '@ant-design/icons';\nimport { Button, Drawer, Popconfirm, Spin } from 'antd';\nimport { useAPICall, useGlobalState, useLoading } from 'hooks';\nimport { useState } from 'react';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n\ntype AdminMenuDrawerProps = {\n  state: GameState;\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <Button\n          type=\"primary\"\n          danger\n          size=\"small\"\n          onClick={showDrawer}\n          disabled={isLoading}\n          icon={isLoading ? <Spin /> : <FireFilled />}\n        >\n          Admin\n        </Button>\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} visible={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label=\"Make this the last round\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { FireFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { Translate } from 'components/language';\nimport { useAPICall, useGlobalState, useLanguage, useLoading } from 'hooks';\nimport { ReactNode } from 'react';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextRoundButtonProps = {\n  buttonText?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  round?: GameRound;\n  lastRound?: boolean;\n};\n\nexport function AdminNextRoundButton({\n  buttonText,\n  className = '',\n  round,\n  lastRound = false,\n}: AdminNextRoundButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <Button\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        onClick={() => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n        disabled={isLoading}\n      >\n        {buttonText ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </Button>\n    </AdminOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useGlobalState, useLoading } from 'hooks';\n\ninterface AdminButtonProps extends ButtonProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Action triggered when the button is clicked\n   */\n  onClick: GenericFunction;\n}\n\nexport function AdminButton({ onClick, children, ...rest }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...rest}>\n      {children}\n    </Button>\n  );\n}\n","import { useGlobalState } from 'hooks';\nimport { ReactNode } from 'react';\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  onClick: GenericFunction;\n  label: ReactNode;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    autoStart: true,\n    onExpire: hideTimer ? undefined : onExpire,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && (\n        <span className={clsx(timeClass, `${timeClass}--${type}`)}>{minutes * 60 + seconds}</span>\n      )}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useDevFeatures } from 'hooks';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n};\n\n/**\n * Screen displayed before any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose,\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  const durationPerRound = [15, 10, 5]?.[currentRound] ?? 5;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n\n      <span className=\"phase-announcement__icon\">{icon}</span>\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState, useLanguage } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(text: DualLanguageValue, language: Language, volume: number): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Tim'.split(',');\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem)) {\n    randomItem = getRandomItem(source);\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties?: PlainObject\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length > 1) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...properties,\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Image, Input, notification, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage, useLoading } from 'hooks';\nimport useGlobalState from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { PUBLIC_URL } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n// Components\nimport { Translate } from 'components/language';\nimport { mockPlayerName } from 'mock/players';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      onAddPlayer();\n    }\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onAddPlayer}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useLoading, useGlobalState, useLanguage } from 'hooks';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  switch (type) {\n    case 'eye-cloud':\n    case 'monster-eye-cloud':\n    case 'phone-cloud':\n    case 'retro-cloud':\n    case 'sheep-cloud':\n    case 'speech-cloud':\n      return SingleCloud;\n    case 'artsy-clouds':\n    case 'book-clouds':\n    case 'crime-clouds':\n    case 'halloween-clouds':\n    case 'letter-clouds':\n    case 'one-clouds':\n    case 'sky-clouds':\n      return MultiCloud;\n    default:\n      return SingleCloud;\n  }\n}\n\nfunction getCloudFileName(gameCode: string) {\n  return (\n    {\n      A: 'artsy-clouds',\n      C: 'book-clouds',\n      D: 'crime-clouds',\n      E: 'cyber-cloud',\n      G: 'sky-clouds',\n      H: 'crime-clouds',\n      L: 'phone-cloud',\n      M: 'sheep-cloud',\n      N: 'halloween-clouds',\n      O: 'retro-cloud',\n      P: 'speech-cloud',\n      R: 'monster-eye-cloud',\n      S: 'sky-clouds',\n      T: 'eye-cloud',\n      U: 'one-clouds',\n      X: 'letter-clouds',\n    }[gameCode] ?? 'cloud'\n  );\n}\n\ntype CloudBackgroundProps = {\n  gameCode?: string;\n};\n\nexport function CloudBackground({ gameCode = 'Z' }: CloudBackgroundProps) {\n  const cloudType = getCloudFileName(gameCode);\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${cloudType}`)}>\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport useGlobalState from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <CloudBackground gameCode={info.gameCode} />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport { useLoading, useIsUserReady, useAPICall, useLanguage, useMock, useUser, useGlobalState } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { RulesCarousel } from '../rules';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n      <ReadyPlayersBar players={players} />\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\nimport { GearsIcon } from 'components/icons/GearsIcon';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <GearsIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  players: GamePlayers;\n  order: PlayerId[];\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  reorderByUser?: PlayerId;\n  title?: string;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order;\n\n  return (\n    <div className={clsx('game-order', className)}>\n      <header className=\"game-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ul className=\"game-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <>\n              <span\n                key={`turn-order-player-${playerId}`}\n                className={clsx('game-order__player', isActive && 'game-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span key={`turn-order-player-${playerId}-arrow`} className=\"game-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nfunction reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\nimport { WaitingRoomIcon } from 'components/icons/WaitingRoomIcon';\n\ntype WaitingRoomProps = {\n  players: GamePlayers;\n  title?: any;\n  instruction?: any;\n  children?: any;\n};\n\nexport function WaitingRoom({ players, title, instruction, children }: WaitingRoomProps) {\n  const { translate } = useLanguage();\n  return (\n    <div className=\"waiting-room\">\n      <Title>{translate('Pronto!', 'Done!', title)}</Title>\n      <WaitingRoomIcon style={{ width: '6rem' }} />\n      <Instruction>\n        {Boolean(instruction) ? (\n          instruction\n        ) : (\n          <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n        )}\n      </Instruction>\n      {children}\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Instruction } from 'components/text';\nimport { ReactNode } from 'react';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype PopoverRuleProps = {\n  content: any;\n  showLabel?: boolean;\n  label?: any;\n};\n\nexport function PopoverRule({ content, label, showLabel = true }: PopoverRuleProps): JSX.Element {\n  const [isActive, setActive] = useState(false);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <div className=\"popover-rule\">\n      <Popover placement=\"bottomLeft\" content={content} trigger=\"click\">\n        <Button\n          shape={'round'}\n          size=\"large\"\n          onMouseOver={() => setActive(true)}\n          onMouseLeave={() => setActive(showLabel ?? false)}\n        >\n          <ReadOutlined />\n          {isActive && Boolean(label) ? label : <Translate pt=\" Regras\" en=\" Rules\" />}\n        </Button>\n      </Popover>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function RulesModal({ gameInfo }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage, useUser } from 'hooks';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures, useGlobalState, useLocalStorage } from 'hooks';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image, Space } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          visible={isDrawerOpen}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>{' '}\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              visible={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState, useGlobalState, useGamePlayers, useLanguage } from 'hooks';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  gameId: GameId;\n  gameCollection: GameName;\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? GAME_LIST[gameId[0]] : {});\n  }, [gameId]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n  /**\n   * Flag indicating if it is the last round\n   */\n  lastRound?: boolean;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round, lastRound }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || lastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong>{' '}\n            {pluralize(left, 'rodada', 'rodadas')} para o jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round', 'rounds')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  white?: boolean;\n  icon?: any;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  level?: 1 | 2 | 3 | 4 | 5 | undefined;\n  size?: 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 1, size = 'large' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","/**\n * Enum of Game Phases\n */\nexport const PHASES: ObjectDictionary = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DESENHO_RAPIDAO: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    HINT_GIVING: 'HINT_GIVING',\n    HINT_RECEIVING: 'HINT_RECEIVING',\n    GUESS_THE_CODE: 'GUESS_THE_CODE',\n    DISCUSSION: 'DISCUSSION',\n    SOLUTION: 'SOLUTION',\n  },\n  PALHETA_DE_CORES: {\n    '': '',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TE_CONHECO: {\n    WRITE: 'WRITE',\n    TRUTHS_AND_LIES: 'TRUTHS_AND_LIES',\n    RESULT: 'RESULT',\n    MATCH_PLAYERS: 'MATCH_PLAYERS',\n    REVEAL: 'REVEAL',\n  },\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","visible","setVisible","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","size","onClick","placement","closable","onConfirm","phase","lastRound","ButtonLabel","round","current","total","pt","en","AdminNextRoundButton","buttonText","translate","useLanguage","onGoToNextPhase","AdminButton","rest","RocketFilled","AdminOnlyButton","TimedButton","duration","onExpire","hideTimer","useTimer","expiryTimestamp","inNSeconds","autoStart","minutes","seconds","timeClass","Boolean","TransparentButton","active","activeClass","hoverType","DebugOnly","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","PhaseAnnouncement","currentRound","withoutTimer","unskippable","animationType","durationPerRound","getAnimationClass","custom","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","setScreenSize","useEffect","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","speak","text","language","volume","utterance","SpeechSynthesisUtterance","lang","speechSynthesis","getRandomWelcomeMessage","getRandomItem","DEV_NAMES","split","cacheNames","getRandomUniqueItemFromList","source","used","cache","randomItem","mockPlayerName","randomName","Join","meta","setLoader","gameId","setUserId","setUsername","setUserAvatarId","setVolume","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","avatarId","newAvailableAvatars","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerAvatarId","response","data","username","notification","console","error","alt","src","PUBLIC_URL","fallback","CaretLeftOutlined","viewBox","href","avatars","AVATARS","CaretRightOutlined","isComplete","target","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","loading","ghost","Waiting","gameMeta","userAvatarId","onLockGameAndStart","isLocked","numPlayers","direction","min","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","backgroundImage","CloudBackground","gameCode","cloudType","A","C","D","E","G","H","L","M","N","O","P","R","S","T","U","X","getCloudFileName","CloudTypeComponent","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","animate","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","user","useUser","onBeReady","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClass","wrap","SmileFilled","MehFilled","RobotFilled","PhaseSetup","GearsIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","startWith","starterIndex","slice","reorder","playerId","isActive","backgroundColor","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","CollapsibleRule","contained","header","PopoverRule","content","showLabel","setActive","trigger","shape","onMouseOver","onMouseLeave","ReadOutlined","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","onCancel","footer","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","useMemo","count","score","SectionSettings","blurEnabled","setBlurEnabled","setIsAdminEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","checked","s","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","SettingOutlined","preview","Session","gameCollection","getActiveComponent","useGamePlayers","useGameState","setInfo","navigate","useNavigate","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","ActiveComponent","Instruction","fullWidth","RoundsLeftInstruction","left","pluralize","TextHighlight","Title","level","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","REVEAL","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","DESENHO_RAPIDAO","PROMPT_SELECTION","DRAWING","GUESSING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","HINT_GIVING","HINT_RECEIVING","GUESS_THE_CODE","DISCUSSION","SOLUTION","PALHETA_DE_CORES","LINHAS_CRUZADAS","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","ONDA_TELEPATICA","DIAL_CLUE","GUESS","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","RESULTS","CRUZA_PALAVRAS","CLUE_WRITING","TE_CONHECO","WRITE","TRUTHS_AND_LIES","MATCH_PLAYERS"],"sourceRoot":""}