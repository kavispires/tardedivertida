{"version":3,"file":"static/js/5893.169c67e6.chunk.js","mappings":"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","sources":["components/cards/SuspectCard.tsx","components/general/Achievements.tsx","components/image-cards/ImageBlurButton.tsx","components/image-cards/ImageBlurButtonContainer.tsx","components/image-cards/ImageCard.tsx","components/image-cards/ImageCardBack.tsx","components/image-cards/ImageCardButton.tsx","components/image-cards/ImageCardHand.tsx","components/image-cards/ImageCardPreloadHand.tsx","components/image-cards/ImageCardSelectButton.tsx","components/metrics/PointsHighlight.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx"],"sourcesContent":["// Type\nimport { SuspectCard as SuspectCardType } from 'types/tdr';\n// Components\nimport { DualTranslate } from 'components/language';\nimport { ImageCard } from 'components/image-cards';\n// Sass\nimport './SuspectCard.scss';\n\ntype SuspectCardProps = {\n  /**\n   * Suspect object\n   */\n  suspect: SuspectCardType;\n  /**\n   * Card width\n   */\n  width: number;\n  /**\n   * Hide the suspect name\n   */\n  hideName?: boolean;\n};\n\nexport function SuspectCard({ suspect, width, hideName }: SuspectCardProps) {\n  return (\n    <div className=\"suspect-card\" style={{ width: `${width}px` }}>\n      <ImageCard id={suspect.id} className=\"suspect-card__image\" cardWidth={width} preview={false} />\n      {!hideName && (\n        <div className=\"suspect-card__name\">\n          <DualTranslate>{suspect.name}</DualTranslate>\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { Achievement, AchievementReference } from 'types/achievements';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  if (achievements.length === 0) return <></>;\n\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n};\n\nexport function ImageBlurButton({ cardId, ghost = true }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost={ghost} onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Focus\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer.scss';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The position of the button (default: bottom)\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  position = 'bottom',\n  ghost = true,\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {position === 'top' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n      {children}\n      {position === 'bottom' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Sass\nimport './ImageCard.scss';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  cardWidth?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * Replacement image when the preview is open\n   */\n  previewImageId?: string;\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n  /**\n   * Forces height to be the same as the width\n   */\n  square?: boolean;\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  cardWidth = 200,\n  className = '',\n  preview = true,\n  previewImageId = '',\n  fileExtension = 'jpg',\n  square = false,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl('tdi');\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${id[id.length - 1]}`;\n\n  const imageURL = id.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(id);\n\n  const previewConfig = typeof preview === 'boolean' ? {} : preview;\n\n  return (\n    <div\n      className={clsx(\n        baseClass,\n        isBlurred && `${baseClass}--blur`,\n        square && `${baseClass}--square`,\n        className\n      )}\n      style={{ height: square ? `${cardWidth}px` : undefined }}\n    >\n      <Image\n        width={cardWidth}\n        src={`${baseUrl}/${imageURL}.${fileExtension}`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          isBlurred || !preview\n            ? false\n            : {\n                ...previewConfig,\n                maskClassName: clsx(`${baseClass}__preview-mask`, previewConfig?.maskClassName),\n                src: Boolean(previewImageId)\n                  ? `${baseUrl}/${previewImageId.replace(/-/g, '/')}.${fileExtension}`\n                  : previewConfig?.src,\n              }\n        }\n      />\n    </div>\n  );\n};\n","import { ImageCard, ImageCardProps } from './ImageCard';\n\ntype ImageCardBackProps = Omit<ImageCardProps, 'id'> & { id?: ImageCardId };\n\nexport const ImageCardBack = ({ id = 'back-default', ...rest }: ImageCardBackProps) => {\n  return <ImageCard id={id} {...rest} />;\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { DownCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\n//  Components\nimport { Translate } from 'components/language';\nimport { DebugOnly } from 'components/debug';\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './ImageCardButton.scss';\n\ntype ImageCardButtonProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The content, usually a ImageCard component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name for the container\n   */\n  className?: string;\n  /**\n   * The position of the button (default: top)\n   */\n  buttonPosition?: 'top' | 'bottom';\n  /**\n   * The button is over the image (default: false)\n   */\n  over?: boolean;\n  /**\n   * Button icon replacement\n   */\n  icon?: ReactNode;\n  /**\n   * The function to be called when the button is clicked\n   */\n  onClick?: (...args: any) => void;\n  /**\n   * Disables the button (default: false)\n   */\n  disabled?: boolean;\n  /**\n   * The text for the button\n   */\n  buttonText?: ReactNode;\n  /**\n   * The props for the button\n   */\n  buttonProps?: Omit<ButtonProps, 'onClick' | 'disabled'>;\n};\n\nexport function ImageCardButton({\n  id,\n  children,\n  className = '',\n  buttonPosition = 'top',\n  over = false,\n  icon,\n  onClick,\n  disabled = false,\n  buttonText,\n  buttonProps = {},\n}: ImageCardButtonProps) {\n  const isTop = buttonPosition === 'top';\n\n  const iconComponent = icon ?? (isTop ? <DownCircleOutlined /> : <UpCircleOutlined />);\n\n  const { className: buttonClassName, ...restButtonProps } = buttonProps;\n\n  const button = onClick ? (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={over}\n      className={clsx(\n        'image-card-button__button',\n        over && 'image-card-button__button--over',\n        over && `image-card-button__button--over-${buttonPosition}`,\n        buttonClassName\n      )}\n      onClick={() => onClick(id)}\n      disabled={disabled}\n      {...restButtonProps}\n    >\n      {iconComponent}\n      {buttonText ?? <Translate pt=\"Selecionar\" en=\"Select\" />}\n      {iconComponent}\n    </Button>\n  ) : (\n    <></>\n  );\n\n  return (\n    <div className={clsx('image-card-button', className)}>\n      <ImageBlurButtonContainer cardId={id} position={buttonPosition === 'bottom' ? 'top' : 'bottom'}>\n        <DebugOnly>{id}</DebugOnly>\n        <div className=\"image-card-button__container\">\n          {isTop && button}\n          {children}\n          {!isTop && button}\n        </div>\n      </ImageBlurButtonContainer>\n    </div>\n  );\n}\n","import { LegacyRef, ReactNode } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n// Hooks\nimport { useCardWidthByContainerRef } from 'hooks/useCardWidth';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard, ImageCardButton } from '.';\n// Sass\nimport './ImageCardHand.scss';\n\ntype ImageCardHandProps = {\n  /**\n   * The list of card ids\n   */\n  hand: ImageCardId[];\n  /**\n   * Function to trigger when clicking on the select button\n   */\n  onSelectCard?: GenericFunction;\n  /**\n   * Select button custom label\n   */\n  selectButtonText?: ReactNode;\n  /**\n   * Select button custom icon\n   */\n  selectButtonIcon?: ReactNode;\n  /**\n   * Select button custom class\n   */\n  selectButtonClass?: string;\n  /**\n   * Disable select button\n   */\n  disabledSelectButton?: boolean;\n  /**\n   * Optional custom class name for the hand container\n   */\n  className?: string;\n  /**\n   * The size of the card\n   */\n  cardSize?: number;\n  /**\n   * If no card size is provided, the ratio is used instead to determine card size (default 8)\n   */\n  sizeRatio?: number;\n  /**\n   * Minimum width of a card (default 80)\n   */\n  minCardSize?: number;\n  /**\n   * Cache showing which cards have been selected and should be highlighted\n   */\n  selectedCards?: BooleanDictionary;\n  /**\n   * Custom card class\n   */\n  cardClassName?: string;\n  /**\n   * Enable preview (default: true)\n   */\n  preview?: boolean;\n  /**\n   * The Image group preview object\n   */\n  imageGroupPreview?: ImageProps['preview'];\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonText,\n  selectButtonIcon,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n  selectedCards = {},\n  cardClassName = '',\n  preview = true,\n  imageGroupPreview,\n}: ImageCardHandProps) {\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const [cardWidth, containerRef] = useCardWidthByContainerRef(Math.max(sizeRatio, 6), {\n    minWidth: minCardSize,\n  });\n\n  return (\n    <Image.PreviewGroup preview={imageGroupPreview}>\n      <div className={clsx('image-card-hand', className)} ref={containerRef as LegacyRef<HTMLDivElement>}>\n        {hand.map((cardId, index) => {\n          return (\n            <div\n              key={`hand-${cardId}`}\n              className={clsx(\n                'image-card-hand__card-container',\n                getAnimationClass('slideInUp', {\n                  delay: index,\n                })\n              )}\n            >\n              <ImageCardButton\n                onClick={onSelectCard}\n                id={cardId}\n                buttonProps={{ className: selectButtonClass }}\n                icon={selectButtonIcon}\n                buttonText={selectButtonText}\n                disabled={disabledSelectButton}\n              >\n                <ImageCard\n                  id={cardId}\n                  cardWidth={cardSize || cardWidth}\n                  className={clsx(selectedCards[cardId] && 'image-card-hand__selected', cardClassName)}\n                  preview={preview}\n                />\n              </ImageCardButton>\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","// Components\nimport { ImageCard } from './ImageCard';\n// Sass\nimport './ImageCardPreloadHand.scss';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard id={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCardId;\n  onClick: GenericFunction;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import clsx from 'clsx';\nimport { LegacyRef, ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce, useMeasure } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRanking } from 'types/game';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Helpers\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [ref, { height }] = useMeasure();\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className={clsx(\n        'ranking-board',\n        seconds > 4 && 'ranking-board--hidden',\n        seconds === 4 && getAnimationClass('fadeIn')\n      )}\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      <div\n        className=\"ranking-board__row\"\n        id=\"ranking-row-placeholder\"\n        style={{ opacity: 0 }}\n        ref={ref as LegacyRef<HTMLDivElement>}\n      >\n        <div className=\"ranking-board__cell-crown\">\n          <CrownFilled className=\"ranking-board__crown-icon\" />\n        </div>\n        <div className=\"ranking-board__cell-position\">#0</div>\n        <div className=\"ranking-board__cell-player\">\n          <div className=\"ranking-board__avatar\">\n            <Avatar id=\"A\" />\n          </div>\n          <div className=\"ranking-board__name\">Placeholder</div>\n        </div>\n        <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n          <div className=\"ranking-board__cell-points\">0</div>\n        </Tooltip>\n\n        <GainedPoints gainedPoints={0} playerId=\"A\" />\n\n        <Tooltip title=\"Total\" color=\"gold\">\n          <span className=\"ranking-board__cell-points-total\">0</span>\n        </Tooltip>\n      </div>\n\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            // id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRanking } from 'types/game';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n  /**\n   * Whether the title should be white or not\n   */\n  white?: boolean;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n  white,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title white={white}>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n"],"names":["SuspectCard","suspect","width","hideName","className","style","id","cardWidth","preview","name","unknownText","pt","en","Achievements","players","achievements","reference","length","clsx","getAnimationClass","size","level","map","achievement","index","type","icon","achievementObj","player","playerId","delay","title","avatarId","Boolean","description","content","value","shape","ImageBlurButton","cardId","ghost","useBlurCards","blurCard","isBlurEnabled","shouldBeBlurred","placement","onClick","EyeOutlined","EyeInvisibleOutlined","ImageBlurButtonContainer","children","position","rest","ImageCard","previewImageId","fileExtension","square","baseUrl","useTDBaseUrl","baseClass","fallbackName","imageURL","replace","isBlurred","previewConfig","height","undefined","src","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardBack","ImageCardButton","buttonPosition","over","disabled","buttonText","buttonProps","isTop","iconComponent","DownCircleOutlined","UpCircleOutlined","buttonClassName","restButtonProps","button","ImageCardHand","hand","onSelectCard","selectButtonText","selectButtonIcon","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","selectedCards","cardClassName","imageGroupPreview","useCardWidthByContainerRef","Math","max","minWidth","containerRef","ref","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","custom","PointsHighlight","iconSize","GainedPoint","gainedPoint","order","isPositive","isNegative","color","GainedPoints","gainedPoints","gainedPointsDescriptions","points","Array","isArray","RankingBoard","ranking","hideGainedPoints","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useMeasure","maxPoints","useMemo","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","useEffectOnce","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","previousScore","useEffect","opacity","CrownFilled","hPosition","top","StepRankingWrapper","subtitle","white","useTemporarilyHidePlayersBar","CaretUpOutlined"],"sourceRoot":""}