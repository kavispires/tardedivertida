{"version":3,"file":"static/js/6393.e0a5b2c0.chunk.js","mappings":"qVAWaA,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAUC,GAAb,mBACtC,SAAC,MAAD,gBAAQC,MAAM,SAAC,IAAD,IAAgBC,KAAK,UAAUC,QAAM,EAACC,UAAU,cAAiBJ,GAA/E,aACGD,IAFmC,E,uHCD3BM,EAAgB,SAAC,GAC5B,OADkE,EAApCC,WAE5B,IAAK,SACH,OACE,SAAC,SAAD,CAAWP,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,MAGN,IAAK,UACH,OACE,SAAC,SAAD,CAAWR,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,CAAQC,gBAAgB,OAAOC,kBAAkB,QAAQC,gBAAc,MAG7E,IAAK,UACH,OACE,SAAC,SAAD,CAAWX,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,CAAQC,gBAAgB,OAAOC,kBAAkB,YAAYC,gBAAc,MAGjF,QACE,OACE,SAAC,SAAD,CAAWX,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,MAIT,ECZYI,EAAiB,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,UAAWC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,qBACzCC,EAAYC,EAAAA,EAAAA,SAAZD,QACR,EAAeE,EAAAA,EAAAA,UAARC,GAAP,eACA,GAAkCC,EAAAA,EAAAA,UAAS,UAA3C,eAAOb,EAAP,KAAkBc,EAAlB,KACMC,EAAYC,OAAOC,KAAKV,GAAOW,KAAI,SAACC,GAAD,MAAQ,CAAE1B,MAAO0B,EAAGC,MAAOD,EAA3B,IASnCE,EAAQ,mCAAG,WAAOC,GAAP,8EACXC,EAAcD,EAAEF,MADL,SAIO,WAAhBE,EAAEtB,YACJuB,EAAW,UAAGC,OAAOF,EAAEF,cAAZ,QAAsB,GAEf,YAAhBE,EAAEtB,YACJuB,EAAcD,EAAEF,MAAQ,UAAOK,GAG3BC,GAXO,UAYVJ,EAAEK,IAAMJ,IAGPK,OAAOC,QAAP,kDAAuDC,KAAKC,UAAUL,KAf7D,iCAgBLlB,EAAqB,CAAED,MAAOmB,EAASM,OAAQC,EAAAA,GAAAA,uBAhB1C,OAkBXrB,EAAKsB,cACLpB,EAAa,UAnBF,0DAsBbL,EAAQ0B,MAAM,uBAAd,MAtBa,0DAAH,sDA0Bd,OACE,UAAC,IAAD,CAAMlC,KAAK,QAAQW,KAAMA,EAAMwB,cAAe,CAAEpC,UAAW,UAAYqB,SAAUA,EAAjF,WACE,4CACA,SAAC,SAAD,CAAW5B,MAAM,MAAMQ,KAAK,MAAMoC,MAAO,CAAC,CAAEC,UAAU,IAAtD,UACE,SAAC,IAAD,CAAcC,QAASxB,OAEzB,SAAC,SAAD,CAAWtB,MAAM,OAAOQ,KAAK,YAA7B,UACE,UAAC,IAAD,CAAQuC,SAxCkB,SAACC,GAC3B,CAAC,UAAW,WAAWC,SAASD,IAAU7B,EAAK+B,eAAe,CAAEvB,OAAO,IAC3D,WAAZqB,GAAsB7B,EAAK+B,eAAe,CAAEvB,MAAO,IACvC,WAAZqB,GAAsB7B,EAAK+B,eAAe,CAAEvB,MAAO,KACvDN,EAAa2B,EACd,EAmCK,WACE,SAAC,WAAD,CAAerB,MAAM,SAArB,qBACA,SAAC,WAAD,CAAeA,MAAM,SAArB,qBACA,SAAC,WAAD,CAAeA,MAAM,UAArB,sBACA,SAAC,WAAD,CAAeA,MAAM,UAArB,2BAIJ,SAACrB,EAAD,CAAeC,UAAWA,KAE1B,SAAC,KAAD,CAAQJ,KAAK,UAAUgD,SAAS,SAASC,SAAUvC,EAAWT,QAAM,EAApE,sBAKL,E,qBCnEM,SAASiD,EAAT,GAAiE,IAApCC,EAAmC,EAAnCA,QAClC,EAAuD/B,OAAOgC,OAAOD,GAASE,QAC5E,SAACC,EAAmBC,GAOlB,OANIA,EAAOC,MACTF,EAAIG,aAAaC,KAAKH,EAAOlD,MAE7BiD,EAAIK,eAAeD,KAAKH,EAAOlD,MAG1BiD,CACR,GACD,CACEG,aAAc,GACdE,eAAgB,KAZZF,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,eAgBtB,OACE,gBAAIzD,UAAU,4BAAd,WACE,iDACA,iBAAKA,UAAU,mCAAf,WACE,SAAC0D,EAAA,EAAD,CAAmBC,MAAO,CAAEC,MAAO,SAAWC,MAAM,YACpD,eAAI7D,UAAU,kCAAd,SACGuD,EAAanC,KAAI,SAAC0C,GAAD,OAChB,eAAuC9D,UAAU,kCAAjD,SACG8D,GADH,uBAAyBA,GADT,UAOtB,iBAAK9D,UAAU,mCAAf,WACE,SAAC+D,EAAA,EAAD,CAAmBJ,MAAO,CAAEC,MAAO,UAAYC,MAAM,YACrD,eAAI7D,UAAU,kCAAd,SACGyD,EAAerC,KAAI,SAAC0C,GAAD,OAClB,eAAuC9D,UAAU,kCAAjD,SACG8D,GADH,uBAAyBA,GADP,WAS7B,C,0BCzBYE,EAAkB,SAAC,GAA8C,IAAD,EAA3CvD,EAA2C,EAA3CA,MAAOwC,EAAoC,EAApCA,QAC/BzC,GAAcyD,EAAAA,EAAAA,KAAdzD,UACA0D,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAAiCE,EAAAA,EAAAA,IAAe,0BAAzCC,GAAP,eACA,GAAyBD,EAAAA,EAAAA,IAAe,kBAAjCE,GAAP,eACA,GAA8BvD,EAAAA,EAAAA,WAAS,GAAvC,eAAOwD,EAAP,KAAgBC,EAAhB,KACMC,GAAOC,EAAAA,EAAAA,KAKPC,EAAU,WACdH,GAAW,EACZ,EAEK9D,GAAuBkE,EAAAA,EAAAA,GAAqB,CAChDC,WAAY,uBACZC,eAAgB,sCAChBC,aAAc,uCACdC,YAAaL,IAGf,OAAKT,GAAYI,GAAmB7D,EAAMwE,OAGxC,+BACE,iBAAKjF,UAAU,oBAAf,WACE,SAAC,KAAD,CACEkF,UAAW,EACXrF,MAAM,SAAC,IAAD,IACNC,KAAK,SACLH,OAAO,SAAC,KAAD,CAAWwF,GAAG,SAASC,GAAG,WACjCC,QAxBW,WACjBb,GAAW,EACZ,EAuBOc,YAAa,CACXxF,KAAM,cAIV,SAAC,IAAD,CAAQ+D,MAAM,aAAa0B,UAAU,OAAOC,UAAU,EAAOC,KAAMlB,EAASI,QAASA,EAArF,UACE,2BACE,SAAC,EAAD,CAAmB1B,QAASA,KAC5B,yBACE,qBAEF,gBAAIjD,UAAU,6BAAd,WACE,qCACA,SAAC,IAAD,CACEuF,UAAU,QACV1B,MAAM,iDACN6B,UAAW,kBAAMhF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,kBAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,SAAUvC,GAA6B,cAAhBC,EAAMwE,MAC7BtF,MAAM,mBACNK,UAAU,iCAGd,SAAC,IAAD,CACEuF,UAAU,QACV1B,MAAM,6CACN6B,UAAW,kBAAMhF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,YAArC,EAHb,UAKE,SAACzC,EAAD,CAGEqD,UAAQ,EACRpD,MAAM,aACNK,UAAU,iCAGd,SAAC,IAAD,CACEuF,UAAU,QACV1B,MAAM,wEACN6B,UAAW,kBAAMhF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,gBAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,UACO,OAALtC,QAAK,IAALA,GAAA,UAAAA,EAAOkF,aAAP,eAAcC,iBACdpF,GACA,CAAC,QAAS,QAAS,aAAaoC,SAASnC,EAAMwE,OAEjDtF,MACO,OAALc,QAAK,IAALA,GAAAA,EAAOkF,MAAMC,eACT,wCACA,2BAEN5F,UAAU,iCAGd,SAAC,IAAD,CACEuF,UAAU,QACV1B,MAAM,gEACN6B,UAAW,kBAAMhF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,YAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,SAA2B,WAAZ,OAALtC,QAAK,IAALA,OAAA,EAAAA,EAAOwE,OACjBtF,MAAM,oBACNK,UAAU,oCAIhB,yBACE,qBAEF,yBACE,SAACO,EAAD,CACEC,UAAWA,EACXE,qBAAsBA,EACtBD,MAAOA,OAGX,yBACE,qBAEF,2BACE,sCACA,SAAC,KAAD,CACEoF,OAAO,SACPC,MAAMC,EAAAA,EAAAA,IAAeC,QAAQ3B,GAAyBI,EAAKwB,SAAUxB,EAAKyB,QAF5E,qDA9F4C,mBA0GzD,E,+WChJM,SAASC,EAAT,GAA6C,IAA3BC,EAA0B,EAA1BA,UACvB,GAAwBrF,EAAAA,EAAAA,UAAS,UAAjC,eAAOsF,EAAP,KAAaC,EAAb,KAEA,OACE,iBAAKtG,UAAU,UAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,SAAC,IAAD,CAAOuG,IAAKC,EAAAA,EAAMC,SAAS,OAG7B,SAAC,IAAD,CAAOzG,UAAU,kBAAjB,UACE,SAAC,IAAD,CACEI,iBAAiB,SAAC,KAAD,CAAW+E,GAAG,iBAAiBC,GAAG,uBACnD/E,kBAAkB,SAClBqC,SAAU,SAACgE,GAAD,OAAaJ,EAAQI,EAAU,QAAU,SAAzC,MAIJ,WAATL,GACC,SAACM,EAAD,CAAkBP,UAAWA,KAE7B,SAACQ,EAAD,CAAiBR,UAAWA,MAInC,CAEM,SAASO,EAAT,GAAqF,IAAzDP,EAAwD,EAAxDA,UAAcd,GAA0C,YACzF,GAAuCuB,EAAAA,EAAAA,GAAkD,CACvFC,WAAW,WAAD,wBAAE,+FAAkBC,EAAAA,EAAAA,MAAlB,mFAAF,kDAAC,GACXX,UAAAA,IAFMY,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAS3B,OACE,SAAC,IAAD,CACElH,UAAU,kBACVmH,UAAU,WACVC,MAAM,SACNC,WAAY,CAAEC,KAAM,cAJtB,UAME,gCACGJ,IACC,SAAC,IAAD,CACEK,aACE,SAAC,KAAD,CAAWpC,GAAG,mCAAmCC,GAAG,2CAEtDtF,KAAK,QACL0H,UAAQ,EACRxH,UAAU,0BAGd,SAAC,MAAD,gBACEF,KAAK,UACL2H,KAAK,QACLpC,QAzBS,WACf4B,GACD,EAwBOS,QAASV,EACTW,OAAK,EACL9H,MAAM,SAAC,KAAD,CAAYA,MAAM,SAAC,IAAD,IAAgB4H,KAAK,WACzCnC,GAPN,cASE,SAAC,KAAD,CAAWH,GAAG,oBAAoBC,GAAG,+BAK9C,CAED,SAASwB,EAAT,GAAsD,IAA3BR,EAA0B,EAA1BA,UACzB,EAAevF,EAAAA,EAAAA,UAARC,GAAP,eACQ8G,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAAoD7G,EAAAA,EAAAA,WAAS,GAA7D,eAAO+G,EAAP,KAA2BC,EAA3B,KAEA,GAAuClB,EAAAA,EAAAA,GAAkD,CACvFC,WAAW,WAAD,wBAAE,+FAAkBkB,EAAAA,EAAAA,IAAOlH,EAAKmH,cAAc,YAAanH,EAAKmH,cAAc,aAA5E,mFAAF,kDAAC,GACX7B,UAAAA,IAFMY,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAS3B,OACE,iCACE,UAAC,IAAD,CACE/G,KAAK,QACLW,KAAMA,EACNoH,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBxE,MAAO,CAAE0E,SAAU,KACnB/F,cAAe,CAAEgG,UAAU,GAC3B/G,SAbW,WACf0F,GACD,EAYKsB,aAAa,MARf,WAUE,SAAC,SAAD,CACE5I,OAAO,SAAC,KAAD,CAAWwF,GAAG,SAASC,GAAG,WACjCjF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASiH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,OAGF,SAAC,SAAD,CACEjI,OAAO,SAAC,KAAD,CAAWwF,GAAG,QAAQC,GAAG,aAChCjF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASiH,EAAU,sCAAiC,wBAExEY,KAAMZ,EAAU,yBAAuB,2BANzC,UAQE,SAAC,aAAD,MAGDV,IACC,SAAC,SAAD,CAAWkB,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,IAAD,CACEZ,aACE,SAAC,KAAD,CACEpC,GAAG,mCACHC,GAAG,2CAGPtF,KAAK,QACL0H,UAAQ,EACRxH,UAAU,4BAKhB,UAAC,SAAD,CAAWoI,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,WACE,SAAC,KAAD,CAAQrI,KAAK,UAAUgD,SAAS,SAAS4E,QAASV,EAAlD,UACE,SAAC,KAAD,CAAW7B,GAAG,SAASC,GAAG,cAG5B,SAAC,KAAD,CAAQtF,KAAK,OAAOuF,QAAS,kBAAM0C,GAAsB,SAACW,GAAD,OAAQA,CAAR,GAA5B,EAA7B,UACE,SAAC,KAAD,CAAWvD,GAAG,sBAAsBC,GAAG,+BAI5C0C,IACC,SAAC,IAAD,CACEhI,KAAK,OACLa,SACE,SAACgI,EAAD,CACEC,MAAO9H,EAAKmH,cAAc,YAC1B7B,UAAW,kBAAM2B,GAAsB,EAA5B,QAOxB,CAOD,SAASY,EAAT,GAA0E,IAA7CC,EAA4C,EAA5CA,MAAOxC,EAAqC,EAArCA,UAC1BzF,EAAYC,EAAAA,EAAAA,SAAZD,QACR,EAAeE,EAAAA,EAAAA,UAARC,GAAP,eACQ8G,GAAcC,EAAAA,EAAAA,KAAdD,UAER,GAAuCf,EAAAA,EAAAA,GAAY,CACjDC,WAAW,WAAD,wBAAE,+FAAkB+B,EAAAA,EAAAA,IAAc/H,EAAKmH,cAAc,aAAnD,mFAAF,kDAAC,GACX7B,UAAW,WACTA,IACAzF,EAAQmI,QACNlB,EACE,0DACA,4CAGL,IAVKZ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAiB3B,OACE,UAAC,IAAD,CACE/G,KAAK,kBACLW,KAAMA,EACNoH,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBxE,MAAO,CAAE0E,SAAU,KACnB/F,cAAe,CAAEyG,SAAUH,EAAON,UAAU,GAC5C/G,SAZa,WACf0F,GACD,EAWGsB,aAAa,MARf,WAUE,SAAC,SAAD,WACE,SAAC,KAAD,CAAOS,MAAO,EAAGvB,KAAK,WAAtB,UACE,SAAC,KAAD,CAAWtC,GAAG,oBAAoBC,GAAG,wBAGzC,SAAC,SAAD,CACEzF,OAAO,SAAC,KAAD,CAAWwF,GAAG,SAASC,GAAG,WACjCjF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASiH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,MAGDV,IACC,SAAC,SAAD,CAAWkB,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,IAAD,CACEZ,aACE,SAAC,KAAD,CACEpC,GAAG,gGACHC,GAAG,2CAGPtF,KAAK,QACL0H,UAAQ,EACRxH,UAAU,4BAKhB,SAAC,SAAD,CAAWoI,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,KAAD,CAAQrI,KAAK,UAAUgD,SAAS,SAAS4E,QAASV,EAAlD,UACE,SAAC,KAAD,CAAW7B,GAAG,SAASC,GAAG,iBAKnC,C,yGC5OM,SAAS6D,EAAT,GAA6F,IAAxEC,EAAuE,EAAvEA,SAAuE,IAA7DC,IAAAA,OAA6D,aAAhDC,IAAAA,OAAgD,aAAnCC,QAAAA,OAAmC,SACjG,GAAqCC,EAAAA,EAAAA,KAA7BC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,SAExB,OAAIH,EACEF,GAAOK,GACF,yBAAMN,IAGRM,GAAW,oCAAIN,MAAe,wBAGlCE,GAAOI,GAAaD,EACnBJ,GACK,yBAAMD,KAER,8BAAGA,KAEL,uBACR,C,qEC5BM,SAASO,EAAT,GAA8D,IAAzCP,EAAwC,EAAxCA,SAAUpJ,EAA8B,EAA9BA,KAAS4J,GAAqB,YAClE,OACE,SAACT,EAAD,CAAWI,SAAO,EAAlB,UACE,SAAC,MAAD,gBAAQxJ,MAAM,SAAC8J,EAAA,EAAD,IAAe7J,KAAI,OAAEA,QAAF,IAAEA,EAAAA,EAAQ,WAAe4J,GAA1D,aACGR,MAIR,C,wGCUM,SAASU,EAAT,GAA2E,IAArD/F,EAAoD,EAApDA,MAAOoC,EAA6C,EAA7CA,SAAUjG,EAAmC,EAAnCA,UAAWyG,EAAwB,EAAxBA,QAC/CoD,GAAahC,EAAAA,EAAAA,KAAbgC,SAER,OACE,6BACE,SAAC,IAAD,CACEC,IAAG,OAAEjG,QAAF,IAAEA,OAAF,EAAEA,EAAQgG,GACbtD,IAAG,UAAKwD,EAAAA,GAAAA,SAAL,OAA0B9D,EAA1B,YAAsC4D,EAAtC,QACHG,SAAQ,UAAKD,EAAAA,GAAAA,QAAL,iBACR/J,UAAWA,EACXyG,QAASA,KAIhB,C,6PC3BM,SAASwD,EAAT,GAAwF,IAAlE5E,EAAiE,EAAjEA,QAASxF,EAAwD,EAAxDA,KAAMkD,EAAkD,EAAlDA,SAAkD,IAAxC/C,UAAAA,OAAwC,MAA5B,GAA4B,EAArB0J,GAAqB,YACpFlJ,GAAcyD,EAAAA,EAAAA,KAAdzD,UAER,OACE,SAAC,MAAD,QACEX,KAAI,OAAEA,QAAF,IAAEA,EAAAA,GAAQ,SAACqK,EAAA,EAAD,IACdC,OAAK,EACL9E,QAASA,EACTtC,SAAUA,GAAYvC,EACtBR,WAAWoK,EAAAA,EAAAA,GAAK,cAAepK,IAC3B0J,GAGT,C,gKCDYW,EAAoB,SAAC,GAA0E,IAAxEnB,EAAuE,EAAvEA,SAAUvJ,EAA6D,EAA7DA,MAA6D,IAAtDK,UAAAA,OAAsD,MAA1C,GAA0C,EAAnC0J,GAAmC,YAGzG,OAFeY,EAAAA,EAAAA,MAKb,sBAAUtK,WAAWoK,EAAAA,EAAAA,GAAK,sBAAuBpK,GAAjD,WACE,oBAAQA,UAAU,8BAAlB,WACE,SAACkK,EAAA,EAAD,IADF,WACsBvK,QADtB,IACsBA,EAAAA,EAAS,oBAE/B,SAAC,KAAD,kBAAW+J,GAAX,aAAkBR,SAPF,uBAUrB,E,sBChBD,SAASqB,EAAT,GAAwD,IAAjC5E,EAAgC,EAAhCA,MACrB,OAAKA,GAASA,EAAM6E,UAAY7E,EAAM8E,OAAS9E,EAAMC,gBAC5C,SAAC,KAAD,CAAWT,GAAG,oBAAoBC,GAAG,sBAGvC,SAAC,KAAD,CAAWD,GAAG,oBAAiBC,GAAG,cAC1C,CA8BM,SAASsF,EAAT,GAKuB,IAAD,EAJ3B/E,EAI2B,EAJ3BA,MAI2B,IAH3BgF,gBAAAA,OAG2B,MAHT,GAGS,EAF3BzB,EAE2B,EAF3BA,SACA0B,EAC2B,EAD3BA,mBAEMC,GAASP,EAAAA,EAAAA,KACP1C,GAAcC,EAAAA,EAAAA,KAAdD,UAEFpH,GADcyD,EAAAA,EAAAA,KAAZ6G,QACkB,oBAEpBC,GAAkBnG,EAAAA,EAAAA,GAAqB,CAC3CC,WAAY,mBACZC,eAAgB8C,EAAU,8BAA4B,0BACtD7C,aAAc6C,EACZ,2EACA,yEAIEoD,EAAc,kBAAMD,EAAgB,CAAE7I,OAAQC,EAAAA,GAAAA,kBAAhC,EAEd8I,EAAWjF,QAAQ2E,GAEzB,GAA+CO,EAAAA,EAAAA,GAAa,CAC1DC,UAAWR,EAAkB,EAC7BS,SAAUT,EACVU,SAAUL,EACVjI,SAAQ,WAAG8H,SAAH,SAAcI,IAJhBK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,MAAOC,EAApC,EAAoCA,OAcpC,OAPAC,EAAAA,EAAAA,YAAU,WAIR,OAHIlL,GACFgL,IAEK,kBAAMA,GAAN,CACR,GAAE,CAAChL,KAGF,gCACGoK,IAAsB,SAAC,KAAD,CAAaQ,SAAUT,EAAiBW,SAAUA,KAEzE,UAAC,EAAD,CACE3L,MAAM,cACNK,WAAWoK,EAAAA,EAAAA,GAAK,8BAA8BuB,EAAAA,EAAAA,IAAkB,cAFlE,WAIE,SAAC,IAAD,CAAS9H,MAAM,QAAf,UACE,SAAC,EAAD,CACEhE,KAAM0L,GAAY,SAACK,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,IACtCxG,QAASkG,EAAYC,EAAQC,EAC7B1I,SAAUvC,OAGd,SAAC,EAAD,CACEuC,SAAUvC,EACV6E,QAAS2F,EACTnL,KACEoL,IACE,iBACEjL,WAAWoK,EAAAA,EAAAA,GACT,qBACCmB,IACCI,EAAAA,EAAAA,IAAkB,QAAS,CACzBG,MAAO,OACPC,UAAU,KANlB,SAUGT,IAfT,gBAoBGpC,QApBH,IAoBGA,EAAAA,GAAY,SAACqB,EAAD,CAAa5E,MAAOA,WAK1C,C,6BCvHM,SAASqG,EAAT,GAAqF,IAA3D3G,EAA0D,EAA1DA,QAAS6D,EAAiD,EAAjDA,SAAa5D,GAAoC,YACzF,OACE,SAAC,EAAD,WACE,SAAC,GAAD,gBAAYD,QAASA,GAAaC,GAAlC,aACG4D,MAIR,C,6FCSM,SAAS+C,EAAT,GAOmB,IANxB/C,EAMuB,EANvBA,SACArJ,EAKuB,EALvBA,KACAC,EAIuB,EAJvBA,KACAE,EAGuB,EAHvBA,UAGuB,IAFvBkM,SAAAA,OAEuB,MAFZ,QAEY,MADvBC,cAAAA,OACuB,MADP,QACO,EACvB,OACE,kBAAMnM,WAAWoK,EAAAA,EAAAA,GAAK,mBAAoBtK,GAAI,4BAAyBA,GAAQE,GAA/E,UACqB,WAAlBmM,IACC,iCACE,SAAC,IAAD,CAAY1E,KAAMyE,EAAUrM,KAAMA,IAAS,OAG9CqJ,EACkB,UAAlBiD,IACC,gCACG,KACD,SAAC,IAAD,CAAY1E,KAAMyE,EAAUrM,KAAMA,SAK3C,C,8HCZM,SAASuM,EAAT,GAQkB,IAPvBC,EAOsB,EAPtBA,KACApH,EAMsB,EANtBA,MAMsB,IALtBqH,aAAAA,OAKsB,MALP,GAKO,EAJtBpD,EAIsB,EAJtBA,SAIsB,IAHtBlJ,UAAAA,OAGsB,MAHV,GAGU,MAFtBuM,WAAAA,OAEsB,aADtBC,MAAAA,OACsB,SACd5E,GAAcC,EAAAA,EAAAA,KAAdD,UACF6E,GAAYC,EAAAA,EAAAA,QAA0B,MAE5C,GAAI,OAACL,QAAD,IAACA,IAAAA,EAAMpG,UAAYqG,IAAiBrH,EACtC,OAAO,SAAC,KAAD,IAGT,IAAKA,EACH,OACE,SAAC,IAAD,CAAWsC,YAAaK,EAAU,wCAAmC,+BAIzE,IAAM+E,EAAY,kBAElB,OACE,iBACE3M,WAAWoK,EAAAA,EAAAA,GACTuC,EACAJ,GAAU,UAAOI,EAAP,iBACVH,GAAK,UAAOG,EAAP,WACL3M,GAEF4M,GAAG,SACHC,IAAKJ,EARP,SAUGvD,GAGN,C,qVCQM,SAAS4D,EAAT,GAaqB,IAAD,IAZzBC,EAYyB,EAZzBA,WACAlN,EAWyB,EAXzBA,KACAgE,EAUyB,EAVzBA,MACAqF,EASyB,EATzBA,SASyB,IARzB8D,aAAAA,OAQyB,MARV,EAQU,MAPzBrI,QAAAA,OAOyB,MAPf,WAAQ,EAOO,EANzB3E,EAMyB,EANzBA,UACAoL,EAKyB,EALzBA,SAKyB,IAJzB6B,aAAAA,OAIyB,SAHzBC,EAGyB,EAHzBA,YAGyB,IAFzBC,cAAAA,OAEyB,MAFT,aAES,MADzBrN,KAAAA,OACyB,MADlB,QACkB,GACzBsN,EAAAA,EAAAA,GAAsC,YAATtN,GAC7B,IAAMuN,EAAgB,oBAAG,CAAC,GAAI,EAAG,UAAX,aAAG,EAAaL,UAAhB,QAAiC,EACvD,GAA8BjM,EAAAA,EAAAA,WAAS,GAAvC,eAAOuM,EAAP,KAAiBC,EAAjB,KACA,GAAgCxM,EAAAA,EAAAA,WAAS,GAAzC,eAAOyM,EAAP,KAAkBC,EAAlB,KAOMC,EAAa,WACjBH,GAAU,GACVI,IACAhJ,GACD,GAGDiJ,EAAAA,EAAAA,GAAiB,KAAK,WACfV,GACHQ,GAEH,IAMD,IAAQC,GAAUzC,EAAAA,EAAAA,GAAa,CAC7BC,WAAW,EACXC,SAAU,EACVC,SAAU,kBAAMoC,GAAW,EAAjB,IAHJE,MAMR,OAAIH,GACK,yBAIP,gBACExN,WAAWoK,EAAAA,EAAAA,GACA,YAATtK,GAAsB,8BACrBwN,IAAY3B,EAAAA,EAAAA,IAAkB,UAAW,CAAEG,MAAO,YAHvD,UAME,gBAAK9L,UAAU,6BAAf,UACE,iBACEA,WAAWoK,EAAAA,EAAAA,GACT,qBACAkD,GAAW3B,EAAAA,EAAAA,IAAkBwB,EAAe,CAAErB,MAAO,UAAYH,EAAAA,EAAAA,IAAkB,aACnF3L,GAJJ,WAOE,SAAC,KAAD,UAAQ6D,KAER,iBAAM7D,UAAU,2BAAhB,SAA4CH,IAE3CqJ,EAEA+D,GACC,SAAC,KAAD,CAAQnN,KAAK,UAAUuF,QAASqI,EAAYG,WAAS,EAArD,UACE,SAAC,KAAD,CAAW1I,GAAG,aAAaC,GAAG,WAAW0I,OAAQf,OAGnD,SAAC,KAAD,CACE3B,SAAUA,GAAYiC,EACtBvN,KAAK,OACLuF,QAASqI,EACTrC,SAAUqC,EACV3K,SAAUmK,EACVW,WAAS,EANX,UAQE,SAAC,KAAD,CAAW1I,GAAG,aAAaC,GAAG,WAAW0I,OAAQf,YAO9D,C,4GCpLD,SAASgB,EAAT,GAAkE,IAA3CjO,EAA0C,EAA1CA,KACrB,OACE,gBACEE,UAAU,0BACV2D,MAAO,CACLqK,gBAAgB,QAAD,OAAUjE,EAAAA,GAAAA,QAAV,OAA8BjK,EAA9B,UACfmO,oBAAqB,MAI5B,CAED,IAAMC,EAAY,CAChB,CACED,oBAAqB,KAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,YAIzB,SAASE,EAAT,GAAuE,IAAjDrO,EAAgD,EAAhDA,KAAMsO,EAA0C,EAA1CA,MAC1B,OACE,gBACEpO,UAAU,0BACV2D,OAAK,QACHqK,gBAAgB,QAAD,OAAUjE,EAAAA,GAAAA,QAAV,OAA8BjK,EAA9B,WACZoO,EAAUE,KAIpB,CAkBM,SAASC,EAAT,GAA0F,IAAD,IAA9DC,UAAAA,OAA8D,MAAlD,QAAkD,EAAzCC,EAAyC,EAAzCA,gBAC/CC,EAjBR,SAA2B1O,GACd,IAAD,EAAV,OAAIA,GAGa,OAFH,UAAGA,EAAK2O,MAAM,iBAAd,aAAG,EAAuB,IAG7BN,EAGJJ,CACR,CAQ4BW,CAAkBJ,GAEvC3B,EAAY,mBAElB,OACE,iBACE3M,WAAWoK,EAAAA,EAAAA,GAAKuC,EAAD,UAAeA,EAAf,aAA6B2B,IAC5C3K,MAAO4K,EAAkB,CAAEA,gBAAAA,GAAoB,CAAC,EAFlD,WAIE,gBAAKvO,UAAU,gCAAf,UACE,SAACwO,EAAD,CAAoBJ,MAAO,EAAGtO,KAAMwO,OAGtC,gBAAKtO,UAAU,gCAAf,UACE,SAACwO,EAAD,CAAoBJ,MAAO,EAAGtO,KAAMwO,OAGtC,gBAAKtO,UAAU,gCAAf,UACE,SAACwO,EAAD,CAAoBJ,MAAO,EAAGtO,KAAMwO,OAGtC,gBAAKtO,UAAU,gCAAf,UACE,SAACwO,EAAD,CAAoBJ,MAAO,EAAGtO,KAAMwO,OAGtC,gBAAKtO,UAAU,gCAAf,UACE,SAACwO,EAAD,CAAoBJ,MAAO,EAAGtO,KAAMwO,QAI3C,C,yHCxEM,SAASK,EAAT,GAAqD,IAAjCtC,EAAgC,EAAhCA,KAAMuC,EAA0B,EAA1BA,QACvBC,GAAoB1K,EAAAA,EAAAA,KAApB0K,gBAER,GAA8ChI,EAAAA,EAAAA,GAAY,CACxDiI,YAAa,CAAC,gBACdhI,WAAW,WAAD,wBAAE,wGAAYiI,EAAAA,EAAAA,OAAZ,2CAAF,kDAAC,GACX3I,UAAW,kBAAMwI,EAAQ,EAAd,IAHL5H,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAAS7E,EAApC,EAAoCA,MAYpC,OANAqJ,EAAAA,EAAAA,YAAU,WACJmD,GACFD,EAAQ,EAEX,GAAE,CAACC,EAAiBD,KAGnB,iCACE,eAAI5O,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWmF,GAAG,aAAaC,GAAG,cAG/BY,QAAO,OAACqG,QAAD,IAACA,OAAD,EAACA,EAAM2C,WACb,cAAGhP,UAAU,sBAAb,UACE,SAAC,KAAD,UAAgBqM,EAAK2C,aAIzB,SAAC,IAAD,CAAkB5I,UAAW,kBAAMwI,EAAQ,EAAd,EAAkBjH,OAAK,EAACF,KAAK,WAEzDP,IAAW,SAAC,IAAD,CAAOvG,QAAQ,QAAQ4G,YAAavF,KAAKC,UAAUI,GAAQvC,KAAK,QAAQ0H,UAAQ,KAE5F,SAAC,IAAD,WACE,SAAC,KAAD,CAAWrC,GAAG,KAAKC,GAAG,UAGxB,SAAC,KAAD,CAAQtF,KAAK,UAAU6H,OAAK,EAAC5E,SAAU8L,EAAiBxJ,QAAS,kBAAM4B,GAAN,EAAgBS,QAASV,EAA1F,UACE,SAAC,KAAD,CAAW7B,GAAG,wBAAwBC,GAAG,wBAIhD,C,eC9CM,SAAS6J,EAAT,GAAkE,IAA7C5C,EAA4C,EAA5CA,KAAMnD,EAAsC,EAAtCA,SAAUgG,EAA4B,EAA5BA,SAC1C,OACE,gBAAKlP,UAAU,aAAf,UACE,iBAAKA,UAAU,mBAAf,WACE,SAAC4J,EAAA,EAAD,CAAY/F,MAAK,OAAEwI,QAAF,IAAEA,OAAF,EAAEA,EAAMxI,MAAOoC,SAAQ,OAAEoG,QAAF,IAAEA,OAAF,EAAEA,EAAMpG,SAAUjG,UAAU,wBACpE,gBAAKA,UAAU,sBAAf,SACGgG,QAAQkJ,IACP,iCACE,eAAIlP,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWmF,GAAG,6BAA0BC,GAAG,8BAG7C,SAAC,IAAD,CACEtF,KAAK,UACL0H,UAAQ,EACR7G,SACE,SAAC,KAAD,CACEwE,GAAG,2EACHC,GAAG,2EAMX8D,QAMX,C,qFCpCKiG,EACJ,iHAAiHV,MAC/G,KAGEW,EAAgC,CAAC,EAYjCC,EAA8B,SAClCC,GAMA,IAHI,IAFJC,EAEG,uDAFc,GACjBC,EACG,uDADwB,CAAC,EAExBC,EAAa,GACbC,EAAQ,GACJD,GAAcD,EAAMC,IAArB,OAAoCF,QAApC,IAAoCA,GAAAA,EAAM3M,SAAS6M,IAAeC,EAAQ,IAC/ED,GAAaE,EAAAA,EAAAA,GAAcL,GAC3BI,GAAS,EAGX,OADAF,EAAMC,IAAc,EACbA,CACR,EAOM,SAASG,EAAeL,GAC7B,OAAOF,EAA4BF,EAAWI,EAAMH,EACrD,C,wCC3BM,SAASS,GAAT,GAKmB,IAJxB5M,EAIuB,EAJvBA,QACA6M,EAGuB,EAHvBA,kBACAC,EAEuB,EAFvBA,eACAC,EACuB,EADvBA,OAGMC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,IAAMC,EAAcjP,OAAOgC,OAAOD,GAASE,QAAO,SAACC,EAAD,GAA+C,IAApBgN,EAAmB,EAAnBA,SAI3E,OAJ8F,EAATxD,KAC1EoD,IACT5M,EAAIgN,IAAY,GAEXhN,CACR,GAAE,CAAC,GAEEiN,EAAsBC,EAAAA,GAAAA,QAC1B,SAACF,GAAD,YAAwCzO,IAA1BwO,EAAYC,EAA1B,IAOF,OAJKC,EAAoBzN,SAASmN,IAChCD,GAAkBH,EAAAA,EAAAA,GAAcU,IAG3BA,CACR,GAAE,CAACpN,IAEEsN,GAAmBC,EAAAA,EAAAA,cAAY,WACnC,IAAMpC,EAAQ6B,EAAiBQ,QAAQV,GACjCW,EAAqB,IAAVtC,EAAc6B,EAAiBU,OAAS,EAAIvC,EAAQ,EACrE0B,EAAkBG,EAAiBS,GACpC,GAAE,CAACT,EAAkBF,EAAgBD,IAEhCc,GAAeJ,EAAAA,EAAAA,cAAY,WAC/B,IAAMpC,EAAQ6B,EAAiBQ,QAAQV,GACjCW,EAAWtC,IAAU6B,EAAiBU,OAAS,EAAI,EAAIvC,EAAQ,EACrE0B,EAAkBG,EAAiBS,GACpC,GAAE,CAACT,EAAkBF,EAAgBD,IAEtC,OACE,iCACE,iBAAK9P,UAAU,+BAAf,WACE,SAAC,KAAD,CAAQF,KAAK,SAASuF,QAASkL,EAAkBvQ,UAAU,gCAA3D,UACE,SAAC6Q,GAAA,EAAD,OAEF,iBAAKC,QAAQ,cAAc9Q,UAAU,eAArC,WACE,gBAAK8F,KAAMiL,GAAAA,EAAO,kBAAchB,MAChC,4BACE,SAAC,KAAD,UAAgBiB,EAAAA,GAAQjB,GAAgBxI,oBAG5C,SAAC,KAAD,CAAQzH,KAAK,SAASuF,QAASuL,EAAc5Q,UAAU,gCAAvD,UACE,SAACiR,GAAA,EAAD,UAGJ,gBAAKjR,UAAU,0BAAf,UACE,4BACE,SAAC,KAAD,UAAgBgR,EAAAA,GAAQjB,GAAgBxI,oBAKjD,C,oDCvEM,SAAS2J,GAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,UACzB,GAAsCC,EAAAA,EAAAA,IAAsB,eAA5D,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,IAAsB,UAAlD,eAAOG,EAAP,KAAeC,EAAf,KAUA,OACE,UAAC,KAAD,CAAOxR,UAAU,uBAAuByO,OAAO,SAAC,IAAD,CAAS3O,KAAK,aAA7D,WACE,iBAAKE,UAAU,6BAAf,WACE,iBAAKA,UAAU,2BAAf,WACE,SAAC,KAAD,CAAWmF,GAAG,MAAMC,GAAG,WACvB,SAAC,KAAD,CACEvB,OACE,SAAC,KAAD,CACEsB,GAAG,+FACHC,GAAG,gGAJT,UAQE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,GAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAAS6K,EAAS,EAClBlM,QAzBmB,SAAC/D,GAC1BkQ,EAAUlQ,EAAQ,GAAM,EACzB,QA2BG,gBAAKtB,UAAU,6BAAf,SACGmR,IACC,iCACE,iBAAKnR,UAAU,2BAAf,WACE,SAAC,KAAD,CAAWmF,GAAG,iBAAcC,GAAG,iBAC/B,SAAC,KAAD,CACEvB,OACE,SAAC,KAAD,CACEsB,GAAG,4JACHC,GAAG,4HAJT,UAQE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,GAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAAS2K,EACThM,QAtDc,SAAC/D,GACzBgQ,EAAehQ,EAChB,WA2DF,CC/DM,SAASqQ,GAAT,GAA+F,IAA9DC,EAA6D,EAA7DA,WAAY9B,EAAiD,EAAjDA,kBAClD,OACE,iBAAK9P,UAAU,+BAAf,WACE,gBAAKA,UAAU,sCAAf,UACE,4BACE,SAAC,KAAD,CAAWmF,GAAG,2BAA2BC,GAAG,+BAGhD,eAAIpF,UAAU,qCAAd,SACG4R,EAAWxQ,KAAI,SAACgP,GAAD,OACd,SAACyB,GAAD,CAAkC/B,kBAAmBA,EAAmBM,SAAUA,GAA1DA,EADV,QAMvB,CAOM,SAASyB,GAAT,GAAqF,IAAxDzB,EAAuD,EAAvDA,SAAUN,EAA6C,EAA7CA,kBAC5C,OACE,SAAC,KAAD,CAAmBzK,QAAS,kBAAMyK,EAAkBM,EAAxB,EAA5B,UACE,iBAAKU,QAAQ,cAAc9Q,UAAU,uCAArC,WACE,gBAAK8F,KAAMiL,GAAAA,EAAO,kBAAcX,MAChC,4BACE,SAAC,KAAD,UAAgBY,EAAAA,GAAQZ,GAAU7I,oBAK3C,CCvBD,IAAMuK,GAAatI,EAAAA,GAAWoG,SAAmBjO,EAQ1C,SAASoQ,GAAT,GAA8D,IAAD,YAAzC1F,EAAyC,EAAzCA,KAAMpJ,EAAmC,EAAnCA,QAAS2L,EAA0B,EAA1BA,QACxC,GAAiCzK,EAAAA,EAAAA,KAAzB6N,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QACbrK,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAA4C7G,EAAAA,EAAAA,UAAQ,iBAClDiR,QADkD,IAClDA,GADkD,UAClDA,EAAajB,eADqC,aAClD,EAAuB,UAD2B,SACrBpB,EAAAA,EAAAA,GAAcW,EAAAA,KAD7C,eAAOP,EAAP,KAAuBD,EAAvB,KAIA,GAAwB/O,EAAAA,EAAAA,UAAQ,QAAE,GAAD,iBAACiR,QAAD,IAACA,OAAD,EAACA,EAAaE,aAAd,QAAuB,IAAIC,IAAI,UAAhC,QAAsC,IAAtE,eAAOhS,EAAP,KAAaiS,EAAb,KACA,GAAqBC,EAAAA,EAAAA,GAAgB,WAAY,IAA1CC,GAAP,eACA,GAAqBD,EAAAA,EAAAA,GAAgB,WAAY,IAA1CE,GAAP,gBAGA7G,EAAAA,EAAAA,YAAU,WACJuG,IACEK,GACFxC,EAAkBwC,GAGhBC,GACFH,EAAO,OAACG,QAAD,IAACA,EAAAA,EAAc,IAG3B,GAAE,CAACN,IAEJ,MC3CK,SAAsB9R,EAAciQ,EAAkB6B,EAAkB7L,GAC7E,OAA6B1B,EAAAA,EAAAA,KAArBwB,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SAChB,GAAsB7B,EAAAA,EAAAA,IAAe,UAA5BoO,GAAT,eACA,GAAwBpO,EAAAA,EAAAA,IAAe,YAA9BqO,GAAT,eACA,GAA4BrO,EAAAA,EAAAA,IAAe,gBAAlCsO,GAAT,eACA,GAAiBtB,EAAAA,EAAAA,IAAsB,UAAhCG,GAAP,eACA,GAAgC1J,EAAAA,EAAAA,KAAxBgC,EAAR,EAAQA,SAAUjC,EAAlB,EAAkBA,UACV+K,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aAEFC,GAAQ/L,EAAAA,EAAAA,GAAY,CACxBiI,YAAa,CAAC,cACdhI,WAAW,WAAD,wBAAE,8FACJ+L,EAAAA,GAAAA,IAAa,CACjB3Q,OAAQ4Q,EAAAA,GAAAA,UACR5M,OAAAA,EACAD,SAAAA,EACAnC,WAAY3D,EACZ4S,eAAgB3C,EAChB6B,QAAAA,IAPQ,mFAAF,kDAAC,GASX7L,UAAW,SAAC4M,GACV,IAAMC,EAAOD,EAASC,KACtBT,EAAUS,EAAKrG,IACf6F,EAAYQ,EAAK9S,MACjBuS,EAAgBO,EAAK7C,UAErB8C,aAAaC,SAAQC,EAAAA,EAAAA,IAAO,YAAaH,EAAK9S,MAC9C+S,aAAaC,SAAQC,EAAAA,EAAAA,IAAO,YAAaH,EAAK7C,UAC9C8C,aAAaC,SAAQC,EAAAA,EAAAA,IAAO,UAAWlN,GAEnCqL,IACF8B,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAuB,OAACnT,QAAD,IAACA,EAAAA,EAAQyH,EAAU,MAAO,SAAUiC,EAAU0H,GAG7EnL,GACD,EACDmN,QAAS,SAAC/R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASiH,EACP,2EACA,mEAEFL,YAAavF,KAAKC,UAAUT,EAAEb,SAC9B4E,UAAW,eAEbiO,QAAQnR,MAAMb,EACf,IAGH,OAAOoR,CACR,CDP+Ba,CAAatT,EAAM4P,EAAgBkC,GAAS,kBAAMrD,EAAQ,EAAd,IAAlE5H,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEbyM,EAAkB1N,QAAO,UAACgM,EAAY2B,aAAb,aAAC,EAAoBtH,EAAKpG,WAEnD2N,GAAc,iBAAC5B,QAAD,IAACA,OAAD,EAACA,EAAaE,aAAd,QAAuB,IAAI9Q,KAAI,SAACjB,GAAD,MAAW,CAAEmB,MAAOnB,EAApB,IAEnD,OACE,iCACE,eAAIH,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWmF,GAAG,sBAAsBC,GAAG,oBAGxCsO,IACC,SAAC,IAAD,CACE5T,KAAK,OACLa,SAAS,SAAC,KAAD,CAAWwE,GAAG,wCAAqCC,GAAG,gCAC/DpF,UAAU,YAId,SAAC6P,GAAD,CACE5M,QAASA,EACT6M,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQgC,EAAYpF,KAGrBoF,GAAeA,EAAYjB,QAAQJ,OAAS,IAC3C,SAACgB,GAAD,CAAuBC,WAAYI,EAAYjB,QAASjB,kBAAmBA,KAG7E,SAAC,IAAD,CACE9P,UAAU,yBACVyC,QAASmR,EACTlR,SAAU,SAACpB,GAAD,OAAW8Q,EAAQ9Q,EAAMuS,OAAzB,EACVC,SAAU,SAACxS,GAAD,OAAW8Q,EAAQ9Q,EAAMuS,OAAzB,EACVE,YAAanM,EAAU,kBAAmB,kBAC1CoM,UAAW,GACX1S,MAAOnB,GAAQ2R,MAGjB,SAACZ,GAAD,CAAUC,UAAW9E,EAAK4H,KAAKrR,SAAS,aAExC,SAAC,KAAD,CACE+E,OAAK,EACLD,QAASV,EACTjE,UAAW5C,IAAS4P,EACpBjQ,KAAK,UACLuF,QAAS,kBAAM4B,GAAN,EALX,UAOE,SAAC,KAAD,CAAW9B,GAAG,SAASC,GAAG,cAIjC,C,wCEnFM,SAAS8O,GAAT,GAAqD,IAA9BjR,EAA6B,EAA7BA,QAC5B,EAAkCrC,EAAAA,EAAAA,SAA1BD,EAAR,EAAQA,QAASgS,EAAjB,EAAiBA,aACjB,GAA6BjO,EAAAA,EAAAA,KAArBwB,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SACR2B,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAAiC3D,EAAAA,GAAAA,KAAzBzD,EAAR,EAAQA,UAAW2T,EAAnB,EAAmBA,UAEbC,GAAW1P,EAAAA,EAAAA,KAEjB,GAAmBN,EAAAA,EAAAA,IAAe,YAA3B2E,GAAP,eACA,GAAuB3E,EAAAA,EAAAA,IAAe,gBAA/BiQ,GAAP,eAEA,GAAyCxN,EAAAA,EAAAA,GAAY,CACnDiI,YAAa,CAAC,aACdhI,WAAW,WAAD,wBAAE,qFACVqN,EAAU,aAAa,GADb,SAEGG,EAAAA,GAAAA,IAAa,CACxBpS,OAAQC,EAAAA,GAAAA,UACR+D,OAAAA,EACAD,SAAAA,IALQ,mFAAF,kDAAC,GAQXG,UAAW,SAAC4M,GACGA,EAASC,KAEb/D,UACPvO,EAAQmI,QACNlB,EAAU,wCAAyC,4CAGxD,EACD2L,QAAS,SAAC/R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASiH,EACP,0EACA,gFAEFL,YAAavF,KAAKC,UAAUT,EAAEb,SAC9B4E,UAAW,eAEbiO,QAAQnR,MAAMb,EACf,EACD+S,UAAW,WACTJ,EAAU,aAAa,EACxB,IAhCKlN,EAAR,EAAQA,OAAmBuN,EAA3B,EAAgBxN,WAmChB0E,EAAAA,EAAAA,YAAU,WAGR,OAFAyI,EAAU,YAAaK,GAEhB,WACLL,EAAU,aAAa,EACxB,CACF,GAAE,CAACK,IAEJ,IAAMC,EAAavT,OAAOC,KAAK8B,GAAS0N,OAExC,OACE,iCACE,eAAI3Q,WAAWoK,EAAAA,EAAAA,GAAK,qBAAqBuB,EAAAA,EAAAA,IAAkB,SAA3D,SACG5C,GAAYnB,EAAU,SAAU,cAGnC,SAAC,KAAD,CAAO5H,UAAU,kBAAjB,UACE,gBAAK8Q,QAAQ,cAAc9Q,UAAU,eAArC,UACE,gBAAK8F,KAAMiL,GAAAA,EAAO,kBAAcsD,UAIpC,eAAIrU,UAAU,gBAAd,UACE,SAAC,KAAD,CAAWmF,GAAG,wCAAwCC,GAAG,gDAE3D,UAAC,MAAD,CAAmBpF,UAAU,6BAA6BmH,UAAU,WAApE,WACE,UAAC,UAAD,CAAiBnH,UAAU,iBAA3B,WACE,SAAC,KAAD,CAAWmF,GAAG,2BAAwBC,GAAG,mBAD3C,KACiEqP,EADjE,IAC8EL,EAASM,QAEvF,SAAC,MAAD,CACErP,QAAS,kBAAM4B,GAAN,EACTlE,SAAUvC,GAAaiU,EAAaL,EAASM,IAC7ChN,QAASlH,EACTmH,OAAK,EAJP,UAME,SAAC,KAAD,CAAWxC,GAAG,yBAAyBC,GAAG,+BAKnD,CC3EM,SAASuP,GAAT,GAA+D,IAAD,IAAxC1R,EAAwC,EAAxCA,QAASoJ,EAA+B,EAA/BA,KAAM5H,EAAyB,EAAzBA,KAC1C,GAA0BmQ,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,KAAMjG,EAAd,EAAcA,QACd,GAAyCzK,EAAAA,EAAAA,KAAjC6N,EAAR,EAAQA,YAAanD,EAArB,EAAqBA,gBACrB,GAAsBzK,EAAAA,EAAAA,IAAe,UAA5BoO,GAAT,eACA,GAAwBpO,EAAAA,EAAAA,IAAe,YAA9BqO,GAAT,eACA,GAA4BrO,EAAAA,EAAAA,IAAe,gBAAlCsO,GAAT,eACA,GAAwBL,EAAAA,EAAAA,GAAgB,WAAY,IAA7CyC,GAAP,eACA,GAAwBzC,EAAAA,EAAAA,GAAgB,WAAY,IAA7C0C,GAAP,eAEM1R,EAAM,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAU+O,EAAYpF,KAErClB,EAAAA,EAAAA,YAAU,WACJrI,GACFuL,EAAQ,GACR4D,EAAUnP,EAAOuJ,IACjB6F,EAAYpP,EAAOlD,MACnBuS,EAAgBrP,EAAO+M,WACdvB,GACTD,EAAQ,IACRoG,EAAAA,EAAAA,QAEApG,EAAQ,GACR6D,EAAW,OAACqC,QAAD,IAACA,EAAAA,EAAiB,IAC7BpC,EAAe,OAACqC,QAAD,IAACA,EAAAA,EAAiB,IAEpC,GAAE,CACD1R,EACA2O,EAAYpF,GACZgC,EACA4D,EACAC,EACAC,EACA7D,EACAiG,EACAC,IAGF,OAAwBE,EAAAA,EAAAA,SAAQ/T,OAAOgC,OAAOD,GAAU,aAAaE,QACnE,SAACC,EAAmBC,EAAQ+K,GAO1B,OANIA,EAAQ,IAAM,EAChBhL,EAAI8R,KAAK1R,KAAKH,GAEdD,EAAI+R,MAAM3R,KAAKH,GAGVD,CACR,GACD,CACE8R,KAAM,GACNC,MAAO,KAZHD,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAgBd,OACE,UAAC/I,EAAA,EAAD,CAAgBnH,MAAM,QAAQqH,aAAc8I,EAAAA,EAAAA,QAAAA,MAAsB/I,KAAMA,EAAxE,WACE,iBAAKrM,UAAU,QAAf,WACE,gBAAKA,UAAU,2BAAf,SACGkV,EAAK9T,KAAI,SAACiC,EAAQ+K,GAAT,OACR,gBACEpO,UAAU,cAEV2D,MAAO,CACL0R,UAAU,aAAD,OAAe,IAAM,GAAKjH,EAA1B,KACTkH,IAAI,GAAD,OAAK,IAAM,GAAKlH,EAAhB,KACH8G,KAAK,GAAD,OAAK,GAAW9G,EAAQ,EAAd,GAAV,MANR,UASE,SAAC,KAAD,CAAa/K,OAAQA,EAAQkS,SAAO,KAP/BlS,EAAOlD,KAHN,OAeZ,gBAAKH,UAAU,4BAAf,SACGmV,EAAM/T,KAAI,SAACiC,EAAQ+K,GAAT,OACT,gBACEpO,UAAU,cAEV2D,MAAO,CACL0R,UAAU,aAAD,OAAe,IAAM,GAAKjH,EAA1B,KACTkH,IAAI,GAAD,OAAK,IAAM,GAAKlH,EAAhB,KACH+G,MAAM,GAAD,OAAK,GAAW/G,EAAQ,EAAd,GAAV,MANT,UASE,SAAC,KAAD,CAAa/K,OAAQA,EAAQkS,SAAO,KAP/BlS,EAAOlD,KAHL,OAeb,UAAC8O,EAAD,CAAW5C,KAAMA,EAAM6C,SAAUzK,EAAKyK,SAAtC,UACY,IAAT2F,IAAc,SAAClG,EAAD,CAAUtC,KAAMA,EAAMuC,QAASA,IACpC,IAATiG,IAAc,SAAC9C,GAAD,CAAU1F,KAAMA,EAAMpJ,QAASA,EAAS2L,QAASA,IACtD,IAATiG,IAAc,SAACX,GAAD,CAAajR,QAASA,WAIzC,SAAC,KAAD,CACExC,MAAO,CAAEwE,MAAO,QAASU,MAAO,CAAE6E,QAAS,EAAGC,MAAO,EAAG7E,gBAAgB,GAAS3C,QAAS,CAAC,GAC3FA,QAASA,KAEX,SAACoL,EAAD,CACEC,UAAS,OAAEjC,QAAF,IAAEA,GAAF,UAAEA,EAAMmJ,kBAAR,aAAE,EAAkBC,OAC7BlH,gBAAe,OAAElC,QAAF,IAAEA,GAAF,UAAEA,EAAMmJ,kBAAR,aAAE,EAAkBjH,oBAI1C,CCnIM,SAASmH,GAAT,GAAmE,IAAD,EAAtCrJ,EAAsC,EAAtCA,KAAM5L,EAAgC,EAAhCA,MACvC,OACE,SAAC2L,EAAA,EAAD,CAAgBC,KAAMA,EAAMpH,MAAM,MAAMqH,aAAa,MAAMtM,UAAU,oBAArE,0BACGS,QADH,IACGA,OADH,EACGA,EAAOwE,aADV,QACmB,iBAGtB,C,iJCJM,SAAS0Q,GAAT,GAAyD,IAAhC1S,EAA+B,EAA/BA,QAG9B,OAFyB/B,OAAOgC,OAAOD,GAAS2S,OAAM,SAACvS,GAAD,OAAYA,EAAOC,KAAnB,KAKpD,SAAC,MAAD,CAAqBqC,MAAO,CAAE6E,SAAU,EAAGC,MAAO,GAAI7E,gBAAgB,GAAS+E,gBAAiB,GAAhG,UACE,SAAC,KAAD,CAAWxF,GAAG,oBAAiBC,GAAG,sBAJR,uBAO/B,CCcM,SAASyQ,GAAT,GAAyD,IAAnC5S,EAAkC,EAAlCA,QAASoJ,EAAyB,EAAzBA,KAC5B7L,GAAcyD,EAAAA,GAAAA,KAAdzD,UACR,GAAgCqH,EAAAA,EAAAA,KAAxBgC,EAAR,EAAQA,SAAUjC,EAAlB,EAAkBA,UACZkO,GAAOC,EAAAA,GAAAA,GAAQ9S,GACrB,GAAiBmO,EAAAA,EAAAA,IAAsB,UAAhCG,GAAP,eACA,GAA8BnN,EAAAA,EAAAA,IAAe,kBAApC4R,GAAT,gBAEAtK,EAAAA,EAAAA,YAAU,WACRsK,GAAkB,EACnB,GAAE,IAEH,IAAM9P,GAAS+P,EAAAA,GAAAA,KAETC,GAAcC,EAAAA,GAAAA,OAEpBzK,EAAAA,EAAAA,YAAU,WACRwK,EAAYE,kBAAkB,CAAEC,SAAU,CAAC,OAAQnQ,IACpD,GAAE,CAACA,IAEJ,IAAMnB,EAAe6C,EACnB,2DACA,iEAGI0O,GAAYC,EAAAA,GAAAA,GAAqB,CACrC1R,WAAY,WACZC,eAAgB8C,EACd,sDACA,wCAEF7C,aAAAA,EACAqB,UAAW,YACTiN,EAAAA,EAAAA,KAAMmD,EAAAA,EAAAA,IAA8BV,EAAK3V,MAAO0J,EAAU0H,EAC3D,IAGGkF,GAAeF,EAAAA,GAAAA,GAAqB,CACxC1R,WAAY,WACZC,eAAgB8C,EACd,sDACA,wCAEF7C,aAAAA,EACAqB,UAAW,YACTiN,EAAAA,EAAAA,KAAMqD,EAAAA,EAAAA,IAA6BZ,EAAK3V,MAAO0J,EAAU0H,EAC1D,IAGGoF,GAAeJ,EAAAA,GAAAA,GAAqB,CACxC1R,WAAY,WACZC,eAAgB8C,EACd,yDACA,+DAEF7C,aAAAA,EACAqB,UAAW,YACTiN,EAAAA,EAAAA,KAAMuD,EAAAA,EAAAA,IAA8Bd,EAAK3V,MAAO0J,EAAU0H,EAC3D,IAMH,OAFAsF,EAAAA,GAAAA,IAAQ,kBAAMP,EAAU,CAAEpU,OAAQ4Q,EAAAA,GAAAA,eAA1B,GAAoE,GAAI,GAE5E,OAACzG,QAAD,IAACA,GAAAA,EAAMpG,UAKT,UAAC,aAAD,CAAgBjG,UAAU,cAA1B,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWmF,GAAG,iBAAiBC,GAAG,kBAGpC,SAAC,MAAD,CACEiH,KAAMA,EACNrM,UAAU,wBACV8W,cAAc,oBACdC,iBAAiB,0BAGnB,UAAC,KAAD,CAAO/W,UAAU,uBAAuBgX,MAAI,EAA5C,WACE,SAAC,KAAD,CACElX,KAAK,UACLD,KAAMiW,EAAKmB,SAAU,SAACvT,GAAA,EAAD,KAAwB,SAACwT,GAAA,EAAD,IAC7CnU,SAAUvC,GAAasV,EAAKmB,QAC5B5R,QAAS,kBAAMiR,EAAU,CAAEpU,OAAQ4Q,EAAAA,GAAAA,eAA1B,EACTpL,QAASlH,EALX,UAOE,SAAC,KAAD,CACE2E,GAAG,0CACHC,GAAG,sDAGP,SAAC,KAAD,CACEvF,KAAMiW,EAAKmB,SAAU,SAACvT,GAAA,EAAD,KAAwB,SAACyT,GAAA,EAAD,IAC7CpU,SAAUvC,GAAasV,EAAKmB,QAC5B5R,QAAS,kBAAMoR,EAAa,CAAEvU,OAAQ4Q,EAAAA,GAAAA,eAA7B,EACTpL,QAASlH,EAJX,UAME,SAAC,KAAD,CAAW2E,GAAG,wCAAkCC,GAAG,oCAErD,SAAC,KAAD,CACEtF,KAAK,UACLC,QAAM,EACNF,KAAMiW,EAAKmB,SAAU,SAACvT,GAAA,EAAD,KAAwB,SAAC0T,GAAA,EAAD,IAC7CrU,SAAUvC,GAAasV,EAAKmB,QAC5B5R,QAAS,kBAAMsR,EAAa,CAAEzU,OAAQ4Q,EAAAA,GAAAA,eAA7B,EACTpL,QAASlH,EANX,UAQE,SAAC,KAAD,CAAW2E,GAAG,UAAOC,GAAG,gBAI5B,SAACuQ,GAAD,CAAe1S,QAASA,QAjDnB,SAAC,MAAD,GAoDV,C,gBCxIM,SAASoU,GAAT,GAAuD,IAAjChL,EAAgC,EAAhCA,KAAM5L,EAA0B,EAA1BA,MACjC,OACE,SAAC2L,EAAA,EAAD,CAAgBC,KAAMA,EAAMpH,MAAK,OAAExE,QAAF,IAAEA,OAAF,EAAEA,EAAOwE,MAAOqH,aAAc8I,EAAAA,EAAAA,QAAAA,MAAsBpV,UAAU,QAA/F,UACE,iBAAKA,UAAU,qBAAf,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWmF,GAAG,uBAAuBC,GAAG,qBAG1C,SAACkS,GAAA,EAAD,CAAkBtX,UAAU,8BAE5B,SAAC,KAAD,WACE,SAAC,KAAD,CAAWmF,GAAG,qBAAqBC,GAAG,wBAK/C,C,gBCrBM,SAASmS,GAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,aAWhC,OAVAC,EAAAA,GAAAA,IAAc,WACZ,IACMC,EAAI,mCAAG,8FADO,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAK,IAAzB,IACnB,OAEXJ,IAFW,2CAAH,qDAKVE,GACD,KAEM,kBACR,C,+KCRM,SAASI,EAAT,GAKmB,IAJxB7U,EAIuB,EAJvBA,QACA8U,EAGuB,EAHvBA,UACAC,EAEuB,EAFvBA,gBAEuB,IADvBC,UAAAA,OACuB,SACvB,EACE/W,OAAOgC,OAAOD,GAASE,QACrB,SAACC,EAAUC,GAMT,OALIA,EAAOC,MACTF,EAAIG,aAAaC,KAAKH,GAEtBD,EAAI8U,gBAAgB1U,KAAKH,EAAOlD,MAE3BiD,CACR,GACD,CACEG,aAAc,GACd2U,gBAAiB,KAZf3U,EAAR,EAAQA,aAAc2U,EAAtB,EAAsBA,gBAgBtB,OAA4B,IAAxB3U,EAAaoN,QACR,qBAIP,iBAAK3Q,UAAU,mBAAf,WACE,iBAAKA,UAAU,wBAAf,WACE,SAAC,UAAD,CAAiByH,KAAK,QAAtB,SACGlE,EAAanC,KAAI,SAACiC,GAAD,OAChB,SAAC,KAAD,CAA0BuJ,GAAIvJ,EAAO+M,UAAxB/M,EAAOlD,KADJ,OAIpB,kBAAMH,UAAU,kCAAhB,WACE,SAAC,SAAD,UACGuD,EAAaoN,OAAS,GACrB,SAAC,KAAD,CAAWxL,GAAG,mBAAmBC,GAAG,eAAe0I,OAAQkK,KAE3D,SAAC,KAAD,CAAW7S,GAAG,gBAAgBC,GAAG,aAAa0I,OAAQiK,OAG1D,SAACI,EAAA,EAAD,CAAYnY,UAAU,gDAGxBiY,GAAaC,EAAgBvH,OAAS,IACtC,kBAAM3Q,UAAU,0BAAhB,WACE,SAAC,KAAD,CAAWmF,GAAG,YAAYC,GAAG,gBAD/B,KACkD8S,EAAgBE,KAAK,WAK9E,C,0DCxBM,SAASC,EAAT,GAQa,IAPlBpV,EAOiB,EAPjBA,QACAqV,EAMiB,EANjBA,MACAC,EAKiB,EALjBA,eACAC,EAIiB,EAJjBA,cACA3U,EAGiB,EAHjBA,MAGiB,IAFjB7D,UAAAA,OAEiB,MAFL,GAEK,EADjByY,EACiB,EADjBA,qBAEMC,GAAYxI,EAAAA,EAAAA,UAChB,kBAAOlK,QAAQwS,IAAiBG,EAAAA,EAAAA,GAAQL,EAAOE,GAAkBF,CAAjE,GACA,CAACE,EAAeF,IAGlB,OACE,iBAAKtY,WAAWoK,EAAAA,EAAAA,GAAK,aAAcpK,GAAnC,WACE,mBAAQA,UAAU,oBAAlB,UACE,SAAC,KAAD,CAAWoF,GAAG,eAAeD,GAAG,sBAAsB2I,OAAQjK,OAEhE,eAAI7D,UAAU,sBAAd,SACG0Y,EAAUtX,KAAI,SAACwX,EAAUxK,GACxB,IAAM/K,EAASJ,EAAQ2V,GACjBtL,EAAWiL,IAAmBK,EACpC,OACE,UAAC,EAAAC,SAAD,YACE,kBACE7Y,WAAWoK,EAAAA,EAAAA,GAAK,qBAAsBkD,GAAY,8BAClD3J,MAAO2J,EAAW,CAAEiB,iBAAiBuK,EAAAA,EAAAA,IAAmBzV,EAAO+M,gBAAczO,EAF/E,WAIE,SAAC,KAAD,CAAY0B,OAAQA,MACjBoV,GAAwBA,EAAqBpV,MAEjD+K,EAAQkK,EAAM3H,OAAS,IACtB,iBAAM3Q,UAAU,oBAAhB,UACE,SAAC+Y,EAAA,EAAD,QAVN,4BAAoCH,GAevC,QAIR,C,oCClDM,SAASI,EAAT,GAAyF,IAAlE/V,EAAiE,EAAjEA,QAASY,EAAwD,EAAxDA,MAAOoV,EAAiD,EAAjDA,YAAa/P,EAAoC,EAApCA,SAAUrJ,EAA0B,EAA1BA,KAGnE,OAFAuN,EAAAA,EAAAA,MAGE,iBAAKpN,UAAU,eAAf,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,QAAQ0I,OAAQjK,MAF/C,OAIGhE,QAJH,IAIGA,EAAAA,GAAQ,SAACqZ,EAAA,EAAD,CAAiBvV,MAAO,CAAEwV,MAAO,WAC1C,iBAAKnZ,UAAU,wBAAf,WACE,SAAC,KAAD,UACGgG,QAAQiT,GACPA,GAEA,SAAC,KAAD,CAAW9T,GAAG,sCAAsCC,GAAG,yCAG1D8D,MAEH,SAAC4O,EAAD,CAAiB7U,QAASA,MAG/B,C,sEC3DM,SAAS0V,EAAQL,EAAmBc,GACzC,IAAMC,EAAef,EAAM7H,QAAQ2I,GAEnC,MAAM,GAAN,eAAWd,EAAMgB,MAAMD,KAAvB,OAAyCf,EAAMgB,MAAM,EAAGD,IACzD,C,uLCMM,SAASE,EAAarT,EAAgBD,GAC3C,IAAQ0M,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aAGR,ECHK,SAA8B6G,GAAqD,IAApCC,EAAmC,wDACjFC,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAWJ,GACxB5G,GAAQiH,EAAAA,EAAAA,GAAS,CACrBxD,SAAU,CAAC,YAAa,MAAOmD,GAC/BM,QAAQ,WAAD,wBAAE,qGACgBC,EAAAA,EAAAA,IAAOL,GADvB,cACDM,EADC,yBAEAA,EAAS/G,QAFT,2CAAF,kDAAC,KAgBV,OAVAvH,EAAAA,EAAAA,YAAU,WACR,GAAI+N,EAAW,CACb,IAAMQ,GAAcC,EAAAA,EAAAA,IAAWR,GAAQ,WACrC9G,EAAMuH,SACP,IAED,OAAO,kBAAMF,GAAN,CACR,CACF,GAAE,CAACR,IAEG7G,CACR,CDlB2DwH,CAF7C,gBAAYnU,EAAZ,YAAwBC,EAAxB,WAE2E,GAAhF1F,EAAR,EAAQA,UAAW6Z,EAAnB,EAAmBA,aAAcnT,EAAjC,EAAiCA,QAAS7E,EAA1C,EAA0CA,MAAO4Q,EAAjD,EAAiDA,KAE7C/L,IACFyL,EAAatQ,MAAM,CACjB1B,QAAS,uEACT4G,YAAavF,KAAKC,UAAUI,GAC5BkD,UAAW,eAEbiO,QAAQnR,MAAMA,IAGhB,IAAM5B,EAAK,OAAGwS,QAAH,IAAGA,EAAAA,EAAQ,CAAC,EAUvB,OARAvH,EAAAA,EAAAA,YAAU,WACJlL,GAAa6Z,EACf7G,QAAQ8G,MAAM,wBAEdC,EAAAA,EAAAA,IAAM,CAAE9Z,MAAAA,GAEX,GAAE,CAACD,EAAW6Z,IAER5Z,CACR,C,qNExBM,SAAS+Z,EAAT,GAA+D,IAAxC7U,EAAuC,EAAvCA,MAAO8U,EAAgC,EAAhCA,WACnC,OACE,gBAAIza,UAAU,yBAAd,WACE,2BACE,gBAAKA,UAAU,iCAAf,UACE,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,cAE7B,SAAC,IAAD,CAAWpF,UAAU,0BAA0ByH,KAAK,QAApD,SACG9B,EAAM6E,WAET,iBAAMxK,UAAU,qCAAhB,UACE,SAAC,KAAD,CAAWmF,GAAG,KAAKC,GAAG,cAExB,SAAC,IAAD,CAAWpF,UAAU,0BAA0ByH,KAAK,QAApD,SACG9B,EAAM8E,WAIVzE,QAAQyU,KACP,2BACE,gBAAKza,UAAU,iCAAf,UACE,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,eAE7B,SAAC,IAAD,CACEpF,UAAU,0BACVyH,KAAK,UACL9D,MAAO,CAAE4K,gBAAiB,OAAQ3K,MAAO,SAH3C,SAKG6W,SAMZ,C,yDC3BM,SAASC,EAAT,GAAuE,IAAvCzX,EAAsC,EAAtCA,QAC7B4G,GAAahC,EAAAA,EAAAA,KAAbgC,SACFiM,GAAOC,EAAAA,EAAAA,GAAQ9S,GAEf0X,GAAgBzK,EAAAA,EAAAA,UACpB,kBAAM+E,EAAAA,EAAAA,SAAQ/T,OAAOgC,OAAOD,GAAU,CAAC,QAAS,QAAS,CAAC,OAAQ,OAAlE,GACA,CAACA,IAEH,OACE,wBACG0X,EAAcvZ,KAAI,SAACiC,EAAQ+K,GAC1B,OACE,iBAAKpO,UAAU,kCAAf,UACGoO,EAAQ,EADX,IACe,KACb,SAAC,IAAD,CAAOkM,MAAOjX,EAAOuX,MAAO5a,UAAU,sCAAtC,UACE,SAAC,KAAD,CAAQ4M,GAAIvJ,EAAO+M,SAAUqB,MAAM,aAEpCpO,EAAOlD,KALV,KAKkB6Q,EAAAA,GAAQ3N,EAAO+M,UAAU7I,YAAYsC,GACpDxG,EAAOuJ,KAAOkJ,EAAKlJ,KAClB,SAAC,IAAD,CAAKhJ,MAAOoN,EAAAA,GAAQ3N,EAAO+M,UAAUxM,MAAO5D,UAAU,+BAAtD,UACE,SAAC,KAAD,CAAWmF,GAAG,UAAOC,GAAG,YAR9B,iBAAgE/B,EAAOlD,MAa1E,KAGN,C,wICrCM,SAAS0a,IACd,IAAQla,EAAYC,EAAAA,EAAAA,SAAZD,QACAma,GAAaC,EAAAA,EAAAA,KAAbD,SACFE,GAAUC,EAAAA,EAAAA,GAAa,aAE7B,GAAqCpB,EAAAA,EAAAA,GAAS,CAC5CxD,SAAU,CAAC,SACXyD,QAAQ,WAAD,wBAAE,oGACgBoB,MAAM,GAAD,OAAIF,EAAJ,uBADrB,cACDhI,EADC,gBAEMA,EAASmI,OAFf,mFAAF,kDAAC,KAFF3a,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,QAAS+L,EAA5B,EAA4BA,KAQ5B,GAAgClS,EAAAA,EAAAA,UAA4B,CAC1Dqa,QAAQ,EACRC,aAAa,EACbC,WAAW,EACXC,QAAQ,EACRC,SAAS,IALX,eAAOC,EAAP,KAAiBC,EAAjB,KAQMC,EAAmB,SAAC9Z,EAAaP,GACrCoa,GAAY,SAACE,GAAD,eAAC,UACRA,GADO,cAET/Z,EAAMP,GAFG,GAIb,EAeD,OAAId,GAEA,gBAAKR,UAAU,eAAf,UACE,SAAC,IAAD,MAKFkH,GAEA,gBAAKlH,UAAU,eAAf,UACE,SAAC,IAAD,CACEF,KAAK,QACLa,SACE,SAAC,KAAD,CACEwE,GAAG,2DACHC,GAAG,6DASb,iBAAKpF,UAAU,eAAf,WACE,0BACE,SAAC,KAAD,CACEmF,GAAG,0DACHC,GAAG,8CAHP,QAQA,SAAC,IAAD,CACEsB,QAAS+U,EAASL,OAClBrY,UAAWiD,QAAQiN,EAAKmI,QACxB1Y,SAAU,SAAClB,GAAD,OAAOma,EAAiB,SAAUna,EAAEqE,OAAOa,QAA3C,EACV1G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWmF,GAAG,iBAAcC,GAAG,cAGjC,SAAC,IAAD,CACEsB,QAAS+U,EAASJ,YAClBtY,UAAWiD,QAAQiN,EAAKoI,aACxB3Y,SAAU,SAAClB,GAAD,OAAOma,EAAiB,cAAena,EAAEqE,OAAOa,QAAhD,EACV1G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,mBAG7B,SAAC,IAAD,CACEsB,QAAS+U,EAASH,UAClBvY,UAAWiD,QAAQiN,EAAKqI,WACxB5Y,SAAU,SAAClB,GAAD,OAAOma,EAAiB,YAAana,EAAEqE,OAAOa,QAA9C,EACV1G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWmF,GAAG,gBAAaC,GAAG,iBAGhC,SAAC,IAAD,CACEsB,QAAS+U,EAASF,OAClBxY,UAAWiD,QAAQiN,EAAKsI,QACxB7Y,SAAU,SAAClB,GAAD,OAAOma,EAAiB,SAAUna,EAAEqE,OAAOa,QAA3C,EACV1G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWmF,GAAG,SAASC,GAAG,cAG5B,SAAC,IAAD,CACEsB,QAAS+U,EAASD,QAClBzY,UAAWiD,QAAQiN,EAAKuI,SACxB9Y,SAAU,SAAClB,GAAD,OAAOma,EAAiB,UAAWna,EAAEqE,OAAOa,QAA5C,EACV1G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,eAG7B,SAAC,KAAD,CAAQtF,KAAK,UAAUqK,OAAK,EAAC1C,KAAK,QAAQpC,QA5FvB,WAErB,IAAMwW,EAA6B,GACnC3a,OAAOC,KAAKsa,GAAUK,SAAQ,SAACja,GACzB4Z,EAAS5Z,IAAQoR,EAAKpR,IACxBga,EAAerY,KAAKyP,EAAKpR,GAE5B,IAEDga,EAAeE,OAAOD,QAAQhB,GAC9Bna,EAAQmI,SAAQ,SAAC,KAAD,CAAW3D,GAAG,gCAAgCC,GAAG,+BAClE,EAiFG,UACE,SAAC,KAAD,CAAWD,GAAG,sBAAsBC,GAAG,sBAI9C,CC3HM,SAAS4W,KACd,IAAQ9X,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAA4CE,EAAAA,EAAAA,IAAe,kBAA3D,eAAOE,EAAP,KAAuB0R,EAAvB,KACA,GAA8C1M,EAAAA,EAAAA,KAAtCC,EAAR,EAAQA,eAAgB0S,EAAxB,EAAwBA,kBACxB,GAAsC7K,EAAAA,EAAAA,IAAsB,eAA5D,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,IAAsB,UAAlD,eAAOG,EAAP,KAAeC,EAAf,KAUA,OACE,iBAAKxR,UAAU,qCAAf,WACE,iBAAKA,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWmF,GAAG,SAASC,GAAG,aAAc,KACxC,SAAC,IAAD,CACEvB,OACE,SAAC,KAAD,CACEsB,GAAG,4FACHC,GAAG,6EAJT,UAQE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,QAGF,iBAAKzH,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWmF,GAAG,MAAMC,GAAG,WACvB,SAAC,IAAD,CACEvB,OAAO,SAAC,KAAD,CAAWsB,GAAG,qCAAqCC,GAAG,kCAD/D,UAGE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAAS6K,EAAS,EAClBlM,QAtCmB,SAAC/D,GAC1BkQ,EAAUlQ,EAAQ,GAAM,EACzB,QAwCG,iBAAKtB,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWmF,GAAG,iBAAcC,GAAG,iBAC/B,SAAC,IAAD,CACEvB,OACE,SAAC,KAAD,CACEsB,GAAG,iGACHC,GAAG,+EAJT,UAQE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAAS2K,EACThM,QAjEkB,SAAC/D,GACzBgQ,EAAehQ,EAChB,OAmEI+P,IACC,gBAAKrR,UAAU,mCAAf,UACE,SAAC6a,EAAD,OAIJ,iBAAK7a,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,mBAEE,SAAC,IAAD,CACE6D,OACE,SAAC,KAAD,CACEsB,GAAG,6FACHC,GAAG,sDAJT,UAQE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAAS6C,EACTlE,QAAS4W,OAIZ/X,IACC,iBAAKlE,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,mBAEE,SAAC,IAAD,CAAS6D,OAAO,SAAC,KAAD,CAAWsB,GAAG,sCAAsCC,GAAG,wBAAvE,UACE,SAAC,KAAD,CAAQtF,KAAK,OAAO2R,MAAM,SAAS5R,MAAM,SAAC6R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACErH,gBAAgB,KAChBC,kBAAkB,MAClBqG,QAASpC,EACTe,QAAS,kBAAM2Q,GAAkB,SAACkG,GAAD,OAAQA,CAAR,GAAxB,SAMpB,C,wCCvHM,SAASC,GAAT,GAA+D,IAAnClZ,EAAkC,EAAlCA,QACjC,GAAyBmB,EAAAA,EAAAA,IAAe,kBAExC,OAFA,gBAOE,gBAAKpE,WAAWoK,EAAAA,GAAAA,GAAK,sBAAsBuB,EAAAA,EAAAA,IAAkB,iBAA7D,UACE,eAAI3L,UAAU,2BAAd,UACGoc,EAAAA,EAAAA,IAAYnZ,GAAS7B,KAAI,SAACiC,GACzB,OACE,gBAAIrD,UAAU,6BAAd,WACE,SAAC,IAAD,CAAS6D,MAAOR,EAAOlD,KAAMoF,UAAU,OAAO8W,QAAQ,QAAtD,UACE,SAAC,IAAD,CAAOC,KAAG,EAAC1Y,MAAOP,EAAOC,MAAQ,QAAU,OAA3C,UACE,SAAC,KAAD,CACEsJ,GAAIvJ,EAAO+M,SACXtG,IAAKzG,EAAOlD,KACZsH,KAAK,QACLzH,WAAWoK,EAAAA,GAAAA,IAAM/G,EAAOC,OAAS,8CAItCD,EAAOC,QACN,gBAAKtD,UAAU,4BAAf,UACE,gBAAKA,UAAU,mCAAf,UACE,SAAC,KAAD,CAAWmF,GAAG,UAAUC,GAAG,qBAdnC,6BAAsE/B,EAAOuJ,IAoBhF,SA5BE,uBAgCV,C,gBCvBM,SAAS2P,GAAT,GAAgF,IAAD,QAArDtZ,EAAqD,EAArDA,QAASxC,EAA4C,EAA5CA,MAAO4L,EAAqC,EAArCA,KAAM2D,EAA+B,EAA/BA,OAC7CnG,GAAahC,EAAAA,EAAAA,KAAbgC,SACR,GAAqC2S,EAAAA,EAAAA,IAAU,GAA/C,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA+CF,EAAAA,EAAAA,IAAU,GAAzD,eAAOG,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8C3Y,EAAAA,EAAAA,KAAtCD,EAAR,EAAQA,QAAS2K,EAAjB,EAAiBA,gBAAiBoD,EAAlC,EAAkCA,QAElC,MAAoB,UAAhBxR,EAAMwE,OACD,yBAIP,+BACE,iBAAKjF,UAAU,6BAAf,WACE,oBAAQA,UAAU,0BAA0BqF,QAASqX,EAArD,WACE,kBAAM1c,UAAU,sCAAhB,8BACGqM,EAAKxI,aADR,aACG,EAAagG,UADhB,QAC6B,KAC3B,UAAC,KAAD,CAAWR,SAAO,EAAlB,qBAAqBpG,QAArB,IAAqBA,GAArB,UAAqBA,EAAU+M,UAA/B,aAAqB,EAAmB7P,KAAxC,WAEF,SAAC,IAAD,CAAWN,MAAM,SAACkd,EAAA,EAAD,IAAqBtV,KAAK,WAC3C,gBAAKzH,UAAU,6CAAf,UACE,SAACmc,GAAD,CAAkBlZ,QAASA,UAI/B,UAAC,IAAD,CACEY,OACE,SAAC+F,GAAA,EAAD,CACE/F,MAAK,OAAEwI,QAAF,IAAEA,OAAF,EAAEA,EAAMxI,MACboC,SAAUoG,EAAKpG,SACfQ,SAAS,EACTzG,UAAU,kBAGduF,UAAU,QACVC,UAAU,EACVb,QAAS+X,EACTjX,KAAMgX,EAZR,UAcG5N,IAAoBoD,IACnB,0BACE,SAAC,IAAD,CAAOxK,KAAK,UAAU6U,KAAG,EAAC1Y,MAAM,QAAhC,UACE,SAAC,KAAD,CAAQgJ,GAAE,OAAE3J,QAAF,IAAEA,GAAF,UAAEA,EAAU+M,UAAZ,aAAE,EAAmBI,SAAUqB,MAAM,SAAShK,KAAK,YACtD,KACT,SAAC,KAAD,CAAWtC,GAAG,0BAAoBC,GAAG,2BAIzC,UAAC,IAAD,YACE,SAAC,KAAD,CAAQtF,KAAK,UAAUuF,QAAS,kBAAMuX,GAAqB,EAA3B,EAAkC/c,MAAM,SAACkd,EAAA,EAAD,IAAxE,UACE,SAAC,KAAD,CAAW5X,GAAG,sBAAgBC,GAAG,gBAEnC,SAAC,MAAD,CAAY4X,SAAU3Q,KACtB,SAAC,IAAD,CACExI,OAAO,SAAC,KAAD,CAAWsB,GAAG,sBAAgBC,GAAG,aACxC+T,MAAO,IACP3T,UAAU,EACVb,QAASiY,EACTnX,KAAMkX,EALR,UAOE,SAACX,GAAD,MAED9X,IACC,SAAC,KAAD,CAAQpE,KAAK,UAAUC,QAAM,EAACsF,QAAS,kBAAMwX,EAAS,OAAf,EAAwBhd,MAAM,SAACod,EAAA,EAAD,IAArE,qBAMJ,SAAC,IAAD,KAEA,SAACzC,EAAD,CAAa7U,OAAY,OAALlF,QAAK,IAALA,OAAA,EAAAA,EAAOkF,QAAS,EAAG8U,WAAU,OAAEha,QAAF,IAAEA,OAAF,EAAEA,EAAOga,cAE1D,SAACC,EAAD,CAAsBzX,QAASA,WAKxC,C,+DCzFM,SAASia,GAAT,GAA2D,IAAhCzc,EAA+B,EAA/BA,MACxBoJ,GAAahC,EAAAA,EAAAA,KAAbgC,SACFgT,GAAWC,EAAAA,EAAAA,MAEjB,GAAwB/b,EAAAA,EAAAA,UAAyB,MAAjD,eAAO0E,EAAP,KAAa0X,EAAb,KAMMC,EAAW3c,EAAM2c,SAEvB,GAAIA,EAAU,CACZ,IACMC,EAAsBC,KAAKC,MAEjC,GAAIH,EAASI,WAAaH,EAHK,KAI7B,OAAO,wBAGT,IAAML,EAAWS,EAAAA,EAAUL,EAASnX,UACpC,OACE,+BACE,UAAC,KAAD,CACEpC,OACE,SAAC,KAAD,CACEsB,GAAG,kDACHC,GAAG,yCAGPK,KAAI,OAAEA,QAAF,IAAEA,GAAAA,EACNiY,SAzBU,WAChBP,GAAQ,EACT,EAwBOQ,KAAM,WACJd,EAAS,IAAD,OAAKO,EAASlX,QACvB,EACD0X,QAAQ,SAAC,KAAD,CAAWzY,GAAG,oBAAoBC,GAAG,mBAC7CyY,YAAY,SAAC,KAAD,CAAW1Y,GAAG,WAAWC,GAAG,WAb1C,WAeE,SAAC,KAAD,CACE0E,IAAKkT,EAASnZ,MAAMgG,GACpBtD,IAAG,UAAKwD,GAAAA,GAAAA,SAAL,OAA0BiT,EAAS/W,SAAnC,YAA+C4D,EAA/C,QACHG,SAAQ,UAAKD,GAAAA,GAAAA,QAAL,qBAAoCF,EAApC,QACR7J,UAAU,mBAEZ,SAAC,MAAD,UAAQod,EAASlX,aAIxB,CAED,OAAO,uBACR,CC1CM,SAAS4X,GAAT,GAAwE,IAAD,IAApDC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,mBAClC5J,GAAW1P,EAAAA,EAAAA,KACTmF,GAAahC,EAAAA,EAAAA,KAAbgC,SACFpJ,EAAQ8Y,EAAanF,EAASlO,OAAQ6X,GAC5C,GAAiB3Z,EAAAA,EAAAA,IAAe,UAAzB4L,GAAP,eACA,GAAwBoB,EAAAA,EAAAA,IAAsB,YAArC6M,GAAT,eACA,GAAwBld,EAAAA,EAAAA,UAAc,CAAC,GAAvC,eAAOsL,EAAP,KAAa6R,EAAb,KACMjY,EAAQ,iBAAGoG,QAAH,IAAGA,OAAH,EAAGA,EAAMxI,aAAT,QAAkB,GAC1BZ,EAAO,UAAGxC,EAAMwC,eAAT,QAAoB,CAAC,EAkBlC,GChDK,WACL,IAAQ0P,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aACFkK,GAAWC,EAAAA,EAAAA,MACTlV,GAAcC,EAAAA,EAAAA,KAAdD,UAGFuW,GAASC,EAAAA,EAAAA,GAAQ,MAEvB1S,EAAAA,EAAAA,YAAU,WACJyS,GACFxL,EAAa0L,QAAQ,CACnB1d,QAASiH,EACP,yDACA,uDAEFwD,SAAU,EACVzG,QAAS,kBAAMkY,EAAS,IAAf,EACTtX,UAAW,OAGhB,GAAE,CAAC4Y,EAAQtB,EAAUjV,EAAW+K,GAClC,CDWC2L,IAEAC,EAAAA,EAAAA,GAAS,GAAD,OAAItY,EAAQ,UAAMA,EAAS4D,GAAf,OAAgC,GAA5C,qBAGR6B,EAAAA,EAAAA,YAAU,WACRwS,EAAQH,EAAiBN,EAAAA,EAAUM,GAAkB,CAAC,EACvD,GAAE,CAACA,KAGJrS,EAAAA,EAAAA,YAAU,WACJ7B,IAAauK,EAASvK,UACxBoU,EAAY7J,EAASvK,SAExB,GAAE,CAACuK,EAASvK,YAERmG,IAAW/M,EAAQ+M,GACtB,OACE,iCACE,SAACkN,GAAD,CAAiBzc,MAAOA,KACxB,SAAC,KAAD,CAAYwC,QAASA,EAASoJ,KAAMA,EAAM5H,KAAM2P,IAFlD,OAOJ,IAAMoK,EAAuBR,EAAmBvd,GAEhD,OACE,iCACE,SAAC8b,GAAD,CAAgBtZ,QAASA,EAASxC,MAAOA,EAAO4L,KAAMA,EAAM2D,OAAQA,KACpE,SAACkN,GAAD,CAAiBzc,MAAOA,KACxB,SAAC+d,EAAD,CAAiBvb,QAASA,EAASxC,MAAOA,EAAO4L,KAAMA,EAAM5H,KAAM2P,KACnE,SAAC,MAAD,CAAiB3T,MAAOA,EAAOwC,QAASA,MAG7C,C,oHE9CYwb,GAAOC,EAAAA,EAAAA,aAClB,WAA+F7R,GAAS,IAArG3D,EAAoG,EAApGA,SAAUyV,EAA0F,EAA1FA,aAA0F,IAA5EC,UAAAA,OAA4E,aAAzDC,WAAAA,OAAyD,aAArC7e,UAAAA,OAAqC,MAAzB,GAAyB,EACrG,OACE,iBACE6M,IAAKA,EACL7M,WAAWoK,EAAAA,EAAAA,GACT,OACAwU,GAAa,mBACbC,GAAc,oBACd7e,GANJ,UASG2e,EACAzV,IAGN,I,4CCjCG4V,EAA4B,SAACC,GACjC,OAAQA,GACN,IAAK,SACH,OACE,SAAC,KAAD,CAAW5Z,GAAG,0CAA0CC,GAAG,0CAE/D,IAAK,UACH,OACE,SAAC,KAAD,CACED,GAAG,wDACHC,GAAG,4CAIT,QACE,OAAO,SAAC,KAAD,CAAWD,GAAG,+BAA+BC,GAAG,6BAE5D,EAsCM,SAAS4Z,EAAT,GAAqG,IAAD,EAA5E9V,EAA4E,EAA5EA,SAAU2L,EAAkE,EAAlEA,KAAMoK,EAA4D,EAA5DA,WAAYhc,EAAgD,EAAhDA,QAAgD,IAAvCic,YAAAA,OAAuC,MAAzB,CAAC,EAAwB,EACpGjc,IAASsX,EAAAA,EAAAA,IAAM,8DAA+D,QAEnF,IAEuC,IAFjC4E,EAAUC,MAAMC,QAAQnW,GAAYA,EAAW,CAACA,GAEtD,OAAIjG,GAAW4R,GAAQsK,EAAQxO,QAE3B,SAAC,KAAD,CACE1N,QAASA,EACTY,OAAO,SAAC,KAAD,CAAWsB,GAAG,UAAUC,GAAG,UAClC6T,YAAW,UAAEiG,EAAYjG,mBAAd,QAA6B6F,EAAyB,UAACI,EAAYpf,YAAb,QAAqB,WAHxF,SAKGof,EAAYC,UAKdA,EAAQtK,GAIb,iBAAIoK,QAAJ,IAAIA,OAAJ,EAAIA,EAAapK,UAAjB,SACSsK,EAAQtK,IAGV,oBAPE,SAAC,KAAD,GAQV,C,8LC/DM,SAASyK,EAAT,GASc,IAjCJhe,EAyBfzB,EAQkB,EARlBA,KACAC,EAOkB,EAPlBA,KACAoM,EAMkB,EANlBA,SACAhD,EAKkB,EALlBA,SAKkB,IAJlBlJ,UAAAA,OAIkB,MAJN,GAIM,MAHlBmM,cAAAA,OAGkB,MAHF,SAGE,MAFlBoT,QAAAA,OAEkB,MAFR,EAEQ,EADlBC,EACkB,EADlBA,QAEA,OACE,UAACvT,EAAA,EAAD,CACEpM,KAAI,OAAEA,QAAF,IAAEA,EAAAA,GAAQ,SAAC4f,EAAA,EAAD,IACd3f,KAAMA,EACNoM,SAAUA,EACVlM,UAAWA,EACXmM,cAAeA,EALjB,UAOGoT,EAPH,KAnCaje,EA0CQke,EA1CWle,EAAQ,GAAR,WAAiBA,GAAUA,GA2CxD4H,IAGN,C,uHCrCM,SAASwW,EAAT,GAQY,IAPjBC,EAOgB,EAPhBA,MAEAlV,GAKgB,EANhBmV,cAMgB,EALhBnV,OAKgB,IAJhB3K,KAAAA,OAIgB,MAJT,OAIS,EAHhBwB,EAGgB,EAHhBA,MAEG1B,GACa,EAFhBigB,QAEgB,aACVC,EAAa,IAAe,IAARxe,EAAemJ,EACzC,OACE,SAAC,KAAD,QACEsV,QAASD,EACTH,MAAOA,EACPK,UAAU,EACVrc,MAAO,CAAEsc,aAAc,QACvBxY,KAAMkY,GAASA,EAAQ,GAAK,aAAUhe,EACtC7B,KAAMA,GACFF,GAGT,CCLM,SAASsgB,EAAT,GAAiG,IAAxE9U,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,SAAUvL,EAAmD,EAAnDA,KAAmD,IAA7C6f,MAAAA,OAA6C,MAArC,GAAqC,EAAjC3f,EAAiC,EAAjCA,UAC5DsL,GAAaJ,EAAAA,EAAAA,GAAa,CAChCE,SAAAA,EACAD,WAAW,EACXE,SAAAA,IAHMC,SAMR,OACE,iBAAKtL,WAAWoK,EAAAA,EAAAA,GAAK,eAAgBpK,GAArC,UACGsL,EADH,KACa,SAACoU,EAAD,CAAUC,MAAOA,EAAOre,MAAOgK,EAAUb,MAAOW,EAAUtL,KAAMA,IAD7E,IACuFwL,IAG1F,C,wECnBM,SAAS6U,EAAT,GAQmB,IAzBT7e,EAkBfzB,EAOuB,EAPvBA,KACAC,EAMuB,EANvBA,KACAoM,EAKuB,EALvBA,SACAhD,EAIuB,EAJvBA,SAIuB,IAHvBlJ,UAAAA,OAGuB,MAHX,GAGW,MAFvBmM,cAAAA,OAEuB,MAFP,SAEO,EADpBiU,GACoB,YACvB,GAA6BlV,EAAAA,EAAAA,IAAa,UAAKkV,IAAvCb,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAEjB,OACE,UAACvT,EAAA,EAAD,CACEpM,KAAI,OAAEA,QAAF,IAAEA,EAAAA,GAAQ,SAAC4f,EAAA,EAAD,IACd3f,KAAMA,EACNoM,SAAUA,EACVlM,UAAWA,EACXmM,cAAeA,EALjB,UAOGoT,EAPH,KA7Baje,EAoCQke,EApCWle,EAAQ,GAAR,WAAiBA,GAAUA,GAqCxD4H,IAGN,CCrCM,SAASmX,EAAT,GAA4E,IAArDjV,EAAoD,EAApDA,SAAUE,EAA0C,EAA1CA,SAAUD,EAAgC,EAAhCA,SAC9BiV,GAAoBpV,EAAAA,EAAAA,GAAa,CACjDE,SAAAA,EACAD,eAAwBxJ,IAAb2J,EACXD,SAAAA,IAHMC,SAMFwU,GAAc,OAACxU,QAAD,IAACA,EAAAA,EAAYgV,GAAmBlV,EAAY,IAEhE,OACE,gBAAKpL,UAAU,yBAAf,UACE,iBAAMA,UAAU,oCAAhB,UACE,iBAAMA,UAAU,+BAA+B2D,MAAO,CAAEwV,MAAM,GAAD,OAAK2G,EAAL,WAIpE,C,wGCXM,SAAS/E,IACd,OAAwC3J,EAAAA,EAAAA,IAAsB,gBAA9D,eAAOmP,EAAP,KAAqBC,EAArB,KACA,GAAsBpP,EAAAA,EAAAA,IAAsB,eAArCC,GAAP,eAaA,MAAO,CACLkP,aAAAA,EACAE,gBANsB,SAACC,GACvB,OAAO1a,QAAQ0a,GAAUrP,IAAV,OAAyBkP,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAeG,IACxD,EAKC5F,SAde,SAAC4F,GAAoB,IAAD,EACnCF,GAAgB,kBACXD,GADU,cAEZG,EAFY,YAEH,OAACH,QAAD,IAACA,GAAAA,EAAeG,WAFb,WAIhB,EAUCC,cAAetP,EAElB,C,4FC3BM,SAAS/H,IACd,OAA4ClF,EAAAA,EAAAA,IAAe,kBAA3D,eAAOmF,EAAP,KAAuBqX,EAAvB,KAMA,MAAO,CACLpX,SAAAA,EAAAA,GACAD,eAAAA,EACA0S,kBAPwB,WACxB2E,GAAkB,SAAC1E,GAAD,OAAQA,CAAR,GACnB,EAOF,C,2LC2BM,SAAS3F,EAAT,GAQgD,IAPrD1R,EAOoD,EAPpDA,WAOoD,IANpDgc,aAAAA,OAMoD,MANrC,WAAQ,EAM6B,MALpD7b,YAAAA,OAKoD,MALtC,WAAQ,EAK8B,MAJpDuO,QAAAA,OAIoD,MAJ1C,WAAQ,EAIkC,MAHpDnN,UAAAA,OAGoD,MAHxC,WAAQ,EAGgC,MAFpDtB,eAAAA,OAEoD,MAFnC,0BAEmC,MADpDC,aAAAA,OACoD,MADrC,sBACqC,EACpD,EAAkCnE,EAAAA,EAAAA,SAA1BD,EAAR,EAAQA,QAASgS,EAAjB,EAAiBA,aACTwB,GAAclQ,EAAAA,EAAAA,KAAdkQ,UACR,GAA6BzP,EAAAA,EAAAA,KAArBwB,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SAChB,GAAiB7B,EAAAA,EAAAA,IAAe,UAAzB4L,GAAP,eAEM4C,GAAQ/L,EAAAA,EAAAA,GAAY,CACxBiI,YAAa,CAACjK,GACdiC,WAAY,SAAClF,GAAD,OACViR,EAAAA,GAAAA,KAAA,QACE3M,OAAAA,EACAD,SAAAA,EACA2S,SAAU5I,GACPpO,GALK,EAOZkf,SAAS,WAAD,wBAAE,qFACR3M,EAAUtP,GAAY,GADd,SAEFgc,IAFE,2CAAF,kDAAC,GAITza,UAAU,WAAD,wBAAE,8FACHA,IADG,OAETzF,EAAQmI,QAAQhE,GAFP,2CAAF,kDAAC,GAIVyO,QAAS,SAAC/R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASoE,EACTwC,YAAavF,KAAKC,UAAL,OAAeT,QAAf,IAAeA,OAAf,EAAeA,EAAGb,SAC/B4E,UAAW,eAEbiO,QAAQnR,MAAMb,GACd+R,GACD,EACDgB,UAAU,WAAD,wBAAE,8FACHvP,IADG,OAETmP,EAAUtP,GAAY,GAFb,2CAAF,kDAAC,KAMZ,OApFe,SAACkc,GAA0D,IACtEC,EADuBC,EAA8C,uDAApC,IAErC,OAAO,WAAqB,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACzBC,aAAaH,GACbA,EAAQnJ,YAAW,WACjBkJ,EAAKK,MAAM,EAAMF,EAClB,GAAED,EACJ,CACF,CA4EQI,CAASzO,EAAM3L,OACvB,C,4FCtFM,SAASqD,IACd,IAAQgX,GAAc5c,EAAAA,EAAAA,KAAd4c,UACR,GAAiBld,EAAAA,EAAAA,IAAe,UAEhC,OAAOkd,KAFP,cAGD,C,2LCkCM,SAAS1c,EAAT,GAQgD,IAPrDC,EAOoD,EAPpDA,WAOoD,IANpDgc,aAAAA,OAMoD,MANrC,WAAQ,EAM6B,MALpD7b,YAAAA,OAKoD,MALtC,WAAQ,EAK8B,MAJpDuO,QAAAA,OAIoD,MAJ1C,WAAQ,EAIkC,MAHpDnN,UAAAA,OAGoD,MAHxC,WAAQ,EAGgC,MAFpDtB,eAAAA,OAEoD,MAFnC,0BAEmC,MADpDC,aAAAA,OACoD,MADrC,sBACqC,EACpD,EAAkCnE,EAAAA,EAAAA,SAA1BD,EAAR,EAAQA,QAASgS,EAAjB,EAAiBA,aACTwB,GAAclQ,EAAAA,EAAAA,KAAdkQ,UACR,GAA6BzP,EAAAA,EAAAA,KAArBwB,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SAChB,GAAiB7B,EAAAA,EAAAA,IAAe,UAAzB4L,GAAP,eAEM4C,GAAQ/L,EAAAA,EAAAA,GAAY,CACxBiI,YAAa,CAACjK,GACdiC,WAAY,SAAClF,GAAD,OACV0S,EAAAA,GAAAA,KAAA,QACEpO,OAAAA,EACAD,SAAAA,EACA2S,SAAU5I,GACPpO,GALK,EAOZkf,SAAS,WAAD,wBAAE,qFACR3M,EAAUtP,GAAY,GADd,SAEFgc,IAFE,2CAAF,kDAAC,GAITza,UAAU,WAAD,wBAAE,8FACHA,IADG,OAETzF,EAAQmI,QAAQhE,GAFP,2CAAF,kDAAC,GAIVyO,QAAS,SAAC/R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASoE,EACTwC,YAAavF,KAAKC,UAAL,OAAeT,QAAf,IAAeA,OAAf,EAAeA,EAAGb,SAC/B4E,UAAW,eAEbiO,QAAQnR,MAAMb,GACd+R,GACD,EACDgB,UAAU,WAAD,wBAAE,8FACHvP,IADG,OAETmP,EAAUtP,GAAY,GAFb,2CAAF,kDAAC,KAMZ,OApFe,SAACkc,GAA0D,IACtEC,EADuBC,EAA8C,uDAApC,IAErC,OAAO,WAAqB,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACzBC,aAAaH,GACbA,EAAQnJ,YAAW,WACjBkJ,EAAKK,MAAM,EAAMF,EAClB,GAAED,EACJ,CACF,CA4EQI,CAASzO,EAAM3L,OACvB,C,kJC5EM,SAAS4P,EAAQ0K,GAAsE,IAA3CC,EAA0C,uDAApB,GAAIC,EAAgB,uCACrF5W,GAASP,EAAAA,EAAAA,KACf,GAAiBlG,EAAAA,EAAAA,IAAe,UAAhC,eAAO4L,EAAP,KACA,GAA8BjP,EAAAA,EAAAA,WAAS,GAAvC,eAAO2gB,EAAP,KAAgBC,EAAhB,KACMvW,EAAQ,OAAGqW,QAAH,IAAGA,EAAAA,GAAS9R,EAAAA,EAAAA,GAAc,CAAC,EAAG,EAAG,EAAG,EAAG,IAErD,OAAOzE,EAAAA,EAAAA,GAAa,CAClBE,SAAAA,EACAC,SAAU,YAELqW,GACDlY,EAAAA,IACAoY,EAAAA,KACC/W,GACDmF,IAAW6R,EAAAA,IACXL,EAAa5L,MAAM5P,WAEnBub,IACAI,GAAW,GAEd,EACD5e,SAAU2e,GAEb,C,gFC3BM,SAAS9M,IAAoC,IAA5BkN,EAA2B,uDAAZ,EACrC,GAAwB/gB,EAAAA,EAAAA,UAAiB+gB,GAAzC,eAAOjN,EAAP,KAAajG,EAAb,KAEM4I,EAAe,kBAAM5I,GAAQ,SAACsN,GAAD,OAAOA,EAAI,CAAX,GAAd,EAEf6F,EAAmB,kBAAMnT,GAAQ,SAACsN,GAAD,OAAQA,EAAI,EAAI,EAAI,EAAIA,EAAI,CAA5B,GAAd,EAEzB,MAAO,CACLrH,KAAAA,EACAjG,QAAAA,EACA4I,aAAAA,EACAuK,iBAAAA,EAEH,C,wBCrBM,SAAS9G,EAAa+G,GAC3B,IAAMhH,EAAUiH,6BAEhB,OAAQD,GACN,IAAK,SACH,MAAM,GAAN,OAAUhH,EAAV,YAAqBiH,oBACvB,IAAK,UACH,MAAM,GAAN,OAAUjH,EAAV,YAAqBiH,cACvB,IAAK,YACH,MAAM,GAAN,OAAUjH,EAAV,YAAqBiH,0BACvB,IAAK,UACH,MAAM,GAAN,OAAUjH,EAAV,YAAqBiH,qBACvB,QACE,MAAM,IAAIC,MAAM,mBAErB,C,2HCjBM,SAAS9U,IAA8C,IAAjB+U,EAAgB,wDAC3D,GAA8B/d,EAAAA,EAAAA,IAAe,kBAA7C,eAASge,EAAT,MAEA1W,EAAAA,EAAAA,YAAU,WAER,OADA0W,IAAkBD,GACX,WACLC,GAAkB,EACnB,CACF,GAAE,GACJ,C,kHCIM,SAASrM,EAAQ9S,EAAsBxC,GAC5C,OAAiB2D,EAAAA,EAAAA,IAAe,UAAzB4L,GAAP,eACA,GAAwB5L,EAAAA,EAAAA,IAAe,QAAvC,eAAO0R,EAAP,KAAauM,EAAb,KACA,GAA8BthB,EAAAA,EAAAA,WAAS,GAAvC,eAAOkW,EAAP,KAAgBqL,EAAhB,KA0CA,OAxCA5W,EAAAA,EAAAA,YAAU,WACJsE,IAAW6R,EAAAA,GASX7R,GAAM,OAAI/M,QAAJ,IAAIA,GAAAA,EAAU+M,IACtBqS,EAAO,OAACpf,QAAD,IAACA,OAAD,EAACA,EAAU+M,IATlBqS,GAAQ,kBACHE,EAAAA,IADE,IAEL3V,GAAIiV,EAAAA,GACJve,OAAO,IAQZ,GAAE,CAACL,EAAS+M,EAAQqS,KAErB3W,EAAAA,EAAAA,YAAU,WAWgB,IAAD,EAVnBsE,IAAW6R,EAAAA,GAKX7R,IAA0B,KAAZ,OAAJ8F,QAAI,IAAJA,OAAA,EAAAA,EAAMxS,OAClBgf,GAAW,GAIT,OAAC7hB,QAAD,IAACA,GAAAA,EAAO+hB,UAMRxS,IAAc,OAAJ8F,QAAI,IAAJA,OAAA,EAAAA,EAAM0M,YAAN,OAAkB/hB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAO+hB,WACrCF,GAAW,GAIbA,GAAW,GAVTA,EAAU,iBAACxM,QAAD,IAACA,OAAD,EAACA,EAAMxS,aAAP,UAVVgf,GAAW,EAqBd,GAAE,CAACtS,EAAD,OAAS8F,QAAT,IAASA,OAAT,EAASA,EAAMxS,MAAf,OAAsBwS,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM0M,UAA5B,OAAuC/hB,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAO+hB,aAE1C,kBACF1M,GADL,IAEEmB,QAAAA,EACAwL,SAAQ3M,EAAK0M,WAAYlF,KAAKC,MAAQzH,EAAK0M,UAvDzB,MAyDrB,C,wDC/DM,IAAMpN,EAAS,CACpBsN,QAAS,CACPC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,UAAW,YACXC,KAAM,QAERC,SAAU,CACRC,UAAW,YACXC,WAAY,aACZC,QAAS,WAEXC,UAAW,CACTC,KAAM,OACNH,WAAY,aACZI,QAAS,WAEXC,cAAe,CACbC,gBAAiB,kBACjBC,YAAa,cACbC,YAAa,cACbC,OAAQ,UAEVC,uBAAwB,CACtBC,QAAS,WAEXC,uBAAwB,CACtBC,gBAAiB,kBACjBC,cAAe,gBACfC,UAAW,YACXC,aAAc,eACdC,cAAe,gBACfC,UAAW,YACXC,OAAQ,UAEVC,qBAAsB,CACpBC,MAAO,QACPC,UAAW,YACXC,OAAQ,SACRC,WAAY,cAEdC,eAAgB,CACdC,gBAAiB,kBACjBC,aAAc,eACdC,SAAU,WACVT,OAAQ,UAEVU,uBAAwB,CACtBC,YAAa,cACbR,UAAW,YACXS,QAAS,UACTR,OAAQ,SACRJ,OAAQ,UAEVa,uBAAwB,CACtBrB,QAAS,WAEXsB,OAAQ,CACNC,QAAS,UACTjC,QAAS,WAEXkC,iBAAkB,CAChBC,WAAY,aACZC,cAAe,gBACfC,WAAY,aACZC,iBAAkB,mBAClBf,WAAY,cAEdgB,iBAAkB,CAChBC,SAAU,WACVxC,QAAS,WAEXyC,kBAAmB,CACjBC,eAAgB,iBAChBC,iBAAkB,mBAClBtB,UAAW,YACXE,WAAY,cAEdqB,iBAAkB,CAChBC,gBAAiB,kBACjBC,cAAe,gBACfnB,SAAU,WACVT,OAAQ,UAEV6B,yBAA0B,CACxBrC,QAAS,WAEXsC,kBAAmB,CACjBC,aAAc,eACdC,eAAgB,iBAChBlD,QAAS,WAEXmD,gBAAiB,CACfC,iBAAkB,mBAClBC,QAAS,UACTC,OAAQ,SACRC,aAAc,gBAEhBC,QAAS,CACPC,QAAS,UACTC,MAAO,QACPlD,OAAQ,UAEVmD,eAAgB,CACdC,mBAAoB,qBACpBC,iBAAkB,mBAClBC,QAAS,UACTvC,WAAY,cAEdwC,QAAS,CACPrC,aAAc,eACdsC,2BAA4B,6BAC5BxD,OAAQ,UAEVyD,eAAgB,CACdC,eAAgB,iBAChB1D,OAAQ,SACR2D,WAAY,cAEdC,aAAc,CACZC,eAAgB,iBAChBC,gBAAiB,kBACjBtE,QAAS,WAEXuE,UAAW,CACT7D,QAAS,WAEX8D,gBAAiB,CACfC,UAAW,YACXC,MAAO,QACPxD,OAAQ,UAEVyD,iBAAkB,CAChBjE,QAAS,WAEXkE,gBAAiB,CACfC,gBAAiB,kBACjBC,MAAO,QACPvD,WAAY,cAEdwD,uBAAwB,CACtBC,gBAAiB,kBACjBC,YAAa,cACb1D,WAAY,cAEd2D,cAAe,CACbC,UAAW,YACXC,SAAU,WACVC,KAAM,OACN9D,WAAY,cAEd+D,YAAa,CACXC,oBAAqB,sBACrBC,sBAAuB,wBACvB7D,SAAU,WACV3B,QAAS,WAEXyF,eAAgB,CACdC,iBAAkB,mBAClB3F,WAAY,aACZmB,OAAQ,UAEVyE,iBAAkB,CAChBtC,QAAS,UACTtD,WAAY,aACZI,QAAS,WAEXyF,iBAAkB,CAChBC,cAAe,gBACfC,SAAU,WACVvE,WAAY,cAEdwE,iBAAkB,CAChBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,KAAM,OACNC,OAAQ,SACRnG,QAAS,WAEXoG,WAAY,CACVC,OAAQ,SACRvG,UAAW,YACX6B,SAAU,WACVT,OAAQ,UAEVoF,oBAAqB,CACnBC,gBAAiB,kBACjBC,eAAgB,iBAChBzG,WAAY,aACZmB,OAAQ,UAEVuF,kBAAmB,CACjBC,kBAAmB,oBACnB9C,mBAAoB,qBACpB+C,YAAa,cACbC,MAAO,SAETC,gBAAiB,CACfC,sBAAuB,wBACvBC,gBAAiB,kBACjBvG,OAAQ,UAEVwG,eAAgB,CACdtE,eAAgB,iBAChBuE,eAAgB,iBAChBC,gBAAiB,kBACjBlH,QAAS,WAEXmH,WAAY,CACVzE,eAAgB,iBAChB0E,QAAS,UACTtD,QAAS,UACTY,MAAO,QACP2C,aAAc,eACd7G,OAAQ,UAEV8G,gBAAiB,CACfC,gBAAiB,kBACjBC,kBAAmB,oBACnBtG,OAAQ,UAEVuG,oBAAqB,CACnBC,eAAgB,iBAChBC,sBAAuB,wBACvBC,cAAe,gBACfC,iBAAkB,oBAEpBC,WAAY,CACVpH,QAAS,WAEXqH,SAAU,CACRrH,QAAS,W,wKCnON,SAASxQ,EACd8X,EACAthB,EACA0H,GAEO,IADP6Z,EACM,uDADmB,WAAQ,EAE3BC,EAAY,IAAIC,yBAAyBH,EAAKthB,IACpDwhB,EAAUE,KAAoB,OAAb1hB,EAAoB,QAAU,QAC/CwhB,EAAU9Z,OAASA,EACnB8Z,EAAUG,iBAAiB,MAAOJ,GAClCtpB,OAAO2pB,gBAAgBpY,MAAMgY,EAC9B,CAOM,SAAS/X,EAAwBnT,GACtC,IAAMsC,EAAU,CACd,CACE0C,GAAG,cAAD,OAAgBhF,EAAhB,KACFiF,GAAG,YAAD,OAAcjF,EAAd,MAEJ,CACEgF,GAAG,mCACHC,GAAG,+BAEL,CACED,GAAG,sBACHC,GAAG,mBAEL,CACED,GAAG,oBAAD,OAAgBhF,EAAhB,KACFiF,GAAG,cAAD,OAAgBjF,EAAhB,MAEJ,CACEgF,GAAG,GAAD,OAAKhF,EAAL,2CACFiF,GAAG,GAAD,OAAKjF,EAAL,cAEJ,CACEgF,GAAG,yBAAD,OAA2BhF,EAA3B,4BACFiF,GAAG,iBAAD,OAAmBjF,EAAnB,MAEJ,CACEgF,GAAG,6DACHC,GAAG,0DAIP,OAAOuK,EAAAA,EAAAA,GAAclN,EACtB,CAEM,SAAS+T,EAA8BrW,GAC5C,IAAMsC,EAAU,CACd,CACE0C,GAAG,mEAAD,OAAqEhF,GACvEiF,GAAG,oDAAD,OAAsDjF,IAE1D,CACEgF,GAAG,+CACHC,GAAG,gDAEL,CACED,GAAG,0DACHC,GAAG,4DAIP,OAAOuK,EAAAA,EAAAA,GAAclN,EACtB,CAEM,SAASiU,EAA6BvW,GAC3C,IAAMsC,EAAU,CACd,CACE0C,GAAG,4BAAD,OAA2BhF,EAA3B,+CACFiF,GAAG,oCAAD,OAAsCjF,EAAtC,0CAEJ,CACEgF,GAAG,kFACHC,GAAG,wFAEL,CACED,GAAG,4CACHC,GAAG,qDAIP,OAAOuK,EAAAA,EAAAA,GAAclN,EACtB,CAEM,SAASmU,EAA8BzW,GAC5C,IAAMsC,EAAU,CACd,CACE0C,GAAG,QAAD,OAAUhF,EAAV,kEACFiF,GAAG,MAAD,OAAQjF,EAAR,2DAEJ,CACEgF,GAAG,+EACHC,GAAG,qEAEL,CACED,GAAG,qIACHC,GAAG,sCAIP,OAAOuK,EAAAA,EAAAA,GAAclN,EACtB,C","sources":["components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/auth/SignIn.tsx","components/debug/DebugOnly.tsx","components/debug/DevButton.tsx","components/general/GameBanner.tsx","components/host/HostButton.tsx","components/host/HostOnlyContainer.tsx","components/host/HostNextPhaseButton.tsx","components/host/HostOnlyButton.tsx","components/metrics/MetricHighlight.tsx","components/phases/PhaseContainer.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/lobby/StepJoin.tsx","components/phases/lobby/LobbyStep.tsx","mock/players.ts","components/phases/lobby/AvatarSelection.tsx","components/phases/lobby/Settings.tsx","components/phases/lobby/UsualAvatarsSelection.tsx","components/phases/lobby/StepInfo.tsx","hooks/useAddPlayer.ts","components/phases/lobby/StepWaiting.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/rules/AutoNextPhase.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","hooks/useGameState.ts","hooks/useFirestoreDocument.ts","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/RedirectSession.tsx","components/session/Session.tsx","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","components/timers/TimerClock.tsx","components/timers/TimerBar.tsx","components/timers/TimedTimerBar.tsx","components/timers/TimedTimerClock.tsx","components/timers/WaitingTime.tsx","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useGameActionRequest.ts","hooks/useHost.ts","hooks/useHostActionRequest.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTDBaseUrl.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","utils/phases.ts","utils/speech.ts"],"sourcesContent":["// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Icons\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, Select, App } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Utils\nimport { HOST_API_ACTIONS } from 'services/adapters';\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: HOST_API_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Types\nimport type { GameState } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useHostActionRequest } from 'hooks/useHostActionRequest';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Utils\nimport { HOST_API_ACTIONS } from 'services/adapters';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const { isAdmin } = useCurrentUserContext();\n  const [usingFirestoreEmulator] = useGlobalState('usingFirestoreEmulator');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const meta = useGameMeta();\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useHostActionRequest({\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled || !state.phase) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'default',\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.round?.forceLastRound ||\n                    isLoading ||\n                    ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.round.forceLastRound\n                      ? 'This is already set as the last round'\n                      : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button\n                target=\"_blank\"\n                href={getFirebaseUrl(Boolean(usingFirestoreEmulator), meta.gameName, meta.gameId)}\n              >\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image, App, Switch, Space, ButtonProps } from 'antd';\n// API\nimport { resetPassword, signIn, signInWithGoogle } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { UserCredential } from 'firebase/auth';\nimport { IconAvatar } from 'components/avatars';\nimport { GoogleIcon } from 'icons/GoogleIcon';\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [view, setView] = useState('google');\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Space className=\"space-container\">\n        <Switch\n          checkedChildren={<Translate pt=\"E-mail e senha\" en=\"Email and Password\" />}\n          unCheckedChildren=\"Google\"\n          onChange={(checked) => setView(checked ? 'email' : 'google')}\n        />\n      </Space>\n\n      {view === 'google' ? (\n        <SignInWithGoogle onSuccess={onSuccess} />\n      ) : (\n        <SignInWithEmail onSuccess={onSuccess} />\n      )}\n    </div>\n  );\n}\n\nexport function SignInWithGoogle({ onSuccess, ...buttonProps }: SignInProps & ButtonProps) {\n  const { isPending, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signInWithGoogle(),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Space\n      className=\"space-container\"\n      direction=\"vertical\"\n      align=\"center\"\n      classNames={{ item: 'full-width' }}\n    >\n      <>\n        {isError && (\n          <Alert\n            description={\n              <Translate pt=\"Algo deu errado, tente novamente\" en=\"Something went wrong. Please try again\" />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        )}\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={onFinish}\n          loading={isPending}\n          block\n          icon={<IconAvatar icon={<GoogleIcon />} size=\"small\" />}\n          {...buttonProps}\n        >\n          <Translate pt=\"Entrar com Google\" en=\"Sign in with Google\" />\n        </Button>\n      </>\n    </Space>\n  );\n}\n\nfunction SignInWithEmail({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n\n  const { isPending, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <>\n      <Form\n        name=\"login\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isPending}>\n            <Translate pt=\"Entrar\" en=\"Submit\" />\n          </Button>\n\n          <Button type=\"link\" onClick={() => setShowForgotPassword((v) => !v)}>\n            <Translate pt=\"Esqueci minha senha\" en=\"Forgot my password\" />\n          </Button>\n        </Form.Item>\n      </Form>\n      {showForgotPassword && (\n        <Alert\n          type=\"info\"\n          message={\n            <ResetPasswordForm\n              email={form.getFieldValue('username')}\n              onSuccess={() => setShowForgotPassword(false)}\n            />\n          }\n        />\n      )}\n    </>\n  );\n}\n\ntype ResetPasswordFormProps = {\n  email?: string;\n  onSuccess: GenericFunction;\n};\n\nfunction ResetPasswordForm({ email, onSuccess }: ResetPasswordFormProps) {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isPending, mutate, isError } = useMutation({\n    mutationFn: async () => await resetPassword(form.getFieldValue('username')),\n    onSuccess: () => {\n      onSuccess();\n      message.success(\n        translate(\n          'Verifique seu e-mail enviado para redefinir a sua senha',\n          'Verify your email to reset your password'\n        )\n      );\n    },\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Form\n      name=\"forgot-password\"\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      style={{ maxWidth: 600 }}\n      initialValues={{ username: email, remember: true }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item>\n        <Title level={4} size=\"xx-small\">\n          <Translate pt=\"Redefinir a senha\" en=\"Password Reset\" />\n        </Title>\n      </Form.Item>\n      <Form.Item\n        label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n        name=\"username\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      {isError && (\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Alert\n            description={\n              <Translate\n                pt=\"Algo deu errado, provavelmente este e-mail não existe no banco de dados da Tarde Divertida\"\n                en=\"Something went wrong. Please try again\"\n              />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        </Form.Item>\n      )}\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" loading={isPending}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { BugFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { DebugOnly } from './DebugOnly';\n\n/**\n * Button only available during dev only\n * @returns\n */\nexport function DevButton({ children, type, ...rest }: ButtonProps) {\n  return (\n    <DebugOnly devOnly>\n      <Button icon={<BugFilled />} type={type ?? 'primary'} {...rest}>\n        {children}\n      </Button>\n    </DebugOnly>\n  );\n}\n","// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <figure>\n      <Image\n        alt={title?.[language]}\n        src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        className={className}\n        preview={preview}\n      />\n    </figure>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { RocketOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Sass\nimport './HostButton.scss';\n\n/**\n * Host Button (orange with rocket icon)\n * Important: This button is NOT guarded by HostOnlyContainer, and it must be wrapped by it.\n */\nexport function HostButton({ onClick, icon, disabled, className = '', ...rest }: ButtonProps) {\n  const { isLoading } = useLoading();\n\n  return (\n    <Button\n      icon={icon ?? <RocketOutlined />}\n      ghost\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      className={clsx('host-button', className)}\n      {...rest}\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { RocketOutlined } from '@ant-design/icons';\n// Hooks\nimport { useHost } from 'hooks/useHost';\n// Sass\nimport './HostOnlyContainer.scss';\n\ninterface HostOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Custom label\n   */\n  label?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const HostOnlyContainer = ({ children, label, className = '', ...rest }: HostOnlyContainerProps) => {\n  const isHost = useHost();\n\n  if (!isHost) return <></>;\n\n  return (\n    <fieldset className={clsx('host-only-container', className)}>\n      <legend className=\"host-only-container__legend\">\n        <RocketOutlined /> {label ?? 'Host Controls'}\n      </legend>\n      <Space {...rest}>{children}</Space>\n    </fieldset>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode, useEffect } from 'react';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { PauseOutlined, PlayCircleOutlined } from '@ant-design/icons';\n// Types\nimport type { GameRound } from 'types/game';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useHost } from 'hooks/useHost';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { HOST_API_ACTIONS } from 'services/adapters';\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { HostOnlyContainer } from './HostOnlyContainer';\nimport { HostButton } from './HostButton';\nimport { WaitingTime } from 'components/timers';\nimport { useHostActionRequest } from 'hooks/useHostActionRequest';\n\nfunction ButtonLabel({ round }: { round?: GameRound }) {\n  if (!round || round.current === round.total || round.forceLastRound) {\n    return <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />;\n  }\n\n  return <Translate pt=\"Próxima rodada\" en=\"Next Round\" />;\n}\n\ntype HostNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Time to auto trigger the button in seconds (default: 45 seconds)\n   */\n  autoTriggerTime?: number;\n  /**\n   *\n   */\n  withWaitingTimeBar?: boolean;\n};\n\n/**\n * Button only available to the Host to go to the next phase.\n * It will be auto-triggered after 60 seconds unless value is overridden with a 0\n * It may be paused\n */\nexport function HostNextPhaseButton({\n  round,\n  autoTriggerTime = 30,\n  children,\n  withWaitingTimeBar,\n}: HostNextPhaseButtonProps) {\n  const isHost = useHost();\n  const { translate } = useLanguage();\n  const { loaders } = useLoading();\n  const isLoading = loaders['go-to-next-phase'];\n\n  const onGoToNextPhase = useHostActionRequest({\n    actionName: 'go-to-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: HOST_API_ACTIONS.GO_TO_NEXT_PHASE });\n\n  const hasTimer = Boolean(autoTriggerTime);\n\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    autoStart: autoTriggerTime > 0,\n    duration: autoTriggerTime,\n    onExpire: handleClick,\n    disabled: !isHost ?? !hasTimer,\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      pause();\n    }\n    return () => pause();\n  }, [isLoading]); // eslint-disable-line\n\n  return (\n    <>\n      {withWaitingTimeBar && <WaitingTime duration={autoTriggerTime} timeLeft={timeLeft} />}\n\n      <HostOnlyContainer\n        label=\"Host Action\"\n        className={clsx('host-only-container--float', getAnimationClass('slideInUp'))}\n      >\n        <Tooltip title=\"Pause\">\n          <HostButton\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n            disabled={isLoading}\n          />\n        </Tooltip>\n        <HostButton\n          disabled={isLoading}\n          onClick={handleClick}\n          icon={\n            hasTimer && (\n              <span\n                className={clsx(\n                  'host-button-timer',\n                  !isRunning &&\n                    getAnimationClass('flash', {\n                      speed: 'slow',\n                      infinite: true,\n                    })\n                )}\n              >\n                {timeLeft}\n              </span>\n            )\n          }\n        >\n          {children ?? <ButtonLabel round={round} />}\n        </HostButton>\n      </HostOnlyContainer>\n    </>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ButtonProps } from 'antd';\n// Components\nimport { HostButton, HostOnlyContainer } from './index';\n\ntype HostOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  children: ReactNode;\n} & ButtonProps;\n\nexport function HostOnlyButton({ onClick, children, ...buttonProps }: HostOnlyButtonProps) {\n  return (\n    <HostOnlyContainer>\n      <HostButton onClick={onClick} {...buttonProps}>\n        {children}\n      </HostButton>\n    </HostOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Types\nimport type { AvatarSize } from 'antd/lib/avatar/AvatarContext';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { ReactNode, useRef } from 'react';\nimport clsx from 'clsx';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  /**\n   * The game info\n   */\n  info?: GameInfo;\n  /**\n   * The current phase that must match the allowed phase\n   */\n  phase?: string;\n  /**\n   * The allowed phase\n   */\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * If the container should take the full screen\n   */\n  fullScreen?: boolean;\n  /**\n   * If the container should be white\n   */\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport clsx from 'clsx';\nimport { useKeyPressEvent } from 'react-use';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { type AnimationType, getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n// Sass\nimport './PhaseAnnouncement.scss';\n\ntype PhaseAnnouncementBasicProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The icon displayed to illustrate the phase\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\ntype PhaseAnnouncementBlock = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'block';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementOverlay = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'overlay';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementProps = PhaseAnnouncementBlock | PhaseAnnouncementOverlay;\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 3,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut', { speed: 'faster' })\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive ? getAnimationClass(animationType, { speed: 'fast' }) : getAnimationClass('bounceOut'),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type }: { type: string; index?: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        backgroundPositionX: '0',\n      }}\n    ></div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Divider, Modal } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// API & Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { UseStep } from 'hooks/useStep';\n// Services\nimport { signInAsGuest } from 'services/firebase';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { SignIn, SignInWithGoogle } from 'components/auth/SignIn';\nimport { SignUp } from 'components/auth/SignUp';\n\ntype StepJoinProps = {\n  info: GameInfo;\n  setStep: UseStep['setStep'];\n};\n\nexport function StepJoin({ info, setStep }: StepJoinProps) {\n  const { isAuthenticated } = useCurrentUserContext();\n\n  const { isPending, mutate, isError, error } = useMutation({\n    mutationKey: ['sign-in-anon'],\n    mutationFn: async () => signInAsGuest(),\n    onSuccess: () => setStep(1),\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setStep(1);\n    }\n  }, [isAuthenticated, setStep]);\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Bem-vindo!\" en=\"Welcome\" />\n      </h1>\n\n      {Boolean(info?.summary) && (\n        <p className=\"lobby-step__summary\">\n          <DualTranslate>{info.summary}</DualTranslate>\n        </p>\n      )}\n\n      <SignInWithGoogle onSuccess={() => setStep(1)} block size=\"middle\" />\n\n      {isError && <Alert message=\"Error\" description={JSON.stringify(error)} type=\"error\" showIcon />}\n\n      <Divider>\n        <Translate pt=\"ou\" en=\"or\" />\n      </Divider>\n\n      <Button type=\"primary\" block disabled={isAuthenticated} onClick={() => mutate()} loading={isPending}>\n        <Translate pt=\"Entrar como visitante\" en=\"Join as a Guest\" />\n      </Button>\n    </>\n  );\n}\n\ntype LoginButtonProps = {\n  disabled: boolean;\n  setStep: UseStep['setStep'];\n};\n\nexport function LoginButton({ disabled, setStep }: LoginButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignIn onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Fazer Login\" en=\"Login\" />\n      </Button>\n    </div>\n  );\n}\n\ntype SignUpButtonProps = {\n  disabled: boolean;\n  setStep: UseStep['setStep'];\n};\n\nexport function SignUpButton({ disabled, setStep }: SignUpButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Cadastro\" en=\"Sign Up Form\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignUp onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Cadastrar\" en=\"Sign up\" />\n      </Button>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Alert } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Components\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Translate } from 'components/language';\n\ntype LobbyStepProps = {\n  info: GameInfo;\n  children: ReactNode;\n  isLocked: boolean;\n};\n\nexport function LobbyStep({ info, children, isLocked }: LobbyStepProps) {\n  return (\n    <div className=\"lobby-step\">\n      <div className=\"lobby-step__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-step__banner\" />\n        <div className=\"lobby-step__content\">\n          {Boolean(isLocked) ? (\n            <>\n              <h1 className=\"lobby-step__title\">\n                <Translate pt=\"Esse jogo está trancado\" en=\"This session is locked\" />\n              </h1>\n\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"O jogo já foi iniciado e novos jogadores não podem ser adicionados\"\n                    en=\"The game has started and new players cannot be added at this time\"\n                  />\n                }\n              />\n            </>\n          ) : (\n            children\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Sam,Tim,Una,Vic,Will,Xavier,Yara,Zoe'.split(\n    ','\n  );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  let tries = 0;\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem) || tries < 50) {\n    randomItem = getRandomItem(source);\n    tries += 1;\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties: PlainObject | GenericFunction = {}\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length === quantity) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: GamePlayer[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name: `${name}`,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...(typeof properties === 'function' ? properties(i) : properties),\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","import { useCallback, useMemo } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n// Components\nimport { DualTranslate } from 'components/language';\n\ntype AvatarSelectionProps = {\n  players: GamePlayers;\n  selectedAvatar: string;\n  setSelectedAvatar: GenericFunction;\n  userId: PlayerId;\n};\n\nexport function AvatarSelection({\n  players,\n  setSelectedAvatar,\n  selectedAvatar,\n  userId,\n}: AvatarSelectionProps) {\n  // Calculate available avatars and monitor if user chose a non-available one\n  const availableAvatars = useMemo(() => {\n    const usedAvatars = Object.values(players).reduce((acc: BooleanDictionary, { avatarId, id }) => {\n      if (id !== userId) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (!newAvailableAvatars.includes(selectedAvatar)) {\n      setSelectedAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    return newAvailableAvatars;\n  }, [players]); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  return (\n    <>\n      <div className=\"lobby-step__avatar-selection\">\n        <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretLeftOutlined />\n        </Button>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${selectedAvatar}`}></use>\n          <title>\n            <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n          </title>\n        </svg>\n        <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretRightOutlined />\n        </Button>\n      </div>\n      <div className=\"lobby-step__description\">\n        <small>\n          <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n        </small>\n      </div>\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Button, Divider, Space, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Components\nimport { Translate } from 'components/language';\n\ntype SettingsProps = {\n  hasImages: boolean;\n};\nexport function Settings({ hasImages }: SettingsProps) {\n  const [blurEnabled, setBlurEnabled] = useGlobalLocalStorage('blurEnabled');\n  const [volume, setVolume] = useGlobalLocalStorage('volume');\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n  };\n\n  return (\n    <Space className=\"lobby-step__settings\" split={<Divider type=\"vertical\" />}>\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Alguns jogos tocam sons ou falas. Você pode mudar essa configuração durante o jogo.\"\n                en=\"A few games will play sound effects or speech. You may change this setting during the game.\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"lobby-step__settings-entry\">\n        {hasImages && (\n          <>\n            <div className=\"lobby-step__switch-label\">\n              <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n              <Tooltip\n                title={\n                  <Translate\n                    pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia. Você pode mudar essa configuração durante o jogo\"\n                    en=\"Adds a button to every Image Card to blur them in case you have any phobia. You may change this setting during the game\"\n                  />\n                }\n              >\n                <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n              </Tooltip>\n            </div>\n\n            <Switch\n              checkedChildren=\"on\"\n              unCheckedChildren=\"off\"\n              checked={blurEnabled}\n              onClick={onBlurSwitchClick}\n            />\n          </>\n        )}\n      </div>\n    </Space>\n  );\n}\n","// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\n\ntype UsualAvatarsSelectionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarsIds: string[];\n};\n\nexport function UsualAvatarsSelection({ avatarsIds, setSelectedAvatar }: UsualAvatarsSelectionProps) {\n  return (\n    <div className=\"lobby-usual-avatar-selection\">\n      <div className=\"lobby-usual-avatar-selection__title\">\n        <small>\n          <Translate pt=\"Seus avatars mais usados\" en=\"Your favorite avatars\" />\n        </small>\n      </div>\n      <ul className=\"lobby-usual-avatar-selection__list\">\n        {avatarsIds.map((avatarId) => (\n          <UsualAvatarOption key={avatarId} setSelectedAvatar={setSelectedAvatar} avatarId={avatarId} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\ntype UsualAvatarOptionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarId: string;\n};\n\nexport function UsualAvatarOption({ avatarId, setSelectedAvatar }: UsualAvatarOptionProps) {\n  return (\n    <TransparentButton onClick={() => setSelectedAvatar(avatarId)}>\n      <svg viewBox=\"0 0 100 100\" className=\"lobby-usual-avatar-selection__avatar\">\n        <use href={avatars + `#avatar-${avatarId}`}></use>\n        <title>\n          <DualTranslate>{AVATARS[avatarId].description}</DualTranslate>\n        </title>\n      </svg>\n    </TransparentButton>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, AutoComplete, Button } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayers } from 'types/player';\n// API & Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useAddPlayer } from 'hooks/useAddPlayer';\n\nimport { UseStep } from 'hooks/useStep';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarSelection } from './AvatarSelection';\nimport { Settings } from './Settings';\nimport { UsualAvatarsSelection } from './UsualAvatarsSelection';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLocalStorage } from 'react-use';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype StepInfoProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  setStep: UseStep['setStep'];\n};\n\nexport function StepInfo({ info, players, setStep }: StepInfoProps) {\n  const { currentUser, isGuest } = useCurrentUserContext();\n  const { translate } = useLanguage();\n  const [selectedAvatar, setSelectedAvatar] = useState(\n    currentUser?.avatars?.[0] ?? getRandomItem(AVAILABLE_AVATAR_IDS)\n  );\n\n  const [name, setName] = useState((currentUser?.names ?? []).at(-1) ?? '');\n  const [lsAvatarId] = useLocalStorage('username', '');\n  const [lsUsername] = useLocalStorage('avatarId', '');\n\n  // Load username and avatar from localStorage if any\n  useEffect(() => {\n    if (isGuest) {\n      if (lsAvatarId) {\n        setSelectedAvatar(lsAvatarId);\n      }\n\n      if (lsUsername) {\n        setName(lsUsername ?? '');\n      }\n    }\n  }, [isGuest]); // eslint-disable-line\n\n  const { isPending, mutate } = useAddPlayer(name, selectedAvatar, isGuest, () => setStep(2));\n\n  const hasPlayedBefore = Boolean(currentUser.games?.[info.gameName]);\n\n  const nameOptions = (currentUser?.names ?? []).map((name) => ({ value: name }));\n\n  return (\n    <>\n      <h2 className=\"lobby-step__title\">\n        <Translate pt=\"Adicione seus dados\" en=\"Add your info\" />\n      </h2>\n\n      {hasPlayedBefore && (\n        <Alert\n          type=\"info\"\n          message={<Translate pt=\"Você jogou esse jogo anteriormente\" en=\"You played this game before\" />}\n          className=\"margin\"\n        />\n      )}\n\n      <AvatarSelection\n        players={players}\n        setSelectedAvatar={setSelectedAvatar}\n        selectedAvatar={selectedAvatar}\n        userId={currentUser.id}\n      />\n\n      {currentUser && currentUser.avatars.length > 0 && (\n        <UsualAvatarsSelection avatarsIds={currentUser.avatars} setSelectedAvatar={setSelectedAvatar} />\n      )}\n\n      <AutoComplete\n        className=\"lobby-step__name-input\"\n        options={nameOptions}\n        onChange={(value) => setName(value.trim())}\n        onSelect={(value) => setName(value.trim())}\n        placeholder={translate('Digite seu nome', 'Type your name')}\n        maxLength={10}\n        value={name || randomName}\n      />\n\n      <Settings hasImages={info.tags.includes('images')} />\n\n      <Button\n        block\n        loading={isPending}\n        disabled={!name || !selectedAvatar}\n        type=\"primary\"\n        onClick={() => mutate()}\n      >\n        <Translate pt=\"Entrar\" en=\"Enter\" />\n      </Button>\n    </>\n  );\n}\n","import { App } from 'antd';\nimport { useMutation } from '@tanstack/react-query';\n// Services\nimport { GAME_API, GAME_API_COMMON_ACTIONS } from 'services/adapters';\n// Hooks\nimport { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\nimport { useLanguage } from './useLanguage';\nimport { getKey, useGlobalLocalStorage } from './useGlobalLocalStorage';\n// Utils\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n\nexport function useAddPlayer(name: string, avatarId: string, isGuest: boolean, onSuccess: GenericFunction) {\n  const { gameId, gameName } = useGameMeta();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume] = useGlobalLocalStorage('volume');\n  const { language, translate } = useLanguage();\n  const { notification } = App.useApp();\n\n  const query = useMutation({\n    mutationKey: ['add-player'],\n    mutationFn: async () =>\n      await GAME_API.run({\n        action: GAME_API_COMMON_ACTIONS.JOIN_GAME,\n        gameId,\n        gameName,\n        playerName: name,\n        playerAvatarId: avatarId,\n        isGuest,\n      }),\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n      setUserId(data.id);\n      setUsername(data.name);\n      setUserAvatarId(data.avatarId);\n\n      localStorage.setItem(getKey('username'), data.name);\n      localStorage.setItem(getKey('avatarId'), data.avatarId);\n      localStorage.setItem(getKey('gameId'), gameId);\n\n      if (volume) {\n        speak(getRandomWelcomeMessage(name ?? translate('vei', 'babe')), language, volume);\n      }\n\n      onSuccess();\n    },\n    onError: (e: Error) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n  });\n\n  return query;\n}\n","import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { App, Space, Typography } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// API & Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Services\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Components\nimport { Translate } from 'components/language';\nimport { HostButton, HostOnlyContainer } from 'components/host';\n\ntype StepWaitingProps = {\n  players: GamePlayers;\n};\n\nexport function StepWaiting({ players }: StepWaitingProps) {\n  const { message, notification } = App.useApp();\n  const { gameId, gameName } = useGameMeta();\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n\n  const gameMeta = useGameMeta();\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const { mutate, isPending: isLocking } = useMutation({\n    mutationKey: ['lock-game'],\n    mutationFn: async () => {\n      setLoader('lock-game', true);\n      return await HOST_API.run({\n        action: HOST_API_ACTIONS.LOCK_GAME,\n        gameId,\n        gameName,\n      });\n    },\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n\n      if (data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n    onSettled: () => {\n      setLoader('lock-game', false);\n    },\n  });\n\n  useEffect(() => {\n    setLoader('lock-game', isLocking);\n\n    return () => {\n      setLoader('lock-game', false);\n    };\n  }, [isLocking]); // eslint-disable-line\n\n  const numPlayers = Object.keys(players).length;\n\n  return (\n    <>\n      <h1 className={clsx('lobby-step__title', getAnimationClass('tada'))}>\n        {username || translate('Fulano', 'Unknown')}\n      </h1>\n\n      <Space className=\"space-container\">\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n      </Space>\n\n      <h3 className=\"lobby-heading\">\n        <Translate pt=\"Aguarde os outros jogadores entrarem.\" en=\"Please, wait while other players join...\" />\n      </h3>\n      <HostOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n        <Typography.Text className=\"center padding\">\n          <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n        </Typography.Text>\n        <HostButton\n          onClick={() => mutate()}\n          disabled={isLoading || numPlayers < gameMeta.min}\n          loading={isLoading}\n          block\n        >\n          <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n        </HostButton>\n      </HostOnlyContainer>\n    </>\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useLocalStorage } from 'react-use';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GameMeta } from 'types/game';\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useEffect } from 'react';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n\nimport { resetGlobalState, useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { StepJoin } from './lobby/StepJoin';\nimport { LobbyStep } from './lobby/LobbyStep';\nimport { StepInfo } from './lobby/StepInfo';\nimport { StepWaiting } from './lobby/StepWaiting';\n// Sass\nimport './PhaseLobby.scss';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\ntype SplitPlayers = {\n  left: GamePlayer[];\n  right: GamePlayer[];\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const { step, setStep } = useStep();\n  const { currentUser, isAuthenticated } = useCurrentUserContext();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [localUsername] = useLocalStorage('username', '');\n  const [localAvatarId] = useLocalStorage('avatarId', '');\n\n  const player = players?.[currentUser.id];\n\n  useEffect(() => {\n    if (player) {\n      setStep(2);\n      setUserId(player.id);\n      setUsername(player.name);\n      setUserAvatarId(player.avatarId);\n    } else if (isAuthenticated) {\n      setStep(1);\n      resetGlobalState();\n    } else {\n      setStep(0);\n      setUsername(localUsername ?? '');\n      setUserAvatarId(localAvatarId ?? '');\n    }\n  }, [\n    player,\n    currentUser.id,\n    setStep,\n    setUserId,\n    setUsername,\n    setUserAvatarId,\n    isAuthenticated,\n    localUsername,\n    localAvatarId,\n  ]);\n\n  const { left, right } = orderBy(Object.values(players), 'updatedAt').reduce(\n    (acc: SplitPlayers, player, index) => {\n      if (index % 2 === 0) {\n        acc.left.push(player);\n      } else {\n        acc.right.push(player);\n      }\n\n      return acc;\n    },\n    {\n      left: [],\n      right: [],\n    }\n  );\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby\">\n        <div className=\"lobby__seating-area-left\">\n          {left.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                left: `${60 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"lobby__seating-area-right\">\n          {right.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                right: `${80 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <LobbyStep info={info} isLocked={meta.isLocked}>\n          {step === 0 && <StepJoin info={info} setStep={setStep} />}\n          {step === 1 && <StepInfo info={info} players={players} setStep={setStep} />}\n          {step === 2 && <StepWaiting players={players} />}\n        </LobbyStep>\n      </div>\n\n      <AdminMenuDrawer\n        state={{ phase: 'LOBBY', round: { current: 0, total: 0, forceLastRound: false }, players: {} }}\n        players={players}\n      />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GameState } from 'types/game';\n// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { Translate } from 'components/language';\nimport { HostNextPhaseButton } from 'components/host';\n\ntype AutoNextPhaseProps = {\n  players: GamePlayers;\n};\n\n/**\n * Add this component to a game if you want the game to automatically go to the next phase when all players are ready.\n */\nexport function AutoNextPhase({ players }: AutoNextPhaseProps) {\n  const isEverybodyReady = Object.values(players).every((player) => player.ready);\n\n  if (!isEverybodyReady) return <></>;\n\n  return (\n    <HostNextPhaseButton round={{ current: -1, total: 10, forceLastRound: false }} autoTriggerTime={15}>\n      <Translate pt=\"Começar o jogo\" en=\"Start the game\" />\n    </HostNextPhaseButton>\n  );\n}\n","import { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n// Ant Design Resources\nimport { Button, Layout, Space } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { GAME_API_COMMON_ACTIONS } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useGameActionRequest } from 'hooks/useGameActionRequest';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGameId } from 'hooks/useGameId';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { RulesCarousel } from '../rules';\nimport { AutoNextPhase } from './rules/AutoNextPhase';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalLocalStorage('volume');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  useEffect(() => {\n    setIsAdminEnabled(true);\n  }, []); // eslint-disable-line\n\n  const gameId = useGameId();\n  // TODO: check if this is working\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: ['meta', gameId] });\n  }, [gameId]); // eslint-disable-line\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY }), [], 2);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n\n      <AutoNextPhase players={players} />\n    </Layout.Content>\n  );\n}\n","// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GameState } from 'types/game';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedGearIcon } from 'icons/AnimatedGearIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up...\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\nimport { UseStep } from 'hooks/useStep';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: UseStep['goToNextStep'];\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { Fragment, ReactNode, useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\nimport { reorder } from './reorder';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n  /**\n   *\n   */\n  additionalInfoParser?: (player: GamePlayer) => ReactNode;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n  additionalInfoParser,\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n                {!!additionalInfoParser && additionalInfoParser(player)}\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { WaitingRoomIcon } from 'icons/WaitingRoomIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n// Sass\nimport './WaitingRoom.scss';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <div className=\"waiting-room__content\">\n        <Instruction>\n          {Boolean(instruction) ? (\n            instruction\n          ) : (\n            <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n          )}\n        </Instruction>\n        {children}\n      </div>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Hooks\nimport { useFirestoreDocument } from './useFirestoreDocument';\n// Utils\nimport { print } from 'utils/helpers';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const { notification } = App.useApp();\n  const docPath = `games/${gameName}/${gameId}/state`;\n\n  const { isLoading, isRefetching, isError, error, data } = useFirestoreDocument(docPath, true);\n\n  if (isError) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  const state = data ?? {};\n\n  useEffect(() => {\n    if (isLoading || isRefetching) {\n      console.count('Refreshing state...');\n    } else {\n      print({ state });\n    }\n  }, [isLoading, isRefetching]); // eslint-disable-line\n\n  return state as GameState;\n}\n","import { useEffect } from 'react';\nimport { UseQueryResult, useQuery } from '@tanstack/react-query';\nimport { doc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\n/**\n * React hook that retrieves a Firestore document and provides the result as a query object.\n * @param docPath - The path to the Firestore document.\n * @param [subscribe=false] - Whether to subscribe to real-time updates on the document.\n * @returns A React Query object containing the document data.\n */\nexport function useFirestoreDocument(docPath: string, subscribe = false): UseQueryResult {\n  const docRef = doc(firestore, docPath);\n  const query = useQuery({\n    queryKey: ['firestore', 'doc', docPath],\n    queryFn: async () => {\n      const snapshot = await getDoc(docRef);\n      return snapshot.data();\n    },\n  });\n\n  useEffect(() => {\n    if (subscribe) {\n      const unsubscribe = onSnapshot(docRef, () => {\n        query.refetch();\n      });\n\n      return () => unsubscribe();\n    }\n  }, [subscribe]); // eslint-disable-line\n\n  return query;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n// Ant Design Resource\nimport { Alert, App, Button, Checkbox, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { message } = App.useApp();\n  const { blurCard } = useBlurCards();\n  const baseUrl = useTDBaseUrl('resources');\n\n  const { isLoading, isError, data } = useQuery({\n    queryKey: ['credo'],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/images-credo.json`);\n      return await response.json();\n    },\n  });\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const { isAdmin } = useCurrentUserContext();\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [blurEnabled, setBlurEnabled] = useGlobalLocalStorage('blurEnabled');\n  const [volume, setVolume] = useGlobalLocalStorage('volume');\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge, Tooltip } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n};\n\nexport function PlayersStatusBar({ players }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <div className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Tooltip title={player.name} placement=\"left\" trigger=\"hover\">\n                <Badge dot color={player.ready ? 'green' : 'gray'}>\n                  <Avatar\n                    id={player.avatarId}\n                    alt={player.name}\n                    size=\"small\"\n                    className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                  />\n                </Badge>\n              </Tooltip>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useToggle } from 'react-use';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Avatar as AntAvatar, Badge, Button, Divider, Drawer, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GameState } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from 'components/players/PlayersStatusBar';\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Avatar } from 'components/avatars';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const { isAdmin, isAuthenticated, isGuest } = useCurrentUserContext();\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer-container\">\n        <button className=\"game-info-drawer-button\" onClick={toggleDrawer}>\n          <span className=\"game-info-drawer-button__game-title\">\n            {info.title?.[language] ?? '?'}\n            <DebugOnly devOnly>({players?.[userId]?.name})</DebugOnly>\n          </span>\n          <AntAvatar icon={<SettingOutlined />} size=\"small\" />\n          <div className=\"game-info-drawer-button__player-status-bar\">\n            <PlayersStatusBar players={players} />\n          </div>\n        </button>\n\n        <Drawer\n          title={\n            <GameBanner\n              title={info?.title}\n              gameName={info.gameName}\n              preview={false}\n              className=\"round-corners\"\n            />\n          }\n          placement=\"right\"\n          closable={false}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          {isAuthenticated && !isGuest && (\n            <p>\n              <Badge size=\"default\" dot color=\"green\">\n                <Avatar id={players?.[userId]?.avatarId} shape=\"square\" size=\"small\" />\n              </Badge>{' '}\n              <Translate pt=\"Você está logado!\" en=\"You are logged in!\" />\n            </p>\n          )}\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Image, Modal } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport GAME_LIST from 'utils/info';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n\ntype RedirectSessionProps = {\n  state: GameState;\n};\n\nexport function RedirectSession({ state }: RedirectSessionProps) {\n  const { language } = useLanguage();\n  const navigate = useNavigate();\n\n  const [open, setOpen] = useState<boolean | null>(null);\n\n  const hideModal = () => {\n    setOpen(false);\n  };\n\n  const redirect = state.redirect;\n\n  if (redirect) {\n    const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n    const currentMilliseconds = Date.now();\n\n    if (redirect.redirectAt - currentMilliseconds > twoHoursInMilliseconds) {\n      return <></>;\n    }\n\n    const gameInfo = GAME_LIST[redirect.gameName];\n    return (\n      <>\n        <Modal\n          title={\n            <Translate\n              pt=\"Você está convidado para uma nova partida\"\n              en=\"You've been invited to a new session\"\n            />\n          }\n          open={open ?? true}\n          onCancel={hideModal}\n          onOk={() => {\n            navigate(`/${redirect.gameId}`);\n          }}\n          okText={<Translate pt=\"Quero participar!\" en=\"Take me there!\" />}\n          cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        >\n          <Image\n            alt={gameInfo.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            className=\"round-corners\"\n          />\n          <Title>{redirect.gameId}</Title>\n        </Modal>\n      </>\n    );\n  }\n\n  return <></>;\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\nimport { useGameMeta } from 'hooks/useGameMeta';\n// Utils\nimport GAME_LIST from 'utils/info';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { RedirectSession } from './RedirectSession';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n\ntype SessionProps = {\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameCollection, getActiveComponent }: SessionProps) {\n  const gameMeta = useGameMeta();\n  const { language } = useLanguage();\n  const state = useGameState(gameMeta.gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [, setLanguage] = useGlobalLocalStorage('language');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n  const players = state.players ?? {};\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  // Update session language to match the game\n  useEffect(() => {\n    if (language !== gameMeta.language) {\n      setLanguage(gameMeta.language);\n    }\n  }, [gameMeta.language]); // eslint-disable-line\n\n  if (!userId || !players[userId]) {\n    return (\n      <>\n        <RedirectSession state={state} />\n        <PhaseLobby players={players} info={info} meta={gameMeta} />;\n      </>\n    );\n  }\n\n  const ActiveComponent: any = getActiveComponent(state);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <RedirectSession state={state} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { App } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const { notification } = App.useApp();\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate, notification]);\n}\n","import clsx from 'clsx';\nimport { ReactNode, forwardRef } from 'react';\n\nexport type StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport const Step = forwardRef<HTMLDivElement, StepProps>(\n  ({ children, announcement, fullWidth = false, fullHeight = false, className = '' }: StepProps, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'step',\n          fullWidth && 'step--full-width',\n          fullHeight && 'step--full-height',\n          className\n        )}\n      >\n        {announcement}\n        {children}\n      </div>\n    );\n  }\n);\n","import { ReactNode } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { print } from 'utils/helpers';\n// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[] | JSX.Element;\n  /**\n   * The current step\n   */\n  step: number;\n  /*\n   * The conditions to render each step, otherwise the waiting room is rendered\n   */\n  conditions?: boolean[];\n  /**\n   * The players dictionary\n   */\n  players?: GamePlayers;\n  /**\n   * Waiting room customizations\n   */\n  waitingRoom?: {\n    /**\n     * The type of waiting room (for players or server)\n     */\n    type?: 'SERVER' | 'PLAYERS';\n    /**\n     * The instruction to replace the default one\n     */\n    instruction?: ReactNode;\n    /**\n     * Additional content to be rendered\n     */\n    content?: ReactNode;\n  };\n};\n\nexport function StepSwitcher({ children, step, conditions, players, waitingRoom = {} }: StepSwitcherProps) {\n  if (!players) print('SetSwitcher is being used without `players`, please add it.', 'warn');\n\n  const content = Array.isArray(children) ? children : [children];\n\n  if (players && step >= content.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoom.instruction ?? getWaitingRoomInstruction(waitingRoom.type ?? 'PLAYERS')}\n      >\n        {waitingRoom.content}\n      </WaitingRoom>\n    );\n  }\n\n  if (!content[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return content[step];\n  }\n\n  return <div></div>;\n}\n","import { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { ReactNode } from 'react';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n  /**\n   * Minutes\n   */\n  minutes?: number;\n  /**\n   * Seconds\n   */\n  seconds: number;\n} & Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  minutes = 0,\n  seconds,\n}: TimerClockProps) {\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { Progress, ProgressProps } from 'antd';\n\ninterface TimerBarProps extends ProgressProps {\n  steps?: number;\n  value: number;\n  total: number;\n}\n\n/**\n * Time Bar presentational component used in timed operations\n * @param props\n * @returns\n */\nexport function TimerBar({\n  steps,\n  strokeLinecap,\n  total,\n  type = 'line',\n  value,\n  status = 'active',\n  ...props\n}: TimerBarProps) {\n  const percentage = 100 - (value * 100) / total;\n  return (\n    <Progress\n      percent={percentage}\n      steps={steps}\n      showInfo={false}\n      style={{ marginBottom: '1rem' }}\n      size={steps && steps > 30 ? 'small' : undefined}\n      type={type}\n      {...props}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Components\nimport { TimerBar } from './TimerBar';\n\ntype TimedTimerBarProps = {\n  /**\n   * Duration in seconds\n   */\n  duration: number;\n  /**\n   * Function executed when the time is up\n   */\n  onExpire: GenericFunction;\n  /**\n   * Number of ticks in the bar\n   */\n  steps?: number;\n  /**\n   * Type of bar. Default: line\n   */\n  type?: 'circle' | 'line' | 'dashboard';\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nexport function TimedTimerBar({ duration, onExpire, type, steps = 10, className }: TimedTimerBarProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n  });\n\n  return (\n    <div className={clsx('timer-number', className)}>\n      {timeLeft} <TimerBar steps={steps} value={timeLeft} total={duration} type={type} /> {timeLeft}\n    </div>\n  );\n}\n","import { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\nimport { useCountdown, useCountdownSettings } from 'hooks/useCountdown';\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { ReactNode } from 'react';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimedTimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n} & useCountdownSettings &\n  Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimedTimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  ...timerProps\n}: TimedTimerClockProps) {\n  const { minutes, seconds } = useCountdown({ ...timerProps });\n\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { useCountdown } from 'hooks/useCountdown';\n\ntype TimeForActionProps = {\n  duration: number;\n  onExpire?: () => void;\n  timeLeft?: number;\n};\n\nexport function WaitingTime({ duration, timeLeft, onExpire }: TimeForActionProps) {\n  const { timeLeft: privateTimeLeft } = useCountdown({\n    duration,\n    autoStart: timeLeft === undefined,\n    onExpire,\n  });\n\n  const percentage = ((timeLeft ?? privateTimeLeft) / duration) * 100;\n\n  return (\n    <div className=\"timer-waiting-time-bar\">\n      <span className=\"timer-waiting-time-bar__container\">\n        <span className=\"timer-waiting-time-bar__left\" style={{ width: `${percentage}%` }} />\n      </span>\n    </div>\n  );\n}\n","import { useGlobalLocalStorage } from './useGlobalLocalStorage';\n\ntype UseBlurCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlurCards {\n  const [blurredCards, setBlurredCards] = useGlobalLocalStorage('blurredCards');\n  const [blurEnabled] = useGlobalLocalStorage('blurEnabled');\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards({\n      ...blurredCards,\n      [cardId]: !blurredCards?.[cardId] ?? true,\n    });\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { App } from 'antd';\nimport { useMutation } from '@tanstack/react-query';\n// Hooks\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\nimport { GAME_API, GAME_API_COMMON_ACTIONS } from 'services/adapters';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport type UseGameActionRequestArgs = {\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\ninterface Payload {\n  action: keyof typeof GAME_API_COMMON_ACTIONS | string;\n  [key: string]: any;\n}\n\n/**\n * Custom hook for making a game action request.\n *\n * @param options - The options for the game action request.\n * @param options.actionName - The name of the action.\n * @param [options.onBeforeCall] - The callback function to be called before making the API call.\n * @param [options.onAfterCall] - The callback function to be called after making the API call.\n * @param [options.onError] - The callback function to be called when an error occurs during the API call.\n * @param [options.onSuccess] - The callback function to be called when the API call is successful.\n * @param [options.successMessage] - The success message to be displayed.\n * @param [options.errorMessage] - The error message to be displayed.\n * @returns The debounced function for making the game action request.\n */\nexport function useGameActionRequest({\n  actionName,\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: UseGameActionRequestArgs): (...args: any[]) => any {\n  const { message, notification } = App.useApp();\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: Payload) =>\n      GAME_API.run({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","import { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Determine is user is the Host by checking if they were the one who created the game.\n * @returns Returns true if the user is the Host, false otherwise\n */\nexport function useHost(): boolean {\n  const { createdBy } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  return createdBy === userId;\n}\n","import { App } from 'antd';\nimport { useMutation } from '@tanstack/react-query';\n// Hooks\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport type UseHostActionRequestArgs = {\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\ninterface Payload {\n  action: keyof typeof HOST_API_ACTIONS;\n  [key: string]: any;\n}\n\n/**\n * Custom hook for making a host action request.\n *\n * @param options - The options for the host action request.\n * @param options.actionName - The name of the action.\n * @param [options.onBeforeCall] - The callback function to be called before making the API call.\n * @param [options.onAfterCall] - The callback function to be called after making the API call.\n * @param [options.onError] - The callback function to be called when an error occurs during the API call.\n * @param [options.onSuccess] - The callback function to be called when the API call is successful.\n * @param [options.successMessage] - The success message to be displayed.\n * @param [options.errorMessage] - The error message to be displayed.\n * @returns The debounced function for making the host action request.\n */\nexport function useHostActionRequest({\n  actionName,\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: UseHostActionRequestArgs): (...args: any[]) => any {\n  const { message, notification } = App.useApp();\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: Payload) =>\n      HOST_API.run({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","import { useState } from 'react';\n// Hooks\nimport { useCountdown } from './useCountdown';\nimport { useGlobalState } from './useGlobalState';\nimport { useHost } from './useHost';\n// Utils\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { USE_MOCKS } from 'dev-configs';\n\n/**\n * Runs mock function tht performs whatever after 3-6 seconds\n * @param whatToDo\n * @param requirements\n * @param delay (default a random value between 3-6 seconds)\n * @returns\n */\nexport function useMock(whatToDo: GenericFunction, requirements: any[] = [], delay?: number) {\n  const isHost = useHost();\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n  const duration = delay ?? getRandomItem([3, 4, 4, 5, 6]);\n\n  return useCountdown({\n    duration,\n    onExpire: () => {\n      if (\n        !runOnce &&\n        isDevEnv &&\n        USE_MOCKS &&\n        !isHost &&\n        userId !== VIEWER_ID &&\n        requirements.every(Boolean)\n      ) {\n        whatToDo();\n        setRunOnce(true);\n      }\n    },\n    disabled: runOnce,\n  });\n}\n","import { useState } from 'react';\n\nexport type UseStep = {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: () => void;\n  goToPreviousStep: () => void;\n};\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): UseStep {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","/**\n * Returns the URL for the given kind of resource\n * @param kind the kind of resource\n * @returns the URL for the given kind of resource\n */\nexport function useTDBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic'): string {\n  const baseUrl = process.env.REACT_APP_TD_BASE_URL;\n\n  switch (library) {\n    case 'images':\n      return `${baseUrl}/${process.env.REACT_APP_TD_IMAGES}`;\n    case 'sprites':\n      return `${baseUrl}/${process.env.REACT_APP_TD_SPRITES}`;\n    case 'resources':\n      return `${baseUrl}/${process.env.REACT_APP_TD_RESOURCES}`;\n    case 'classic':\n      return `${baseUrl}/${process.env.REACT_APP_TD_CLASSIC}`;\n    default:\n      throw new Error('Invalid library');\n  }\n}\n","import { useEffect } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\nimport type { GameState } from 'types/game';\n// Hooks\nimport { useGlobalState } from './useGlobalState';\n// Utils\nimport { PLACEHOLDER_PLAYER, VIEWER_ID } from 'utils/constants';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: GamePlayers, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        ...PLACEHOLDER_PLAYER,\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n    WAIT: 'WAIT',\n  },\n  ADEDANHX: {\n    ANSWERING: 'ANSWERING',\n    EVALUATION: 'EVALUATION',\n    RESULTS: 'RESULTS',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  COMUNICACAO_ALIENIGENA: {\n    ALIEN_SELECTION: 'ALIEN_SELECTION',\n    ALIEN_SEEDING: 'ALIEN_SEEDING',\n    HUMAN_ASK: 'HUMAN_ASK',\n    ALIEN_ANSWER: 'ALIEN_ANSWER',\n    ALIEN_REQUEST: 'ALIEN_REQUEST',\n    OFFERINGS: 'OFFERINGS',\n    REVEAL: 'REVEAL',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    WORDS_SELECTION: 'WORDS_SELECTION',\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  DUETOS: {\n    PAIRING: 'PAIRING',\n    RESULTS: 'RESULTS',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    ORDERING: 'ORDERING',\n    RESULTS: 'RESULTS',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LABIRINTO_SECRETO: {\n    MAP_BUILDING: 'MAP_BUILDING',\n    PATH_FOLLOWING: 'PATH_FOLLOWING',\n    RESULTS: 'RESULTS',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TRACK: 'TRACK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  MESMICE: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    OBJECT_FEATURE_ELIMINATION: 'OBJECT_FEATURE_ELIMINATION',\n    RESULT: 'RESULT',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAO_SOU_ROBO: {\n    CARD_SELECTION: 'CARD_SELECTION',\n    ARE_YOU_A_ROBOT: 'ARE_YOU_A_ROBOT',\n    RESULTS: 'RESULTS',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    CHARACTER_FILTERING: 'CHARACTER_FILTERING',\n    CHARACTER_DESCRIPTION: 'CHARACTER_DESCRIPTION',\n    GUESSING: 'GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SINAIS_DE_ALERTA: {\n    DRAWING: 'DRAWING',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TA_NA_CARA: {\n    PROMPT: 'PROMPT',\n    ANSWERING: 'ANSWERING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TEORIA_DE_CONJUNTOS: {\n    JUDGE_SELECTION: 'JUDGE_SELECTION',\n    ITEM_PLACEMENT: 'ITEM_PLACEMENT',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TESTE_DE_ELENCO: {\n    MOVIE_GENRE_SELECTION: 'MOVIE_GENRE_SELECTION',\n    ACTOR_SELECTION: 'ACTOR_SELECTION',\n    RESULT: 'RESULT',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n    VERIFY_GUESS: 'VERIFY_GUESS',\n    RESULT: 'RESULT',\n  },\n  VAMOS_AO_CINEMA: {\n    MOVIE_SELECTION: 'MOVIE_SELECTION',\n    MOVIE_ELIMINATION: 'MOVIE_ELIMINATION',\n    REVEAL: 'REVEAL',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  VINGATIVOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n"],"names":["AdminPerformActionButton","label","props","icon","type","danger","className","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","message","App","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","HOST_API_ACTIONS","resetFields","error","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","isAdmin","useCurrentUserContext","useGlobalState","usingFirestoreEmulator","isAdminEnabled","visible","setVisible","meta","useGameMeta","onClose","useHostActionRequest","actionName","successMessage","errorMessage","onAfterCall","phase","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","round","forceLastRound","target","href","getFirebaseUrl","Boolean","gameName","gameId","SignIn","onSuccess","view","setView","src","logo","preview","checked","SignInWithGoogle","SignInWithEmail","useMutation","mutationFn","signInWithGoogle","isPending","mutate","isError","direction","align","classNames","item","description","showIcon","size","loading","block","translate","useLanguage","showForgotPassword","setShowForgotPassword","signIn","getFieldValue","labelCol","span","wrapperCol","maxWidth","remember","autoComplete","help","offset","v","ResetPasswordForm","email","resetPassword","success","username","level","DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","DevButton","rest","BugFilled","GameBanner","language","alt","PUBLIC_URL","fallback","HostButton","RocketOutlined","ghost","clsx","HostOnlyContainer","useHost","ButtonLabel","current","total","HostNextPhaseButton","autoTriggerTime","withWaitingTimeBar","isHost","loaders","onGoToNextPhase","handleClick","hasTimer","useCountdown","autoStart","duration","onExpire","timeLeft","isRunning","pause","resume","useEffect","getAnimationClass","PauseOutlined","PlayCircleOutlined","speed","infinite","HostOnlyButton","MetricHighlight","iconSize","iconPlacement","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","baseClass","id","ref","PhaseAnnouncement","buttonText","currentRound","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","autoFocus","custom","SingleCloud","backgroundImage","backgroundPositionX","cloudData","MultiCloud","index","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","StepJoin","setStep","isAuthenticated","mutationKey","signInAsGuest","summary","LobbyStep","isLocked","DEV_NAMES","cacheNames","getRandomUniqueItemFromList","source","used","cache","randomItem","tries","getRandomItem","mockPlayerName","AvatarSelection","setSelectedAvatar","selectedAvatar","userId","availableAvatars","useMemo","usedAvatars","avatarId","newAvailableAvatars","AVAILABLE_AVATAR_IDS","onPreviousAvatar","useCallback","indexOf","newIndex","length","onNextAvatar","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","Settings","hasImages","useGlobalLocalStorage","blurEnabled","setBlurEnabled","volume","setVolume","shape","InfoCircleOutlined","UsualAvatarsSelection","avatarsIds","UsualAvatarOption","randomName","StepInfo","currentUser","isGuest","names","at","setName","useLocalStorage","lsAvatarId","lsUsername","setUserId","setUsername","setUserAvatarId","notification","query","GAME_API","GAME_API_COMMON_ACTIONS","playerAvatarId","response","data","localStorage","setItem","getKey","speak","getRandomWelcomeMessage","onError","console","useAddPlayer","hasPlayedBefore","games","nameOptions","trim","onSelect","placeholder","maxLength","tags","StepWaiting","setLoader","gameMeta","userAvatarId","HOST_API","onSettled","isLocking","numPlayers","min","PhaseLobby","useStep","step","localUsername","localAvatarId","resetGlobalState","orderBy","left","right","PHASES","transform","top","animate","appearance","clouds","PhasePlaceholder","AutoNextPhase","every","PhaseRules","user","useUser","setIsAdminEnabled","useGameId","queryClient","useQueryClient","invalidateQueries","queryKey","onBeReady","useGameActionRequest","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","useEffectOnce","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","additionalInfoParser","orderList","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","width","startWith","starterIndex","slice","useGameState","docPath","subscribe","docRef","doc","firestore","useQuery","queryFn","getDoc","snapshot","unsubscribe","onSnapshot","refetch","useFirestoreDocument","isRefetching","count","print","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","score","BlurOptions","blurCard","useBlurCards","baseUrl","useTDBaseUrl","fetch","json","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","selectedGroups","forEach","flat","SectionSettings","toggleDevFeatures","s","PlayersStatusBar","sortPlayers","trigger","dot","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","gameInfo","FireOutlined","RedirectSession","setOpen","redirect","currentMilliseconds","Date","now","redirectAt","GAME_LIST","onCancel","onOk","okText","cancelText","Session","gameCollection","getActiveComponent","setLanguage","setInfo","isIdle","useIdle","warning","useIdleRedirect","useTitle","ActiveComponent","Step","forwardRef","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","conditions","waitingRoom","content","Array","isArray","TimerClock","minutes","seconds","AnimatedClockIcon","TimerBar","steps","strokeLinecap","status","percentage","percent","showInfo","marginBottom","TimedTimerBar","TimedTimerClock","timerProps","WaitingTime","privateTimeLeft","blurredCards","setBlurredCards","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","onBeforeCall","onMutate","func","timer","timeout","args","clearTimeout","apply","debounce","createdBy","whatToDo","requirements","delay","runOnce","setRunOnce","USE_MOCKS","VIEWER_ID","startingStep","goToPreviousStep","library","process","Error","ignore","setShowPlayersBar","setUser","setIsReady","PLACEHOLDER_PLAYER","updatedAt","online","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","WAIT","ADEDANHX","ANSWERING","EVALUATION","RESULTS","ARTE_RUIM","DRAW","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CINEGRAFISTAS_AMADORES","UNKNOWN","COMUNICACAO_ALIENIGENA","ALIEN_SELECTION","ALIEN_SEEDING","HUMAN_ASK","ALIEN_ANSWER","ALIEN_REQUEST","OFFERINGS","REVEAL","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","WORDS_SELECTION","CLUE_WRITING","GUESSING","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","DUETOS","PAIRING","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","ORDERING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","LABIRINTO_SECRETO","MAP_BUILDING","PATH_FOLLOWING","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TRACK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","MESMICE","OBJECT_FEATURE_ELIMINATION","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAO_SOU_ROBO","CARD_SELECTION","ARE_YOU_A_ROBOT","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","CHARACTER_FILTERING","CHARACTER_DESCRIPTION","RETRATO_FALADO","COMPOSITE_SKETCH","SINAIS_DE_ALERTA","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","TA_NA_CARA","PROMPT","TEORIA_DE_CONJUNTOS","JUDGE_SELECTION","ITEM_PLACEMENT","TESTEMUNHA_OCULAR","WITNESS_SELECTION","QUESTIONING","TRIAL","TESTE_DE_ELENCO","MOVIE_GENRE_SELECTION","ACTOR_SELECTION","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VERIFY_GUESS","VAMOS_AO_CINEMA","MOVIE_SELECTION","MOVIE_ELIMINATION","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","VINGATIVOS","TEMPLATE","text","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis"],"sourceRoot":""}