{"version":3,"file":"static/js/galeria-de-sonhos.7f8ded0e.chunk.js","mappings":"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","sources":["components/cards/Card.tsx","components/general/Achievements.tsx","components/image-cards/ImageBlurButton.tsx","components/image-cards/ImageBlurButtonContainer.tsx","components/image-cards/ImageCard.tsx","components/image-cards/ImageCardBack.tsx","components/image-cards/ImageCardButton.tsx","components/image-cards/ImageCardHand.tsx","components/image-cards/ImageCardPreloadHand.tsx","components/image-cards/ImageCardSelectButton.tsx","components/metrics/CardHighlight.tsx","components/metrics/PlayersHighlight.tsx","icons/RulesIcon.tsx","components/pop-up/messageContent.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/galeria-de-sonhos/utils/api-requests.ts","components/metrics/BotHighlight.tsx","components/metrics/PlayerHighlight.tsx","games/galeria-de-sonhos/components/RulesBlobs.tsx","games/galeria-de-sonhos/StepWordSelection.tsx","games/galeria-de-sonhos/PhaseWordSelection.tsx","games/galeria-de-sonhos/utils/mock.ts","games/galeria-de-sonhos/components/SelectTable.tsx","games/galeria-de-sonhos/utils/constants.ts","games/galeria-de-sonhos/StepDreamsSelection.tsx","games/galeria-de-sonhos/components/SelectedDreams.tsx","games/galeria-de-sonhos/PhaseDreamsSelections.tsx","games/galeria-de-sonhos/components/PlayTable.tsx","games/galeria-de-sonhos/components/PlayersDreamsCount.tsx","games/galeria-de-sonhos/StepPlayDream.tsx","games/galeria-de-sonhos/components/ListPlayers.tsx","games/galeria-de-sonhos/components/MatchCount.tsx","games/galeria-de-sonhos/StepAnnounceDream.tsx","games/galeria-de-sonhos/PhaseCardPlay.tsx","games/galeria-de-sonhos/PhaseResolution.tsx","games/galeria-de-sonhos/components/BestMatches.tsx","games/galeria-de-sonhos/components/GameOverTable.tsx","games/galeria-de-sonhos/PhaseGameOver.tsx","games/galeria-de-sonhos/SessionGaleriaDeSonhos.tsx","games/galeria-de-sonhos/utils/achievements.ts","hooks/useBooleanDictionary.ts","hooks/useWhichPlayerIsThe.ts","icons/DreamIcon.tsx","icons/ImageCardsIcon.tsx","icons/PlayersIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/CloseCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/DownCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/DownCircleOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/RobotOutlined.js","../node_modules/@ant-design/icons/es/icons/RobotOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  hideHeader?: boolean;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n  hideHeader = false,\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      {!hideHeader && (\n        <span\n          className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n          style={color.startsWith('#') ? { backgroundColor: color } : {}}\n        >\n          {header}\n        </span>\n      )}\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n};\n\nexport function ImageBlurButton({ cardId, ghost = true }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost={ghost} onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Focus\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer.scss';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The position of the button (default: bottom)\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  position = 'bottom',\n  ghost = true,\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {position === 'top' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n      {children}\n      {position === 'bottom' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Sass\nimport './ImageCard.scss';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  imageId: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  cardWidth?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: Boolean;\n  /**\n   * Replacement image when the preview is open\n   */\n  previewImageId?: string;\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  imageId,\n  cardWidth = 200,\n  className = '',\n  preview = true,\n  previewImageId = '',\n  fileExtension = 'jpg',\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl('tdi');\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(imageId);\n\n  const booleanPreviewConfig =\n    preview && !isBlurred\n      ? {\n          maskClassName: `${baseClass}__preview-mask`,\n        }\n      : false;\n\n  return (\n    <div className={clsx(baseClass, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${baseUrl}/${imageURL}.${fileExtension}`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          Boolean(previewImageId)\n            ? {\n                src: `${baseUrl}/${previewImageId.replace(/-/g, '/')}.${fileExtension}`,\n              }\n            : booleanPreviewConfig\n        }\n      />\n    </div>\n  );\n};\n","import { ImageCard, ImageCardProps } from './ImageCard';\n\ntype ImageCardBackProps = Omit<ImageCardProps, 'imageId'> & { imageId?: ImageCardId };\n\nexport const ImageCardBack = ({ imageId = 'back-default', ...rest }: ImageCardBackProps) => {\n  return <ImageCard imageId={imageId} {...rest} />;\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { DownCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\n//  Components\nimport { Translate } from 'components/language';\nimport { DebugOnly } from 'components/debug';\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './ImageCardButton.scss';\n\ntype ImageCardButtonProps = {\n  /**\n   * The id of the image\n   */\n  imageId: string;\n  /**\n   * The content, usually a ImageCard component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name for the container\n   */\n  className?: string;\n  /**\n   * The position of the button (default: top)\n   */\n  buttonPosition?: 'top' | 'bottom';\n  /**\n   * The button is over the image (default: false)\n   */\n  over?: boolean;\n  /**\n   * Button icon replacement\n   */\n  icon?: ReactNode;\n  /**\n   * The function to be called when the button is clicked\n   */\n  onClick?: (...args: any) => void;\n  /**\n   * Disables the button (default: false)\n   */\n  disabled?: boolean;\n  /**\n   * The text for the button\n   */\n  buttonText?: ReactNode;\n  /**\n   * The props for the button\n   */\n  buttonProps?: Omit<ButtonProps, 'onClick' | 'disabled'>;\n};\n\nexport function ImageCardButton({\n  imageId,\n  children,\n  className = '',\n  buttonPosition = 'top',\n  over = false,\n  icon,\n  onClick,\n  disabled = false,\n  buttonText,\n  buttonProps = {},\n}: ImageCardButtonProps) {\n  const isTop = buttonPosition === 'top';\n\n  const iconComponent = icon ?? (isTop ? <DownCircleOutlined /> : <UpCircleOutlined />);\n\n  const { className: buttonClassName, ...restButtonProps } = buttonProps;\n\n  const button = onClick ? (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={over}\n      className={clsx(\n        'image-card-button__button',\n        over && 'image-card-button__button--over',\n        over && `image-card-button__button--over-${buttonPosition}`,\n        buttonClassName\n      )}\n      onClick={() => onClick(imageId)}\n      disabled={disabled}\n      {...restButtonProps}\n    >\n      {iconComponent}\n      {buttonText ?? <Translate pt=\"Selecionar\" en=\"Select\" />}\n      {iconComponent}\n    </Button>\n  ) : (\n    <></>\n  );\n\n  return (\n    <div className={clsx('image-card-button', className)}>\n      <ImageBlurButtonContainer cardId={imageId} position={buttonPosition === 'bottom' ? 'top' : 'bottom'}>\n        <DebugOnly>{imageId}</DebugOnly>\n        <div className=\"image-card-button__container\">\n          {isTop && button}\n          {children}\n          {!isTop && button}\n        </div>\n      </ImageBlurButtonContainer>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard, ImageCardButton } from '.';\n// Sass\nimport './ImageCardHand.scss';\n\ntype ImageCardHandProps = {\n  /**\n   * The list of card ids\n   */\n  hand: ImageCardId[];\n  /**\n   * Function to trigger when clicking on the select button\n   */\n  onSelectCard?: GenericFunction;\n  /**\n   * Select button custom label\n   */\n  selectButtonText?: ReactNode;\n  /**\n   * Select button custom icon\n   */\n  selectButtonIcon?: ReactNode;\n  /**\n   * Select button custom class\n   */\n  selectButtonClass?: string;\n  /**\n   * Disable select button\n   */\n  disabledSelectButton?: boolean;\n  /**\n   * Optional custom class name for the hand container\n   */\n  className?: string;\n  /**\n   * The size of the card\n   */\n  cardSize?: number;\n  /**\n   * If no card size is provided, the ratio is used instead to determine card size (default 8)\n   */\n  sizeRatio?: number;\n  /**\n   * Minimum width of a card (default 80)\n   */\n  minCardSize?: number;\n  /**\n   * Cache showing which cards have been selected and should be highlighted\n   */\n  selectedCards?: BooleanDictionary;\n  /**\n   * Custom card class\n   */\n  cardClassName?: string;\n  /**\n   * Enable preview (default: true)\n   */\n  preview?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonText,\n  selectButtonIcon,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n  selectedCards = {},\n  cardClassName = '',\n  preview = true,\n}: ImageCardHandProps) {\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(Math.max(sizeRatio, 6), { minWidth: minCardSize });\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div\n              key={`hand-${cardId}`}\n              className={clsx('image-card-hand__card-container', getAnimationClass('slideInRight'))}\n            >\n              <ImageCardButton\n                onClick={onSelectCard}\n                imageId={cardId}\n                buttonProps={{ className: selectButtonClass }}\n                icon={selectButtonIcon}\n                buttonText={selectButtonText}\n                disabled={disabledSelectButton}\n              >\n                <ImageCard\n                  imageId={cardId}\n                  cardWidth={cardSize || cardWidth}\n                  className={clsx(selectedCards[cardId] && 'image-card-hand__selected', cardClassName)}\n                  preview={preview}\n                />\n              </ImageCardButton>\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","// Components\nimport { ImageCard } from './ImageCard';\n// Sass\nimport './ImageCardPreloadHand.scss';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import { ImageCardsIcon } from 'icons/ImageCardsIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function CardHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ImageCardsIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { PlayersIcon } from 'icons/PlayersIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PlayersHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<PlayersIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","export function RulesIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ccad76\"\n        d=\"M489.5 100.5c8.284 0 15 6.716 15 15v301c0 22.091-17.909 40-40 40H276c-11.046 0-20-8.954-20-20v-336z\"\n      ></path>\n      <path\n        fill=\"#b5884d\"\n        d=\"M504.5 115.5v301c0 22.09-17.91 40-40 40h-30c22.09 0 40-17.91 40-40v-301c0-8.28-6.72-15-15-15h30c8.28 0 15 6.72 15 15z\"\n      ></path>\n      <path\n        fill=\"#ccad76\"\n        d=\"M22.5 100.5c-8.284 0-15 6.716-15 15v301c0 22.091 17.909 40 40 40H236c11.046 0 20-8.954 20-20v-336z\"\n      ></path>\n      <path\n        fill=\"#f2f2f2\"\n        d=\"M241 426.572H52.5c-8.284 0-15-6.716-15-15V85.5c0-8.284 6.716-15 15-15H241c8.284 0 15 6.716 15 15v326.072c0 8.284-6.716 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#fff\"\n        d=\"M459.5 426.57l-188.5.002c-8.284 0-15-6.716-15-15V85.5c0-8.284 6.716-15 15-15l188.5-.002c8.284 0 15 6.716 15 15V411.57c0 8.284-6.716 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#e8e8e8\"\n        d=\"M429.5 426.568h30c8.28 0 15-6.71 15-15V85.498c0-8.28-6.72-15-15-15h-30c8.28 0 15 6.72 15 15v326.07c0 8.29-6.72 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#f7aa74\"\n        d=\"M129.212 142.267l-15.925-13.898a5 5 0 00-6.575 0l-15.925 13.898c-3.234 2.823-8.288.526-8.288-3.767v-78a5 5 0 015-5h45a5 5 0 015 5v78c.001 4.293-5.052 6.59-8.287 3.767z\"\n      ></path>\n      <path\n        fill=\"#f49595\"\n        d=\"M395.638 208.929l11.314-11.314c5.858-5.858 5.858-15.355 0-21.213-5.858-5.858-15.355-5.858-21.213 0l-11.314 11.314c-3.905 3.905-10.237 3.905-14.142 0l-12.021-12.021c-5.858-5.858-15.355-5.858-21.213 0-5.858 5.858-5.858 15.355 0 21.213l12.021 12.021c3.905 3.905 3.905 10.237 0 14.142l-12.021 12.021c-5.858 5.858-5.858 15.355 0 21.213 5.858 5.858 15.355 5.858 21.213 0l12.021-12.021c3.905-3.905 10.237-3.905 14.142 0l11.314 11.314c5.858 5.858 15.355 5.858 21.213 0 5.858-5.858 5.858-15.355 0-21.213l-11.314-11.314c-3.905-3.905-3.905-10.237 0-14.142z\"\n      ></path>\n      <path\n        fill=\"#90d399\"\n        d=\"M112.352 205.04l16.263 16.263a5 5 0 007.071 0l45.962-45.962c5.858-5.858 15.355-5.858 21.213 0 5.858 5.858 5.858 15.355 0 21.213l-60.104 60.104c-5.858 5.858-15.355 5.858-21.213 0l-30.406-30.406c-5.858-5.858-5.858-15.355 0-21.213 5.858-5.857 15.356-5.857 21.214.001z\"\n      ></path>\n      <path d=\"M504.5 369a7.5 7.5 0 007.5-7.5v-246c0-12.407-10.093-22.5-22.5-22.5H482v-7.5c0-12.407-10.093-22.5-22.5-22.5H271c-5.758 0-11.016 2.177-15 5.747-3.984-3.57-9.242-5.747-15-5.747h-68.5a7.5 7.5 0 000 15H241c4.136 0 7.5 3.365 7.5 7.5V105H245a7.5 7.5 0 000 15h3.5v39H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v17.572c0 4.135-3.364 7.5-7.5 7.5H52.5c-4.136 0-7.5-3.365-7.5-7.5V85.5c0-4.135 3.364-7.5 7.5-7.5H75v60.5c0 4.965 2.808 9.325 7.328 11.38a12.578 12.578 0 005.213 1.143c2.944 0 5.834-1.059 8.178-3.104L110 135.455l14.281 12.463c3.741 3.265 8.872 4.016 13.392 1.962 4.52-2.055 7.328-6.415 7.328-11.38v-78c0-6.893-5.607-12.5-12.5-12.5h-45C80.607 48 75 53.607 75 60.5V63H52.5C40.093 63 30 73.093 30 85.5V93h-7.5C10.093 93 0 103.093 0 115.5v301C0 442.691 21.309 464 47.5 464H236c7.875 0 14.982-3.332 20-8.655 5.018 5.322 12.125 8.655 20 8.655h188.5c26.191 0 47.5-21.309 47.5-47.5v-20a7.5 7.5 0 00-15 0v20c0 17.92-14.58 32.5-32.5 32.5H276c-6.893 0-12.5-5.607-12.5-12.5v-3.718a22.38 22.38 0 007.5 1.29h188.5c12.407 0 22.5-10.093 22.5-22.5V108h7.5c4.136 0 7.5 3.364 7.5 7.5v246a7.5 7.5 0 007.5 7.5zM90 63h40v70l-11.781-10.282c-2.343-2.044-5.281-3.067-8.219-3.067s-5.876 1.022-8.219 3.067L90 133zm146 386H47.5C29.58 449 15 434.42 15 416.5v-301c0-4.136 3.364-7.5 7.5-7.5H30v303.572c0 12.407 10.093 22.5 22.5 22.5H241c2.629 0 5.153-.458 7.5-1.29v3.718c0 6.893-5.607 12.5-12.5 12.5zm231-37.428c0 4.135-3.364 7.5-7.5 7.5H271c-4.136 0-7.5-3.365-7.5-7.5V394h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-39h4.5a7.5 7.5 0 000-15h-4.5V85.5c0-4.135 3.364-7.5 7.5-7.5h188.5c4.136 0 7.5 3.365 7.5 7.5z\"></path>\n      <path d=\"M321.745 229.789c-8.773 8.773-8.773 23.047 0 31.82 4.386 4.386 10.148 6.58 15.91 6.58s11.524-2.193 15.91-6.58l12.021-12.021c.637-.637 1.381-.732 1.768-.732s1.131.095 1.768.732l11.313 11.314c4.25 4.25 9.9 6.59 15.91 6.59s11.661-2.34 15.91-6.59c4.25-4.25 6.59-9.9 6.59-15.91s-2.34-11.66-6.59-15.91l-11.314-11.313c-.637-.637-.732-1.381-.732-1.768s.095-1.131.732-1.768l11.314-11.313c4.25-4.25 6.59-9.9 6.59-15.91s-2.34-11.661-6.59-15.91c-4.25-4.25-9.9-6.59-15.91-6.59s-11.66 2.34-15.91 6.59l-11.313 11.314c-.637.637-1.381.732-1.768.732s-1.131-.095-1.768-.732l-12.021-12.021c-8.772-8.773-23.047-8.772-31.82 0-8.773 8.773-8.773 23.047 0 31.82l12.021 12.021c.637.637.732 1.381.732 1.768s-.095 1.131-.732 1.768zm22.628-26.164l-12.021-12.021c-2.924-2.924-2.924-7.683 0-10.607a7.478 7.478 0 015.304-2.193c1.92 0 3.841.731 5.303 2.193l12.021 12.021c6.823 6.823 17.926 6.823 24.749 0l11.313-11.314c2.926-2.924 7.683-2.923 10.607 0 2.924 2.924 2.924 7.683 0 10.607l-11.314 11.313c-6.823 6.823-6.823 17.926 0 24.749l11.314 11.313c2.924 2.924 2.924 7.683 0 10.607s-7.683 2.924-10.607 0l-11.313-11.314c-6.823-6.823-17.926-6.823-24.749 0L342.959 251c-2.925 2.925-7.682 2.924-10.607 0-2.924-2.924-2.924-7.683 0-10.607l12.021-12.021c6.823-6.821 6.823-17.923 0-24.747zm-136.208-33.587c-8.772-8.772-23.047-8.772-31.819 0l-44.194 44.194-14.496-14.496c-4.25-4.25-9.9-6.59-15.91-6.59s-11.66 2.34-15.91 6.59c-8.773 8.772-8.773 23.047 0 31.819l30.405 30.406c4.386 4.387 10.148 6.58 15.91 6.58s11.524-2.193 15.91-6.58l60.104-60.104c8.772-8.772 8.772-23.046 0-31.819zm-10.607 21.213l-60.104 60.104a7.45 7.45 0 01-5.304 2.197 7.448 7.448 0 01-5.303-2.197L96.442 220.95c-1.417-1.417-2.197-3.3-2.197-5.303s.78-3.887 2.197-5.303 3.3-2.197 5.303-2.197 3.887.78 5.303 2.197l16.264 16.263c2.361 2.361 5.5 3.661 8.839 3.661s6.478-1.3 8.839-3.661l45.962-45.962c2.924-2.924 7.683-2.924 10.606 0a7.45 7.45 0 012.197 5.304c0 2.002-.78 3.886-2.197 5.302zM204.5 301.5a7.5 7.5 0 00-7.5-7.5H97a7.5 7.5 0 000 15h100a7.5 7.5 0 007.5-7.5zM117 324a7.5 7.5 0 000 15h60a7.5 7.5 0 000-15zm300-30H317a7.5 7.5 0 000 15h100a7.5 7.5 0 000-15zm-20 30h-60a7.5 7.5 0 000 15h60a7.5 7.5 0 000-15z\"></path>\n    </svg>\n  );\n}\n","import { ReactNode } from 'react';\n// Icons\nimport { VideoGameControllerIcon } from 'icons/VideoGameControllerIcon';\n// Components\nimport { RulesIcon } from 'icons/RulesIcon';\nimport { Translate } from 'components/language';\n\n/**\n * Pops up a modal with a confirmation button but also closing timeout\n * @param title\n * @param description\n * @param id\n * @param duration\n * @param type\n * @returns\n */\nexport const messageContent = (\n  title: ReactNode,\n  description: ReactNode,\n  id: string,\n  duration = 30,\n  type: 'control' | 'rules' = 'control'\n) => {\n  const key = `${id} - ${title}`;\n\n  return {\n    content: (\n      <div>\n        <h3>{title}</h3>\n        <div>{description}</div>\n        <p>\n          <small>\n            <Translate\n              pt=\"Popup fecha automaticamente ou clique para fechar\"\n              en=\"Auto-close or click to close\"\n            />\n          </small>\n        </p>\n      </div>\n    ),\n    top: window.innerWidth / 2 - 100,\n    duration,\n    key,\n    icon:\n      type === 'control' ? (\n        <VideoGameControllerIcon style={{ width: '64px' }} />\n      ) : (\n        <RulesIcon style={{ width: '64px' }} />\n      ),\n  };\n};\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'galeriaDeSonhosSubmitAction');\n\nexport function useOnSubmitWordAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-word',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Palavra enviada com sucesso', 'Word submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua palavra',\n      'Oops, the application failed to send your word'\n    ),\n  });\n\n  return (payload: SubmitWordPayload) => {\n    request({\n      action: 'SUBMIT_WORD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitCardsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-cards',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Cartas enviadas com sucesso', 'Cards submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas cartas',\n      'Oops, the application failed to send your cards'\n    ),\n  });\n\n  return (payload: SubmitCardsPayload) => {\n    request({\n      action: 'SUBMIT_CARDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'play-card',\n    // onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to send your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n","import { RobotIcon } from 'icons/RobotIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function BotHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<RobotIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { PlayerIcon } from 'icons/PlayerIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PlayerHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<PlayerIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { BotHighlight } from 'components/metrics/BotHighlight';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\nimport { PlayerHighlight } from 'components/metrics/PlayerHighlight';\nimport { PlayersHighlight } from 'components/metrics/PlayersHighlight';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { Instruction } from 'components/text';\n\ntype WordSelectionRulesProps = {\n  scout: GamePlayer;\n};\n\nexport function WordSelectionRules({ scout }: WordSelectionRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Cada rodada tem seu tema... uma palavra.\n            <br />\n            Para essa rodada, <AvatarName player={scout} addressUser size=\"small\" /> escolherá o tema.\n          </>\n        }\n        en={\n          <>\n            Every round has a theme... a word.\n            <br />\n            For this round,\n            <AvatarName player={scout} addressUser size=\"small\" /> will choose the theme.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GeneralRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Somos caçadores de sonhos!\n            <br />\n            Dentro do tema escolhido, podemos visitar os sonhos de até 10 das 15 pessoas (cartas-imagens)\n            disponíveis.\n            <br />\n            O objetivo é encontrar uns aos outros em cada sonho, então escolha apenas sonhos que você acredita\n            que outros jogadores também irão escolher.\n            <br />\n            Parece fácil, mas se você escolher um sonho que ninguém mais escolheu... vixi...\n          </>\n        }\n        en={\n          <>\n            We are dream scouts!\n            <br />\n            Given the chosen theme, we can visit dreams of 10 of the 15 people (image cards) available.\n            <br />\n            The goal of the game is to match the same visited dreams of other players, therefore choose dreams\n            that you think other players will also choose.\n            <br />\n            It seems easy, but if you choose a dream that nobody else has chosen... well...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionRules({ contained = false, hardModeEnabled = false }) {\n  const minimumDreams = hardModeEnabled ? 4 : 1;\n  return (\n    <Instruction contained={contained}>\n      <Translate\n        pt={\n          <>\n            Selecione sonhos (cartas) que você acha que se relacionam com a palavra-tema da rodada.\n            <br />\n            Você deve selecionar pelo menos <CardHighlight>{minimumDreams}</CardHighlight> e no máximo{' '}\n            <CardHighlight>10</CardHighlight>.\n          </>\n        }\n        en={\n          <>\n            Now select cards that you think match the round's card.\n            <br />\n            You must select at least <CardHighlight>{minimumDreams}</CardHighlight> card and a maximum of{' '}\n            <CardHighlight>10</CardHighlight>.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionExtendedRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Na próxima fase, de um a um, cada jogador vai escolher um de seus sonhos visitados.\n            <br />\n            Se pelo menos um jogador visitou o mesmo sonho, eles ganham pontos. Se ninguém escolheu, o jogador\n            está fora da rodada!\n            <br />\n            Dai passa-se a vez para o próximo jogador!\n            <br />\n            Sonhos só podem ser escolhidos uma vez por rodada...\n          </>\n        }\n        en={\n          <>\n            On the next phase, one by one, each player will select one of their visited dreams.\n            <br />\n            If at least one other player visited the same dream, they get points! If nobody visited the same\n            dream, you are out of the round!\n            <br />\n            Each dream can be chosen once per round only...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function CardPlayRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            De um em um, cada jogador vai escolher um de seus sonhos visitados se você ainda tem algum\n            disponível.\n            <br />\n            Selecione o sonho que você mais acha que tem chance de outro jogador ter também visitado.\n            <br />\n            Você ganha <PointsHighlight type=\"positive\">3</PointsHighlight> pontos se apenas mais{' '}\n            <PlayerHighlight>1</PlayerHighlight> jogador visitou o mesmo sonho.\n            <br />\n            Você ganha <PointsHighlight type=\"positive\">2</PointsHighlight> pontos se mais de{' '}\n            <PlayersHighlight>1+</PlayersHighlight> jogador visitou o mesmo sonho.\n            <br />\n            Você está eliminado da rodada se ninguém mais visitou o sonho escolhido.\n          </>\n        }\n        en={\n          <>\n            One by one, each player chooses one of their visited dreams, if you have any still available.\n            <br />\n            Select the dream you think you have the most chances of matching another player.\n            <br />\n            You get <PointsHighlight type=\"positive\">3</PointsHighlight> points if only{' '}\n            <PlayerHighlight>1</PlayerHighlight> player visited the same dream.\n            <br />\n            You get <PointsHighlight type=\"positive\">2</PointsHighlight> points if many{' '}\n            <PlayersHighlight>1+</PlayersHighlight> players have visited the same dream.\n            <br />\n            You are eliminated for this round if nobody else has visited the chosen dream.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function BotsRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Em um jogo com bots, <BotHighlight>3</BotHighlight> jogadores-robôs são adicionados ao jogo.\n            <br />\n            Antes da fase do Bingo dos Sonhos, os três bots entram em ação e selecionam cartas segundo se\n            seguinte lógica:\n            <br />\n            O bot A seleciona todas as cartas que foram mais selecionadas pelos jogadores.\n            <br />\n            O bot B seleciona cartas que foram selecionadas por apenas um jogador, mas apenas uma por jogador,\n            e somente se mais de um jogador tiver essa carta extra.\n            <br />O bot C simplesmente seleciona 4 cartas aleatórias.\n          </>\n        }\n        en={\n          <>\n            In a game with bos, the <BotHighlight>3</BotHighlight> bots are added to the game.\n            <br />\n            Before the Dream Bingo phase, the three bots select cards based on a pre-determined logic:\n            <br />\n            Bot A select all most visited cards.\n            <br />\n            Bot B select all cards that got a single player visiting them but only one per player and only if\n            more than one player will have a match this way.\n            <br />\n            Bot C simply selects 4 random cards.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\n\ntype StepWordSelectionProps = {\n  onSubmitWord: GenericFunction;\n  words: GWord[];\n};\n\nexport function StepWordSelection({ onSubmitWord, words }: StepWordSelectionProps) {\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione o tema da rodada\" en=\"Select the theme for the round\" />\n      </Title>\n\n      <Space className=\"space-container\" align=\"center\">\n        {words.map((word, index) => {\n          return (\n            <TransparentButton key={word.id} onClick={() => onSubmitWord({ wordId: word.id })}>\n              <Card header={LETTERS[index]} color=\"purple\">\n                {word.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { useOnSubmitWordAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { SleepIcon } from 'icons/SleepIcon';\n// Components\nimport { GeneralRules, WordSelectionRules } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ViewOr } from 'components/views';\nimport { WaitingRoom } from 'components/players';\nimport { AvatarName } from 'components/avatars';\nimport { StepWordSelection } from './StepWordSelection';\n\nfunction PhaseWordSelection({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep();\n\n  const [scout, isUserTheScout] = useWhichPlayerIsThe('scoutId', state, players);\n\n  const onSubmitWord = useOnSubmitWordAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.WORD_SELECTION}>\n      <StepSwitcher step={step} players={players} waitingRoom={{ type: 'SERVER' }}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          circleColor={info?.appearance?.color}\n        >\n          <Instruction contained>\n            <Translate\n              pt=\"Somos caçadores de sonhos tentando encontrar uns aos outros...\"\n              en=\"We're dream scouts trying to find each other...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<SleepIcon />}\n          title={<Translate pt=\"Tema dos Sonhos\" en=\"The Dream Theme\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <WordSelectionRules scout={scout} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr condition={isUserTheScout}>\n          <StepWordSelection onSubmitWord={onSubmitWord} words={state.words} />\n\n          <WaitingRoom\n            players={players}\n            title={<Translate pt=\"Aguarde...\" en=\"Please wait...\" />}\n            instruction={\n              <Translate\n                pt={\n                  <>\n                    <AvatarName player={scout} /> está escolhendo o tema.\n                  </>\n                }\n                en={\n                  <>\n                    <AvatarName player={scout} /> is choosing the theme.\n                  </>\n                }\n              />\n            }\n          >\n            <GeneralRules />\n          </WaitingRoom>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { shuffle } from 'utils/helpers';\n\nexport const mockDreamSelection = (cards: GImageCard[], hardMode: boolean): string[] => {\n  const selectionOrder = [2, 11, 6, 8, 9, 3, 13];\n  const countSource = hardMode ? [4, 4, 4, 4, 5, 6] : [1, 2, 3, 3, 3, 4, 4, 5, 6];\n  const numberOfCards = shuffle(countSource)[0];\n  const selections = selectionOrder.slice(0, numberOfCards);\n  return selections.map((cardIndex) => cards[cardIndex].id);\n};\n","import clsx from 'clsx';\n// Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { BORDER_TOTAL_SIZE } from '../utils/constants';\n// Components\nimport { ImageCard, ImageCardButton } from 'components/image-cards';\nimport { Translate } from 'components/language';\nimport { CloseCircleOutlined } from '@ant-design/icons';\n\ntype SelectTableProps = {\n  table: GImageCard[];\n  onSelectCard: GenericFunction;\n  selectedCards: BooleanDictionary;\n};\n\nexport function SelectTable({ table, onSelectCard, selectedCards }: SelectTableProps) {\n  const cardWidth = useCardWidth(5, { gap: 8, minWidth: 140, maxWidth: 150 });\n  return (\n    <div className=\"g-table-container\">\n      <Image.PreviewGroup>\n        <ul className=\"g-table\">\n          {table.map((card) => {\n            const isSelected = selectedCards[card.id];\n\n            return (\n              <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n                <ImageCardButton\n                  imageId={card.id}\n                  onClick={() => onSelectCard(card.id)}\n                  over\n                  buttonPosition=\"bottom\"\n                  icon={isSelected ? <CloseCircleOutlined /> : undefined}\n                  buttonText={\n                    isSelected ? (\n                      <Translate pt=\"Desmarcar\" en=\"Deselect\" />\n                    ) : (\n                      <Translate pt=\"Selecionar\" en=\"Select\" />\n                    )\n                  }\n                >\n                  <ImageCard\n                    imageId={card.id}\n                    cardWidth={cardWidth - BORDER_TOTAL_SIZE} // 6 is the border total size\n                    className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n                  />\n                </ImageCardButton>\n              </li>\n            );\n          })}\n        </ul>\n      </Image.PreviewGroup>\n    </div>\n  );\n}\n","export const GO_TO_PLAYER_WITH_NIGHTMARE_STEP = 1;\nexport const GO_TO_SEE_CARD_STEP = 3;\nexport const GO_TO_CARD_PLAY_STEP = 5;\n\nexport const BORDER_TOTAL_SIZE = 6;\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockDreamSelection } from './utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { TextHighlight, Title } from 'components/text';\nimport { BotsRules, DreamSelectionExtendedRules, DreamSelectionRules } from './components/RulesBlobs';\nimport { SelectTable } from './components/SelectTable';\nimport { RobotOutlined } from '@ant-design/icons';\nimport { FixedMenuButton } from 'components/buttons';\n\nconst validateSelectedCards = (v: BooleanDictionary) => {\n  return Object.keys(v).length < 10;\n};\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onSubmitCards: GenericFunction;\n  botEnabled: boolean;\n  hardModeEnabled: boolean;\n} & AnnouncementProps;\n\nexport function StepDreamsSelection({\n  table,\n  word,\n  onSubmitCards,\n  botEnabled,\n  announcement,\n  hardModeEnabled,\n}: StepDreamsSelectionProps) {\n  const {\n    dict: selectedCards,\n    updateDict: onSelectCard,\n    length: selectedCount,\n  } = useBooleanDictionary({}, validateSelectedCards);\n\n  useMock(() => {\n    onSubmitCards({ cardsIds: mockDreamSelection(table, hardModeEnabled) });\n  }, []);\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <Translate pt=\"Visite sonhos relacionados à \" en=\"Visit dreams related to \" />\n        <TextHighlight>{word.text}</TextHighlight>\n      </Title>\n      <DreamSelectionRules contained hardModeEnabled={hardModeEnabled} />\n\n      <PopoverRule content={<DreamSelectionExtendedRules />} />\n\n      {botEnabled && (\n        <FixedMenuButton\n          type=\"popover\"\n          position={1}\n          icon={<RobotOutlined />}\n          content={<BotsRules />}\n          label={<Translate pt=\" Bots\" en=\" Bots\" />}\n        />\n      )}\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={selectedCount < (hardModeEnabled ? 4 : 1) || selectedCount > 10}\n          onClick={() => onSubmitCards({ cardsIds: Object.keys(selectedCards) })}\n        >\n          <Translate pt={`Visitar ${selectedCount} sonhos`} en={`Visit ${selectedCount} dreams`} />\n        </Button>\n      </Space>\n      <SelectTable table={table} onSelectCard={onSelectCard} selectedCards={selectedCards} />\n    </Step>\n  );\n}\n","// Components\nimport { ImageCardHand } from 'components/image-cards';\n\ntype SelectedDreamsProps = {\n  user: GamePlayer;\n};\n\nexport function SelectedDreams({ user }: SelectedDreamsProps) {\n  if (!user.cards) {\n    return <></>;\n  }\n\n  const cards = Object.values<PlainObject>(user.cards ?? {}).map((card) => card.cardId);\n\n  return <ImageCardHand hand={cards} sizeRatio={16} />;\n}\n","// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitCardsAPIRequest } from './utils/api-requests';\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { DreamIcon } from 'icons/DreamIcon';\n// Components\nimport { ImageCardPreloadHand } from 'components/image-cards';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { DreamSelectionRules } from './components/RulesBlobs';\nimport { StepDreamsSelection } from './StepDreamsSelection';\nimport { Translate } from 'components/language';\nimport { SelectedDreams } from './components/SelectedDreams';\n\nfunction PhaseDreamsSelections({ players, state, info, meta }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitCards = useOnSubmitCardsAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<DreamIcon />}\n      title={<Translate pt=\"Visite sonhos!\" en=\"Visit dreams!\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <DreamSelectionRules hardModeEnabled={Boolean(meta.options?.hardMode)} />\n      <ImageCardPreloadHand hand={state.table.map((entry: GImageCard) => entry.id)} />\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION}>\n      <StepSwitcher step={step} players={players} waitingRoom={{ content: <SelectedDreams user={user} /> }}>\n        {/* Step 0 */}\n        <StepDreamsSelection\n          table={state.table}\n          word={state.word}\n          onSubmitCards={onSubmitCards}\n          botEnabled={Boolean(meta.options?.withBots)}\n          hardModeEnabled={Boolean(meta.options?.hardMode)}\n          announcement={announcement}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamsSelections;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { BORDER_TOTAL_SIZE } from '../utils/constants';\n// Icons\nimport { StarIcon } from 'icons/StarIcon';\n// Components\nimport { ImageBlurButton, ImageCard, ImageCardBack } from 'components/image-cards';\nimport { Translate } from 'components/language';\n\ntype PlayTableProps = {\n  table: GImageCard[];\n  onPlayCard: GenericFunction;\n  userCards: PlainObject;\n  isPlayAvailable: boolean;\n};\n\nexport function PlayTable({ table, onPlayCard, userCards, isPlayAvailable }: PlayTableProps) {\n  const cardWidth = useCardWidth(5, { gap: 8, minWidth: 140, maxWidth: 150 });\n  const { isLoading } = useLoading();\n\n  return (\n    <Image.PreviewGroup>\n      <div className=\"g-table-container\">\n        <ul className=\"g-table\">\n          {table.map((card) => {\n            const isSelected = Boolean((userCards ?? {})[card.id]);\n            const userCardEntry = userCards[card.id] ?? {};\n            if (card.used) {\n              return (\n                <li\n                  key={`g-table-${card.id}`}\n                  className=\"g-table-item\"\n                  style={{ width: `${cardWidth + 8}px` }}\n                >\n                  <div className=\"center\">\n                    <ImageBlurButton cardId={card.id} />\n                  </div>\n                  <ImageCardBack\n                    cardWidth={cardWidth - BORDER_TOTAL_SIZE}\n                    className={clsx(\n                      'g-table-image',\n                      isSelected && 'g-table-image--selected',\n                      getAnimationClass('zoomIn')\n                    )}\n                    previewImageId={card.id}\n                  />\n                  {userCardEntry.used && (\n                    <div className=\"g-star-points\">\n                      {userCardEntry.score === 3 && <StarIcon className=\"g-star g-star--super-spark\" />}\n                      {userCardEntry.score > 1 && <StarIcon className=\"g-star g-star--spark\" />}\n                      {userCardEntry.score > 0 && <StarIcon className=\"g-star g-star--spark\" />}\n                    </div>\n                  )}\n                </li>\n              );\n            }\n\n            return (\n              <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n                <div className=\"center\">\n                  <ImageBlurButton cardId={card.id} />\n                </div>\n                <ImageCard\n                  imageId={card.id}\n                  cardWidth={cardWidth - BORDER_TOTAL_SIZE} // 6 is the border total size\n                  className={clsx(\n                    'g-table-image',\n                    isSelected && 'g-table-image--selected',\n                    getAnimationClass('zoomIn')\n                  )}\n                />\n                {isPlayAvailable && userCards[card.id] && (\n                  <Button\n                    shape=\"round\"\n                    size=\"small\"\n                    ghost\n                    className=\"g-table-item-button\"\n                    onClick={() => onPlayCard(card.id)}\n                    disabled={isLoading}\n                  >\n                    <UpCircleOutlined />\n                    <Translate pt=\"Selecionar\" en=\"Select\" />\n                    <UpCircleOutlined />\n                  </Button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\n// Helpers\nimport { getAnimationClass, getAvatarColorById, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { useMemo } from 'react';\n\ntype PlayersDreamsCountProps = {\n  players: GamePlayers;\n  playerInNightmareId?: PlayerId;\n};\n\nexport function PlayersDreamsCount({ players, playerInNightmareId }: PlayersDreamsCountProps) {\n  const sortedPlayers = useMemo(() => sortPlayers(players), [players]);\n\n  return (\n    <div className=\"g-players-dreams-count\">\n      <header className=\"g-players-dreams-count__title\">\n        <Translate en=\"Player Dream Count\" pt=\"Sonhos por Jogador\" />\n      </header>\n      <ul className=\"g-players-dreams-count__players\">\n        {sortedPlayers.map((player) => {\n          const cards: GCardInHand[] = Object.values(player.cards);\n          const cardsLeft = cards.filter((card) => !card.used);\n          const isPlayerInNightmare = player.id === playerInNightmareId;\n          const showTooltip = isPlayerInNightmare && !player.fallen;\n\n          return (\n            <span\n              key={`player-dream-count-${player.id}`}\n              className={clsx(\n                'g-players-dreams-count__player',\n                isPlayerInNightmare &&\n                  !player.fallen &&\n                  `g-players-dreams-count__player--nightmare ${getAnimationClass('pulse', {\n                    speed: 'faster',\n                    repeat: 3,\n                  })}`\n              )}\n              style={{ backgroundColor: getAvatarColorById(player.avatarId) }}\n            >\n              <Tooltip\n                title={\n                  showTooltip ? (\n                    <div className={getAnimationClass('tada', { speed: 'fast', infinite: true })}>\n                      {player.name} <Translate pt=\"tá em apuros!\" en=\"is in danger\" />\n                    </div>\n                  ) : undefined\n                }\n                color=\"black\"\n                placement=\"bottom\"\n                open={showTooltip}\n              >\n                <Avatar shape=\"square\" id={player.avatarId} alt={player.name} />\n\n                <div\n                  className={clsx(\n                    'g-players-dreams-count__count',\n                    player.fallen && 'g-players-dreams-count__count--fallen'\n                  )}\n                >\n                  {cardsLeft.length}\n                </div>\n              </Tooltip>\n            </span>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { BotsRules, CardPlayRules } from './components/RulesBlobs';\nimport { PlayTable } from './components/PlayTable';\nimport { messageContent } from 'components/pop-up';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { AvatarName } from 'components/avatars';\nimport { PopoverRule } from 'components/rules';\nimport { TurnOrder } from 'components/players';\nimport { PlayersDreamsCount } from './components/PlayersDreamsCount';\nimport { FixedMenuButton } from 'components/buttons';\nimport { RobotOutlined } from '@ant-design/icons';\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onPlayCard: GenericFunction;\n  user: GamePlayer;\n  activePlayer: GamePlayer;\n  isActivePlayer: boolean;\n  isLoading?: boolean;\n  players: GamePlayers;\n  gameOrder: GameOrder;\n  setLastTurnCount: GenericFunction;\n  playerInNightmareId?: PlayerId;\n  botEnabled?: boolean;\n};\n\nexport function StepPlayDream({\n  table,\n  word,\n  onPlayCard,\n  user,\n  activePlayer,\n  isActivePlayer,\n  isLoading,\n  players,\n  gameOrder,\n  setLastTurnCount,\n  playerInNightmareId,\n  botEnabled = false,\n}: StepDreamsSelectionProps) {\n  const { message } = App.useApp();\n  useTemporarilyHidePlayersBar();\n  const { translate } = useLanguage();\n  const [showedMessage, setShowedMessage] = useState(false);\n\n  useEffect(() => {\n    setLastTurnCount(activePlayer.id);\n  });\n\n  useEffect(() => {\n    if (isActivePlayer && !isLoading && !showedMessage) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate(\n            'Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!',\n            'Select the dream card you think will match at least one player'\n          ),\n          activePlayer.id,\n          3\n        )\n      );\n      setShowedMessage(true);\n    }\n  }, [isActivePlayer, activePlayer.id, translate, isLoading, showedMessage, message]);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"small\">\n        <Translate pt=\"Bingo dos Sonhos\" en=\"Dream Bingo\" />\n      </Title>\n      <Card header={translate('Tema', 'Theme')} color=\"purple\">\n        {word.text}\n      </Card>\n\n      <PlayersDreamsCount players={players} playerInNightmareId={playerInNightmareId} />\n\n      {Boolean(user.fallen) && (\n        <Instruction contained>\n          <Translate\n            pt=\"Você estava em apuros e não conseguiu dar match em uma de suas cartas, então perdeu um ponto por carta que você deu match.\"\n            en=\"You were in danger and didn't get a match in one of your cards. You lost 1 point per scored card.\"\n          />\n        </Instruction>\n      )}\n\n      <Instruction contained>\n        {isActivePlayer ? (\n          <Translate\n            pt=\"Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!\"\n            en=\"Select the dream card you think will match at least one player\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('flash')} /> está selecionando\n                um sonho.\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('flash')} /> is selecting a\n                dream.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <PopoverRule content={<CardPlayRules />} />\n\n      {botEnabled && (\n        <FixedMenuButton\n          type=\"popover\"\n          position={1}\n          icon={<RobotOutlined />}\n          content={<BotsRules />}\n          label={<Translate pt=\" Bots\" en=\" Bots\" />}\n        />\n      )}\n\n      <PlayTable\n        table={table}\n        onPlayCard={(cardId: string) => onPlayCard({ cardId })}\n        userCards={user.cards ?? {}}\n        isPlayAvailable={isActivePlayer}\n      />\n\n      <TurnOrder players={players} order={gameOrder} activePlayerId={activePlayer.id} />\n    </Step>\n  );\n}\n","// Components\nimport { AvatarName } from 'components/avatars';\n\ntype ListPlayersProps = {\n  listPlayers: GamePlayer[];\n  className: string;\n};\n\nexport function ListPlayers({ listPlayers, className }: ListPlayersProps) {\n  return (\n    <ul className={className}>\n      {listPlayers.map((player) => (\n        <li key={`${className}-${player.id}`}>\n          <AvatarName player={player} addressUser />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// Ant Design\n// Utils\nimport { pluralize } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\nimport { PlayersHighlight } from 'components/metrics/PlayersHighlight';\nimport { PlayerHighlight } from 'components/metrics/PlayerHighlight';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype MatchCountProps = {\n  matchCount: number;\n  lastActivePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n};\n\nexport function MatchCount({ matchCount, lastActivePlayer, playerInNightmare }: MatchCountProps) {\n  const isSpark = matchCount > 0;\n  const isSuperSpark = matchCount === 1;\n\n  const isPlayerInNightmare = playerInNightmare?.id === lastActivePlayer.id;\n\n  return (\n    <div>\n      {isSpark ? (\n        <Translate\n          pt={\n            <p>\n              E encontrou{' '}\n              {matchCount > 1 ? (\n                <PlayersHighlight>{matchCount}</PlayersHighlight>\n              ) : (\n                <PlayerHighlight>{matchCount}</PlayerHighlight>\n              )}{' '}\n              {pluralize(matchCount, 'jogador')} lá!\n              <br />\n              {isSuperSpark && 'Brilho total!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n          en={\n            <p>\n              And met{' '}\n              {matchCount > 1 ? (\n                <PlayersHighlight>{matchCount}</PlayersHighlight>\n              ) : (\n                <PlayerHighlight>{matchCount}</PlayerHighlight>\n              )}{' '}\n              {pluralize(matchCount, 'player')} there!\n              <br />\n              {isSuperSpark && 'Super Spark!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n        />\n      ) : (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">Vixi...</h2>\n              Não sei o que dizer... Ninguém visitou esse sonho e{' '}\n              <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> está fora da rodada{' '}\n              <small>(as cartas restantes ainda contarão pontos para outros jogadores)</small>.{' '}\n              {isPlayerInNightmare && (\n                <>\n                  {' '}\n                  Para piorar, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> vai perder{' '}\n                  <PointsHighlight type=\"negative\">1</PointsHighlight>\n                  ponto por sonho usado até então.\n                </>\n              )}\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">Oops...</h2>I don't know what to say... no one has visited this\n              dream and <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> is/are out of the\n              round <small>(the remaining cards will still count towards scoring for other players)</small>.\n              {isPlayerInNightmare && (\n                <>\n                  {' '}\n                  To make this worse, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> will\n                  lose <PointsHighlight type=\"negative\">1</PointsHighlight> point for each scored dream.\n                </>\n              )}\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Alert, Divider, Space } from 'antd';\nimport { useMemo } from 'react';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Constants\nimport { GO_TO_CARD_PLAY_STEP } from './utils/constants';\n// Helpers\nimport { getAnimationClass, getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { ImageCard } from 'components/image-cards';\nimport { TimedButton } from 'components/buttons';\nimport { VIPNextPhaseButton } from 'components/vip';\nimport { ListPlayers } from './components/ListPlayers';\nimport { MatchCount } from './components/MatchCount';\nimport { TurnOrder } from 'components/players';\n\ntype MatchingPlayersReduceResult = {\n  matchingPlayers: GamePlayer[];\n  fallenMatchingPlayers: GamePlayer[];\n};\n\ntype StepAnnounceDreamProps = {\n  latest: LatestInfo;\n  lastActivePlayer: GamePlayer;\n  activePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n  setStep: GenericFunction;\n  players: GamePlayers;\n  gameOrder: TurnOrder;\n};\n\nexport function StepAnnounceDream({\n  latest,\n  lastActivePlayer,\n  activePlayer,\n  setStep,\n  players,\n  playerInNightmare,\n  gameOrder,\n}: StepAnnounceDreamProps) {\n  useTemporarilyHidePlayersBar();\n  const cardWidth = useCardWidth(5, { gap: 8, minWidth: 140, maxWidth: 150 });\n\n  const { matchingPlayers, fallenMatchingPlayers } = useMemo(\n    () =>\n      (latest?.matchedPlayers ?? []).reduce(\n        (acc: MatchingPlayersReduceResult, playerId) => {\n          const player = players[playerId];\n          if (player?.fallen) {\n            if (lastActivePlayer.id !== playerId) {\n              acc.fallenMatchingPlayers.push(player);\n            }\n          } else {\n            acc.matchingPlayers.push(player);\n          }\n          return acc;\n        },\n        { matchingPlayers: [], fallenMatchingPlayers: [] }\n      ),\n    [latest?.matchedPlayers, players, lastActivePlayer.id]\n  );\n\n  const completedPlayers = Object.values(players).filter((player) => player?.skip || player?.fallen);\n\n  return (\n    <Step fullWidth>\n      <div className={clsx('g-dream-result', getAnimationClass('fadeIn', { speed: 'slow' }))}>\n        <header\n          className=\"g-dream-result__header\"\n          style={{ backgroundColor: getAvatarColorById(lastActivePlayer.avatarId) }}\n        >\n          <AvatarName player={lastActivePlayer} size=\"large\" />\n          <Translate pt=\"escolheu visitar o sonho\" en=\"chose to visit the dream\" />:\n        </header>\n        <div className=\"g-dream-result__card\">\n          <ImageCard imageId={latest.cardId} cardWidth={cardWidth} />\n        </div>\n        <div className=\"g-dream-result__match-result\">\n          <MatchCount\n            matchCount={latest.matchCount}\n            lastActivePlayer={lastActivePlayer}\n            playerInNightmare={playerInNightmare}\n          />\n        </div>\n        <div className=\"g-dream-result__matching-players\">\n          {matchingPlayers.length > 0 && (\n            <>\n              <p>\n                <Translate pt=\"Ganharam pontos:\" en=\"Scored points:\" />\n              </p>\n\n              <ListPlayers listPlayers={matchingPlayers} className=\"g-dream-result__matched-players-list\" />\n            </>\n          )}\n        </div>\n        <div className=\"g-dream-result__fallen-matching-players\">\n          {fallenMatchingPlayers.length > 0 && (\n            <>\n              <p className=\"g-dream-result__label\">\n                <Translate\n                  pt=\"Ganhariam pontos, mas já estão eliminados:\"\n                  en=\"Matched but are out of the round:\"\n                />\n              </p>\n\n              <ListPlayers\n                listPlayers={fallenMatchingPlayers}\n                className=\"g-dream-result__matched-players-list fallen\"\n              />\n            </>\n          )}\n        </div>\n        <footer className=\"g-dream-result__footer\">\n          {latest.isPhaseOver || latest.cardsLeft === 0 ? (\n            <Space align=\"center\" className=\"full-width padding\" direction=\"vertical\">\n              <p className=\"center\">\n                <Translate\n                  pt=\"Todos jogadores já usaram seus sonhos ou não deram match com ninguém. Vamos para a próxima rodada?\"\n                  en=\"All players have used their dreams or didn't match anybody. Ready for the next round?\"\n                />\n              </p>\n              {gameOrder.length === 1 && (\n                <Alert\n                  className=\"center\"\n                  type=\"error\"\n                  message={\n                    playerInNightmare?.id === gameOrder[0] ? (\n                      <Translate\n                        pt={\n                          <>\n                            <AvatarName player={playerInNightmare} /> foi ganancioso(a) não conseguiu usar\n                            todos os sonhos.\n                          </>\n                        }\n                        en={\n                          <>\n                            <AvatarName player={playerInNightmare} /> was too greedy and wasn't able to use of\n                            all their dreams.\n                          </>\n                        }\n                      />\n                    ) : (\n                      <Translate\n                        pt={\n                          <>\n                            Não há mais jogadores pra dar match com{' '}\n                            <AvatarName player={players[gameOrder[0]]} />\n                          </>\n                        }\n                        en={\n                          <>\n                            There are no players to match anymore with{' '}\n                            <AvatarName player={players[gameOrder[0]]} />\n                          </>\n                        }\n                      />\n                    )\n                  }\n                />\n              )}\n            </Space>\n          ) : (\n            <Space align=\"center\" className=\"full-width padding\" direction=\"vertical\">\n              <p className=\"center\">\n                <Translate pt=\"Próximo jogador:\" en=\"Next player:\" />\n                <AvatarName player={activePlayer} addressUser />\n              </p>\n\n              <TimedButton\n                type=\"primary\"\n                duration={12}\n                disabled\n                onExpire={() => setStep(GO_TO_CARD_PLAY_STEP)}\n              >\n                <Translate pt=\"Continuando em...\" en=\"Continuing in...\" />\n              </TimedButton>\n            </Space>\n          )}\n          {completedPlayers.length > 0 && (\n            <>\n              <Divider />\n              <div className=\"g-dream-result__completed-players\">\n                <p className=\"g-dream-result__label center\">\n                  <Translate pt=\"Jogadores fora do rodízio\" en=\"Players out of rotation\" />:\n                </p>\n                <ListPlayers\n                  listPlayers={completedPlayers}\n                  className=\"g-dream-result__matched-players-list g-dream-result__matched-players-list--centered\"\n                />\n              </div>\n            </>\n          )}\n        </footer>\n      </div>\n\n      {gameOrder.length > 1 && (\n        <TurnOrder players={players} order={gameOrder} activePlayerId={activePlayer.id} />\n      )}\n\n      {(latest.isPhaseOver || latest.cardsLeft === 0) && (\n        <VIPNextPhaseButton autoTriggerTime={15}>Ranking</VIPNextPhaseButton>\n      )}\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { useStep } from 'hooks/useStep';\nimport { useLoading } from 'hooks/useLoading';\nimport { useOnPlayCardAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport {\n  GO_TO_CARD_PLAY_STEP,\n  GO_TO_PLAYER_WITH_NIGHTMARE_STEP,\n  GO_TO_SEE_CARD_STEP,\n} from './utils/constants';\n// Icons\nimport { DoorSignIcon } from 'icons/DoorSignIcon';\nimport { NightmareIcon } from 'icons/NightmareIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, PhaseTimerReset } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Instruction } from 'components/text';\nimport { CardPlayRules } from './components/RulesBlobs';\nimport { StepPlayDream } from './StepPlayDream';\nimport { StepAnnounceDream } from './StepAnnounceDream';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\n\nfunction PhaseCardPlay({ players, state, info, meta }: PhaseProps) {\n  const { isLoading } = useLoading();\n  const { step, goToNextStep, setStep } = useStep();\n  const user = useUser(players, state);\n\n  const [activePlayer, isActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [lastActivePlayer] = useWhichPlayerIsThe('lastActivePlayerId', state, players);\n  const [playerInNightmare] = useWhichPlayerIsThe('playerInNightmareId', state, players);\n\n  const [lastTurnCount, setLastTurnCount] = useState('');\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  useEffect(() => {\n    if (lastTurnCount && state.turnCount !== lastTurnCount) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.turnCount]); // eslint-disable-line\n\n  useEffect(() => {\n    if (!state.activePlayerId) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.activePlayerId, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.CARD_PLAY}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DoorSignIcon />}\n          title={<Translate pt=\"Hora do Bingo dos Sonhos!\" en=\"Time for the Dream Bingo!\" />}\n          onClose={() =>\n            setStep(playerInNightmare.id ? GO_TO_PLAYER_WITH_NIGHTMARE_STEP : GO_TO_CARD_PLAY_STEP)\n          }\n          duration={state.round.current < 2 ? 20 : 5}\n          unskippable\n          type=\"block\"\n        >\n          <CardPlayRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 2 */}\n        <PhaseAnnouncement\n          icon={<NightmareIcon />}\n          animationType=\"tada\"\n          title={\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> entrou em um pesadelo!\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> is in nightmare!\n                </>\n              }\n            />\n          }\n          onClose={() => setStep(GO_TO_CARD_PLAY_STEP)}\n          currentRound={state?.round?.current}\n          duration={state.round.current < 3 ? 10 : 5}\n          unskippable\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInNightmare} addressUser /> selecionou{' '}\n                  <CardHighlight>{Object.keys(playerInNightmare?.cards ?? {}).length} cartas</CardHighlight>,\n                  o maior número de cartas da rodada!\n                  <br />\n                  Se ele não conseguir achar outro jogador que marcou o mesmo sonho para cada uma das cartas\n                  selecionadas, ele perde <PointsHighlight type=\"negative\">1</PointsHighlight> ponto por carta\n                  que você ganhou ponto.\n                  <br />\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInNightmare} addressUser /> selected{' '}\n                  <CardHighlight>{Object.keys(playerInNightmare?.cards ?? {}).length} cards</CardHighlight>,\n                  the largest number of cards for this round!\n                  <br />\n                  If they are not able to match every single dream, they will lose{' '}\n                  <PointsHighlight type=\"negative\">1</PointsHighlight> point per card you previously scored.\n                  <br />\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 3 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 4 */}\n        <StepAnnounceDream\n          latest={state.latest}\n          lastActivePlayer={lastActivePlayer}\n          setStep={setStep}\n          players={players}\n          activePlayer={activePlayer}\n          playerInNightmare={playerInNightmare}\n          gameOrder={state.gameOrder}\n        />\n\n        {/* Step 5 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 6 */}\n        <StepPlayDream\n          table={state.table}\n          word={state.word}\n          onPlayCard={onPlayCard}\n          user={user}\n          activePlayer={activePlayer}\n          isActivePlayer={isActivePlayer}\n          players={players}\n          gameOrder={state.gameOrder}\n          isLoading={isLoading}\n          setLastTurnCount={setLastTurnCount}\n          playerInNightmareId={state.playerInNightmareId}\n          botEnabled={Boolean(meta?.options?.withBots)}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","// State & Hooks\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { RankIcon } from 'icons/RankIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction, RoundsLeftInstruction } from 'components/text';\nimport { VIPNextPhaseButton } from 'components/vip';\n\nfunction PhaseResolution({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep } = useStep();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.RESOLUTION}>\n      <StepSwitcher step={step} players={players} waitingRoom={{ type: 'SERVER' }}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<RankIcon />}\n          title={<Translate pt=\"Ranking\" en=\"Ranking\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n          duration={3}\n        >\n          <Instruction>\n            <Translate pt=\"E quem deu mais matches foi...\" en=\"And who matched the most was...\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepRankingWrapper\n          players={players}\n          ranking={state.ranking}\n          gainedPointsDescriptions={[\n            <Translate pt=\"Pontos por encontrar só um jogador\" en=\"Points for matching only 1 player\" />,\n            <Translate\n              pt=\"Pontos por encontrar mais de um jogador\"\n              en=\"Points for matching with more players\"\n            />,\n            <Translate\n              pt=\"Pontos perdidos por não ter dado match e estar em um pesadelo\"\n              en=\"Points lost for not matching any player while in a nightmare\"\n            />,\n          ]}\n        >\n          <RoundsLeftInstruction round={state.round} />\n          <VIPNextPhaseButton round={state.round} />\n        </StepRankingWrapper>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar, Divider } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { ImageCard } from 'components/image-cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\n\ntype BestMatchesProps = {\n  bestMatches: GImageCardMatch[];\n};\n\nexport function BestMatches({ bestMatches }: BestMatchesProps) {\n  const cardWidth = useCardWidth(8, { gap: 8, minWidth: 100, maxWidth: 150 });\n\n  return (\n    <Step>\n      <Divider />\n      <Title size=\"x-small\" level={3}>\n        <Translate pt=\"Sonhos mais visitados\" en=\"Most visited dreams\" />\n      </Title>\n\n      <ul className=\"g-best-matches\">\n        {orderBy(bestMatches, 'matchedPlayers.length', 'desc').map((entry, index) => {\n          return (\n            <div key={`${entry.id}-${index}`} className=\"g-best-matches__entry\">\n              <div className=\"g-best-matches__label\">\n                <Avatar size=\"small\">{entry.matchedPlayers.length}</Avatar>\n                <span>{entry.text}</span>\n              </div>\n              <ImageCard\n                imageId={entry.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n              />\n            </div>\n          );\n        })}\n      </ul>\n    </Step>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Helpers\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageBlurButton, ImageCard } from 'components/image-cards';\n\ntype TableProps = {\n  table: GImageCard[];\n};\n\nexport function GameOverTable({ table }: TableProps) {\n  const cardWidth = useCardWidth(12, { gap: 8, minWidth: 60, maxWidth: 100 });\n  return (\n    <Image.PreviewGroup>\n      <ul className=\"g-table g-table--game-over\">\n        {table.map((card) => {\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <ImageBlurButton cardId={card.id} />\n              <ImageCard\n                imageId={card.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n                className={clsx('g-table-image', getAnimationClass('zoomIn'))}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </Image.PreviewGroup>\n  );\n}\n","// Utils\nimport { achievementsReference } from './utils/achievements';\n// Icons\nimport { LadderIcon } from 'icons/LadderIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\nimport { BestMatches } from './components/BestMatches';\nimport { GameOverTable } from './components/GameOverTable';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<LadderIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n      <BestMatches bestMatches={state.bestMatches} />\n      <GameOverTable table={state.table} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseDreamsSelection from './PhaseDreamsSelections';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n// Sass\nimport './galeria-de-sonhos.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.GALERIA_DE_SONHOS.WORD_SELECTION:\n      return PhaseWordSelection;\n    case PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION:\n      return PhaseDreamsSelection;\n    case PHASES.GALERIA_DE_SONHOS.CARD_PLAY:\n      return PhaseCardPlay;\n    case PHASES.GALERIA_DE_SONHOS.RESOLUTION:\n      return PhaseResolution;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionGaleriaDeSonhos() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.PLUMP_PURPLE,\n          colorLink: THEME_COLORS.PLUMP_PURPLE,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.GALERIA_DE_SONHOS} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionGaleriaDeSonhos;\n","export const achievementsReference: AchievementReference = {\n  MOST_MATCHES: {\n    icon: 'double-arrow-up',\n    title: {\n      pt: 'Mais Matches',\n      en: 'Most Matches',\n    },\n    description: {\n      pt: 'Deu match com o mais jogadores em cartas sonhos',\n      en: 'Match dream cards with other players the most',\n    },\n  },\n  FEWEST_MATCHES: {\n    icon: 'double-arrow-down',\n    title: {\n      pt: 'Menos Matches',\n      en: 'Fewest Matches',\n    },\n    description: {\n      pt: 'Deu match com o menos jogadores em cartas sonhos',\n      en: 'Match dream cards with other players the fewest',\n    },\n  },\n  MOST_FULL_MATCHES: {\n    icon: 'star',\n    title: {\n      pt: 'Mais Match Completo',\n      en: 'Most Full Matches',\n    },\n    description: {\n      pt: 'Deu match com todos os sonhos em uma rodada mais vezes',\n      en: 'Match all dream cards in a round most times',\n    },\n  },\n  MOST_VISITS: {\n    icon: 'sand-timer',\n    title: {\n      pt: 'Melhor Visitante',\n      en: 'Best Visitor',\n    },\n    description: {\n      pt: 'Visitou o maior número de cartas-sonhos durante o jogo',\n      en: 'Visited the most dream cards during the game',\n    },\n  },\n  LEAST_ADVENTUROUS: {\n    icon: 'arrow-narrow',\n    title: {\n      pt: 'Mais Comedido',\n      en: 'Least Adventurous',\n    },\n    description: {\n      pt: 'Visitou o menor número de cartas-sonhos durante o jogo',\n      en: 'Visited the fewest dream cards during the game',\n    },\n  },\n  MOST_ADVENTUROUS: {\n    icon: 'face-scared',\n    title: {\n      pt: 'Mais Aventureiro',\n      en: 'Most Adventurous',\n    },\n    description: {\n      pt: 'Esteve em pesadelos mais vezes',\n      en: 'Was in a nightmare more times',\n    },\n  },\n  MOST_PAIRS: {\n    icon: 'puzzle',\n    title: {\n      pt: 'Mais Brilhante',\n      en: 'Brightest',\n    },\n    description: {\n      pt: 'Encontrou somente um outro jogador mais vezes',\n      en: 'Found only one other player most times',\n    },\n  },\n  MOST_OUT_OF_THE_BOX: {\n    icon: 'box',\n    title: {\n      pt: 'Mais Diferentão',\n      en: 'Out of the Box Thinker',\n    },\n    description: {\n      pt: 'Teve mais cartas sem dar match no total',\n      en: 'Had the most cards without a match throughout the game',\n    },\n  },\n  MOST_LONELY: {\n    icon: 'face-tired',\n    title: {\n      pt: 'Mais Solitário',\n      en: 'Loneliest',\n    },\n    description: {\n      pt: 'Não deu mete nenhum mais vezes',\n      en: 'Got zero matches in a round more times',\n    },\n  },\n  POOREST_CHOICES: {\n    icon: 'face-oops',\n    title: {\n      pt: 'Mais Confuso',\n      en: 'Poorest Choices',\n    },\n    description: {\n      pt: 'Foi eliminado mais vezes',\n      en: 'Was eliminated the most',\n    },\n  },\n  SMARTEST_CHOICES: {\n    icon: 'brain',\n    title: {\n      pt: 'Mais Esperto',\n      en: 'Smartest Choices',\n    },\n    description: {\n      pt: 'Foi eliminado menos vezes',\n      en: 'Was eliminated the least',\n    },\n  },\n};\n\nexport default achievementsReference;\n","import { Dispatch, useState } from 'react';\n\ntype UseBooleanDictionaryReturnValue = {\n  /**\n   * The dictionary\n   */\n  dict: BooleanDictionary;\n  /**\n   * Set the dictionary\n   */\n  setDict: Dispatch<React.SetStateAction<BooleanDictionary>>;\n  /**\n   * Add or remove an entry from the dictionary\n   * @param key - The key to add or remove\n   */\n  updateDict: (key: string) => void;\n  /**\n   * Reset the dictionary to the initial state\n   */\n  reset: () => void;\n  /**\n   * The number of entries in the dictionary\n   */\n  length: number;\n  /**\n   * The list of keys in the dictionary\n   */\n  keys: string[];\n};\n\n/**\n * A dictionary of booleans\n * @param initialState - The initial state, usually an empty object\n * @param validation - A function to validate if an entry can be added to the dictionary\n * @returns - A dictionary of booleans and its functions\n */\nexport function useBooleanDictionary(\n  initialState: BooleanDictionary,\n  validation?: BooleanFunction\n): UseBooleanDictionaryReturnValue {\n  const [dict, setDict] = useState(initialState);\n\n  const updateDict = (key: string) => {\n    const isValid = !validation || validation(dict);\n    if (!dict[key] && isValid) {\n      setDict((s) => ({\n        ...s,\n        [key]: true,\n      }));\n    } else {\n      const dictCopy = { ...dict };\n      delete dictCopy[key];\n      setDict(dictCopy);\n    }\n  };\n\n  const reset = () => setDict(initialState);\n\n  const keys = Object.keys(dict);\n\n  return {\n    dict,\n    setDict,\n    updateDict,\n    reset,\n    keys,\n    length: keys.length,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: GamePlayers = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>({});\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function DreamIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        d=\"M505 151.9c0-35.8-29-64.8-64.8-64.8-2.2 0-4.5.1-6.7.3C412 41.1 340.7 7 256 7S100 41 78.5 87.4c-2.2-.2-4.4-.3-6.7-.3C36 87 7 116 7 151.8c0 23.3 12.5 44.8 32.8 56.4-21.3 28.8-15.2 69.3 13.6 90.6 18.7 13.8 43.3 16.6 64.5 7.3 21.4 27.7 57.4 40 91.3 31.1 22.7 25.9 62 28.6 87.9 5.9 2.1-1.8 4.1-3.8 5.9-5.9 33.9 8.9 69.8-3.4 91.3-31.1 32.8 14.4 71-.5 85.3-33.3 9.3-21.3 6.6-45.9-7.3-64.6 20.2-11.5 32.7-33 32.7-56.3z\"\n        fill=\"#DF8EEF\"\n      ></path>\n      <circle cx=\"38.8\" cy=\"473.2\" r=\"31.8\" fill=\"#DF8EEF\"></circle>\n      <circle cx=\"113.6\" cy=\"398.4\" r=\"44\" fill=\"#DF8EEF\"></circle>\n      <path\n        d=\"M281.1 215.4c-51.7 0-93.5-41.9-93.5-93.5 0-9.2 1.3-18.3 4-27-39.9 32.8-45.6 91.8-12.7 131.6s91.8 45.6 131.6 12.7c14.2-11.7 24.7-27.4 30.1-45.1-16.8 13.8-37.8 21.4-59.5 21.3z\"\n        fill=\"#FFE72C\"\n      ></path>\n      <path\n        d=\"M284.8 160.3l-27.7 9.8.8-29.4-17.9-23.2 28.2-8.3L284.8 85l16.6 24.2 28.2 8.3-17.9 23.3.8 29.4-27.7-9.9z\"\n        fill=\"#FFE72C\"\n      ></path>\n      <path d=\"M353.8 31.2c6 2.3 11.9 4.9 17.4 7.7 3.4 1.9 7.6.7 9.5-2.6 1.9-3.4.7-7.6-2.6-9.5l-.6-.3c-5.9-2.9-12.1-5.7-18.6-8.2-3.6-1.4-7.7.4-9.1 4s.4 7.5 4 8.9z\"></path>\n      <path d=\"M512 151.9c0-39.7-32.3-71.9-72-71.8h-2.3c-3.9-7.2-8.7-14-14.3-20.1-2.6-2.9-7-3.1-9.9-.5-2.9 2.6-3.1 7-.5 9.9 5.7 6.2 10.5 13.3 14.1 20.9 1.3 2.7 4.1 4.3 7.1 4 2-.2 4-.3 6-.3 31.9 0 57.8 25.8 57.9 57.7 0 20.8-11.1 40.1-29.2 50.3-3.4 1.9-4.5 6.2-2.6 9.6.1.2.3.5.4.7 19 25.7 13.5 61.8-12.1 80.8-16.6 12.3-38.6 14.8-57.5 6.5-2.9-1.3-6.4-.4-8.3 2.1-19.7 25.5-52.8 36.8-84 28.7-2.6-.7-5.3.2-7 2.2-20.1 23-55.1 25.4-78.1 5.3-1.9-1.6-3.6-3.4-5.3-5.3-1.7-2-4.5-2.8-7-2.2-31.2 8.2-64.3-3.1-84-28.6-2-2.6-5.4-3.4-8.3-2.2-29.2 12.8-63.3-.5-76.1-29.7-8.3-19-5.9-40.9 6.5-57.6 2.3-3.1 1.6-7.5-1.5-9.8-.2-.2-.4-.3-.7-.4-27.8-15.8-37.5-51.1-21.7-78.8C31.8 105.2 51 94.1 71.8 94.1c2 0 4 .1 6 .3 3 .3 5.8-1.3 7.1-4C105.7 45.4 176.1 14 256 14c15 0 30 1.1 44.8 3.3 3.8.6 7.4-2 8-5.9.6-3.8-2-7.4-5.9-8C287.4 1.2 271.7 0 256 0 173.3 0 99.7 32.7 74.3 80.1 34.7 78.7 1.4 109.7 0 149.3c-.8 24 10.4 46.9 29.9 60.9-6.6 11-10 23.6-10 36.4 0 39.7 32.1 71.8 71.8 71.8 8.1 0 16.2-1.4 23.9-4.1 22.5 26 57.5 37.7 91.1 30.5 26.9 27.2 70.8 27.4 98 .5l.5-.5c33.7 7.2 68.6-4.5 91.1-30.5 37.4 13.2 78.4-6.5 91.5-43.9 7-20 4.9-42.1-5.9-60.3 18.9-13.4 30-35.1 30.1-58.2zM38.8 434.3C17.4 434.3 0 451.7 0 473.2S17.4 512 38.8 512s38.8-17.4 38.8-38.8c0-21.5-17.3-38.8-38.8-38.9zm0 63.7C25.1 498 14 486.9 14 473.2s11.1-24.8 24.8-24.8 24.8 11.1 24.8 24.8c.1 13.7-11.1 24.8-24.8 24.8zm74.8-150.5c-28.2 0-51 22.8-51 51 0 10.7 3.4 21.1 9.6 29.8 2.3 3.1 6.6 3.8 9.8 1.6s3.8-6.6 1.6-9.8c-11.9-16.6-8.1-39.7 8.5-51.6s39.7-8.1 51.6 8.5 8.1 39.7-8.5 51.6c-6.3 4.5-13.8 6.9-21.6 6.9-3.9 0-7 3.1-7 7s3.1 7 7 7c28.2-.2 50.8-23.3 50.5-51.4-.3-27.9-22.7-50.4-50.5-50.6z\"></path>\n      <path d=\"M281.1 208.4c-47.8 0-86.5-38.8-86.5-86.5 0-8.5 1.2-16.9 3.7-25 1.1-3.7-1-7.6-4.7-8.7-2.2-.7-4.7-.2-6.5 1.3-42.8 35.3-49 98.6-13.7 141.5s98.6 49 141.5 13.7c15.3-12.6 26.6-29.5 32.3-48.5 1.1-3.7-1-7.6-4.7-8.7-2.2-.7-4.7-.2-6.5 1.3-15.4 12.7-34.8 19.6-54.9 19.6zM251 253.5c-47.8 0-86.5-38.7-86.5-86.5 0-18.1 5.7-35.7 16.2-50.4-.1 1.8-.1 3.6-.1 5.3 0 55.5 45 100.5 100.5 100.5 15 0 29.9-3.4 43.5-9.9-15.9 25.4-43.7 40.9-73.6 41z\"></path>\n      <path d=\"M290.5 81c-2.4-3.2-7-3.8-10.2-1.4-.5.4-1 .9-1.4 1.4l-15.2 22.2-25.8 7.6c-3.7 1.1-5.8 5-4.7 8.7.2.8.6 1.6 1.2 2.3l16.4 21.3-.7 26.9c-.1 3.9 2.9 7.1 6.8 7.2.9 0 1.8-.1 2.6-.4l25.3-9 25.3 9c3.6 1.3 7.6-.6 8.9-4.2.3-.8.4-1.7.4-2.6l-.7-26.9 16.4-21.3c2.4-3.1 1.8-7.5-1.3-9.8-.7-.5-1.5-.9-2.3-1.2l-25.8-7.6L290.5 81zm15.6 55.5c-1 1.3-1.5 2.9-1.5 4.5l.5 19.2-18.1-6.4c-1.5-.5-3.2-.5-4.7 0l-18.1 6.4.5-19.2c0-1.6-.5-3.2-1.5-4.5l-11.7-15.2 18.4-5.4c1.5-.5 2.9-1.4 3.8-2.8l10.8-15.8 10.8 15.8c.9 1.3 2.3 2.3 3.8 2.8l18.4 5.4-11.4 15.2z\"></path>\n    </svg>\n  );\n}\n","export function ImageCardsIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M319.463 421.666H82.093c-10.698 0-19.37-8.672-19.37-19.37V26.87c0-10.698 8.672-19.37 19.37-19.37h237.371c10.698 0 19.37 8.672 19.37 19.37v375.426c-.001 10.698-8.673 19.37-19.371 19.37z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M319.463 7.5h-20.63v310.431c0 46.246-37.49 83.735-83.735 83.735H62.722v.63c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V26.87c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#da387d\"\n        d=\"M301.142 247.455l-9.036 54.215c-4.902 29.412-30.349 50.969-60.166 50.969a41.902 41.902 0 01-29.629-12.273 2.167 2.167 0 00-3.066 0 41.902 41.902 0 01-29.629 12.273c-29.817 0-55.264-21.557-60.166-50.969l-9.036-54.215c-5.277-31.661 19.139-60.483 51.237-60.483a51.947 51.947 0 0136.73 15.214c6.847 6.847 17.948 6.847 24.794 0a51.944 51.944 0 0136.73-15.214c32.098 0 56.514 28.822 51.237 60.483z\"\n      ></path>\n      <path fill=\"#d80a61\" d=\"M298.833 261.305l2.308-13.85c1.521-9.123.576-18.011-2.308-26.041z\"></path>\n      <path\n        fill=\"#8078bc\"\n        d=\"M151.651 186.972a51.947 51.947 0 0136.73 15.214c6.847 6.847 17.948 6.847 24.794 0a51.944 51.944 0 0136.73-15.214c21.47 0 39.503 12.896 47.512 30.911V122.53a4.586 4.586 0 00-4.586-4.586H108.725a4.586 4.586 0 00-4.586 4.586v95.353c8.009-18.015 26.042-30.911 47.512-30.911zM292.106 301.67c-4.902 29.412-30.349 50.969-60.166 50.969a41.902 41.902 0 01-29.629-12.273 2.167 2.167 0 00-3.066 0 41.902 41.902 0 01-29.629 12.273c-29.817 0-55.264-21.557-60.166-50.969l-5.311-31.865v105.859a4.586 4.586 0 004.586 4.586h184.107a4.586 4.586 0 004.586-4.586V269.805z\"\n      ></path>\n      <path\n        fill=\"#6b61b1\"\n        d=\"M297.417 375.664v-42.315c-3.44 18.484-12.953 34.834-26.389 46.901h21.804a4.586 4.586 0 004.585-4.586z\"\n      ></path>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M429.908 90.333h-91.074v311.963c0 10.698-8.672 19.37-19.37 19.37H173.167v63.463c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V109.703c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M429.908 90.333h-20.63v310.431c0 46.246-37.49 83.735-83.735 83.735H173.167v.63c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V109.703c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#f4dd45\"\n        d=\"M338.834 232.111v170.185c0 10.698-8.672 19.37-19.37 19.37h-59.93c15.211 8.781 32.864 13.806 51.69 13.806 57.185 0 103.542-46.357 103.542-103.542-.002-47.622-32.153-87.736-75.932-99.819z\"\n      ></path>\n      <path\n        fill=\"#f1d333\"\n        d=\"M409.278 365.273c3.557-10.463 5.486-21.677 5.486-33.343s-1.929-22.88-5.486-33.343z\"\n      ></path>\n      <path\n        fill=\"#86f1a7\"\n        d=\"M338.834 278.693v106.474c43.78-6.444 75.931-27.838 75.931-53.237-.001-25.398-32.152-46.792-75.931-53.237z\"\n      ></path>\n      <path\n        fill=\"#80e29d\"\n        d=\"M409.278 349.713c3.557-5.58 5.486-11.561 5.486-17.783s-1.929-12.203-5.486-17.783z\"\n      ></path>\n      <path\n        fill=\"#7ad0df\"\n        d=\"M407.861 294.681v-89.318a4.586 4.586 0 00-4.586-4.586h-64.442v31.334c31.709 8.752 57.317 32.207 69.028 62.57zm-96.639 140.791c-18.826 0-36.478-5.025-51.69-13.806h-44.949v36.831a4.586 4.586 0 004.586 4.586h184.107a4.586 4.586 0 004.586-4.586V369.18c-14.958 38.78-52.586 66.292-96.64 66.292z\"\n      ></path>\n      <path\n        fill=\"#70c6da\"\n        d=\"M407.861 458.497v-42.315c-3.44 18.484-12.953 34.834-26.389 46.901h21.804a4.586 4.586 0 004.585-4.586z\"\n      ></path>\n      <path d=\"M145.556 97.833a7.5 7.5 0 007.5-7.5V55.819c0-15.554-12.654-28.208-28.208-28.208S96.64 40.265 96.64 55.819v34.514a7.5 7.5 0 0015 0V70.222h26.417v20.111a7.499 7.499 0 007.499 7.5zm-20.709-55.222c7.083 0 12.882 5.604 13.195 12.611h-26.389c.313-7.007 6.112-12.611 13.194-12.611z\"></path>\n      <path d=\"M449.278 180.356a7.5 7.5 0 007.5-7.5v-63.153c0-14.816-12.054-26.871-26.87-26.871h-83.574V26.87c0-14.816-12.054-26.87-26.87-26.87H199.592a7.5 7.5 0 000 15h119.872c6.545 0 11.87 5.325 11.87 11.87v375.426c0 6.545-5.325 11.87-11.87 11.87H82.093c-6.545 0-11.871-5.325-11.871-11.87V26.87c0-6.545 5.325-11.87 11.871-11.87h82.499a7.5 7.5 0 000-15H82.093C67.276 0 55.222 12.054 55.222 26.87v375.426c0 14.816 12.054 26.87 26.871 26.87h83.574v55.963c0 14.816 12.054 26.871 26.87 26.871h237.371c14.816 0 26.87-12.054 26.87-26.871V207.856a7.5 7.5 0 00-15 0v277.273c0 6.545-5.325 11.871-11.87 11.871H192.537c-6.545 0-11.87-5.325-11.87-11.871v-55.963h26.417v29.331c0 6.664 5.421 12.085 12.085 12.085h29.282a7.5 7.5 0 000-15h-26.367v-26.417h35.479c41.673 23.035 95.759 17.569 132.129-18.833a112.935 112.935 0 0010.67-12.339v57.588H283.451a7.5 7.5 0 000 15h119.825c6.664 0 12.085-5.421 12.085-12.085v-88.043c9.28-24.951 9.133-52.488 0-77.169v-87.923c0-6.664-5.421-12.086-12.085-12.086h-56.942V97.833h83.574c6.545 0 11.87 5.325 11.87 11.871v63.153a7.5 7.5 0 007.5 7.499zM346.333 287.611c35.72 7.224 60.841 25.134 60.93 44.217v.265c-.143 19.06-25.249 36.939-60.93 44.155zm0-15.282v-29.832c23.977 9.374 42.714 27.79 52.77 50.6-13.123-9.529-31.229-16.832-52.77-20.768zm-13.342 153.177c7.974-4.666 13.342-13.322 13.342-23.21v-10.765c21.554-3.938 39.669-11.248 52.794-20.786-12.046 27.308-36.432 47.905-66.136 54.761zm67.37-217.229v57.339a110.629 110.629 0 00-54.028-39.062v-18.277z\"></path>\n      <path d=\"M292.831 110.444H108.725c-6.664 0-12.085 5.421-12.085 12.085v93.839a59.35 59.35 0 00-3.623 32.319l3.623 21.739v105.237c0 6.664 5.421 12.086 12.085 12.086h184.106c6.664 0 12.086-5.422 12.086-12.086V270.426l3.623-21.738a59.35 59.35 0 00-3.623-32.319v-93.84c0-6.663-5.422-12.085-12.086-12.085zM111.556 268.689a6.306 6.306 0 00-.041-.246l-3.703-22.22a44.362 44.362 0 019.928-36.034c16.727-19.746 46.877-21.159 65.338-2.699 9.759 9.759 25.641 9.76 35.401 0 8.395-8.394 19.555-13.017 31.426-13.017 13.09 0 25.451 5.729 33.912 15.717s12.08 23.122 9.928 36.033c-5.109 30.643-3.41 20.247-3.743 22.459l-5.293 31.756c-4.317 25.901-26.509 44.701-52.769 44.701-9.189 0-17.828-3.578-24.325-10.076-1.826-1.826-4.254-2.832-6.836-2.832s-5.01 1.005-6.836 2.832c-6.498 6.498-15.137 10.076-24.326 10.076-26.259 0-48.452-18.8-52.769-44.701zm178.361-143.245v69.506c-22.997-20.957-58.86-20.827-81.639 1.53v-19.626c0-7.932 4.407-15.062 11.501-18.61a7.499 7.499 0 003.354-10.062 7.499 7.499 0 00-10.062-3.354c-12.209 6.104-19.793 18.376-19.793 32.026v19.626c-11.18-10.973-25.939-17.009-41.627-17.009a59.324 59.324 0 00-40.012 15.478v-69.506h178.278zM111.639 372.75v-44.537c12.201 19.413 33.736 31.926 57.977 31.926 11.489 0 22.379-3.895 31.162-11.061 8.783 7.166 19.672 11.061 31.162 11.061 24.242 0 45.776-12.513 57.977-31.926v44.538H111.639z\"></path>\n    </svg>\n  );\n}\n","export function PlayersIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f7d6bf\"\n        d=\"M339 173.72a83.22 83.22 0 01-9.79 39.28c-22.11 40.29-72.72 55.52-113 33.41A82.23 82.23 0 01173 173.72a28.11 28.11 0 01.49-6.39c3.93-45.7 44.22-80.09 89.92-76.16a83.13 83.13 0 0176.16 76.16 28.11 28.11 0 00-.57 6.39z\"\n      ></path>\n      <path\n        fill=\"#b24432\"\n        d=\"M382.77 374.69v46.18H129.23v-46.18a118 118 0 01117.93-117.93h17.68a117.64 117.64 0 01117.93 117.93z\"\n      ></path>\n      <path\n        fill=\"#846e00\"\n        d=\"M167.55 287.22a115.77 115.77 0 00-38.32 87.47v34.88H8.84v-30.95A105.5 105.5 0 01114.49 273c18.67-.52 36.85 4.89 53.06 14.22z\"\n      ></path>\n      <path\n        fill=\"#eabfa2\"\n        d=\"M182.79 213c-5.41 37.83-40.29 64.37-78.13 59s-64.37-40.29-59-78.12 40.29-64.37 78.12-59A70.4 70.4 0 01173 166.84c0 2-.49 4.42-.49 6.39A90.21 90.21 0 00182.79 213z\"\n      ></path>\n      <path\n        fill=\"#840062\"\n        d=\"M503.16 378.13v30.95H382.77V374.2A117 117 0 00344 286.73c50.12-29.48 115-12.77 144.46 37.35a106.45 106.45 0 0114.75 54.05z\"\n      ></path>\n      <path\n        fill=\"#eabfa2\"\n        d=\"M467.29 203.69A69.36 69.36 0 01329.21 213a84.71 84.71 0 009.79-39.28 28.11 28.11 0 00-.49-6.39 69.83 69.83 0 01128.74 36.36z\"\n      ></path>\n      <path d=\"M321.84 420.87c0 4.92-3.93 8.36-8.84 8.85h-7.87a8.85 8.85 0 010-17.69H313a8.8 8.8 0 018.84 8.84zM512 378.13v30.95a8.81 8.81 0 01-8.84 8.85H391.62v2.95c0 4.91-3.94 8.35-8.85 8.84h-32.92a8.85 8.85 0 110-17.69h24.08v-37.34a109.15 109.15 0 00-109.09-109.08h-17.69a109.15 109.15 0 00-109.08 109.08v37.83h127.76a8.85 8.85 0 010 17.69h-136.6c-4.92 0-8.35-3.93-8.85-8.84v-3.44H8.84A8.81 8.81 0 010 409.08v-30.95A113.51 113.51 0 0175.18 271a78.82 78.82 0 01-30-30.95c-2.46-4.43-.5-9.34 3.43-11.8 4.43-2.45 9.34-.49 11.8 3.44a60.54 60.54 0 00113-17.2 88.17 88.17 0 01-9.34-45.2 61.26 61.26 0 00-84.47-15.71 62.63 62.63 0 00-26.53 49.62 8.85 8.85 0 11-17.69 0c0-43.24 35.37-77.63 78.12-77.63 20.15 0 38.82 7.86 53.56 21.62a91.87 91.87 0 01175.91 0 77.84 77.84 0 01108.1 112A90.19 90.19 0 01435.84 271 113.07 113.07 0 01512 378.13zM347.88 169.79a98.26 98.26 0 01-9.33 45.2 60.43 60.43 0 1048.64-70.26 56.25 56.25 0 00-39.31 25.06zm-166.57 3.93a74.34 74.34 0 0075.18 74.19c45.7 0 71.74-36.36 74.2-69.77 2.95-44.22-34.89-82.55-81.08-78.62-39.31 3.93-68.3 36.86-68.3 74.2zm-60.93 227v-26c0-32.43 13.27-64.37 32.92-85-64.36-28.5-136.1 18.67-136.1 88.45v22.6zm90.41-147.41a97.77 97.77 0 01-24.56-20.15A78 78 0 01152.81 271c4.92 2 9.34 3.93 13.76 5.9a128.3 128.3 0 0144.22-23.58zm90.41 0a128.26 128.26 0 0144.23 23.59 81.9 81.9 0 0113.76-5.9 78.56 78.56 0 01-33.42-37.84 80.4 80.4 0 01-24.57 20.15zm193.6 124.82a96.67 96.67 0 00-96.8-96.8 99.11 99.11 0 00-39.3 8.35c18.67 20.15 32.92 51.59 32.92 85v26H494.8z\"></path>\n      <path fill=\"none\" d=\"M0 0h512v512H0z\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar CloseCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"fill-rule\": \"evenodd\", \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm0 76c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm128.01 198.83c.03 0 .05.01.09.06l45.02 45.01a.2.2 0 01.05.09.12.12 0 010 .07c0 .02-.01.04-.05.08L557.25 512l127.87 127.86a.27.27 0 01.05.06v.02a.12.12 0 010 .07c0 .03-.01.05-.05.09l-45.02 45.02a.2.2 0 01-.09.05.12.12 0 01-.07 0c-.02 0-.04-.01-.08-.05L512 557.25 384.14 685.12c-.04.04-.06.05-.08.05a.12.12 0 01-.07 0c-.03 0-.05-.01-.09-.05l-45.02-45.02a.2.2 0 01-.05-.09.12.12 0 010-.07c0-.02.01-.04.06-.08L466.75 512 338.88 384.14a.27.27 0 01-.05-.06l-.01-.02a.12.12 0 010-.07c0-.03.01-.05.05-.09l45.02-45.02a.2.2 0 01.09-.05.12.12 0 01.07 0c.02 0 .04.01.08.06L512 466.75l127.86-127.86c.04-.05.06-.06.08-.06a.12.12 0 01.07 0z\" } }] }, \"name\": \"close-circle\", \"theme\": \"outlined\" };\nexport default CloseCircleOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport CloseCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/CloseCircleOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar CloseCircleOutlined = function CloseCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: CloseCircleOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  CloseCircleOutlined.displayName = 'CloseCircleOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(CloseCircleOutlined);","// This icon file is generated automatically.\nvar DownCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"down-circle\", \"theme\": \"outlined\" };\nexport default DownCircleOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport DownCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownCircleOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar DownCircleOutlined = function DownCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: DownCircleOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  DownCircleOutlined.displayName = 'DownCircleOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(DownCircleOutlined);","// This icon file is generated automatically.\nvar RobotOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"robot\", \"theme\": \"outlined\" };\nexport default RobotOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport RobotOutlinedSvg from \"@ant-design/icons-svg/es/asn/RobotOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar RobotOutlined = function RobotOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: RobotOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  RobotOutlined.displayName = 'RobotOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(RobotOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  UpCircleOutlined.displayName = 'UpCircleOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","hideHeader","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","unknownText","pt","en","Achievements","players","achievements","reference","getAnimationClass","level","map","achievement","index","type","icon","achievementObj","player","playerId","delay","length","id","title","avatarId","name","Boolean","description","content","value","shape","ImageBlurButton","cardId","ghost","useBlurCards","blurCard","isBlurEnabled","shouldBeBlurred","placement","onClick","EyeOutlined","EyeInvisibleOutlined","ImageBlurButtonContainer","position","rest","ImageCard","imageId","cardWidth","preview","previewImageId","fileExtension","baseUrl","useTDBaseUrl","fallbackName","imageURL","replace","isBlurred","booleanPreviewConfig","maskClassName","width","src","placeholder","fallback","PUBLIC_URL","ImageCardBack","ImageCardButton","buttonPosition","over","disabled","buttonText","buttonProps","isTop","iconComponent","DownCircleOutlined","UpCircleOutlined","buttonClassName","restButtonProps","button","ImageCardHand","hand","onSelectCard","selectButtonText","selectButtonIcon","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","selectedCards","cardClassName","useCardWidth","Math","max","minWidth","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","custom","CardHighlight","iconSize","PlayersHighlight","RulesIcon","props","xmlns","viewBox","fill","d","messageContent","duration","key","top","window","innerWidth","VideoGameControllerIcon","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","submitAction","httpsCallable","functions","BotHighlight","MetricHighlight","RobotIcon","PlayerHighlight","PlayerIcon","WordSelectionRules","scout","addressUser","GeneralRules","contained","DreamSelectionRules","hardModeEnabled","minimumDreams","DreamSelectionExtendedRules","CardPlayRules","PointsHighlight","BotsRules","StepWordSelection","onSubmitWord","words","fullWidth","align","word","wordId","LETTERS","text","state","info","useStep","step","goToNextStep","setStep","useWhichPlayerIsThe","isUserTheScout","translate","useLanguage","request","useAPICall","apiFunction","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitWordAPIRequest","phase","allowedPhase","PHASES","waitingRoom","round","onPressButton","time","circleColor","appearance","SleepIcon","onClose","currentRound","current","instruction","mockDreamSelection","cards","hardMode","countSource","numberOfCards","shuffle","slice","cardIndex","SelectTable","table","gap","maxWidth","card","CloseCircleOutlined","undefined","validateSelectedCards","v","Object","keys","StepDreamsSelection","onSubmitCards","botEnabled","announcement","useBooleanDictionary","dict","updateDict","selectedCount","useMock","cardsIds","RobotOutlined","label","SelectedDreams","user","values","meta","useUser","useOnSubmitCardsAPIRequest","DreamIcon","options","entry","withBots","PlayTable","onPlayCard","userCards","isPlayAvailable","isLoading","useLoading","userCardEntry","used","score","StarIcon","PlayersDreamsCount","playerInNightmareId","sortedPlayers","useMemo","sortPlayers","cardsLeft","filter","isPlayerInNightmare","showTooltip","fallen","speed","repeat","getAvatarColorById","infinite","open","alt","StepPlayDream","activePlayer","isActivePlayer","gameOrder","setLastTurnCount","message","App","useTemporarilyHidePlayersBar","useState","showedMessage","setShowedMessage","useEffect","order","activePlayerId","ListPlayers","listPlayers","MatchCount","matchCount","lastActivePlayer","playerInNightmare","isSpark","isSuperSpark","pluralize","keyPrefix","quantity","StepAnnounceDream","latest","matchedPlayers","reduce","acc","fallenMatchingPlayers","push","matchingPlayers","completedPlayers","skip","isPhaseOver","direction","onExpire","autoTriggerTime","lastTurnCount","useOnPlayCardAPIRequest","turnCount","DoorSignIcon","unskippable","NightmareIcon","animationType","RankIcon","ranking","gainedPointsDescriptions","BestMatches","bestMatches","orderBy","GameOverTable","announcementIcon","LadderIcon","achievementsReference","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseDreamsSelection","PhaseCardPlay","PhaseResolution","PhaseGameOver","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","MOST_MATCHES","FEWEST_MATCHES","MOST_FULL_MATCHES","MOST_VISITS","LEAST_ADVENTUROUS","MOST_ADVENTUROUS","MOST_PAIRS","MOST_OUT_OF_THE_BOX","MOST_LONELY","POOREST_CHOICES","SMARTEST_CHOICES","initialState","validation","setDict","isValid","s","dictCopy","reset","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser","cx","cy","r","ImageCardsIcon","PlayersIcon","ref","React","AntdIcon","_extends","CloseCircleOutlinedSvg","DownCircleOutlinedSvg","RobotOutlinedSvg","UpCircleOutlinedSvg"],"sourceRoot":""}