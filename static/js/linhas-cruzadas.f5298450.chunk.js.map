{"version":3,"file":"static/js/linhas-cruzadas.f5298450.chunk.js","mappings":"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","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/cards/Card.tsx","components/general/Achievements.tsx","components/metrics/MetricHighlight.tsx","components/metrics/TimeHighlight.tsx","components/timers/TimerClock.tsx","components/timers/TimerBar.tsx","components/timers/TimedTimerBar.tsx","components/timers/TimedTimerClock.tsx","games/linhas-cruzadas/utils/api-requests.ts","games/linhas-cruzadas/StepSelectPrompt.tsx","games/linhas-cruzadas/PhasePromptSelection.tsx","games/linhas-cruzadas/StepTimedDrawing.tsx","games/linhas-cruzadas/utils/constants.ts","games/linhas-cruzadas/PhaseDrawing.tsx","games/linhas-cruzadas/StepNameDrawing.tsx","games/linhas-cruzadas/PhaseNaming.tsx","games/linhas-cruzadas/components/Page.tsx","games/linhas-cruzadas/components/Album.tsx","games/linhas-cruzadas/StepAlbum.tsx","games/linhas-cruzadas/PhasePresentation.tsx","games/linhas-cruzadas/PhaseGameOver.tsx","games/linhas-cruzadas/SessionLinhasCruzadas.tsx","icons/AnimatedClockIcon.tsx"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\nimport { DragOutlined } from '@ant-design/icons';\n// State & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n\n/**\n * Fixed Menu Button for resizing canvas\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={1}\n      icon={<DragOutlined />}\n      label={labelText}\n      content={\n        <div className=\"canvas-resizer\">\n          <div className=\"canvas-resizer__label\">{labelText}</div>\n          <Slider\n            className=\"canvas-resizer__slider\"\n            value={canvasSize ?? 100}\n            min={150}\n            max={500}\n            step={50}\n            onChange={setCanvasSize}\n          />\n        </div>\n      }\n    />\n  );\n};\n\nconst labelText = <Translate pt=\"Tamanho das Artes\" en=\"Art Size\" />;\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  /**\n   * Lines drawn in the canvas\n   */\n  lines: CanvasLine[];\n  /**\n   * Function where any new version of the drawing is sent to\n   */\n  setLines: CanvasSetLine;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Show controls to undo, redo, or erase drawing. Default: false\n   */\n  showControls?: boolean;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   *\n   */\n  willReadFrequently?: boolean;\n};\n\n/**\n * Canvas drawing board using react-konva\n * It requires an array of lines and an setState function to save the lines\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n  width = 500,\n  height,\n  willReadFrequently = false,\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  /**\n   * Toggles off the isDrawing flag\n   */\n  const startDrawing = () => {\n    isDrawing.current = true;\n  };\n\n  /**\n   * Toggles off the isDrawing flag and resets history\n   */\n  const stopDrawing = () => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n  };\n\n  const startLine = (e: any) => {\n    startDrawing();\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const finishLine = (e: any) => {\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLineEntry);\n    setLines(lines.concat());\n  };\n\n  /**\n   * Start recording drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseDown = (e: any) => {\n    startLine(e);\n  };\n\n  /**\n   * Tracks mouse moving during the drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    if (isDrawing.current) {\n      stopDrawing();\n\n      finishLine(e);\n    }\n  };\n\n  /**\n   * Handles case when a current drawing is stopped off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseUp = () => {\n    stopDrawing();\n  };\n\n  /**\n   * Handles case when a current drawing is started off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseDown = () => {\n    startDrawing();\n  };\n\n  /**\n   * Handles when mouse leaves the stage\n   * @param e - konva mouse event\n   */\n  const handleMouseLeave = (e: any) => {\n    if (isDrawing.current) {\n      finishLine(e);\n\n      window.document.addEventListener('mouseup', handleOffsetMouseUp);\n      window.document.addEventListener('touchEnd', handleOffsetMouseUp);\n      window.document.addEventListener('mousedown', handleOffsetMouseDown);\n      window.document.addEventListener('touchStart', handleOffsetMouseDown);\n    }\n  };\n\n  /**\n   * Handles when mouse reenters the state\n   * @param e\n   */\n  const handleMouseEnter = (e: any) => {\n    if (isDrawing.current) {\n      startLine(e);\n    }\n    window.document.removeEventListener('mouseup', handleOffsetMouseUp);\n    window.document.removeEventListener('touchEnd', handleOffsetMouseUp);\n    window.document.removeEventListener('mousedown', handleOffsetMouseDown);\n    window.document.removeEventListener('touchStart', handleOffsetMouseDown);\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={width}\n        height={height || width}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onMouseEnter={handleMouseEnter}\n        className={clsx('drawing-canvas', className)}\n        style={{ width: `${width}px`, height: `${height || width}px` }}\n        willReadFrequently={willReadFrequently}\n        id=\"drawing-canvas\"\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Types\nimport type { AvatarSize } from 'antd/lib/avatar/AvatarContext';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { ClockIcon } from 'icons/ClockIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function TimeHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ClockIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { ReactNode } from 'react';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n  /**\n   * Minutes\n   */\n  minutes?: number;\n  /**\n   * Seconds\n   */\n  seconds: number;\n} & Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  minutes = 0,\n  seconds,\n}: TimerClockProps) {\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { Progress, ProgressProps } from 'antd';\n\ninterface TimerBarProps extends ProgressProps {\n  steps?: number;\n  value: number;\n  total: number;\n}\n\n/**\n * Time Bar presentational component used in timed operations\n * @param props\n * @returns\n */\nexport function TimerBar({\n  steps,\n  strokeLinecap,\n  total,\n  type = 'line',\n  value,\n  status = 'active',\n  ...props\n}: TimerBarProps) {\n  const percentage = 100 - (value * 100) / total;\n  return (\n    <Progress\n      percent={percentage}\n      steps={steps}\n      showInfo={false}\n      style={{ marginBottom: '1rem' }}\n      size={steps && steps > 30 ? 'small' : undefined}\n      type={type}\n      {...props}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Components\nimport { TimerBar } from './TimerBar';\n\ntype TimedTimerBarProps = {\n  /**\n   * Duration in seconds\n   */\n  duration: number;\n  /**\n   * Function executed when the time is up\n   */\n  onExpire: GenericFunction;\n  /**\n   * Number of ticks in the bar\n   */\n  steps?: number;\n  /**\n   * Type of bar. Default: line\n   */\n  type?: 'circle' | 'line' | 'dashboard';\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nexport function TimedTimerBar({ duration, onExpire, type, steps = 10, className }: TimedTimerBarProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n  });\n\n  return (\n    <div className={clsx('timer-number', className)}>\n      {timeLeft} <TimerBar steps={steps} value={timeLeft} total={duration} type={type} /> {timeLeft}\n    </div>\n  );\n}\n","import { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\nimport { useCountdown, useCountdownSettings } from 'hooks/useCountdown';\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { ReactNode } from 'react';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimedTimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n} & useCountdownSettings &\n  Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimedTimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  ...timerProps\n}: TimedTimerClockProps) {\n  const { minutes, seconds } = useCountdown({ ...timerProps });\n\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'linhasCruzadasSubmitAction');\n\nexport function useOnSubmitPromptAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-prompt',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Carta enviada com sucesso!', 'Card send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to submit the card'\n    ),\n  });\n\n  return (payload: SubmitPromptPayload) => {\n    request({\n      action: 'SUBMIT_PROMPT',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-guess',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Resposta enviado com sucesso!', 'Guess submitted successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua resposta',\n      'Oops, the application failed to submit your guess'\n    ),\n  });\n\n  return (payload: SubmitGuessPayload) => {\n    request({\n      action: 'SUBMIT_GUESS',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { shuffle } from 'utils/helpers';\n// Components\n\ntype StepSelectPromptProps = {\n  prompts: PromptCard[];\n  onSubmitPrompt: (props: SubmitPromptPayload) => void;\n};\n\nexport function StepSelectPrompt({ prompts, onSubmitPrompt }: StepSelectPromptProps) {\n  const { isLoading } = useLoading();\n\n  const onRandomSelect = () => {\n    onSubmitPrompt({ promptId: shuffle(prompts.map((prompt) => prompt.id))[0], randomSelection: true });\n  };\n\n  // DEV: Auto auto-select\n  useMock(onRandomSelect, []);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Seleção de Carta\" en=\"Card Selection\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione uma das cartas abaixo a ser usada no jogo\"\n          en=\"Select one of the cards below to be used in the game\"\n        />\n      </Instruction>\n\n      <div className=\"l-cards\">\n        {prompts.map((prompt) => {\n          return (\n            <TransparentButton\n              key={prompt.id}\n              onClick={() => onSubmitPrompt({ promptId: prompt.id })}\n              disabled={isLoading}\n            >\n              <Card>{prompt.text}</Card>\n            </TransparentButton>\n          );\n        })}\n      </div>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={onRandomSelect} disabled={isLoading} ghost>\n          <Translate pt=\"Escolha pra mim\" en=\"Select for me\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitPromptAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { ListIcon } from 'icons/ListIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepSelectPrompt } from './StepSelectPrompt';\n\nfunction PhasePromptSelection({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitPrompt = useOnSubmitPromptAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<ListIcon />}\n          title={<Translate pt=\"Seleção da Carta\" en=\"Card Selection\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={20}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Neste jogo, você recebe uma carta e a desenha, daí o próximo jogador tentar adivinhar o que\n                  é, daí o próximo jogador desenha a adivinhação, e por ai vai até seu album original voltar\n                  pra você.\n                  <br />\n                  Selecione a palavra a ser desenhada, talvez seja para você, talvez seja para um outro\n                  jogador.\n                </>\n              }\n              en={\n                <>\n                  In this game, you receive a prompt and will have to draw it, then the next player will\n                  attempt to guess your drawing, then the next player will draw the guess attempt, and so on\n                  until your album comes back to you.\n                  <br />\n                  Select a card to be drawn this round, it might be for you to draw or the next player... who\n                  knows?\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectPrompt prompts={user.prompts} onSubmitPrompt={onSubmitPrompt} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePromptSelection;\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n// Icons\nimport { AnimatedLoaderIcon } from 'icons/AnimatedLoaderIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { TimedTimerBar } from 'components/timers';\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\n\ntype StepTimedDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitDrawing: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepTimedDrawing({ currentPrompt, onSubmitDrawing, players }: StepTimedDrawingProps) {\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const onExpire = () => {\n    setTimesUp(true);\n    onSubmit();\n  };\n\n  const onSubmit = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(lines),\n    });\n\n  const author = players[currentPrompt.author];\n\n  return (\n    <Step>\n      <Card size=\"large\" header={author.name} color={AVATARS[author.avatarId].color}>\n        {currentPrompt.content}\n      </Card>\n      <TimedTimerBar steps={90} duration={DRAWING_TIME_IN_SECONDS} onExpire={onExpire} />\n      {isTimesUp ? (\n        <AnimatedLoaderIcon style={{ background: 'white', width: '250px', padding: '125px' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} showControls />\n      )}\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={() => onSubmit()} size=\"large\">\n          <Translate pt=\"Enviar desenho\" en=\"Submit drawing\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","export const DRAWING_TIME_IN_SECONDS = 120;\n\nexport const PAGE_DURATION = 7;\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n// Icons\nimport { DrawingIcon } from 'icons/DrawingIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepTimedDrawing } from './StepTimedDrawing';\nimport { TimeHighlight } from 'components/metrics/TimeHighlight';\n\nfunction PhaseDrawing({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.DRAWING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DrawingIcon />}\n          title={<Translate pt=\"Desenhe\" en=\"Draw\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          buttonText={<Translate pt=\"Um dó, lá, si... vamos e... já!\" en=\"Ready! Set! Go!\" />}\n          withoutTimer\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você receberá uma carta.\n                  <br />\n                  Desenhe-a da melhor maneira possível, você tem{' '}\n                  <TimeHighlight>{DRAWING_TIME_IN_SECONDS}</TimeHighlight> segundos.\n                </>\n              }\n              en={\n                <>\n                  You will receive a card.\n                  <br />\n                  Draw it the best way possible, you have{' '}\n                  <TimeHighlight>{DRAWING_TIME_IN_SECONDS}</TimeHighlight> seconds.\n                </>\n              }\n            />\n\n            <TurnOrder\n              title={<Translate pt=\"Ordem dos Álbuns\" en=\"Albums' Order\" />}\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepTimedDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitDrawing={onSubmitDrawing}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDrawing;\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\n\ntype StepNameDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitGuess: GenericFunction;\n  players: GamePlayers;\n  // for mock\n  user: GamePlayer;\n  round: GameRound;\n};\n\nexport function StepNameDrawing({\n  currentPrompt,\n  onSubmitGuess,\n  players,\n  user,\n  round,\n}: StepNameDrawingProps) {\n  const { translate } = useLanguage();\n  const [title, setTitle] = useState<string>('');\n\n  const author = players[currentPrompt.author];\n\n  const onTitleChange = (e: any) => setTitle(e.target.value);\n\n  const onSubmitTitle = () => onSubmitGuess({ guess: title });\n\n  // DEV: Auto write\n  useMock(() => onSubmitGuess({ guess: `${round.current}${user.id}` }), []);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"O que é isso?\" en=\"What is this?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={author} /> desenhou isso, o que é?\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={author} /> draw this, so what is it?\n            </>\n          }\n        />\n      </Instruction>\n\n      <CanvasSVG drawing={currentPrompt.content} className=\"l-drawing\" width={300} />\n\n      <Input\n        onChange={onTitleChange}\n        size=\"large\"\n        placeholder={translate('Escreva seu chute aqui', 'Write your guess here')}\n        className=\"l-drawing-guess-input\"\n        onPressEnter={onSubmitTitle}\n      />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={onSubmitTitle} size=\"large\" disabled={!title}>\n          <Translate pt=\"Enviar\" en=\"Submit name\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitGuessAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { WriteIdeaIcon } from 'icons/WriteIdeaIcon';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepNameDrawing } from './StepNameDrawing';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseNaming({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitGuess = useOnSubmitGuessAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.NAMING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<WriteIdeaIcon />}\n          title={<Translate pt=\"O que é isso?\" en=\"What is it?\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate pt=\"Tente adivinhar o que é a obra\" en=\"Try to guess what the artwork is\" />\n\n            <TurnOrder\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepNameDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitGuess={onSubmitGuess}\n          players={players}\n          user={user}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseNaming;\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { CanvasSVG } from 'components/canvas';\nimport { Avatar, AvatarName } from 'components/avatars';\n// Componentes\n\ntype PageProps = {\n  slide: LSlide;\n  players: GamePlayers;\n  albumColor: string;\n  currentPage: number;\n  totalSlides: number;\n};\n\nexport function Page({ slide, players, albumColor, currentPage, totalSlides }: PageProps) {\n  const author = players[slide.author];\n  const animationClass = useMemo(() => getAnimationClass('flipInY'), []);\n\n  return (\n    <div className=\"l-page\" style={{ background: slide.type === 'cover' ? albumColor : 0 }}>\n      <div className=\"l-page__pagination\">\n        <AntAvatar style={{ backgroundColor: albumColor }}>{currentPage + 1}</AntAvatar>\n        <span className=\"l-page__pagination-of\">\n          <Translate pt=\"de\" en=\"of\" />\n        </span>\n        <AntAvatar style={{ backgroundColor: albumColor }}>{totalSlides}</AntAvatar>\n      </div>\n\n      {slide.type === 'cover' && (\n        <div className={clsx('l-page__container', animationClass)} style={{ backgroundColor: albumColor }}>\n          <Avatar id={author.avatarId} size={96} />\n        </div>\n      )}\n\n      {slide.type === 'title' &&\n        (currentPage === 0 ? (\n          <div className={clsx('l-page__container', animationClass)}>\n            <Card>{slide.content}</Card>\n          </div>\n        ) : (\n          <div className={clsx('l-page__container l-page__text', animationClass)}>\"{slide.content}\"</div>\n        ))}\n\n      {slide.type === 'drawing' && (\n        <CanvasSVG\n          drawing={slide.content}\n          className={clsx('l-page__container l-artwork', animationClass)}\n          width={350}\n        />\n      )}\n\n      {slide.type !== 'cover' && (\n        <div className=\"l-page__author\">\n          <Translate pt=\"por \" en=\"by \" />\n          <AvatarName player={author} addressUser />\n        </div>\n      )}\n    </div>\n  );\n}\n","// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\nimport { Page } from './Page';\n\ntype AlbumProps = {\n  albumEntry: LAlbumEntry;\n  currentPage: number;\n  players: GamePlayers;\n};\n\nexport function Album({ albumEntry, currentPage, players }: AlbumProps) {\n  const albumOwner = players[albumEntry.id];\n  const albumColor = getAvatarColorById(albumOwner.avatarId);\n\n  return (\n    <div className=\"l-album\">\n      <h2 className=\"l-album__owner\" style={{ backgroundColor: albumColor }}>\n        <Avatar id={albumOwner.avatarId} size=\"large\" />{' '}\n        <Translate pt={<>Álbum de {albumOwner.name}</>} en={<>{albumOwner.name}'s Album</>} />\n      </h2>\n\n      <Page\n        slide={albumEntry.slides[currentPage]}\n        players={players}\n        albumColor={albumColor}\n        currentPage={currentPage}\n        totalSlides={albumEntry.slides.length}\n      />\n    </div>\n  );\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { PAGE_DURATION } from './utils/constants';\n// Components\nimport { VIPNextPhaseButton } from 'components/vip';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Album } from './components/Album';\n\ntype StepAlbumProps = {\n  players: GamePlayers;\n  album: LAlbumEntry[];\n};\n\nexport function StepAlbum({ players, album }: StepAlbumProps) {\n  useTemporarilyHidePlayersBar();\n  const [areControlsLocked, setAreControlsLocked] = useState(true);\n  const [currentEntry, setCurrentEntry] = useState(0);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [barSize, setBarSize] = useState(1);\n\n  const totalPages = useMemo(() => {\n    return album.reduce((total, albumEntry) => total + albumEntry.slides.length, 0);\n  }, [album]);\n\n  const totalTime = PAGE_DURATION * totalPages;\n\n  const { timeLeft, isRunning } = useCountdown({\n    duration: PAGE_DURATION * totalPages,\n    autoStart: true,\n    onExpire: () => setAreControlsLocked(false),\n  });\n\n  const currentAlbumEntry = album[currentEntry];\n  const currentAlbumLastPageIndex = (currentAlbumEntry?.slides?.length || 0) - 1;\n  const isLastAlbum = !Boolean(album[currentEntry + 1]);\n\n  // Control Functions\n  const onPrevAlbum = () => {\n    setCurrentEntry(currentEntry - 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  };\n  const onPrevPage = () => setCurrentPage((c) => c - 1);\n  const onNextPage = useCallback(() => {\n    setCurrentPage((c) => c + 1);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n  const onNextAlbum = useCallback(() => {\n    setCurrentEntry((c) => c + 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n\n  useEffect(() => {\n    if (isRunning && timeLeft < totalTime && timeLeft % PAGE_DURATION === 0) {\n      // If next page exists, go for it, otherwise, next album\n      if (currentPage < currentAlbumLastPageIndex) {\n        onNextPage();\n      } else if (!isLastAlbum) {\n        onNextAlbum();\n      }\n    }\n  }, [timeLeft, isRunning, currentAlbumLastPageIndex]); // eslint-disable-line\n\n  return (\n    <Step className=\"l-step-album\">\n      <Title>\n        <Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />\n      </Title>\n      {currentPage < 0 || !currentAlbumEntry ? (\n        <div className=\"a\">?</div>\n      ) : (\n        <Album albumEntry={currentAlbumEntry} currentPage={currentPage} players={players} />\n      )}\n      <div className=\"l-timer-bar\">\n        <span\n          className=\"l-timer-bar__pill\"\n          style={{\n            width: `${Math.abs((100 * barSize) / totalPages)}%`,\n            backgroundColor: 'gray',\n          }}\n        />\n      </div>\n      <Space className=\"space-container\" align=\"center\">\n        <Button disabled={areControlsLocked || currentEntry === 0} onClick={onPrevAlbum}>\n          Prev Album\n        </Button>\n        <Button disabled={areControlsLocked || currentPage === 0} onClick={onPrevPage}>\n          Prev Page\n        </Button>\n        <Button\n          disabled={areControlsLocked || currentPage === currentAlbumLastPageIndex}\n          onClick={onNextPage}\n        >\n          Next Page\n        </Button>\n        <Button disabled={areControlsLocked || isLastAlbum} onClick={onNextAlbum}>\n          Next Album\n        </Button>\n      </Space>\n      <VIPNextPhaseButton autoTriggerTime={0} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PhotoAlbumIcon } from 'icons/PhotoAlbumIcon';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepAlbum } from './StepAlbum';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhasePresentation({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PRESENTATION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PhotoAlbumIcon />}\n          title={<Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          duration={7}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate pt=\"A ordem dos albums será:\" en=\"The albums' order will be:\" />\n            <TurnOrder players={players} order={state.gameOrder} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepAlbum players={players} album={state.album} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePresentation;\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport achievementsReference from './utils/achievements';\n// Icons\nimport { TheEndIcon } from 'icons/TheEndIcon';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  const slideCount = Math.min(state.album[0]?.slides.length ?? 5, 8);\n  const cardWidth = useCardWidth(slideCount, { minWidth: 100 });\n\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<TheEndIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <ul className=\"l-album-strips\">\n        {state.album.map((albumEntry: LAlbumEntry) => (\n          <li key={`album-strip-${albumEntry.id}`} className=\"l-album-strip-entry\">\n            <div className=\"l-album-strip-entry__author\">\n              <AvatarName player={players[albumEntry.id]} />\n            </div>\n            <ul\n              className=\"l-album-strip\"\n              style={{ gridTemplateColumns: `repeat(${albumEntry.slides.length - 1}, 1fr)` }}\n            >\n              {albumEntry.slides.slice(1).map((slide) => {\n                const key = `slide-${albumEntry.id}-${slide.author}-${slide.type}`;\n\n                if (slide.type === 'title') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-text\" style={{ width: `${cardWidth}px` }}>\n                      {slide.content}\n                    </li>\n                  );\n                }\n\n                if (slide.type === 'drawing') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-drawing\">\n                      <CanvasSVG drawing={slide.content} width={cardWidth} />\n                    </li>\n                  );\n                }\n                return <></>;\n              })}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport PhasePromptSelection from './PhasePromptSelection';\nimport PhaseDrawing from './PhaseDrawing';\nimport PhaseNaming from './PhaseNaming';\nimport PhasePresentation from './PhasePresentation';\nimport PhaseGameOver from './PhaseGameOver';\n// Fonts\nimport 'assets/fonts/architects-daughter.scss';\n// Sass\nimport './linhas-cruzadas.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION:\n      return PhasePromptSelection;\n    case PHASES.LINHAS_CRUZADAS.DRAWING:\n      return PhaseDrawing;\n    case PHASES.LINHAS_CRUZADAS.NAMING:\n      return PhaseNaming;\n    case PHASES.LINHAS_CRUZADAS.PRESENTATION:\n      return PhasePresentation;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionInstrumentosCodificados() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.DEFAULT,\n          colorLink: THEME_COLORS.DEFAULT,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.LINHAS_CRUZADAS} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionInstrumentosCodificados;\n","export function AnimatedClockIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fbfbfb\"\n        d=\"M464 256c0 114.9-93.1 208-208 208S48 370.9 48 256 141.1 48 256 48s208 93.1 208 208z\"\n      ></path>\n      <path\n        fill=\"#e3effa\"\n        d=\"M464 256c0-114.9-93.2-208-208.1-207.9-67 0-130 32.4-169 86.9 93.4-66.9 223.3-45.4 290.2 47.9 51.9 72.4 51.9 169.8 0 242.3C431.7 386.1 464 323.1 464 256z\"\n      ></path>\n      <path\n        fill=\"#fcc369\"\n        d=\"M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm0 456c114.9 0 208-93.1 208-208S370.9 48 256 48 48 141.1 48 256s93.1 208 208 208z\"\n      ></path>\n      <path\n        fill=\"#ed9b52\"\n        d=\"M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 432c-114.9 0-208-93.1-208-208S141.1 48 256 48s208 93.1 208 208-93.1 208-208 208z\"\n      ></path>\n      <path d=\"M256 496c-132.5-.1-239.9-107.5-240-240 0-4.4-3.6-8-8-8s-8 3.6-8 8c0 141.4 114.6 256 256 256.1 109.6 0 207-69.7 242.4-173.5l-15.1-5.2C450.1 430.7 358.7 496 256 496zm0-496C133.8.1 28.6 86.6 4.8 206.5l15.7 3.1C46.3 79.5 172.6-5 302.6 20.7s214.6 152.1 188.8 282.1c-1 5.1-2.2 10.1-3.5 15.1l15.5 4.1c36.4-136.7-45-277-181.8-313.4C300.2 2.9 278.1 0 256 0zM18 225l-15.9-2c-.7 5.4-1.2 10.9-1.6 16.5l16 1c.3-5.2.8-10.4 1.5-15.5z\"></path>\n      <path d=\"M256 472c119.3 0 216-96.7 216-216S375.3 40 256 40 40 136.7 40 256c.1 119.2 96.8 215.9 216 216zm-8-415.8V88h16V56.2c104.1 4.3 187.5 87.7 191.8 191.8H424v16h31.8c-4.3 104.1-87.7 187.5-191.8 191.8V424h-16v31.8C143.9 451.5 60.5 368.1 56.2 264H88v-16H56.2C60.5 143.9 143.9 60.5 248 56.2z\"></path>\n\n      <g>\n        <path\n          fill=\"#555fa3\"\n          d=\"M273 141.6v114.24a15.55 15.55 0 01-3.68 10.16l-50.24 61.12a14.47 14.47 0 01-20.42 1.25 14.32 14.32 0 01-2.78-3.33 18.75 18.75 0 012.4-22.64l40.8-48.16A7.77 7.77 0 00241 249V141.6a16.07 16.07 0 1132-3 15.44 15.44 0 010 3z\"\n        ></path>\n        <path d=\"M206.6 339.94c.56 0 1.11.06 1.67.06a22.7 22.7 0 0016.95-7.83l50.31-61.05a24 24 0 005.47-15.26V141.6a24 24 0 10-48-3 25.69 25.69 0 000 3v107.47l-40.62 48a26.49 26.49 0 00-3.2 32.38 23.05 23.05 0 0017.42 10.49zm-2.18-32.34l40.8-48.18a16.1 16.1 0 003.78-10.36V141.6a8.14 8.14 0 1116 0v114.26a8 8 0 01-1.82 5.08l-50.05 60.76a6.37 6.37 0 01-5.32 2.28 7.05 7.05 0 01-5.29-3.39 10.81 10.81 0 011.89-13z\"></path>\n        <animateTransform\n          attributeName=\"transform\"\n          dur=\"2s\"\n          from=\"0 256 256\"\n          repeatCount=\"indefinite\"\n          to=\"360 256 256\"\n          type=\"rotate\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","type","position","icon","DragOutlined","label","labelText","content","className","value","min","max","step","onChange","pt","en","CanvasSVG","drawing","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","willReadFrequently","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","startDrawing","current","stopDrawing","startLine","e","pos","target","getStage","getPointerPosition","Math","round","finishLine","point","lastLineEntry","concat","splice","handleMouseDown","handleMouseMove","lastLine","handleMouseUp","handleOffsetMouseUp","handleOffsetMouseDown","direction","align","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onMouseLeave","window","document","addEventListener","onMouseEnter","removeEventListener","clsx","id","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","Card","children","header","footer","color","size","randomColor","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","startsWith","backgroundColor","unknownText","Achievements","players","achievements","reference","getAnimationClass","level","achievement","achievementObj","player","playerId","delay","title","avatarId","name","Boolean","description","shape","MetricHighlight","iconSize","iconPlacement","TimeHighlight","TimerClock","minutes","seconds","AnimatedClockIcon","TimerBar","steps","total","props","status","percentage","percent","showInfo","marginBottom","undefined","TimedTimerBar","duration","onExpire","timeLeft","useCountdown","autoStart","TimedTimerClock","timerProps","submitAction","httpsCallable","functions","StepSelectPrompt","prompts","onSubmitPrompt","isLoading","useLoading","onRandomSelect","promptId","shuffle","prompt","randomSelection","useMock","fullWidth","contained","text","ghost","state","info","useStep","goToNextStep","setStep","user","useUser","translate","useLanguage","request","useAPICall","apiFunction","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitPromptAPIRequest","phase","allowedPhase","PHASES","ListIcon","onClose","currentRound","StepTimedDrawing","currentPrompt","onSubmitDrawing","isTimesUp","setTimesUp","onSubmit","stringify","author","AVATARS","AnimatedLoaderIcon","background","padding","useOnSubmitDrawingAPIRequest","DrawingIcon","buttonText","withoutTimer","order","gameOrder","activePlayerId","reorderByUser","StepNameDrawing","onSubmitGuess","setTitle","onSubmitTitle","guess","placeholder","onPressEnter","useOnSubmitGuessAPIRequest","WriteIdeaIcon","Page","slide","albumColor","currentPage","totalSlides","animationClass","useMemo","addressUser","Album","albumEntry","albumOwner","getAvatarColorById","slides","StepAlbum","album","useTemporarilyHidePlayersBar","areControlsLocked","setAreControlsLocked","currentEntry","setCurrentEntry","setCurrentPage","barSize","setBarSize","totalPages","reduce","totalTime","isRunning","currentAlbumEntry","currentAlbumLastPageIndex","isLastAlbum","onNextPage","useCallback","c","s","onNextAlbum","useEffect","abs","autoTriggerTime","PhotoAlbumIcon","unskippable","slideCount","cardWidth","useCardWidth","minWidth","announcementIcon","TheEndIcon","T","achievementsReference","gridTemplateColumns","slice","key","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PhasePromptSelection","PhaseDrawing","PhaseNaming","PhasePresentation","PhaseGameOver","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","attributeName","dur","from","repeatCount","to"],"sourceRoot":""}