{"version":3,"file":"static/js/8668.6e234afc.chunk.js","mappings":"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","sources":["components/cards/ItemCard.tsx","components/image-cards/ImageBlurButton.tsx","components/image-cards/ImageBlurButtonContainer.tsx","components/image-cards/ImageCard.tsx","components/image-cards/ImageCardBack.tsx","components/image-cards/ImageCardButton.tsx","components/image-cards/ImageCardHand.tsx","components/image-cards/ImageCardPreloadHand.tsx","components/image-cards/ImageCardSelectButton.tsx","components/sprites/Sprite.tsx","icons/SkullIcon.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Components\nimport { DualTranslate } from 'components/language';\nimport { Sprite } from 'components/sprites';\n// Sass\nimport './ItemCard.scss';\n\nexport type ItemCardProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional text to display\n   */\n  text?: DualLanguageValue;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? Number.parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n};\n\n/**\n * An item card component.\n */\nexport function ItemCard({ id, width = 75, className, title, text, padding }: ItemCardProps) {\n  const [source, itemId] = getSource(id);\n\n  const height = text ? 'auto' : `${width}px`;\n  const divPadding = padding === 0 ? { padding: 0 } : {};\n\n  return (\n    <div className={clsx('item-card', className)} style={{ width: `${width}px`, height, ...divPadding }}>\n      <Sprite source={source} id={itemId} width={width} title={title} padding={padding} />\n      {!!text && (\n        <span className=\"item-card__text\">\n          <DualTranslate>{text}</DualTranslate>\n        </span>\n      )}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Tooltip } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n};\n\nexport function ImageBlurButton({ cardId, ghost = true }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost={ghost} onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Focus\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n// Internal\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer.scss';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The position of the button (default: bottom)\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  position = 'bottom',\n  ghost = true,\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {position === 'top' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n      {children}\n      {position === 'bottom' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { Image, type ImageProps } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Images\nimport placeholder from 'assets/images/placeholder.jpg';\n// Sass\nimport './ImageCard.scss';\n// Assets\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  cardWidth?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * Replacement image when the preview is open\n   */\n  previewImageId?: string;\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n  /**\n   * Forces height to be the same as the width\n   */\n  square?: boolean;\n  /**\n   * Use classic image library\n   */\n  classic?: boolean;\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  cardWidth = 200,\n  className = '',\n  preview = true,\n  previewImageId = '',\n  fileExtension = 'jpg',\n  square = false,\n  classic = false,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl(classic ? 'classic' : 'images');\n\n  const baseClass = 'image-card';\n\n  const { imageURL, fallbackName } = useMemo(() => {\n    const imageURL = id.replace(/-/g, '/');\n    const numId = Number(imageURL?.split('/')?.at(-1) ?? id[id.length - 1]) % 12;\n\n    const fallbackName = `placeholder-${numId}`;\n    return {\n      imageURL,\n      fallbackName,\n    };\n  }, [id]);\n\n  const isBlurred = shouldBeBlurred(id);\n\n  const previewConfig = typeof preview === 'boolean' ? {} : preview;\n\n  return (\n    <div\n      className={clsx(\n        baseClass,\n        isBlurred && `${baseClass}--blur`,\n        square && `${baseClass}--square`,\n        className,\n      )}\n      style={{ height: square ? `${cardWidth}px` : undefined }}\n    >\n      <Image\n        width={cardWidth}\n        src={`${baseUrl}/${imageURL}.${fileExtension}`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          isBlurred || !preview\n            ? false\n            : {\n                ...previewConfig,\n                maskClassName: clsx(`${baseClass}__preview-mask`, previewConfig?.maskClassName),\n                src: previewImageId\n                  ? `${baseUrl}/${previewImageId.replace(/-/g, '/')}.${fileExtension}`\n                  : previewConfig?.src,\n              }\n        }\n      />\n    </div>\n  );\n};\n","// Internal\nimport { ImageCard, type ImageCardProps } from './ImageCard';\n\ntype ImageCardBackProps = Omit<ImageCardProps, 'id'> & { id?: ImageCardId };\n\nexport const ImageCardBack = ({ id = 'back-default', ...rest }: ImageCardBackProps) => {\n  return <ImageCard id={id} {...rest} />;\n};\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n// Ant Design Resources\nimport { DownCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\nimport { Button, type ButtonProps } from 'antd';\n// Components\nimport { DebugOnly } from 'components/debug';\nimport { Translate } from 'components/language';\n// Internal\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './ImageCardButton.scss';\n//  Components\n\ntype ImageCardButtonProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The content, usually a ImageCard component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name for the container\n   */\n  className?: string;\n  /**\n   * The position of the button (default: top)\n   */\n  buttonPosition?: 'top' | 'bottom';\n  /**\n   * The button is over the image (default: false)\n   */\n  over?: boolean;\n  /**\n   * Button icon replacement\n   */\n  icon?: ReactNode;\n  /**\n   * The function to be called when the button is clicked\n   */\n  onClick?: (cardId: CardId) => void;\n  /**\n   * Disables the button (default: false)\n   */\n  disabled?: boolean;\n  /**\n   * The text for the button\n   */\n  buttonText?: ReactNode;\n  /**\n   * The props for the button\n   */\n  buttonProps?: Omit<ButtonProps, 'onClick' | 'disabled'>;\n  /**\n   * Hides button\n   */\n  hideButton?: boolean;\n};\n\nexport function ImageCardButton({\n  id,\n  children,\n  className = '',\n  buttonPosition = 'top',\n  over = false,\n  icon,\n  onClick,\n  disabled = false,\n  buttonText,\n  buttonProps = {},\n  hideButton = false,\n}: ImageCardButtonProps) {\n  const isTop = buttonPosition === 'top';\n\n  const iconComponent = icon ?? (isTop ? <DownCircleOutlined /> : <UpCircleOutlined />);\n\n  const { className: buttonClassName, ...restButtonProps } = buttonProps;\n\n  const button =\n    !hideButton && onClick ? (\n      <Button\n        shape=\"round\"\n        size=\"small\"\n        ghost={over}\n        className={clsx(\n          'image-card-button__button',\n          over && 'image-card-button__button--over',\n          over && `image-card-button__button--over-${buttonPosition}`,\n          buttonClassName,\n        )}\n        onClick={() => onClick(id)}\n        disabled={disabled}\n        {...restButtonProps}\n      >\n        {iconComponent}\n        {buttonText ?? <Translate pt=\"Selecionar\" en=\"Select\" />}\n        {iconComponent}\n      </Button>\n    ) : (\n      <></>\n    );\n\n  return (\n    <div className={clsx('image-card-button', className)}>\n      <ImageBlurButtonContainer cardId={id} position={buttonPosition === 'bottom' ? 'top' : 'bottom'}>\n        <DebugOnly>{id}</DebugOnly>\n        <div className=\"image-card-button__container\">\n          {isTop && button}\n          {children}\n          {!isTop && button}\n        </div>\n      </ImageBlurButtonContainer>\n    </div>\n  );\n}\n","import { ImageCard, ImageCardButton } from '.';\nimport clsx from 'clsx';\nimport { motion } from 'framer-motion';\nimport type { ReactNode, Ref } from 'react';\n// Ant Design Resources\nimport { type GetProps, Image, Space } from 'antd';\n// Hooks\nimport { useCardWidthByContainerRef } from 'hooks/useCardWidth';\n// Utils\nimport { getAnimation } from 'utils/animations';\n// Sass\nimport './ImageCardHand.scss';\n\ntype ImageCardHandProps = {\n  /**\n   * The list of card ids\n   */\n  hand: ImageCardId[];\n  /**\n   * Function to trigger when clicking on the select button\n   */\n  onSelectCard?: GenericFunction;\n  /**\n   * Select button custom label\n   */\n  selectButtonText?: ReactNode;\n  /**\n   * Select button custom icon\n   */\n  selectButtonIcon?: ReactNode;\n  /**\n   * Select button custom class\n   */\n  selectButtonClass?: string;\n  /**\n   * Disable select button\n   */\n  disabledSelectButton?: boolean;\n  /**\n   * Optional custom class name for the hand container\n   */\n  className?: string;\n  /**\n   * The size of the card\n   */\n  cardSize?: number;\n  /**\n   * If no card size is provided, the ratio is used instead to determine card size (default 8)\n   */\n  sizeRatio?: number;\n  /**\n   * Minimum width of a card (default 80)\n   */\n  minCardSize?: number;\n  /**\n   * Cache showing which cards have been selected and should be highlighted\n   */\n  selectedCards?: BooleanDictionary;\n  /**\n   * Custom card class\n   */\n  cardClassName?: string;\n  /**\n   * Enable preview (default: true)\n   */\n  preview?: boolean;\n  /**\n   * The Image group preview object\n   */\n  imageGroupPreview?: GetProps<typeof Image.PreviewGroup>['preview'];\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonText,\n  selectButtonIcon,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 110,\n  disabledSelectButton = false,\n  selectedCards = {},\n  cardClassName = '',\n  preview = true,\n  imageGroupPreview,\n}: ImageCardHandProps) {\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const [cardWidth, containerRef] = useCardWidthByContainerRef(Math.max(sizeRatio, 6), {\n    minWidth: minCardSize,\n  });\n\n  return (\n    <Image.PreviewGroup preview={imageGroupPreview}>\n      <Space className={clsx('image-card-hand', className)} ref={containerRef as Ref<HTMLDivElement>}>\n        {hand.map((cardId, index) => {\n          return (\n            <motion.div\n              key={`hand-${cardId}`}\n              className=\"image-card-hand__card-container\"\n              {...getAnimation('slideInUp', { delay: index / 10, ease: 'easeOut', duration: 0.5 })}\n            >\n              <ImageCardButton\n                onClick={onSelectCard}\n                id={cardId}\n                buttonProps={{ className: selectButtonClass }}\n                icon={selectButtonIcon}\n                buttonText={selectButtonText}\n                disabled={disabledSelectButton}\n              >\n                <ImageCard\n                  id={cardId}\n                  cardWidth={cardSize || cardWidth}\n                  className={clsx(selectedCards[cardId] && 'image-card-hand__selected', cardClassName)}\n                  preview={preview}\n                />\n              </ImageCardButton>\n            </motion.div>\n          );\n        })}\n      </Space>\n    </Image.PreviewGroup>\n  );\n}\n","// Internal\nimport { ImageCard } from './ImageCard';\n// Sass\nimport './ImageCardPreloadHand.scss';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard id={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCardId;\n  onClick: GenericFunction;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import { useQuery } from '@tanstack/react-query';\n// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\nimport { Spin, Tooltip } from 'antd';\n// Hooks\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const baseUrl = useTDBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/sprites/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - padding * 2;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","export function SkullIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#dbd9dc\"\n        d=\"M249.47 7.6C122.85 11.05 23.53 118.13 23.53 244.8v139.46a56.11 56.11 0 0056.12 56.11h40.08c8.85 0 16.03 7.18 16.03 16.03v24.05a24.05 24.05 0 0024.05 24.05h192.38a24.05 24.05 0 0024.05-24.05V456.4c0-8.85 7.18-16.03 16.03-16.03h40.08a56.11 56.11 0 0056.12-56.11v-144.3c0-130.55-107.63-235.97-239-232.37z\"\n      ></path>\n      <path\n        fill=\"#c9c6ca\"\n        d=\"M143.77 416.32a40.08 40.08 0 01-40.08-40.08V244.8C103.7 129.5 186 30.49 296.25 11a234.69 234.69 0 00-65.21-2.18C112.06 21.42 23.54 125.16 23.54 244.8v139.45a56.11 56.11 0 0056.1 56.11h40.09c8.85 0 16.03 7.18 16.03 16.03v24.05a24.05 24.05 0 0024.05 24.05h24.04v-48.1a40.08 40.08 0 00-40.08-40.08z\"\n      ></path>\n      <g fill=\"#867e88\">\n        <path d=\"M248.6 361.38l-25.41 61.42a8.02 8.02 0 0010.38 10.51l16.48-6.59a16.03 16.03 0 0111.9 0l16.48 6.6a8.02 8.02 0 0010.38-10.51l-25.4-61.42a8.02 8.02 0 00-14.82 0z\"></path>\n        <circle cx=\"151.79\" cy=\"288.06\" r=\"72.14\"></circle>\n      </g>\n      <path\n        fill=\"#6f6571\"\n        d=\"M151.79 247.99c34.33 0 63 24 70.3 56.1a72.2 72.2 0 001.85-16.02 72.14 72.14 0 10-144.3 0c0 5.51.68 10.87 1.85 16.03 7.3-32.12 35.97-56.12 70.3-56.12z\"\n      ></path>\n      <circle cx=\"360.21\" cy=\"288.06\" r=\"72.14\" fill=\"#867e88\"></circle>\n      <path\n        fill=\"#6f6571\"\n        d=\"M360.21 247.99c34.33 0 63 24 70.3 56.1a72.2 72.2 0 001.84-16.02 72.14 72.14 0 10-144.29 0c0 5.51.68 10.87 1.85 16.03 7.3-32.12 35.97-56.12 70.3-56.12zM238.14 396.95c5.7-2.28 11.71-3.44 17.86-3.44s12.15 1.16 17.86 3.44l5.1 2.04-15.55-37.6a8.02 8.02 0 00-14.82 0l-15.55 37.6 5.1-2.04z\"\n      ></path>\n      <path d=\"M476.45 145.01a239.16 239.16 0 00-53.12-77.05C376.5 22.4 314.68-1.7 249.26.1c-62.94 1.73-121.78 28.28-165.7 74.76A246.52 246.52 0 0016.03 244.8v139.46a63.68 63.68 0 0063.61 63.61h40.09c4.7 0 8.53 3.83 8.53 8.53v24.05A31.58 31.58 0 00159.8 512h192.38a31.58 31.58 0 0031.55-31.55V456.4c0-4.7 3.83-8.53 8.53-8.53h40.09a63.69 63.69 0 0063.6-63.61v-144.3c0-32.97-6.56-64.91-19.51-94.95zm4.52 239.25c0 26.8-21.81 48.61-48.62 48.61h-40.08a23.56 23.56 0 00-23.53 23.53v24.05c0 9.13-7.42 16.55-16.55 16.55h-8.53v-16.55a7.5 7.5 0 00-15 0V497h-25.08v-16.55a7.5 7.5 0 00-15 0V497H263.5v-16.55a7.5 7.5 0 00-15 0V497h-25.08v-16.55a7.5 7.5 0 00-15 0V497h-25.08v-16.55a7.5 7.5 0 00-15 0V497h-8.53a16.57 16.57 0 01-16.55-16.55v-24.04a23.56 23.56 0 00-23.53-23.54H79.65a48.67 48.67 0 01-48.62-48.61V244.81A231.57 231.57 0 0194.47 85.15c41.15-43.56 96.27-68.45 155.2-70.06 2.14-.06 4.26-.09 6.38-.09 58.97 0 114.45 22.49 156.82 63.71 43.91 42.73 68.1 100 68.1 161.26v144.29z\"></path>\n      <path d=\"M270.34 358.52a15.47 15.47 0 00-14.34-9.59c-6.3 0-11.93 3.76-14.34 9.59l-25.4 61.42a15.48 15.48 0 003.3 16.84c4.4 4.45 10.99 5.82 16.8 3.5l16.47-6.6a8.5 8.5 0 016.34 0l16.47 6.6a15.53 15.53 0 0016.8-3.5 15.49 15.49 0 003.3-16.84l-25.4-61.42zm11.43 67.71c-.23.25-.39.18-.55.12l-16.48-6.6a23.5 23.5 0 00-17.48 0l-16.48 6.6c-.16.06-.31.12-.55-.12-.25-.24-.18-.4-.11-.56l25.4-61.42c.07-.16.13-.32.48-.32s.4.16.48.32l25.4 61.42c.07.16.13.32-.1.56zM87.54 281.18a63.8 63.8 0 0118.54-38.83 63.8 63.8 0 0138.82-18.54 64.98 64.98 0 0141.26 9.56 7.5 7.5 0 108-12.7 80.06 80.06 0 00-50.83-11.77 79.7 79.7 0 00-47.86 22.85 79.71 79.71 0 00-22.85 47.86 80.04 80.04 0 0011.78 50.82 7.5 7.5 0 1012.7-7.99 64.98 64.98 0 01-9.56-41.26zm131.64-35.48a7.5 7.5 0 00-12.7 8 64.98 64.98 0 019.56 41.25 63.8 63.8 0 01-18.54 38.83 63.8 63.8 0 01-38.82 18.54 64.97 64.97 0 01-41.26-9.56 7.5 7.5 0 10-8 12.7 80.01 80.01 0 0050.83 11.78c18.02-1.9 35.02-10.02 47.86-22.86s20.95-29.83 22.85-47.86a80.04 80.04 0 00-11.78-50.82zm76.74 35.48a63.8 63.8 0 0118.54-38.83 63.8 63.8 0 0138.83-18.54 64.98 64.98 0 0141.26 9.56 7.5 7.5 0 108-12.7 80.06 80.06 0 00-50.83-11.77 79.7 79.7 0 00-47.86 22.85A79.71 79.71 0 00281 279.6a80.04 80.04 0 0011.78 50.82 7.5 7.5 0 1012.69-7.99 64.97 64.97 0 01-9.56-41.26zm118.95-27.48a64.98 64.98 0 019.56 41.25 63.8 63.8 0 01-18.54 38.83 63.8 63.8 0 01-38.83 18.54 64.97 64.97 0 01-41.26-9.56 7.5 7.5 0 10-7.99 12.7 80.01 80.01 0 0050.82 11.78c18.03-1.9 35.03-10.02 47.86-22.86s20.96-29.83 22.86-47.86a80.05 80.05 0 00-11.78-50.82 7.5 7.5 0 00-12.7 8z\"></path>\n    </svg>\n  );\n}\n"],"names":["getSource","str","match","numId","Number","parseInt","itemId","sourceId","Math","ceil","ItemCard","id","width","className","title","text","padding","source","height","divPadding","clsx","style","ImageBlurButton","cardId","ghost","useBlurCards","blurCard","isBlurEnabled","shouldBeBlurred","placement","pt","en","onClick","size","EyeOutlined","EyeInvisibleOutlined","ImageBlurButtonContainer","children","position","rest","ImageCard","cardWidth","preview","previewImageId","fileExtension","square","classic","baseUrl","useTDBaseUrl","baseClass","useMemo","imageURL","replace","split","at","length","fallbackName","isBlurred","previewConfig","undefined","src","placeholder","fallback","PUBLIC_URL","CARDS","maskClassName","ImageCardBack","ImageCardButton","buttonPosition","over","icon","disabled","buttonText","buttonProps","hideButton","isTop","iconComponent","DownCircleOutlined","UpCircleOutlined","buttonClassName","restButtonProps","button","shape","ImageCardHand","hand","onSelectCard","selectButtonText","selectButtonIcon","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","selectedCards","cardClassName","imageGroupPreview","useCardWidthByContainerRef","max","minWidth","containerRef","PreviewGroup","ref","map","index","div","getAnimation","delay","ease","duration","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","custom","Sprite","useQuery","queryKey","queryFn","fetch","response","enabled","isLoading","data","isError","paddedWidth","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","SkullIcon","props","xmlns","fill","d","cx","cy","r"],"sourceRoot":""}