{"version":3,"file":"static/js/7988.d6c51b65.chunk.js","mappings":"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","sources":["components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/debug/DebugOnly.tsx","components/debug/DevButton.tsx","components/general/GameBanner.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","components/phases/lobby/CloudBackground.tsx","components/auth/SignIn.tsx","components/auth/SignUp.tsx","components/phases/lobby/StepJoin.tsx","components/phases/lobby/LobbyStep.tsx","utils/speech.ts","hooks/useAddPlayer.ts","components/phases/lobby/AvatarSelection.tsx","components/phases/lobby/Settings.tsx","components/phases/lobby/StepInfo.tsx","components/phases/lobby/StepWaiting.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","hooks/useFirestoreDocument.ts","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","components/vip/VIPButton.tsx","components/vip/VIPOnlyContainer.tsx","components/vip/VIPNextPhaseButton.tsx","components/vip/VIPOnlyButton.tsx","hooks/useAPICall.ts","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","hooks/useVIP.ts","mock/players.ts","utils/phases.ts"],"sourcesContent":["// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\n// Utils\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const { isAdmin } = useCurrentUserContext();\n  const [usingEmulators] = useGlobalState('usingEmulators');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const meta = useGameMeta();\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'primary',\n            danger: true,\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.round.forceLastRound ||\n                    isLoading ||\n                    ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.round.forceLastRound\n                      ? 'This is already set as the last round'\n                      : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button target=\"_blank\" href={getFirebaseUrl(usingEmulators, meta.gameName, meta.gameId)}>\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { BugFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { DebugOnly } from './DebugOnly';\n\n/**\n * Button only available during dev only\n * @returns\n */\nexport function DevButton({ children, type, ...rest }: ButtonProps) {\n  return (\n    <DebugOnly devOnly>\n      <Button icon={<BugFilled />} type={type ?? 'primary'} {...rest}>\n        {children}\n      </Button>\n    </DebugOnly>\n  );\n}\n","// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <figure>\n      <Image\n        alt={title?.[language]}\n        src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        className={className}\n        preview={preview}\n      />\n    </figure>\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport clsx from 'clsx';\nimport { useKeyPressEvent } from 'react-use';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n// Sass\nimport './PhaseAnnouncement.scss';\n\ntype PhaseAnnouncementBasicProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\ntype PhaseAnnouncementBlock = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'block';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementOverlay = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'overlay';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementProps = PhaseAnnouncementBlock | PhaseAnnouncementOverlay;\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 3,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut')\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive\n              ? getAnimationClass(animationType, undefined, 'fast')\n              : getAnimationClass('bounceOut', undefined),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef.current?.offsetHeight, screenRef.current?.offsetWidth, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type }: { type: string; index?: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        backgroundPositionX: '0',\n      }}\n    ></div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","import { useQuery } from 'react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image } from 'antd';\n// API\nimport { signIn } from 'services/firebase';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\n// Sass\nimport './SignIn.scss';\nimport { useLanguage } from 'hooks/useLanguage';\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isLoading, refetch, isError } = useQuery({\n    queryKey: 'sign-in',\n    queryFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    enabled: false,\n    onSuccess: () => {\n      onSuccess();\n    },\n  });\n\n  const onFinish = () => {\n    refetch();\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Form\n        name=\"basic\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"Email\" en=\"Email\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n            <Translate pt=\"Enviar\" en=\"Submit\" />\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","import { useQuery } from 'react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image } from 'antd';\n// API\nimport { signUp } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\n// Sass\nimport './SignUp.scss';\n\ntype SignUpProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignUp({ onSuccess }: SignUpProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isLoading, refetch, isError } = useQuery({\n    queryKey: 'sign-up',\n    queryFn: async () => await signUp(form.getFieldValue('username'), form.getFieldValue('password')),\n    enabled: false,\n    onSuccess: () => {\n      onSuccess();\n    },\n  });\n\n  const onFinish = () => {\n    refetch();\n  };\n\n  return (\n    <div className=\"sign-up\">\n      <div className=\"sign-up__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Form\n        name=\"sign-up\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"Email\" en=\"Email\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Confirmar Senha\" en=\"Confirm Password\" />}\n          name=\"password-confirm\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-up__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n            <Translate pt=\"Enviar\" en=\"Submit\" />\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","import { useQuery } from 'react-query';\nimport { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Divider, Modal, Space } from 'antd';\n// API & Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Services\nimport { signInAsGuest } from 'services/firebase';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { SignIn } from 'components/auth/SignIn';\nimport { SignUp } from 'components/auth/SignUp';\n\ntype StepJoinProps = {\n  info: GameInfo;\n  setStep: GenericFunction;\n};\n\nexport function StepJoin({ info, setStep }: StepJoinProps) {\n  const { isAuthenticated } = useCurrentUserContext();\n\n  const { isLoading, refetch, isError, error } = useQuery({\n    queryKey: 'sign-in-anon',\n    queryFn: async () => signInAsGuest,\n    enabled: false,\n    onSuccess: () => setStep(1),\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setStep(1);\n    }\n  }, [isAuthenticated, setStep]);\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Bem-vindo!\" en=\"Welcome\" />\n      </h1>\n\n      {Boolean(info?.summary) && (\n        <p className=\"lobby-step__summary\">\n          <DualTranslate>{info.summary}</DualTranslate>\n        </p>\n      )}\n\n      <Button\n        type=\"primary\"\n        block\n        disabled={isAuthenticated || isLoading}\n        onClick={() => refetch()}\n        loading={isLoading}\n      >\n        <Translate pt=\"Entrar como convidado\" en=\"Join as a Guest\" />\n      </Button>\n\n      {isError && <Alert message=\"Error\" description={JSON.stringify(error)} type=\"error\" showIcon />}\n\n      <Divider>\n        <Translate pt=\"ou\" en=\"or\" />\n      </Divider>\n      <Space split={<Divider type=\"vertical\" />} className=\"lobby-step__space-buttons\" size=\"small\">\n        <LoginButton disabled={isAuthenticated || isLoading} setStep={setStep} />\n\n        <SignUpButton disabled={isAuthenticated || isLoading} setStep={setStep} />\n      </Space>\n    </>\n  );\n}\n\ntype LoginButtonProps = {\n  disabled: boolean;\n  setStep: GenericFunction;\n};\n\nfunction LoginButton({ disabled, setStep }: LoginButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          disabled: true,\n        }}\n      >\n        <SignIn onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Fazer Login\" en=\"Login\" />\n      </Button>\n    </div>\n  );\n}\n\ntype SignUpButtonProps = {\n  disabled: boolean;\n  setStep: GenericFunction;\n};\n\nfunction SignUpButton({ disabled, setStep }: SignUpButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Cadastro\" en=\"Sign Up Form\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          disabled: true,\n        }}\n      >\n        <SignUp onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Cadastrar\" en=\"Sign up\" />\n      </Button>\n    </div>\n  );\n}\n","import { GameBanner } from 'components/general/GameBanner';\nimport { ReactNode } from 'react';\n\ntype LobbyStepProps = {\n  info: GameInfo;\n  children: ReactNode;\n};\n\nexport function LobbyStep({ info, children }: LobbyStepProps) {\n  return (\n    <div className=\"lobby-step\">\n      <div className=\"lobby-step__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-step__banner\" />\n        <div className=\"lobby-step__content\">{children}</div>\n      </div>\n    </div>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { notification } from 'antd';\nimport { useQuery } from 'react-query';\n// Services\nimport localStorage from 'services/localStorage';\nimport { GAME_API } from 'services/adapters';\n// Hooks\nimport { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\nimport { useLanguage } from './useLanguage';\n// Utils\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n\nexport function useAddPlayer(name: string, avatarId: string, isGuest: boolean, onSuccess: GenericFunction) {\n  const { gameId, gameName } = useGameMeta();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume] = useGlobalState('volume');\n  const { language, translate } = useLanguage();\n\n  const query = useQuery({\n    queryKey: 'add-player',\n    queryFn: async () =>\n      await GAME_API.addPlayer({\n        gameId,\n        gameName,\n        playerName: name,\n        playerAvatarId: avatarId,\n        isGuest,\n      }),\n    enabled: false,\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n      setUserId(data.id);\n      setUsername(data.name);\n      setUserAvatarId(data.avatarId);\n\n      localStorage.set({\n        username: data.name,\n        avatarId: data.avatarId,\n        gameId,\n      });\n\n      if (volume) {\n        speak(getRandomWelcomeMessage(name ?? translate('vei', 'babe')), language, volume);\n      }\n\n      onSuccess();\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n  });\n\n  return query;\n}\n","import { useCallback, useMemo } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n// Components\nimport { DualTranslate } from 'components/language';\n\ntype AvatarSelectionProps = {\n  players: GamePlayers;\n  selectedAvatar: string;\n  setSelectedAvatar: GenericFunction;\n  userId: PlayerId;\n};\n\nexport function AvatarSelection({\n  players,\n  setSelectedAvatar,\n  selectedAvatar,\n  userId,\n}: AvatarSelectionProps) {\n  // Calculate available avatars and monitor if user chose a non-available one\n  const availableAvatars = useMemo(() => {\n    const usedAvatars = Object.values(players).reduce((acc: BooleanDictionary, { avatarId, id }) => {\n      if (id !== userId) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (!newAvailableAvatars.includes(selectedAvatar)) {\n      setSelectedAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    return newAvailableAvatars;\n  }, [players]); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  return (\n    <>\n      <div className=\"lobby-step__avatar-selection\">\n        <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretLeftOutlined />\n        </Button>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${selectedAvatar}`}></use>\n          <title>\n            <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n          </title>\n        </svg>\n        <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretRightOutlined />\n        </Button>\n      </div>\n      <div className=\"lobby-step__description\">\n        <small>\n          <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n        </small>\n      </div>\n    </>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Space, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { Translate } from 'components/language';\n\nexport function Settings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  useEffectOnce(() => {\n    setBlurEnabled(getLocalStorage('blurEnabled'));\n    setVolume(getLocalStorage('volume'));\n  });\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <Space className=\"lobby-step__settings\" split={<Divider type=\"vertical\" />}>\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Alguns jogos tocam sons ou falas. Você pode mudar essa configuração depois.\"\n                en=\"A few games will play sound effects or speech. You may change this setting later\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia. Você pode mudar essa configuração depois\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia. You may change this setting later\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n    </Space>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Input, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useAddPlayer } from 'hooks/useAddPlayer';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarSelection } from './AvatarSelection';\nimport { Settings } from './Settings';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype StepInfoProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  setStep: GenericFunction;\n};\n\nexport function StepInfo({ info, players, setStep }: StepInfoProps) {\n  const { currentUser, isGuest } = useCurrentUserContext();\n  const { translate } = useLanguage();\n  const [selectedAvatar, setSelectedAvatar] = useState(\n    currentUser.avatars?.[0] ?? getRandomItem(AVAILABLE_AVATAR_IDS)\n  );\n  const [name, setName] = useState((currentUser?.names ?? []).at(-1) ?? '');\n  const [getLocalStorage] = useLocalStorage();\n\n  // Load username and avatar from localStorage if any\n  useEffect(() => {\n    const lsAvatarId = getLocalStorage('avatarId');\n    const lsUsername = getLocalStorage('username');\n\n    if (isGuest) {\n      if (lsAvatarId !== undefined) {\n        setSelectedAvatar(lsAvatarId);\n      }\n\n      if (lsUsername) {\n        setName(lsUsername ?? '');\n      }\n    }\n  }, [isGuest]); // eslint-disable-line\n\n  const { isLoading, refetch } = useAddPlayer(name, selectedAvatar, isGuest, () => setStep(2));\n\n  const hasPlayedBefore = Boolean(currentUser.games?.[info.gameName]);\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Adicione seus dados\" en=\"Add your info\" />\n      </h1>\n\n      {hasPlayedBefore && (\n        <Alert\n          type=\"info\"\n          message={<Translate pt=\"Você jogou esse jogo anteriormente\" en=\"You played this game before\" />}\n        />\n      )}\n\n      <AvatarSelection\n        players={players}\n        setSelectedAvatar={setSelectedAvatar}\n        selectedAvatar={selectedAvatar}\n        userId={currentUser.id}\n      />\n\n      <Input\n        className=\"lobby-step__name-input\"\n        onChange={(e) => setName(e.target.value.trim())}\n        placeholder={translate('Digite seu nome', 'Insert your name')}\n        value={name || randomName}\n        maxLength={10}\n        suffix={\n          <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n            <InfoCircleOutlined />\n          </Tooltip>\n        }\n      />\n\n      <Settings />\n\n      <Button block disabled={isLoading} type=\"primary\" onClick={() => refetch()}>\n        <Translate pt=\"Entrar\" en=\"Enter\" />\n      </Button>\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useQuery } from 'react-query';\n// Ant Design Resources\nimport { Space, Typography, message, notification } from 'antd';\n// API & Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport { ADMIN_API } from 'services/adapters';\n// Components\nimport { Translate } from 'components/language';\nimport { VIPButton, VIPOnlyContainer } from 'components/vip';\n\ntype StepWaitingProps = {\n  players: GamePlayers;\n};\n\nexport function StepWaiting({ players }: StepWaitingProps) {\n  const { gameId, gameName } = useGameMeta();\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n\n  const gameMeta = useGameMeta();\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const { refetch, isLoading: isLocking } = useQuery({\n    queryKey: 'lock-game',\n    queryFn: async () => {\n      setLoader('lock-game', true);\n      return await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n    },\n    enabled: false,\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n\n      if (data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n    onSettled: () => {\n      setLoader('lock-game', false);\n    },\n  });\n\n  useEffect(() => {\n    setLoader('lock-game', isLocking);\n\n    return () => {\n      setLoader('lock-game', false);\n    };\n  }, [isLocking]); // eslint-disable-line\n\n  const numPlayers = Object.keys(players).length;\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">{username || translate('Fulano', 'Unknown')}</h1>\n\n      <Space className=\"space-container\">\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n      </Space>\n\n      <h3 className=\"lobby-heading\">\n        <Translate pt=\"Aguarde os outros jogadores entrarem.\" en=\"Please, wait while other players join...\" />\n      </h3>\n      <VIPOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n        <Typography.Text className=\"center padding\">\n          <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n        </Typography.Text>\n        <VIPButton\n          onClick={() => refetch()}\n          disabled={isLoading || numPlayers < gameMeta.min}\n          loading={isLoading}\n          block\n        >\n          <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n        </VIPButton>\n      </VIPOnlyContainer>\n    </>\n  );\n}\n","import { orderBy } from 'lodash';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useEffect } from 'react';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { resetGlobalState, useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { StepJoin } from './lobby/StepJoin';\nimport { LobbyStep } from './lobby/LobbyStep';\nimport { StepInfo } from './lobby/StepInfo';\nimport { StepWaiting } from './lobby/StepWaiting';\n// Sass\nimport './PhaseLobby.scss';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\ntype SplitPlayers = {\n  left: GamePlayer[];\n  right: GamePlayer[];\n};\n\nexport function PhaseLobby({ players, info }: PhaseLobbyProps) {\n  const { step, setStep } = useStep();\n  const { currentUser } = useCurrentUserContext();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n\n  const player = players?.[currentUser.id];\n\n  useEffect(() => {\n    if (player) {\n      setStep(2);\n      setUserId(player.id);\n      setUsername(player.name);\n      setUserAvatarId(player.avatarId);\n    } else {\n      setStep(1);\n      resetGlobalState();\n    }\n  }, [player, currentUser.id, setStep, setUserId, setUsername, setUserAvatarId]);\n\n  const { left, right } = orderBy(Object.values(players), 'updatedAt').reduce(\n    (acc: SplitPlayers, player, index) => {\n      if (index % 2 === 0) {\n        acc.left.push(player);\n      } else {\n        acc.right.push(player);\n      }\n\n      return acc;\n    },\n    {\n      left: [],\n      right: [],\n    }\n  );\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby\">\n        <div className=\"lobby__seating-area-left\">\n          {left.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                left: `${60 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"lobby__seating-area-right\">\n          {right.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                right: `${80 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <LobbyStep info={info}>\n          {step === 0 && <StepJoin info={info} setStep={setStep} />}\n          {step === 1 && <StepInfo info={info} players={players} setStep={setStep} />}\n          {step === 2 && <StepWaiting players={players} />}\n        </LobbyStep>\n      </div>\n\n      <AdminMenuDrawer\n        state={{ phase: 'LOBBY', round: { current: 0, total: 0, forceLastRound: false } }}\n        players={players}\n      />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\nimport { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\n// Ant Design Resources\nimport { Button, Layout, Space } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGameId } from 'hooks/useGameId';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  useEffectOnce(() => {\n    setIsAdminEnabled(true);\n  });\n\n  const gameId = useGameId();\n  // TODO: check if this is working\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: ['meta', gameId] });\n  }, [gameId]); // eslint-disable-line\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedGearIcon } from 'icons/AnimatedGearIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up...\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { Fragment, ReactNode, useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\nimport { reorder } from './reorder';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { WaitingRoomIcon } from 'icons/WaitingRoomIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n// Sass\nimport './WaitingRoom.scss';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <div className=\"waiting-room__content\">\n        <Instruction>\n          {Boolean(instruction) ? (\n            instruction\n          ) : (\n            <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n          )}\n        </Instruction>\n        {children}\n      </div>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse } from 'antd';\n// Components\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={<Translate pt=\"Regras\" en=\"Rules\" custom={title} />} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button, Space } from 'antd';\nimport { CarouselRef } from 'antd/es/carousel';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { createRef } from 'react';\nimport { Translate } from 'components/language';\nimport { useKeyPressEvent } from 'react-use';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <Space className={clsx('space-container', actionsClassName)}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <div className=\"rules-modal-content\">\n            <RulesCarousel info={gameInfo} />\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { UseQueryResult, useQuery } from 'react-query';\nimport { doc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\n/**\n * React hook that retrieves a Firestore document and provides the result as a query object.\n * @param docPath - The path to the Firestore document.\n * @param [subscribe=false] - Whether to subscribe to real-time updates on the document.\n * @returns A React Query object containing the document data.\n */\nexport function useFirestoreDocument(docPath: string, subscribe = false): UseQueryResult {\n  const docRef = doc(firestore, docPath);\n  const query = useQuery(docPath, async () => {\n    const snapshot = await getDoc(docRef);\n    return snapshot.data();\n  });\n\n  useEffect(() => {\n    if (subscribe) {\n      const unsubscribe = onSnapshot(docRef, () => {\n        query.refetch();\n      });\n\n      return () => unsubscribe();\n    }\n  }, [subscribe]); // eslint-disable-line\n\n  return query;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n// Ant Design Resource\nimport { Alert, Button, Checkbox, message, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { blurCard } = useBlurCards();\n\n  const {\n    loading,\n    error,\n    value: data,\n  } = useAsync(async () => {\n    const response = await fetch(`${process.env.REACT_APP_TDI_DATA_URL}/credo.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur all selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const { isAdmin } = useCurrentUserContext();\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n  onClick: GenericFunction;\n};\n\nexport function PlayersStatusBar({ players, onClick }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <button onClick={onClick} className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Badge dot color={player.ready ? 'green' : 'gray'}>\n                <Avatar\n                  id={player.avatarId}\n                  alt={player.name}\n                  size=\"small\"\n                  className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                />\n              </Badge>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </button>\n  );\n}\n","import { useToggle } from 'react-use';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Badge, Button, Divider, Drawer, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from 'components/players/PlayersStatusBar';\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Avatar } from 'components/avatars';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const { isAdmin, isAuthenticated, isGuest } = useCurrentUserContext();\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <PlayersStatusBar players={players} onClick={toggleDrawer} />\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{players?.[userId]?.name}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          <GameBanner\n            title={info?.title}\n            gameName={info.gameName}\n            preview={false}\n            className=\"round-corners\"\n          />\n\n          <Divider />\n\n          {isAuthenticated && !isGuest && (\n            <p>\n              <Badge size=\"default\" dot color=\"green\">\n                <Avatar id={players[userId].avatarId} shape=\"square\" size=\"small\" />\n              </Badge>{' '}\n              <Translate pt=\"Você está logado!\" en=\"You are logged in!\" />\n            </p>\n          )}\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\nimport { useGameMeta } from 'hooks/useGameMeta';\n// Utils\nimport GAME_LIST from 'utils/info';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype SessionProps = {\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameCollection, getActiveComponent }: SessionProps) {\n  const gameMeta = useGameMeta();\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameMeta.gameId, gameCollection);\n  const state = useGameState(gameMeta.gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { notification } from 'antd';\n// Hooks\nimport { useFirestoreDocument } from './useFirestoreDocument';\n// Utils\nimport { print } from 'utils/helpers';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): GamePlayers {\n  const docPath = `games/${gameName}/${gameId}/players`;\n\n  const { isLoading, isRefetching, isError, error, data } = useFirestoreDocument(docPath, true);\n\n  if (isError) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  const players = data ?? {};\n\n  useEffect(() => {\n    if (isLoading || isRefetching) {\n      console.count('Refreshing players...');\n    } else {\n      print(players, 'table');\n    }\n  }, [isLoading, isRefetching]); // eslint-disable-line\n\n  return players as GamePlayers;\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { notification } from 'antd';\n// Hooks\nimport { useFirestoreDocument } from './useFirestoreDocument';\n// Utils\nimport { print } from 'utils/helpers';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `games/${gameName}/${gameId}/state`;\n\n  const { isLoading, isRefetching, isError, error, data } = useFirestoreDocument(docPath, true);\n\n  if (isError) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  const state = data ?? {};\n\n  useEffect(() => {\n    if (isLoading || isRefetching) {\n      console.count('Refreshing state...');\n    } else {\n      print({ state });\n    }\n  }, [isLoading, isRefetching]); // eslint-disable-line\n\n  return state as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport function Step({\n  children,\n  announcement,\n  fullWidth = false,\n  fullHeight = false,\n  className = '',\n}: StepProps) {\n  return (\n    <div\n      className={clsx('step', fullWidth && 'step--full-width', fullHeight && 'step--full-height', className)}\n    >\n      {announcement}\n      {children}\n    </div>\n  );\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { print } from 'utils/helpers';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) print('SetSwitcher is being used without `players`, please add it.', 'warn');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || round.forceLastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong> {pluralize(left, 'rodada')} para o\n            jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level (default: 2)\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title (default: medium)\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 2, size = 'medium' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { RocketOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Sass\nimport './VIPButton.scss';\n\n/**\n * VIP Button (orange with rocket icon)\n * Important: This button is NOT guarded by VIPOnlyContainer, and it must be wrapped by it.\n */\nexport function VIPButton({ onClick, icon, disabled, className = '', ...rest }: ButtonProps) {\n  const { isLoading } = useLoading();\n\n  return (\n    <Button\n      icon={icon ?? <RocketOutlined />}\n      ghost\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      className={clsx('vip-button', className)}\n      {...rest}\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { RocketOutlined } from '@ant-design/icons';\n// Hooks\nimport { useVIP } from 'hooks/useVIP';\n// Sass\nimport './VIPOnlyContainer.scss';\n\ninterface VIPOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Custom label\n   */\n  label?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const VIPOnlyContainer = ({ children, label, className = '', ...rest }: VIPOnlyContainerProps) => {\n  const isVIP = useVIP();\n\n  if (!isVIP) return <></>;\n\n  return (\n    <fieldset className={clsx('vip-only-container', className)}>\n      <legend className=\"vip-only-container__legend\">\n        <RocketOutlined /> {label ?? 'VIP Controls'}\n      </legend>\n      <Space {...rest}>{children}</Space>\n    </fieldset>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { PauseOutlined, PlayCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { VIPOnlyContainer } from './VIPOnlyContainer';\nimport { VIPButton } from './VIPButton';\nimport { useVIP } from 'hooks/useVIP';\n\nfunction ButtonLabel({ round }: { round?: GameRound }) {\n  return !round || round.current === round.total || round.forceLastRound ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype VIPNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Time to auto trigger the button in seconds (default: 45 seconds)\n   */\n  autoTriggerTime?: number;\n};\n\n/**\n * Button only available to the VIP to go to the next phase.\n * It will be auto-triggered after 60 seconds unless value is overridden with a 0\n * It may be paused\n */\nexport function VIPNextPhaseButton({ round, autoTriggerTime = 45, children }: VIPNextPhaseButtonProps) {\n  const isVIP = useVIP();\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'go-to-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE });\n\n  const hasTimer = Boolean(autoTriggerTime);\n\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: autoTriggerTime,\n    autoStart: true,\n    onExpire: handleClick,\n    disabled: !isVIP ?? !hasTimer,\n  });\n\n  return (\n    <VIPOnlyContainer\n      label=\"VIP Action\"\n      className={clsx('vip-only-container--float', getAnimationClass('slideInUp'))}\n    >\n      <Tooltip title=\"Pause\">\n        <VIPButton\n          icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n          onClick={isRunning ? pause : resume}\n          disabled={isLoading}\n        />\n      </Tooltip>\n      <VIPButton\n        disabled={isLoading}\n        onClick={handleClick}\n        icon={\n          hasTimer && (\n            <span\n              className={clsx(\n                'vip-button-timer',\n                !isRunning && getAnimationClass('flash', undefined, 'slow', true)\n              )}\n            >\n              {timeLeft}\n            </span>\n          )\n        }\n      >\n        {children ?? <ButtonLabel round={round} />}\n      </VIPButton>\n    </VIPOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ButtonProps } from 'antd';\n// Components\nimport { VIPButton, VIPOnlyContainer } from './index';\n\ntype VIPOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  children: ReactNode;\n} & ButtonProps;\n\nexport function VIPOnlyButton({ onClick, children, ...buttonProps }: VIPOnlyButtonProps) {\n  return (\n    <VIPOnlyContainer>\n      <VIPButton onClick={onClick} {...buttonProps}>\n        {children}\n      </VIPButton>\n    </VIPOnlyContainer>\n  );\n}\n","import { message, notification } from 'antd';\nimport { HttpsCallable } from 'firebase/functions';\nimport { useMutation } from 'react-query';\n// Hooks\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\ntype useAPICallArgs = {\n  apiFunction: HttpsCallable<unknown, unknown>;\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\n/**\n * Wrapper around common firebase http call\n * @param data\n * @param data.apiFunction\n * @param [data.onBeforeCall] what to run before the api call\n * @param [data.onAfterCall] what to run after the api call\n * @param [data.onError] what to run if an error occurs\n * @param [data.onSuccess] what to run if success occurs\n * @param [data.actionName] the name used in the loader hook\n * @param [data.successMessage]\n * @param [data.errorMessage]\n * @returns\n */\n\n/**\n * Wrapper around common firebase http call\n * @param options\n * @returns\n */\nexport function useAPICall({\n  apiFunction,\n  actionName = 'api-action',\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: useAPICallArgs): (...args: any[]) => any {\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: {}) =>\n      apiFunction({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useCountdown } from './useCountdown';\nimport { useGlobalState } from './useGlobalState';\nimport { useVIP } from './useVIP';\n// Utils\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param requirements\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = [], requirements: any[] = []) {\n  const isVIP = useVIP();\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n\n  useEffect(() => {\n    if (!runOnce && isDevEnv && !isVIP && userId !== VIEWER_ID && requirements.every(Boolean)) {\n      setRunOnce(true);\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n\n/**\n * Runs mock function tht performs whatever after 3 seconds\n * @param whatToDo\n * @param requirements\n * @param delay (default a random value between 3-6 seconds)\n * @returns\n */\nexport function useDelayedMock(whatToDo: GenericFunction, requirements: any[] = [], delay?: number) {\n  const isVIP = useVIP();\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n  const duration = delay ?? getRandomItem([3, 4, 4, 5, 6]);\n\n  return useCountdown({\n    duration,\n    onExpire: () => {\n      if (!runOnce && isDevEnv && !isVIP && userId !== VIEWER_ID && requirements.every(Boolean)) {\n        whatToDo();\n        setRunOnce(true);\n      }\n    },\n    disabled: runOnce,\n  });\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","import { useEffect } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: GamePlayers, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","import { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Determine is user is the VIP by checking if they were the one who created the game.\n * @returns Returns true if the user is the VIP, false otherwise\n */\nexport function useVIP(): boolean {\n  const { createdBy } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  return createdBy === userId;\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Sam,Tim,Una,Vic,Will,Xavier,Yara,Zoe'.split(\n    ','\n  );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  let tries = 0;\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem) || tries < 50) {\n    randomItem = getRandomItem(source);\n    tries += 1;\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties: PlainObject | GenericFunction = {}\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length === quantity) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name: `${name}`,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...(typeof properties === 'function' ? properties() : properties),\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CAMINHOS_MAGICOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  COMUNICACAO_ALIENIGENA: {\n    ALIEN_SELECTION: 'ALIEN_SELECTION',\n    HUMAN_ASK: 'HUMAN_ASK',\n    ALIEN_ANSWER: 'ALIEN_ANSWER',\n    ALIEN_REQUEST: 'ALIEN_REQUEST',\n    OFFERINGS: 'OFFERINGS',\n    REVEAL: 'REVEAL',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TASK: 'TASK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    CHARACTER_FILTERING: 'CHARACTER_FILTERING',\n    CHARACTER_DESCRIPTION: 'CHARACTER_DESCRIPTION',\n    GUESSING: 'GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TA_NA_CARA: {\n    PROMPT: 'PROMPT',\n    ANSWERING: 'ANSWERING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VAMOS_AO_CINEMA: {\n    MOVIE_SELECTION: 'MOVIE_SELECTION',\n    MOVIE_ELIMINATION: 'MOVIE_ELIMINATION',\n    REVEAL: 'REVEAL',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n"],"names":["AdminPerformActionButton","label","props","icon","type","danger","className","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","isAdmin","useCurrentUserContext","useGlobalState","usingEmulators","isAdminEnabled","visible","setVisible","meta","useGameMeta","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","phase","round","forceLastRound","target","href","getFirebaseUrl","gameName","gameId","DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","DevButton","rest","BugFilled","GameBanner","preview","language","useLanguage","alt","src","PUBLIC_URL","fallback","PhaseAnnouncement","buttonText","currentRound","duration","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","useCountdown","autoStart","onExpire","clsx","getAnimationClass","autoFocus","custom","PhaseContainer","info","allowedPhase","fullScreen","white","translate","screenRef","useRef","setScreenSize","useEffect","current","height","offsetHeight","width","offsetWidth","description","baseClass","id","ref","SingleCloud","backgroundImage","backgroundPositionX","cloudData","MultiCloud","index","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","SignIn","onSuccess","useQuery","queryKey","queryFn","signIn","getFieldValue","enabled","refetch","isError","logo","labelCol","span","wrapperCol","maxWidth","remember","autoComplete","help","offset","showIcon","SignUp","signUp","StepJoin","setStep","isAuthenticated","signInAsGuest","error","Boolean","summary","block","loading","size","LoginButton","SignUpButton","setOpen","cancelText","onCancel","okButtonProps","LobbyStep","speak","text","volume","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis","useAddPlayer","avatarId","isGuest","setUserId","setUsername","setUserAvatarId","query","GAME_API","playerAvatarId","response","data","localStorage","username","getRandomItem","getRandomWelcomeMessage","onError","notification","console","AvatarSelection","setSelectedAvatar","selectedAvatar","userId","availableAvatars","useMemo","usedAvatars","newAvailableAvatars","AVAILABLE_AVATAR_IDS","onPreviousAvatar","useCallback","indexOf","newIndex","length","onNextAvatar","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","Settings","blurEnabled","setBlurEnabled","setVolume","useLocalStorage","getLocalStorage","setLocalStorage","useEffectOnce","shape","InfoCircleOutlined","checked","randomName","mockPlayerName","StepInfo","currentUser","names","at","setName","lsAvatarId","lsUsername","hasPlayedBefore","games","trim","placeholder","maxLength","suffix","StepWaiting","setLoader","gameMeta","userAvatarId","isLocked","onSettled","isLocking","numPlayers","direction","min","PhaseLobby","useStep","step","resetGlobalState","orderBy","left","right","PHASES","transform","top","animate","total","appearance","clouds","PhasePlaceholder","PhaseRules","user","useUser","setIsAdminEnabled","useGameId","queryClient","useQueryClient","invalidateQueries","onBeReady","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","startWith","starterIndex","slice","CollapsibleRule","contained","ghost","header","PopoverRule","content","showLabel","ReadOutlined","RulesCarousel","createRef","prev","autoplay","autoplaySpeed","rule","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","footer","useFirestoreDocument","docPath","subscribe","docRef","doc","firestore","getDoc","snapshot","unsubscribe","onSnapshot","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","count","score","BlurOptions","blurCard","useBlurCards","useAsync","fetch","process","json","result","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","selectedGroups","forEach","flat","SectionSettings","toggleDevFeatures","s","PlayersStatusBar","sortPlayers","dot","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","FireOutlined","Session","gameCollection","getActiveComponent","isRefetching","print","useGamePlayers","useGameState","setInfo","isIdle","useIdle","useIdleRedirect","useTitle","GAME_LIST","ActiveComponent","Step","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","conditions","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","Instruction","RoundsLeftInstruction","pluralize","TextHighlight","Title","level","VIPButton","RocketOutlined","VIPOnlyContainer","useVIP","ButtonLabel","VIPNextPhaseButton","autoTriggerTime","isVIP","onGoToNextPhase","handleClick","hasTimer","timeLeft","isRunning","pause","resume","PauseOutlined","PlayCircleOutlined","VIPOnlyButton","onBeforeCall","useMutation","mutationKey","mutationFn","onMutate","func","timer","timeout","args","clearTimeout","apply","debounce","mutate","blurredCards","setBlurredCards","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","whatToDo","requirements","runOnce","setRunOnce","VIEWER_ID","every","useDelayedMock","delay","startingStep","goToPreviousStep","ignore","setShowPlayersBar","setUser","setIsReady","updatedAt","online","Date","now","createdBy","DEV_NAMES","cacheNames","cacheAvatars","cacheMockedPlayers","getRandomUniqueItemFromList","source","used","cache","randomItem","tries","mockPlayers","quantity","properties","usedNames","neededQuantity","mockedPlayers","Array","fill","i","toLowerCase","newMockedPlayers","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CAMINHOS_MAGICOS","UNKNOWN","CINEGRAFISTAS_AMADORES","COMUNICACAO_ALIENIGENA","ALIEN_SELECTION","HUMAN_ASK","ALIEN_ANSWER","ALIEN_REQUEST","OFFERINGS","REVEAL","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","CLUE_WRITING","GUESSING","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TASK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","CHARACTER_FILTERING","CHARACTER_DESCRIPTION","RESULTS","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","TA_NA_CARA","PROMPT","ANSWERING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","QUESTIONING","TRIAL","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VAMOS_AO_CINEMA","MOVIE_SELECTION","MOVIE_ELIMINATION","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","TEMPLATE"],"sourceRoot":""}