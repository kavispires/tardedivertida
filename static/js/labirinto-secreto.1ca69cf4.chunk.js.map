{"version":3,"file":"static/js/labirinto-secreto.1ca69cf4.chunk.js","mappings":"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","sources":["components/cards/ItemCard.tsx","components/cards/Card.tsx","components/general/Achievements.tsx","components/general/Container.tsx","components/metrics/PointsHighlight.tsx","components/mouse/MouseFollowingContent.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx","components/slide-show/SlideShowControls.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/labirinto-secreto/utils/api-requests.ts","games/labirinto-secreto/utils/constants.ts","games/labirinto-secreto/utils/helpers.ts","games/labirinto-secreto/utils/mocks.ts","games/labirinto-secreto/components/TreeImage.tsx","games/labirinto-secreto/components/ForestTree.tsx","components/avatars/AvatarGroup.tsx","games/labirinto-secreto/components/Forest.tsx","hooks/useScreenWidth.ts","games/labirinto-secreto/components/Highlights.tsx","games/labirinto-secreto/components/MapBuilder.tsx","games/labirinto-secreto/StepBuildMap.tsx","games/labirinto-secreto/components/PlayerSelection.tsx","games/labirinto-secreto/StepBuildWait.tsx","games/labirinto-secreto/PhaseMapBuilding.tsx","games/labirinto-secreto/components/MapEntry.tsx","games/labirinto-secreto/components/PlayerMap.tsx","games/labirinto-secreto/components/ClickableForest.tsx","games/labirinto-secreto/StepFollowPath.tsx","games/labirinto-secreto/StepPathWaiting.tsx","games/labirinto-secreto/PhasePathFollowing.tsx","components/phases/PhaseWait.tsx","games/labirinto-secreto/StepRanking.tsx","games/labirinto-secreto/components/ResultsSummary.tsx","games/labirinto-secreto/StepGallery.tsx","games/labirinto-secreto/PhaseResults.tsx","games/labirinto-secreto/utils/achievements.ts","games/labirinto-secreto/PhaseGameOver.tsx","games/labirinto-secreto/SessionLabirintoSecreto.tsx","hooks/useSlideShow.ts","hooks/useWhichPlayerIsThe.ts","icons/AnimatedProcessingIcon.tsx","icons/DirectionsIcon.tsx","icons/MapIcon.tsx","icons/NoIcon.tsx","icons/PathIcon.tsx","icons/StarIcon.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Components\nimport { Sprite } from 'components/sprites';\n// Sass\nimport './ItemCard.scss';\nimport { DualTranslate } from 'components/language';\n\nexport type ItemCardProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional text to display\n   */\n  text?: DualLanguageValue;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n};\n\n/**\n * An item card component.\n */\nexport function ItemCard({ id, width = 75, className, title, text, padding }: ItemCardProps) {\n  const [source, itemId] = getSource(id);\n\n  const height = text ? 'auto' : `${width}px`;\n\n  return (\n    <div className={clsx('item-card', className)} style={{ width: `${width}px`, height }}>\n      <Sprite source={source} id={itemId} width={width} title={title} padding={padding} />\n      {Boolean(text) && (\n        <span className=\"item-card__text\">\n          <DualTranslate>{text!}</DualTranslate>\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  hideHeader?: boolean;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n  hideHeader = false,\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      {!hideHeader && (\n        <span\n          className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n          style={color.startsWith('#') ? { backgroundColor: color } : {}}\n        >\n          {header}\n        </span>\n      )}\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { Achievement, AchievementReference } from 'types/achievements';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  if (achievements.length === 0) return <></>;\n\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\n// Components\nimport { Title, TitleProps } from 'components/text';\n// Sass\nimport './Container.scss';\n\ntype ContainerProps = {\n  title: ReactNode;\n  children: ReactNode;\n  contained?: boolean;\n  className?: string;\n  titleProps?: Omit<TitleProps, 'children'>;\n  contentProps?: SpaceProps;\n} & Omit<SpaceProps, 'title' | 'children'>;\n\n/**\n * Container component with title and center aligned children\n */\nexport function Container({\n  title,\n  children,\n  className,\n  contained,\n  titleProps,\n  contentProps,\n  ...spaceProps\n}: ContainerProps) {\n  const { level = 4, size = 'xx-small', ...restTitleProps } = titleProps ?? {};\n\n  const {\n    className: childrenClassName,\n    wrap = true,\n    direction: childrenDirection = 'horizontal',\n    ...restChildrenContainerProps\n  } = contentProps ?? {};\n\n  return (\n    <Space direction=\"vertical\" className={clsx('container-wrapper', className)} {...spaceProps}>\n      <Title level={level} size={size} {...restTitleProps}>\n        {title}\n      </Title>\n\n      <Space\n        direction={childrenDirection}\n        wrap={wrap}\n        className={clsx(\n          'container-wrapper__children',\n          contained && 'container-wrapper__children--contained',\n          childrenClassName\n        )}\n        {...restChildrenContainerProps}\n      >\n        {children}\n      </Space>\n    </Space>\n  );\n}\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useRef } from 'react';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Sass\nimport './MouseFollowingContent.scss';\n\ntype MouseTrackedContentProps = {\n  /**\n   * The content to be rendered.\n   */\n  children: ReactNode;\n  /**\n   * Optional class name to be added to the `<div>` element.\n   */\n  className?: string;\n  /**\n   * Whether the content should be rendered or not.\n   */\n  active?: boolean;\n  /**\n   * Styles the wrapper div with a `contained` class.\n   */\n  contained?: boolean;\n};\n\n/**\n * A React component that renders a `<div>` element that follows the mouse cursor within the browser window.\n */\nexport function MouseFollowingContent({\n  children,\n  className = '',\n  contained = false,\n  active,\n}: MouseTrackedContentProps) {\n  if (!active) {\n    return <></>;\n  }\n\n  return (\n    <MouseFollowingContentInternal className={className} contained={contained}>\n      {children}\n    </MouseFollowingContentInternal>\n  );\n}\n\nfunction MouseFollowingContentInternal({\n  children,\n  contained,\n  className = '',\n}: Partial<MouseTrackedContentProps>) {\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (divRef.current) {\n        divRef.current.style.left = e.clientX + 16 + 'px';\n        divRef.current.style.top = e.clientY + 16 + 'px';\n      }\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={divRef}\n      className={clsx(\n        'mouse-following-content',\n        contained && 'mouse-following-content--contained',\n        getAnimationClass('bounceIn'),\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { LegacyRef, ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce, useMeasure } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRanking } from 'types/game';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Helpers\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [ref, { height }] = useMeasure();\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className={clsx(\n        'ranking-board',\n        seconds > 4 && 'ranking-board--hidden',\n        seconds === 4 && getAnimationClass('fadeIn')\n      )}\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      <div\n        className=\"ranking-board__row\"\n        id=\"ranking-row-placeholder\"\n        style={{ opacity: 0 }}\n        ref={ref as LegacyRef<HTMLDivElement>}\n      >\n        <div className=\"ranking-board__cell-crown\">\n          <CrownFilled className=\"ranking-board__crown-icon\" />\n        </div>\n        <div className=\"ranking-board__cell-position\">#0</div>\n        <div className=\"ranking-board__cell-player\">\n          <div className=\"ranking-board__avatar\">\n            <Avatar id=\"A\" />\n          </div>\n          <div className=\"ranking-board__name\">Placeholder</div>\n        </div>\n        <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n          <div className=\"ranking-board__cell-points\">0</div>\n        </Tooltip>\n\n        <GainedPoints gainedPoints={0} playerId=\"A\" />\n\n        <Tooltip title=\"Total\" color=\"gold\">\n          <span className=\"ranking-board__cell-points-total\">0</span>\n        </Tooltip>\n      </div>\n\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            // id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRanking } from 'types/game';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n  /**\n   * Whether the title should be white or not\n   */\n  white?: boolean;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n  white,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title white={white}>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { UseStep } from 'hooks/useStep';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: UseStep['setStep'];\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n};\n\nexport function SlideShowControls({\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor = 'gray',\n  windowDuration = 10,\n}: SlideShowControlsProps) {\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: windowDuration * length,\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  // Automatically go to the next window every {windowDuration} seconds\n  useEffect(() => {\n    if (timeLeft < windowDuration * length && timeLeft > 0 && timeLeft % windowDuration === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n    }\n  }, [timeLeft, setActiveIndex, length, windowDuration]);\n\n  const goToPreviousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n  };\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">\n          {Array(length)\n            .fill('')\n            .map((e, i) => {\n              return (\n                <div\n                  key={`control-timer-bar-${e + i}`}\n                  className=\"slide-show__controls-timer-bar-node\"\n                  style={{ width: `${99 / length}%` }}\n                >\n                  {e}\n                </div>\n              );\n            })}\n        </div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${Math.abs((windowDuration * timeLeft) / length - 100)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={goToPreviousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Anterior\" en=\"Previous\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={goToNextStep}\n            disabled={disableControls || activeIndex === length - 1}\n          >\n            <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import type { SubmitMapPayload, SubmitPathGuessPayload } from './types';\nimport type { UseStep } from 'hooks/useStep';\nimport { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'labirintoSecretoSubmitAction');\n\nexport function useOnSubmitMapAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-map',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Mapa submetido com sucesso', 'Map submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu mapa',\n      'Oops, the application found an error while trying to submit your map'\n    ),\n  });\n\n  return (payload: SubmitMapPayload) => {\n    request({\n      action: 'SUBMIT_MAP',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitPathAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-path',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Caminho submetido com sucesso', 'Path submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu caminho',\n      'Oops, the application found an error while trying to submit your path'\n    ),\n  });\n\n  return (payload: SubmitPathGuessPayload) => {\n    request({\n      action: 'SUBMIT_PATH',\n      ...payload,\n    });\n  };\n}\n","import { Direction } from './types';\n\nexport const FOREST_WIDTH = 7;\nexport const FOREST_HEIGHT = 5;\n\nexport const DIRECTIONS: Record<string, Direction> = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n  UP_LEFT: 'UP_LEFT',\n  UP_RIGHT: 'UP_RIGHT',\n  DOWN_LEFT: 'DOWN_LEFT',\n  DOWN_RIGHT: 'DOWN_RIGHT',\n};\n\nexport const PAGE_DURATION = 15;\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { Direction, MapSegment, PlayerMapping, Point, TreeId } from './types';\n// Utils\nimport { DIRECTIONS, FOREST_HEIGHT, FOREST_WIDTH } from './constants';\n\n/**\n * Check if a point is on the edge of the forest\n * @param point - point to check\n * @returns - true if point is on the edge\n */\nexport const checkEdge = (point: Point): boolean => {\n  const [x, y] = point;\n  if (x === 0 || x === FOREST_WIDTH - 1 || y === 0 || y === FOREST_HEIGHT - 1) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Get the index of a point in the forest\n * @param point - point to get index of\n * @returns - index of point\n */\nexport const getIndex = (point: Point): number => {\n  const [x, y] = point;\n  return x + y * FOREST_WIDTH;\n};\n\n/**\n * Get the point of an index in the forest\n * @param index\n * @returns\n */\nexport const getPoint = (index: number): Point => {\n  const x = index % FOREST_WIDTH;\n  const y = Math.floor(index / FOREST_WIDTH);\n  return [x, y];\n};\n\nexport const getOriginDirection = (index: TreeId): Direction | null => {\n  const point = getPoint(index);\n  const [x, y] = point;\n  if (x === 0) return DIRECTIONS.LEFT;\n  if (x === FOREST_WIDTH - 1) return DIRECTIONS.RIGHT;\n  if (y === 0) return DIRECTIONS.UP;\n  if (y === FOREST_HEIGHT - 1) return DIRECTIONS.DOWN;\n  return null;\n};\n\nexport const getDirection = (from: TreeId, to: TreeId): Direction => {\n  const [fromX, fromY] = getPoint(from);\n  const [toX, toY] = getPoint(to);\n  const result = toX - fromX + (toY - fromY) * FOREST_WIDTH;\n  if (result === 1) return DIRECTIONS.RIGHT;\n  if (result === -1) return DIRECTIONS.LEFT;\n  if (result === FOREST_WIDTH) return DIRECTIONS.DOWN;\n  if (result === -FOREST_WIDTH) return DIRECTIONS.UP;\n  if (result === FOREST_WIDTH + 1) return DIRECTIONS.DOWN_RIGHT;\n  if (result === FOREST_WIDTH - 1) return DIRECTIONS.DOWN_LEFT;\n  if (result === -FOREST_WIDTH + 1) return DIRECTIONS.UP_RIGHT;\n  if (result === -FOREST_WIDTH - 1) return DIRECTIONS.UP_LEFT;\n  return DIRECTIONS.UP;\n};\n\n/**\n * Get the available segments from a tree\n * @param origin - the origin tree Id\n * @param usedIndexes any other tree Ids that are already used\n * @returns - the available tree Ids\n */\nexport const getAvailableSegments = (origin: TreeId, usedIndexes: TreeId[]): TreeId[] => {\n  const [x, y] = getPoint(origin);\n  const available: Point[] = [];\n  // Top\n  const top: Point = [x, y - 1];\n  const topIndex = getIndex(top);\n  if (top[1] >= 0 && !usedIndexes.includes(topIndex)) {\n    available.push(top);\n  }\n  // Right\n  const right: Point = [x + 1, y];\n  const rightIndex = getIndex(right);\n  if (right[0] < FOREST_WIDTH && !usedIndexes.includes(rightIndex)) {\n    available.push(right);\n  }\n  // Down\n  const down: Point = [x, y + 1];\n  const downIndex = getIndex(down);\n  if (down[1] < FOREST_HEIGHT && !usedIndexes.includes(downIndex)) {\n    available.push(down);\n  }\n  // Left\n  const left: Point = [x - 1, y];\n  const leftIndex = getIndex(left);\n  if (left[0] >= 0 && !usedIndexes.includes(leftIndex)) {\n    available.push(left);\n  }\n  // Top-Left\n  const topLeft: Point = [x - 1, y - 1];\n  const topLeftIndex = getIndex(topLeft);\n  if (topLeft[0] >= 0 && topLeft[1] >= 0 && !usedIndexes.includes(topLeftIndex)) {\n    available.push(topLeft);\n  }\n  // Top-Right\n  const topRight: Point = [x + 1, y - 1];\n  const topRightIndex = getIndex(topRight);\n  if (topRight[0] < FOREST_WIDTH && topRight[1] >= 0 && !usedIndexes.includes(topRightIndex)) {\n    available.push(topRight);\n  }\n  // Down-Left\n  const downLeft: Point = [x - 1, y + 1];\n  const downLeftIndex = getIndex(downLeft);\n  if (downLeft[0] >= 0 && downLeft[1] < FOREST_HEIGHT && !usedIndexes.includes(downLeftIndex)) {\n    available.push(downLeft);\n  }\n  // Down-Right\n  const downRight: Point = [x + 1, y + 1];\n  const downRightIndex = getIndex(downRight);\n  if (downRight[0] < FOREST_WIDTH && downRight[1] < FOREST_HEIGHT && !usedIndexes.includes(downRightIndex)) {\n    available.push(downRight);\n  }\n  return available.map((point) => getIndex(point));\n};\n\n/**\n * Get the possible tree Ids for the next segment\n * @param fullMap - the full map of segments\n * @param currentSegment - the current segment\n */\nexport const getPossibleTreeIds = (fullMap: MapSegment[], currentSegment?: MapSegment): TreeId[] => {\n  if (!currentSegment) return [];\n\n  const usedTrees = fullMap.filter((segment) => segment.passed).map((segment) => segment.treeId);\n\n  return getAvailableSegments(currentSegment.previousTree ?? currentSegment.treeId, usedTrees).filter(\n    (treeId) => treeId !== currentSegment.treeId\n  );\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing players that have passed through a tree\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildPlayerMapping = (players: GamePlayers, activePlayer: GamePlayer): PlayerMapping => {\n  // Segments that are active for the current player's map\n  const currentMap = activePlayer.map as MapSegment[];\n  const activeSegments = currentMap.filter((segment) => segment.active);\n\n  const playerMapping: PlayerMapping = {};\n\n  if (activeSegments[0].index > 0) {\n    const startingSegment = currentMap[activeSegments[0].index - 1];\n    playerMapping[startingSegment.treeId] = Object.keys(players).filter(\n      (playerId) => playerId !== activePlayer.id\n    );\n  }\n\n  Object.values(players).forEach((player) => {\n    const historyEntry = player.history[activePlayer.id];\n    if (historyEntry) {\n      activeSegments.forEach((segment, index, arr) => {\n        const treeIds: TreeId[] = historyEntry[segment.index];\n\n        if (treeIds) {\n          // The last segment should display every player that has passed through it\n          if (index === arr.length - 1) {\n            treeIds.forEach((treeId) => {\n              if (playerMapping[treeId] === undefined) {\n                playerMapping[treeId] = [];\n              }\n              playerMapping[treeId].push(player.id);\n            });\n          } else {\n            // Any other segment, only show the latest try\n            const lastTreeId = treeIds?.[treeIds.length - 1];\n            if (playerMapping[lastTreeId] === undefined) {\n              playerMapping[lastTreeId] = [];\n            }\n            playerMapping[lastTreeId].push(player.id);\n          }\n        }\n      });\n    }\n  });\n\n  return playerMapping;\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing what trees the user has tried in the latest segment\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildUserMappingForLatestTree = (\n  user: GamePlayer,\n  currentMap: MapSegment[],\n  activePlayerId: PlayerId\n): PlayerMapping => {\n  // Segments that are active for the current player's map\n\n  const activeSegment = currentMap[0];\n\n  const playerMapping: PlayerMapping = {};\n\n  const historyEntry = user.history[activePlayerId];\n  if (historyEntry) {\n    const treeIds: TreeId[] = historyEntry[activeSegment.index];\n\n    if (treeIds) {\n      treeIds.forEach((treeId) => {\n        if (playerMapping[treeId] === undefined) {\n          playerMapping[treeId] = [];\n        }\n        playerMapping[treeId].push(user.id);\n      });\n    }\n  }\n\n  return playerMapping;\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing where players made a mistake\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildPlayerMappingForLatestTree = (\n  players: GamePlayers,\n  activePlayer: GamePlayer\n): PlayerMapping => {\n  // Segments that are active for the current player's map\n  const currentMap = (activePlayer.map ?? []) as MapSegment[];\n  const activeSegments = currentMap.filter((segment) => !segment.passed);\n\n  const playerMapping: PlayerMapping = {};\n\n  Object.values(players).forEach((player) => {\n    const historyEntry = player.history[activePlayer.id];\n    if (historyEntry) {\n      activeSegments.forEach((segment, index, arr) => {\n        const treeIds: TreeId[] = historyEntry[segment.index];\n\n        if (treeIds) {\n          // The last segment should display every player that has passed through it\n          if (index === arr.length - 1) {\n            treeIds.forEach((treeId) => {\n              if (playerMapping[treeId] === undefined) {\n                playerMapping[treeId] = [];\n              }\n              playerMapping[treeId].push(player.id);\n            });\n          } else {\n            // Any other segment, only show the latest try\n            const lastTreeId = treeIds?.[treeIds.length - 1];\n            if (playerMapping[lastTreeId] === undefined) {\n              playerMapping[lastTreeId] = [];\n            }\n            playerMapping[lastTreeId].push(player.id);\n          }\n        }\n      });\n    }\n  });\n\n  return playerMapping;\n};\n","import { sampleSize, union } from 'lodash';\n// Types\nimport type { ExtendedTextCard, MapSegment, TreeId } from './types';\n// Utils\nimport { getAvailableSegments } from './helpers';\nimport { getRandomItem } from 'utils/helpers';\n\nexport const mockNewMap = (hand: ExtendedTextCard): ExtendedTextCard[] => {\n  return sampleSize<ExtendedTextCard>(hand, 3).map((card) => ({\n    ...card,\n    negate: Math.random() > 0.75,\n  }));\n};\n\nexport const mockFollowedPath = (\n  fullMap: MapSegment[],\n  currentMap: MapSegment[],\n  increaseChances: boolean = false,\n  previousMistakes: TreeId[] = []\n) => {\n  const usedTrees = union(\n    fullMap.filter((segment: MapSegment) => segment.passed).map((segment: MapSegment) => segment.treeId),\n    previousMistakes\n  );\n\n  return currentMap.map((segment) => {\n    const possibilities = getAvailableSegments(usedTrees[usedTrees.length - 1], usedTrees);\n    const correctTreeId = segment.treeId;\n    const choice = increaseChances\n      ? getRandomItem([...possibilities, correctTreeId])\n      : getRandomItem(possibilities);\n    usedTrees.push(choice);\n    return choice;\n  });\n};\n","import { Tooltip } from 'antd';\nimport clsx from 'clsx';\nimport { getSource } from 'components/cards/ItemCard';\nimport { TreeCard } from 'components/cards/TreeCard';\nimport { Sprite } from 'components/sprites';\n\ntype TreeImageProps = {\n  id: string | number;\n  text: string;\n  width?: number;\n  className?: string;\n};\n\nexport function TreeImage({ id, text, width = 100, className }: TreeImageProps) {\n  if (typeof id === 'string') {\n    const [source, itemId] = getSource(id);\n\n    return (\n      <div className={clsx('tree-card', className)} style={{ width: `${width}px` }}>\n        <Sprite source={source} id={itemId} width={width} title={text} />\n        <Tooltip title={text}>\n          <div className=\"tree-card__text\">{text}</div>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  return <TreeCard id={String(id)} text={text} width={width} className={className} />;\n}\n","import clsx from 'clsx';\n// Types\nimport type { MapSegment, Tree, TreeId } from '../utils/types';\n// Utils\nimport { getOriginDirection } from '../utils/helpers';\nimport { getAnimationClass } from 'utils/helpers';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { CompassIcon } from 'icons/CompassIcon';\nimport { FinishLineIcon } from 'icons/FinishLineIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { TreeImage } from './TreeImage';\n\ntype ForestTreeProps = {\n  segment: MapSegment;\n  tree: Tree;\n  startingTeeId?: TreeId;\n  finalTreeId?: TreeId;\n  currentTreeId?: TreeId;\n  showPath?: boolean;\n  showArrow?: boolean;\n  className?: string;\n  hidePassedTreeNames?: boolean;\n  width?: number;\n};\n\nexport function ForestTree({\n  segment,\n  tree,\n  startingTeeId,\n  finalTreeId,\n  currentTreeId,\n  showPath = false,\n  showArrow = false,\n  className = '',\n  hidePassedTreeNames = false,\n  width = 75,\n}: ForestTreeProps) {\n  const isSegment = Boolean(segment);\n  const isStartingPoint = startingTeeId === tree.id;\n  const originDirection = getOriginDirection(tree.id);\n  const isFinalPoint = finalTreeId === tree.id;\n  const isCurrentTree = currentTreeId === tree.id;\n  const isPassed = (segment?.passed && !isCurrentTree) ?? false;\n\n  return (\n    <div\n      className={clsx(\n        'forest__tree',\n        isStartingPoint && `forest__tree--${originDirection}`,\n        isFinalPoint && showPath && 'forest__tree--goal',\n        isSegment && showPath && 'forest__tree--segment',\n        isPassed && 'forest__tree--passed',\n        isCurrentTree && 'forest__tree--current',\n        className\n      )}\n    >\n      <TreeImage\n        id={tree.treeType}\n        text={segment?.passed && hidePassedTreeNames ? '' : tree.card.text}\n        width={width}\n      />\n      {showPath && isFinalPoint && (\n        <IconAvatar\n          icon={<FinishLineIcon />}\n          size=\"large\"\n          className={`forest__end forest__end--${segment.direction}`}\n        />\n      )}\n\n      {isCurrentTree && (\n        <div className=\"forest__compass\">\n          <IconAvatar\n            icon={<CompassIcon />}\n            size=\"large\"\n            className={clsx('forest__compass-icon', getAnimationClass('pulse', { infinite: true }))}\n          />\n        </div>\n      )}\n      {isStartingPoint && (\n        <IconAvatar\n          icon={<FlagIcon />}\n          size=\"large\"\n          className={`forest__start forest__start--${originDirection}`}\n        />\n      )}\n      {(showArrow || showPath || isPassed) && !isFinalPoint && isSegment && segment.direction && (\n        <>\n          <span\n            className={clsx(\n              `forest__arrow-line forest__arrow-line--${segment.direction}`,\n              isSegment && showPath && 'forest__tree--segment',\n              isPassed && 'forest__tree--passed',\n              isCurrentTree && 'forest__tree--current'\n            )}\n          />\n          <IconAvatar\n            icon={<ArrowIcon />}\n            size=\"large\"\n            className={`forest__arrow forest__arrow--${segment.direction}`}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar as AntAvatar, AvatarProps, Tooltip } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\n// Components\nimport { Avatar } from './Avatar';\n\ntype AvatarGroupProps = {\n  list: GamePlayer[];\n  user?: GamePlayer;\n  maxCount?: number;\n  tooltipPrefix?: string;\n} & AvatarProps;\n\n/**\n * Displays a group of avatars\n */\nexport function AvatarGroup({\n  list,\n  user,\n  maxCount = 3,\n  size,\n  tooltipPrefix = '',\n  ...avatarProps\n}: AvatarGroupProps) {\n  const players = orderBy(list, [(v) => v.id === user?.id, 'name'], ['asc']);\n\n  return (\n    <AntAvatar.Group maxCount={maxCount} size={size}>\n      {players.map((player) => (\n        <Tooltip key={`avatar-group-${player.id}`} title={`${tooltipPrefix}${player.name}`} trigger=\"hover\">\n          <Avatar id={player.avatarId} alt={player.name} size={size} {...avatarProps} />\n        </Tooltip>\n      ))}\n    </AntAvatar.Group>\n  );\n}\n","import clsx from 'clsx';\nimport { findLast } from 'lodash';\nimport { Fragment } from 'react/jsx-runtime';\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\nimport { FullscreenExitOutlined, ZoomInOutlined, ZoomOutOutlined } from '@ant-design/icons';\n// Ant Design Resources\nimport { Button, Flex, Space } from 'antd';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { MapSegment, PlayerMapping, Tree, TreeId } from '../utils/types';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useScreenWidth } from 'hooks/useScreenWidth';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { getDirection } from '../utils/helpers';\nimport { PLACEHOLDER_PLAYER } from 'utils/constants';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { ForestTree } from './ForestTree';\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\nimport { AvatarGroup } from 'components/avatars/AvatarGroup';\nimport { ViewIf } from 'components/views';\n\ntype ForestProps = {\n  appWidth?: number;\n  forest: Tree[];\n  map?: MapSegment[];\n  showPath?: boolean;\n  actions?: {\n    selection: TreeId[];\n    clickableTrees: TreeId[];\n    onSelectTree: (treeId: TreeId) => void;\n    activeTree: TreeId | null;\n    disabled: boolean;\n  };\n  players?: GamePlayers;\n  size?: 'small' | 'large';\n  hidePassedTreeNames?: boolean;\n  user?: GamePlayer;\n  forestBorderColor?: string;\n  playerMapping?: PlayerMapping;\n};\n\nexport function Forest({\n  forest,\n  map = [],\n  showPath,\n  actions,\n  players,\n  size = 'large',\n  hidePassedTreeNames = false,\n  user = PLACEHOLDER_PLAYER,\n  forestBorderColor = 'transparent',\n  playerMapping,\n}: ForestProps) {\n  const screenWidth = useScreenWidth();\n  const treeWidth = useCardWidth(7, { gap: 16, minWidth: 60, maxWidth: 100 });\n\n  if (!forest || !map || map.length === 0 || !screenWidth) {\n    return (\n      <Space direction=\"vertical\" className=\"space-container\">\n        <IconAvatar icon={<AnimatedProcessingIcon />} size=\"large\" />\n      </Space>\n    );\n  }\n\n  const startingTeeId = map?.[0]?.treeId;\n  const treeMap = map.reduce((acc: Record<TreeId, MapSegment>, segment) => {\n    acc[segment.treeId] = segment;\n    return acc;\n  }, {});\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? startingTeeId;\n  const finalTreeId = map[map.length - 1]?.treeId;\n\n  const forestFullWidth = 150 * 7 + 72;\n  const isSmall = size === 'small';\n  const proportion = isSmall ? 0.5 : 0.9;\n  const initialScale = Math.min(forestFullWidth, screenWidth * proportion) / forestFullWidth;\n\n  return (\n    <div className=\"forest-container-area\">\n      <TransformWrapper\n        initialScale={initialScale}\n        minScale={0.5}\n        maxScale={4}\n        wheel={{ step: 0.05, disabled: true }}\n        centerOnInit\n      >\n        {({ zoomIn, zoomOut, resetTransform }) => (\n          <Fragment>\n            <ForestControls\n              position=\"top\"\n              zoomIn={zoomIn}\n              zoomOut={zoomOut}\n              resetTransform={resetTransform}\n            />\n            <ForestControls\n              position=\"bottom\"\n              zoomIn={zoomIn}\n              zoomOut={zoomOut}\n              resetTransform={resetTransform}\n            />\n\n            <TransformComponent\n              wrapperClass={clsx('forest-container', size === 'small' && 'forest-container--small')}\n            >\n              <div className=\"forest\" style={{ borderColor: forestBorderColor }}>\n                {forest.map((tree) => {\n                  const segment = treeMap?.[tree.id];\n\n                  if (actions) {\n                    const { selection = [], clickableTrees, onSelectTree, activeTree, disabled } = actions;\n                    const isPathForward = clickableTrees.includes(tree.id);\n                    const isClickable = isPathForward || selection.includes(tree.id);\n\n                    if (isClickable) {\n                      const isSelected = selection.includes(tree.id);\n                      const isActive = activeTree === tree.id;\n                      const selectionIndex = selection.indexOf(tree.id);\n\n                      return (\n                        <div\n                          key={`tree-${tree.id}`}\n                          className={clsx(\n                            'forest__tree-container forest__tree-button',\n                            isPathForward && disabled && 'forest__tree-button--disabled'\n                          )}\n                          onClick={() => {\n                            if ((isClickable && !disabled) || (isClickable && disabled && !isPathForward)) {\n                              onSelectTree(tree.id);\n                            }\n                          }}\n                          role=\"button\"\n                        >\n                          <ForestTree\n                            segment={segment}\n                            tree={tree}\n                            startingTeeId={startingTeeId}\n                            finalTreeId={finalTreeId}\n                            currentTreeId={currentTreeId}\n                            showPath={showPath}\n                            className={clsx(\n                              isPathForward && !disabled && 'forest__tree--clickable',\n                              isSelected && 'forest__tree--selected',\n                              isActive && 'forest__tree--active'\n                            )}\n                            width={treeWidth}\n                          />\n                          {isSelected && currentTreeId !== tree.id && (\n                            <>\n                              <span\n                                className={clsx(\n                                  `forest__arrow-from-line forest__arrow-from-line--${getDirection(\n                                    selection[selectionIndex - 1],\n                                    tree.id\n                                  )}`,\n                                  isSelected && 'forest__tree--selected',\n                                  isActive && 'forest__tree--active'\n                                )}\n                              />\n                              <IconAvatar\n                                icon={<ArrowIcon />}\n                                size=\"large\"\n                                className={clsx(\n                                  `forest__arrow-to forest__arrow-to--${getDirection(\n                                    selection[selectionIndex - 1],\n                                    tree.id\n                                  )}`\n                                )}\n                              />\n                            </>\n                          )}\n\n                          {isPathForward && !disabled && (\n                            <>\n                              <IconAvatar\n                                icon={<ArrowIcon />}\n                                size=\"large\"\n                                className={clsx(\n                                  `forest__arrow-to forest__arrow-to--${getDirection(\n                                    selection[selection.length - 1] ?? activeTree,\n                                    tree.id\n                                  )}`\n                                )}\n                              />\n                            </>\n                          )}\n\n                          <ViewIf condition={!!players && !!playerMapping?.[tree.id]}>\n                            <div className=\"forest__players\">\n                              <PlayerPositions\n                                players={players!}\n                                playerIds={playerMapping?.[tree.id] ?? []}\n                                user={user}\n                              />\n                            </div>\n                          </ViewIf>\n                        </div>\n                      );\n                    }\n                  }\n\n                  return (\n                    <div key={`tree-${tree.id}`} className=\"forest__tree-container\">\n                      <ForestTree\n                        segment={segment}\n                        tree={tree}\n                        startingTeeId={startingTeeId}\n                        finalTreeId={finalTreeId}\n                        currentTreeId={currentTreeId}\n                        showPath={showPath}\n                        hidePassedTreeNames={hidePassedTreeNames}\n                        width={treeWidth}\n                      />\n\n                      <ViewIf condition={!!players && !!playerMapping?.[tree.id]}>\n                        <div className=\"forest__players\">\n                          <PlayerPositions\n                            players={players!}\n                            playerIds={playerMapping?.[tree.id] ?? []}\n                            user={user}\n                          />\n                        </div>\n                      </ViewIf>\n                    </div>\n                  );\n                })}\n              </div>\n            </TransformComponent>\n          </Fragment>\n        )}\n      </TransformWrapper>\n    </div>\n  );\n}\n\ntype PlayerPositionsProps = {\n  players: GamePlayers;\n  playerIds: PlayerId[];\n  user?: GamePlayer;\n};\n\nfunction PlayerPositions({ players, playerIds, user }: PlayerPositionsProps) {\n  const { translate } = useLanguage();\n  const list = playerIds.map((playerId) => players[playerId]);\n  return (\n    <AvatarGroup\n      list={list}\n      user={user}\n      tooltipPrefix={translate('Último lugar visitado por: ', 'Last visited place by: ')}\n    />\n  );\n}\n\ntype ForestControlsProps = {\n  position: 'top' | 'bottom';\n  zoomIn: (step: number) => void;\n  zoomOut: (step: number) => void;\n  resetTransform: () => void;\n};\n\nfunction ForestControls({ zoomIn, zoomOut, resetTransform, position }: ForestControlsProps) {\n  return (\n    <Flex\n      className={clsx('forest-container-controls', `forest-container-controls--${position}`)}\n      justify=\"center\"\n    >\n      <Flex>\n        <Button onClick={() => zoomIn(0.1)} size=\"small\">\n          <ZoomInOutlined />\n        </Button>\n        <Button onClick={() => zoomOut(0.1)} size=\"small\">\n          <ZoomOutOutlined />\n        </Button>\n        <Button onClick={() => resetTransform()} size=\"small\">\n          <FullscreenExitOutlined />\n        </Button>\n      </Flex>\n    </Flex>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useWindowSize } from 'react-use';\n\n/**\n * Get the width of the TD content (div with id 'screen')\n */\nexport function useScreenWidth() {\n  const { width: windowWidth } = useWindowSize();\n  const [screenWidth, setScreenWidth] = useState(windowWidth);\n\n  useEffect(() => {\n    const element = document.getElementById('screen');\n    if (element) {\n      setScreenWidth(element.clientWidth);\n    }\n  }, []);\n\n  return screenWidth;\n}\n","// Components\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\nimport { CompassIcon } from 'icons/CompassIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n\nexport function CompassHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<CompassIcon />}>{children}</MetricHighlight>;\n}\n\nexport function MapHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<MapIcon />}>{children}</MetricHighlight>;\n}\n\nexport function TreeHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<TreeIcon />}>{children}</MetricHighlight>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space, Tooltip } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\nimport type { ExtendedTextCard, MapSegment, OnSubmitMapFunction, Tree } from '../utils/types';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { getPossibleTreeIds } from '../utils/helpers';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { LocationIcon } from 'icons/LocationIcon';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { IconAvatar } from 'components/avatars';\nimport { Container } from 'components/general/Container';\nimport { TextHighlight } from 'components/text';\nimport { TreeImage } from './TreeImage';\n\ntype MapBuilderProps = {\n  forest: Tree[];\n  user: GamePlayer;\n  onSubmitMap: OnSubmitMapFunction;\n};\n\nexport function MapBuilder({ user, forest, onSubmitMap }: MapBuilderProps) {\n  const { isLoading } = useLoading();\n  const userMap = user?.map ?? [];\n  const map: MapSegment[] = userMap.filter((segment: MapSegment) => !segment.passed);\n  const previousSelections = map.map((segment) => segment.clues);\n  const [selections, setSelections] = useState<(ExtendedTextCard | null)[]>(map.map((_) => null));\n  const [currentIndex, setIndex] = useState(0);\n  const [skippedIndexes, setSkippedIndexes] = useState<number[]>([]);\n\n  const onSetCard = (card: ExtendedTextCard) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = { ...card };\n      return copy;\n    });\n    setIndex((prev) => prev + 1);\n  };\n\n  const onSkipTree = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = null;\n      return copy;\n    });\n    setSkippedIndexes((prev) => [...prev, index]);\n    setIndex((prev) => prev + 1);\n  };\n\n  const onUnsetCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev].map((card, idx) => {\n        if (idx < index) return card;\n\n        return null;\n      });\n      return copy;\n    });\n    setSkippedIndexes((prev) => prev.filter((v) => v !== index));\n    setIndex(index);\n  };\n\n  const onNegateCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      if (copy[index]) {\n        copy[index]!.negate = !copy[index]?.negate;\n      }\n      return copy;\n    });\n  };\n\n  const usedCards = selections.map((card) => card?.id).filter(Boolean);\n\n  const possibleTreeIds = getPossibleTreeIds(userMap, map?.[currentIndex]);\n\n  return (\n    <>\n      <Space className=\"space-container map-builder\" wrap>\n        {map.map((segment, index) => {\n          if (segment.passed) {\n            return <></>;\n          }\n\n          const tree = forest[segment.treeId];\n\n          if (!tree) {\n            return <></>;\n          }\n\n          return (\n            <div className=\"map-builder__segment\" key={`map-segment-${segment.index}`}>\n              {currentIndex === index && (\n                <div className=\"map-builder__caret\">\n                  <IconAvatar\n                    icon={<LocationIcon />}\n                    className={getAnimationClass('bounce', { speed: 'slow', infinite: true })}\n                    size=\"small\"\n                  />\n                </div>\n              )}\n\n              {Boolean(selections[index]) && (\n                <Tooltip\n                  title={\n                    <Translate\n                      pt={`Clique para negar: Não-${selections?.[index]?.text}`}\n                      en={`Click to negate: Non-${selections?.[index]?.text}`}\n                    />\n                  }\n                >\n                  <TransparentButton\n                    onClick={() => onNegateCard(index)}\n                    disabled={!selections?.[index]}\n                    className=\"map-builder__card map-builder__card--new\"\n                  >\n                    {selections?.[index]?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {selections?.[index]?.text}\n                  </TransparentButton>\n                </Tooltip>\n              )}\n\n              {(previousSelections?.[index] ?? []).map((card) => {\n                return (\n                  <div className=\"map-builder__card\" key={card.id}>\n                    {card?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {card.text}\n                  </div>\n                );\n              })}\n\n              <TransparentButton\n                onClick={() => onUnsetCard(index)}\n                disabled={!(selections?.[index] || skippedIndexes.includes(index))}\n              >\n                <TreeImage id={tree.treeType} text={tree.card.text} />\n              </TransparentButton>\n            </div>\n          );\n        })}\n      </Space>\n\n      {possibleTreeIds.length > 0 && (\n        <Space className=\"contained\" wrap>\n          <strong>\n            <Translate pt=\"Caminhos possíveis para a árvore atual\" en=\"Possible paths for the current tree\" />\n            :\n          </strong>\n          {possibleTreeIds.map((treeId, index) => (\n            <TextHighlight\n              key={`highlighted-possibility-${treeId}`}\n              className={getAnimationClass('tada', { delay: index })}\n            >\n              {forest?.[treeId]?.card?.text}\n            </TextHighlight>\n          ))}\n        </Space>\n      )}\n\n      <Container title={<Translate pt=\"Cartas\" en=\"Hand\" />} contained>\n        {(user.hand ?? []).map((card: ExtendedTextCard, index: number) => (\n          <TransparentButton\n            onClick={() => onSetCard(card)}\n            key={card.id}\n            disabled={usedCards.includes(card.id) || currentIndex >= map.length}\n            className=\"map-builder__card-button\"\n          >\n            <Card hideHeader>{card.text}</Card>\n          </TransparentButton>\n        ))}\n        <Button\n          size=\"large\"\n          type=\"default\"\n          onClick={() => onSkipTree(currentIndex)}\n          disabled={!previousSelections?.[currentIndex]?.length}\n        >\n          <Translate pt=\"Pular árvore\" en=\"Skip tree\" />\n        </Button>\n      </Container>\n\n      <Space className=\"space-container\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={isLoading || usedCards.length === 0}\n          onClick={() => onSubmitMap({ newMap: selections })}\n        >\n          <Translate pt=\"Enviar Mapa\" en=\"Submit Map\" />\n        </Button>\n      </Space>\n    </>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { OnSubmitMapFunction, Tree } from './utils/types';\n// Hooks\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { buildPlayerMappingForLatestTree } from './utils/helpers';\nimport { mockNewMap } from './utils/mocks';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { CompassHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { MapBuilder } from './components/MapBuilder';\nimport { IconAvatar } from 'components/avatars';\n\ntype StepBuildMapProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  currentRound: number;\n  onSubmitMap: OnSubmitMapFunction;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepBuildMap({\n  players,\n  user,\n  announcement,\n  forest,\n  currentRound,\n  onSubmitMap,\n}: StepBuildMapProps) {\n  // Dev Only\n  useMock(() => {\n    onSubmitMap({ newMap: mockNewMap(user.hand) });\n  });\n\n  const playerMapping = buildPlayerMappingForLatestTree(players, user);\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        {currentRound === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )}\n      </Title>\n\n      <RuleInstruction type=\"rule\">\n        <Translate\n          pt={\n            <>\n              Você precisa ajudar os outros jogadores a descobrirem o seu caminho pela floresta.\n              <br />\n              Começando da <CompassHighlight>bússola</CompassHighlight>, escolha 1 carta para cada árvore do\n              caminho.\n              <br />\n              Você ganha <PointsHighlight>pontos</PointsHighlight> se jogadores adivinharem seu caminho, então\n              tente fazer um bom trabalho.\n            </>\n          }\n          en={\n            <>\n              You need to help the other players to discover your path through the forest.\n              <br />\n              Starting from the <CompassHighlight>compass</CompassHighlight>, choose 1 card for each tree of\n              the path.\n              <br />\n              You earn <PointsHighlight>points</PointsHighlight> if players guess your path correctly, so try\n              to do a good job.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <Forest\n        forest={forest}\n        map={user.map}\n        showPath\n        hidePassedTreeNames\n        players={players}\n        playerMapping={playerMapping}\n      />\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              Clique nas cartas em sequência para definir seu mapa, uma carta por árvore.\n              <br />\n              Você pode fazer quantos segmentos quiser desde que pelo menos uma carta esteja em cada árvore\n              (dessa rodada ou de uma rodada anterior já que as cartas são cumulativas).\n              <br />\n              Na barra abaixo, se quiser negar <IconAvatar icon={<NoIcon />} size=\"small\" /> um adjectivo\n              selecionado, clique nele acima da árvore para trocar.\n              <br />\n              Se quiser refazer uma árvore <IconAvatar icon={<TreeIcon />} size=\"small\" />, clique nela.\n              <br />\n              Quando você estiver pronto, aperte Enviar Mapa.\n            </>\n          }\n          en={\n            <>\n              Click on the cards in sequence to define your map, you can't skip any tree.\n              <br />\n              You can build as many segments you with as long as there is at least one card on each tree (from\n              this round or a previous one since the cards are cumulative).\n              <br />\n              If you want to negate <IconAvatar icon={<NoIcon />} size=\"small\" /> an adjective you selected,\n              click on it below the tree to change.\n              <br />\n              If you want to redo a tree <IconAvatar icon={<TreeIcon />} size=\"small\" />, click on it.\n              <br />\n              When you are ready, press Submit Map.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <MapBuilder user={user} forest={forest} onSubmitMap={onSubmitMap} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\nimport { IconAvatar } from 'components/avatars';\n// Types\nimport type { ExtendedTextCard, MapSegment, Tree } from '../utils/types';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\n// Components\n\nimport { TreeImage } from './TreeImage';\n\ntype PlayerSelectionMapProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  newMap?: (ExtendedTextCard | null)[];\n};\n\nexport function PlayerSelectionMap({ forest, map, newMap }: PlayerSelectionMapProps) {\n  if (!newMap || !map) {\n    return <></>;\n  }\n\n  const userMap: MapSegment[] = (map ?? []).filter((segment: MapSegment) => !segment.passed);\n\n  return (\n    <Space wrap className=\"space-container\">\n      {userMap.map((segment, index) => {\n        const { treeId, passed } = segment;\n        const tree = forest[treeId];\n        return (\n          <div className=\"map-builder__segment\">\n            {Boolean(newMap?.[index]) && (\n              <div className=\"map-builder__card map-builder__card--new\">\n                {newMap?.[index]!.text}\n                {newMap?.[index]?.negate && (\n                  <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                )}\n              </div>\n            )}\n            {segment.clues.map((clue) => {\n              return (\n                <div className=\"map-builder__card\" key={`card-${segment.index}-${clue.id}`}>\n                  {clue.text}\n                  {clue?.negate && (\n                    <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                  )}\n                </div>\n              );\n            })}\n\n            <TreeImage id={tree.treeType} text={passed ? '' : tree.card.text} />\n          </div>\n        );\n      })}\n    </Space>\n  );\n}\n","// Types\nimport type { GamePlayer } from 'types/player';\nimport type { Tree } from './utils/types';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\n\ntype StepBuildWaitProps = {\n  user: GamePlayer;\n  forest: Tree[];\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepBuildWait({ user, announcement, forest }: StepBuildWaitProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt=\"Todos os jogadores já descobriam seu mapa completamente\"\n          en=\"All players have discovered your map completely\"\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={<>Aguarde pacientemente, você ainda vai participar na hora de adivinhar.</>}\n          en={<>Sit and wait patiently, you will still participate when it's time to guess.</>}\n        />\n      </Instruction>\n\n      <Forest forest={forest} map={user.map} showPath />\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\nimport type { MapSegment } from './utils/types';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitMapAPIRequest } from './utils/api-requests';\n// Icons\nimport { MapIcon } from 'icons/MapIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepBuildMap } from './StepBuildMap';\nimport { PlayerSelectionMap } from './components/PlayerSelection';\nimport { StepBuildWait } from './StepBuildWait';\nimport { ViewOr } from 'components/views';\n\nexport function PhaseMapBuilding({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitMap = useOnSubmitMapAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<MapIcon />}\n      title={\n        state.round.current === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt=\"Você consegue mapear as árvores usando apenas adjetivos?\"\n          en=\"Can you map the tree path using only adjectives?\"\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  const isUserMapComplete = user?.map && user.map.every((segment: MapSegment) => segment.passed);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.MAP_BUILDING}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          content: <PlayerSelectionMap forest={state.forest} map={user.map} newMap={user.newMap} />,\n        }}\n      >\n        {/* Step 0 */}\n        <ViewOr condition={isUserMapComplete}>\n          <StepBuildWait user={user} announcement={announcement} forest={state.forest} />\n\n          <StepBuildMap\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            currentRound={state.round.current}\n            onSubmitMap={onSubmitMap}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import clsx from 'clsx';\n// Types\nimport type { MapSegment, Tree } from '../utils/types';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { TreeImage } from './TreeImage';\n\ntype MapEntryProps = {\n  segment: MapSegment;\n  tree?: Tree;\n  showArrow?: boolean;\n  className?: string;\n};\n\nexport function MapEntry({ segment, tree, showArrow, className }: MapEntryProps) {\n  return (\n    <div className={clsx('map-entry', className)} key={`map-${segment.index}`}>\n      {tree && <TreeImage id={tree.treeType} text={tree.card.text} className=\"map-entry__tree\" />}\n\n      <IconAvatar icon={<MapIcon />} size=\"large\" className=\"map-entry__icon\" />\n      {segment.clues.map((clue) => {\n        return (\n          <div className=\"map-entry__clue\" key={`clue-${segment.index}-${clue.id}`}>\n            {clue.text}\n            {clue?.negate && <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-entry__clue-no\" />}\n          </div>\n        );\n      })}\n\n      {showArrow && <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"map-entry__arrow\" />}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Types\nimport type { MapSegment, Tree } from '../utils/types';\n// Components\nimport { MapEntry } from './MapEntry';\n\ntype PlayerMapProps = {\n  map: MapSegment[];\n  selectedTrees?: Tree[];\n  fullMap?: boolean;\n};\n\nconst GOAL_TREE: Tree = {\n  id: 0,\n  treeType: 0,\n  card: { id: '', text: '' },\n};\n\nexport function PlayerMap({ map = [], selectedTrees = [], fullMap = false }: PlayerMapProps) {\n  const currentMap = fullMap ? map : map.filter((segment) => segment.active);\n\n  return (\n    <Space\n      wrap\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 100px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const selectedTree = selectedTrees[index + 1];\n        const flagPole = fullMap && arr.length - 1 === index ? GOAL_TREE : undefined;\n\n        return (\n          <MapEntry\n            className=\"player-map__segment\"\n            key={`map-${segment.index}`}\n            tree={flagPole ?? selectedTree}\n            segment={segment}\n            showArrow={arr.length - 1 !== index}\n          />\n        );\n      })}\n    </Space>\n  );\n}\n","import { useState } from 'react';\nimport { findLast } from 'lodash';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { MapSegment, OnSubmitPathGuessFunction, Tree, TreeId } from '../utils/types';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { buildUserMappingForLatestTree, getAvailableSegments } from '../utils/helpers';\nimport { mockFollowedPath } from '../utils/mocks';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { Forest } from './Forest';\nimport { Translate } from 'components/language';\nimport { PlayerMap } from './PlayerMap';\nimport { MouseFollowingContent } from 'components/mouse/MouseFollowingContent';\nimport { MapEntry } from './MapEntry';\nimport { DevButton } from 'components/debug';\n\ntype ClickableForestProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  onSubmitPath: OnSubmitPathGuessFunction;\n  pathId: PlayerId;\n  user: GamePlayer;\n  players: GamePlayers;\n};\n\nexport function ClickableForest({\n  forest,\n  map = [],\n  onSubmitPath,\n  pathId,\n  user,\n  players,\n}: ClickableForestProps) {\n  const { isLoading } = useLoading();\n\n  const currentMap = map.filter((segment) => !segment.passed && segment.clues.length > 0);\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? map?.[0]?.treeId ?? 0;\n  const passedTrees = map.filter((segment) => segment.passed).map((segment) => segment.treeId);\n\n  const userMapping = buildUserMappingForLatestTree(user, currentMap, pathId);\n\n  const [selection, setSelection] = useState<TreeId[]>([currentTreeId]);\n  const [activeTree, setActiveTree] = useState<TreeId>(currentTreeId);\n\n  const clickableTrees: TreeId[] = getAvailableSegments(activeTree, [...selection, ...passedTrees]);\n\n  const isDisabled = selection.length > currentMap.length;\n\n  const onSelectTree = (treeId: TreeId) => {\n    setActiveTree(treeId);\n    const index = selection.indexOf(treeId);\n    if (index > -1) {\n      setSelection((prev) => prev.slice(0, index + 1));\n    } else {\n      setSelection((prev) => [...prev, treeId]);\n    }\n  };\n\n  const selectedTrees = selection.map((treeId) => forest[treeId]);\n  const currentSegment = currentMap?.[selection.length - 1];\n\n  // DEV Only\n  useMock(() => {\n    onSubmitPath({\n      guess: mockFollowedPath(map, currentMap, true, Object.values(userMapping).flat().map(Number)),\n      pathId,\n      choseRandomly: true,\n    });\n  });\n\n  return (\n    <Space direction=\"vertical\" className=\"space-container\">\n      <PlayerMap map={map} selectedTrees={selectedTrees} />\n\n      <MouseFollowingContent active={Boolean(currentSegment)}>\n        <MapEntry\n          segment={currentSegment}\n          key={currentSegment?.treeId}\n          className={getAnimationClass('rubberBand')}\n        />\n      </MouseFollowingContent>\n\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => onSubmitPath({ guess: selection.slice(1), pathId, choseRandomly: false })}\n        disabled={isLoading || selection.length - 1 < currentMap.length}\n      >\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n      <DevButton\n        onClick={() =>\n          onSubmitPath({\n            guess: mockFollowedPath(map, currentMap, true, Object.values(userMapping).flat().map(Number)),\n            pathId,\n            choseRandomly: true,\n          })\n        }\n        ghost\n      >\n        Random Dev\n      </DevButton>\n      <Forest\n        forest={forest}\n        map={map}\n        actions={{\n          selection,\n          clickableTrees,\n          onSelectTree,\n          activeTree,\n          disabled: isDisabled,\n        }}\n        playerMapping={userMapping}\n        players={players}\n      />\n    </Space>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { OnSubmitPathGuessFunction, Tree } from './utils/types';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ClickableForest } from './components/ClickableForest';\nimport { AvatarName } from 'components/avatars';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepFollowPathProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  onSubmitPath: OnSubmitPathGuessFunction;\n  activePlayer: GamePlayer;\n  isTheActivePlayer: boolean;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepFollowPath({\n  players,\n  announcement,\n  forest,\n  activePlayer,\n  onSubmitPath,\n  user,\n}: StepFollowPathProps) {\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Siga o mapa de <AvatarName player={activePlayer} />\n            </>\n          }\n          en={\n            <>\n              Follow <AvatarName player={activePlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, clique nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> circuladas de pontinhos brancos para escolher aquele\n              caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar (Por\n              exemplo, 3 jogadores = 3 pontos).\n              <br />\n              Então, talvez valha a pena discutir! Porém, se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />O criador do mapa ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, click on the{' '}\n              <TreeHighlight>circled trees</TreeHighlight> with white dots to choose that path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses it\n              (For example, 3 players = 3 points).\n              <br />\n              So, it might be worth discussing out loud! However, if only one player guesses the path, they\n              earn <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              The map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      {Boolean(forest) && activePlayer.map && (\n        <ClickableForest\n          forest={forest}\n          map={activePlayer.map}\n          onSubmitPath={onSubmitPath}\n          pathId={activePlayer.id}\n          user={user}\n          players={players}\n        />\n      )}\n    </Step>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { Tree } from './utils/types';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { PlayerMap } from './components/PlayerMap';\n\ntype StepPathWaitingProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activePlayer: GamePlayer;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepPathWaiting({ players, announcement, forest, activePlayer }: StepPathWaitingProps) {\n  const playerCount = Object.keys(players).length;\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={<>Os jogadores estão seguindo o seu mapa!</>}\n          en={<>Players are following your map!</>}\n        />\n      </Title>\n\n      <RuleInstruction type=\"wait\">\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, eles vão clicando nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> para escolher o caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar. Por\n              exemplo, 3 jogadores = 3 pontos.\n              <br />\n              Se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />\n              Você, como criador do mapa, ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, players will click on the{' '}\n              <TreeHighlight>trees</TreeHighlight> to choose the path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses\n              it. For example, 3 players = 3 points.\n              <br />\n              If only one player guesses the path, they earn{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              You as the map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <PlayerMap map={activePlayer.map} />\n\n      <Forest forest={forest} map={activePlayer.map} showPath />\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitPathAPIRequest } from './utils/api-requests';\n// Icons\nimport { DirectionsIcon } from 'icons/DirectionsIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { StepFollowPath } from './StepFollowPath';\nimport { ViewOr } from 'components/views';\nimport { StepPathWaiting } from './StepPathWaiting';\n\nexport function PhasePathFollowing({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n  const [activePlayer, isTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitPath = useOnSubmitPathAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<DirectionsIcon />}\n      title={<Translate pt=\"Siga os mapas!\" en=\"Follow the maps!\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={3}\n    >\n      <Instruction>\n        <Translate\n          pt=\"Vamos analisar e tentar seguir o mapa de cada jogador\"\n          en=\"Let's analise and try to follow the each player's map\"\n        />\n        <br />\n        <TurnOrder players={players} order={state.turnOrder} activePlayerId={state.activePlayerId} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <ViewOr condition={isTheActivePlayer}>\n          <StepPathWaiting\n            players={players}\n            announcement={announcement}\n            forest={state.forest}\n            activePlayer={activePlayer}\n          />\n\n          <StepFollowPath\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            onSubmitPath={onSubmitPath}\n            activePlayer={activePlayer}\n            isTheActivePlayer={isTheActivePlayer}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GameState } from 'types/game';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseWaitProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseWait({ info, state }: PhaseWaitProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.WAIT} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Processando...\" en=\"Processing...\" />\n        </Title>\n\n        <AnimatedProcessingIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRound, GameRanking } from 'types/game';\nimport type { UseStep } from 'hooks/useStep';\n// Components\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { RuleInstruction } from 'components/text';\nimport { HostNextPhaseButton } from 'components/host';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: UseStep['goToPreviousStep'];\n};\n\nexport function StepRanking({ players, ranking, goToPreviousStep, round }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Rotas corretos\" en=\"Correct paths\" />,\n        <Translate pt=\"Pontos por sua rota\" en=\"Points for your route\" />,\n      ]}\n    >\n      <RuleInstruction type=\"event\">\n        <Translate\n          pt=\"Não se preocupe se você ficou pra trás! o jogador mais a frente de cada rota, te gritou e você conseguiu encontrá-lo.\"\n          en=\"Don't worry if you were left behind! The player furthest ahead on that route, call you and you caught up\"\n        />\n      </RuleInstruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <HostNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { Avatar, IconAvatar } from 'components/avatars';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { MapSegment, Tree } from '../utils/types';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { TreeCard } from 'components/cards/TreeCard';\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { TreeImage } from './TreeImage';\n\ntype PlayerMapResultsSummaryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  currentPlayer: GamePlayer;\n  user: GamePlayer;\n};\n\nexport function PlayerMapResultsSummary({\n  players,\n  forest,\n  currentPlayer,\n  user,\n}: PlayerMapResultsSummaryProps) {\n  const currentMap: MapSegment[] = currentPlayer.map.filter((segment: MapSegment) => segment.active);\n\n  return (\n    <div\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 120px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const tree = segment.passed ? forest[segment.treeId] : null;\n\n        return (\n          <div className=\"player-map__segment\" key={`map-${segment.index}`}>\n            <div className=\"player-map__top\">\n              {tree ? (\n                <TreeImage id={tree.treeType} text={tree.card.text} className=\"player-map__tree\" width={75} />\n              ) : (\n                <TreeCard id=\"1\" className=\"player-map__tree-invisible\" text=\"\" width={75} />\n              )}\n\n              <IconAvatar icon={<MapIcon />} size=\"large\" className=\"player-map__icon\" />\n\n              <div>\n                {segment.clues.map((clue) => {\n                  return (\n                    <div className=\"player-map__clue\" key={`clue-${segment.index}-${clue.id}`}>\n                      {clue.text}\n                      {clue?.negate && (\n                        <IconAvatar icon={<NoIcon />} size=\"small\" className=\"player-map__clue-no\" />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n\n              {segment.index === 0 && (\n                <IconAvatar icon={<FlagIcon />} size=\"small\" className=\"player-map__starting-flag\" />\n              )}\n\n              {arr.length - 1 !== index && (\n                <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"player-map__arrow\" />\n              )}\n            </div>\n\n            <div className=\"player-map__scoring\">\n              {segment.playersIds.length > 0 ? (\n                <div className=\"player-map__players\">\n                  {segment.playersIds.map((playerId) => {\n                    const player = players[playerId];\n                    return (\n                      <Tooltip title={player.name} key={`player-${playerId}`}>\n                        <Avatar size=\"small\" id={player.avatarId} />\n                      </Tooltip>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"player-map__no-players\">\n                  <Translate pt=\"Nenhum jogador\" en=\"No players\" />\n                </div>\n              )}\n\n              <div>{segment.score > 0 && <PointsHighlight>{segment.score}</PointsHighlight>}</div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { Tree } from './utils/types';\nimport type { UseStep } from 'hooks/useStep';\n// Utils\nimport { PAGE_DURATION } from './utils/constants';\nimport { getAvatarColorById } from 'utils/helpers';\nimport { buildPlayerMapping } from './utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { RuleInstruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { AvatarName } from 'components/avatars';\nimport { SlideShowControls } from 'components/slide-show/SlideShowControls';\nimport { PlayerMapResultsSummary } from './components/ResultsSummary';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepGalleryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: UseStep['setStep'];\n  isFirstGalleryRunThrough: boolean;\n  user: GamePlayer;\n  gallery: GamePlayer[];\n};\n\nexport function StepGallery({\n  players,\n  gallery,\n  user,\n  forest,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  const playerCount = Object.keys(players).length;\n\n  const currentPlayer = gallery[activeIndex];\n  const currentColor = getAvatarColorById(currentPlayer.avatarId);\n  const playerMapping = buildPlayerMapping(players, currentPlayer);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Mapa do(a) <AvatarName player={currentPlayer} />\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={currentPlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <RuleInstruction type=\"rule\">\n        <Translate\n          pt={\n            <>\n              Você ganha pontos ao acertar o caminho do mapa. <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar.{' '}\n              <br />\n              Se você for o único que acertou, você ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n            </>\n          }\n          en={\n            <>\n              You get points by guessing the map path. <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player who guesses it.{' '}\n              <br />\n              If you are the only one who guessed it, you get{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <PlayerMapResultsSummary players={players} forest={forest} currentPlayer={currentPlayer} user={user} />\n\n      <div>\n        <Forest\n          forest={forest}\n          map={currentPlayer.map}\n          size=\"small\"\n          players={players}\n          user={user}\n          forestBorderColor={getAvatarColorById(currentPlayer.avatarId)}\n          playerMapping={playerMapping}\n        />\n\n        <SlideShowControls\n          length={gallery.length}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          disableControls={isFirstGalleryRunThrough}\n          barColor={currentColor}\n          windowDuration={PAGE_DURATION}\n        />\n      </div>\n    </Step>\n  );\n}\n","import { useMemo } from 'react';\n// Types\nimport type { PhaseProps } from 'types/game';\nimport type { MapSegment } from './utils/types';\n// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { sortPlayers } from 'utils/helpers';\n// Icons\nimport { PathIcon } from 'icons/PathIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRanking } from './StepRanking';\nimport { StepGallery } from './StepGallery';\n\nexport function PhaseResults({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep, goToPreviousStep, goToNextStep } = useStep();\n  const gallery = useMemo(\n    () => sortPlayers(players).filter((player) => player.map.some((segment: MapSegment) => segment.active)),\n    [players]\n  );\n\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(gallery.length);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PathIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          currentRound={state?.round?.current}\n          type=\"block\"\n          onClose={goToNextStep}\n          unskippable\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quem é o melhor em seguir direções?\"\n              en=\"Who is the best at following directions?\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={gallery}\n          players={players}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          forest={state.forest}\n          setStep={setStep}\n          user={user}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { AchievementReference } from 'types/achievements';\n\nconst ACHIEVEMENTS = {\n  MOST_CARDS: 'MOST_CARDS',\n  FEWEST_CARDS: 'FEWEST_CARDS',\n  MOST_NEGATIVE_CARDS: 'MOST_NEGATIVE_CARDS',\n  FEWEST_NEGATIVE_CARDS: 'FEWEST_NEGATIVE_CARDS',\n  MOST_TREES: 'MOST_TREES',\n  FEWEST_TREES: 'FEWEST_TREES',\n  BEST_MAP: 'BEST_MAP',\n  WORST_MAP: 'WORST_MAP',\n  BEST_SCOUT: 'BEST_SCOUT',\n  WORST_SCOUT: 'WORST_SCOUT',\n  MOST_UP: 'MOST_UP',\n  MOST_RIGHT: 'MOST_RIGHT',\n  MOST_DOWN: 'MOST_DOWN',\n  MOST_LEFT: 'MOST_LEFT',\n  MOST_UP_LEFT: 'MOST_UP_LEFT',\n  MOST_UP_RIGHT: 'MOST_UP_RIGHT',\n  MOST_DOWN_LEFT: 'MOST_DOWN_LEFT',\n  MOST_DOWN_RIGHT: 'MOST_DOWN_RIGHT',\n};\n\nexport const achievementsReference: AchievementReference = {\n  [ACHIEVEMENTS.MOST_CARDS]: {\n    icon: 'list',\n    title: {\n      pt: 'Mais Cartas',\n      en: 'Most Cards',\n    },\n    description: {\n      pt: 'Usou o maior número de cartas',\n      en: 'Used the most cards',\n    },\n  },\n  [ACHIEVEMENTS.FEWEST_CARDS]: {\n    icon: 'ellipsis',\n    title: {\n      pt: 'Menos Cartas',\n      en: 'Fewest Cards',\n    },\n    description: {\n      pt: 'Usou o menor número de cartas',\n      en: 'Used the fewest cards',\n    },\n  },\n  [ACHIEVEMENTS.MOST_NEGATIVE_CARDS]: {\n    icon: 'minus',\n    title: {\n      pt: 'Mais Adjetivos Negativos',\n      en: 'Most Negative Adjectives',\n    },\n    description: {\n      pt: 'Usou o maior número de cartas negativas',\n      en: 'Used the most negative cards',\n    },\n  },\n  [ACHIEVEMENTS.FEWEST_NEGATIVE_CARDS]: {\n    icon: 'plus',\n    title: {\n      pt: 'Menos Cartas Negativas',\n      en: 'Fewest Negative Cards',\n    },\n    description: {\n      pt: 'Usou o menor número de cartas negativas',\n      en: 'Used the fewest negative cards',\n    },\n  },\n  [ACHIEVEMENTS.MOST_TREES]: {\n    icon: 'tree',\n    title: {\n      pt: 'Mais Árvores',\n      en: 'Most Trees',\n    },\n    description: {\n      pt: 'Passou pelo maior número de árvores',\n      en: 'Passed by the most trees',\n    },\n  },\n  [ACHIEVEMENTS.FEWEST_TREES]: {\n    icon: 'x',\n    title: {\n      pt: 'Menos Árvores',\n      en: 'Fewest Trees',\n    },\n    description: {\n      pt: 'Passou pelo menor número de árvores',\n      en: 'Passed by the fewest trees',\n    },\n  },\n  [ACHIEVEMENTS.BEST_MAP]: {\n    icon: 'sun',\n    title: {\n      pt: 'Melhor Guia',\n      en: 'Best Guide',\n    },\n    description: {\n      pt: 'Construiu um mapa que os outros jogadores melhor encontraram as direções corretas',\n      en: 'Built a map that other players found the correct directions the best',\n    },\n  },\n  [ACHIEVEMENTS.WORST_MAP]: {\n    icon: 'arrows',\n    title: {\n      pt: 'Mapeador Divergente',\n      en: 'Diverging Mapper',\n    },\n    description: {\n      pt: 'Construiu um mapa que os outros jogadores tiveram mais dificuldade em encontrar as direções corretas',\n      en: 'Built a map that other players had the most difficulty finding the correct directions',\n    },\n  },\n  [ACHIEVEMENTS.BEST_SCOUT]: {\n    icon: 'foot-prints',\n    title: {\n      pt: 'Melhor Explorador',\n      en: 'Best Scout',\n    },\n    description: {\n      pt: 'Acertou as árvores corretas mais vezes',\n      en: 'Hit the correct trees the most times',\n    },\n  },\n  [ACHIEVEMENTS.WORST_SCOUT]: {\n    icon: 'face-tired',\n    title: {\n      pt: 'Explorador Confuso',\n      en: 'Confused Scout',\n    },\n    description: {\n      pt: 'Acertou as árvores corretas menos vezes',\n      en: 'Hit the correct trees the fewest times',\n    },\n  },\n  [ACHIEVEMENTS.MOST_UP]: {\n    icon: 'arrow-up',\n    title: {\n      pt: 'Norte',\n      en: 'North',\n    },\n    description: {\n      pt: 'Andou mais para cima',\n      en: 'Walked more up',\n    },\n  },\n  [ACHIEVEMENTS.MOST_RIGHT]: {\n    icon: 'arrow-right',\n    title: {\n      pt: 'Leste',\n      en: 'East',\n    },\n    description: {\n      pt: 'Andou mais para direita',\n      en: 'Walked more right',\n    },\n  },\n  [ACHIEVEMENTS.MOST_DOWN]: {\n    icon: 'arrow-down',\n    title: {\n      pt: 'Sul',\n      en: 'South',\n    },\n    description: {\n      pt: 'Andou mais para baixo',\n      en: 'Walked more down',\n    },\n  },\n  [ACHIEVEMENTS.MOST_LEFT]: {\n    icon: 'arrow-left',\n    title: {\n      pt: 'Oeste',\n      en: 'West',\n    },\n    description: {\n      pt: 'Andou mais para esquerda',\n      en: 'Walked more left',\n    },\n  },\n  [ACHIEVEMENTS.MOST_UP_LEFT]: {\n    icon: 'double-arrow-up',\n    title: {\n      pt: 'Noroeste',\n      en: 'Northwest',\n    },\n    description: {\n      pt: 'Andou mais para cima e esquerda',\n      en: 'Walked more up and left',\n    },\n  },\n  [ACHIEVEMENTS.MOST_UP_RIGHT]: {\n    icon: 'double-arrow-up',\n    title: {\n      pt: 'Nordeste',\n      en: 'Northeast',\n    },\n    description: {\n      pt: 'Andou mais para cima e direita',\n      en: 'Walked more up and right',\n    },\n  },\n  [ACHIEVEMENTS.MOST_DOWN_LEFT]: {\n    icon: 'double-arrow-down',\n    title: {\n      pt: 'Sudoeste',\n      en: 'Southwest',\n    },\n    description: {\n      pt: 'Andou mais para baixo e esquerda',\n      en: 'Walked more down and left',\n    },\n  },\n  [ACHIEVEMENTS.MOST_DOWN_RIGHT]: {\n    icon: 'double-arrow-down',\n    title: {\n      pt: 'Sudeste',\n      en: 'Southeast',\n    },\n    description: {\n      pt: 'Andou mais para baixo e direita',\n      en: 'Walked more down and right',\n    },\n  },\n};\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Types\nimport type { PhaseProps } from 'types/game';\nimport type { MapSegment, Tree } from './utils/types';\n// Utils\nimport { getAvatarColorById, sortPlayers } from 'utils/helpers';\nimport { achievementsReference } from './utils/achievements';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\nimport { Container } from 'components/general/Container';\nimport { AvatarStrip } from 'components/avatars';\nimport { PlayerMap } from './components/PlayerMap';\nimport { Achievements } from 'components/general/Achievements';\n\nexport function PhaseGameOver({ state, info, players }: PhaseProps) {\n  const sortedPlayers = sortPlayers(players);\n  const forest: Tree[] = state.forest ?? [];\n\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<FlagIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n      <Container title={<Translate pt=\"Mapas dos Jogadores\" en=\"Players' Maps\" />}>\n        {sortedPlayers.map((player) => {\n          const mapTrees = (player.map ?? []).map((segment: MapSegment) => forest[segment.treeId]);\n          return (\n            <Space\n              key={player.id}\n              className=\"game-over-strip\"\n              style={{ borderColor: getAvatarColorById(player.avatarId) }}\n            >\n              <AvatarStrip player={player} withName className=\"game-over-avatar-strip\" />\n              <PlayerMap map={player.map} fullMap selectedTrees={mapTrees} />\n            </Space>\n          );\n        })}\n      </Container>\n    </GameOverWrapper>\n  );\n}\n","import { ConfigProvider } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseMapBuilding } from './PhaseMapBuilding';\nimport { PhasePathFollowing } from './PhasePathFollowing';\nimport { PhaseWait } from 'components/phases/PhaseWait';\nimport { PhaseResults } from './PhaseResults';\nimport { PhaseGameOver } from './PhaseGameOver';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.DEFAULT.WAIT:\n      return PhaseWait;\n    case PHASES.LABIRINTO_SECRETO.MAP_BUILDING:\n      return PhaseMapBuilding;\n    case PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING:\n      return PhasePathFollowing;\n    case PHASES.LABIRINTO_SECRETO.RESULTS:\n      return PhaseResults;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionLabirintoSecreto() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.FOREST,\n          colorLink: THEME_COLORS.FOREST,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.LABIRINTO_SECRETO} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionLabirintoSecreto;\n","import { useEffect, useState } from 'react';\n\n/**\n * Controls slide show\n * @param length\n */\nexport function useSlideShow(length: number): {\n  activeIndex: number;\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>;\n  isFirstGalleryRunThrough: boolean;\n  setIsFirstGalleryRunThrough: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && activeIndex === length - 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [isFirstGalleryRunThrough, activeIndex, length]);\n\n  return {\n    activeIndex,\n    setActiveIndex,\n    isFirstGalleryRunThrough,\n    setIsFirstGalleryRunThrough,\n  };\n}\n","import { useEffect, useState } from 'react';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Hooks\nimport { useGlobalState } from './useGlobalState';\n// Utils\nimport { PLACEHOLDER_PLAYER } from 'utils/constants';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: GamePlayers = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>(PLACEHOLDER_PLAYER);\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function AnimatedProcessingIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <g>\n        <path\n          fill=\"#ff4755\"\n          d=\"M363 242.3l-19-2.9a88.9 88.9 0 00-14-33.7l11.4-15.5a6.8 6.8 0 00-.7-8.9l-9.8-9.8a6.8 6.8 0 00-8.9-.7l-15.5 11.5a88.7 88.7 0 00-33.7-14l-2.9-19a6.8 6.8 0 00-6.7-5.8h-14a6.8 6.8 0 00-6.7 5.8l-2.8 19a88.6 88.6 0 00-33.8 14l-15.5-11.5a6.8 6.8 0 00-8.8.7l-9.9 9.8a6.8 6.8 0 00-.6 8.9l11.4 15.5a89 89 0 00-14 33.7l-19 2.9a6.8 6.8 0 00-5.8 6.7v14a6.8 6.8 0 005.8 6.7l19 2.9a89 89 0 0014 33.8l-11.4 15.4a6.8 6.8 0 00.6 8.9l9.9 9.8a6.8 6.8 0 008.8.7l15.5-11.5a88.6 88.6 0 0033.8 14l2.8 19a6.8 6.8 0 006.8 5.8h13.9a6.8 6.8 0 006.7-5.8l2.9-19a88.7 88.7 0 0033.8-14l15.4 11.5a6.8 6.8 0 008.9-.7l9.8-9.8a6.8 6.8 0 00.7-8.9L330 306.3a88.7 88.7 0 0014-33.8l19-2.8a6.8 6.8 0 005.8-6.7v-14a6.8 6.8 0 00-5.8-6.7zm-106.8 58.8a45 45 0 1145-45.1 45 45 0 01-45 45z\"\n        ></path>\n        <path fill=\"#fc2b3a\" d=\"M301.3 274a45.3 45.3 0 00-1-9 45 45 0 01-88.2 0 45 45 0 1089.2 9z\"></path>\n        <path d=\"M256.2 203.3a52.7 52.7 0 00-49.4 70.8 7.5 7.5 0 0014-5.2 37.6 37.6 0 1116 19.3 7.5 7.5 0 10-7.7 13 52.6 52.6 0 1027.2-97.9z\"></path>\n        <path d=\"M364.3 234.8l-14-2a95.9 95.9 0 00-11-27l8.3-11.3a14.2 14.2 0 00-1.4-18.6l-9.9-9.9a14.2 14.2 0 00-18.6-1.4l-11.3 8.4a95.9 95.9 0 00-27-11.1l-2-14a14.3 14.3 0 00-14.2-12.2h-14a14.3 14.3 0 00-14.1 12.2l-2.1 14a95.7 95.7 0 00-26.9 11.1l-11.3-8.4A14.3 14.3 0 00176 166l-9.9 9.9a14.2 14.2 0 00-1.4 18.6l8.4 11.4a95.6 95.6 0 00-11.1 26.8l-14 2.1a14.3 14.3 0 00-12 14.2v14a14.3 14.3 0 0012.2 14.2l14 2a95.6 95.6 0 0011.1 27l-8.4 11.3a14.2 14.2 0 001.4 18.6l9.9 9.9a14.3 14.3 0 0018.7 1.4L206 339a95.6 95.6 0 0026.9 11.1l2 14a14.3 14.3 0 0014.3 12.2h13.9a14.3 14.3 0 0014.2-12.2l2-14a95.9 95.9 0 0027-11.1l11.3 8.4a14.2 14.2 0 0018.6-1.4l10-9.9a14.2 14.2 0 001.3-18.6l-8.4-11.4a95.9 95.9 0 0011.2-26.8l13.9-2.1a14.2 14.2 0 0012.2-14.2v-14a14.2 14.2 0 00-12.2-14.2zm-2.8 27.6l-18.5 2.8a7.5 7.5 0 00-6.3 6 81 81 0 01-12.8 31 7.5 7.5 0 00.2 8.7l11 15-9 9-15-11.1a7.5 7.5 0 00-8.6-.2 81 81 0 01-31 12.8 7.5 7.5 0 00-6 6.3l-2.8 18.5h-12.9l-2.7-18.5a7.5 7.5 0 00-6-6.3 81 81 0 01-31-12.8 7.5 7.5 0 00-8.7.2l-15 11-9-9 11-15a7.5 7.5 0 00.2-8.6 81 81 0 01-12.8-31 7.5 7.5 0 00-6.3-6l-18.5-2.8v-12.8l18.5-2.8a7.5 7.5 0 006.2-6 81 81 0 0112.9-31 7.5 7.5 0 00-.2-8.7l-11-15 9-9 15 11.2a7.5 7.5 0 008.6.1 80.8 80.8 0 0131-12.8 7.5 7.5 0 006-6.3l2.8-18.5h12.8l2.8 18.5a7.5 7.5 0 006 6.3 81 81 0 0131 12.8 7.5 7.5 0 008.7-.2l15-11 9 9-11.1 15a7.5 7.5 0 00-.2 8.6 81 81 0 0112.9 31 7.5 7.5 0 006.2 6l18.5 2.8z\"></path>\n        <animateTransform\n          attributeName=\"transform\"\n          dur=\"5s\"\n          type=\"rotate\"\n          from=\"360 256 256\"\n          to=\"0 256 256\"\n          repeatCount=\"indefinite\"\n        ></animateTransform>\n      </g>\n      <g>\n        <path\n          fill=\"#ffe27a\"\n          d=\"M256.5 28.5A227.5 227.5 0 0030.2 233.1l60-2.9A168.6 168.6 0 01256.5 87.8h-.3v23L314.3 64l-58-56v20.6\"\n        ></path>\n        <path\n          fill=\"#f9cf58\"\n          d=\"M256.2 110.8L300 75.5A168.4 168.4 0 0088.2 230.3h2A168.7 168.7 0 01256.5 87.6l-.3.1z\"\n        ></path>\n        <path\n          fill=\"#8bcaff\"\n          d=\"M28.7 255.8v.2a227.5 227.5 0 00204.6 226.3l-3.5-60.1A168.3 168.3 0 0188 256v-.2h22.9l-47-58.1-55.9 58h20.6\"\n        ></path>\n        <path\n          fill=\"#98db7c\"\n          d=\"M255.8 424.3h.4a168.3 168.3 0 00166.2-141.8l60.2-4a227.5 227.5 0 01-226.4 205h-.4V504l-58.1-56 58-46.8v23z\"\n        ></path>\n        <path\n          fill=\"#82d361\"\n          d=\"M256.2 465.5a228.6 228.6 0 01-45-4.5l44.6 43v-20.5h.4c118.1 0 215.2-90 226.4-205l-3 3.1a227.5 227.5 0 01-223.4 183.9z\"\n        ></path>\n        <path\n          fill=\"#6cc4ff\"\n          d=\"M211.1 461A227.5 227.5 0 0129.4 255.8h-.7v.2a227.5 227.5 0 00204.6 226.3z\"\n        ></path>\n        <path\n          fill=\"#ffba57\"\n          d=\"M483.7 256.2v-.2c0-118-90-215.1-205-226.4l35.6 34.3-32 25.9A168.3 168.3 0 01424.5 256v.2h-23.3l46.9 58.1 55.9-58z\"\n        ></path>\n        <path\n          fill=\"#ffac3e\"\n          d=\"M300 75.5l-17.7 14.3a168.3 168.3 0 01142 157.2l.2-9A168.3 168.3 0 00300 75.5z\"\n        ></path>\n        <path d=\"M511.4 253.3a7.5 7.5 0 00-7-4.6h-12.8A235.5 235.5 0 00282 22L261.4 2c-4.4-4.5-13-1-12.7 5.5v13.1a233.8 233.8 0 00-128 42.8 7.5 7.5 0 008.7 12.3 219 219 0 01126.8-40.2 7.5 7.5 0 007.5-7.5v-2.8L303.1 63l-39.4 31.8v-7.4a7.5 7.5 0 00-7.5-7.5A176.2 176.2 0 0085.5 212.8l-16.1-20a7.6 7.6 0 00-11.3-.4l-17.6 18.3A220.2 220.2 0 01106.7 94a7.5 7.5 0 10-10.2-11 235 235 0 00-74.3 146.6l-20.1 21c-4.6 4.4-1 12.9 5.4 12.7h13.4a235.5 235.5 0 00209 226.7l20.7 20c4.5 4.5 12.9 1 12.7-5.5v-13.1a233.6 233.6 0 00130-44 7.5 7.5 0 10-8.7-12.2A219 219 0 01256 476.4h-.3a7.5 7.5 0 00-7.6 7.6v2.8L209 449l39.3-31.8v7.4a7.5 7.5 0 007.5 7.5h.5A176.2 176.2 0 00427 299.6l15.7 19.5a7.6 7.6 0 0011.3.5l18.2-18.9a220.4 220.4 0 01-65 116 7.5 7.5 0 0010.3 11 235.2 235.2 0 0072.9-145.9l19.6-20.4a7.5 7.5 0 001.5-8.1zM192.9 442.6a7.6 7.6 0 00-.5 11.3l18.5 17.9A220.5 220.5 0 0135.8 256v-.3a7.5 7.5 0 00-7.5-7.5h-3.1L63 209l31.8 39.3h-7.2a7.5 7.5 0 00-7.5 7.5v.3a176.2 176.2 0 00132.5 170.7zm168.4-64.5a161 161 0 01-98 38.8v-15.4c.2-6.2-7.6-9.9-12.2-5.9l-23.5 19A161.1 161.1 0 0195.3 263.2h15.2c6.2.2 9.9-7.6 5.9-12.3l-18.8-23.2A161.1 161.1 0 01248.7 95.1v15.4c-.2 6.2 7.6 9.9 12.2 5.9l23.6-19A161.1 161.1 0 01417 248.7h-15.7c-6-.2-9.8 7.6-5.8 12.3l19.1 23.6a161.1 161.1 0 01-53.4 93.5zm87.7-75l-31.8-39.4h7.6a7.5 7.5 0 007.5-7.4v-.3A176.2 176.2 0 00299.5 85.3l19.6-16a7.6 7.6 0 00.5-11.2l-18.7-18A220.5 220.5 0 01476.7 256v.3a7.5 7.5 0 007.5 7.5h2.6z\"></path>\n        <path fill=\"none\" d=\"M0 0h512v512H0z\"></path>\n        <animateTransform\n          attributeName=\"transform\"\n          dur=\"5s\"\n          type=\"rotate\"\n          from=\"0 256 256\"\n          to=\"360 256 256\"\n          repeatCount=\"indefinite\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n","export function DirectionsIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#706672\"\n        d=\"M239.18 501.59V110.82L251 98.9l-11.82-26.05h26.52l2.08 425.58a3 3 0 01-3 3l-8.65 3.16h-13.95a3 3 0 01-3-3z\"\n      ></path>\n      <path\n        fill=\"#5f5461\"\n        d=\"M256.13 72.85h-16.95v38a62 62 0 0012.33 2.15 5 5 0 014.62 5v386.59h13.95a3 3 0 003-3V72.85z\"\n      ></path>\n      <path\n        fill=\"#f37e87\"\n        d=\"M494.55 202.88l-39.74-51.44a9 9 0 00-6.91-3.25l-28.26-5.78H77.45a9 9 0 00-9 9v14.3a9 9 0 004.11 7.54L90 184.39l10.9 3.71a4 4 0 01-.36 6.93l-13.77 4.36-13.35 6.71a9 9 0 00-4.93 8v16.75l7.17 6.94-7.17 8.06v19.95a9 9 0 009 9h342.15l26.15-5.27a9 9 0 006.91-3.25l41.85-51.95a9 9 0 000-11.45z\"\n      ></path>\n      <path\n        fill=\"#f26d7b\"\n        d=\"M502.58 214.29l-47.25 57.22a9 9 0 01-6.91 3.25h-28.78l52-63a5 5 0 000-6.37l-52-63h28.77a9 9 0 016.92 3.25l47.25 57.22a9 9 0 010 11.43z\"\n      ></path>\n      <path\n        fill=\"#f3f3f3\"\n        d=\"M318.14 233.85H195.29a18.48 18.48 0 01-18.49-18.48v-13.56a18.48 18.48 0 0118.49-18.48h122.85a18.48 18.48 0 0118.48 18.48v13.56a18.48 18.48 0 01-18.48 18.48z\"\n      ></path>\n      <path\n        fill=\"#bdd96e\"\n        d=\"M9.92 399.51l46.79 56.65a9 9 0 006.92 3.26h350.44l15.76-1.94a9 9 0 009-9v-10.24a9 9 0 00-4.12-7.55l-23.7-17a4 4 0 01.36-6.94l24-14.4a9 9 0 004.93-8l-.59-44.85a9 9 0 00-9-9l-16.63-3.6H63.63a9 9 0 00-6.93 3.26l-21.21 25.68 2.89 9-15.28 6-13.18 16a10 10 0 000 12.67z\"\n      ></path>\n      <path\n        fill=\"#a4cf58\"\n        d=\"M411.14 413.67l11.41 3.71L440 428.57a9 9 0 014.12 7.55v14.32a9 9 0 01-9 9h-21v-23.3a9 9 0 00-4.12-7.55l-23.17-14.9a4 4 0 01.36-6.94l22-11.09a9 9 0 004.94-8v-60.77h21a9 9 0 019 9v20l-7.53 7.5 7.53 7.5v16.79a9 9 0 01-4.94 8l-13.36 6.74-14.27 4.35a4 4 0 00-.42 6.9z\"\n      ></path>\n      <path\n        fill=\"#f3f3f3\"\n        d=\"M316.07 418.45H193A18.48 18.48 0 01174.52 400v-13.66A18.48 18.48 0 01193 367.86h123.07a18.48 18.48 0 0118.48 18.48V400a18.48 18.48 0 01-18.48 18.45z\"\n      ></path>\n      <circle cx=\"256.13\" cy=\"50.37\" r=\"42.78\" fill=\"#817783\"></circle>\n      <circle cx=\"256.13\" cy=\"50.37\" r=\"16.95\" fill=\"#706672\"></circle>\n      <path\n        fill=\"#010101\"\n        d=\"M273.08 512.09a7.5 7.5 0 01-7.5-7.5v-43.17a7.5 7.5 0 0115 0v43.17a7.5 7.5 0 01-7.5 7.5zm0-179.7a7.5 7.5 0 01-7.5-7.5v-48.12a7.5 7.5 0 0115 0v48.12a7.5 7.5 0 01-7.5 7.5zm0-183.48a7.5 7.5 0 01-7.5-7.5V90.66a7.5 7.5 0 0115 0v50.75a7.5 7.5 0 01-7.5 7.5zm-33.9 0a7.5 7.5 0 01-7.5-7.5V90.66a7.5 7.5 0 0115 0v50.75a7.5 7.5 0 01-7.5 7.5zm0 183.48a7.5 7.5 0 01-7.5-7.5v-48.12a7.5 7.5 0 0115 0v48.12a7.5 7.5 0 01-7.5 7.5zm0 179.7a7.5 7.5 0 01-7.5-7.5v-43.17a7.5 7.5 0 0115 0v43.17a7.49 7.49 0 01-7.5 7.5z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M151.28 282.27H77.45A16.48 16.48 0 0161 265.8v-51.69a16.37 16.37 0 019-14.7l16.49-8.32-18-11.56A16.39 16.39 0 0161 165.68v-14.3a16.48 16.48 0 0116.46-16.47h299.4a7.5 7.5 0 010 15H77.45a1.46 1.46 0 00-1.45 1.47v14.3a1.46 1.46 0 00.67 1.23l29 18.67a7.5 7.5 0 01-.68 13l-28.2 14.22a1.46 1.46 0 00-.8 1.31v51.69a1.47 1.47 0 001.46 1.47h73.83a7.5 7.5 0 010 15zm301.36 0H186.28a7.5 7.5 0 110-15h262.83l47.68-57.75a1.46 1.46 0 000-1.86l-47.26-57.22a1.43 1.43 0 00-1.12-.53h-36.55a7.5 7.5 0 010-15h36.56a16.42 16.42 0 0112.69 6l47.25 57.21a16.48 16.48 0 010 21l-49.94 60.47a7.47 7.47 0 01-5.78 2.68z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M114.61 245.87H69.9a7.5 7.5 0 010-15h44.71a7.5 7.5 0 110 15zm20.02-46.49h-32a7.5 7.5 0 010-15h32a7.5 7.5 0 010 15zm183.51 41.97H195.29a26 26 0 01-26-26v-13.54a26 26 0 0126-26h122.85a26 26 0 0126 26v13.56a26 26 0 01-26 25.98zm-122.85-50.52a11 11 0 00-11 11v13.56a11 11 0 0011 11h122.85a11 11 0 0011-11v-13.58a11 11 0 00-11-11zm237.15 48.46a7.48 7.48 0 01-5.31-2.2l-46.38-46.4a7.5 7.5 0 1110.61-10.61l46.38 46.41a7.5 7.5 0 01-5.3 12.8z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M386.05 239.29a7.5 7.5 0 01-5.3-12.8l46.38-46.41a7.5 7.5 0 1110.61 10.61l-46.38 46.4a7.48 7.48 0 01-5.31 2.2zM108.33 466.92h-44.7a16.43 16.43 0 01-12.71-6L4.13 404.28a17.5 17.5 0 010-22.25l46.79-56.66a16.44 16.44 0 0112.71-6h276.93a7.5 7.5 0 110 15H63.63a1.44 1.44 0 00-1.14.54L15.7 391.58a2.46 2.46 0 000 3.15l46.79 56.66a1.46 1.46 0 001.14.53h44.7a7.5 7.5 0 010 15zm326.77 0H143.33a7.5 7.5 0 110-15H435.1a1.47 1.47 0 001.47-1.47v-14.33a1.46 1.46 0 00-.68-1.24l-29.06-18.69a7.49 7.49 0 01.69-13L435.76 389a1.47 1.47 0 00.81-1.32v-51.81a1.47 1.47 0 00-1.47-1.48h-59.54a7.5 7.5 0 010-15h59.54a16.49 16.49 0 0116.47 16.48v51.76a16.39 16.39 0 01-9.06 14.71L426 410.67l18 11.6a16.38 16.38 0 017.56 13.85v14.33a16.49 16.49 0 01-16.46 16.47z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M86.31 427.39a7.44 7.44 0 01-5.3-2.2l-17.79-17.8a7.5 7.5 0 1110.61-10.6l17.79 17.8a7.51 7.51 0 01-5.31 12.8z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M86.31 427.39a7.5 7.5 0 01-5.3-12.8l53.43-53.47a7.5 7.5 0 0110.61 10.61l-53.43 53.46a7.48 7.48 0 01-5.31 2.2zm354.35-56.55h-42.78a7.5 7.5 0 010-15h42.78a7.5 7.5 0 010 15zm-30.77 46.55h-32.05a7.5 7.5 0 010-15h32.05a7.5 7.5 0 010 15zM316.07 426H193a26 26 0 01-26-26v-13.66a26 26 0 0126-26h123.07a26 26 0 0126 26V400a26 26 0 01-26 26zM193 375.36a11 11 0 00-11 11V400a11 11 0 0011 11h123.07a11 11 0 0011-11v-13.66a11 11 0 00-11-11zm-117.53-4.52H31.3a7.5 7.5 0 010-15h44.17a7.5 7.5 0 010 15zm180.66-270.19a50.28 50.28 0 1150.28-50.28 50.34 50.34 0 01-50.28 50.28zm0-85.56a35.28 35.28 0 1035.28 35.28 35.32 35.32 0 00-35.28-35.28z\"\n      ></path>\n      <path\n        fill=\"#010101\"\n        d=\"M256.13 74.82a24.45 24.45 0 1124.45-24.45 24.48 24.48 0 01-24.45 24.45zm0-33.89a9.45 9.45 0 109.45 9.44 9.45 9.45 0 00-9.45-9.44z\"\n      ></path>\n    </svg>\n  );\n}\n","export function MapIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffe1bd\"\n        d=\"M502.682 405.795L424.508 87.522H206.292a20 20 0 00-14.142 5.858l-20 20c-7.81 7.81-20.474 7.81-28.284 0l-20-20a20 20 0 00-14.142-5.858H87.508L9.335 405.795a63.299 63.299 0 00-1.827 15.094v3.628c0 44.183 35.817 80 80 80h204.591a20 20 0 0014.142-5.858l20-20c7.811-7.81 20.474-7.81 28.284 0l20 20a20 20 0 0014.142 5.858h35.841c44.183 0 80-35.817 80-80v-3.628c0-5.087-.613-10.155-1.826-15.094z\"\n      ></path>\n      <path\n        fill=\"#ffd3a3\"\n        d=\"M225.341 224.516V87.522h-19.049a19.998 19.998 0 00-14.142 5.858l-20 20c-7.811 7.81-20.474 7.81-28.284 0l-20-20a20 20 0 00-14.142-5.858H87.508L9.335 405.795a63.299 63.299 0 00-1.827 15.094v3.628c0 44.183 35.817 80 80 80h204.591a20 20 0 0014.142-5.858l20-20c7.811-7.81 20.474-7.81 28.284 0l20 20a20 20 0 0014.142 5.858h35.841c44.183 0 80-35.817 80-80h-79.167c-110.456-.001-200-89.544-200-200.001z\"\n      ></path>\n      <path\n        fill=\"#fff1ce\"\n        d=\"M7.508 84.157v340.359c0-38.66 27.422-70.915 63.877-78.375 9.327-1.909 16.123-9.949 16.123-19.469V27.571c0-13.719-13.534-23.467-26.48-18.927-31.169 10.929-53.52 40.611-53.52 75.513zm443.48-75.513c-12.946-4.54-26.48 5.208-26.48 18.927V192.24a20 20 0 005.858 14.142l20 20c7.81 7.81 7.81 20.474 0 28.284l-20 20a20 20 0 00-5.858 14.142v37.864c0 9.52 6.796 17.561 16.123 19.47 36.455 7.46 63.877 39.715 63.877 78.375V84.157c0-34.902-22.351-64.584-53.52-75.513z\"\n      ></path>\n      <circle cx=\"170.008\" cy=\"183.062\" r=\"30\" fill=\"#b77158\"></circle>\n      <path d=\"M453.47 1.565a27.282 27.282 0 00-9.035-1.549c-15.123 0-27.427 12.361-27.427 27.555v52.451H206.292c-7.346 0-14.252 2.861-19.445 8.055l-20 20c-4.873 4.875-12.805 4.875-17.678 0l-20-19.999c-5.193-5.194-12.1-8.056-19.445-8.056H95.008V27.571a27.615 27.615 0 00-11.63-22.488c-7.33-5.197-16.383-6.481-24.831-3.517C23.534 13.843.008 47.034.008 84.157v340.359c0 48.248 39.252 87.5 87.5 87.5h204.591c7.346 0 14.251-2.86 19.445-8.054l20-20c4.873-4.875 12.805-4.875 17.678 0l20 20c5.194 5.193 12.1 8.054 19.445 8.054h35.841c18.216 0 35.678-5.545 50.499-16.034a7.5 7.5 0 00-8.666-12.244c-12.273 8.687-26.738 13.278-41.833 13.278h-35.841c-3.339 0-6.478-1.3-8.838-3.661l-20-20c-10.723-10.721-28.17-10.721-38.893 0l-20 20a12.414 12.414 0 01-8.838 3.661H87.508c-39.977 0-72.5-32.523-72.5-72.5 0-34.293 24.343-64.164 57.88-71.027 12.817-2.622 22.12-13.9 22.12-26.816v-50.989c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v50.989c0 5.917-4.164 10.901-10.127 12.121-22.984 4.703-42.39 18.354-54.873 36.85V84.157c0-30.762 19.491-58.264 48.502-68.437 3.801-1.331 7.88-.749 11.192 1.599 3.372 2.391 5.306 6.128 5.306 10.252v218.112c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5V95.022h14.716c3.339 0 6.478 1.3 8.838 3.662l20 20c5.361 5.361 12.404 8.041 19.446 8.041s14.085-2.68 19.446-8.041l20-20.001a12.414 12.414 0 018.838-3.661h210.716v97.218c0 7.346 2.86 14.251 8.054 19.445l20 20a12.417 12.417 0 013.662 8.839c0 3.338-1.301 6.478-3.662 8.838l-20 20.001c-5.193 5.194-8.054 12.101-8.054 19.445v37.864c0 12.916 9.303 24.194 22.119 26.816 33.538 6.863 57.881 36.734 57.881 71.027 0 14.622-4.33 28.711-12.522 40.744a7.503 7.503 0 006.193 11.722 7.494 7.494 0 006.207-3.28c9.893-14.532 15.122-31.541 15.122-49.186V84.157c0-37.122-23.524-70.314-58.538-82.592zm-11.336 337.229c-5.962-1.22-10.126-6.204-10.126-12.121v-37.864c0-3.339 1.3-6.479 3.661-8.839l20-20c10.722-10.723 10.722-28.169 0-38.892l-20-20a12.583 12.583 0 01-3.661-8.838V27.571c0-6.923 5.574-12.555 12.427-12.555 1.368 0 2.738.237 4.072.704 29.01 10.173 48.501 37.676 48.501 68.437v291.486c-12.483-18.496-31.889-32.146-54.874-36.849z\"></path>\n      <path d=\"M207.508 183.062c0-20.678-16.822-37.5-37.5-37.5s-37.5 16.822-37.5 37.5 16.822 37.5 37.5 37.5 37.5-16.822 37.5-37.5zm-37.5 22.5c-12.406 0-22.5-10.094-22.5-22.5s10.094-22.5 22.5-22.5 22.5 10.094 22.5 22.5-10.094 22.5-22.5 22.5zm207.304 114.022a7.502 7.502 0 00-10.607 0l-14.696 14.696-14.696-14.696a7.5 7.5 0 00-10.607 10.607l14.696 14.696-14.696 14.696a7.5 7.5 0 1010.608 10.607l14.696-14.696 14.696 14.696c1.465 1.464 3.385 2.196 5.304 2.196s3.839-.732 5.304-2.196a7.5 7.5 0 000-10.607l-14.696-14.696 14.696-14.696a7.502 7.502 0 00-.002-10.607zM240.008 190.562h7.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-7.5c-4.143 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5zm115.579 40.693a7.502 7.502 0 007.863-7.119c.038-.771.058-1.547.058-2.327a46.17 46.17 0 00-2.479-14.971 7.5 7.5 0 10-14.193 4.853 31.189 31.189 0 011.633 11.7 7.5 7.5 0 007.118 7.864zm-56.38-48.193c0-4.143-3.357-7.5-7.5-7.5h-14.733c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.733c4.143 0 7.5-3.357 7.5-7.5zm10.82 77.492c0-4.143-3.357-7.5-7.5-7.5h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.732a7.5 7.5 0 007.5-7.5zm25.16-65.601a7.5 7.5 0 003.48-14.148 45.872 45.872 0 00-16.756-5.011 7.5 7.5 0 00-1.492 14.926 30.892 30.892 0 0111.299 3.378 7.483 7.483 0 003.469.855zm-3.546 70.349a7.48 7.48 0 002.782-.538 46.077 46.077 0 0014.704-9.438 7.501 7.501 0 00-10.336-10.872 31.134 31.134 0 01-9.937 6.382 7.5 7.5 0 00-4.18 9.748 7.505 7.505 0 006.967 4.718zM209.038 444.763a7.52 7.52 0 002.021-.278 53.68 53.68 0 0015.482-7.132 7.5 7.5 0 002.054-10.405c-2.308-3.441-6.968-4.361-10.405-2.054a38.725 38.725 0 01-11.164 5.144 7.5 7.5 0 002.012 14.725zm-9.642-176.709h14.732c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5zm-36.732 166.498a53.851 53.851 0 0014.788 8.46 7.505 7.505 0 002.646.484 7.5 7.5 0 002.649-14.519 38.908 38.908 0 01-10.677-6.108 7.5 7.5 0 00-9.406 11.683zm75.016-19.177a7.48 7.48 0 002.555.451 7.504 7.504 0 007.052-4.946 53.785 53.785 0 003.195-16.732 7.499 7.499 0 00-7.5-7.73 7.5 7.5 0 00-7.492 7.271 38.86 38.86 0 01-2.305 12.08 7.499 7.499 0 004.495 9.606zm-87.672-91.702c4.143 0 7.5-3.357 7.5-7.5V301.44c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v14.733a7.5 7.5 0 007.5 7.5zm-7.5 36.699c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-14.733c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5zm22.445-81.318a31.23 31.23 0 019.218-7.397 7.5 7.5 0 00-7.012-13.26 46.203 46.203 0 00-13.626 10.931 7.5 7.5 0 005.706 12.363 7.481 7.481 0 005.714-2.637zM142.508 392.47c0 4.703.606 9.375 1.804 13.886a7.504 7.504 0 007.244 5.578 7.5 7.5 0 007.254-9.426 39.19 39.19 0 01-1.302-10.038v-2.633c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5zm115.82-139.416h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.732c4.143 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.5-7.5zm-4.082 115.744a31.276 31.276 0 017.483-9.151 7.498 7.498 0 00.943-10.564 7.497 7.497 0 00-10.564-.943 46.227 46.227 0 00-11.056 13.522 7.5 7.5 0 1013.194 7.136zm30.262-16.411h7.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-7.5c-4.143 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5z\"></path>\n    </svg>\n  );\n}\n","export function NoIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M.09.09h512v512H.09z\"></path>\n      <path\n        fill=\"#e94444\"\n        d=\"M256.09 441.78a184.89 184.89 0 01-85.58-20.86c-4.22-2.2-8.36-4.55-12.38-7.05a3.33 3.33 0 01-.62-5.19l251.16-251.17a3.34 3.34 0 015.2.62c2.49 4 4.85 8.16 7.05 12.38a185.75 185.75 0 01-164.83 271.27M98.33 354.09q-3.75-6-7-12.37a184.43 184.43 0 01-20.8-79.76c-3.24-105 82.25-192.47 187.33-191.5a185 185 0 0183.88 20.85q6.33 3.3 12.36 7.06a3.33 3.33 0 01.61 5.19L103.52 354.65a3.33 3.33 0 01-5.19-.61M256.09 7.5C118.8 7.5 7.5 118.8 7.5 256.09s111.3 248.59 248.59 248.59 248.59-111.29 248.59-248.59S393.38 7.5 256.09 7.5\"\n      ></path>\n      <path\n        fill=\"#d83131\"\n        d=\"M398.28 52.16a248 248 0 0189.35 190.93c0 137.29-111.29 248.59-248.59 248.59a247.45 247.45 0 01-142.18-44.69 247.53 247.53 0 00159.23 57.69c137.29 0 248.59-111.29 248.59-248.59a248.28 248.28 0 00-106.4-203.93\"\n      ></path>\n      <path d=\"M256.09 512.18A256.09 256.09 0 0175.01 75.01a256.11 256.11 0 11291.08 412.4 7.5 7.5 0 01-6.45-13.54 239.89 239.89 0 10-31.63 12.4 7.5 7.5 0 114.47 14.32 256.11 256.11 0 01-76.39 11.59z\"></path>\n      <path d=\"M101.2 363.09a10.48 10.48 0 01-1.25-.07 10.8 10.8 0 01-8-5 191.8 191.8 0 01-7.34-12.88 191 191 0 01-21.64-83c-1.63-52.89 18-103 55.21-141s86.85-58.74 139.71-58.23a191.22 191.22 0 0187.27 21.7c4.37 2.28 8.69 4.75 12.86 7.34a10.83 10.83 0 011.95 16.86L108.83 359.95a10.76 10.76 0 01-7.63 3.14zM256.09 77.9c-48.12 0-93.22 19-127.16 53.72-34.35 35.1-52.44 81.29-50.94 130.06a176 176 0 0020 76.52c1.29 2.47 2.64 4.94 4.06 7.37l243.54-243.6a175.7 175.7 0 00-7.36-4.06 176.41 176.41 0 00-80.47-20zm0 371.38a193.54 193.54 0 01-89-21.71 192.5 192.5 0 01-12.88-7.34 10.82 10.82 0 01-2-16.86l137.55-137.55a7.5 7.5 0 1110.6 10.61L166.59 410.2c2.42 1.41 4.89 2.77 7.38 4.06a178.52 178.52 0 0082.12 20c98.26 0 178.19-79.93 178.19-178.19a176.22 176.22 0 00-20-82.12c-1.29-2.49-2.65-5-4.06-7.38l-84.87 84.87a7.5 7.5 0 01-10.61-10.6l88.65-88.65a10.83 10.83 0 0116.86 1.95c2.58 4.16 5.05 8.49 7.34 12.89a191.11 191.11 0 0121.71 89c-.02 106.59-86.68 193.25-193.21 193.25z\"></path>\n    </svg>\n  );\n}\n","export function PathIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#60a917\"\n        d=\"M170.51 162a85.29 85.29 0 01-6 32.82 55.58 55.58 0 01-25.15 28.56h-.6A709 709 0 0094.2 96.18a19.43 19.43 0 00-25.57-9 561.34 561.34 0 0127.19-69.17 17 17 0 0130.52 0c17.4 35.46 44.17 114.07 44.17 143.99z\"\n      ></path>\n      <path\n        fill=\"#a4c400\"\n        d=\"M460.37 162c0 37.77-18.93 60.27-44.68 66.41a63.7 63.7 0 01-30 0 54.32 54.32 0 01-38.62-33.59A83.61 83.61 0 01341 162c0-29.92 26.77-108.53 44.42-144a17 17 0 0130.52 0c17.65 35.46 44.42 114.07 44.42 144z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M416 18.01a17.05 17.05 0 00-28.05-3.58 17.29 17.29 0 012.47 3.58c17.65 35.46 44.42 114.07 44.42 144 0 37.77-18.93 60.27-44.67 66.41l-2.22.43a62.51 62.51 0 0012.79 1.36 61.62 61.62 0 0015-1.79c25.58-6.14 44.68-28.64 44.68-66.41-.05-29.93-26.82-108.54-44.42-144z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M400.69 204.63c-21.66 0-34.1-15.52-34.1-42.63a8.53 8.53 0 1117.05 0c0 25.58 12.36 25.58 17.05 25.58a8.53 8.53 0 010 17.05z\"\n      ></path>\n      <path\n        fill=\"sienna\"\n        d=\"M375.11 272.83a74.12 74.12 0 0010.57-44.42 63.7 63.7 0 0030 0 74.26 74.26 0 0010.57 44.42z\"\n      ></path>\n      <path\n        fill=\"#ffeb3a\"\n        d=\"M358.06 443.33a400.89 400.89 0 00-89 55.33 17 17 0 01-11.25 4.35H58.31a8.53 8.53 0 01-7.16-13.47c63.43-89.68 189.52-98.55 230.18-122.93C324 341.03 179 315.45 179 264.3c0-31.37 48.17-59.67 85.25-76.72q20.21 0 38.88 1.79h.6c-20.63 20-57.21 63.94-5.46 83.37 68.32 25.66 255.87 76.82 59.79 170.59z\"\n      ></path>\n      <path\n        fill=\"#ffdc00\"\n        d=\"M298.39 272.83c-51.75-19.44-15.18-63.34 5.45-83.38h-.6a389.94 389.94 0 00-39-1.87l-1.79.85c5.12 0 10.15.51 15.09.94h.6c-20.63 20-57.2 63.94-5.46 83.37 68.21 25.58 255.76 76.73 59.68 170.51a400.89 400.89 0 00-89 55.33 17.08 17.08 0 01-11.26 4.35h25.58a17 17 0 0011.32-4.35 401 401 0 0189.09-55.25c196.08-93.77 8.53-144.93-59.67-170.5z\"\n      ></path>\n      <path\n        fill=\"#a4c400\"\n        d=\"M144.93 262.34c0 45-23.27 71.44-54.31 77.41a75.91 75.91 0 01-27.79 0c-31-6-54.3-32.39-54.3-77.41 0-34.57 30.52-125.23 51.15-166.16a18.73 18.73 0 019-8.52h-.48a19.44 19.44 0 0125.58 9 709.15 709.15 0 0145 126.68 182.21 182.21 0 016.14 39z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M76.73 315.45c-26.69 0-42.63-19.86-42.63-53.11a8.53 8.53 0 0117 0c0 24 8.53 36.06 25.58 36.06a8.53 8.53 0 010 17.05z\"\n      ></path>\n      <path\n        fill=\"sienna\"\n        d=\"M102.3 383.66H51.15a78.3 78.3 0 0011.68-43.89 75.91 75.91 0 0027.79 0 78.46 78.46 0 0011.68 43.89z\"\n      ></path>\n      <circle cx=\"238.71\" cy=\"468.91\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"238.71\" cy=\"417.76\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"400.69\" cy=\"349.55\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"358.06\" cy=\"332.5\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"213.13\" cy=\"264.3\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"366.59\" cy=\"358.08\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <path\n        fill=\"#ffdc00\"\n        d=\"M306.91 170.52a49.73 49.73 0 01-3.67 18.93 389.94 389.94 0 00-39-1.87h-8.52c-16.63 0-32.48.59-47.49 1.87a49.34 49.34 0 01-3.66-18.93 51.15 51.15 0 01102.3 0z\"\n      ></path>\n      <path\n        fill=\"#fec108\"\n        d=\"M255.76 119.37a48.49 48.49 0 00-12.76 1.71 51.13 51.13 0 0138.36 49.44 50.21 50.21 0 01-3.23 17.57c8.52 0 17 .68 25.57 1.36a49.73 49.73 0 003.24-18.93 51.15 51.15 0 00-51.15-51.15z\"\n      ></path>\n      <path d=\"M503.93 219.12a468.77 468.77 0 01-48.51-8.53A85.23 85.23 0 00468.89 162c0-32.48-27.45-112-45.35-147.83a25.58 25.58 0 00-45.7 0c-17.9 35.81-45.35 115.35-45.35 147.83a106.92 106.92 0 002.38 22.42c-6.9-.94-13.72-1.79-20.54-2.47a57.67 57.67 0 001.11-11.43 59.68 59.68 0 00-119.36 0 56.21 56.21 0 001.11 11.43c-7 .68-13.81 1.53-20.46 2.47a105 105 0 002.3-22.42c0-32.4-27.45-111.94-45.35-147.83a25.57 25.57 0 00-45.78 0 567.12 567.12 0 00-26.6 67.27 27.38 27.38 0 00-9.64 11C31.29 133.77 0 226.28 0 262.34c0 48.17 24.64 75 54.14 83.89a66.92 66.92 0 01-10.06 32.65 8.52 8.52 0 002.3 11.89 8.56 8.56 0 0011.85-2.3A83.33 83.33 0 0071 349.56h11.44a83.31 83.31 0 0012.79 39.13 8.61 8.61 0 0014.15-9.81 66.82 66.82 0 01-10.06-32.65c29.5-8.52 54.14-35.72 54.14-83.89a174.47 174.47 0 00-5-34.7 63 63 0 0022-25.06 495.51 495.51 0 0157.54-5.8c-38.19 22.17-57.54 44.85-57.54 67.52 0 31.21 39 51.15 73.4 69.14 14.14 7.33 35.34 18.25 36.88 22.77a10 10 0 01-3.74 3.06 268.45 268.45 0 01-52.18 19c-56.53 17.07-134.11 40.6-180.49 106.41a17.09 17.09 0 0014 26.86h199.5a25.6 25.6 0 0017.05-6.48 392.43 392.43 0 0186.87-54.05c63.25-30.24 93.25-58.83 91.63-88.24-2.31-44.84-77.5-71.44-132.32-90.88-7.24-2.56-13.89-4.86-19.69-7.08-12.11-4.51-19-10.57-20.55-18-2.38-11.68 7.16-29.25 26.26-48.51 11.25 1 22.51 2.38 34.1 4.26a63.3 63.3 0 0036.06 32.21 61.91 61.91 0 01-9.2 33.33 8.52 8.52 0 002.3 11.85 8.56 8.56 0 0011.85-2.3 76.79 76.79 0 0012-38.87 62.38 62.38 0 0013 0 76.69 76.69 0 0012 39.21 8.63 8.63 0 0014.15-9.89 62 62 0 01-9.21-33.33 63.8 63.8 0 0017.74-9.55 489.22 489.22 0 0060.18 10.83h.95a8.54 8.54 0 10.94-17zM76.73 332.51c-36.23 0-59.68-27.54-59.68-70.17 0-33.25 30.61-123.36 49.87-162a10.91 10.91 0 0119.61 0c19.27 38.62 49.87 128.73 49.87 162 0 42.63-23.4 70.17-59.67 70.17zm25.06-240.08a27.61 27.61 0 00-20.97-15.66 520.47 520.47 0 0122.34-54.91 8.53 8.53 0 0115.26 0C135.21 55.52 162 133.44 162 162a61.82 61.82 0 01-17.9 47.57 729.36 729.36 0 00-42.31-117.14zm111.34 78.09a42.63 42.63 0 0185.26 0 39.57 39.57 0 01-1.37 10 655.13 655.13 0 00-32.39-1.36h-8.87c-14.15 0-27.88.51-41.26 1.44a38.37 38.37 0 01-1.37-10.08zm51.15 79.8c2.82 13.47 13.39 23.79 31.29 30.52l19.95 7.16c44.59 15.78 119.36 42.2 121.06 75.71.77 14.58-12.87 38.87-82 71.95a408.59 408.59 0 00-91.14 56.61 8.54 8.54 0 01-5.62 2.22H58.23c43.05-61.05 117.31-83.47 172-99.84a275.35 275.35 0 0055.93-20.71 20.46 20.46 0 0012-17.73c-.43-14.33-19.52-24.22-45.95-37.86-29.07-14.83-64.62-33.25-64.62-54.05s28.64-44.84 78.6-68.2c6.48 0 12.79 0 19.1.51-13.64 16.54-24.9 35.64-21 53.71zM349.54 162c0-26.68 24.89-102.82 43.56-140.16a8.54 8.54 0 0115.18 0C427 59.18 451.84 135.32 451.84 162a62.94 62.94 0 01-17 47l-.84.77a45.81 45.81 0 01-21.31 10.66 54.62 54.62 0 01-12 1.28c-31.54-.03-51.15-22.88-51.15-59.71z\"></path>\n      <path d=\"M264.28 85.27v-17a8.53 8.53 0 00-17 0v17a8.53 8.53 0 1017 0zm-51.15 19.95a8.53 8.53 0 007.42-12.79L212 77.68a8.55 8.55 0 10-14.83 8.53l8.53 14.75a8.5 8.5 0 007.43 4.26zm85.26 0a8.52 8.52 0 007.41-4.26l8.53-14.75a8.56 8.56 0 00-14.84-8.53L291 92.43a8.53 8.53 0 007.42 12.79z\"></path>\n    </svg>\n  );\n}\n","export function StarIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffb820\"\n        d=\"M491.64 188.725l-153.53-22.31-68.66-139.12c-2.75-5.57-8.1-8.36-13.45-8.36l.02 400.2 137.3 72.19c11.01 5.78 23.86-3.56 21.76-15.81l-26.22-152.92 111.09-108.29c8.91-8.68 3.99-23.79-8.31-25.58z\"\n      ></path>\n      <path\n        fill=\"#ffd06a\"\n        d=\"M356.62 312.125s23.68 138.03 23.76 138.49c-.08-.01-122.45-31-124.36-31.48-.02-.01-137.34 72.19-137.34 72.19-11.01 5.78-23.86-3.56-21.76-15.81l26.22-152.92-111.09-108.29c-8.91-8.68-3.99-23.79 8.31-25.58l153.53-22.31 68.66-139.12c2.75-5.57 8.1-8.36 13.45-8.36l62.19 174.9 139.06 20.21z\"\n      ></path>\n      <path d=\"M510.883 196.615c-2.666-8.204-9.625-14.07-18.16-15.311l-149.632-21.743-66.918-135.588c-3.817-7.735-11.547-12.54-20.173-12.54s-16.356 4.805-20.173 12.54L168.91 159.561 19.278 181.305c-8.537 1.24-15.495 7.106-18.161 15.311s-.484 17.04 5.693 23.062l108.274 105.541-9.911 57.786a7.501 7.501 0 006.124 8.66 7.499 7.499 0 008.66-6.125l10.578-61.672a7.502 7.502 0 00-2.157-6.639L17.28 208.934c-2.089-2.036-2.798-4.909-1.897-7.684.902-2.775 3.164-4.683 6.052-5.103l153.534-22.31a7.498 7.498 0 005.647-4.103l68.662-139.125c1.292-2.617 3.804-4.179 6.722-4.179s5.431 1.562 6.722 4.179l68.663 139.125a7.5 7.5 0 005.647 4.103l153.534 22.31c2.888.42 5.15 2.327 6.051 5.102.902 2.775.193 5.648-1.896 7.685L383.622 317.228a7.499 7.499 0 00-2.157 6.639l26.227 152.913c.494 2.876-.621 5.617-2.982 7.332-2.361 1.714-5.312 1.929-7.895.57L259.49 412.487a7.504 7.504 0 00-6.98 0l-137.325 72.195c-2.583 1.358-5.535 1.144-7.894-.57-2.361-1.715-3.476-4.456-2.982-7.332l10.578-61.673a7.501 7.501 0 00-6.124-8.66 7.501 7.501 0 00-8.66 6.125l-10.578 61.673c-1.458 8.502 1.971 16.933 8.95 22.003 3.943 2.865 8.557 4.32 13.201 4.32a22.51 22.51 0 0010.49-2.608L256 427.6l133.834 70.36c7.635 4.014 16.713 3.357 23.692-1.712 6.979-5.07 10.408-13.502 8.949-22.003l-25.56-149.027L505.19 219.677c6.177-6.022 8.359-14.859 5.693-23.062z\"></path>\n    </svg>\n  );\n}\n"],"names":["getSource","str","match","numId","parseInt","itemId","sourceId","Math","ceil","ItemCard","id","width","className","title","text","padding","source","height","clsx","style","Boolean","Card","children","header","footer","color","size","randomColor","headerClassName","footerClassName","hideHeader","baseClass","bgColor","getColorFromLetter","toUpperCase","startsWith","backgroundColor","unknownText","pt","en","Achievements","players","achievements","reference","length","getAnimationClass","level","map","achievement","index","type","icon","achievementObj","player","playerId","delay","avatarId","name","description","content","value","shape","Container","contained","titleProps","contentProps","spaceProps","restTitleProps","childrenClassName","wrap","direction","childrenDirection","restChildrenContainerProps","PointsHighlight","iconSize","MouseFollowingContent","active","MouseFollowingContentInternal","divRef","useRef","useEffect","handleMouseMove","e","current","left","clientX","top","clientY","document","addEventListener","removeEventListener","ref","GainedPoint","gainedPoint","order","isPositive","isNegative","GainedPoints","gainedPoints","gainedPointsDescriptions","points","Array","isArray","RankingBoard","ranking","hideGainedPoints","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useMeasure","maxPoints","useMemo","max","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","useEffectOnce","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","position","previousScore","opacity","CrownFilled","hPosition","undefined","StepRankingWrapper","subtitle","white","useTemporarilyHidePlayersBar","CaretUpOutlined","SlideShowControls","activeIndex","setActiveIndex","setStep","disableControls","barColor","windowDuration","timeLeft","isRunning","pause","resume","s","min","fill","i","abs","onClick","disabled","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","submitAction","httpsCallable","functions","DIRECTIONS","getIndex","point","getPoint","floor","getDirection","from","to","fromX","fromY","result","FOREST_WIDTH","getAvailableSegments","origin","usedIndexes","x","y","available","topIndex","includes","push","right","rightIndex","down","downIndex","leftIndex","topLeft","topLeftIndex","topRight","topRightIndex","downLeft","downLeftIndex","downRight","downRightIndex","mockFollowedPath","fullMap","currentMap","increaseChances","previousMistakes","usedTrees","union","filter","segment","passed","treeId","possibilities","correctTreeId","choice","getRandomItem","TreeImage","TreeCard","String","ForestTree","tree","startingTeeId","finalTreeId","currentTreeId","showPath","showArrow","hidePassedTreeNames","isSegment","isStartingPoint","originDirection","FOREST_HEIGHT","getOriginDirection","isFinalPoint","isCurrentTree","isPassed","treeType","card","FinishLineIcon","CompassIcon","infinite","FlagIcon","ArrowIcon","AvatarGroup","list","user","maxCount","tooltipPrefix","avatarProps","v","trigger","Avatar","alt","Forest","forest","actions","PLACEHOLDER_PLAYER","forestBorderColor","playerMapping","screenWidth","windowWidth","useWindowSize","setScreenWidth","element","getElementById","clientWidth","useScreenWidth","treeWidth","useCardWidth","gap","minWidth","maxWidth","AnimatedProcessingIcon","treeMap","findLast","proportion","initialScale","minScale","maxScale","wheel","step","centerOnInit","zoomIn","zoomOut","resetTransform","Fragment","ForestControls","wrapperClass","borderColor","selection","clickableTrees","onSelectTree","activeTree","isPathForward","isClickable","isSelected","isActive","selectionIndex","indexOf","role","PlayerPositions","playerIds","translate","useLanguage","justify","ZoomInOutlined","Z","ZoomOutOutlined","FullscreenExitOutlined","CompassHighlight","MetricHighlight","MapHighlight","MapIcon","TreeHighlight","TreeIcon","MapBuilder","onSubmitMap","isLoading","useLoading","userMap","previousSelections","clues","_","selections","setSelections","currentIndex","setIndex","skippedIndexes","setSkippedIndexes","usedCards","possibleTreeIds","currentSegment","previousTree","getPossibleTreeIds","LocationIcon","speed","prev","copy","negate","onNegateCard","NoIcon","idx","onUnsetCard","hand","onSetCard","newMap","StepBuildMap","announcement","currentRound","useMock","sampleSize","random","activePlayer","activeSegments","Object","values","forEach","historyEntry","history","arr","treeIds","lastTreeId","buildPlayerMappingForLatestTree","fullWidth","PlayerSelectionMap","clue","StepBuildWait","PhaseMapBuilding","state","info","useUser","useStep","request","useAPICall","apiFunction","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitMapAPIRequest","round","isUserMapComplete","every","phase","allowedPhase","PHASES","waitingRoom","MapEntry","GOAL_TREE","PlayerMap","selectedTrees","gridTemplateColumns","selectedTree","flagPole","ClickableForest","onSubmitPath","pathId","passedTrees","userMapping","activePlayerId","activeSegment","buildUserMappingForLatestTree","setSelection","setActiveTree","isDisabled","guess","flat","Number","choseRandomly","slice","ghost","StepFollowPath","playerCount","keys","StepPathWaiting","PhasePathFollowing","useWhichPlayerIsThe","isTheActivePlayer","useOnSubmitPathAPIRequest","DirectionsIcon","turnOrder","PhaseWait","PhaseContainer","StepRanking","goToPreviousStep","align","PlayerMapResultsSummary","currentPlayer","playersIds","score","StepGallery","gallery","isFirstGalleryRunThrough","currentColor","getAvatarColorById","startingSegment","buildPlayerMapping","PhaseResults","goToNextStep","sortPlayers","some","useSlideShow","PathIcon","onClose","unskippable","ACHIEVEMENTS","achievementsReference","PhaseGameOver","sortedPlayers","announcementIcon","mapTrees","withName","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","setIsFirstGalleryRunThrough","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser","props","xmlns","viewBox","d","attributeName","dur","repeatCount","cx","cy","r","StarIcon"],"sourceRoot":""}