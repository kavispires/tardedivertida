{"version":3,"file":"static/js/page-dev-testing-zone.b63699b1.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextRoundButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","pages/Dev/TestingZone.jsx","services/adapters.ts"],"sourcesContent":["import { FireFilled } from '@ant-design/icons';\nimport { Space, SpaceProps } from 'antd';\nimport clsx from 'clsx';\nimport { useGlobalState } from 'hooks';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  children: any;\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\nimport { useState } from 'react';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  isLoading?: boolean;\n  state: GameState;\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n\ntype PlayersReadyStateProps = {\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { FireFilled } from '@ant-design/icons';\nimport { Button, Drawer, Popconfirm, Spin } from 'antd';\nimport { useAPICall, useGlobalState, useLoading } from 'hooks';\nimport { useState } from 'react';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n\ntype AdminMenuDrawerProps = {\n  state: GameState;\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <Button\n          type=\"primary\"\n          danger\n          size=\"small\"\n          onClick={showDrawer}\n          disabled={isLoading}\n          icon={isLoading ? <Spin /> : <FireFilled />}\n        >\n          Admin\n        </Button>\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} visible={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label=\"Make this the last round\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { FireFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { Translate } from 'components/language';\nimport { useAPICall, useGlobalState, useLanguage, useLoading } from 'hooks';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextRoundButtonProps = {\n  buttonText?: ReactChildren;\n  className?: string;\n  round?: GameRound;\n  lastRound?: boolean;\n};\n\nexport function AdminNextRoundButton({\n  buttonText,\n  className = '',\n  round,\n  lastRound = false,\n}: AdminNextRoundButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <Button\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        onClick={() => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n        disabled={isLoading}\n      >\n        {buttonText ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </Button>\n    </AdminOnlyContainer>\n  );\n}\n","import { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { useGlobalState, useLoading } from 'hooks';\n\ninterface AdminButtonProps extends ButtonProps {\n  onClick: GenericFunction;\n  children: ReactChildren;\n}\n\nexport function AdminButton({ onClick, children, ...props }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...props}>\n      {children}\n    </Button>\n  );\n}\n","import { useGlobalState } from 'hooks';\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  onClick: GenericFunction;\n  label: ReactChildren;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","/* eslint-disable no-unused-vars */\n\n// import { Image, Layout } from 'antd';\nimport gameList from 'assets/data/games.json';\nimport { Avatar, AvatarEntry } from 'components/avatars';\nimport { AdminOnlyContainer } from 'components/admin';\n// Resources\nimport { CheckCircleFilled, CheckCircleOutlined } from '@ant-design/icons';\nimport { Button, Input } from 'antd';\nimport { LETTERS } from 'utils/constants';\n\nimport { getColorFromLetter } from 'utils/helpers';\n\nfunction TestingZone() {\n  const info = gameList['U'];\n\n  const players = {\n    Flaviane: {\n      avatarId: '10',\n      name: 'Flaviane',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n    Kavis: {\n      avatarId: '11',\n      name: 'Kavis',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n    Stephanie: {\n      avatarId: '12',\n      name: 'Stephanie',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n  };\n\n  // Mock State\n  const state = {\n    phase: 'WORD_SELECTION',\n    guesser: 'Kavis',\n    playerOrder: ['Flaviane', 'Stephanie', 'Kavis', 'Flaviane', 'Stephanie', 'Kavis'],\n    round: {\n      current: 1,\n      total: 4,\n    },\n  };\n  const onRun = () => console.log('RUN');\n\n  // const questionObj = questions.reduce((acc, question) => {\n  //   const id = `m-${question.id}-pt`;\n  //   acc[id] = {\n  //     ...question,\n  //     id,\n  //   };\n  //   return acc;\n  // }, {});\n  // console.log({ questionObj });\n\n  const splitQuestions = questions.reduce((acc, question, index) => {\n    const id = `m-${index + 1}-en`;\n\n    const [prefix, answers, suffix] = question.suffix.split(/([0-9])+/g);\n    // console.log({ prefix, answers, suffix });\n\n    if (!prefix || !answers || !suffix) {\n      console.log(question.suffix);\n    }\n    acc[id] = {\n      id,\n      prefix: prefix.trim(),\n      answers: Number(answers),\n      suffix: suffix.trim(),\n    };\n\n    return acc;\n  }, {});\n\n  console.log({ splitQuestions });\n\n  // return <GameOver info={info} state={state} players={players} />;\n  // return (\n  //   <PhaseContainer info={info} phase={state.phase} allowedPhase=\"WORD_SELECTION\" className=\"\" fullScreen>\n  //     <PhaseAnnouncement title=\"Drawing!\" round={state.round.current} onClose={onRun}>\n  //       <Instruction>Do this and that and the other thing</Instruction>\n  //     </PhaseAnnouncement>\n  //   </PhaseContainer>\n  // );\n\n  const styles = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(15, 1fr)',\n    gap: '1rem',\n  };\n  const stylesLi = {\n    border: '1px solid black',\n    margin: '1fr',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  return (\n    <div>\n      <AdminOnlyContainer>Hello</AdminOnlyContainer>\n    </div>\n  );\n}\n\nexport default TestingZone;\n\nconst questions = [\n  {\n    suffix: 'Cite 3 coisas que podem ser encontradas em um bolso',\n    FIELD2: '',\n    FIELD3: '',\n  },\n  {\n    suffix: 'Cite 3 atrizes excelentes',\n    FIELD2: '',\n    FIELD3: '',\n  },\n];\n","import { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\n\nexport const GAME_API = {\n  loadGame: httpsCallable(functions, 'loadGame'),\n  addPlayer: httpsCallable(functions, 'addPlayer'),\n  makePlayerReady: httpsCallable(functions, 'makePlayerReady'),\n  rateGame: httpsCallable(functions, 'rateGame'),\n};\n\nexport const ADMIN_API = {\n  createGame: httpsCallable(functions, 'createGame'),\n  lockGame: httpsCallable(functions, 'lockGame'),\n  performAdminAction: httpsCallable(functions, 'performAdminAction'),\n};\n\nexport const ARTE_RUIM_API = {\n  submitAction: httpsCallable(functions, 'arteRuimSubmitAction'),\n};\n\nexport const CONTADORES_HISTORIAS_API = {\n  submitAction: httpsCallable(functions, 'contadoresHistoriasSubmitAction'),\n};\n\nexport const DETETIVES_IMAGINATIVOS_API = {\n  submitAction: httpsCallable(functions, 'detetivesImaginativosSubmitAction'),\n};\n\nexport const ESPIAO_ENTRE_NOS_API = {\n  submitAction: httpsCallable(functions, 'espiaoEntreNosSubmitAction'),\n};\n\nexport const GALERIA_DE_SONHOS_API = {\n  submitAction: httpsCallable(functions, 'galeriaDeSonhosSubmitAction'),\n};\n\nexport const CRIMES_HEDIONDOS_API = {\n  submitAction: httpsCallable(functions, 'crimesHediondosSubmitAction'),\n};\n\nexport const INSTRUMENTOS_CODIFICADOS_API = {\n  submitAction: httpsCallable(functions, 'instrumentosCodificadosSubmitAction'),\n};\n\nexport const LINHAS_CRUZADAS_API = {\n  submitAction: httpsCallable(functions, 'linhasCruzadasSubmitAction'),\n};\n\nexport const MENTE_COLETIVA_API = {\n  submitAction: httpsCallable(functions, 'menteColetivaSubmitAction'),\n};\n\nexport const NA_RUA_DO_MEDO_API = {\n  submitAction: httpsCallable(functions, 'naRuaDoMedoSubmitAction'),\n};\n\nexport const ONDA_TELEPATICA_API = {\n  submitAction: httpsCallable(functions, 'ondaTelepaticaSubmitAction'),\n};\n\nexport const POLEMICA_DA_VEZ_API = {\n  submitAction: httpsCallable(functions, 'polemicaDaVezSubmitAction'),\n};\n\nexport const RETRATO_FALADO_API = {\n  submitAction: httpsCallable(functions, 'retratoFaladoSubmitAction'),\n};\n\nexport const SONHOS_PESADELOS_API = {\n  submitAction: httpsCallable(functions, 'sonhosPesadelosSubmitAction'),\n};\n\nexport const TESTEMUNHA_OCULAR_API = {\n  submitAction: httpsCallable(functions, 'testemunhaOcularSubmitAction'),\n};\n\nexport const UE_SO_ISSO_API = {\n  submitAction: httpsCallable(functions, 'ueSoIssoSubmitAction'),\n};\n\nexport const CRUZA_PALAVRAS_API = {\n  submitAction: httpsCallable(functions, 'cruzaPalavrasSubmitAction'),\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","visible","setVisible","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","size","onClick","placement","closable","onConfirm","phase","lastRound","ButtonLabel","round","current","total","pt","en","AdminNextRoundButton","buttonText","translate","useLanguage","onGoToNextPhase","AdminButton","RocketFilled","AdminOnlyButton","gameList","Date","now","splitQuestions","questions","question","index","id","suffix","split","prefix","answers","console","log","trim","FIELD2","FIELD3","GAME_API","loadGame","httpsCallable","functions","addPlayer","makePlayerReady","rateGame","createGame","lockGame","performAdminAction","ARTE_RUIM_API","submitAction","CONTADORES_HISTORIAS_API","DETETIVES_IMAGINATIVOS_API","ESPIAO_ENTRE_NOS_API","GALERIA_DE_SONHOS_API","CRIMES_HEDIONDOS_API","LINHAS_CRUZADAS_API","MENTE_COLETIVA_API","NA_RUA_DO_MEDO_API","ONDA_TELEPATICA_API","POLEMICA_DA_VEZ_API","RETRATO_FALADO_API","SONHOS_PESADELOS_API","TESTEMUNHA_OCULAR_API","UE_SO_ISSO_API","CRUZA_PALAVRAS_API"],"sourceRoot":""}