{"version":3,"file":"static/js/galeria-de-sonhos.09783a5d.chunk.js","mappings":"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","sources":["assets/images/round-title-en.svg","assets/images/round-title-pt.svg","components/round/RoundAnnouncement.tsx","games/galeria-de-sonhos/RulesBlobs.tsx","games/galeria-de-sonhos/StepWordSelection.tsx","games/galeria-de-sonhos/PhaseWordSelection.tsx","games/galeria-de-sonhos/api-requests.ts","games/galeria-de-sonhos/SelectTable.tsx","games/galeria-de-sonhos/StepDreamsSelection.tsx","games/galeria-de-sonhos/PhaseDreamsSelections.tsx","games/galeria-de-sonhos/PlayTable.tsx","games/galeria-de-sonhos/StepPlayDream.tsx","games/galeria-de-sonhos/StepAnnounceDream.tsx","games/galeria-de-sonhos/PhaseCardPlay.tsx","games/galeria-de-sonhos/PhaseResolution.tsx","games/galeria-de-sonhos/PhaseGameOver.tsx","games/galeria-de-sonhos/SessionGaleriaDeSonhos.tsx"],"sourcesContent":["var _style, _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRoundTitleEn(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 130 50\",\n    style: {\n      enableBackground: \"new 0 0 130 50\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#9EC5E7;}\\n\\t.st1{fill:#FFFFFF;}\\n\\t.st2{fill:#3A7CA5;}\\n\\t.st3{fill:#44BBA4;}\\n\\t.st4{fill:#F2E863;}\\n\\t.st5{fill:#F45B69;}\\n\\t.st6{fill:#E6E6F5;}\\n\\t.st7{display:none;}\\n\\t.st8{display:inline;}\\n\\t.st9{display:inline;fill:none;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st10{fill:#DA70D6;}\\n\\t.st11{fill:#008080;}\\n\\t.st12{fill:#D2691E;}\\n\\t.st13{fill:#4682B4;}\\n\\t.st14{fill:#B22222;}\\n\\t.st15{fill:#DFB231;}\\n\\t.st16{fill:#FF6347;}\\n\\t.st17{fill:#9370DB;}\\n\\t.st18{fill:#3C58AC;}\\n\\t.st19{fill:#7CC44F;}\\n\\t.st20{fill:#040303;}\\n\\t.st21{fill:#FCBF00;}\\n\\t.st22{fill:#D70027;}\\n\\t.st23{fill:#EA384D;}\\n\\t.st24{fill:#BFB8B8;}\\n\\t.st25{fill:#F8EFEF;}\\n\\t.st26{fill:#FE2A25;}\\n\\t.st27{fill:#FE9A00;}\\n\\t.st28{fill:#FEE901;}\\n\\t.st29{fill:#FEF6A5;}\\n\\t.st30{fill:#FEF05C;}\\n\\t.st31{fill:#FEFDFD;}\\n\\t.st32{fill:url(#SVGID_1_);}\\n\\t.st33{fill:#D40000;}\\n\\t.st34{clip-path:url(#SVGID_3_);}\\n\\t.st35{fill:url(#SVGID_4_);}\\n\\t.st36{clip-path:url(#SVGID_6_);}\\n\\t.st37{fill:url(#SVGID_7_);}\\n\\t.st38{fill:#008C72;}\\n\\t.st39{clip-path:url(#SVGID_9_);}\\n\\t.st40{clip-path:url(#SVGID_11_);}\\n\\t.st41{clip-path:url(#SVGID_13_);}\\n\\t.st42{clip-path:url(#SVGID_15_);}\\n\\t.st43{clip-path:url(#SVGID_17_);}\\n\\t.st44{clip-path:url(#SVGID_19_);}\\n\\t.st45{fill:#575757;}\\n\\t.st46{clip-path:url(#SVGID_21_);}\\n\\t.st47{fill:url(#SVGID_22_);}\\n\\t.st48{fill:none;stroke:#FFFFFF;stroke-miterlimit:10;}\\n\\t.st49{display:inline;fill:#5C3400;}\\n\\t.st50{fill:none;}\\n\\t.st51{fill:#5C3400;}\\n\\t.st52{display:inline;fill:none;}\\n\\t.st53{display:inline;fill:#FFFFFF;}\\n\\t.st54{display:none;fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st55{display:inline;fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st56{display:none;fill:#F2F25F;}\\n\\t.st57{display:inline;fill:#F2F2F2;}\\n\\t.st58{display:inline;fill:#E6E6E6;}\\n\\t.st59{display:inline;fill:#808080;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st60{fill:#808080;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st61{display:inline;fill:#808080;}\\n\\t.st62{fill:#29E257;}\\n\\t.st63{fill:#E2DC29;}\\n\\t.st64{fill:#29ABE2;}\\n\\t.st65{fill:#E22929;}\\n\\t.st66{fill:#E6E6E6;}\\n\\t.st67{fill:#F2F2F2;}\\n\\t.st68{fill:#F9C303;}\\n\\t.st69{fill:#3A3939;}\\n\\t.st70{fill:#FF0000;}\\n\\t.st71{fill:#FEFEFD;}\\n\\t.st72{fill:#181D44;}\\n\\t.st73{fill:#F7931E;}\\n\\t.st74{fill:#A45467;}\\n\\t.st75{fill:#C33F48;}\\n\\t.st76{fill:#866A86;}\\n\\t.st77{fill:#6780A4;}\\n\\t.st78{fill:#4895C3;}\\n\\t.st79{fill:#4D4D4D;}\\n\\t.st80{opacity:0.2;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M31.6,8.3c3.6,1.3,5.1,4.6,5.1,8.1c0,5.5-3.8,11.9-9.9,13.3c2.8,2.9,6,8.6,8.4,8.6c0.6,0,1.2-0.4,1.7-1.3 c0.2-0.4,0.5-0.5,0.8-0.5c0.5,0,1.1,0.4,1.1,1.1c0,0.1-0.1,0.4-0.1,0.5c-1,1.8-2.6,2.7-4.3,2.7c-1.5,0-3-0.6-4.2-1.7 c-3-2.7-4.4-5.6-4.6-5.6c-0.1,0-0.1,0.1-0.1,0.1c0,0.6,0.5,2.7,1.3,7.4c0,0.2,0.1,0.4,0.1,0.6c0,1.5-1.1,2.7-2.8,2.7 c-0.2,0-0.4,0-0.7-0.1c-2-0.3-4.5-8.1-4.5-17.6c0-4.2,0.5-8.8,1.8-13.2c0.4-1.5,1.5-2.1,2.6-2.1c1.5,0,3.2,1.2,3.2,3.1 c0,0.1,0,0.4-0.1,0.6c-0.6,3.3-1.1,6.5-1.3,9.7c4.1-2.5,5.7-5.5,5.7-8.1c0-3.5-2.8-6.4-5.6-6.5h-0.3c-4.4,0-9.1,4.4-9.1,9 c0,0.9,0.2,1.8,0.6,2.7c0.1,0.1,0.1,0.3,0.1,0.4c0,0.6-0.4,1.1-0.9,1.1c-0.1,0-0.4-0.1-0.5-0.1c-1.5-0.7-2.1-2-2.1-3.7 c0-4.8,5.5-12.1,13.5-12.1C28,7.3,29.8,7.6,31.6,8.3z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M49,22.7c1.8,2.4,2.6,5.3,2.6,7.9c0,5.5-3.1,10.4-6.9,10.5h-0.1c-4.6,0-6.7-4.3-6.7-8.8 c0-3.3,1.1-6.8,3.2-8.9c-0.6,0-0.8-0.3-0.8-0.7c0-1,1.8-2.7,4.1-2.7C45.8,19.9,47.5,20.6,49,22.7z M42.1,22.6 c0.9-0.6,1.7-0.8,2.4-0.8c1.5,0,2.5,1.3,2.5,2.5c0,0.2,0,0.4-0.1,0.6c-0.6,2.5-2.7,4.1-2.9,6.8c0,0.3-0.1,0.7-0.1,1.1 c0,0.8,0.1,1.5,0.5,2c0.3,0.4,0.7,0.4,1.2,0.4c0.6,0,1.3-0.2,1.8-0.5c1.7-1,2.5-3.2,2.5-5.6c0-3.4-1.5-7-4.3-7.7 c-0.3-0.1-0.6-0.1-0.8-0.1C43.6,21.2,42.6,21.7,42.1,22.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M59.9,23.2v0.4c-0.3,2.1-1.2,6.3-1.2,9.4c0,1.8,0.3,3.2,1.1,3.7c0.1,0.1,0.3,0.1,0.4,0.1 c1.3,0,2.9-4.1,4.1-7.9c0.1-6,2-7.9,3.6-7.9c1.4,0,2.7,1.3,2.9,2.7c0,0.4,0.1,0.6,0.1,0.9c0,1.6-0.4,2.8-0.4,5.5 c0,1.2,0.1,2.8,0.4,4.8v0.8c0,0.7,0.1,1.3,0.8,1.3c0.1,0,0.2-0.1,0.4-0.1c1.9-0.4,3.6-6.5,4-8.3c0.1-0.2,0.2-0.4,0.4-0.4 s0.4,0.2,0.4,0.4v0.1c-0.8,3.5-2.3,11.2-7,11.2c-0.4,0-0.8-0.1-1.3-0.2c-3.1-0.8-3.7-3.9-3.9-6.7c-2,5.7-4.6,8.1-6.8,8.1 c-2.7,0-4.9-3.6-4.9-9.4c0-2.6,0.4-5.6,1.5-9c0.4-1.3,1.8-2,2.9-2C58.6,20.8,59.9,21.6,59.9,23.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M80.6,20.6c0.1,0.5,0.1,0.9,0.1,1.4c0,2.5-1,4.9-1,7.7v0.8c1.7-5.3,4.1-11.4,7.6-11.4c0.6,0,1.4,0.2,2.2,0.7 c2.3,1.5,3,5.2,3,8.8c0,4.6-1.1,9-1.1,9c0.1,0,3.7-4.8,4.8-8.5c0.1-0.3,0.3-0.4,0.6-0.4c0.3,0,0.6,0.2,0.6,0.6v0.1 c-0.6,2.8-3.1,9.1-5.5,10.2c-0.4,0.1-0.7,0.2-1.1,0.2c-2.6,0-4.2-3.9-4.5-5.9c-0.1-0.5-0.1-1.1-0.1-1.7c0-1.2,0.1-2.5,0.1-3.8 c0-1.9-0.1-3.7-0.7-5c-0.1-0.1-0.1-0.2-0.2-0.2c-1.1,0-4.3,7.9-4.8,15.6c-0.1,1.2-0.8,2-1.8,2c-1.9,0-4.7-2.9-5.1-10.2 c-0.1-0.8-0.1-1.5-0.1-2.2c0-7.2,2.6-9.5,4.6-9.6C79.4,18.8,80.4,19.6,80.6,20.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M111.3,5.7c1.4,0,2.9,1,2.9,2.5v0.2c-0.5,5-2.4,9.1-3.6,20.6c-0.2,1.9-0.3,3.4-0.3,4.6c0,2.5,0.4,3.5,1,3.5 c1.1,0,3-3.6,4.5-8.5c0.1-0.4,0.4-0.5,0.7-0.5c0.4,0,0.7,0.2,0.7,0.6c0,0.1-0.1,0.1-0.1,0.2c-0.9,3.4-2.2,8.1-4.7,10.7 c-0.8,0.8-1.6,1.2-2.5,1.2c-2.6,0-5.1-3.6-5.5-7.3c-2,5.1-4.1,7.1-5.8,7.1c-2.4,0-4.1-4.1-4.1-8.6c0-4.7,1.8-9.8,6.5-11.2 c0.4-0.1,0.7-0.1,1-0.1c1.8,0,3.2,1.2,3.4,1.2h0.1c0.8-4.9,1.4-10.3,3.4-14.9c0.4-0.9,1.3-1.3,2.2-1.3H111.3z M99.7,35.1v0.5 c0,0.2-0.1,0.4-0.1,0.6c0,0.4,0.1,0.7,0.4,0.7c1,0,3.9-4.8,4.9-11.1c-0.4-0.4-0.7-0.6-1.1-0.6C101.8,25.2,99.7,31.3,99.7,35.1z\"\n  })))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"avatars\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Time_Bomb\"\n  })), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_4\"\n  })), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_8\"\n  })), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_6\"\n  })), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"dial_svg\"\n  })), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Sheeps\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRoundTitleEn);\nexport default __webpack_public_path__ + \"static/media/round-title-en.2ad07e1f265a85634ad7940a33f96552.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _g, _g2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRoundTitlePt(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 130 50\",\n    style: {\n      enableBackground: \"new 0 0 130 50\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#3E1E68;}\\n\\t.st1{fill:#9EC5E7;}\\n\\t.st2{display:none;}\\n\\t.st3{display:inline;fill:#9EC5E7;}\\n\\t.st4{fill:#3A7CA5;}\\n\\t.st5{fill:#44BBA4;}\\n\\t.st6{fill:#F2E863;}\\n\\t.st7{fill:#F45B69;}\\n\\t.st8{fill:#FFFFFF;}\\n\\t.st9{opacity:0.9;fill:#FFFFFF;}\\n\\t.st10{stroke:#000000;stroke-width:8;stroke-miterlimit:10;}\\n\\t.st11{fill:#E6E6F5;}\\n\\t.st12{fill:#DA70D6;}\\n\\t.st13{fill:#008080;}\\n\\t.st14{fill:#D2691E;}\\n\\t.st15{fill:#556B2F;}\\n\\t.st16{fill:#7CC44F;}\\n\\t.st17{fill:#2F4F4F;}\\n\\t.st18{fill:#FF6347;}\\n\\t.st19{fill:#4682B4;}\\n\\t.st20{fill:#D2A467;}\\n\\t.st21{fill:#7FB5C7;}\\n\\t.st22{fill:#B22222;}\\n\\t.st23{fill:#9370DB;}\\n\\t.st24{fill:#778899;}\\n\\t.st25{fill:#663399;}\\n\\t.st26{fill:#696969;}\\n\\t.st27{fill:#20212E;}\\n\\t.st28{fill:#9884B4;}\\n\\t.st29{fill:#DFB231;}\\n\\t.st30{fill:#875131;}\\n\\t.st31{fill:#DB8A34;}\\n\\t.st32{fill:#EB3465;}\\n\\t.st33{fill:#2B1752;}\\n\\t.st34{fill:#3C58AC;}\\n\\t.st35{fill:#BDB74C;}\\n\\t.st36{fill:#C7A4B3;}\\n\\t.st37{display:inline;}\\n\\t.st38{display:inline;fill:none;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st39{fill:#939598;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M27.8,37.4c-0.4,0-0.6,0.1-0.8,0.5c-0.5,0.9-1.1,1.3-1.7,1.3c-2.5,0-5.6-5.8-8.4-8.6 c6.1-1.4,9.9-7.7,9.9-13.3c0-3.6-1.5-6.8-5.1-8.1c-1.8-0.7-3.6-1.1-5.3-1.1c-8,0.1-13.5,7.3-13.5,12.1c0,1.7,0.6,3,2.1,3.7 c0.1,0.1,0.4,0.1,0.5,0.1c0.5,0,0.9-0.5,0.9-1.1c0-0.1,0-0.3-0.1-0.4c-0.4-0.8-0.6-1.8-0.6-2.7c0-4.6,4.7-9,9.1-9h0.3 c2.8,0.1,5.6,2.9,5.6,6.5c0,2.6-1.5,5.6-5.7,8.1c0.2-3.2,0.7-6.4,1.3-9.7c0.1-0.2,0.1-0.4,0.1-0.6c0-1.9-1.6-3.1-3.2-3.1 c-1.1,0-2.2,0.6-2.6,2.1c-1.3,4.4-1.8,9-1.8,13.2c0,9.5,2.5,17.3,4.5,17.6c0.3,0.1,0.5,0.1,0.7,0.1c1.8,0,2.8-1.2,2.8-2.7 c0-0.2-0.1-0.4-0.1-0.6c-0.8-4.8-1.3-6.9-1.3-7.4c0-0.1,0-0.1,0.1-0.1c0.2,0,1.6,2.9,4.6,5.6c1.2,1.1,2.7,1.7,4.2,1.7 c1.8,0,3.4-0.8,4.4-2.7c0.1-0.1,0.1-0.4,0.1-0.5C29,37.9,28.3,37.4,27.8,37.4z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M34.4,20.8c-2.3,0-4.1,1.8-4.1,2.7c0,0.4,0.2,0.7,0.8,0.7c-2.1,2.1-3.2,5.6-3.2,8.9c0,4.6,2.1,8.8,6.7,8.8 h0.1c3.9-0.1,6.9-5.1,6.9-10.5c0-2.7-0.8-5.5-2.6-7.9C37.5,21.5,35.8,20.8,34.4,20.8z M37.3,35.6c-0.4,0.3-1.1,0.5-1.8,0.5 c-0.5,0-0.9-0.1-1.2-0.4c-0.4-0.4-0.5-1.2-0.5-2c0-0.4,0.1-0.8,0.1-1.1c0.3-2.7,2.3-4.3,2.9-6.8c0.1-0.2,0.1-0.4,0.1-0.6 c0-1.2-0.9-2.5-2.5-2.5c-0.7,0-1.5,0.2-2.4,0.8c0.5-0.9,1.5-1.3,2.5-1.3c0.3,0,0.6,0.1,0.8,0.1c2.7,0.7,4.3,4.4,4.3,7.7 C39.8,32.4,39,34.6,37.3,35.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M124.8,29.5c-0.3,0-0.5,0.1-0.6,0.4c-0.8,4.2-3.4,7.4-4.1,7.4h-0.1v-0.1c0-0.2-0.3-1.3-0.4-1.6 c-0.1-0.7-0.2-1.4-0.2-2.1c0-2.8,1.1-5.7,1.8-8.3c0.1-0.2,0.1-0.4,0.1-0.6c0-1.5-1.4-2.9-2.9-2.9c-1.1,0-2.2,0.6-3,2.5 c-0.7-1.8-3.4-3-5.3-3h-0.6c-4.9,0.6-7.4,8.4-7.4,12.6c0,0,0,0.1,0,0.1c-1.1,2.6-2.2,4.2-2.9,4.2c-0.6,0-1-1.1-1-3.5 c0-1.2,0.1-2.7,0.3-4.6c1.2-11.5,3.1-15.6,3.6-20.6V9.1c0-1.5-1.5-2.5-2.9-2.5h-0.1c-0.9,0-1.8,0.4-2.2,1.3c-2,4.6-2.6,10-3.4,15 h-0.1c-0.2,0-1.6-1.2-3.4-1.2c-0.3,0-0.6,0.1-1,0.1c-4.7,1.3-6.5,6.5-6.5,11.2c0,0.5,0,1,0.1,1.5c-1,1.8-2,2.9-2.5,2.9h-0.1v-0.1 c0-0.2-0.3-1.3-0.4-1.6c-0.1-0.7-0.2-1.4-0.2-2.1c0-2.8,1.1-5.7,1.8-8.3c0.1-0.2,0.1-0.4,0.1-0.6c0-1.5-1.4-2.9-2.9-2.9 c-1.1,0-2.2,0.6-3,2.5c-0.7-1.8-3.4-3-5.3-3h-0.6c-4.9,0.6-7.4,8.4-7.4,12.6c0,0,0,0.1,0,0.1c-1.1,2.6-2.2,4.2-2.9,4.2 c-0.6,0-1-1.1-1-3.5c0-1.2,0.1-2.7,0.3-4.6c1.2-11.5,3.1-15.6,3.6-20.6V9.1c0-1.5-1.5-2.5-2.9-2.5h-0.1c-0.9,0-1.8,0.4-2.2,1.3 c-2,4.6-2.6,10-3.4,15h-0.1c-0.2,0-1.6-1.2-3.4-1.2c-0.3,0-0.6,0.1-1,0.1c-4.7,1.3-6.5,6.5-6.5,11.2c0,4.5,1.7,8.6,4.1,8.6 c1.7,0,3.7-2,5.8-7.1c0.4,3.7,2.9,7.3,5.5,7.3c0.8,0,1.7-0.4,2.5-1.2c0.9-1,1.7-2.2,2.3-3.5c0.7,2.1,2.1,3.5,3.9,3.5 c2,0,4.4-1.8,6.6-6.1c0.1,2.8,1,5.1,3.4,6c0.6,0.2,1.2,0.3,1.7,0.3c2.1,0,3.5-1.6,4.6-3.6c0.7,2.6,2,4.4,3.6,4.4 c1.7,0,3.7-2,5.8-7.1c0.4,3.7,2.9,7.3,5.5,7.3c0.8,0,1.7-0.4,2.5-1.2c0.9-1,1.7-2.2,2.3-3.5c0.7,2.1,2.1,3.5,3.9,3.5 c2,0,4.4-1.8,6.6-6.1c0.1,2.8,1,5.1,3.4,6c0.6,0.2,1.2,0.3,1.7,0.3c4.5,0,5.9-7,6.9-10.4c0-0.1,0.1-0.1,0.1-0.2 C125.5,29.7,125,29.5,124.8,29.5z M48.2,37.8c-0.2,0-0.4-0.3-0.4-0.7c0-0.2,0.1-0.4,0.1-0.6V36c0-3.9,2.1-9.9,4.1-9.9 c0.4,0,0.7,0.1,1.1,0.6C52,32.9,49.2,37.8,48.2,37.8z M73.7,30.4c-1.1,2.4-3,5.5-4.3,5.5c-0.4,0-0.8-0.4-1-1.3 c-0.1-0.2-0.1-0.4-0.1-0.7c0-3.1,3-9.4,5.1-9.4c0.6,0,1.1,0.5,1.3,1.8C74.8,26.6,74.2,28,73.7,30.4z M88,37.8 c-0.2,0-0.4-0.3-0.4-0.7c0-0.2,0.1-0.4,0.1-0.6V36c0-3.9,2.1-9.9,4.1-9.9c0.4,0,0.7,0.1,1.1,0.6C91.9,32.9,89,37.8,88,37.8z  M113.6,30.4c-1.1,2.4-3,5.5-4.3,5.5c-0.4,0-0.8-0.4-1-1.3c-0.1-0.2-0.1-0.4-0.1-0.7c0-3.1,3-9.4,5.1-9.4c0.6,0,1.1,0.5,1.3,1.8 C114.6,26.6,114.1,28,113.6,30.4z\"\n  })))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"avatars\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRoundTitlePt);\nexport default __webpack_public_path__ + \"static/media/round-title-pt.2e3f9c1deb85d58d118aa6e3dfa7af23.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Tag } from 'antd';\n// Assets\nimport roundTitleEn from 'assets/images/round-title-en.svg';\nimport roundTitlePt from 'assets/images/round-title-pt.svg';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { TimedButton } from 'components/buttons';\n\ntype Teams = {\n  A: TeamObj;\n  B: TeamObj;\n};\ntype TeamObj = {\n  name: string;\n  score: number;\n  members: string[];\n};\n\ntype TeamProps = {\n  players: GamePlayers;\n  className?: string;\n  team: TeamObj;\n};\n\nfunction Team({ team, players, className }: TeamProps) {\n  return (\n    <div className={className}>\n      <h1>\n        <Translate pt=\"Time\" en=\"Team\" /> {team.name}\n      </h1>\n      <ul className=\"round-announcement__team-members\">\n        {team.members.map((playerName) => (\n          <li key={`team-member-${playerName}`} className=\"round-announcement__team-member\">\n            <AvatarName player={players[playerName]} />\n          </li>\n        ))}\n      </ul>\n      <Tag className=\"round-announcement__points\" color=\"blue\">\n        {team.score}{' '}\n        <Translate pt={team.score > 1 ? 'pontos' : 'ponto'} en={team.score > 1 ? 'points' : 'point'} />\n      </Tag>\n    </div>\n  );\n}\n\ntype RoundAnnouncementProps = {\n  round: GameRound;\n  onPressButton?: GenericFunction;\n  buttonText?: string;\n  time: number;\n  teams?: Teams;\n  players?: Players;\n  className?: string;\n  children?: any;\n  unskippable?: boolean;\n  circleColor?: Color;\n};\n\nexport function RoundAnnouncement({\n  round,\n  onPressButton,\n  buttonText,\n  time = 0,\n  teams,\n  players,\n  className,\n  children,\n  unskippable = false,\n  circleColor = 'yellow',\n}: RoundAnnouncementProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <div className={clsx('round-announcement', className)}>\n      {Boolean(teams?.A && players) && (\n        <Team className=\"round-announcement__team-left\" team={teams!.A} players={players!} />\n      )}\n\n      <div className=\"round-announcement__main\">\n        <div className=\"round-announcement__title\">\n          <img src={translate(roundTitlePt, roundTitleEn)} alt={translate('Rodada', 'Round')} />\n        </div>\n        <div className={clsx('round-announcement__round-wrapper', getAnimationClass('zoomIn'))}>\n          <div className={clsx('round-announcement__circle', `color-border--${circleColor}`)}></div>\n          <div className={clsx('round-announcement__circle-2', `color-border--${circleColor}`)}></div>\n          <div className=\"round-announcement__number\">{round?.current ?? round ?? 0}</div>\n        </div>\n\n        {children}\n\n        {Boolean(onPressButton) && !Boolean(time) && (\n          <Button type=\"primary\" onClick={onPressButton} className=\"round-announcement__go-button\">\n            {buttonText}\n          </Button>\n        )}\n\n        {Boolean(onPressButton) && Boolean(time) && (\n          <TimedButton\n            type=\"primary\"\n            onClick={onPressButton}\n            onExpire={onPressButton}\n            duration={time}\n            showTimer\n            disabled={unskippable}\n          >\n            <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n          </TimedButton>\n        )}\n      </div>\n\n      {Boolean(teams?.B && players) && (\n        <Team className=\"round-announcement__team-right\" team={teams!.B} players={players!} />\n      )}\n    </div>\n  );\n}\n","import { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype WordSelectionRulesProps = {\n  scout: GamePlayer;\n};\n\nexport function WordSelectionRules({ scout }: WordSelectionRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Cada sonho tem seu tema... uma palavra.\n            <br />\n            Para essa rodada, <AvatarName player={scout} addressUser size=\"small\" /> escolherá o tema.\n          </>\n        }\n        en={\n          <>\n            Every dream has a theme... a word.\n            <br />\n            For this round,\n            <AvatarName player={scout} addressUser size=\"small\" /> will choose the theme.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GeneralRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Somos caçadores de sonhos!\n            <br />\n            Dentro do tema escolhido, podemos visitar os sonhos de até 10 das 15 pessoas (cartas-imagens)\n            disponíveis.\n            <br />\n            O objetivo é encontrar uns aos outros em cada sonho, então escolha apenas sonhos que você acredita\n            que outros jogadores também irão escolher.\n            <br />\n            Parece fácil, mas se você escolher um sonho que ninguém mais escolheu... vixi...\n          </>\n        }\n        en={\n          <>\n            We are dream scouts!\n            <br />\n            Given the chosen theme, we can visit dreams of 10 of the 15 people (image cards) available.\n            <br />\n            The goal of the game is to match the same visited dreams of other players, therefore choose dreams\n            that you think other players will also choose.\n            <br />\n            It seems easy, but if you choose a dream that nobody else has chosen... well...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionRules({ contained = false }) {\n  return (\n    <Instruction contained={contained}>\n      <Translate\n        pt={\n          <>\n            Selecione sonhos (cartas) que você acha que se relaciona com a palavra-tema da rodada.\n            <br />\n            Você deve selecionar pelo menos uma e no máximo 10.\n          </>\n        }\n        en={\n          <>\n            Now select cards that you think match the round's word.\n            <br />\n            You must select at least one card and a maximum of 10.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionExtendedRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Na próxima fase, de um a um, cada jogador vai escolher um de seus sonhos visitados.\n            <br />\n            Se pelo menos um jogador visitou o mesmo sonho, eles ganham pontos. Se ninguém escolheu, o jogador\n            está fora da rodada!\n            <br />\n            Dai passa-se a vez para o próximo jogador!\n            <br />\n            Sonhos só podem ser escolhidos uma vez por rodada...\n          </>\n        }\n        en={\n          <>\n            On the next phase, one by one, each player will select one of their visited dreams.\n            <br />\n            If at least one other player visited the same dream, they get points! If nobody visited the same\n            dream, you are out of the round!\n            <br />\n            Each dream can be chosen once per round only...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function CardPlayRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            De um em um, cada jogador vai escolher um de seus sonhos visitados se você ainda tem algum\n            disponível.\n            <br />\n            Selecione o sonho que você mais acha que tem chance de outro jogador ter também visitado.\n            <br />\n            Você ganha 3 pontos se apenas mais 1 jogador visitou o mesmo sonho.\n            <br />\n            Você ganha 1 ponto se mais de 1 jogador visitou o mesmo sonho.\n            <br />\n            Você está eliminado da rodada se ninguém mais visitou o sonho escolhido.\n          </>\n        }\n        en={\n          <>\n            One by one, each player chooses one of their visited dreams, if you have any still available.\n            <br />\n            Select the dream you think you have the most chances of matching another player.\n            <br />\n            You get 3 points if only 1 player visited the same dream.\n            <br />\n            You get 1 point if many players have visited the same dream.\n            <br />\n            You are eliminated for this round if nobody else has visited the chosen dream.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\n\nimport { GeneralRules } from './RulesBlobs';\nimport { Space } from 'antd';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\n\ntype StepWordSelectionProps = {\n  onSubmitWord: GenericFunction;\n  words: GWord[];\n};\n\nexport function StepWordSelection({ onSubmitWord, words }: StepWordSelectionProps) {\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione o tema\" en=\"Select the theme\" />\n      </Title>\n      <GeneralRules />\n      <Space className=\"space-container\" align=\"center\">\n        {words.map((word, index) => {\n          return (\n            <TransparentButton key={word.id} onClick={() => onSubmitWord({ wordId: word.id })}>\n              <Card header={LETTERS[index]} randomColor>\n                {word.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitWordAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\n\nimport { StepWordSelection } from './StepWordSelection';\nimport { GeneralRules, WordSelectionRules } from './RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ViewOr } from 'components/views';\nimport { WaitingRoom } from 'components/players';\nimport { AvatarName } from 'components/avatars';\n\nfunction PhaseWordSelection({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n  const [scout, isUserTheScout] = useWhichPlayerIsThe('scoutId', state, players);\n\n  const onSubmitWord = useOnSubmitWordAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.WORD_SELECTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos caçadores de sonhos tentando encontrar uns aos outros...\"\n              en=\"We're dream scouts trying to find each other...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"sleep\"\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WordSelectionRules scout={scout} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheScout}>\n          <StepWordSelection onSubmitWord={onSubmitWord} words={state.words} />\n\n          <WaitingRoom\n            players={players}\n            title={<Translate pt=\"Aguarde...\" en=\"Please wait...\" />}\n            instruction={\n              <Translate\n                pt={\n                  <>\n                    <AvatarName player={scout} /> está escolhendo o tema.\n                  </>\n                }\n                en={\n                  <>\n                    <AvatarName player={scout} /> is choosing the theme.\n                  </>\n                }\n              />\n            }\n          >\n            <GeneralRules />\n          </WaitingRoom>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { GALERIA_DE_SONHOS_API } from 'services/adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitWordAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-word',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Palavra enviada com sucesso', 'Word submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua palavra',\n      'Oops, the application failed to send your word'\n    ),\n  });\n\n  return (payload: SubmitWordPayload) => {\n    request({\n      action: 'SUBMIT_WORD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitCardsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-cards',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Cartas enviadas com sucesso', 'Cards submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas cartas',\n      'Oops, the application failed to send your cards'\n    ),\n  });\n\n  return (payload: SubmitCardsPayload) => {\n    request({\n      action: 'SUBMIT_CARDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'play-card',\n    // onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to send your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n","import { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport { ImageBlurButton, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { useCardWidth } from 'hooks';\n\ntype SelectTableProps = {\n  table: GImageCard[];\n  onSelectCard: GenericFunction;\n  selectedCards: BooleanDictionary;\n};\n\nexport function SelectTable({ table, onSelectCard, selectedCards }: SelectTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = selectedCards[card.id];\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n            />\n\n            <Button\n              shape=\"round\"\n              size=\"small\"\n              ghost={!isSelected}\n              className=\"g-table-item-button\"\n              onClick={() => onSelectCard(card.id)}\n            >\n              <UpCircleOutlined />\n              {isSelected ? (\n                <Translate pt=\"Desmarcar\" en=\"Deselect\" />\n              ) : (\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              )}\n              <UpCircleOutlined />\n            </Button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\n// Hooks\nimport { useBooleanDictionary } from 'hooks';\n// Components\nimport { DreamSelectionExtendedRules, DreamSelectionRules } from './RulesBlobs';\nimport { SelectTable } from './SelectTable';\n\nconst validateSelectedCards = (v: BooleanDictionary) => {\n  return Object.keys(v).length < 10;\n};\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onSubmitCards: GenericFunction;\n  currentRound: number;\n};\n\nexport function StepDreamsSelection({ table, word, onSubmitCards, currentRound }: StepDreamsSelectionProps) {\n  const [selectedCards, onSelectCard] = useBooleanDictionary({}, validateSelectedCards);\n\n  const selectedCount = Object.keys(selectedCards).length;\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <Translate pt=\"Visite Sonhos\" en=\"Visit Dreams\" />\n      </Title>\n      <Card randomColor>{word.text}</Card>\n      <DreamSelectionRules contained />\n      {currentRound === 1 && <DreamSelectionExtendedRules />}\n\n      <PopoverRule content={<DreamSelectionExtendedRules />} />\n      <SelectTable table={table} onSelectCard={onSelectCard} selectedCards={selectedCards} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={selectedCount < 1 || selectedCount > 10}\n          onClick={() => onSubmitCards({ cardsIds: Object.keys(selectedCards) })}\n        >\n          <Translate pt={`Enviar ${selectedCount} cartas-sonho`} en={`Send ${selectedCount} dream cards`} />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitCardsAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { DreamSelectionRules } from './RulesBlobs';\nimport { StepDreamsSelection } from './StepDreamsSelection';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseDreamsSelections({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitCards = useOnSubmitCardsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"dream\"\n          title={translate('Visite sonhos!', 'Visit dreams!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <DreamSelectionRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepDreamsSelection\n          table={state.table}\n          word={state.word}\n          onSubmitCards={onSubmitCards}\n          currentRound={state.round.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamsSelections;\n","import { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport { ImageBlurButton, ImageCard, ImageCardBack } from 'components/cards';\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\nimport { useCardWidth, useLoading } from 'hooks';\n\ntype PlayTableProps = {\n  table: GImageCard[];\n  onPlayCard: GenericFunction;\n  userCards: PlainObject;\n  isPlayAvailable: boolean;\n};\n\nexport function PlayTable({ table, onPlayCard, userCards, isPlayAvailable }: PlayTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  const { isLoading } = useLoading();\n\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = Boolean((userCards ?? {})[card.id]);\n        const userCardEntry = userCards[card.id];\n        if (card.used) {\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <ImageBlurButton cardId={card.id} />\n              <ImageCardBack\n                cardWidth={cardWidth - 6}\n                className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n              />\n              {userCardEntry.used && (\n                <div className=\"g-star-points\">\n                  {userCardEntry.score === 3 ? (\n                    <Icons.Star className=\"g-star g-star--super-spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--super-spark\" />\n                  )}\n                  {userCardEntry.score > 1 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                  {userCardEntry.score > 0 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                </div>\n              )}\n            </li>\n          );\n        }\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n            />\n            {isPlayAvailable && userCards[card.id] && (\n              <Button\n                shape=\"round\"\n                size=\"small\"\n                ghost\n                className=\"g-table-item-button\"\n                onClick={() => onPlayCard(card.id)}\n                disabled={isLoading}\n              >\n                <UpCircleOutlined />\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n                <UpCircleOutlined />\n              </Button>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\n\nimport { CardPlayRules } from './RulesBlobs';\nimport { PlayTable } from './PlayTable';\nimport { messageContent } from 'components/pop-up';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { AvatarName } from 'components/avatars';\nimport { PopoverRule } from 'components/rules';\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onPlayCard: GenericFunction;\n  user: GamePlayer;\n  activePlayer: GamePlayer;\n  isActivePlayer: boolean;\n};\n\nexport function StepPlayDream({\n  table,\n  word,\n  onPlayCard,\n  user,\n  activePlayer,\n  isActivePlayer,\n}: StepDreamsSelectionProps) {\n  const { translate } = useLanguage();\n\n  useEffect(() => {\n    if (isActivePlayer) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate(\n            'Selecione a carta-sonho que você acha que pelo menos um jogador vai dar match!',\n            'Select the dream card you think will match at least one player'\n          ),\n          activePlayer.id,\n          3\n        )\n      );\n    }\n  }, [isActivePlayer, activePlayer.id, translate]);\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <Translate pt=\"Bingo dos Sonhos\" en=\"Dream Bingo\" />\n      </Title>\n      <Card header={translate('Tema', 'Theme')} randomColor>\n        {word.text}\n      </Card>\n\n      <Instruction contained>\n        {isActivePlayer ? (\n          <Translate\n            pt=\"Selecione a carta-sonho que você acha que pelo menos um jogador vai dar match!\"\n            en=\"Select the dream card you think will match at least one player\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <AvatarName player={activePlayer} /> está selecionando um sonho.\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={activePlayer} /> is selecting a dream.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <PopoverRule content={<CardPlayRules />} />\n\n      <PlayTable\n        table={table}\n        onPlayCard={(cardId: string) => onPlayCard({ cardId })}\n        userCards={user.cards}\n        isPlayAvailable={isActivePlayer}\n      />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Divider } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { ImageCard } from 'components/cards';\nimport { TimedButton } from 'components/buttons';\nimport { AdminNextRoundButton } from 'components/admin';\n\ntype StepAnnounceDreamProps = {\n  latest: LatestInfo;\n  lastActivePlayer: GamePlayer;\n  activePlayer: GamePlayer;\n  setStep: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepAnnounceDream({\n  latest,\n  lastActivePlayer,\n  activePlayer,\n  setStep,\n  players,\n}: StepAnnounceDreamProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <AvatarName player={lastActivePlayer} />\n        <Translate pt=\"escolheu\" en=\"escolheu\" />\n      </Title>\n      <ImageCard imageId={latest.cardId} cardWidth={cardWidth} />\n      <Instruction contained>\n        <MatchCount matchCount={latest.matchCount} lastActivePlayer={lastActivePlayer} />\n        {latest.matchCount > 1 && (\n          <div>\n            <h2 className=\"g-announce-title\">\n              <Translate pt=\"Ganharam pontos:\" en=\"Got points:\" />\n            </h2>\n            <ListPlayers\n              players={players}\n              listPlayersIds={latest.matchedPlayers}\n              className=\"g-matched-players-list\"\n            />\n          </div>\n        )}\n        <Divider />\n        {latest.fallenPlayers.length > 1 && (\n          <div>\n            <h2 className=\"g-announce-title\">\n              <Translate\n                pt=\"Jogadores que usaram todos os sonhos:\"\n                en=\"Players who used all of their dreams:\"\n              />\n            </h2>\n            <ListPlayers\n              players={players}\n              listPlayersIds={latest.matchedPlayers}\n              className=\"g-fallen-players-list\"\n            />\n          </div>\n        )}\n        <Divider />\n\n        <div>\n          <h2 className=\"g-announce-title\">\n            <Translate pt=\"Próximo jogador:\" en=\"Next player\" />\n          </h2>\n          <div>\n            <AvatarName player={activePlayer} addressUser size=\"large\" />\n          </div>\n        </div>\n      </Instruction>\n\n      {latest.cardsLeft > 0 ? (\n        <TimedButton disabled duration={15} onExpire={() => setStep(2)}>\n          <Translate pt=\"Continuando em...\" en=\"Continuing in...\" />\n        </TimedButton>\n      ) : (\n        <AdminNextRoundButton buttonText=\"Ranking\" />\n      )}\n    </Step>\n  );\n}\n\ntype MatchCountProps = {\n  matchCount: number;\n  lastActivePlayer: GamePlayer;\n};\n\nfunction MatchCount({ matchCount, lastActivePlayer }: MatchCountProps) {\n  const isSpark = matchCount > 0;\n  const isSuperSpark = matchCount === 1;\n  const isRegularSpark = matchCount > 1;\n\n  return (\n    <div>\n      {isSpark ? (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">E deu match!</h2>\n              {isSuperSpark &&\n                `Somente ${matchCount} jogador visitou a mesma carta! Brilharam! 3 pontos para cada!`}\n              {isRegularSpark && `${matchCount} jogadores visitaram a mesma carta! 2 pontos para cada.`}\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">It's a match!</h2>\n              {isSuperSpark &&\n                `Only ${matchCount} player visited the same card! Super spark! Each gets 3 points!`}\n              {isRegularSpark && `${matchCount} players visited the same card! Each gets 2 points.`}\n            </>\n          }\n        />\n      ) : (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">Vixi...</h2>\n              Não sei o que dizer... Ninguém visitou essa carta e{' '}\n              <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> está fora da rodada (suas\n              cartas restantes ainda contaram pontos para outros jogadores).\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">Oops...</h2>I don't know what to say... no one has visited this\n              card and <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> is/are out of the\n              round (your remaining cards still count towards scoring for other players).\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n\ntype ListPlayersProps = {\n  listPlayersIds: PlayerId[];\n  players: GamePlayers;\n  className: string;\n};\n\nfunction ListPlayers({ listPlayersIds, players, className }: ListPlayersProps) {\n  return (\n    <ul className={className}>\n      {listPlayersIds.map((playerId) => (\n        <li key={`${className}-${playerId}`}>\n          <AvatarName player={players[playerId]} addressUser />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useWhichPlayerIsThe, useStep } from 'hooks';\nimport { useOnPlayCardAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, PhaseTimerReset } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Instruction } from 'components/text';\n\nimport { CardPlayRules } from './RulesBlobs';\nimport { StepPlayDream } from './StepPlayDream';\nimport { StepAnnounceDream } from './StepAnnounceDream';\n\nfunction PhaseCardPlay({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const [activePlayer, isActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [lastActivePlayer] = useWhichPlayerIsThe('lastActivePlayerId', state, players);\n  const [playerInTheDark] = useWhichPlayerIsThe('playerHavingNightmareId', state, players);\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  useEffect(() => {\n    if (state.turnCount > 0) {\n      setStep(3);\n    }\n  }, [state.turnCount, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.CARD_PLAY}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"door-sign\"\n          title={translate('Hora do Bingo dos Sonhos!', 'Time for the Dream Bingo!')}\n          onClose={() => setStep(playerInTheDark.id ? 1 : 3)}\n          duration={state.round.current < 3 ? 20 : 5}\n        >\n          <CardPlayRules />\n        </PhaseAnnouncement>\n\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"nightmare\"\n          title={\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInTheDark} size=\"large\" addressUser /> está em apuros!\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInTheDark} size=\"large\" addressUser /> is in danger!\n                </>\n              }\n            />\n          }\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quanto um jogador sozinho selecionou o maior número de sonhos, ele é considerado estar tendo um pesadelo! Se ele não conseguir achar outro jogador que marcou o mesmo sonho para cada uma das cartas selecionadas, ele perde 1 ponto por carta.\"\n              en=\"When a player alone selected the most dream cards they are considered to be having a nightmare! If they are not able to match every single dream, they will lose 1 point per card.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepPlayDream\n          table={state.table}\n          word={state.word}\n          onPlayCard={onPlayCard}\n          user={user}\n          activePlayer={activePlayer}\n          isActivePlayer={isActivePlayer}\n        />\n\n        {/* Step 3 */}\n        <StepAnnounceDream\n          latest={state.latest}\n          lastActivePlayer={lastActivePlayer}\n          setStep={setStep}\n          players={players}\n          activePlayer={activePlayer}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseResolution({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.RESOLUTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"sleep\"\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          TODO\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <div>Resolution comes here</div>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Components\nimport { GameOverWrapper } from 'components/game-over';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseDreamsSelection from './PhaseDreamsSelections';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionGaleriaDeSonhos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.GALERIA_DE_SONHOS.WORD_SELECTION:\n        return PhaseWordSelection;\n      case PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION:\n        return PhaseDreamsSelection;\n      case PHASES.GALERIA_DE_SONHOS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.GALERIA_DE_SONHOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.GALERIA_DE_SONHOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionGaleriaDeSonhos;\n"],"names":["Team","team","players","className","pt","en","name","members","map","playerName","player","color","score","RoundAnnouncement","round","onPressButton","buttonText","time","teams","children","unskippable","circleColor","translate","useLanguage","clsx","Boolean","A","src","roundTitlePt","roundTitleEn","alt","getAnimationClass","current","type","onClick","onExpire","duration","showTimer","disabled","custom","B","WordSelectionRules","scout","addressUser","size","GeneralRules","contained","DreamSelectionRules","DreamSelectionExtendedRules","CardPlayRules","StepWordSelection","onSubmitWord","words","fullWidth","align","word","index","wordId","id","header","LETTERS","randomColor","text","state","info","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheScout","request","useAPICall","apiFunction","GALERIA_DE_SONHOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitWordAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstructionType","title","onClose","currentRound","orCondition","instruction","SelectTable","table","onSelectCard","selectedCards","cardWidth","useCardWidth","card","isSelected","style","width","cardId","imageId","shape","ghost","UpCircleOutlined","validateSelectedCards","v","Object","keys","length","StepDreamsSelection","onSubmitCards","useBooleanDictionary","selectedCount","level","content","cardsIds","useOnSubmitCardsAPIRequest","PlayTable","onPlayCard","userCards","isPlayAvailable","isLoading","useLoading","userCardEntry","used","StepPlayDream","user","activePlayer","isActivePlayer","useEffect","message","messageContent","cards","StepAnnounceDream","latest","lastActivePlayer","MatchCount","matchCount","ListPlayers","listPlayersIds","matchedPlayers","fallenPlayers","cardsLeft","isSpark","isSuperSpark","isRegularSpark","playerId","useUser","playerInTheDark","useOnPlayCardAPIRequest","turnCount","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseDreamsSelection","PhaseCardPlay","PhaseResolution","PhaseGameOver","PageError"],"sourceRoot":""}