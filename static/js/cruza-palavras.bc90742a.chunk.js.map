{"version":3,"file":"static/js/cruza-palavras.bc90742a.chunk.js","mappings":"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","sources":["components/icons/GridIcon.tsx","components/icons/GuessIcon.tsx","components/icons/RankIcon.tsx","components/icons/TrophyIcon.tsx","games/cruza-palavras/components/WordGrid.tsx","games/cruza-palavras/components/PreviousClue.tsx","games/cruza-palavras/components/WordForm.tsx","games/cruza-palavras/components/WritingCell.tsx","games/cruza-palavras/components/RulesBlobs.tsx","games/cruza-palavras/StepClueWriting.tsx","games/cruza-palavras/PhaseClueWriting.tsx","games/cruza-palavras/utils/api-requests.ts","games/cruza-palavras/utils/helpers.ts","games/cruza-palavras/components/ClueCard.tsx","games/cruza-palavras/components/SelectableCell.tsx","games/cruza-palavras/components/Clues.tsx","games/cruza-palavras/StepGuessing.tsx","games/cruza-palavras/PhaseGuessing.tsx","games/cruza-palavras/StepReveal.tsx","games/cruza-palavras/StepRanking.tsx","games/cruza-palavras/PhaseReveal.tsx","games/cruza-palavras/PhaseGameOver.tsx","games/cruza-palavras/SessionCruzaPalavras.tsx"],"sourcesContent":["export function GridIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f9ad32\"\n        d=\"M50.624 50.623h410.752v410.754H50.624V50.623zm40.624 40.625v329.504h329.505V91.248H91.248z\"\n      ></path>\n      <path\n        fill=\"#f0f0fb\"\n        d=\"M91.25 91.25h329.5v329.5H91.25zM420.75 10H502v81.25h-81.25zM10 10h81.25v81.25H10zm0 410.75h81.25V502H10zm410.75 0H502V502h-81.25z\"\n      ></path>\n      <path d=\"M451.376 139.434v.475c0 5.522 4.477 10 10 10s10-4.478 10-10v-.475c0-5.522-4.477-10-10-10s-10 4.477-10 10zm-78.809 311.943h-.475c-5.523 0-10 4.478-10 10s4.477 10 10 10h.475c5.523 0 10-4.478 10-10s-4.477-10-10-10zM60.624 372.566v-.475c0-5.522-4.477-10-10-10s-10 4.478-10 10v.475c0 5.522 4.477 10 10 10 5.522 0 10-4.477 10-10zm78.809-311.943h.475c5.523 0 10-4.477 10-10s-4.477-10-10-10h-.475c-5.523 0-10 4.478-10 10s4.477 10 10 10z\"></path>\n      <path d=\"M512 91.248V10c0-5.522-4.477-10-10-10h-81.247c-5.523 0-10 4.478-10 10v30.623H168.992c-5.523 0-10 4.478-10 10s4.477 10 10 10h241.761v20.625H101.248V10c0-5.522-4.477-10-10-10H10C4.477 0 0 4.478 0 10v81.248c0 5.523 4.477 10 10 10h30.623v241.76c0 5.522 4.477 10 10 10s10-4.478 10-10v-241.76h20.624v309.504H10c-5.523 0-10 4.478-10 10V502c0 5.522 4.477 10 10 10h81.248c5.523 0 10-4.478 10-10v-30.623h241.76c5.523 0 10-4.478 10-10s-4.477-10-10-10c0 0 .001 0 0 0h-241.76v-20.625h309.505V502c0 5.522 4.477 10 10 10H502c5.523 0 10-4.478 10-10v-81.248c0-5.522-4.477-10-10-10h-30.623v-241.76c0-5.522-4.477-10-10-10s-10 4.478-10 10v241.76h-20.624V101.248H502c5.523 0 10-4.477 10-10zM410.752 410.752h-62.376v-62.377h62.376v62.377zM101.248 101.248h62.377v62.375h-62.377v-62.375zM348.376 266h62.376v62.375h-62.376V266zm-20 62.375H266V266h62.376v62.375zm20-82.375v-62.377h62.376V246h-62.376zm-20 0H266v-62.377h62.376V246zm-144.751-62.377h62.376V246h-62.376v-62.377zm-20 62.377h-62.377v-62.377h62.377V246zm102.376-82.377v-62.375h62.376v62.375h-62.376zm-20 0h-62.376v-62.375h62.376v62.375zM101.248 266h62.377v62.375h-62.377V266zm82.377 0h62.376v62.375h-62.376V266zm62.376 82.375v62.377h-62.376v-62.377h62.376zm20 0h62.376v62.377h-62.376v-62.377zm144.751-184.752h-62.376v-62.375h62.376v62.375zm-360.128-123c-5.523 0-10 4.478-10 10v30.625H20V20h61.248v61.248H60.624V50.623c0-5.522-4.478-10-10-10zm0 430.754h30.624V492H20v-61.248h61.248v20.625H50.624c-5.523 0-10 4.478-10 10s4.477 10 10 10zm50.624-123.002h62.377v62.377h-62.377v-62.377zm360.128 123.002c5.523 0 10-4.478 10-10v-30.625H492V492h-61.247v-61.248h20.624v30.625c-.001 5.522 4.476 10 9.999 10zM492 81.248h-61.247V60.623h30.624c5.523 0 10-4.477 10-10s-4.477-10-10-10h-30.624V20H492v61.248z\"></path>\n    </svg>\n  );\n}\n","export function GuessIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ff7b79\"\n        d=\"M440.447 428.072c16.619-20.939 26.55-47.426 26.55-76.235 0-10.548-1.332-20.784-3.835-30.552C486.593 305.468 502 278.671 502 248.273c0-46.528-36.106-84.599-81.824-87.786 8.812-12.864 13.976-28.424 13.976-45.194 0-44.226-35.853-80.079-80.079-80.079-16.63 0-32.075 5.072-44.876 13.75C291.326 25.298 262.961 10 231.021 10c-52.976 0-96.118 42.078-97.843 94.635a90.44 90.44 0 00-20.196-2.297c-49.845 0-90.252 40.407-90.252 90.252 0 23.113 8.698 44.187 22.987 60.153C24.019 269.226 10 295.294 10 324.644c0 49.845 40.407 90.252 90.252 90.252a89.959 89.959 0 0034.438-6.82c7.846 41.85 44.552 73.528 88.68 73.528 23.152 0 44.26-8.727 60.236-23.059 17.893 10.194 38.596 16.021 60.662 16.021 13.373 0 26.243-2.147 38.293-6.101C397.207 488.77 421.051 502 448 502a80.272 80.272 0 0036.406-8.691c-24.354-12.346-41.598-36.675-43.959-65.237z\"\n      ></path>\n      <path\n        fill=\"#80b4ff\"\n        d=\"M256 321.511c-12.15 0-22-9.85-22-22v-29.93c0-20.685 13.741-39.232 33.416-45.103 17.141-5.115 28.817-21.21 28.395-39.14-.492-20.923-17.915-38.346-38.837-38.838-10.842-.264-21.061 3.765-28.795 11.319-7.739 7.559-12.001 17.677-12.001 28.491 0 12.15-9.85 22-22 22s-22-9.85-22-22c0-22.763 8.969-44.061 25.256-59.968 16.282-15.904 37.795-24.35 60.575-23.831 21.541.507 41.857 9.239 57.205 24.586 15.347 15.347 24.079 35.663 24.586 57.205.888 37.708-23.704 71.567-59.802 82.339-1.157.345-1.997 1.582-1.997 2.94v29.93c-.001 12.15-9.851 22-22.001 22z\"\n      ></path>\n      <circle cx=\"256\" cy=\"387.511\" r=\"22\" fill=\"#80b6ff\"></circle>\n      <path d=\"M448 512c-26.624 0-51.955-11.846-69.1-32.008a132.764 132.764 0 01-34.632 4.574c-20.67 0-41.073-4.833-59.431-14.027a100.05 100.05 0 01-61.467 21.065c-44.32 0-82.912-29.039-95.741-70.502a99.87 99.87 0 01-27.377 3.794c-14.572 0-28.629-3.061-41.78-9.097-5.02-2.304-7.221-8.241-4.917-13.26 2.304-5.02 8.239-7.223 13.26-4.917 10.515 4.826 21.765 7.273 33.437 7.273 10.584 0 20.886-2.04 30.619-6.061a9.997 9.997 0 0113.648 7.399c7.1 37.878 40.262 65.371 78.851 65.371a80.093 80.093 0 0053.559-20.503 10.002 10.002 0 0111.628-1.245c16.892 9.624 36.156 14.71 55.711 14.71 12.011 0 23.846-1.885 35.175-5.603a10 10 0 0111.228 3.651C403.942 481.015 425.374 492 448 492a70.69 70.69 0 0014.335-1.451c-18.115-15.394-29.869-37.631-31.854-61.653a9.998 9.998 0 012.133-7.04c15.951-20.097 24.382-44.309 24.382-70.019 0-9.505-1.185-18.949-3.522-28.07a10 10 0 014.092-10.77C479.128 298.442 492 274.247 492 248.273c0-40.797-31.854-74.976-72.519-77.811a10 10 0 01-7.555-15.627c7.998-11.676 12.226-25.349 12.226-39.542 0-38.642-31.437-70.079-70.079-70.079-14.081 0-27.659 4.159-39.265 12.027a10 10 0 01-13.592-2.251C284.425 32.753 258.84 20 231.021 20c-47.698 0-86.285 37.32-87.849 84.963a10 10 0 01-12.224 9.421 80.714 80.714 0 00-17.966-2.045c-44.251 0-80.252 36-80.252 80.251a80.105 80.105 0 0020.438 53.485 10 10 0 01-1.403 14.631C31.578 276.042 20 299.346 20 324.644c0 3.576.237 7.171.704 10.684.728 5.475-3.12 10.503-8.595 11.23-5.479.732-10.503-3.12-11.231-8.595A101.374 101.374 0 010 324.644c0-28.153 11.475-54.328 31.801-73.246a100.049 100.049 0 01-19.071-58.809c0-55.279 44.973-100.251 100.252-100.251 3.716 0 7.446.211 11.165.631 3.278-23.739 14.329-45.625 31.771-62.539C176.155 10.807 202.827 0 231.021 0c31.109 0 59.94 12.989 80.405 35.933 13.057-7.035 27.633-10.718 42.647-10.718 49.67 0 90.079 40.409 90.079 90.079 0 13.063-2.789 25.788-8.148 37.475C479.656 162.844 512 202.2 512 248.273a97.95 97.95 0 01-37.623 77.212 133.55 133.55 0 012.62 26.352c0 28.874-9.034 56.146-26.172 79.144 3.133 22.718 17.472 42.95 38.104 53.409a10 10 0 010 17.838C476.138 508.712 462.368 512 448 512z\"></path>\n      <path d=\"M256 331.511c-17.645 0-32-14.355-32-32v-29.93c0-25.072 16.677-47.56 40.557-54.686 12.832-3.829 21.573-15.887 21.257-29.322-.369-15.664-13.412-28.707-29.076-29.076-8.09-.192-15.773 2.812-21.572 8.476-5.796 5.661-8.988 13.239-8.988 21.337 0 17.645-14.355 32-32 32s-32-14.355-32-32c0-25.479 10.04-49.317 28.269-67.121 18.205-17.782 42.281-27.246 67.79-26.675 24.131.568 46.875 10.339 64.048 27.512s26.944 39.917 27.512 64.04c.951 40.387-24.216 76.83-61.796 90.458v24.985C288 317.156 273.645 331.511 256 331.511zm-.035-195.023c.417 0 .833.005 1.252.015 26.173.616 47.975 22.417 48.591 48.6.528 22.425-14.083 42.558-35.532 48.958-15.471 4.616-26.276 19.223-26.276 35.52v29.93c0 6.617 5.383 12 12 12s12-5.383 12-12v-29.93c0-5.768 3.758-10.917 9.139-12.522 31.789-9.486 53.445-39.308 52.663-72.521-.447-18.96-8.139-36.848-21.66-50.369s-31.409-21.213-50.369-21.66c-20.078-.452-39.028 6.997-53.352 20.988-14.344 14.01-22.243 32.766-22.243 52.814 0 6.617 5.383 12 12 12s12-5.383 12-12c0-13.53 5.332-26.189 15.013-35.645 9.389-9.171 21.695-14.178 34.774-14.178zM256 419.511c-17.645 0-32-14.355-32-32s14.355-32 32-32 32 14.355 32 32-14.355 32-32 32zm0-44c-6.617 0-12 5.383-12 12s5.383 12 12 12 12-5.383 12-12-5.383-12-12-12zM27.71 388.35c-2.63 0-5.21-1.07-7.07-2.93a10.093 10.093 0 01-2.93-7.07c0-2.64 1.07-5.211 2.93-7.08a10.068 10.068 0 017.07-2.92c2.63 0 5.21 1.06 7.07 2.92s2.93 4.44 2.93 7.08c0 2.63-1.07 5.21-2.93 7.07s-4.44 2.93-7.07 2.93z\"></path>\n    </svg>\n  );\n}\n","export function RankIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fb5f7a\"\n        d=\"M305.709 123.258L256 87.857l-49.709 35.401a24.745 24.745 0 00-10.391 20.157v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.746 24.746 0 00-10.392-20.157z\"\n      ></path>\n      <path\n        fill=\"#f74455\"\n        d=\"M316.1 143.42v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67L256 87.86l49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"256\" cy=\"53.83\" r=\"46.33\" fill=\"#fb5f7a\"></circle>\n      <path\n        fill=\"#f74455\"\n        d=\"M302.33 53.83c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83S259.13 16.26 240.94 10c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#99e6fc\"\n        d=\"M395.942 258.439l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M406.333 278.601v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"346.233\" cy=\"189.011\" r=\"46.33\" fill=\"#99e6fc\"></circle>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M392.563 189.011c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#99e6fc\"\n        d=\"M215.477 258.439l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.752 24.752 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M225.867 278.601v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"165.767\" cy=\"189.011\" r=\"46.33\" fill=\"#99e6fc\"></circle>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M212.097 189.011c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M486.175 409.962l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M496.566 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"436.466\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M482.796 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M305.709 409.962L256 374.561l-49.709 35.401A24.746 24.746 0 00195.9 430.12v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M316.1 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"256\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M302.33 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M125.244 409.962l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.75 24.75 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M135.634 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"75.534\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M121.864 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path d=\"M490.525 403.853l-25.175-17.929c14.982-9.568 24.946-26.332 24.946-45.389 0-29.682-24.148-53.83-53.83-53.83a53.5 53.5 0 00-22.632 5.006v-13.115a32.308 32.308 0 00-13.541-26.267l-25.177-17.928c14.983-9.568 24.948-26.332 24.948-45.39 0-29.682-24.148-53.83-53.831-53.83a53.497 53.497 0 00-22.801 5.083c-.909-9.214-5.756-17.692-13.372-23.115L284.884 99.22c14.983-9.568 24.946-26.332 24.946-45.389C309.83 24.148 285.682 0 256 0s-53.83 24.148-53.83 53.831c0 19.059 9.965 35.824 24.95 45.392l-25.18 17.926c-7.616 5.424-12.463 13.902-13.372 23.115a53.49 53.49 0 00-22.801-5.083c-5.992 0-11.881.979-17.501 2.911a7.499 7.499 0 104.875 14.185 38.767 38.767 0 0112.626-2.097c21.411 0 38.83 17.419 38.83 38.83s-17.419 38.831-38.83 38.831-38.831-17.419-38.831-38.831c0-6.247 1.436-12.208 4.268-17.717a7.5 7.5 0 10-13.342-6.856c-3.877 7.544-5.926 16.041-5.926 24.574 0 19.059 9.965 35.824 24.95 45.392l-25.18 17.926a32.306 32.306 0 00-13.541 26.267v13.115a53.485 53.485 0 00-22.632-5.006c-29.682 0-53.83 24.148-53.83 53.83 0 19.057 9.963 35.821 24.946 45.389l-25.175 17.929a32.304 32.304 0 00-13.54 26.267v54.673C7.934 499.795 20.139 512 35.141 512h80.787c15.002 0 27.207-12.205 27.207-27.208v-11.664c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v11.664c0 6.731-5.476 12.208-12.207 12.208H35.141c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.276 17.276 0 017.242-14.048l32.632-23.239c6.901 1.642 16.289 2.274 25.454 0l32.631 23.24a17.276 17.276 0 017.242 14.048v7.251c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-7.251a32.303 32.303 0 00-13.541-26.267l-25.175-17.929c9.444-6.032 16.886-14.922 21.1-25.447h80.468c4.215 10.526 11.656 19.416 21.101 25.447l-25.176 17.929a32.303 32.303 0 00-13.54 26.267v54.673c0 15.002 12.205 27.208 27.207 27.208h80.787c15.002 0 27.207-12.205 27.207-27.208V430.12a32.303 32.303 0 00-13.541-26.267l-25.175-17.929c14.982-9.568 24.946-26.332 24.946-45.389 0-15.033-6.201-28.639-16.171-38.414v-23.524a17.28 17.28 0 017.241-14.048l32.641-23.238c6.899 1.641 16.281 2.271 25.442-.001l32.635 23.238a17.282 17.282 0 017.242 14.049v23.498c-9.986 9.778-16.198 23.394-16.198 38.44 0 1.667.087 3.313.236 4.942h-44.226c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h47.836c4.215 10.526 11.656 19.416 21.1 25.447l-25.175 17.929a32.303 32.303 0 00-13.541 26.267v54.673c0 15.002 12.205 27.208 27.207 27.208h80.787c15.002 0 27.207-12.205 27.207-27.208V430.12c0-10.41-5.062-20.23-13.541-26.267zM217.17 53.831C217.17 32.419 234.589 15 256 15s38.83 17.419 38.83 38.831-17.419 38.83-38.83 38.83-38.83-17.419-38.83-38.83zm-13.771 96.74v-7.156a17.274 17.274 0 017.241-14.047l32.641-23.238c6.9 1.641 16.282 2.271 25.445-.002l32.632 23.24a17.275 17.275 0 017.242 14.048v7.156c-9.986 9.778-16.198 23.394-16.198 38.44a53.53 53.53 0 004.389 21.27c-1.4.029-80.329.028-81.583 0a53.525 53.525 0 004.389-21.269c.001-15.048-6.212-28.665-16.198-38.442zM36.704 340.535c0-21.411 17.419-38.83 38.83-38.83s38.83 17.419 38.83 38.83-17.419 38.831-38.83 38.831-38.83-17.42-38.83-38.831zm92.424 4.942c1.766-14.97-5.012-33.199-15.962-43.382v-23.498a17.28 17.28 0 017.241-14.048l32.641-23.238c6.899 1.641 16.282 2.272 25.445-.002l32.632 23.239a17.282 17.282 0 017.242 14.049v23.471c-10.717 10.473-17.63 26.704-15.99 43.409zm172.203 70.594a17.276 17.276 0 017.242 14.048v54.673c0 6.731-5.476 12.208-12.207 12.208h-80.787c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.278 17.278 0 017.241-14.048l32.633-23.239c6.9 1.642 16.288 2.274 25.453 0zm-6.528-75.536c0 21.411-17.419 38.831-38.83 38.831-21.31-.228-38.682-17.17-38.831-38.831 0-21.411 17.42-38.83 38.831-38.83s38.83 17.419 38.83 38.83zm-2.63-88.205a32.306 32.306 0 00-13.541 26.267v13.127a53.485 53.485 0 00-22.659-5.019 53.484 53.484 0 00-22.604 4.994v-13.102a32.308 32.308 0 00-13.541-26.267l-25.175-17.929a54.259 54.259 0 0012.134-10.586 27.154 27.154 0 008.82 1.481h80.787c3.033 0 6.002-.516 8.82-1.482a54.225 54.225 0 0012.139 10.589zm15.229-63.319c0-21.411 17.419-38.83 38.83-38.83s38.831 17.419 38.831 38.83-17.42 38.831-38.831 38.831-38.83-17.42-38.83-38.831zm129.064 112.694c21.411 0 38.83 17.419 38.83 38.83s-17.419 38.831-38.83 38.831-38.83-17.419-38.83-38.831 17.419-38.83 38.83-38.83zm52.6 183.087c0 6.731-5.476 12.208-12.207 12.208h-80.787c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.276 17.276 0 017.242-14.048l32.632-23.239c6.901 1.642 16.288 2.274 25.453 0l32.631 23.24a17.276 17.276 0 017.242 14.048v54.671z\"></path>\n    </svg>\n  );\n}\n","export function TrophyIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M397.763 87.5h-98.509v213.476h98.509c58.855 0 106.737-47.882 106.737-106.738S456.618 87.5 397.763 87.5zm0 183.476h-68.509V117.5h68.509c42.381 0 76.738 34.357 76.738 76.738-.001 42.381-34.357 76.738-76.738 76.738zM114.237 87.5C55.382 87.5 7.5 135.382 7.5 194.238s47.882 106.738 106.737 106.738h98.509V87.5zm68.509 183.476h-68.509c-42.381 0-76.738-34.357-76.738-76.738S71.856 117.5 114.237 117.5h68.509zM314 419.5H198l15-91h86z\"\n      ></path>\n      <path fill=\"#fee97d\" d=\"M299 328.5h-30l15 91h30z\"></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M382.221 504.5H129.779a7 7 0 01-7-7v-11.629c0-22.091 17.909-40 40-40h186.442c22.091 0 40 17.909 40 40V497.5a7 7 0 01-7 7z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M349.221 445.871h-30c22.092 0 40 17.909 40 40V497.5a7 7 0 01-7 7h30a7 7 0 007-7v-11.629c0-22.092-17.909-40-40-40zm-5 0H167.779v-3.629c0-22.091 17.909-40 40-40h96.442c22.091 0 40 17.909 40 40z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M304.221 402.241h-30c22.092 0 40 17.909 40 40v3.629h30v-3.629c0-22.091-17.909-40-40-40z\"\n      ></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M411.5 57.5h-311c-13.807 0-25-11.193-25-25s11.193-25 25-25h311c13.807 0 25 11.193 25 25s-11.193 25-25 25z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M411.5 7.5h-30c13.807 0 25 11.193 25 25s-11.193 25-25 25h30c13.807 0 25-11.193 25-25s-11.193-25-25-25zM256 362.5c-83.119 0-150.5-67.381-150.5-150.5V57.5h301V212c0 83.119-67.381 150.5-150.5 150.5z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M376.5 57.5V212c0 78.056-59.424 142.229-135.5 149.757 4.934.488 9.937.743 15 .743 83.119 0 150.5-67.381 150.5-150.5V57.5z\"\n      ></path>\n      <circle cx=\"256\" cy=\"207.96\" r=\"94.169\" fill=\"#fff\"></circle>\n      <path\n        fill=\"#fee97d\"\n        d=\"M262.277 154.391l13.139 26.623a7 7 0 005.271 3.829l29.38 4.269c5.742.834 8.034 7.89 3.879 11.94l-21.26 20.723a6.998 6.998 0 00-2.013 6.196l5.019 29.261c.981 5.718-5.021 10.079-10.157 7.379l-26.278-13.815a7.001 7.001 0 00-6.515 0l-26.278 13.815c-5.135 2.7-11.137-1.661-10.157-7.379l5.019-29.261a7 7 0 00-2.013-6.196l-21.26-20.723c-4.155-4.05-1.862-11.106 3.879-11.94l29.38-4.269a7 7 0 005.271-3.829l13.139-26.623c2.569-5.203 9.987-5.203 12.555 0z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M313.946 201.052c4.155-4.05 1.862-11.106-3.88-11.94l-29.38-4.269a6.997 6.997 0 01-5.27-3.829l-13.139-26.623c-2.568-5.203-9.987-5.203-12.554 0l-10.888 22.061 3.874 7.85a18.632 18.632 0 0014.03 10.193c15.284 2.221 21.386 21.003 10.327 31.783a18.632 18.632 0 00-5.359 16.493l1.755 10.236 22.073 11.604c5.135 2.7 11.137-1.661 10.157-7.379l-5.019-29.261a7 7 0 012.013-6.196z\"\n      ></path>\n      <path d=\"M282.025 177.458l-13.022-26.387c-2.462-4.985-7.443-8.082-13.003-8.082s-10.541 3.097-13.003 8.083l-13.022 26.387-29.119 4.231c-5.502.799-9.987 4.581-11.706 9.868-1.718 5.288-.312 10.983 3.669 14.865l21.071 20.539-4.975 29.003c-.939 5.479 1.271 10.914 5.77 14.182s10.349 3.691 15.271 1.104L256 257.557l26.045 13.693c4.903 2.578 10.759 2.174 15.271-1.104 4.498-3.268 6.709-8.702 5.769-14.182l-4.974-29.003 21.071-20.539c3.981-3.881 5.387-9.577 3.669-14.865-1.719-5.287-6.204-9.068-11.706-9.867zm5.426 38.946a14.494 14.494 0 00-4.169 12.834l4.847 28.264-25.382-13.345a14.498 14.498 0 00-13.495 0l-25.381 13.344 4.847-28.262a14.495 14.495 0 00-4.169-12.835l-20.534-20.016 28.377-4.124a14.494 14.494 0 0010.918-7.932L256 158.618l12.69 25.714a14.494 14.494 0 0010.918 7.932l28.377 4.124zm194.096-99.749c-17.941-19.36-41.716-31.799-67.547-35.49v-16.27c16.756-1.282 30-15.316 30-32.394C444 14.58 429.421 0 411.5 0h-311C82.579 0 68 14.58 68 32.5c0 17.078 13.244 31.112 30 32.394v16.27c-25.714 3.676-49.409 16.029-67.321 35.248a7.5 7.5 0 0010.972 10.228C56.721 110.471 76.495 99.908 98 96.352v15.236c-39.204 7.62-68 42.024-68 82.652 0 22.509 8.765 43.663 24.675 59.561 15.532 15.543 36.076 24.242 57.996 24.641a157.847 157.847 0 008.007 15.038h-6.438c-54.722 0-99.24-44.519-99.24-99.24 0-14.091 2.904-27.711 8.633-40.48a7.5 7.5 0 00-13.685-6.14C3.347 162.333 0 178.019 0 194.24c0 62.992 51.248 114.24 114.24 114.24h16.729c17.756 22.957 41.679 40.906 69.267 51.348l-6.089 36.917c-18.396 5.522-32.123 21.915-33.701 41.685-25.112 1.221-45.167 22.032-45.167 47.441V497.5c0 7.995 6.505 14.5 14.5 14.5H382.22c7.995 0 14.5-6.505 14.5-14.5v-11.629c0-25.409-20.055-46.22-45.167-47.441-1.579-19.771-15.306-36.163-33.701-41.685l-6.089-36.917c27.588-10.441 51.511-28.391 69.267-51.348h16.729c62.992 0 114.24-51.248 114.24-114.24.001-28.841-10.814-56.394-30.452-77.585zM65.281 243.195C52.203 230.126 45 212.74 45 194.24c0-32.392 22.265-59.968 53-67.308V212c0 17.851 2.98 35.018 8.461 51.034-15.554-1.728-29.958-8.609-41.18-19.839zM100.5 50C90.851 50 83 42.149 83 32.5S90.851 15 100.5 15h311c9.649 0 17.5 7.851 17.5 17.5S421.149 50 411.5 50zM414 126.932c30.735 7.34 53 34.916 53 67.308 0 18.5-7.203 35.886-20.286 48.958-11.218 11.227-25.621 18.108-41.175 19.836C411.02 247.018 414 229.851 414 212zm-77.518 311.439h-22.895c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h35.634c17.921 0 32.5 14.58 32.5 32.5V497H130.279v-11.129c0-17.92 14.579-32.5 32.5-32.5h115.808c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5H175.518c1.921-16.101 15.651-28.629 32.261-28.629h96.441c16.611-.001 30.342 12.527 32.262 28.629zm-126.801-43.63l4.987-30.237C227.849 368.08 241.703 370 256 370s28.151-1.92 41.332-5.496l4.987 30.237zM256 355c-78.851 0-143-64.149-143-143V65h286v147c0 78.851-64.149 143-143 143zm141.76-61.52h-6.438a157.741 157.741 0 008.007-15.038c21.919-.399 42.463-9.097 57.991-24.637C473.235 237.903 482 216.749 482 194.24c0-40.627-28.796-75.032-68-82.652V96.352c21.605 3.57 41.449 14.208 56.545 30.498C487.604 145.259 497 169.192 497 194.24c0 54.721-44.519 99.24-99.24 99.24zM256 106.291c-56.061 0-101.67 45.609-101.67 101.669S199.939 309.629 256 309.629 357.67 264.02 357.67 207.96 312.061 106.291 256 106.291zm0 188.338c-47.79 0-86.67-38.88-86.67-86.669s38.88-86.669 86.67-86.669 86.67 38.88 86.67 86.669-38.88 86.669-86.67 86.669z\"></path>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n\ntype WordGridProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  CellComponent: any;\n  cellComponentProps: any;\n};\n\nexport function WordGrid({ grid, user, CellComponent, cellComponentProps = {} }: WordGridProps) {\n  const length = Math.sqrt(grid.length);\n\n  const gridStyle = {\n    gridTemplateColumns: `repeat(${length}, 1fr)`,\n    gridTemplateRows: `repeat(${length}, auto)`,\n  };\n\n  return (\n    <div className=\"x-grid\" style={gridStyle}>\n      {grid.map((cell) => (\n        <div className={clsx('x-grid-cell', `x-grid-cell--${cell.kind}`)} key={`${cell.index}-${cell.kind}`}>\n          {cell.kind === 'header' && cell.text}\n\n          {cell.kind === 'cell' && <CellComponent {...cellComponentProps} cell={cell} user={user} />}\n        </div>\n      ))}\n    </div>\n  );\n}\n","type PreviousClueProps = {\n  clue: string;\n};\n\nexport function PreviousClue({ clue }: PreviousClueProps) {\n  return <div className=\"x-previous-clue\">{clue}</div>;\n}\n","import { useEffect, useRef, useState } from 'react';\n//Design Resources\nimport { Button, Input, InputRef, Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { Translate } from 'components/language';\n\ntype WordFormProps = {\n  x: string;\n  y: string;\n  onSubmit: GenericFunction;\n  disabled?: boolean;\n};\n\nexport function WordForm({ x, y, onSubmit, disabled }: WordFormProps) {\n  const [clue, setClue] = useState('');\n  const textInput = useRef<InputRef | null>(null);\n\n  const onChange = (e: any) => {\n    setClue(e.target.value);\n  };\n\n  useEffect(() => textInput && textInput.current!.focus(), []);\n\n  // DEV: Submit made-up words\n  useMock(() => {\n    onSubmit(`${x.substring(0, x.length / 2)}${y.substring(y.length / 2)}`);\n  }, []);\n\n  return (\n    <Space direction=\"vertical\">\n      <Input\n        ref={textInput}\n        placeholder={`${x} + ${y}`}\n        onChange={onChange}\n        onPressEnter={() => onSubmit(clue)}\n      />\n      <Button type=\"primary\" onClick={() => onSubmit(clue)} disabled={disabled || !clue.length}>\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n    </Space>\n  );\n}\n","//Design Resources\nimport { Button, Popover } from 'antd';\nimport { FormOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { PreviousClue } from './PreviousClue';\nimport { WordForm } from './WordForm';\n\ntype WritingCellProps = {\n  onSubmitClue: GenericFunction;\n  cell: CruzaPalavrasGridCell;\n  disabled?: boolean;\n  user: GamePlayer;\n};\n\nexport function WritingCell({ onSubmitClue, cell, user, disabled }: WritingCellProps) {\n  if (cell.writable && user.id === cell.playerId) {\n    return (\n      <Popover\n        content={<WordForm x={cell.xText ?? ''} y={cell.yText ?? ''} onSubmit={onSubmitClue} />}\n        title={<Translate pt=\"Escreva\" en=\"Write\" />}\n        trigger=\"click\"\n      >\n        <Button shape=\"circle\" type=\"primary\" disabled={disabled}>\n          <FormOutlined />\n        </Button>\n      </Popover>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return <></>;\n}\n","import { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\nexport function WritingCluesRule({ playerCount }: { playerCount: number }) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Você tem uma coordenada específica e única na grade de palavras.\n            <br />\n            Escreva uma dica (palavra única) que conecte as palavras da linha e da coluna assinalada a você.\n            <br />\n            Escreva algo bem simples e óbvio porque se ninguém entender você perderá {playerCount} pontos.\n          </>\n        }\n        en={\n          <>\n            You will get an unique coordinate in the word grid.\n            <br />\n            You must write a single word clue that connects the word in the column and in the row of your\n            coordinate.\n            <br />\n            Write something simple and obvious because if nobody gets your clue you will lose {\n              playerCount\n            }{' '}\n            points.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ScoringRule({ playerCount }: { playerCount: number }) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Você ganha 2 pontos para cada célula com uma resposta correta sua.\n            <br />\n            + 1 ponto para cada célula com uma dica mas uma resposta errada sua.\n            <br />\n            + 1 ponto para cada voto correto que sua dica recebeu.\n            <br />\n            Mas se ninguém acertar sua dica, você perde {playerCount} pontos.\n          </>\n        }\n        en={\n          <>\n            You get 2 points for each cell with your correct answer.\n            <br />\n            + 1 point for each cell with a clue but with a wrong answer of yours.\n            <br />\n            + 1 point for each correct vote your clue received.\n            <br />\n            But if nobody gets your clue correctly, you lose {playerCount} points.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { WordGrid } from './components/WordGrid';\nimport { WritingCell } from './components/WritingCell';\nimport { WritingCluesRule } from './components/RulesBlobs';\n\ntype StepClueWritingProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  onSubmitClue: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepClueWriting({ grid, user, onSubmitClue, players }: StepClueWritingProps) {\n  const { isLoading } = useLoading();\n\n  const onSubmitClueClick = (payload: string) => {\n    onSubmitClue({\n      clue: payload.trim().toLowerCase(),\n    });\n  };\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Escreva sua dica\" en=\"Write your clue\" />\n      </Title>\n\n      <PopoverRule content={<WritingCluesRule playerCount={Object.keys(players).length} />} />\n\n      <Instruction contained>\n        <Translate\n          pt=\"Clique no ícone azul e escreva sua dica. Sua dica deve conter apenas uma palavra.\"\n          en=\"Click on the blue icon and write your clue. Your clue must be a single word clue.\"\n        />\n      </Instruction>\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={WritingCell}\n        cellComponentProps={{ onSubmitClue: onSubmitClueClick, disabled: isLoading }}\n      />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitClueAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { RoundAnnouncement } from 'components/round';\nimport { StepSwitcher } from 'components/steps';\nimport { StepClueWriting } from './StepClueWriting';\nimport { WritingCluesRule } from './components/RulesBlobs';\nimport { GridIcon } from 'components/icons/GridIcon';\n\nfunction PhaseClueWriting({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const isUserReady = useIsUserReady(players, state);\n  const user = useUser(players);\n\n  const onSubmitClue = useOnSubmitClueAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.CLUE_WRITING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          circleColor=\"forest\"\n        />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<GridIcon />}\n          title={translate('Escreva!', 'Write!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WritingCluesRule playerCount={Object.keys(players).length} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepClueWriting user={user} grid={state.grid} onSubmitClue={onSubmitClue} players={players} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseClueWriting;\n","import { CRUZA_PALAVRAS_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitClueAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRUZA_PALAVRAS_API.submitAction,\n    actionName: 'submit-clue',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Dica enviada com sucesso', 'Clue submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua dica',\n      'Oops, the application failed to send your clue'\n    ),\n  });\n\n  return (payload: SubmitCluePayload) => {\n    request({\n      action: 'SUBMIT_CLUE',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRUZA_PALAVRAS_API.submitAction,\n    actionName: 'submit-guesses',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Respostas enviadas com sucesso', 'Guesses submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas respostas',\n      'Oops, the application failed to send your guesses'\n    ),\n  });\n\n  return (payload: SubmitGuessesPayload) => {\n    request({\n      action: 'SUBMIT_GUESSES',\n      ...payload,\n    });\n  };\n}\n","import { SEPARATOR } from 'utils/constants';\n\n/**\n * Checks if an instance is a clue\n * @param instance\n * @returns\n */\nexport const isClue = (instance?: any) => Boolean(instance?.clue);\n\n/**\n *\n * @param clueObj\n * @returns\n */\nexport const getClueKey = (clueObj?: CruzaPalavrasClue): string =>\n  `${clueObj?.clue}${SEPARATOR}${clueObj?.playerId}`;\n\n/**\n *\n * @param key\n * @returns\n */\nexport const getClueFromKey = (key: string): string[] => key.split(SEPARATOR) ?? ['', ''];\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { CheckCircleFilled, PlusCircleFilled } from '@ant-design/icons';\n// Utils\nimport { getColorFromIndex } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\n\ntype ClueCardProps = {\n  isMatched?: boolean;\n  isSelected?: boolean;\n  clue?: string;\n  indexColor?: number;\n  color?: string;\n  player?: GamePlayer;\n  strikeMatches?: boolean;\n};\n\nexport function ClueCard({\n  isMatched,\n  isSelected,\n  clue,\n  indexColor = 0,\n  color,\n  player,\n  strikeMatches = false,\n}: ClueCardProps) {\n  const colorClass = getColorFromIndex(indexColor);\n  return (\n    <div\n      className={clsx(\n        'x-clue-card',\n        isSelected && 'x-clue-card--selected',\n        !Boolean(color) && `color-border--${colorClass}`\n      )}\n      style={{ borderColor: color }}\n    >\n      <span\n        className={clsx('x-clue-card__icon', !Boolean(color) && `color-background--${colorClass}`)}\n        style={{ backgroundColor: color }}\n      >\n        {isMatched ? (\n          Boolean(player) ? (\n            <Avatar id={player?.avatarId} />\n          ) : (\n            <CheckCircleFilled />\n          )\n        ) : (\n          <PlusCircleFilled style={isSelected ? { color: 'gold' } : { color: 'white' }} />\n        )}\n      </span>\n      <span className={clsx('x-clue-card__clue', isMatched && strikeMatches && 'x-clue-card__clue--matched')}>\n        {clue}\n      </span>\n    </div>\n  );\n}\n","//Design Resources\nimport { Button } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n// Utils\nimport { getClueFromKey } from '../utils/helpers';\n// Components\nimport { ClueCard } from './ClueCard';\nimport { PreviousClue } from './PreviousClue';\n\ntype SelectableCellProps = {\n  onSelectCell: GenericFunction;\n  onClearCell: GenericFunction;\n  cell: CruzaPalavrasGridCell;\n  active: any;\n  guesses: any;\n  clues: CruzaPalavrasClue[];\n  user: GamePlayer;\n};\n\nexport function SelectableCell({\n  onSelectCell,\n  onClearCell,\n  cell,\n  active,\n  guesses,\n  clues,\n  user,\n}: SelectableCellProps) {\n  const isSelected = cell.index === active;\n  const matchEntry = Object.entries(guesses).find((arr) => arr[1] === cell.index);\n  const [clueKey, coordinate] = matchEntry ?? [];\n  const [clue, playerId] = getClueFromKey(clueKey ?? '');\n\n  const isMatched = coordinate === cell.index;\n\n  if (isMatched) {\n    const clueIndexColor = clues.findIndex((c) => c.clue === clue && c.playerId === playerId);\n    return (\n      <Button\n        onClick={user.id !== playerId ? () => onClearCell(clueKey) : () => {}}\n        type=\"text\"\n        style={{ height: 'auto' }}\n      >\n        <ClueCard isMatched={isMatched} isSelected={isSelected} clue={clue} indexColor={clueIndexColor} />\n      </Button>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return (\n    <Button onClick={() => onSelectCell(cell.index)} shape=\"circle\">\n      <PlusCircleFilled style={isSelected ? { color: 'gold' } : {}} />\n    </Button>\n  );\n}\n","// Helpers\nimport { getClueKey } from '../utils/helpers';\n// Components\nimport { ClueCard } from './ClueCard';\n\ntype CluesProps = {\n  clues: CruzaPalavrasClue[];\n  onSelectClue: GenericFunction;\n  active: any;\n  guesses: PlainObject;\n};\n\nexport function Clues({ clues, onSelectClue, active, guesses }: CluesProps) {\n  return (\n    <ul className=\"x-clue-cards\">\n      {clues.map((clueObj, index: number) => {\n        const isSelected = clueObj.coordinate === active?.coordinate;\n        const isMatched = Boolean(guesses[getClueKey(clueObj)]);\n        return (\n          <li key={`${clueObj.coordinate}-${clueObj.clue}`} className=\"x-clue-card-li\">\n            <button className=\"x-clue-card-button\" onClick={() => onSelectClue(clueObj)}>\n              <ClueCard\n                isMatched={isMatched}\n                isSelected={isSelected}\n                clue={clueObj.clue}\n                indexColor={index}\n                strikeMatches\n              />\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState, useCallback } from 'react';\nimport { useEffectOnce } from 'react-use';\n//Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { shuffle } from 'utils/helpers';\nimport { getClueFromKey, getClueKey, isClue } from './utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { WordGrid } from './components/WordGrid';\nimport { SelectableCell } from './components/SelectableCell';\nimport { Clues } from './components/Clues';\n\ntype StepGuessingProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  clues: CruzaPalavrasClue[];\n  onSubmitGuesses: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepGuessing({ grid, user, clues, onSubmitGuesses, players }: StepGuessingProps) {\n  const [active, setActive] = useState(null);\n  const [guesses, setGuesses] = useState<any>({});\n\n  const onSelectClue = useCallback(\n    (clueIndex: any) => {\n      if (!active || isClue(active)) {\n        setActive(clueIndex);\n      } else {\n        setGuesses((state: any) => ({\n          ...state,\n          [getClueKey(clueIndex)]: active,\n        }));\n        setActive(null);\n      }\n    },\n    [active]\n  );\n\n  const onSelectCell = useCallback(\n    (cellCoordinate: any) => {\n      if (!isClue(active)) {\n        setActive(cellCoordinate);\n      } else {\n        setGuesses((state: any) => {\n          const newState = Object.entries(state).reduce((acc: PlainObject, [key, value]) => {\n            if (key && value && value !== cellCoordinate) {\n              acc[key] = value;\n            }\n            return acc;\n          }, {});\n\n          newState[getClueKey(active!)] = cellCoordinate;\n\n          setActive(null);\n          return newState;\n        });\n      }\n    },\n    [active]\n  );\n\n  const onClearCell = (clueKey: string) => {\n    setGuesses((state: PlainObject) => {\n      const newState = { ...state };\n      delete newState[clueKey];\n      return newState;\n    });\n  };\n\n  const prepareSubmitGuesses = useCallback(() => {\n    const result = Object.entries(guesses).reduce((acc: PlainObject, [clueKey, value]) => {\n      const [, playerId] = getClueFromKey(clueKey);\n      acc[playerId] = value;\n      return acc;\n    }, {});\n\n    onSubmitGuesses({ guesses: result });\n  }, [guesses, onSubmitGuesses]);\n\n  // Select player's own clue\n  useEffectOnce(() => {\n    const playersOwnClue = clues.find((clue) => clue.playerId === user.id);\n\n    setGuesses({\n      [getClueKey(playersOwnClue)]: playersOwnClue?.coordinate,\n    });\n  });\n\n  const randomGuessThem = () => {\n    const usedCells = Object.values(guesses);\n    const usedClues = Object.keys(guesses);\n\n    const availableCells = shuffle(\n      grid.filter((cell) => cell.available && cell.playerId !== user.id && !usedCells.includes(cell.index))\n    );\n    const availableClues = clues.filter((clue) => !usedClues.includes(getClueKey(clue)));\n    const newGuesses = availableClues.reduce((acc: PlainObject, clueObj, index) => {\n      if (clueObj.playerId === user.id) {\n        acc[getClueKey(clueObj)] = clueObj.coordinate;\n      } else {\n        acc[getClueKey(clueObj)] = availableCells[index].index;\n      }\n      return acc;\n    }, {});\n    setGuesses({\n      ...newGuesses,\n      ...guesses,\n    });\n  };\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Decifre as dicas!\" en=\"Guess the cells!\" />\n      </Title>\n\n      <Clues clues={clues} onSelectClue={onSelectClue} active={active} guesses={guesses} />\n      <Instruction contained>\n        <Translate\n          pt=\"Clique em uma dica acima e em uma célula abaixo, ou vice-versa.\"\n          en=\"Click on a clue above then on a cell below, or vice-versa.\"\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          onClick={prepareSubmitGuesses}\n          disabled={Object.keys(guesses).length !== clues.length}\n        >\n          <Translate pt=\"Enviar respostas\" en=\"Send guesses\" />\n        </Button>\n        <Button size=\"large\" type=\"dashed\" onClick={randomGuessThem}>\n          <Translate pt=\"Desistir\" en=\"Give up\" />\n        </Button>\n      </Space>\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={SelectableCell}\n        cellComponentProps={{ onSelectCell, onClearCell, active, guesses, clues, user }}\n      />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitGuessesAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepGuessing } from './StepGuessing';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { GuessIcon } from 'components/icons/GuessIcon';\n\nfunction PhaseGuessing({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitGuesses = useOnSubmitGuessesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.GUESSING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<GuessIcon />}\n          title={translate('Match!', 'Combine!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora combine as dicas de cada jogador com as coordenadas corretas!\n                  <br />\n                  Basta clicar em uma das dicas no topo e então em uma das células da grade.\n                </>\n              }\n              en={\n                <>\n                  Now match the clues from each player with the correct coordinates\n                  <br />\n                  Just click on one of the clues on top then in one of the cells in the grid.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGuessing\n          user={user}\n          grid={state.grid}\n          clues={state.clues}\n          onSubmitGuesses={onSubmitGuesses}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGuessing;\n","import clsx from 'clsx';\nimport { orderBy } from 'lodash';\n//Design Resources\nimport { Space, Table } from 'antd';\nimport { CheckSquareFilled, CloseSquareFilled, TrophyOutlined, WarningOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { AVATARS as avatars } from 'utils/avatars';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { WordGrid } from './components/WordGrid';\nimport { ClueCard } from './components/ClueCard';\nimport { PreviousClue } from './components/PreviousClue';\nimport { ScoringRule } from './components/RulesBlobs';\nimport { AvatarName } from 'components/avatars';\nimport { TimedButton } from 'components/buttons';\n\nconst AVATARS: PlainObject = avatars;\n\ntype PlayersInCellProps = {\n  cellPlayers: {\n    playerId: PlayerId;\n    isCorrect?: boolean;\n    color?: string;\n  }[];\n  players: GamePlayers;\n};\n\nfunction PlayersInCell({ cellPlayers, players }: PlayersInCellProps) {\n  return (\n    <ul>\n      {cellPlayers.map(({ playerId, isCorrect }: any) =>\n        isCorrect ? (\n          <li\n            key={`players-in-cell-${playerId}`}\n            className={clsx(isCorrect && 'x-players-in-cell-player--correct')}\n          >\n            <AvatarName player={players[playerId]} size=\"small\" />\n          </li>\n        ) : (\n          <></>\n        )\n      )}\n    </ul>\n  );\n}\n\ntype ResultCellProps = {\n  cell: any;\n  clues: CruzaPalavrasClue[];\n  players: GamePlayers;\n  playerPerVotedCell: any;\n  colorCodedCluesPerPlayer: any;\n};\n\nfunction ResultCell({ cell, clues, players, playerPerVotedCell, colorCodedCluesPerPlayer }: ResultCellProps) {\n  const clue = clues.find((c) => c.coordinate === cell.index);\n  const cellPlayers = playerPerVotedCell[cell.index] ?? [];\n\n  if (clue) {\n    return (\n      <div>\n        <ClueCard\n          isMatched\n          clue={clue.clue}\n          color={colorCodedCluesPerPlayer[clue.playerId!]}\n          player={players[clue.playerId!]}\n        />\n        {Boolean(cellPlayers.length) && <PlayersInCell cellPlayers={cellPlayers} players={players} />}\n      </div>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return (\n    <span>\n      {Boolean(cellPlayers.length) && <PlayersInCell cellPlayers={cellPlayers} players={players} />}\n    </span>\n  );\n}\n\ntype AnswersListProps = {\n  players: GamePlayers;\n  grid: CruzaPalavraGrid;\n  correctCoordinatesPerPlayer: any;\n};\n\nfunction AnswersList({ players, grid, correctCoordinatesPerPlayer }: AnswersListProps) {\n  const { translate } = useLanguage();\n\n  const columns = [\n    {\n      title: translate('Jogador', 'Player'),\n      dataIndex: 'player',\n      key: 'player',\n      render: (data: any) => <AvatarName player={data} />,\n      sorter: (a: any, b: any) => (a.name > b.name ? -1 : 1),\n    },\n    {\n      title: translate('Achou que', 'Thought that'),\n      dataIndex: 'guess',\n      key: 'guess',\n      render: (guess: string) => guess.toUpperCase(),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n    {\n      title: translate('Era', 'Was'),\n      dataIndex: 'clue',\n      key: 'clue',\n      render: (clue: string) => clue.toUpperCase(),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n    {\n      title: translate('Resultado', 'Result'),\n      dataIndex: 'result',\n      key: 'result',\n      render: (value: any) =>\n        value ? (\n          <CheckSquareFilled style={{ color: 'green' }} />\n        ) : (\n          <CloseSquareFilled style={{ color: 'red' }} />\n        ),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n  ];\n\n  const parsedData = Object.values(players).map((player) => {\n    return Object.entries(player?.guesses ?? {}).reduce(\n      (acc: PlainObject, [guessedPlayerId, guessedCoordinate]: any) => {\n        if (guessedPlayerId === player.id) return acc;\n\n        const cell = grid[guessedCoordinate];\n\n        acc.push({\n          playerName: player.name,\n          player,\n          clue: `${cell.yText} + ${cell.xText}`,\n          guess: players[guessedPlayerId].clue,\n          result: correctCoordinatesPerPlayer?.[guessedCoordinate] === guessedPlayerId,\n        });\n\n        return acc;\n      },\n      []\n    );\n  });\n\n  const dataSource: any = orderBy(parsedData.flat(), ['playerName', 'guess'], ['asc', 'asc']);\n\n  return <Table size=\"small\" columns={columns} dataSource={dataSource} pagination={false} />;\n}\n\ntype BadCluesPlayersListProps = {\n  badCluesPlayersList: GamePlayer[];\n};\n\nfunction BadCluesPlayersList({ badCluesPlayersList }: BadCluesPlayersListProps) {\n  return (\n    <span>\n      {badCluesPlayersList.map((player, index) => (\n        <span key={`bad-clue-${player.id}-${index}`}>\n          <AvatarName player={player} key={`bad-clue-${player.id}`} size=\"small\" />\n          {badCluesPlayersList.length > 0 && index < badCluesPlayersList.length - 1 ? ', ' : ''}\n        </span>\n      ))}\n    </span>\n  );\n}\n\ntype StepRevealProps = {\n  players: GamePlayers;\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  clues: CruzaPalavrasClue[];\n  goToNextStep: GenericFunction;\n  whoGotNoPoints: PlayerId[];\n};\n\nexport function StepReveal({ grid, user, players, clues, goToNextStep, whoGotNoPoints }: StepRevealProps) {\n  useTemporarilyHidePlayersBar();\n  const correctCoordinatesPerPlayer = clues.reduce((acc: PlainObject, clue) => {\n    acc[clue.coordinate] = clue.playerId;\n    return acc;\n  }, {});\n\n  const colorCodedCluesPerPlayer = clues.reduce((acc: PlainObject, clue) => {\n    acc[clue.playerId!] = AVATARS[players[clue.playerId!].avatarId].color;\n    return acc;\n  }, {});\n\n  const playerPerVotedCell = Object.values(players).reduce((acc: PlainObject, player) => {\n    Object.entries(player.guesses ?? {}).forEach(([playerId, coordinate]: any) => {\n      if (playerId !== player.id) {\n        if (acc[coordinate] === undefined) {\n          acc[coordinate] = [];\n        }\n        acc[coordinate].push({\n          playerId: player.id,\n          color: colorCodedCluesPerPlayer[playerId],\n          isCorrect: correctCoordinatesPerPlayer[coordinate] === playerId,\n        });\n      }\n    });\n\n    return acc;\n  }, {});\n\n  const whoGotNoPointsNames = whoGotNoPoints.map((playerId) => players[playerId]);\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRule playerCount={playerCount} />} />\n\n      {Boolean(whoGotNoPoints.length) && (\n        <Instruction contained>\n          <WarningOutlined style={{ color: 'red' }} />\n          <Translate\n            pt={\n              <>\n                Ninguém acertou a(s) dica(s) dadas por\n                <BadCluesPlayersList badCluesPlayersList={whoGotNoPointsNames} />, então ele(s) perde(m){' '}\n                {playerCount} pontos.\n              </>\n            }\n            en={\n              <>\n                Nobody got the clues given by\n                <BadCluesPlayersList badCluesPlayersList={whoGotNoPointsNames} />, so they lose {playerCount}{' '}\n                points.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={ResultCell}\n        cellComponentProps={{ clues, players, playerPerVotedCell, colorCodedCluesPerPlayer }}\n      />\n\n      <Space className=\"space-container\" align=\"center\">\n        <TimedButton duration={60} icon={<TrophyOutlined />} onExpire={goToNextStep} onClick={goToNextStep}>\n          <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n        </TimedButton>\n      </Space>\n\n      <Title level={3}>\n        <Translate pt=\"Todas as respostas\" en=\"All Answers\" />\n      </Title>\n      <AnswersList correctCoordinatesPerPlayer={correctCoordinatesPerPlayer} players={players} grid={grid} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Components\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { ScoringRule } from './components/RulesBlobs';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { AdminNextPhaseButton } from 'components/admin';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  playerCount: number;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: GenericFunction;\n  isLastRound?: boolean;\n};\n\nexport function StepRanking({\n  players,\n  playerCount,\n  ranking,\n  goToPreviousStep,\n  round,\n  isLastRound,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate pt=\"Votos recebidos\" en=\"Received votes\" />,\n        <Translate\n          pt=\"Penalidade se ninguém acertou a sua dica\"\n          en=\"Penalty for nobody getting your clue correctly\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRule playerCount={playerCount} />} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <AdminNextPhaseButton round={round} lastRound={isLastRound} />\n    </StepRankingWrapper>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { StepReveal } from './StepReveal';\nimport { StepRanking } from './StepRanking';\nimport { ScoringRule } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { RankIcon } from 'components/icons/RankIcon';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<RankIcon />}\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <ScoringRule playerCount={playerCount} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepReveal\n          user={user}\n          grid={state.grid}\n          clues={state.clues}\n          goToNextStep={goToNextStep}\n          players={players}\n          whoGotNoPoints={state.whoGotNoPoints ?? []}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          playerCount={playerCount}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n          isLastRound={state?.lastRound}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { TrophyIcon } from 'components/icons/TrophyIcon';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon={<TrophyIcon />} />;\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseClueWriting from './PhaseClueWriting';\nimport PhaseGuessing from './PhaseGuessing';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: THEME_COLORS.FOREST,\n  },\n});\n\nfunction SessionCruzaPalavras({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.CRUZA_PALAVRAS.CLUE_WRITING:\n        return PhaseClueWriting;\n      case PHASES.CRUZA_PALAVRAS.GUESSING:\n        return PhaseGuessing;\n      case PHASES.CRUZA_PALAVRAS.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.CRUZA_PALAVRAS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionCruzaPalavras;\n"],"names":["GridIcon","props","xmlns","viewBox","fill","d","GuessIcon","cx","cy","r","RankIcon","TrophyIcon","WordGrid","grid","user","CellComponent","cellComponentProps","length","Math","sqrt","gridStyle","gridTemplateColumns","gridTemplateRows","className","style","map","cell","clsx","kind","text","index","PreviousClue","clue","WordForm","x","y","onSubmit","disabled","useState","setClue","textInput","useRef","useEffect","current","focus","useMock","substring","direction","ref","placeholder","onChange","e","target","value","onPressEnter","type","onClick","pt","en","WritingCell","onSubmitClue","writable","id","playerId","content","xText","yText","title","trigger","shape","FormOutlined","WritingCluesRule","playerCount","ScoringRule","StepClueWriting","players","isLoading","useLoading","fullWidth","Object","keys","contained","payload","trim","toLowerCase","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useUser","request","useAPICall","apiFunction","CRUZA_PALAVRAS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","action","useOnSubmitClueAPIRequest","phase","allowedPhase","PHASES","conditions","round","onPressButton","buttonText","time","circleColor","icon","onClose","currentRound","isClue","instance","Boolean","getClueKey","clueObj","SEPARATOR","getClueFromKey","key","split","ClueCard","isMatched","isSelected","indexColor","color","player","strikeMatches","colorClass","getColorFromIndex","borderColor","backgroundColor","avatarId","CheckCircleFilled","PlusCircleFilled","SelectableCell","onSelectCell","onClearCell","active","guesses","clues","matchEntry","entries","find","arr","clueKey","coordinate","clueIndexColor","findIndex","c","height","Clues","onSelectClue","StepGuessing","onSubmitGuesses","setActive","setGuesses","useCallback","clueIndex","cellCoordinate","newState","reduce","acc","prepareSubmitGuesses","result","useEffectOnce","playersOwnClue","align","size","usedCells","values","usedClues","availableCells","shuffle","filter","available","includes","newGuesses","useOnSubmitGuessesAPIRequest","AVATARS","avatars","PlayersInCell","cellPlayers","isCorrect","ResultCell","playerPerVotedCell","colorCodedCluesPerPlayer","AnswersList","correctCoordinatesPerPlayer","columns","dataIndex","render","data","sorter","a","b","name","guess","toUpperCase","CheckSquareFilled","CloseSquareFilled","parsedData","guessedPlayerId","guessedCoordinate","push","playerName","dataSource","orderBy","flat","pagination","BadCluesPlayersList","badCluesPlayersList","StepReveal","whoGotNoPoints","useTemporarilyHidePlayersBar","forEach","undefined","whoGotNoPointsNames","WarningOutlined","duration","TrophyOutlined","onExpire","level","StepRanking","ranking","goToPreviousStep","isLastRound","gainedPointsDescriptions","lastRound","announcementIcon","ConfigProvider","theme","primaryColor","THEME_COLORS","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseClueWriting","PhaseGuessing","PhaseReveal","PhaseGameOver","PageError"],"sourceRoot":""}