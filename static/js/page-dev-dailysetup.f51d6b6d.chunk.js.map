{"version":3,"file":"static/js/page-dev-dailysetup.f51d6b6d.chunk.js","mappings":"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","sources":["components/buttons/FixedMenuButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","hooks/useCountdown.ts","../node_modules/@tanstack/query-core/src/queriesObserver.ts","pages/Dev/DailySetup/hooks.ts","../node_modules/@tanstack/react-query/src/useQueries.ts","pages/Dev/DailySetup/utils.ts","pages/Dev/DailySetup/DailySetup.tsx","pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx","../node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js","../node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, ButtonProps, Popover } from 'antd';\n// Sass\nimport './FixedMenuButton.scss';\n\ntype FixedMenuButtonDefaultProps = {\n  /**\n   * What order it will show up in the screen\n   * 0 for rules\n   * 1 for extras (e.g. card size)\n   * 2 for extras\n   * 3 for rating\n   * -1 for admin only\n   */\n  position: 0 | 1 | 2 | 3 | -1;\n  /**\n   * The displayed icon\n   */\n  icon: ReactNode;\n  /**\n   * The optional label to follow the icon when hover\n   */\n  label?: ReactNode;\n  /**\n   * The custom class\n   */\n  className?: string;\n  /**\n   * Determine if label should be visible\n   */\n  showLabel?: boolean;\n  /**\n   * Any ant design button props\n   */\n  buttonProps?: ButtonProps;\n};\n\ninterface FixedMenuButtonPopoverProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'popover';\n  /**\n   * Content of popover, required when popover rule\n   */\n  content: ReactNode;\n  /**\n   * Guard onclick from button only\n   */\n  onClick?: never;\n  /**\n   * If popover should be open\n   */\n  open?: boolean;\n}\n\ninterface FixedMenuButtonButtonOnlyProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'button';\n  /**\n   * The click function for the button\n   */\n  onClick: GenericFunction;\n  /**\n   * Guard content from popover\n   */\n  content?: never;\n  /**\n   * If popover should be open\n   */\n  open?: never;\n}\n\ntype FixedMenuButtonProps = FixedMenuButtonPopoverProps | FixedMenuButtonButtonOnlyProps;\n\n/**\n * Button position on the top left of the screen to display rules, admin button and other features\n */\nexport function FixedMenuButton({ type, position, content, className, open, ...rest }: FixedMenuButtonProps) {\n  return (\n    <div className={clsx('fixed-menu-button', `fixed-menu-button--${position}`, className)}>\n      {type === 'popover' ? (\n        <Popover placement=\"bottomLeft\" content={content} trigger=\"click\" open={open}>\n          <FixedMenuButtonContent {...rest} />\n        </Popover>\n      ) : (\n        <FixedMenuButtonContent {...rest} />\n      )}\n    </div>\n  );\n}\n\nfunction FixedMenuButtonContent({\n  icon,\n  label,\n  showLabel,\n  onClick,\n  buttonProps,\n}: Partial<FixedMenuButtonProps>) {\n  const [isActive, setActive] = useState(showLabel);\n  const hasLabel = Boolean(label);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <Button\n      shape={hasLabel && isActive ? 'round' : 'circle'}\n      size=\"middle\"\n      onMouseOver={() => setActive(true)}\n      onMouseLeave={() => setActive(showLabel ?? false)}\n      onClick={onClick ? onClick : undefined}\n      icon={icon}\n      ghost\n      type=\"primary\"\n      {...buttonProps}\n    >\n      {isActive && hasLabel && <span className=\"fixed-menu-button__label\">{label}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useCountdown } from 'hooks/useCountdown';\n// Sass\nimport './TimedButton.scss';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n    disabled: hideTimer,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && <span className={clsx(timeClass, `${timeClass}--${type}`)}>{timeLeft}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Sass\nimport './TransparentButton.scss';\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","// Ant Design Resources\nimport { Slider } from 'antd';\nimport { DragOutlined } from '@ant-design/icons';\n// State & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n\n/**\n * Fixed Menu Button for resizing canvas\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={1}\n      icon={<DragOutlined />}\n      label={labelText}\n      content={\n        <div className=\"canvas-resizer\">\n          <div className=\"canvas-resizer__label\">{labelText}</div>\n          <Slider\n            className=\"canvas-resizer__slider\"\n            value={canvasSize ?? 100}\n            min={150}\n            max={500}\n            step={50}\n            onChange={setCanvasSize}\n          />\n        </div>\n      }\n    />\n  );\n};\n\nconst labelText = <Translate pt=\"Tamanho das Artes\" en=\"Art Size\" />;\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  /**\n   * Lines drawn in the canvas\n   */\n  lines: CanvasLine[];\n  /**\n   * Function where any new version of the drawing is sent to\n   */\n  setLines: CanvasSetLine;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Show controls to undo, redo, or erase drawing. Default: false\n   */\n  showControls?: boolean;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   *\n   */\n  willReadFrequently?: boolean;\n};\n\n/**\n * Canvas drawing board using react-konva\n * It requires an array of lines and an setState function to save the lines\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n  width = 500,\n  height,\n  willReadFrequently = false,\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  /**\n   * Toggles off the isDrawing flag\n   */\n  const startDrawing = () => {\n    isDrawing.current = true;\n  };\n\n  /**\n   * Toggles off the isDrawing flag and resets history\n   */\n  const stopDrawing = () => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n  };\n\n  const startLine = (e: any) => {\n    startDrawing();\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const finishLine = (e: any) => {\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLineEntry);\n    setLines(lines.concat());\n  };\n\n  /**\n   * Start recording drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseDown = (e: any) => {\n    startLine(e);\n  };\n\n  /**\n   * Tracks mouse moving during the drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    if (isDrawing.current) {\n      stopDrawing();\n\n      finishLine(e);\n    }\n  };\n\n  /**\n   * Handles case when a current drawing is stopped off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseUp = () => {\n    stopDrawing();\n  };\n\n  /**\n   * Handles case when a current drawing is started off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseDown = () => {\n    startDrawing();\n  };\n\n  /**\n   * Handles when mouse leaves the stage\n   * @param e - konva mouse event\n   */\n  const handleMouseLeave = (e: any) => {\n    if (isDrawing.current) {\n      finishLine(e);\n\n      window.document.addEventListener('mouseup', handleOffsetMouseUp);\n      window.document.addEventListener('touchEnd', handleOffsetMouseUp);\n      window.document.addEventListener('mousedown', handleOffsetMouseDown);\n      window.document.addEventListener('touchStart', handleOffsetMouseDown);\n    }\n  };\n\n  /**\n   * Handles when mouse reenters the state\n   * @param e\n   */\n  const handleMouseEnter = (e: any) => {\n    if (isDrawing.current) {\n      startLine(e);\n    }\n    window.document.removeEventListener('mouseup', handleOffsetMouseUp);\n    window.document.removeEventListener('touchEnd', handleOffsetMouseUp);\n    window.document.removeEventListener('mousedown', handleOffsetMouseDown);\n    window.document.removeEventListener('touchStart', handleOffsetMouseDown);\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={width}\n        height={height || width}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onMouseEnter={handleMouseEnter}\n        className={clsx('drawing-canvas', className)}\n        style={{ width: `${width}px`, height: `${height || width}px` }}\n        willReadFrequently={willReadFrequently}\n        id=\"drawing-canvas\"\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","import { TimerResult, TimerSettings, useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ntype SelectedTimeSettings = Omit<TimerSettings, 'expiryTimestamp'>;\n\nexport interface useCountdownSettings extends SelectedTimeSettings {\n  /**\n   * The duration of the countdown in seconds\n   */\n  duration: number;\n  /**\n   * Disable timer\n   */\n  disabled?: boolean;\n}\n\ninterface useCountdownReturnValue extends TimerResult {\n  /**\n   * Time left in total seconds (minutes + seconds)\n   */\n  timeLeft: number;\n}\n\n/**\n * Timer countdown to perform actions\n * @param settings\n * @returns\n */\nexport function useCountdown({\n  duration,\n  onExpire,\n  disabled = false,\n  ...rest\n}: useCountdownSettings): useCountdownReturnValue {\n  const timer = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    onExpire: disabled ? undefined : onExpire,\n    ...rest,\n  });\n\n  const timeLeft = timer.minutes * 60 + timer.seconds;\n\n  return {\n    ...timer,\n    timeLeft,\n  };\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { useMemo, useState } from 'react';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\nimport { QueryKey, useMutation, useQuery, useQueryClient, useQueries } from '@tanstack/react-query';\nimport { App } from 'antd';\nimport { DailyEntry, DailyHistory, DataDrawing, DataSuffixCounts } from './types';\nimport { shuffle } from 'lodash';\nimport { getNextDay } from './utils';\n\nfunction getDocQueryFunction<T>(path: string, docId: string) {\n  return async () => {\n    console.log(`${path}/${docId}`);\n    const docRef = doc(firestore, `${path}/${docId}`);\n    const querySnapshot = await getDoc(docRef);\n    return (querySnapshot.data() ?? {}) as T;\n  };\n}\n\nexport function useLoadDailySetup() {\n  const { notification } = App.useApp();\n\n  // Step 1: Load suffix counts\n  const suffixCountsQuery = useQuery<any, Error, DataSuffixCounts, QueryKey>({\n    queryKey: ['data', 'suffixCounts'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('data', 'suffixCounts'),\n    enabled: true,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Suffix Counts loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading suffix counts',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  console.log(suffixCountsQuery.data);\n\n  // Step 2: Load drawings\n  const drawingsQuery = useLoadDrawings(\n    Boolean(suffixCountsQuery.data?.drawingsPT),\n    suffixCountsQuery.data?.drawingsPT ?? 0\n  );\n  const areDrawingsLoading = drawingsQuery.some((q) => q.isLoading);\n\n  console.log(drawingsQuery?.[0]?.data);\n\n  // Step 3: Load daily history\n  const historyQuery = useQuery<any, Error, DailyHistory, QueryKey>({\n    queryKey: ['daily', 'history'],\n    queryFn: getDocQueryFunction<DataSuffixCounts>('daily', 'history'),\n    enabled: true,\n    onSuccess: () => {\n      notification.info({\n        message: 'Data Daily History loaded',\n        placement: 'bottomLeft',\n      });\n    },\n    onError: () => {\n      notification.error({\n        message: 'Error loading daily history',\n        placement: 'bottomLeft',\n      });\n    },\n  });\n\n  const usedCards = useMemo(() => historyQuery.data?.used ?? [], [historyQuery.data?.used]);\n  const latestDate = historyQuery.data?.latestDate ?? '2023-10-31';\n  console.log({ usedCards, latestDate });\n\n  // Step 4: Parse entries\n  const entries = useMemo(() => {\n    const drawings = (drawingsQuery ?? []).reduce((acc: Record<CardId, DailyEntry>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('Empty drawing', dataDrawing.cardId);\n          return acc;\n        }\n        if (acc[dataDrawing.cardId] === undefined) {\n          acc[dataDrawing.cardId] = {\n            id: dataDrawing.cardId,\n            type: 'arte-ruim',\n            language: 'pt',\n            cardId: dataDrawing.cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[dataDrawing.cardId].drawings.push(dataDrawing.drawing);\n          acc[dataDrawing.cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    }, {});\n\n    console.log({ totalCardCount: Object.keys(drawings).length });\n\n    const atLeastTwoDrawingsList = Object.values(drawings).filter(\n      (e) => e.drawings.length > 1 && e.cardId && !e.cardId?.includes('--')\n    );\n\n    console.log({ shortlistCardCount: atLeastTwoDrawingsList.length });\n\n    const shortList = Object.values(atLeastTwoDrawingsList).filter((e) => !usedCards.includes(e.cardId));\n\n    const shuffledShortList = shuffle(shortList);\n\n    let lastDate = latestDate;\n\n    return shuffledShortList.map((e, index) => {\n      const id = getNextDay(lastDate);\n\n      lastDate = id;\n      return {\n        ...e,\n        id,\n        number: index + 1,\n      };\n    });\n  }, [drawingsQuery, usedCards, latestDate]);\n\n  const round5sample = useMemo(() => {\n    const drawings = (drawingsQuery ?? []).reduce((acc: Record<CardId, DailyEntry>, drawingEntry) => {\n      const drawingsLibrary = (drawingEntry.data ?? {}) as Record<string, DataDrawing>;\n      Object.entries(drawingsLibrary).forEach(([key, dataDrawing]) => {\n        if (dataDrawing.drawing.trim().length < 10) {\n          console.log('Empty drawing', dataDrawing.cardId);\n          return acc;\n        }\n        if (acc[dataDrawing.cardId] === undefined) {\n          acc[dataDrawing.cardId] = {\n            id: dataDrawing.cardId,\n            type: 'arte-ruim',\n            language: 'pt',\n            cardId: dataDrawing.cardId,\n            text: dataDrawing.text,\n            drawings: [dataDrawing.drawing],\n            number: 0,\n            dataIds: [key],\n          };\n        } else {\n          acc[dataDrawing.cardId].drawings.push(dataDrawing.drawing);\n          acc[dataDrawing.cardId].dataIds.push(key);\n        }\n      });\n\n      return acc;\n    }, {});\n\n    return Object.values(drawings).filter((e) => e.cardId?.includes('--'));\n  }, [drawingsQuery]);\n\n  return {\n    isLoading: suffixCountsQuery.isLoading || areDrawingsLoading || historyQuery.isLoading,\n    entries,\n    latestDate: historyQuery.data?.latestDate,\n    round5sample,\n  };\n}\n\nfunction useLoadDrawings(enabled: boolean, libraryCount: number) {\n  const { notification } = App.useApp();\n\n  const queries = useMemo(() => {\n    return new Array(libraryCount).fill(0).map((_, index) => {\n      return {\n        queryKey: ['data', `drawingsPT${index + 1}`],\n        queryFn: getDocQueryFunction('data', `drawingsPT${index + 1}`),\n        enabled,\n        onSuccess: () => {\n          notification.info({\n            message: `Data Drawings PT${index + 1} loaded`,\n            placement: 'bottomLeft',\n          });\n        },\n      };\n    });\n  }, [libraryCount]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useQueries({\n    queries,\n  });\n}\n\nexport function useSaveDailySetup() {\n  const { notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  const query = useMutation<any, Error, DailyEntry[], QueryKey>(\n    async (data) => {\n      const saves = data.map((entry) => {\n        const docRef = doc(firestore, `daily/${entry.id}`);\n        return setDoc(docRef, entry);\n      });\n\n      const docRec = doc(firestore, `daily/history`);\n      const history: DailyHistory = {\n        latestDate: data[data.length - 1].id,\n        used: data.map((e) => e.cardId),\n      };\n      setDoc(docRec, history);\n\n      return Promise.all(saves);\n    },\n    {\n      onSuccess: () => {\n        notification.info({\n          message: 'Data saved',\n          placement: 'bottomLeft',\n        });\n        queryClient.invalidateQueries(['daily', 'history']);\n        setIsDirty(false);\n      },\n      onError: () => {\n        notification.error({\n          message: 'Error saving data',\n          placement: 'bottomLeft',\n        });\n      },\n    }\n  );\n\n  return {\n    isDirty,\n    setIsDirty,\n    save: query.mutateAsync,\n    isLoading: query.isLoading,\n  };\n}\n","'use client'\nimport * as React from 'react'\n\nimport { QueriesObserver, notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type { UseQueryOptions, UseQueryResult } from './types'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureStaleTime(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const observerQueries = observer.getQueries()\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observerQueries[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n","import moment from 'moment';\n\nexport function getNextDay(dateString: string): string {\n  const inputDate = moment(dateString, 'YYYY-MM-DD');\n  const nextDate = inputDate.add(1, 'days');\n\n  return nextDate.format('YYYY-MM-DD');\n}\n","import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Layout, TableColumnsType, Table, Button } from 'antd';\n// Components\n\nimport { DevHeader } from '../DevHeader';\nimport { useLoadDailySetup, useSaveDailySetup } from './hooks';\nimport { CanvasSVG } from 'components/canvas';\nimport { DailyEntry } from './types';\n\nfunction DailySetupPage() {\n  useTitle('Daily Setup | Dev | Tarde Divertida');\n\n  return (\n    <Layout className=\"dev-layout\">\n      <DevHeader title=\"Daily Setup\" />\n      <Layout.Content className=\"dev-content\">\n        <ul>\n          <li>Get history/useCards and latestDate</li>\n          <li>Get data/suffixCounts</li>\n          <li>Load all /data/drawingsPT</li>\n          <li>Filter cards with more than 2 entries</li>\n          <li>Filter cards that were already used</li>\n          <li>Shuffle and build daily entries</li>\n        </ul>\n        <DataPopulation />\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nfunction DataPopulation() {\n  const dataLoad = useLoadDailySetup();\n\n  const columns: TableColumnsType<DailyEntry> = [\n    {\n      title: 'Id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'CardId',\n      dataIndex: 'cardId',\n      key: 'cardId',\n    },\n    {\n      title: 'Text',\n      dataIndex: 'text',\n      key: 'text',\n      render: (text) => (\n        <div>\n          {text\n            .split('')\n            .map((l: string, i: number) => (i < 2 || l === ' ' ? l : '⏹'))\n            .join('')}\n        </div>\n      ),\n    },\n    {\n      title: 'Count',\n      dataIndex: 'drawings',\n      key: 'count',\n      render: (drawings) => <div>{drawings.length}</div>,\n    },\n    {\n      title: 'Drawings',\n      dataIndex: 'drawings',\n      key: 'drawings',\n      render: (drawings) => (\n        <div>\n          {drawings.map((d: string) => (\n            <CanvasSVG key={d} drawing={d} width={100} height={100} className=\"border round-corners margin\" />\n          ))}\n        </div>\n      ),\n    },\n  ];\n\n  const { save, isLoading: isMutating } = useSaveDailySetup();\n\n  return (\n    <div>\n      {dataLoad.isLoading && <div>Loading...</div>}\n      <h1>Total: {dataLoad.entries.length}</h1>\n      <Table columns={columns} dataSource={dataLoad.entries ?? []} />\n      <Button onClick={() => save(dataLoad.entries)} loading={isMutating}>\n        Save\n      </Button>\n    </div>\n  );\n}\n\nexport default DailySetupPage;\n","import { Segmented } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Resources', value: '/dev/resources', disabled: pathname === '/dev/resources' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Daily Setup', value: '/dev/dailysetup', disabled: pathname === '/dev/dailysetup' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\" wrap>\n            {extra}\n          </Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n","// This icon file is generated automatically.\nvar CaretUpOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z\" } }] }, \"name\": \"caret-up\", \"theme\": \"outlined\" };\nexport default CaretUpOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport CaretUpOutlinedSvg from \"@ant-design/icons-svg/es/asn/CaretUpOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar CaretUpOutlined = function CaretUpOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: CaretUpOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  CaretUpOutlined.displayName = 'CaretUpOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(CaretUpOutlined);"],"names":["FixedMenuButton","type","position","content","className","open","rest","clsx","placement","trigger","FixedMenuButtonContent","icon","label","showLabel","onClick","buttonProps","useState","isActive","setActive","hasLabel","Boolean","useEffectOnce","shape","size","onMouseOver","onMouseLeave","undefined","ghost","TimedButton","duration","children","onExpire","hideTimer","timeLeft","useCountdown","autoStart","disabled","timeClass","TransparentButton","active","activeClass","hoverType","CanvasResizer","useGlobalState","canvasSize","setCanvasSize","DragOutlined","labelText","value","min","max","step","onChange","pt","en","CanvasSVG","drawing","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","willReadFrequently","drawingHistory","setDrawingHistory","isDrawing","useRef","startDrawing","current","stopDrawing","startLine","e","pos","target","getStage","getPointerPosition","Math","round","finishLine","point","lastLineEntry","concat","splice","handleMouseDown","handleMouseMove","lastLine","handleMouseUp","handleOffsetMouseUp","handleOffsetMouseDown","direction","align","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","window","document","addEventListener","onMouseEnter","removeEventListener","id","line","i","points","tension","lineCap","globalCompositeOperation","linesCopy","drawingHistoryCopy","pop","push","UndoOutlined","lastUndoLine","DeleteOutlined","timer","useTimer","expiryTimestamp","inNSeconds","minutes","seconds","constructor","onSubscribe","this","listeners","observer","result","onUnsubscribe","destroy","setQueries","notifyManager","prevObservers","newObserverMatches","match","newObservers","newObserversMap","Object","newResult","hasIndexChange","difference","getCurrentResult","getQueries","observers","getObservers","getOptimisticResult","findMatchingObservers","queries","prevObserversMap","Map","defaultedQueryOptions","options","matchingObservers","defaultedOptions","matchedQueryHashes","Set","unmatchedQueries","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","a","b","onUpdate","indexOf","replaceAt","notify","listener","getDocQueryFunction","docId","console","log","docRef","doc","firestore","getDoc","querySnapshot","data","useLoadDailySetup","notification","App","suffixCountsQuery","useQuery","queryKey","queryFn","enabled","onSuccess","info","message","onError","error","drawingsQuery","libraryCount","context","defaultedQueries","ensurePreventErrorBoundaryRetry","useSyncExternalStore","useQueries","useMemo","Array","_","useLoadDrawings","drawingsPT","areDrawingsLoading","some","q","isLoading","historyQuery","usedCards","used","latestDate","entries","drawings","reduce","acc","drawingEntry","drawingsLibrary","forEach","key","dataDrawing","trim","cardId","language","text","number","dataIds","totalCardCount","keys","atLeastTwoDrawingsList","values","filter","includes","shortlistCardCount","shortList","shuffledShortList","shuffle","lastDate","dateString","moment","add","format","round5sample","DataPopulation","dataLoad","columns","title","dataIndex","render","split","l","join","queryClient","useQueryClient","isDirty","setIsDirty","query","useMutation","saves","entry","setDoc","docRec","history","Promise","all","invalidateQueries","save","mutateAsync","useSaveDailySetup","isMutating","dataSource","loading","useTitle","DevHeader","DevMenu","pathname","useLocation","navigate","useNavigate","defaultValue","subTitle","extra","wrap","CaretUpOutlined","props","ref","React","AntdIcon","_extends","CaretUpOutlinedSvg"],"sourceRoot":""}