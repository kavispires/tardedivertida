{"version":3,"file":"static/js/page-dev-image-cards-relationships.f25baac0.chunk.js","mappings":"2LAGO,SAASA,IAAqE,IAAtDC,EAAqD,uDAAJ,CAAC,EAC/E,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAOMC,EAAM,SAACC,EAAaC,QACVC,IAAVD,EACFJ,EAAaM,OAAOH,GAEpBH,EAAaO,IAAIJ,EAAKK,OAAOJ,IAG/BH,EAAgBD,EACjB,EAMKS,EAAS,SAACN,GACdH,EAAaM,OAAOH,GACpBF,EAAgBD,EACjB,GAEDU,EAAAA,EAAAA,YAAU,WACRC,OAAOC,QAAQd,GAAee,SAAQ,YAAmB,IAAD,eAAhBV,EAAgB,KAAXC,EAAW,KACjDJ,EAAac,IAAIX,IACpBD,EAAIC,EAAKC,EAEZ,GACF,GAAE,IAEH,IAAMW,EAAcf,EACjBgB,WACAC,MAAM,KACNC,QAAO,SAACC,EAA4BC,GACnC,MAAqBA,EAAMH,MAAM,KAAjC,eAAOd,EAAP,KAAYC,EAAZ,KAIA,OAHID,QAAiBE,IAAVD,IACTe,EAAGhB,GAAOC,GAELe,CACR,GAAE,CAAC,GAEN,MAAO,CACLjB,IAAAA,EACAO,OAAAA,EACAM,YAAAA,EAEH,C,uTChDM,SAASM,EAAT,GAAoE,IAApCC,EAAmC,EAAnCA,KAC/BC,EAAQD,EAAKE,OAAS,GAAK,MAAQF,EAAKE,OAAS,EAAI,OAASF,EAAKE,OAAS,EAAI,aAAUnB,EAChG,OACE,0BACE,UAAC,IAAD,CAAKkB,MAAOA,EAAOE,MAAM,SAACC,EAAA,EAAD,IAAzB,UACG,IACAJ,EAAKE,WAIb,CCAM,SAASG,EAAT,GAAiD,IAA3BC,EAA0B,EAA1BA,MACrBC,GAAYC,EAAAA,EAAAA,GAAa,GAEvBC,EAAuDH,EAAvDG,KAAMC,EAAiDJ,EAAjDI,QAASC,EAAwCL,EAAxCK,SAAUC,EAA8BN,EAA9BM,UAAWC,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAGtD,GAAwFC,EAAAA,EAAAA,IACtFN,EACAE,GAFMK,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,OAAQC,EAAhD,EAAgDA,SAAUC,EAA1D,EAA0DA,WAAYC,EAAtE,EAAsEA,cAKtE,OACE,UAAC,YAAD,CAAgBC,UAAU,cAA1B,UACGX,IAAY,uCACZD,IAAcC,IACb,UAAC,IAAD,CAAOW,UAAU,kBAAkBC,UAAU,WAA7C,WACE,SAAC,KAAD,CAAQC,QAASH,EAAjB,+BACA,UAAC,IAAD,CAAMI,MAAK,UAAKX,EAAL,cAAkBE,GAAWU,MAAON,IAAc,SAACO,EAAA,EAAD,IAA7D,WACE,gBAAKL,UAAU,kBAAf,UACE,UAAC,iBAAD,YACE,iBAAKA,UAAU,yBAAf,WACE,SAAC,KAAD,CAAWM,GAAId,EAAST,UAAWA,KACnC,SAACR,EAAD,CAAsBC,KAAMiB,QAE9B,iBAAKO,UAAU,yBAAf,WACE,SAAC,KAAD,CAAWM,GAAIZ,EAASX,UAAWA,KACnC,SAACR,EAAD,CAAsBC,KAAMmB,aAKlC,UAAC,IAAD,CAAOK,UAAU,iCAAjB,WACE,SAAC,KAAD,CAAQE,QAASL,EAAUU,KAAK,QAAQC,OAAK,EAA7C,wBAGA,SAAC,KAAD,CAAQN,QAASN,EAAQW,KAAK,QAAQC,OAAK,EAACC,KAAK,UAAjD,4BAMJ,SAAC,KAAD,CAAQA,KAAK,UAAUP,QAAS,kBAAMZ,EAAK,CAAC,EAAZ,EAAgBoB,UAAWxB,EAASyB,QAAStB,EAA7E,uBAOT,C,8JCpCM,SAASuB,EAAT,GAA6C,IAAzB9B,EAAwB,EAAxBA,MACzB,GAAoC+B,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,KAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAEA,GAAyCC,EAAAA,EAAAA,KAAzC,eAAOC,EAAP,KAAqBC,EAArB,KAAcC,MACRC,GAAeC,EAAAA,EAAAA,UAAQ,WAC3B,OAAOC,KAAKC,IAAID,KAAKE,KAAKN,GAAkBN,EAAW,KAAMJ,EAC9D,GAAE,CAACU,EAAgBV,EAAYI,IAC1BnC,GAAYC,EAAAA,EAAAA,GAAa0C,EAAe,EAAG,CAAEK,SAAU,MAErD9C,EAA8DH,EAA9DG,KAAMC,EAAwDJ,EAAxDI,QAASC,EAA+CL,EAA/CK,SAAUC,EAAqCN,EAArCM,UAAWC,EAA0BP,EAA1BO,SAAUC,EAAgBR,EAAhBQ,KAAM0C,EAAUlD,EAAVkD,MAEtDC,GAAUC,EAAAA,EAAAA,QAAuB,MAGvC,IACEC,EAAAA,EAAAA,IAAgBlD,EAAME,EAAU2B,EAAYE,GADtCoB,GAAR,GAAQA,QAASC,GAAjB,GAAiBA,MAAOC,GAAxB,GAAwBA,SAAUC,GAAlC,GAAkCA,UAAW3C,GAA7C,GAA6CA,OAAQ4C,GAArD,GAAqDA,QAASC,GAA9D,GAA8DA,YAAaC,GAA3E,GAA2EA,OAAQC,GAAnF,GAAmFA,QAQ7EC,IACJ,2BACE,yCAAiBhB,KAAKiB,MAAqB,IAAdb,EAAMc,MAAP,MAA5B,QACA,kDAA0Bd,EAAMc,UAChC,uCAAed,EAAMe,aACrB,uCAAef,EAAMgB,aACrB,2CAAmBhB,EAAMiB,aAI7B,OACE,UAAC,YAAD,CAAgBjD,UAAU,cAA1B,UACGX,IAAY,uCACZD,IACC,UAAC,IAAD,CAAOY,UAAU,kBAAkBC,UAAU,WAAWsB,IAAKA,EAA7D,WACE,UAAC,IAAD,CAAO2B,MAAI,EAAClD,UAAU,4BAAtB,WACE,SAAC,IAAD,CAASmD,QAASP,GAAczC,MAAM,QAAQiD,UAAU,SAAxD,UACE,SAAC,KAAD,CAAQ7C,KAAK,QAAQ5B,MAAM,SAAC0E,EAAA,EAAD,IAA3B,sBAIF,wCACA,SAAC,IAAD,CACEC,gBAAgB,aAChBC,kBAAkB,WAClBC,QAASb,GAAQc,UACjBC,SAAU,kBAAMf,GAAQgB,iBAAd,KAEZ,SAAC,IAAD,CACEL,gBAAgB,WAChBC,kBAAkB,SAClBC,QAASpC,EACTsC,SAAU,SAACE,GAAD,OAAOvC,EAAWuC,EAAlB,KAEZ,UAAC,IAAD,CACEF,SAAU,SAACpG,GAAD,OAAW2D,EAAgB3D,EAA3B,EACVuG,aAAc7C,EACdhB,UAAU,qBACVO,KAAK,QAJP,WAME,UAAC,WAAD,CAAejD,MAAO,EAAtB,mBAAgC,IAAhC,SACA,UAAC,WAAD,CAAeA,MAAO,EAAtB,mBAAgC,IAAhC,SACA,UAAC,WAAD,CAAeA,MAAO,EAAtB,mBAAgC,IAAhC,SACA,UAAC,WAAD,CAAeA,MAAO,GAAtB,mBAAiC,IAAjC,UACA,SAAC,WAAD,CAAeA,MAAO,EAAtB,2BAEF,UAAC,IAAD,CACEoG,SAAU,SAACpG,GAAD,OAAWyD,EAAczD,EAAzB,EACVuG,aAAc/C,EACdd,UAAU,qBACVO,KAAK,QAJP,WAME,SAAC,WAAD,CAAejD,MAAO,EAAtB,uBACA,SAAC,WAAD,CAAeA,MAAO,GAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,GAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,GAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,IAAtB,4BAEF,UAAC,IAAD,CACEoG,SAAU,SAACpG,GAAD,OAAW6D,EAAY7D,EAAvB,EACVuG,aAAc3C,EACdlB,UAAU,qBACVO,KAAK,QAJP,WAME,SAAC,WAAD,CAAejD,MAAO,IAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,IAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,IAAtB,wBACA,SAAC,WAAD,CAAeA,MAAO,IAAtB,2BAEF,SAAC,KAAD,CACEmD,KAAK,UACLF,KAAK,QACL5B,MAAM,SAACmF,EAAA,EAAD,IACN5D,QAAS,kBAAMZ,EAAK,CAAC,EAAZ,EACToB,UAAWxB,EACXyB,QAAStB,EACT0E,QAAM,EAPR,sBAYF,UAAC,IAAD,CACE5D,MAAM,6BACNC,OACE,6BACE,SAAC4D,EAAA,EAAD,IADF,IACyBtB,MAG3B1C,UAAU,8BACVuB,IAAKU,EARP,WAUE,SAAC,iBAAD,WACE,gBACEjC,UAAU,oBACViE,MAAO,CAAEC,oBAAoB,UAAD,OAAYtC,KAAKuC,IAAIzC,EAAc,GAAnC,WAF9B,SAIGU,GAAQgC,KAAI,SAACC,EAAQC,GACpB,IAAMC,EAAahC,GAAUiC,SAASH,GAChC7F,EAAO6D,GAAMiC,GAEnB,OACE,gBAAKtE,UAAU,yBAAf,UACE,UAAC,KAAD,CACEE,QAAS,kBAAMoC,GAAS+B,EAAf,EACTI,OAAQF,EACRvE,UAAU,4BACV0E,YAAY,oCAJd,WAME,SAAC,KAAD,CAAWpE,GAAI+D,EAAQtF,UAAWA,EAAW4F,SAAS,KACtD,2BACGvD,IAAW,SAAC,IAAD,UAAMiD,KAElB,SAAC9F,EAAD,CAAsBC,KAAMA,WAXW6F,EAgBhD,SAGL,SAACO,EAAD,CACEvF,SAAUA,EACVH,QAASA,EACTqD,UAAWA,GACX3C,OAAQA,GACR6C,YAAaA,GACboC,UAnIM,WAAO,IAAD,EACtBrC,KACA,UAAAP,EAAQ6C,eAAR,SAAiBC,eAAe,CAAEC,SAAU,UAC7C,QAmIO,gBAAKf,MAAO,CAAEgB,OAAQ,YAK/B,CAWD,IAAML,EAAU,SAAC,GAAoF,IAAlFvF,EAAiF,EAAjFA,SAAUH,EAAuE,EAAvEA,QAASqD,EAA8D,EAA9DA,UAAW3C,EAAmD,EAAnDA,OAAQ6C,EAA2C,EAA3CA,YAAaoC,EAA8B,EAA9BA,UACpE,GAAIxF,EACF,OACE,+BACE,SAAC,IAAD,CAAaV,MAAM,SAACuG,EAAA,EAAD,QAUzB,OAGE,gCACGhG,IACC,SAAC,IAAD,CAAaP,MAAM,SAACwG,EAAA,EAAD,IAAqB1E,KAAK,UAAUwD,MAAO,CAAEmB,MAAO,QAEzE,SAAC,IAAD,CACEzG,MAAM,SAAC0G,EAAA,EAAD,IACNpB,MAAO,CAAEmB,MAAO,KAEhBlF,QAASuC,KAEX,SAAC,IAAD,CACE9D,MAAM,SAAC2G,EAAA,EAAD,IACNrB,MAAO,CAAEmB,MAAO,IAChB3E,KAAM8B,EAAU7D,OAAS,EAAI,UAAY,UAEzC6G,MAAO,CAAEC,MAAOjD,EAAU7D,OAAQ6B,KAAM,SACxCL,QAxBW,WACXqC,EAAU7D,OAAS,GACvBkB,GACD,KAuBG,SAAC,IAAD,CACEjB,MAAM,SAAC8G,EAAA,EAAD,IACNxB,MAAO,CAAEmB,MAAO,IAEhBlF,QAAS2E,MAIhB,EC5LD,MArCA,YACEa,EAAAA,EAAAA,GAAS,qDACT,OAAwB7E,EAAAA,EAAAA,UAAS,WAAjC,eAAO8E,EAAP,KAAaC,EAAb,KACMvH,GAAKtB,EAAAA,EAAAA,GAAe,CAAE4I,KAAM,cAElC/H,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACdgI,EAAO,UAACvH,EAAGJ,YAAY0H,YAAhB,QAAwB,WAChC,GAAE,CAACtH,EAAGJ,YAAY0H,OAEnB,IAAM7G,GAAQ+G,EAAAA,EAAAA,MAEd,IAAIC,EAAAA,EAAAA,SAAQhH,EAAMG,OAASH,EAAMiH,UAC/B,OAAO,SAAC,KAAD,IAGT,GAAIjH,EAAMkH,QACR,OAAO,SAAC,IAAD,CAAWC,QAAQ,uBAG5B,IAAMC,EAAW,CACf,CAAEC,MAAO,UAAW7I,MAAO,UAAWoD,SAAmB,YAATiF,GAChD,CAAEQ,MAAO,WAAY7I,MAAO,WAAYoD,SAAmB,aAATiF,IAGpD,OACE,4BACE,SAACS,EAAA,EAAD,CACEjG,MAAM,4BACNC,OAAO,SAAC,IAAD,CAAWiG,QAASH,EAAUrC,aAAc8B,EAAMjC,SAAU,SAAC4C,GAAD,OAAYjI,EAAGjB,IAAI,OAAQkJ,EAA3B,MAG3D,YAATX,IAAsB,SAAC9G,EAAD,CAAYC,MAAOA,IAChC,aAAT6G,IAAuB,SAAC/E,EAAD,CAAU9B,MAAOA,MAG9C,C","sources":["hooks/useQueryParams.ts","pages/Dev/ImageCards/RelationshipCountTag.tsx","pages/Dev/ImageCards/Comparator.tsx","pages/Dev/ImageCards/Grouping.tsx","pages/Dev/ImageCards/ImageCardsPage.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  /**\n   * Adds a query param\n   * @param key - the key of the query param to add\n   * @param value - the value of the query param to add\n   */\n  const add = (key: string, value: unknown) => {\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  /**\n   * Removes a query param\n   * @param key - the key of the query param to remove\n   */\n  const remove = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        add(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    add,\n    remove,\n    queryParams,\n  };\n}\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Card, Image, Layout, Space } from 'antd';\n\nimport { ImageCard } from 'components/image-cards';\n\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Components\nimport './dev-image-cards.scss';\nimport { UseImageCardsRelationshipDataReturnValue, useRandomCards } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\n\ntype ComparatorProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Comparator({ query }: ComparatorProps) {\n  const cardWidth = useCardWidth(2);\n\n  const { data, isDirty, setDirty, isSuccess, isSaving, save } = query;\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardAId, cardA, cardBId, cardB, relate, unrelate, areRelated, onRandomCards } = useRandomCards(\n    data,\n    setDirty\n  );\n\n  return (\n    <Layout.Content className=\"dev-content\">\n      {isSaving && <div>Saving...</div>}\n      {isSuccess && !isSaving && (\n        <Space className=\"space-container\" direction=\"vertical\">\n          <Button onClick={onRandomCards}>New Random Cards</Button>\n          <Card title={`${cardAId} X ${cardBId}`} extra={areRelated && <CheckCircleFilled />}>\n            <div className=\"image-card-card\">\n              <Image.PreviewGroup>\n                <div className=\"image-card-card__image\">\n                  <ImageCard id={cardAId} cardWidth={cardWidth} />\n                  <RelationshipCountTag card={cardA} />\n                </div>\n                <div className=\"image-card-card__image\">\n                  <ImageCard id={cardBId} cardWidth={cardWidth} />\n                  <RelationshipCountTag card={cardB} />\n                </div>\n              </Image.PreviewGroup>\n            </div>\n\n            <Space className=\"image-card-categorizer-options\">\n              <Button onClick={unrelate} size=\"large\" block>\n                Unrelated\n              </Button>\n              <Button onClick={relate} size=\"large\" block type=\"primary\">\n                Related\n              </Button>\n            </Space>\n          </Card>\n\n          <Button type=\"primary\" onClick={() => save({})} disabled={!isDirty} loading={isSaving}>\n            Save\n          </Button>\n        </Space>\n      )}\n    </Layout.Content>\n  );\n}\n","// Ant Design Resources\nimport { Button, Card, FloatButton, Image, Layout, Popover, Select, Space, Switch, Tag } from 'antd';\n\nimport { ImageCard } from 'components/image-cards';\n\n// Components\nimport './dev-image-cards.scss';\nimport { UseImageCardsRelationshipDataReturnValue, useRandomGroups } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { TransparentButton } from 'components/buttons';\nimport { useMemo, useRef, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport {\n  BarChartOutlined,\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SaveOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\ntype GroupingProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Grouping({ query }: GroupingProps) {\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(120);\n  const [showIds, setShowIds] = useState(false);\n  // Get screen size and calculate how many 120px cards can fit in a row\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const cardQuantity = useMemo(() => {\n    return Math.min(Math.ceil(containerWidth / (cardSize + 16)), sampleSize);\n  }, [containerWidth, sampleSize, cardSize]);\n  const cardWidth = useCardWidth(cardQuantity + 1, { minWidth: 100 });\n\n  const { data, isDirty, setDirty, isSuccess, isSaving, save, stats } = query;\n\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles, filters } =\n    useRandomGroups(data, setDirty, sampleSize, tagThreshold);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const statsContent = (\n    <ul>\n      <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n      <li>Total Relationships: {stats.total}</li>\n      <li>Complete: {stats.complete}</li>\n      <li>Overdone: {stats.overdone}</li>\n      <li>Single Match: {stats.single}</li>\n    </ul>\n  );\n\n  return (\n    <Layout.Content className=\"dev-content\">\n      {isSaving && <div>Saving...</div>}\n      {isSuccess && (\n        <Space className=\"space-container\" direction=\"vertical\" ref={ref}>\n          <Space wrap className=\"contained space-container\">\n            <Popover content={statsContent} title=\"Stats\" placement=\"bottom\">\n              <Button size=\"small\" icon={<BarChartOutlined />}>\n                Stats\n              </Button>\n            </Popover>\n            <span>Filters:</span>\n            <Switch\n              checkedChildren=\"Use Cycles\"\n              unCheckedChildren=\"Any Card\"\n              checked={filters.useCycles}\n              onChange={() => filters.toggleUseCycles()}\n            />\n            <Switch\n              checkedChildren=\"Show Ids\"\n              unCheckedChildren=\"No Ids\"\n              checked={showIds}\n              onChange={(c) => setShowIds(c)}\n            />\n            <Select\n              onChange={(value) => setTagThreshold(value)}\n              defaultValue={tagThreshold}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={1}>Tags: {'='} 0</Select.Option>\n              <Select.Option value={3}>Tags: {'<'} 3</Select.Option>\n              <Select.Option value={5}>Tags: {'<'} 5</Select.Option>\n              <Select.Option value={10}>Tags: {'<'} 10</Select.Option>\n              <Select.Option value={0}>Tags: Any</Select.Option>\n            </Select>\n            <Select\n              onChange={(value) => setSampleSize(value)}\n              defaultValue={sampleSize}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={9}>Cards: 9</Select.Option>\n              <Select.Option value={15}>Cards: 15</Select.Option>\n              <Select.Option value={30}>Cards: 30</Select.Option>\n              <Select.Option value={50}>Cards: 50</Select.Option>\n              <Select.Option value={100}>Cards: 100</Select.Option>\n            </Select>\n            <Select\n              onChange={(value) => setCardSize(value)}\n              defaultValue={cardSize}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={120}>Size: 120</Select.Option>\n              <Select.Option value={150}>Size: 150</Select.Option>\n              <Select.Option value={200}>Size: 200</Select.Option>\n              <Select.Option value={300}>Size: 300</Select.Option>\n            </Select>\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              icon={<SaveOutlined />}\n              onClick={() => save({})}\n              disabled={!isDirty}\n              loading={isSaving}\n              danger\n            >\n              Save\n            </Button>\n          </Space>\n          <Card\n            title=\"Card Relationship Matching\"\n            extra={\n              <span>\n                <FileImageOutlined /> {cycles}\n              </span>\n            }\n            className=\"image-card-categorizer-card\"\n            ref={cardRef}\n          >\n            <Image.PreviewGroup>\n              <div\n                className=\"image-cards-group\"\n                style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n              >\n                {cardIds.map((cardId, index) => {\n                  const isSelected = selection.includes(cardId);\n                  const card = cards[index];\n\n                  return (\n                    <div className=\"image-card-card__image\" key={cardId}>\n                      <TransparentButton\n                        onClick={() => onSelect(cardId)}\n                        active={isSelected}\n                        className=\"image-cards-group__button\"\n                        activeClass=\"image-cards-group__button--active\"\n                      >\n                        <ImageCard id={cardId} cardWidth={cardWidth} preview={false} />\n                        <div>\n                          {showIds && <Tag>{cardId}</Tag>}\n                          {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                          <RelationshipCountTag card={card} />\n                        </div>\n                      </TransparentButton>\n                    </div>\n                  );\n                })}\n              </div>\n            </Image.PreviewGroup>\n            <Actions\n              isSaving={isSaving}\n              isDirty={isDirty}\n              selection={selection}\n              relate={relate}\n              deselectAll={deselectAll}\n              onNextSet={onNextSet}\n            />\n          </Card>\n          <div style={{ height: 100 }}></div>\n        </Space>\n      )}\n    </Layout.Content>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    // </FloatButton.Group>\n    <>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>\n  );\n};\n","import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Segmented } from 'antd';\nimport { DevHeader } from '../DevHeader';\n\n// Components\nimport './dev-image-cards.scss';\nimport { useImageCardsRelationshipData } from './hooks';\nimport { useEffect, useState } from 'react';\nimport { LoadingPage } from 'components/loaders';\nimport { isEmpty } from 'lodash';\nimport { PageError } from 'components/errors';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { Comparator } from './Comparator';\nimport { Grouping } from './Grouping';\n\nfunction ImageCardsRelationshipsPage() {\n  useTitle('Image Cards Relationships | Dev | Tarde Divertida');\n  const [view, setView] = useState('default');\n  const qp = useQueryParams({ view: 'grouping' });\n\n  useEffect(() => {\n    setView(qp.queryParams.view ?? 'grouping');\n  }, [qp.queryParams.view]);\n\n  const query = useImageCardsRelationshipData();\n\n  if (isEmpty(query.data) && query.isLoading) {\n    return <LoadingPage />;\n  }\n\n  if (query.isError) {\n    return <PageError message=\"Something is wrong\" />;\n  }\n\n  const segments = [\n    { label: 'Compare', value: 'default', disabled: view === 'compare' },\n    { label: 'Grouping', value: 'grouping', disabled: view === 'grouping' },\n  ];\n\n  return (\n    <div>\n      <DevHeader\n        title=\"Image Cards Relationships\"\n        extra={<Segmented options={segments} defaultValue={view} onChange={(v: any) => qp.add('view', v)} />}\n      />\n\n      {view === 'default' && <Comparator query={query} />}\n      {view === 'grouping' && <Grouping query={query} />}\n    </div>\n  );\n}\n\nexport default ImageCardsRelationshipsPage;\n"],"names":["useQueryParams","defaultParams","useSearchParams","searchParams","setSearchParams","add","key","value","undefined","delete","set","String","remove","useEffect","Object","entries","forEach","has","queryParams","toString","split","reduce","qp","entry","RelationshipCountTag","card","color","length","icon","TagsFilled","Comparator","query","cardWidth","useCardWidth","data","isDirty","setDirty","isSuccess","isSaving","save","useRandomCards","cardAId","cardA","cardBId","cardB","relate","unrelate","areRelated","onRandomCards","className","direction","onClick","title","extra","CheckCircleFilled","id","size","block","type","disabled","loading","Grouping","useState","sampleSize","setSampleSize","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","useMeasure","ref","containerWidth","width","cardQuantity","useMemo","Math","min","ceil","minWidth","stats","cardRef","useRef","useRandomGroups","cardIds","cards","onSelect","selection","nextSet","deselectAll","cycles","filters","statsContent","floor","total","complete","overdone","single","wrap","content","placement","BarChartOutlined","checkedChildren","unCheckedChildren","checked","useCycles","onChange","toggleUseCycles","c","defaultValue","SaveOutlined","danger","FileImageOutlined","style","gridTemplateColumns","max","map","cardId","index","isSelected","includes","active","activeClass","preview","Actions","onNextSet","current","scrollIntoView","behavior","height","LoadingOutlined","WarningOutlined","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","useTitle","view","setView","useImageCardsRelationshipData","isEmpty","isLoading","isError","message","segments","label","DevHeader","options","v"],"sourceRoot":""}