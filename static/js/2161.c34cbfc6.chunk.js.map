{"version":3,"file":"static/js/2161.c34cbfc6.chunk.js","mappings":"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","sources":["components/cards/GlyphCard.tsx","components/general/Achievements.tsx","components/image-cards/ImageBlurButton.tsx","components/image-cards/ImageBlurButtonContainer.tsx","components/image-cards/ImageCard.tsx","components/image-cards/ImageCardBack.tsx","components/image-cards/ImageCardButton.tsx","components/image-cards/ImageCardHand.tsx","components/image-cards/ImageCardPreloadHand.tsx","components/image-cards/ImageCardSelectButton.tsx","components/sprites/Sprite.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Components\nimport { Sprite } from 'components/sprites';\n// Sass\nimport './GlyphCard.scss';\n\ntype GlyphCardProps = {\n  /**\n   * The id of the glyph\n   */\n  id: number | string;\n  /**\n   * The width of the glyph\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nconst BASE = 128;\n\n/**\n * Retrieves the source and glyph ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and glyph ID.\n */\nconst getSource = (numId: number) => {\n  const glyphId = `glyph-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `glyphs-${sourceId}`;\n  return [source, glyphId];\n};\n\n/**\n * A glyph card component.\n */\nexport function GlyphCard({ id, width, className }: GlyphCardProps) {\n  const [source, glyphId] = getSource(+id);\n\n  return (\n    <div className={clsx('glyph-card', className)} style={{ width: `${width}px`, height: `${width}px` }}>\n      <Sprite source={source} id={glyphId} width={width ? width - 12 : undefined} padding={0} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Button, Popover } from 'antd';\n// Types\nimport type { Achievement, AchievementReference } from 'types/achievements';\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\n// Internal\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n  white?: boolean;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference, white }: AchievementsProps) {\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3} white={white}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      {achievements.length === 0 && (\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Nenhuma medalha foi conquistada nesse jogo.\n                <br />\n                Para ganhar uma medalha, apenas uma jogador pode atender a condição.\n              </>\n            }\n            en={\n              <>\n                No achievements were achieved in this game.\n                <br />\n                To win a medal, only one player can meet the condition.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport { Button, Tooltip } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n};\n\nexport function ImageBlurButton({ cardId, ghost = true }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost={ghost} onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Focus\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Internal\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer.scss';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The position of the button (default: bottom)\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  position = 'bottom',\n  ghost = true,\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {position === 'top' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n      {children}\n      {position === 'bottom' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Images\nimport placeholder from 'assets/images/placeholder.jpg';\n// Sass\nimport './ImageCard.scss';\n// Assets\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  cardWidth?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * Replacement image when the preview is open\n   */\n  previewImageId?: string;\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n  /**\n   * Forces height to be the same as the width\n   */\n  square?: boolean;\n  /**\n   * Use classic image library\n   */\n  classic?: boolean;\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  id,\n  cardWidth = 200,\n  className = '',\n  preview = true,\n  previewImageId = '',\n  fileExtension = 'jpg',\n  square = false,\n  classic = false,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl(classic ? 'classic' : 'images');\n\n  const baseClass = 'image-card';\n\n  const { imageURL, fallbackName } = useMemo(() => {\n    const imageURL = id.replace(/-/g, '/');\n    const numId = Number(imageURL?.split('/')?.at(-1) ?? id[id.length - 1]) % 12;\n\n    const fallbackName = `placeholder-${numId}`;\n    return {\n      imageURL,\n      fallbackName,\n    };\n  }, [id]);\n\n  const isBlurred = shouldBeBlurred(id);\n\n  const previewConfig = typeof preview === 'boolean' ? {} : preview;\n\n  return (\n    <div\n      className={clsx(\n        baseClass,\n        isBlurred && `${baseClass}--blur`,\n        square && `${baseClass}--square`,\n        className\n      )}\n      style={{ height: square ? `${cardWidth}px` : undefined }}\n    >\n      <Image\n        width={cardWidth}\n        src={`${baseUrl}/${imageURL}.${fileExtension}`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          isBlurred || !preview\n            ? false\n            : {\n                ...previewConfig,\n                maskClassName: clsx(`${baseClass}__preview-mask`, previewConfig?.maskClassName),\n                src: Boolean(previewImageId)\n                  ? `${baseUrl}/${previewImageId.replace(/-/g, '/')}.${fileExtension}`\n                  : previewConfig?.src,\n              }\n        }\n      />\n    </div>\n  );\n};\n","// Internal\nimport { ImageCard, ImageCardProps } from './ImageCard';\n\ntype ImageCardBackProps = Omit<ImageCardProps, 'id'> & { id?: ImageCardId };\n\nexport const ImageCardBack = ({ id = 'back-default', ...rest }: ImageCardBackProps) => {\n  return <ImageCard id={id} {...rest} />;\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { DownCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Components\nimport { DebugOnly } from 'components/debug';\nimport { Translate } from 'components/language';\n// Internal\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './ImageCardButton.scss';\n//  Components\n\ntype ImageCardButtonProps = {\n  /**\n   * The id of the image\n   */\n  id: string;\n  /**\n   * The content, usually a ImageCard component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name for the container\n   */\n  className?: string;\n  /**\n   * The position of the button (default: top)\n   */\n  buttonPosition?: 'top' | 'bottom';\n  /**\n   * The button is over the image (default: false)\n   */\n  over?: boolean;\n  /**\n   * Button icon replacement\n   */\n  icon?: ReactNode;\n  /**\n   * The function to be called when the button is clicked\n   */\n  onClick?: (...args: any) => void;\n  /**\n   * Disables the button (default: false)\n   */\n  disabled?: boolean;\n  /**\n   * The text for the button\n   */\n  buttonText?: ReactNode;\n  /**\n   * The props for the button\n   */\n  buttonProps?: Omit<ButtonProps, 'onClick' | 'disabled'>;\n};\n\nexport function ImageCardButton({\n  id,\n  children,\n  className = '',\n  buttonPosition = 'top',\n  over = false,\n  icon,\n  onClick,\n  disabled = false,\n  buttonText,\n  buttonProps = {},\n}: ImageCardButtonProps) {\n  const isTop = buttonPosition === 'top';\n\n  const iconComponent = icon ?? (isTop ? <DownCircleOutlined /> : <UpCircleOutlined />);\n\n  const { className: buttonClassName, ...restButtonProps } = buttonProps;\n\n  const button = onClick ? (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={over}\n      className={clsx(\n        'image-card-button__button',\n        over && 'image-card-button__button--over',\n        over && `image-card-button__button--over-${buttonPosition}`,\n        buttonClassName\n      )}\n      onClick={() => onClick(id)}\n      disabled={disabled}\n      {...restButtonProps}\n    >\n      {iconComponent}\n      {buttonText ?? <Translate pt=\"Selecionar\" en=\"Select\" />}\n      {iconComponent}\n    </Button>\n  ) : (\n    <></>\n  );\n\n  return (\n    <div className={clsx('image-card-button', className)}>\n      <ImageBlurButtonContainer cardId={id} position={buttonPosition === 'bottom' ? 'top' : 'bottom'}>\n        <DebugOnly>{id}</DebugOnly>\n        <div className=\"image-card-button__container\">\n          {isTop && button}\n          {children}\n          {!isTop && button}\n        </div>\n      </ImageBlurButtonContainer>\n    </div>\n  );\n}\n","import { ImageCard, ImageCardButton } from '.';\nimport clsx from 'clsx';\nimport { LegacyRef, ReactNode } from 'react';\n// Ant Design Resources\nimport { GetProps, Image } from 'antd';\n// Hooks\nimport { useCardWidthByContainerRef } from 'hooks/useCardWidth';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Sass\nimport './ImageCardHand.scss';\n\ntype ImageCardHandProps = {\n  /**\n   * The list of card ids\n   */\n  hand: ImageCardId[];\n  /**\n   * Function to trigger when clicking on the select button\n   */\n  onSelectCard?: GenericFunction;\n  /**\n   * Select button custom label\n   */\n  selectButtonText?: ReactNode;\n  /**\n   * Select button custom icon\n   */\n  selectButtonIcon?: ReactNode;\n  /**\n   * Select button custom class\n   */\n  selectButtonClass?: string;\n  /**\n   * Disable select button\n   */\n  disabledSelectButton?: boolean;\n  /**\n   * Optional custom class name for the hand container\n   */\n  className?: string;\n  /**\n   * The size of the card\n   */\n  cardSize?: number;\n  /**\n   * If no card size is provided, the ratio is used instead to determine card size (default 8)\n   */\n  sizeRatio?: number;\n  /**\n   * Minimum width of a card (default 80)\n   */\n  minCardSize?: number;\n  /**\n   * Cache showing which cards have been selected and should be highlighted\n   */\n  selectedCards?: BooleanDictionary;\n  /**\n   * Custom card class\n   */\n  cardClassName?: string;\n  /**\n   * Enable preview (default: true)\n   */\n  preview?: boolean;\n  /**\n   * The Image group preview object\n   */\n  imageGroupPreview?: GetProps<typeof Image.PreviewGroup>['preview'];\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonText,\n  selectButtonIcon,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n  selectedCards = {},\n  cardClassName = '',\n  preview = true,\n  imageGroupPreview,\n}: ImageCardHandProps) {\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const [cardWidth, containerRef] = useCardWidthByContainerRef(Math.max(sizeRatio, 6), {\n    minWidth: minCardSize,\n  });\n\n  return (\n    <Image.PreviewGroup preview={imageGroupPreview}>\n      <div className={clsx('image-card-hand', className)} ref={containerRef as LegacyRef<HTMLDivElement>}>\n        {hand.map((cardId, index) => {\n          return (\n            <div\n              key={`hand-${cardId}`}\n              className={clsx(\n                'image-card-hand__card-container',\n                getAnimationClass('slideInUp', {\n                  delay: index,\n                })\n              )}\n            >\n              <ImageCardButton\n                onClick={onSelectCard}\n                id={cardId}\n                buttonProps={{ className: selectButtonClass }}\n                icon={selectButtonIcon}\n                buttonText={selectButtonText}\n                disabled={disabledSelectButton}\n              >\n                <ImageCard\n                  id={cardId}\n                  cardWidth={cardSize || cardWidth}\n                  className={clsx(selectedCards[cardId] && 'image-card-hand__selected', cardClassName)}\n                  preview={preview}\n                />\n              </ImageCardButton>\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","// Internal\nimport { ImageCard } from './ImageCard';\n// Sass\nimport './ImageCardPreloadHand.scss';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard id={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCardId;\n  onClick: GenericFunction;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import { useQuery } from '@tanstack/react-query';\n// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\nimport { Spin, Tooltip } from 'antd';\n// Hooks\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const baseUrl = useTDBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/sprites/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - padding * 2;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n"],"names":["GlyphCard","id","width","className","numId","glyphId","sourceId","Math","ceil","getSource","source","clsx","style","height","undefined","padding","unknownText","pt","en","Achievements","players","achievements","reference","white","getAnimationClass","size","level","length","contained","map","achievement","index","type","icon","achievementObj","player","playerId","delay","title","avatarId","name","Boolean","description","content","value","shape","ImageBlurButton","cardId","ghost","useBlurCards","blurCard","isBlurEnabled","shouldBeBlurred","placement","onClick","EyeOutlined","EyeInvisibleOutlined","ImageBlurButtonContainer","children","position","rest","ImageCard","cardWidth","preview","previewImageId","fileExtension","square","classic","baseUrl","useTDBaseUrl","baseClass","useMemo","imageURL","replace","Number","split","at","fallbackName","isBlurred","previewConfig","src","placeholder","fallback","PUBLIC_URL","CARDS","maskClassName","ImageCardBack","ImageCardButton","buttonPosition","over","disabled","buttonText","buttonProps","isTop","iconComponent","DownCircleOutlined","UpCircleOutlined","buttonClassName","restButtonProps","button","ImageCardHand","hand","onSelectCard","selectButtonText","selectButtonIcon","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","selectedCards","cardClassName","imageGroupPreview","useCardWidthByContainerRef","max","minWidth","containerRef","PreviewGroup","ref","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","custom","Sprite","useQuery","queryKey","queryFn","fetch","response","text","enabled","isLoading","data","isError","paddedWidth","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background"],"sourceRoot":""}