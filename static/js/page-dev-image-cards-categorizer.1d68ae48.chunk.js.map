{"version":3,"file":"static/js/page-dev-image-cards-categorizer.1d68ae48.chunk.js","mappings":"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","sources":["pages/Dev/ImageCards/ImageCardsCategorizer.tsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Button, Card, Layout, Select, Space, Switch } from 'antd';\nimport { DevHeader } from '../DevHeader';\nimport { useMemo } from 'react';\nimport { ImageCard } from 'components/image-cards';\n\nimport { buildDictionaries, hasCardAchievedMinimumRequirements } from './utils';\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Components\nimport './dev-image-cards.scss';\nimport { useImageCardsData, useRandomCard } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\n\nfunction ImageCardsCategorizerPage() {\n  useTitle('Image Cards Categorizer | Dev | Tarde Divertida');\n\n  const cardWidth = useCardWidth(2);\n\n  const { data, isLoading, isDirty, setDirty, isSuccess, isSaving, save } = useImageCardsData();\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardId, card, onRandomCard, update, toggleHighlight } = useRandomCard(data, setDirty);\n\n  // Build local object of tags\n  const dataKey = JSON.stringify(data);\n  const { colors, mood, elements, actions } = useMemo(() => buildDictionaries(data), [dataKey]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleFocusChange = (value: string[]) => {\n    update('focus', value);\n  };\n\n  const handleColorChange = (value: string[]) => {\n    update('colors', value);\n  };\n\n  const handleMoodChange = (value: string[]) => {\n    update('mood', value);\n  };\n\n  const handleElementsChange = (value: string[]) => {\n    update('elements', value);\n  };\n\n  const handleActionsChange = (value: string[]) => {\n    update('actions', value);\n  };\n\n  return (\n    <Layout className=\"dev-layout\">\n      <DevHeader title=\"Image Cards Categorizer\" />\n      <Layout.Content className=\"dev-content\">\n        {isLoading && <div>Loading...</div>}\n        {isSaving && <div>Saving...</div>}\n        {isSuccess && !isSaving && (\n          <Space className=\"space-container\" direction=\"vertical\">\n            <Button onClick={onRandomCard}>Random Card</Button>\n\n            <Card\n              title={cardId}\n              extra={hasCardAchievedMinimumRequirements(card) && <CheckCircleFilled />}\n              key={cardId}\n            >\n              <div className=\"image-card-card\">\n                <div className=\"image-card-card__image\">\n                  <ImageCard id={cardId} cardWidth={cardWidth} />\n                </div>\n                <div className=\"image-card-card__data\">\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"focus\">Focus</label>\n                    <Select\n                      id=\"focus\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Focus\"\n                      onChange={handleFocusChange}\n                      options={elements}\n                      defaultValue={card.focus}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"actions\">Actions</label>\n                    <Select\n                      id=\"actions\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Actions\"\n                      onChange={handleActionsChange}\n                      options={actions}\n                      defaultValue={card.actions}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"colors\">Colors</label>\n                    <Select\n                      id=\"colors\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Colors\"\n                      onChange={handleColorChange}\n                      options={colors}\n                      defaultValue={card.colors}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"mood\">Mood</label>\n                    <Select\n                      id=\"mood\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Mood\"\n                      onChange={handleMoodChange}\n                      options={mood}\n                      defaultValue={card.mood}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"elements\">Elements</label>\n                    <Select\n                      id=\"elements\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Elements\"\n                      onChange={handleElementsChange}\n                      options={elements}\n                      defaultValue={card.elements}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label>Highlight</label>\n                    <div>\n                      <Switch checked={card.highlight} onChange={toggleHighlight} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Button type=\"primary\" onClick={() => save({})} disabled={!isDirty} loading={isSaving}>\n              Save\n            </Button>\n          </Space>\n        )}\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default ImageCardsCategorizerPage;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["useTitle","cardWidth","useCardWidth","useImageCardsData","data","isLoading","isDirty","setDirty","isSuccess","isSaving","save","useRandomCard","cardId","card","onRandomCard","update","toggleHighlight","dataKey","JSON","stringify","useMemo","buildDictionaries","colors","mood","elements","actions","className","title","direction","onClick","extra","hasCardAchievedMinimumRequirements","id","htmlFor","mode","placeholder","onChange","value","options","defaultValue","focus","checked","highlight","type","disabled","loading","constructor","bindMethods","this","mutate","bind","reset","setOptions","prevOptions","client","defaultMutationOptions","shallowEqualObjects","mutation","observer","onUnsubscribe","onMutationUpdate","notifyOptions","listeners","action","getCurrentResult","getMutationCache","build","variables","currentMutation","updateResult","state","getDefaultState","result","isError","isIdle","notify","notifyManager","listener","useMutation","noop"],"sourceRoot":""}