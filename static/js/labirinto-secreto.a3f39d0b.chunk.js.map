{"version":3,"file":"static/js/labirinto-secreto.a3f39d0b.chunk.js","mappings":"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","sources":["components/cards/Card.tsx","components/general/Container.tsx","components/metrics/MetricHighlight.tsx","components/metrics/PointsHighlight.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx","../node_modules/@ant-design/icons-svg/es/asn/StepBackwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepBackwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/StepForwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepForwardOutlined.js","components/slide-show/SlideShowControls.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/labirinto-secreto/utils/api-requests.ts","games/labirinto-secreto/utils/constants.ts","games/labirinto-secreto/utils/helpers.ts","games/labirinto-secreto/utils/mocks.ts","games/labirinto-secreto/components/ForestTree.tsx","components/avatars/AvatarGroup.tsx","games/labirinto-secreto/components/Forest.tsx","games/labirinto-secreto/components/Highlights.tsx","games/labirinto-secreto/components/MapBuilder.tsx","games/labirinto-secreto/StepBuildMap.tsx","games/labirinto-secreto/components/PlayerSelection.tsx","games/labirinto-secreto/StepBuildWait.tsx","games/labirinto-secreto/PhaseMapBuilding.tsx","games/labirinto-secreto/components/MapEntry.tsx","games/labirinto-secreto/components/PlayerMap.tsx","components/mouse/MouseFollowingContent.tsx","games/labirinto-secreto/components/ClickableForest.tsx","games/labirinto-secreto/StepFollowPath.tsx","games/labirinto-secreto/StepPathWaiting.tsx","games/labirinto-secreto/PhasePathFollowing.tsx","components/phases/PhaseWait.tsx","games/labirinto-secreto/StepRanking.tsx","games/labirinto-secreto/components/ResultsSummary.tsx","games/labirinto-secreto/StepGallery.tsx","games/labirinto-secreto/PhaseResults.tsx","games/labirinto-secreto/PhaseGameOver.tsx","games/labirinto-secreto/SessionLabirintoSecreto.tsx","hooks/useSlideShow.ts","hooks/useWhichPlayerIsThe.ts","icons/NoIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/TrophyOutlined.js","../node_modules/@ant-design/icons/es/icons/TrophyOutlined.js"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  hideHeader?: boolean;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n  hideHeader = false,\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      {!hideHeader && (\n        <span\n          className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n          style={color.startsWith('#') ? { backgroundColor: color } : {}}\n        >\n          {header}\n        </span>\n      )}\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\n// Components\nimport { Title, TitleProps } from 'components/text';\n// Sass\nimport './Container.scss';\n\ntype ContainerProps = {\n  title: ReactNode;\n  children: ReactNode;\n  contained?: boolean;\n  className?: string;\n  titleProps?: TitleProps;\n  childrenContainerProps?: SpaceProps;\n} & Omit<SpaceProps, 'title' | 'children'>;\n\n/**\n * Container component with title and center aligned children\n */\nexport function Container({\n  title,\n  children,\n  className,\n  contained,\n  titleProps,\n  childrenContainerProps,\n  ...spaceProps\n}: ContainerProps) {\n  const { level = 4, size = 'xx-small', ...restTitleProps } = titleProps ?? {};\n\n  const {\n    className: childrenClassName,\n    wrap = true,\n    direction: childrenDirection = 'horizontal',\n    ...restChildrenContainerProps\n  } = childrenContainerProps ?? {};\n\n  return (\n    <Space direction=\"vertical\" className={clsx('container-wrapper', className)} {...spaceProps}>\n      <Title level={level} size={size} {...restTitleProps}>\n        {title}\n      </Title>\n\n      <Space\n        direction={childrenDirection}\n        wrap={wrap}\n        className={clsx(\n          'container-wrapper__children',\n          contained && 'container-wrapper__children--contained',\n          childrenClassName\n        )}\n        {...restChildrenContainerProps}\n      >\n        {children}\n      </Space>\n    </Space>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Types\nimport type { AvatarSize } from 'antd/lib/avatar/AvatarContext';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDimensions } from 'hooks/useDimensions';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [, height] = useDimensions('ranking-row-0');\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className={clsx('ranking-board', seconds > 4 && 'ranking-board--hidden')}\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n  /**\n   * Whether the title should be white or not\n   */\n  white?: boolean;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n  white,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title white={white}>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n","// This icon file is generated automatically.\nvar StepBackwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 000 33.9M330 864h-64a8 8 0 01-8-8V168a8 8 0 018-8h64a8 8 0 018 8v688a8 8 0 01-8 8\" } }] }, \"name\": \"step-backward\", \"theme\": \"outlined\" };\nexport default StepBackwardOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport StepBackwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepBackwardOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar StepBackwardOutlined = function StepBackwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: StepBackwardOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  StepBackwardOutlined.displayName = 'StepBackwardOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(StepBackwardOutlined);","// This icon file is generated automatically.\nvar StepForwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 010 33.9M694 864h64a8 8 0 008-8V168a8 8 0 00-8-8h-64a8 8 0 00-8 8v688a8 8 0 008 8\" } }] }, \"name\": \"step-forward\", \"theme\": \"outlined\" };\nexport default StepForwardOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport StepForwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepForwardOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar StepForwardOutlined = function StepForwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: StepForwardOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  StepForwardOutlined.displayName = 'StepForwardOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(StepForwardOutlined);","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n};\n\nexport function SlideShowControls({\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor = 'gray',\n  windowDuration = 10,\n}: SlideShowControlsProps) {\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: windowDuration * length,\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  // Automatically go to the next window every {windowDuration} seconds\n  useEffect(() => {\n    if (timeLeft < windowDuration * length && timeLeft > 0 && timeLeft % windowDuration === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n    }\n  }, [timeLeft, setActiveIndex, length, windowDuration]);\n\n  const goToPreviousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n  };\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">\n          {Array(length)\n            .fill('')\n            .map((e, i) => {\n              return (\n                <div\n                  key={`control-timer-bar-${e + i}`}\n                  className=\"slide-show__controls-timer-bar-node\"\n                  style={{ width: `${99 / length}%` }}\n                >\n                  {e}\n                </div>\n              );\n            })}\n        </div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${Math.abs((windowDuration * timeLeft) / length - 100)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={goToPreviousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Anterior\" en=\"Previous\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={goToNextStep}\n            disabled={disableControls || activeIndex === length - 1}\n          >\n            <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'labirintoSecretoSubmitAction');\n\nexport function useOnSubmitMapAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-map',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Mapa submetido com sucesso', 'Map submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu mapa',\n      'Oops, the application found an error while trying to submit your map'\n    ),\n  });\n\n  return (payload: SubmitMapPayload) => {\n    request({\n      action: 'SUBMIT_MAP',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitPathAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-path',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Caminho submetido com sucesso', 'Path submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu caminho',\n      'Oops, the application found an error while trying to submit your path'\n    ),\n  });\n\n  return (payload: SubmitPathGuessPayload) => {\n    request({\n      action: 'SUBMIT_PATH',\n      ...payload,\n    });\n  };\n}\n","export const FOREST_WIDTH = 7;\nexport const FOREST_HEIGHT = 5;\n\nexport const DIRECTIONS: Record<string, Direction> = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nexport const PAGE_DURATION = 15;\n","import { DIRECTIONS, FOREST_HEIGHT, FOREST_WIDTH } from './constants';\n\n/**\n * Check if a point is on the edge of the forest\n * @param point - point to check\n * @returns - true if point is on the edge\n */\nexport const checkEdge = (point: Point): boolean => {\n  const [x, y] = point;\n  if (x === 0 || x === FOREST_WIDTH - 1 || y === 0 || y === FOREST_HEIGHT - 1) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Get the index of a point in the forest\n * @param point - point to get index of\n * @returns - index of point\n */\nexport const getIndex = (point: Point): number => {\n  const [x, y] = point;\n  return x + y * FOREST_WIDTH;\n};\n\n/**\n * Get the point of an index in the forest\n * @param index\n * @returns\n */\nexport const getPoint = (index: number): Point => {\n  const x = index % FOREST_WIDTH;\n  const y = Math.floor(index / FOREST_WIDTH);\n  return [x, y];\n};\n\nexport const getOriginDirection = (index: TreeId): Direction | null => {\n  const point = getPoint(index);\n  const [x, y] = point;\n  if (x === 0) return DIRECTIONS.LEFT;\n  if (x === FOREST_WIDTH - 1) return DIRECTIONS.RIGHT;\n  if (y === 0) return DIRECTIONS.UP;\n  if (y === FOREST_HEIGHT - 1) return DIRECTIONS.DOWN;\n  return null;\n};\n\nexport const getDirection = (from: TreeId, to: TreeId): Direction => {\n  const [fromX, fromY] = getPoint(from);\n  const [toX, toY] = getPoint(to);\n  if (fromX === toX) {\n    if (fromY < toY) return DIRECTIONS.DOWN;\n    return DIRECTIONS.UP;\n  }\n  if (fromX < toX) return DIRECTIONS.RIGHT;\n  return DIRECTIONS.LEFT;\n};\n\n/**\n * Get the available segments from a tree\n * @param origin - the origin tree Id\n * @param usedIndexes any other tree Ids that are already used\n * @returns - the available tree Ids\n */\nexport const getAvailableSegments = (origin: TreeId, usedIndexes: TreeId[]): TreeId[] => {\n  const [x, y] = getPoint(origin);\n  const available: Point[] = [];\n  // Top\n  const top: Point = [x, y - 1];\n  const topIndex = getIndex(top);\n  if (top[1] >= 0 && !usedIndexes.includes(topIndex)) {\n    available.push(top);\n  }\n  // Right\n  const right: Point = [x + 1, y];\n  const rightIndex = getIndex(right);\n  if (right[0] < FOREST_WIDTH && !usedIndexes.includes(rightIndex)) {\n    available.push(right);\n  }\n  // Down\n  const down: Point = [x, y + 1];\n  const downIndex = getIndex(down);\n  if (down[1] < FOREST_HEIGHT && !usedIndexes.includes(downIndex)) {\n    available.push(down);\n  }\n  // Left\n  const left: Point = [x - 1, y];\n  const leftIndex = getIndex(left);\n  if (left[0] >= 0 && !usedIndexes.includes(leftIndex)) {\n    available.push(left);\n  }\n\n  return available.map((point) => getIndex(point));\n};\n\n/**\n * Get the possible tree Ids for the next segment\n * @param fullMap - the full map of segments\n * @param currentSegment - the current segment\n */\nexport const getPossibleTreeIds = (fullMap: MapSegment[], currentSegment?: MapSegment): TreeId[] => {\n  if (!currentSegment) return [];\n\n  const usedTrees = fullMap\n    .filter((segment: MapSegment) => segment.passed)\n    .map((segment: MapSegment) => segment.treeId);\n\n  return getAvailableSegments(currentSegment.previousTree ?? currentSegment.treeId, usedTrees).filter(\n    (treeId) => treeId !== currentSegment.treeId\n  );\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing players that have passed through a tree\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildPlayerMapping = (players: GamePlayers, activePlayer: GamePlayer): PlayerMapping => {\n  // Segments that are active for the current player's map\n  const currentMap = activePlayer.map as MapSegment[];\n  const activeSegments = currentMap.filter((segment) => segment.active);\n\n  const playerMapping: PlayerMapping = {};\n\n  if (activeSegments[0].index > 0) {\n    const startingSegment = currentMap[activeSegments[0].index - 1];\n    playerMapping[startingSegment.treeId] = Object.keys(players).filter(\n      (playerId) => playerId !== activePlayer.id\n    );\n  }\n\n  Object.values(players).forEach((player) => {\n    const historyEntry = player.history[activePlayer.id];\n    if (historyEntry) {\n      activeSegments.forEach((segment, index, arr) => {\n        const treeIds: TreeId[] = historyEntry[segment.index];\n\n        if (treeIds) {\n          // The last segment should display every player that has passed through it\n          if (index === arr.length - 1) {\n            treeIds.forEach((treeId) => {\n              if (playerMapping[treeId] === undefined) {\n                playerMapping[treeId] = [];\n              }\n              playerMapping[treeId].push(player.id);\n            });\n          } else {\n            // Any other segment, only show the latest try\n            const lastTreeId = treeIds?.[treeIds.length - 1];\n            if (playerMapping[lastTreeId] === undefined) {\n              playerMapping[lastTreeId] = [];\n            }\n            playerMapping[lastTreeId].push(player.id);\n          }\n        }\n      });\n    }\n  });\n\n  return playerMapping;\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing what trees the user has tried in the latest segment\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildUserMappingForLatestTree = (\n  user: GamePlayer,\n  currentMap: MapSegment[],\n  activePlayerId: PlayerId\n): PlayerMapping => {\n  // Segments that are active for the current player's map\n\n  const activeSegment = currentMap[0];\n\n  const playerMapping: PlayerMapping = {};\n\n  const historyEntry = user.history[activePlayerId];\n  if (historyEntry) {\n    const treeIds: TreeId[] = historyEntry[activeSegment.index];\n\n    if (treeIds) {\n      treeIds.forEach((treeId) => {\n        if (playerMapping[treeId] === undefined) {\n          playerMapping[treeId] = [];\n        }\n        playerMapping[treeId].push(user.id);\n      });\n    }\n  }\n\n  return playerMapping;\n};\n\n/**\n * Build dictionary of treeIds to playerIds showing where players made a mistake\n * @param players\n * @param activePlayer\n * @returns\n */\nexport const buildPlayerMappingForLatestTree = (\n  players: GamePlayers,\n  activePlayer: GamePlayer\n): PlayerMapping => {\n  // Segments that are active for the current player's map\n  const currentMap = (activePlayer.map ?? []) as MapSegment[];\n  const activeSegments = currentMap.filter((segment) => !segment.passed);\n\n  const playerMapping: PlayerMapping = {};\n\n  Object.values(players).forEach((player) => {\n    const historyEntry = player.history[activePlayer.id];\n    if (historyEntry) {\n      activeSegments.forEach((segment, index, arr) => {\n        const treeIds: TreeId[] = historyEntry[segment.index];\n\n        if (treeIds) {\n          // The last segment should display every player that has passed through it\n          if (index === arr.length - 1) {\n            treeIds.forEach((treeId) => {\n              if (playerMapping[treeId] === undefined) {\n                playerMapping[treeId] = [];\n              }\n              playerMapping[treeId].push(player.id);\n            });\n          } else {\n            // Any other segment, only show the latest try\n            const lastTreeId = treeIds?.[treeIds.length - 1];\n            if (playerMapping[lastTreeId] === undefined) {\n              playerMapping[lastTreeId] = [];\n            }\n            playerMapping[lastTreeId].push(player.id);\n          }\n        }\n      });\n    }\n  });\n\n  return playerMapping;\n};\n","import { sampleSize, union } from 'lodash';\nimport { getAvailableSegments } from './helpers';\nimport { getRandomItem } from 'utils/helpers';\n\nexport const mockNewMap = (hand: ExtendedTextCard): ExtendedTextCard[] => {\n  return sampleSize<ExtendedTextCard>(hand, 3).map((card) => ({\n    ...card,\n    negate: Math.random() > 0.75,\n  }));\n};\n\nexport const mockFollowedPath = (\n  fullMap: MapSegment[],\n  currentMap: MapSegment[],\n  increaseChances: boolean = false,\n  previousMistakes: TreeId[] = []\n) => {\n  const usedTrees = union(\n    fullMap.filter((segment: MapSegment) => segment.passed).map((segment: MapSegment) => segment.treeId),\n    previousMistakes\n  );\n\n  return currentMap.map((segment) => {\n    const possibilities = getAvailableSegments(usedTrees[usedTrees.length - 1], usedTrees);\n    const correctTreeId = segment.treeId;\n    const choice = increaseChances\n      ? getRandomItem([...possibilities, correctTreeId])\n      : getRandomItem(possibilities);\n    usedTrees.push(choice);\n    return choice;\n  });\n};\n","import clsx from 'clsx';\n// Utils\nimport { getOriginDirection } from '../utils/helpers';\nimport { getAnimationClass } from 'utils/helpers';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { CompassIcon } from 'icons/CompassIcon';\nimport { FinishLineIcon } from 'icons/FinishLineIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n\ntype ForestTreeProps = {\n  segment: MapSegment;\n  tree: Tree;\n  startingTeeId?: TreeId;\n  finalTreeId?: TreeId;\n  currentTreeId?: TreeId;\n  showPath?: boolean;\n  showArrow?: boolean;\n  className?: string;\n  hidePassedTreeNames?: boolean;\n  width?: number;\n};\n\nexport function ForestTree({\n  segment,\n  tree,\n  startingTeeId,\n  finalTreeId,\n  currentTreeId,\n  showPath = false,\n  showArrow = false,\n  className = '',\n  hidePassedTreeNames = false,\n  width = 75,\n}: ForestTreeProps) {\n  const isSegment = Boolean(segment);\n  const isStartingPoint = startingTeeId === tree.id;\n  const originDirection = getOriginDirection(tree.id);\n  const isFinalPoint = finalTreeId === tree.id;\n  const isCurrentTree = currentTreeId === tree.id;\n  const isPassed = (segment?.passed && !isCurrentTree) ?? false;\n\n  return (\n    <div\n      className={clsx(\n        'forest__tree',\n        isStartingPoint && `forest__tree--${originDirection}`,\n        isFinalPoint && showPath && 'forest__tree--goal',\n        isSegment && showPath && 'forest__tree--segment',\n        isPassed && 'forest__tree--passed',\n        isCurrentTree && 'forest__tree--current',\n        className\n      )}\n    >\n      <TreeCard\n        id={String(tree.treeType)}\n        text={segment?.passed && hidePassedTreeNames ? '' : tree.card.text}\n        width={width}\n      />\n      {showPath && isFinalPoint && (\n        <IconAvatar\n          icon={<FinishLineIcon />}\n          size=\"large\"\n          className={`forest__end forest__end--${segment.direction}`}\n        />\n      )}\n\n      {isCurrentTree && (\n        <div className=\"forest__compass\">\n          <IconAvatar\n            icon={<CompassIcon />}\n            size=\"large\"\n            className={clsx('forest__compass-icon', getAnimationClass('pulse', { infinite: true }))}\n          />\n        </div>\n      )}\n      {isStartingPoint && (\n        <IconAvatar\n          icon={<FlagIcon />}\n          size=\"large\"\n          className={`forest__start forest__start--${originDirection}`}\n        />\n      )}\n      {(showArrow || showPath || isPassed) && !isFinalPoint && isSegment && segment.direction && (\n        <IconAvatar\n          icon={<ArrowIcon />}\n          size=\"large\"\n          className={`forest__arrow forest__arrow--${segment.direction}`}\n        />\n      )}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, AvatarProps, Tooltip } from 'antd';\n// Components\nimport { Avatar } from './Avatar';\nimport { orderBy } from 'lodash';\n\ntype AvatarGroupProps = {\n  list: GamePlayer[];\n  user?: GamePlayer;\n  maxCount?: number;\n} & AvatarProps;\n\n/**\n * Displays a group of avatars\n */\nexport function AvatarGroup({ list, user, maxCount = 3, size, ...avatarProps }: AvatarGroupProps) {\n  const players = orderBy(list, [(v) => v.id === user?.id, 'name'], ['asc']);\n\n  return (\n    <AntAvatar.Group maxCount={maxCount} size={size}>\n      {players.map((player) => (\n        <Tooltip key={`avatar-group-${player.id}`} title={player.name}>\n          <Avatar id={player.avatarId} alt={player.name} size={size} {...avatarProps} />\n        </Tooltip>\n      ))}\n    </AntAvatar.Group>\n  );\n}\n","import clsx from 'clsx';\nimport { findLast } from 'lodash';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { getDirection } from '../utils/helpers';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { ForestTree } from './ForestTree';\nimport { Space } from 'antd';\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\nimport { AvatarGroup } from 'components/avatars/AvatarGroup';\nimport { ViewIf } from 'components/views';\n\ntype ForestProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  showPath?: boolean;\n  actions?: {\n    selection: TreeId[];\n    clickableTrees: TreeId[];\n    onSelectTree: (treeId: TreeId) => void;\n    activeTree: TreeId | null;\n    disabled: boolean;\n  };\n  players?: GamePlayers;\n  size?: 'small' | 'large';\n  hidePassedTreeNames?: boolean;\n  user?: GamePlayer;\n  forestBorderColor?: string;\n  playerMapping?: PlayerMapping;\n};\n\nexport function Forest({\n  forest,\n  map = [],\n  showPath,\n  actions,\n  players,\n  size = 'large',\n  hidePassedTreeNames = false,\n  user = {},\n  forestBorderColor = 'transparent',\n  playerMapping,\n}: ForestProps) {\n  const treeWidth = useCardWidth(7, { gap: 16, minWidth: 60, maxWidth: 100 });\n\n  if (!forest || !map || map.length === 0) {\n    return (\n      <Space direction=\"vertical\" className=\"space-container\">\n        <IconAvatar icon={<AnimatedProcessingIcon />} size=\"large\" />\n      </Space>\n    );\n  }\n\n  const startingTeeId = map?.[0]?.treeId;\n  const treeMap = map.reduce((acc: Record<TreeId, MapSegment>, segment) => {\n    acc[segment.treeId] = segment;\n    return acc;\n  }, {});\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? startingTeeId;\n  const finalTreeId = map[map.length - 1]?.treeId;\n\n  return (\n    <div className={clsx('forest-container', size === 'small' && 'forest-container--small')}>\n      <div className=\"forest\" style={{ borderColor: forestBorderColor }}>\n        {forest.map((tree) => {\n          const segment = treeMap?.[tree.id];\n\n          if (actions) {\n            const { selection = [], clickableTrees, onSelectTree, activeTree, disabled } = actions;\n            const isPathForward = clickableTrees.includes(tree.id);\n            const isClickable = isPathForward || selection.includes(tree.id);\n\n            if (isClickable) {\n              const isSelected = selection.includes(tree.id);\n              const isActive = activeTree === tree.id;\n              const selectionIndex = selection.indexOf(tree.id);\n\n              return (\n                <div\n                  key={`tree-${tree.id}`}\n                  className={clsx(\n                    'forest__tree-container forest__tree-button',\n                    isPathForward && disabled && 'forest__tree-button--disabled'\n                  )}\n                  onClick={() => {\n                    if ((isClickable && !disabled) || (isClickable && disabled && !isPathForward)) {\n                      onSelectTree(tree.id);\n                    }\n                  }}\n                  role=\"button\"\n                >\n                  <ForestTree\n                    segment={segment}\n                    tree={tree}\n                    startingTeeId={startingTeeId}\n                    finalTreeId={finalTreeId}\n                    currentTreeId={currentTreeId}\n                    showPath={showPath}\n                    className={clsx(\n                      isPathForward && !disabled && 'forest__tree--clickable',\n                      isSelected && 'forest__tree--selected',\n                      isActive && 'forest__tree--active'\n                    )}\n                    width={treeWidth}\n                  />\n                  {isSelected && currentTreeId !== tree.id && (\n                    <IconAvatar\n                      icon={<ArrowIcon />}\n                      size=\"large\"\n                      className={clsx(\n                        `forest__arrow-to forest__arrow-to--${getDirection(\n                          selection[selectionIndex - 1],\n                          tree.id\n                        )}`\n                      )}\n                    />\n                  )}\n\n                  {isPathForward && !disabled && (\n                    <IconAvatar\n                      icon={<ArrowIcon />}\n                      size=\"large\"\n                      className={clsx(\n                        `forest__arrow-to forest__arrow-to--${getDirection(\n                          selection[selection.length - 1] ?? activeTree,\n                          tree.id\n                        )}`\n                      )}\n                    />\n                  )}\n\n                  <ViewIf condition={!!players && !!playerMapping?.[tree.id]}>\n                    <div className=\"forest__players\">\n                      <PlayerPositions\n                        players={players!}\n                        playerIds={playerMapping?.[tree.id] ?? []}\n                        user={user}\n                      />\n                    </div>\n                  </ViewIf>\n                </div>\n              );\n            }\n          }\n\n          return (\n            <div key={`tree-${tree.id}`} className=\"forest__tree-container\">\n              <ForestTree\n                segment={segment}\n                tree={tree}\n                startingTeeId={startingTeeId}\n                finalTreeId={finalTreeId}\n                currentTreeId={currentTreeId}\n                showPath={showPath}\n                hidePassedTreeNames={hidePassedTreeNames}\n                width={treeWidth}\n              />\n\n              <ViewIf condition={!!players && !!playerMapping?.[tree.id]}>\n                <div className=\"forest__players\">\n                  <PlayerPositions\n                    players={players!}\n                    playerIds={playerMapping?.[tree.id] ?? []}\n                    user={user}\n                  />\n                </div>\n              </ViewIf>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\ntype PlayerPositionsProps = {\n  players: GamePlayers;\n  playerIds: PlayerId[];\n  user?: GamePlayer;\n};\n\nfunction PlayerPositions({ players, playerIds, user }: PlayerPositionsProps) {\n  const list = playerIds.map((playerId) => players[playerId]);\n  return <AvatarGroup list={list} user={user} />;\n}\n","// Components\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\nimport { CompassIcon } from 'icons/CompassIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n\nexport function CompassHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<CompassIcon />}>{children}</MetricHighlight>;\n}\n\nexport function MapHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<MapIcon />}>{children}</MetricHighlight>;\n}\n\nexport function TreeHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<TreeIcon />}>{children}</MetricHighlight>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space, Tooltip } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { getAnimationClass, getColorFromLetter } from 'utils/helpers';\nimport { LETTERS } from 'utils/constants';\nimport { getPossibleTreeIds } from '../utils/helpers';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { LocationIcon } from 'icons/LocationIcon';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { TreeCard } from 'components/cards/TreeCard';\nimport { Translate } from 'components/language';\nimport { IconAvatar } from 'components/avatars';\nimport { Container } from 'components/general/Container';\nimport { TextHighlight } from 'components/text';\n\ntype MapBuilderProps = {\n  forest: Tree[];\n  user: GamePlayer;\n  onSubmitMap: OnSubmitMapFunction;\n};\n\nexport function MapBuilder({ user, forest, onSubmitMap }: MapBuilderProps) {\n  const { isLoading } = useLoading();\n  const userMap = user?.map ?? [];\n  const map: MapSegment[] = userMap.filter((segment: MapSegment) => !segment.passed);\n  const previousSelections = map.map((segment) => segment.clues);\n  const [selections, setSelections] = useState<(ExtendedTextCard | null)[]>(map.map((_) => null));\n  const [currentIndex, setIndex] = useState(0);\n\n  const onSetCard = (card: ExtendedTextCard) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = { ...card };\n      return copy;\n    });\n    setIndex((prev) => prev + 1);\n  };\n\n  const onSkipTree = () => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = null;\n      return copy;\n    });\n    setIndex((prev) => prev + 1);\n  };\n\n  const onUnsetCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev].map((card, idx) => {\n        if (idx < index) return card;\n\n        return null;\n      });\n      return copy;\n    });\n    setIndex(index);\n  };\n\n  const onNegateCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      if (copy[index]) {\n        copy[index]!.negate = !copy[index]?.negate;\n      }\n      return copy;\n    });\n  };\n\n  const usedCards = selections.map((card) => card?.id).filter(Boolean);\n\n  const possibleTreeIds = getPossibleTreeIds(userMap, map?.[currentIndex]);\n\n  return (\n    <>\n      <Space className=\"space-container map-builder\" wrap>\n        {map.map((segment, index) => {\n          if (segment.passed) {\n            return <></>;\n          }\n\n          const tree = forest[segment.treeId];\n\n          if (!tree) {\n            return <></>;\n          }\n\n          return (\n            <div className=\"map-builder__segment\" key={`map-segment-${segment.index}`}>\n              {currentIndex === index && (\n                <div className=\"map-builder__caret\">\n                  <IconAvatar\n                    icon={<LocationIcon />}\n                    className={getAnimationClass('bounce', { speed: 'slow', infinite: true })}\n                    size=\"small\"\n                  />\n                </div>\n              )}\n\n              {Boolean(selections[index]) && (\n                <Tooltip\n                  title={\n                    <Translate\n                      pt={`Clique para negar: Não-${selections?.[index]?.text}`}\n                      en={`Click to negate: Non-${selections?.[index]?.text}`}\n                    />\n                  }\n                >\n                  <TransparentButton\n                    onClick={() => onNegateCard(index)}\n                    disabled={!selections?.[index]}\n                    className=\"map-builder__card map-builder__card--new\"\n                  >\n                    {selections?.[index]?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {selections?.[index]?.text}\n                  </TransparentButton>\n                </Tooltip>\n              )}\n\n              {(previousSelections?.[index] ?? []).map((card) => {\n                return (\n                  <div className=\"map-builder__card\" key={card.id}>\n                    {card?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {card.text}\n                  </div>\n                );\n              })}\n\n              <TransparentButton onClick={() => onUnsetCard(index)} disabled={!selections?.[index]}>\n                <TreeCard id={String(tree.treeType)} text={tree.card.text} />\n              </TransparentButton>\n            </div>\n          );\n        })}\n      </Space>\n\n      {possibleTreeIds.length > 0 && (\n        <Space className=\"contained\">\n          <strong>\n            <Translate\n              pt=\"Outros possíveis caminhos para a árvore atual\"\n              en=\"Other possible paths for the current tree\"\n            />\n            :\n          </strong>\n          {possibleTreeIds.map((treeId, index) => (\n            <TextHighlight\n              key={`highlighted-possibility-${treeId}`}\n              className={getAnimationClass('tada', { delay: index })}\n            >\n              {forest?.[treeId]?.card?.text}\n            </TextHighlight>\n          ))}\n        </Space>\n      )}\n\n      <Container title={<Translate pt=\"Cartas\" en=\"Hand\" />} contained>\n        {(user.hand ?? []).map((card: ExtendedTextCard, index: number) => (\n          <TransparentButton\n            onClick={() => onSetCard(card)}\n            key={card.id}\n            disabled={usedCards.includes(card.id) || currentIndex >= map.length}\n            className=\"map-builder__card-button\"\n          >\n            <Card header={LETTERS[index]} color={getColorFromLetter(LETTERS[index])}>\n              {card.text}\n            </Card>\n          </TransparentButton>\n        ))}\n        <Button\n          size=\"large\"\n          type=\"default\"\n          onClick={() => onSkipTree()}\n          disabled={!previousSelections?.[currentIndex]?.length}\n        >\n          <Translate pt=\"Pular árvore\" en=\"Skip tree\" />\n        </Button>\n      </Container>\n\n      <Space className=\"space-container\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={isLoading || usedCards.length === 0}\n          onClick={() => onSubmitMap({ newMap: selections })}\n        >\n          <Translate pt=\"Enviar Mapa\" en=\"Submit Map\" />\n        </Button>\n      </Space>\n    </>\n  );\n}\n","// Hooks\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { buildPlayerMappingForLatestTree } from './utils/helpers';\nimport { mockNewMap } from './utils/mocks';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { CompassHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { MapBuilder } from './components/MapBuilder';\nimport { IconAvatar } from 'components/avatars';\n\ntype StepBuildMapProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  currentRound: number;\n  onSubmitMap: OnSubmitMapFunction;\n} & AnnouncementProps;\n\nexport function StepBuildMap({\n  players,\n  user,\n  announcement,\n  forest,\n  currentRound,\n  onSubmitMap,\n}: StepBuildMapProps) {\n  // Dev Only\n  useMock(() => {\n    onSubmitMap({ newMap: mockNewMap(user.hand) });\n  });\n\n  const playerMapping = buildPlayerMappingForLatestTree(players, user);\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        {currentRound === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )}\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você precisa ajudar os outros jogadores a descobrirem o seu caminho pela floresta.\n              <br />\n              Começando da <CompassHighlight>bússola</CompassHighlight>, escolha 1 carta para cada árvore do\n              caminho.\n              <br />\n              Você ganha <PointsHighlight>pontos</PointsHighlight> se jogadores adivinharem seu caminho, então\n              tente fazer um bom trabalho.\n            </>\n          }\n          en={\n            <>\n              You need to help the other players to discover your path through the forest.\n              <br />\n              Starting from the <CompassHighlight>compass</CompassHighlight>, choose 1 card for each tree of\n              the path.\n              <br />\n              You earn <PointsHighlight>points</PointsHighlight> if players guess your path correctly, so try\n              to do a good job.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Forest\n        forest={forest}\n        map={user.map}\n        showPath\n        hidePassedTreeNames\n        players={players}\n        playerMapping={playerMapping}\n      />\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Clique nas cartas em sequência para definir seu mapa, uma carta por árvore.\n              <br />\n              Você pode fazer quantos segmentos quiser desde que pelo menos uma carta esteja em cada árvore\n              (dessa rodada ou de uma rodada anterior já que as cartas são cumulativas).\n              <br />\n              Na barra abaixo, se quiser negar <IconAvatar icon={<NoIcon />} size=\"small\" /> um adjectivo\n              selecionado, clique nele acima da árvore para trocar.\n              <br />\n              Se quiser refazer uma árvore <IconAvatar icon={<TreeIcon />} size=\"small\" />, clique nela.\n              <br />\n              Quando você estiver pronto, aperte Enviar Mapa.\n            </>\n          }\n          en={\n            <>\n              Click on the cards in sequence to define your map, you can't skip any tree.\n              <br />\n              You can build as many segments you with as long as there is at least one card on each tree (from\n              this round or a previous one since the cards are cumulative).\n              <br />\n              If you want to negate <IconAvatar icon={<NoIcon />} size=\"small\" /> an adjective you selected,\n              click on it below the tree to change.\n              <br />\n              If you want to redo a tree <IconAvatar icon={<TreeIcon />} size=\"small\" />, click on it.\n              <br />\n              When you are ready, press Submit Map.\n            </>\n          }\n        />\n      </Instruction>\n\n      <MapBuilder user={user} forest={forest} onSubmitMap={onSubmitMap} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\nimport { IconAvatar } from 'components/avatars';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\n// Components\nimport { TreeCard } from 'components/cards/TreeCard';\n\ntype PlayerSelectionMapProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  newMap?: (ExtendedTextCard | null)[];\n};\n\nexport function PlayerSelectionMap({ forest, map, newMap }: PlayerSelectionMapProps) {\n  if (!newMap || !map) {\n    return <></>;\n  }\n\n  const userMap: MapSegment[] = (map ?? []).filter((segment: MapSegment) => !segment.passed);\n\n  return (\n    <Space wrap className=\"space-container\">\n      {userMap.map((segment, index) => {\n        const { treeId, passed } = segment;\n        const tree = forest[treeId];\n        return (\n          <div className=\"map-builder__segment\">\n            {Boolean(newMap?.[index]) && (\n              <div className=\"map-builder__card map-builder__card--new\">\n                {newMap?.[index]!.text}\n                {newMap?.[index]?.negate && (\n                  <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                )}\n              </div>\n            )}\n            {segment.clues.map((clue) => {\n              return (\n                <div className=\"map-builder__card\" key={`card-${segment.index}-${clue.id}`}>\n                  {clue.text}\n                  {clue?.negate && (\n                    <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                  )}\n                </div>\n              );\n            })}\n\n            <TreeCard id={String(tree.treeType)} text={passed ? '' : tree.card.text} />\n          </div>\n        );\n      })}\n    </Space>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\n\ntype StepBuildWaitProps = {\n  user: GamePlayer;\n  forest: Tree[];\n} & AnnouncementProps;\n\nexport function StepBuildWait({ user, announcement, forest }: StepBuildWaitProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt=\"Todos os jogadores já descobriam seu mapa completamente\"\n          en=\"All players have discovered your map completely\"\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={<>Aguarde pacientemente, você ainda vai participar na hora de adivinhar.</>}\n          en={<>Sit and wait patiently, you will still participate when it's time to guess.</>}\n        />\n      </Instruction>\n\n      <Forest forest={forest} map={user.map} showPath />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitMapAPIRequest } from './utils/api-requests';\n// Icons\nimport { MapIcon } from 'icons/MapIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepBuildMap } from './StepBuildMap';\nimport { PlayerSelectionMap } from './components/PlayerSelection';\nimport { StepBuildWait } from './StepBuildWait';\nimport { ViewOr } from 'components/views';\n\nexport function PhaseMapBuilding({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitMap = useOnSubmitMapAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<MapIcon />}\n      title={\n        state.round.current === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt=\"Você consegue mapear as árvores usando apenas adjetivos?\"\n          en=\"Can you map the tree path using only adjectives?\"\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  const isUserMapComplete = user?.map && user.map.every((segment: MapSegment) => segment.passed);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.MAP_BUILDING}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          content: <PlayerSelectionMap forest={state.forest} map={user.map} newMap={user.newMap} />,\n        }}\n      >\n        {/* Step 0 */}\n        <ViewOr condition={isUserMapComplete}>\n          <StepBuildWait user={user} announcement={announcement} forest={state.forest} />\n\n          <StepBuildMap\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            currentRound={state.round.current}\n            onSubmitMap={onSubmitMap}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import clsx from 'clsx';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n\ntype MapEntryProps = {\n  segment: MapSegment;\n  tree?: Tree;\n  showArrow?: boolean;\n  className?: string;\n};\n\nexport function MapEntry({ segment, tree, showArrow, className }: MapEntryProps) {\n  return (\n    <div className={clsx('map-entry', className)} key={`map-${segment.index}`}>\n      {tree && <TreeCard id={String(tree.treeType)} className=\"map-entry__tree\" text={tree.card.text} />}\n\n      <IconAvatar icon={<MapIcon />} size=\"large\" className=\"map-entry__icon\" />\n      {segment.clues.map((clue) => {\n        return (\n          <div className=\"map-entry__clue\" key={`clue-${segment.index}-${clue.id}`}>\n            {clue.text}\n            {clue?.negate && <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-entry__clue-no\" />}\n          </div>\n        );\n      })}\n\n      {showArrow && <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"map-entry__arrow\" />}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { MapEntry } from './MapEntry';\n\ntype PlayerMapProps = {\n  map: MapSegment[];\n  selectedTrees?: Tree[];\n  fullMap?: boolean;\n};\n\nexport function PlayerMap({ map = [], selectedTrees = [], fullMap = false }: PlayerMapProps) {\n  const currentMap = fullMap ? map : map.filter((segment) => segment.active);\n\n  return (\n    <Space\n      wrap\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 100px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const selectedTree = selectedTrees[index + 1];\n        return (\n          <MapEntry\n            className=\"player-map__segment\"\n            key={`map-${segment.index}`}\n            tree={selectedTree}\n            segment={segment}\n            showArrow={arr.length - 1 !== index}\n          />\n        );\n      })}\n    </Space>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useRef } from 'react';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Sass\nimport './MouseFollowingContent.scss';\n\ntype MouseTrackedContentProps = {\n  /**\n   * The content to be rendered.\n   */\n  children: ReactNode;\n  /**\n   * Optional class name to be added to the `<div>` element.\n   */\n  className?: string;\n  /**\n   * Whether the content should be rendered or not.\n   */\n  active?: boolean;\n  /**\n   * Styles the wrapper div with a `contained` class.\n   */\n  contained?: boolean;\n};\n\n/**\n * A React component that renders a `<div>` element that follows the mouse cursor within the browser window.\n */\nexport function MouseFollowingContent({\n  children,\n  className = '',\n  contained = false,\n  active,\n}: MouseTrackedContentProps) {\n  if (!active) {\n    return <></>;\n  }\n\n  return (\n    <MouseFollowingContentInternal className={className} contained={contained}>\n      {children}\n    </MouseFollowingContentInternal>\n  );\n}\n\nfunction MouseFollowingContentInternal({\n  children,\n  contained,\n  className = '',\n}: Partial<MouseTrackedContentProps>) {\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (divRef.current) {\n        divRef.current.style.left = e.clientX + 16 + 'px';\n        divRef.current.style.top = e.clientY + 16 + 'px';\n      }\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={divRef}\n      className={clsx(\n        'mouse-following-content',\n        contained && 'mouse-following-content--contained',\n        getAnimationClass('bounceIn'),\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { findLast } from 'lodash';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { buildUserMappingForLatestTree, getAvailableSegments } from '../utils/helpers';\nimport { mockFollowedPath } from '../utils/mocks';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { Forest } from './Forest';\nimport { Translate } from 'components/language';\nimport { PlayerMap } from './PlayerMap';\nimport { MouseFollowingContent } from 'components/mouse/MouseFollowingContent';\nimport { MapEntry } from './MapEntry';\nimport { DevButton } from 'components/debug';\n\ntype ClickableForestProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  onSubmitPath: OnSubmitPathGuessFunction;\n  pathId: PlayerId;\n  user: GamePlayer;\n  players: GamePlayers;\n};\n\nexport function ClickableForest({\n  forest,\n  map = [],\n  onSubmitPath,\n  pathId,\n  user,\n  players,\n}: ClickableForestProps) {\n  const { isLoading } = useLoading();\n\n  const currentMap = map.filter((segment) => !segment.passed && segment.clues.length > 0);\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? map?.[0]?.treeId ?? 0;\n  const passedTrees = map.filter((segment) => segment.passed).map((segment) => segment.treeId);\n\n  const userMapping = buildUserMappingForLatestTree(user, currentMap, pathId);\n\n  const [selection, setSelection] = useState<TreeId[]>([currentTreeId]);\n  const [activeTree, setActiveTree] = useState<TreeId>(currentTreeId);\n\n  const clickableTrees: TreeId[] = getAvailableSegments(activeTree, [...selection, ...passedTrees]);\n\n  const isDisabled = selection.length > currentMap.length;\n\n  const onSelectTree = (treeId: TreeId) => {\n    setActiveTree(treeId);\n    const index = selection.indexOf(treeId);\n    if (index > -1) {\n      setSelection((prev) => prev.slice(0, index + 1));\n    } else {\n      setSelection((prev) => [...prev, treeId]);\n    }\n  };\n\n  const selectedTrees = selection.map((treeId) => forest[treeId]);\n  const currentSegment = currentMap?.[selection.length - 1];\n\n  // DEV Only\n  useMock(() => {\n    onSubmitPath({\n      guess: mockFollowedPath(map, currentMap, true, Object.values(userMapping).flat().map(Number)),\n      pathId,\n      choseRandomly: true,\n    });\n  });\n\n  return (\n    <Space direction=\"vertical\" className=\"space-container\">\n      <PlayerMap map={map} selectedTrees={selectedTrees} />\n\n      <MouseFollowingContent active={Boolean(currentSegment)}>\n        <MapEntry\n          segment={currentSegment}\n          key={currentSegment?.treeId}\n          className={getAnimationClass('rubberBand')}\n        />\n      </MouseFollowingContent>\n\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => onSubmitPath({ guess: selection.slice(1), pathId, choseRandomly: false })}\n        disabled={isLoading || selection.length - 1 < currentMap.length}\n      >\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n      <DevButton\n        onClick={() =>\n          onSubmitPath({\n            guess: mockFollowedPath(map, currentMap, true, Object.values(userMapping).flat().map(Number)),\n            pathId,\n            choseRandomly: true,\n          })\n        }\n        ghost\n      >\n        Random Dev\n      </DevButton>\n      <Forest\n        forest={forest}\n        map={map}\n        actions={{\n          selection,\n          clickableTrees,\n          onSelectTree,\n          activeTree,\n          disabled: isDisabled,\n        }}\n        playerMapping={userMapping}\n        players={players}\n      />\n    </Space>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ClickableForest } from './components/ClickableForest';\nimport { AvatarName } from 'components/avatars';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepFollowPathProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  onSubmitPath: OnSubmitPathGuessFunction;\n  activePlayer: GamePlayer;\n  isTheActivePlayer: boolean;\n} & AnnouncementProps;\n\nexport function StepFollowPath({\n  players,\n  announcement,\n  forest,\n  activePlayer,\n  onSubmitPath,\n  user,\n}: StepFollowPathProps) {\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Siga o mapa de <AvatarName player={activePlayer} />\n            </>\n          }\n          en={\n            <>\n              Follow <AvatarName player={activePlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, clique nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> circuladas de pontinhos brancos para escolher aquele\n              caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar (Por\n              exemplo, 3 jogadores = 3 pontos).\n              <br />\n              Então, talvez valha a pena discutir! Porém, se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />O criador do mapa ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, click on the{' '}\n              <TreeHighlight>circled trees</TreeHighlight> with white dots to choose that path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses it\n              (For example, 3 players = 3 points).\n              <br />\n              So, it might be worth discussing out loud! However, if only one player guesses the path, they\n              earn <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              The map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </Instruction>\n\n      {Boolean(forest) && activePlayer.map && (\n        <ClickableForest\n          forest={forest}\n          map={activePlayer.map}\n          onSubmitPath={onSubmitPath}\n          pathId={activePlayer.id}\n          user={user}\n          players={players}\n        />\n      )}\n    </Step>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { PlayerMap } from './components/PlayerMap';\n\ntype StepPathWaitingProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activePlayer: GamePlayer;\n} & AnnouncementProps;\n\nexport function StepPathWaiting({ players, announcement, forest, activePlayer }: StepPathWaitingProps) {\n  const playerCount = Object.keys(players).length;\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={<>Os jogadores estão seguindo o seu mapa!</>}\n          en={<>Players are following your map!</>}\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, eles vão clicando nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> para escolher o caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar. Por\n              exemplo, 3 jogadores = 3 pontos.\n              <br />\n              Se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />\n              Você, como criador do mapa ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, players will click on the{' '}\n              <TreeHighlight>trees</TreeHighlight> to choose the path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses\n              it. For example, 3 players = 3 points.\n              <br />\n              If only one player guesses the path, they earn{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              You as the map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </Instruction>\n\n      <PlayerMap map={activePlayer.map} />\n\n      <Forest forest={forest} map={activePlayer.map} showPath />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitPathAPIRequest } from './utils/api-requests';\n// Icons\nimport { DirectionsIcon } from 'icons/DirectionsIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { StepFollowPath } from './StepFollowPath';\nimport { ViewOr } from 'components/views';\nimport { StepPathWaiting } from './StepPathWaiting';\n\nexport function PhasePathFollowing({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n  const [activePlayer, isTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitPath = useOnSubmitPathAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<DirectionsIcon />}\n      title={<Translate pt=\"Siga os mapas!\" en=\"Follow the maps!\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={3}\n    >\n      <Instruction>\n        <Translate\n          pt=\"Vamos analisar e tentar seguir o mapa de cada jogador\"\n          en=\"Let's analise and try to follow the each player's map\"\n        />\n        <br />\n        <TurnOrder players={players} order={state.turnOrder} activePlayerId={state.activePlayerId} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <ViewOr condition={isTheActivePlayer}>\n          <StepPathWaiting\n            players={players}\n            announcement={announcement}\n            forest={state.forest}\n            activePlayer={activePlayer}\n          />\n\n          <StepFollowPath\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            onSubmitPath={onSubmitPath}\n            activePlayer={activePlayer}\n            isTheActivePlayer={isTheActivePlayer}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseWaitProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseWait({ info, state }: PhaseWaitProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.WAIT} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Processando...\" en=\"Processing...\" />\n        </Title>\n\n        <AnimatedProcessingIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Components\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction } from 'components/text';\nimport { VIPNextPhaseButton } from 'components/vip';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: GenericFunction;\n};\n\nexport function StepRanking({ players, ranking, goToPreviousStep, round }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Rotas corretos\" en=\"Correct paths\" />,\n        <Translate pt=\"Pontos por sua rota\" en=\"Points for your route\" />,\n      ]}\n    >\n      <Instruction contained>\n        <Translate\n          pt=\"Não se preocupe se você ficou pra trás! o jogador mais a frente de cada rota, te gritou e você conseguiu encontrá-lo.\"\n          en=\"Don't worry if you were left behind! The player furthest ahead on that route, call you and you caught up\"\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <VIPNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { Avatar, IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype PlayerMapResultsSummaryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  currentPlayer: GamePlayer;\n  user: GamePlayer;\n};\n\nexport function PlayerMapResultsSummary({\n  players,\n  forest,\n  currentPlayer,\n  user,\n}: PlayerMapResultsSummaryProps) {\n  const currentMap: MapSegment[] = currentPlayer.map.filter((segment: MapSegment) => segment.active);\n\n  return (\n    <div\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 120px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const tree = segment.passed ? forest[segment.treeId] : null;\n\n        return (\n          <div className=\"player-map__segment\" key={`map-${segment.index}`}>\n            <div className=\"player-map__top\">\n              {tree ? (\n                <TreeCard\n                  id={String(tree.treeType)}\n                  className=\"player-map__tree\"\n                  text={tree.card.text}\n                  width={75}\n                />\n              ) : (\n                <TreeCard id=\"1\" className=\"player-map__tree-invisible\" text=\"\" width={75} />\n              )}\n\n              <IconAvatar icon={<MapIcon />} size=\"large\" className=\"player-map__icon\" />\n\n              <div>\n                {segment.clues.map((clue) => {\n                  return (\n                    <div className=\"player-map__clue\" key={`clue-${segment.index}-${clue.id}`}>\n                      {clue.text}\n                      {clue?.negate && (\n                        <IconAvatar icon={<NoIcon />} size=\"small\" className=\"player-map__clue-no\" />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n\n              {segment.index === 0 && (\n                <IconAvatar icon={<FlagIcon />} size=\"small\" className=\"player-map__starting-flag\" />\n              )}\n\n              {arr.length - 1 !== index && (\n                <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"player-map__arrow\" />\n              )}\n            </div>\n\n            <div className=\"player-map__scoring\">\n              {segment.playersIds.length > 0 ? (\n                <div className=\"player-map__players\">\n                  {segment.playersIds.map((playerId) => {\n                    const player = players[playerId];\n                    return (\n                      <Tooltip title={player.name} key={`player-${playerId}`}>\n                        <Avatar size=\"small\" id={player.avatarId} />\n                      </Tooltip>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"player-map__no-players\">\n                  <Translate pt=\"Nenhum jogador\" en=\"No players\" />\n                </div>\n              )}\n\n              <div>{segment.score > 0 && <PointsHighlight>{segment.score}</PointsHighlight>}</div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Utils\nimport { PAGE_DURATION } from './utils/constants';\nimport { getAvatarColorById } from 'utils/helpers';\nimport { buildPlayerMapping } from './utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { AvatarName } from 'components/avatars';\nimport { SlideShowControls } from 'components/slide-show/SlideShowControls';\nimport { PlayerMapResultsSummary } from './components/ResultsSummary';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepGalleryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n  user: GamePlayer;\n  gallery: GamePlayer[];\n};\n\nexport function StepGallery({\n  players,\n  gallery,\n  user,\n  forest,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  const playerCount = Object.keys(players).length;\n\n  const currentPlayer = gallery[activeIndex];\n  const currentColor = getAvatarColorById(currentPlayer.avatarId);\n  const playerMapping = buildPlayerMapping(players, currentPlayer);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Mapa do(a) <AvatarName player={currentPlayer} />\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={currentPlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você ganha pontos ao acertar o caminho do mapa. <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar.{' '}\n              <br />\n              Se você for o único que acertou, você ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n            </>\n          }\n          en={\n            <>\n              You get points by guessing the map path. <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player who guesses it.{' '}\n              <br />\n              If you are the only one who guessed it, you get{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n            </>\n          }\n        />\n      </Instruction>\n\n      <PlayerMapResultsSummary players={players} forest={forest} currentPlayer={currentPlayer} user={user} />\n\n      <div>\n        <Forest\n          forest={forest}\n          map={currentPlayer.map}\n          size=\"small\"\n          players={players}\n          user={user}\n          forestBorderColor={getAvatarColorById(currentPlayer.avatarId)}\n          playerMapping={playerMapping}\n        />\n\n        <SlideShowControls\n          length={gallery.length}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          disableControls={isFirstGalleryRunThrough}\n          barColor={currentColor}\n          windowDuration={PAGE_DURATION}\n        />\n      </div>\n    </Step>\n  );\n}\n","import { useMemo } from 'react';\n// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { sortPlayers } from 'utils/helpers';\n// Icons\nimport { PathIcon } from 'icons/PathIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRanking } from './StepRanking';\nimport { StepGallery } from './StepGallery';\n\nexport function PhaseResults({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep, goToPreviousStep, goToNextStep } = useStep();\n  const gallery = useMemo(\n    () => sortPlayers(players).filter((player) => player.map.some((segment: MapSegment) => segment.active)),\n    [players]\n  );\n\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(gallery.length);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PathIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          currentRound={state?.round?.current}\n          type=\"block\"\n          onClose={goToNextStep}\n          unskippable\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quem é o melhor em seguir direções?\"\n              en=\"Who is the best at following directions?\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={gallery}\n          players={players}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          forest={state.forest}\n          setStep={setStep}\n          user={user}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { getAvatarColorById, sortPlayers } from 'utils/helpers';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\nimport { Container } from 'components/general/Container';\nimport { AvatarStrip } from 'components/avatars';\nimport { PlayerMap } from './components/PlayerMap';\n\nexport function PhaseGameOver({ state, info, players }: PhaseProps) {\n  const sortedPlayers = sortPlayers(players);\n  const forest: Tree[] = state.forest ?? [];\n\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<FlagIcon />}>\n      <Container title={<Translate pt=\"Mapas dos Jogadores\" en=\"Players' Maps\" />}>\n        {sortedPlayers.map((player) => {\n          const mapTrees = (player.map ?? []).map((segment: MapSegment) => forest[segment.treeId]);\n          return (\n            <Space\n              key={player.id}\n              className=\"game-over-strip\"\n              style={{ borderColor: getAvatarColorById(player.avatarId) }}\n            >\n              <AvatarStrip player={player} withName className=\"game-over-avatar-strip\" />\n              <PlayerMap map={player.map} fullMap selectedTrees={mapTrees} />\n            </Space>\n          );\n        })}\n      </Container>\n    </GameOverWrapper>\n  );\n}\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseMapBuilding } from './PhaseMapBuilding';\n// Sass\nimport './labirinto-secreto.scss';\nimport { PhasePathFollowing } from './PhasePathFollowing';\nimport { PhaseWait } from 'components/phases/PhaseWait';\nimport { PhaseResults } from './PhaseResults';\nimport { PhaseGameOver } from './PhaseGameOver';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.DEFAULT.WAIT:\n      return PhaseWait;\n    case PHASES.LABIRINTO_SECRETO.MAP_BUILDING:\n      return PhaseMapBuilding;\n    case PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING:\n      return PhasePathFollowing;\n    case PHASES.LABIRINTO_SECRETO.RESULTS:\n      return PhaseResults;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionLabirintoSecreto() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.FOREST,\n          colorLink: THEME_COLORS.FOREST,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.LABIRINTO_SECRETO} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionLabirintoSecreto;\n","import { useEffect, useState } from 'react';\n\n/**\n * Controls slide show\n * @param length\n */\nexport function useSlideShow(length: number): {\n  activeIndex: number;\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>;\n  isFirstGalleryRunThrough: boolean;\n  setIsFirstGalleryRunThrough: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && activeIndex === length - 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [isFirstGalleryRunThrough, activeIndex, length]);\n\n  return {\n    activeIndex,\n    setActiveIndex,\n    isFirstGalleryRunThrough,\n    setIsFirstGalleryRunThrough,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: GamePlayers = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>({});\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function NoIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M.09.09h512v512H.09z\"></path>\n      <path\n        fill=\"#e94444\"\n        d=\"M256.09 441.78a184.89 184.89 0 01-85.58-20.86c-4.22-2.2-8.36-4.55-12.38-7.05a3.33 3.33 0 01-.62-5.19l251.16-251.17a3.34 3.34 0 015.2.62c2.49 4 4.85 8.16 7.05 12.38a185.75 185.75 0 01-164.83 271.27M98.33 354.09q-3.75-6-7-12.37a184.43 184.43 0 01-20.8-79.76c-3.24-105 82.25-192.47 187.33-191.5a185 185 0 0183.88 20.85q6.33 3.3 12.36 7.06a3.33 3.33 0 01.61 5.19L103.52 354.65a3.33 3.33 0 01-5.19-.61M256.09 7.5C118.8 7.5 7.5 118.8 7.5 256.09s111.3 248.59 248.59 248.59 248.59-111.29 248.59-248.59S393.38 7.5 256.09 7.5\"\n      ></path>\n      <path\n        fill=\"#d83131\"\n        d=\"M398.28 52.16a248 248 0 0189.35 190.93c0 137.29-111.29 248.59-248.59 248.59a247.45 247.45 0 01-142.18-44.69 247.53 247.53 0 00159.23 57.69c137.29 0 248.59-111.29 248.59-248.59a248.28 248.28 0 00-106.4-203.93\"\n      ></path>\n      <path d=\"M256.09 512.18A256.09 256.09 0 0175.01 75.01a256.11 256.11 0 11291.08 412.4 7.5 7.5 0 01-6.45-13.54 239.89 239.89 0 10-31.63 12.4 7.5 7.5 0 114.47 14.32 256.11 256.11 0 01-76.39 11.59z\"></path>\n      <path d=\"M101.2 363.09a10.48 10.48 0 01-1.25-.07 10.8 10.8 0 01-8-5 191.8 191.8 0 01-7.34-12.88 191 191 0 01-21.64-83c-1.63-52.89 18-103 55.21-141s86.85-58.74 139.71-58.23a191.22 191.22 0 0187.27 21.7c4.37 2.28 8.69 4.75 12.86 7.34a10.83 10.83 0 011.95 16.86L108.83 359.95a10.76 10.76 0 01-7.63 3.14zM256.09 77.9c-48.12 0-93.22 19-127.16 53.72-34.35 35.1-52.44 81.29-50.94 130.06a176 176 0 0020 76.52c1.29 2.47 2.64 4.94 4.06 7.37l243.54-243.6a175.7 175.7 0 00-7.36-4.06 176.41 176.41 0 00-80.47-20zm0 371.38a193.54 193.54 0 01-89-21.71 192.5 192.5 0 01-12.88-7.34 10.82 10.82 0 01-2-16.86l137.55-137.55a7.5 7.5 0 1110.6 10.61L166.59 410.2c2.42 1.41 4.89 2.77 7.38 4.06a178.52 178.52 0 0082.12 20c98.26 0 178.19-79.93 178.19-178.19a176.22 176.22 0 00-20-82.12c-1.29-2.49-2.65-5-4.06-7.38l-84.87 84.87a7.5 7.5 0 01-10.61-10.6l88.65-88.65a10.83 10.83 0 0116.86 1.95c2.58 4.16 5.05 8.49 7.34 12.89a191.11 191.11 0 0121.71 89c-.02 106.59-86.68 193.25-193.21 193.25z\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar TrophyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 00-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 00-44-44zM184 352V232h64v207.6a91.99 91.99 0 01-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z\" } }] }, \"name\": \"trophy\", \"theme\": \"outlined\" };\nexport default TrophyOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport TrophyOutlinedSvg from \"@ant-design/icons-svg/es/asn/TrophyOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar TrophyOutlined = function TrophyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: TrophyOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  TrophyOutlined.displayName = 'TrophyOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(TrophyOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","hideHeader","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","Container","title","contained","titleProps","childrenContainerProps","spaceProps","level","restTitleProps","childrenClassName","wrap","direction","childrenDirection","restChildrenContainerProps","MetricHighlight","icon","type","iconSize","iconPlacement","PointsHighlight","GainedPoint","gainedPoint","order","description","isPositive","isNegative","pt","en","GainedPoints","gainedPoints","playerId","gainedPointsDescriptions","points","Array","isArray","map","index","RankingBoard","players","ranking","hideGainedPoints","delay","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useDimensions","height","maxPoints","useMemo","Math","max","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","useEffectOnce","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","position","previousScore","useEffect","length","hPosition","id","top","CrownFilled","avatarId","name","undefined","StepRankingWrapper","subtitle","white","useTemporarilyHidePlayersBar","CaretUpOutlined","StepBackwardOutlined","props","ref","React","AntdIcon","_extends","StepBackwardOutlinedSvg","StepForwardOutlined","StepForwardOutlinedSvg","SlideShowControls","activeIndex","setActiveIndex","setStep","disableControls","barColor","windowDuration","timeLeft","isRunning","pause","resume","s","min","fill","e","i","width","abs","onClick","disabled","PauseOutlined","PlayCircleOutlined","TrophyOutlined","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","submitAction","httpsCallable","functions","DIRECTIONS","getIndex","point","getPoint","floor","getDirection","from","to","fromX","fromY","toX","toY","getAvailableSegments","origin","usedIndexes","x","y","available","topIndex","includes","push","right","rightIndex","down","downIndex","left","leftIndex","mockFollowedPath","fullMap","currentMap","increaseChances","previousMistakes","usedTrees","union","filter","segment","passed","treeId","possibilities","correctTreeId","choice","getRandomItem","ForestTree","tree","startingTeeId","finalTreeId","currentTreeId","showPath","showArrow","hidePassedTreeNames","isSegment","Boolean","isStartingPoint","originDirection","FOREST_WIDTH","FOREST_HEIGHT","getOriginDirection","isFinalPoint","isCurrentTree","isPassed","TreeCard","String","treeType","text","card","FinishLineIcon","CompassIcon","getAnimationClass","infinite","FlagIcon","ArrowIcon","AvatarGroup","list","user","maxCount","avatarProps","v","player","Avatar","alt","Forest","forest","actions","forestBorderColor","playerMapping","treeWidth","useCardWidth","gap","minWidth","maxWidth","AnimatedProcessingIcon","treeMap","findLast","borderColor","selection","clickableTrees","onSelectTree","activeTree","isPathForward","isClickable","isSelected","isActive","selectionIndex","indexOf","role","PlayerPositions","playerIds","CompassHighlight","MapHighlight","MapIcon","TreeHighlight","TreeIcon","MapBuilder","onSubmitMap","isLoading","useLoading","userMap","previousSelections","clues","_","selections","setSelections","currentIndex","setIndex","usedCards","possibleTreeIds","currentSegment","previousTree","getPossibleTreeIds","LocationIcon","speed","prev","copy","negate","onNegateCard","NoIcon","idx","onUnsetCard","hand","onSetCard","LETTERS","newMap","StepBuildMap","announcement","currentRound","useMock","sampleSize","random","activePlayer","activeSegments","Object","values","forEach","historyEntry","history","arr","treeIds","lastTreeId","buildPlayerMappingForLatestTree","fullWidth","PlayerSelectionMap","clue","StepBuildWait","PhaseMapBuilding","state","info","useUser","useStep","step","translate","useLanguage","request","useAPICall","apiFunction","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitMapAPIRequest","round","current","isUserMapComplete","every","phase","allowedPhase","PHASES","waitingRoom","content","MapEntry","PlayerMap","selectedTrees","active","gridTemplateColumns","selectedTree","MouseFollowingContent","MouseFollowingContentInternal","divRef","useRef","handleMouseMove","clientX","clientY","document","addEventListener","removeEventListener","ClickableForest","onSubmitPath","pathId","passedTrees","userMapping","activePlayerId","activeSegment","buildUserMappingForLatestTree","setSelection","setActiveTree","isDisabled","guess","flat","Number","choseRandomly","slice","ghost","StepFollowPath","playerCount","keys","StepPathWaiting","PhasePathFollowing","useWhichPlayerIsThe","isTheActivePlayer","useOnSubmitPathAPIRequest","DirectionsIcon","turnOrder","PhaseWait","PhaseContainer","StepRanking","goToPreviousStep","align","PlayerMapResultsSummary","currentPlayer","playersIds","score","StepGallery","gallery","isFirstGalleryRunThrough","currentColor","getAvatarColorById","startingSegment","buildPlayerMapping","PhaseResults","goToNextStep","sortPlayers","some","useSlideShow","PathIcon","onClose","unskippable","PhaseGameOver","sortedPlayers","announcementIcon","mapTrees","withName","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","setIsFirstGalleryRunThrough","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser","xmlns","viewBox","d","TrophyOutlinedSvg"],"sourceRoot":""}