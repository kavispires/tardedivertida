{"version":3,"file":"static/js/732.5367c16d.chunk.js","mappings":"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","sources":["games/polemica-da-vez/StepTopicSelection.tsx","games/polemica-da-vez/PhaseTopicSelection.tsx","games/polemica-da-vez/api-requests.ts","games/polemica-da-vez/mock.ts","games/polemica-da-vez/Topic.tsx","games/polemica-da-vez/StepLiking.tsx","games/polemica-da-vez/PhaseReact.tsx","games/polemica-da-vez/CommentText.tsx","games/polemica-da-vez/TweetComment.tsx","games/polemica-da-vez/StepResolution.tsx","games/polemica-da-vez/PhaseResolution.tsx","games/polemica-da-vez/PhaseGameOver.tsx","games/polemica-da-vez/SessionPolemicaDaVez.tsx"],"sourcesContent":["import { useState } from 'react';\n//Design Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Step, Title, Translate } from 'components';\n\ntype StepTopicSelectionProps = {\n  currentTopics: Topic[];\n  currentCustomTopic: Topic;\n  onSubmitTopic: GenericFunction;\n};\n\nexport function StepTopicSelection({\n  currentTopics,\n  currentCustomTopic,\n  onSubmitTopic,\n}: StepTopicSelectionProps) {\n  const { translate } = useLanguage();\n\n  const [customTopic, setCustomTopic] = useState('');\n\n  const onSubmitCustomTopic = () => {\n    if (customTopic) {\n      onSubmitTopic({ topicId: currentCustomTopic.id, customTopic });\n    }\n  };\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione uma assunto\" en=\"Select one topic\" />\n      </Title>\n\n      <ul className=\"p-topics-card\">\n        {currentTopics.map((topic) => (\n          <li className=\"p-topics-card__item\" key={topic.id}>\n            <button onClick={() => onSubmitTopic({ topicId: topic.id })} className=\"p-topic p-topic--button\">\n              {topic.text}\n            </button>\n          </li>\n        ))}\n        <li className=\"p-topics-card__item p-topics-card__item--or\">\n          <Translate pt=\"ou\" en=\"or\" />\n        </li>\n        <li className=\"p-topics-card__item p-topics-card__item--custom\">\n          <div className=\"p-topic\">{currentCustomTopic.text}</div>\n          <Input\n            className=\"p-custom-topic__input\"\n            placeholder={translate('Escreva aqui', 'Write here')}\n            onChange={(e) => setCustomTopic(e.target.value)}\n            onPressEnter={onSubmitCustomTopic}\n          />\n          {Boolean(customTopic) && (\n            <Button type=\"primary\" onClick={onSubmitCustomTopic} className=\"p-custom-topic__button\">\n              <Translate pt=\"Enviar sugestão\" en=\"Send suggestion\" />\n            </Button>\n          )}\n        </li>\n      </ul>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useMock, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitTopicAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { mockTopicSelection } from './mock';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  Step,\n  StepSwitcher,\n  Translate,\n  TurnOrder,\n  ViewOr,\n  WaitingRoom,\n} from 'components';\nimport { StepTopicSelection } from './StepTopicSelection';\n\nfunction PhaseTopicSelection({ state, players, info, meta }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [activePlayer, isUserTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitTopic = useOnSubmitTopicAPIRequest(setStep);\n  const isFixedRounds = Boolean(meta?.options?.fixedRounds);\n\n  useMock(() => {\n    if (step === 1 && isUserTheActivePlayer) {\n      onSubmitTopic(mockTopicSelection(state.currentTopics));\n    }\n  }, [step]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.TOPIC_SELECTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={4} circleColor=\"blue\">\n          <Instruction contained>\n            <Translate\n              pt=\"Cada rodada um novo assunto, a sua opinião e a opinião dos outros.\"\n              en=\"Every round a new topic, your opinion and everybody else's.\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"trending\"\n          title={translate('Você sabe qual a polêmica da vez?', \"Do you know what's trending now?\")}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 3 ? 30 : undefined}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Todos vão curtir ou descurtir a polêmica da vez e então devem tentar adivinhar quantas\n                  curtidas o assunto vai ganhar. Se você adivinhar corretamente, você ganha 3 ponto.\n                  <br />\n                  Se você escolheu um número a menos ou a mais, você ganha 1 ponto.\n                  <br />\n                  {isFixedRounds ? (\n                    <>O jogo tem {state.round.total} rodadas.</>\n                  ) : (\n                    <>\n                      O primeiro jogador a receber 10 pontos ganha o jogo (ou no máximo {state.round.total}{' '}\n                      rodadas)\n                    </>\n                  )}\n                  <br />\n                  <Instruction contained>\n                    <AvatarName player={activePlayer} addressUser /> escolherá o assunto para essa rodada.\n                  </Instruction>\n                </>\n              }\n              en={\n                <>\n                  All players must like or dislike a topic then must vote how trendy it is (how many players\n                  liked the topic). If you guess correctly you get 1 point.\n                  <br />\n                  If you got 1 number off (more or less), you get 1 point.\n                  <br />\n                  {isFixedRounds ? (\n                    <>\n                      The game will have\n                      {state.round.total} rounds.\n                    </>\n                  ) : (\n                    <>\n                      The first players to get 10 points wins the game (or a maximum of {state.round.total}{' '}\n                      rounds)\n                    </>\n                  )}\n                  <br />\n                  <Instruction contained>\n                    <AvatarName player={activePlayer} addressUser /> will choose the topic for this round.\n                  </Instruction>\n                </>\n              }\n            />\n            <TurnOrder order={state.gameOrder} players={players} activePlayerId={state.activePlayerId} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheActivePlayer}>\n          <StepTopicSelection\n            currentTopics={state.currentTopics}\n            currentCustomTopic={state.currentCustomTopic}\n            onSubmitTopic={onSubmitTopic}\n          />\n\n          <Step fullWidth>\n            <WaitingRoom\n              title={translate('Aguarde...', 'Please wait...')}\n              instruction={\n                <>\n                  <AvatarName player={activePlayer} addressUser />{' '}\n                  <Translate\n                    pt=\"está escolhendo a polêmica da rodada.\"\n                    en=\"is choosing the topic for the round.\"\n                  />\n                  <TurnOrder\n                    order={state.gameOrder}\n                    players={players}\n                    activePlayerId={state.activePlayerId}\n                  />\n                </>\n              }\n              players={players}\n            />\n          </Step>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTopicSelection;\n","import { POLEMICA_DA_VEZ_API } from 'adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitTopicAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: POLEMICA_DA_VEZ_API.submitAction,\n    actionName: 'submit-topic',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Assunto enviada com sucesso!', 'Topic send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu assunto',\n      'Oops, the application failed to submit the topic'\n    ),\n  });\n\n  return (payload: SubmitTopicPayload) => {\n    request({\n      action: 'SUBMIT_TOPIC',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitReactionAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: POLEMICA_DA_VEZ_API.submitAction,\n    actionName: 'submit-reaction',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Reação enviada com sucesso!', 'Reaction send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua reação',\n      'Oops, the application failed to submit your reaction'\n    ),\n  });\n\n  return (payload: SubmitReactionPayload) => {\n    request({\n      action: 'SUBMIT_REACTION',\n      ...payload,\n    });\n  };\n}\n","import { getRandomItem } from 'utils/helpers';\n\nexport function mockTopicSelection(currentTopics: Topic[]) {\n  return {\n    topicId: getRandomItem(currentTopics).id,\n  };\n}\n\nexport function mockGuess(playerCount: number) {\n  return {\n    reaction: getRandomItem([true, false]),\n    likesGuess: getRandomItem(\n      Array(playerCount + 1)\n        .fill(0)\n        .map((e, i) => e + i)\n    ),\n  };\n}\n","// Ant Design Resources\nimport { Avatar } from 'antd';\nimport { RiseOutlined, TwitterOutlined } from '@ant-design/icons';\n// Components\nimport { Icons } from 'components';\nimport clsx from 'clsx';\n\ntype TopicProps = {\n  topic: string;\n  likes?: number;\n  className?: string;\n};\n\nexport function Topic({ topic, likes, className = '' }: TopicProps) {\n  return (\n    <div className={clsx('p-trending-topic', className)}>\n      <TwitterOutlined /> {topic} <RiseOutlined />{' '}\n      {Boolean(likes) && (\n        <span className=\"p-trending-topic__likes\">\n          <Avatar\n            src={<Icons.SpeechBubbleThumbsUp />}\n            shape=\"square\"\n            size=\"large\"\n            className=\"p-trending-topic__icon-like\"\n          />{' '}\n          {likes}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport clsx from 'clsx';\n//Design Resources\nimport { Button, Divider } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks';\n// Components\nimport {\n  AvatarIcon,\n  Instruction,\n  ReadyPlayersBar,\n  Step,\n  Title,\n  Translate,\n  TransparentButton,\n} from 'components';\nimport { Topic } from './Topic';\n\ntype StepLikingProps = {\n  currentTopic: Topic;\n  customTopic: string;\n  onSubmitReaction: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepLiking({ currentTopic, customTopic, onSubmitReaction, players }: StepLikingProps) {\n  const { isLoading } = useLoading();\n  const [like, setLike] = useState<boolean | null>(null);\n\n  const onSubmitReactions = (likes: number) => {\n    onSubmitReaction({ reaction: like, likesGuess: likes });\n  };\n\n  const countOptions = useMemo(\n    () =>\n      Array(Object.keys(players).length + 1)\n        .fill(0)\n        .map((e, i) => e + i),\n    [players]\n  );\n\n  return (\n    <Step fullWidth className=\"p-step\">\n      <Title>\n        <Translate pt=\"O que você acha da polêmica da vez?\" en=\"What do you think of this trending topic?\" />\n      </Title>\n\n      <div className=\"p-reaction-buttons\">\n        <Topic topic={customTopic ?? currentTopic?.text} className=\"p-reaction-buttons__topic\" />\n        <TransparentButton\n          className={clsx(\n            'p-reaction-button',\n            'p-reaction-button--like',\n            like === true && 'p-reaction-button--active'\n          )}\n          onClick={() => setLike(true)}\n        >\n          <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" />\n          <Translate pt=\"Curtir\" en=\"Like\" />\n        </TransparentButton>\n        <TransparentButton\n          className={clsx(\n            'p-reaction-button',\n            'p-reaction-button--dislike',\n            like === false && 'p-reaction-button--active'\n          )}\n          onClick={() => setLike(false)}\n        >\n          <AvatarIcon type=\"speech-bubble-thumbs-down\" shape=\"square\" className=\"p-like-icon\" />\n          <Translate pt=\"Não curto\" en=\"Dislike\" />\n        </TransparentButton>\n      </div>\n\n      {like !== null && (\n        <>\n          <Instruction contained>\n            <Translate\n              pt=\"Quantas curtidas esse assunto vai receber?\"\n              en=\"How many likes will this topic get?\"\n            />\n          </Instruction>\n\n          <ul className=\"p-votes\">\n            {countOptions.map((option) => {\n              const key = `quantity-${option}`;\n              return (\n                <li key={key}>\n                  <Button\n                    type=\"primary\"\n                    disabled={isLoading || like === null}\n                    onClick={() => onSubmitReactions(option)}\n                    size=\"large\"\n                    shape=\"circle\"\n                  >\n                    {option}\n                  </Button>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n      <Divider />\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useMock, useStep } from 'hooks';\nimport { useOnSubmitReactionAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { mockGuess } from './mock';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepLiking } from './StepLiking';\n\nfunction PhaseReact({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const onSubmitReaction = useOnSubmitReactionAPIRequest(setStep);\n\n  useMock(() => {\n    onSubmitReaction(mockGuess(Object.keys(players).length));\n  }, []);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.REACT}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"feedback\"\n          title={translate('O que você acha?', 'What do you think?')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Um assunto polêmico está abalando as redes sociais!\n                  <br />\n                  Curta (ou não) e tente descobrir quantas curtidas ele vai receber.\n                </>\n              }\n              en={\n                <>\n                  A topic is trending in all social media!\n                  <br />\n                  Like (or not) and try to guess how many likes it will get!\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepLiking\n          currentTopic={state.currentTopic}\n          customTopic={state.customTopic}\n          onSubmitReaction={onSubmitReaction}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReact;\n","import clsx from 'clsx';\n// Components\nimport { AvatarIcon, StarPoints, Translate } from 'components';\n\ntype CommentTextProps = {\n  reaction: boolean;\n  likes: boolean;\n  playerId: PlayerId;\n  points: number;\n};\n\nexport function CommentText({ reaction, likes, playerId, points }: CommentTextProps) {\n  return (\n    <span>\n      {reaction ? (\n        <>\n          <Translate pt=\"Curto\" en=\"I like it\" />{' '}\n          <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" size={20} />{' '}\n          <Translate pt=\" e \" en=\" and \" />\n        </>\n      ) : (\n        <>\n          <Translate pt=\"Não curto\" en=\"I dislike it\" />{' '}\n          <AvatarIcon type=\"speech-bubble-thumbs-down\" shape=\"square\" className=\"p-like-icon\" size={20} />{' '}\n          <Translate pt=\", mas \" en=\" but \" />\n        </>\n      )}\n\n      <Translate pt={<>eu acho que </>} en={<>I think </>} />\n\n      <span\n        className={clsx(\n          points === 3 && 'p-tweet-comment__correct',\n          points === 1 && 'p-tweet-comment__almost',\n          points === 0 && 'p-tweet-comment__incorrect'\n        )}\n      >\n        <Translate pt={<>{likes} jogadores</>} en={<>{likes} players</>} />\n      </span>\n\n      <Translate pt={<> curtem.</>} en={<> do like it.</>} />\n      <br />\n      <span className=\"p-tweet-comment__points\">\n        <StarPoints keyPrefix={playerId} quantity={points} />\n      </span>\n    </span>\n  );\n}\n","import moment from 'moment';\n// Ant Design Resources\nimport { Comment } from 'antd';\n// Components\nimport { Avatar } from 'components';\nimport { CommentText } from './CommentText';\n\ntype TweetCommentProps = {\n  player: GamePlayer;\n  totalLikes: number;\n};\n\nexport function TweetComment({ player, totalLikes }: TweetCommentProps) {\n  const isCorrect = player.likesGuess === totalLikes;\n  const isAlmost = [totalLikes - 1, totalLikes + 1].includes(player.likesGuess);\n  const points = isCorrect ? 3 : isAlmost ? 1 : 0;\n\n  return (\n    <Comment\n      author={player.name}\n      avatar={<Avatar id={player.avatarId} />}\n      content={\n        <CommentText\n          reaction={player.reaction}\n          likes={player.likesGuess}\n          points={points}\n          playerId={player.id}\n        />\n      }\n      datetime={moment(player.updatedAt).fromNow()}\n      className=\"p-tweet-comment\"\n    />\n  );\n}\n","// Ant Design Resources\nimport { CommentOutlined, LikeFilled, ShareAltOutlined } from '@ant-design/icons';\n// Components\nimport { ButtonContainer, Step, TimedButton, Title, Translate } from 'components';\nimport { Topic } from './Topic';\nimport { TweetComment } from './TweetComment';\n\ntype StepResolutionProps = {\n  players: GamePlayers;\n  totalLikes: number;\n  customTopic: string;\n  currentTopic: Topic;\n  goToNextStep: GenericFunction;\n};\nexport function StepResolution({\n  players,\n  totalLikes,\n  customTopic,\n  currentTopic,\n  goToNextStep,\n}: StepResolutionProps) {\n  return (\n    <Step className=\"p-step\">\n      <Title level={1}>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <div className=\"p-tweet-container\">\n        <div className=\"p-tweet\">\n          <div className=\"p-tweet__topic\">\n            <Topic topic={customTopic ?? currentTopic?.text} />\n          </div>\n          <div className=\"p-tweet__actions\">\n            <div className=\"p-tweet__action\" style={{ color: totalLikes > 0 ? 'DodgerBlue' : 'gray' }}>\n              <LikeFilled className=\"p-tweet__icon\" />\n              {totalLikes}\n            </div>\n            <div className=\"p-tweet__action p-tweet__action-active\">\n              <CommentOutlined className=\"p-tweet__icon\" /> <Translate pt=\"Comentários\" en=\"Comments\" />\n            </div>\n            <div className=\"p-tweet__action\">\n              <ShareAltOutlined className=\"p-tweet__icon\" /> <Translate pt=\"Compartilhar\" en=\"Share\" />\n            </div>\n          </div>\n        </div>\n\n        <ul className=\"p-tweet-comments\">\n          {Object.values(players).map((player) => {\n            const key = `player-result-${player.id}`;\n\n            return (\n              <li className=\"p-player-reaction\" key={key}>\n                <TweetComment player={player} totalLikes={totalLikes} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <ButtonContainer>\n        <TimedButton duration={25} showTimer onExpire={goToNextStep} onClick={goToNextStep} label=\"Ranking\" />\n      </ButtonContainer>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  Step,\n  StepSwitcher,\n  Translate,\n  Title,\n  RankingBoard,\n  AdminNextRoundButton,\n  ButtonContainer,\n} from 'components';\nimport { StepResolution } from './StepResolution';\nimport { Button } from 'antd';\n\nfunction PhaseReact({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"review\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  E aí? Será que o assunto bombou?\n                  <br />\n                  Se você acertou a quantidade de curtidas, você ganha 1 ponto\n                </>\n              }\n              en={\n                <>\n                  So... did the topic trend?\n                  <br />\n                  If you guess the correct number of likes, you get 1 point\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <Step fullWidth>\n          <StepResolution\n            players={players}\n            customTopic={state.customTopic}\n            currentTopic={state.currentTopic}\n            totalLikes={state.totalLikes}\n            goToNextStep={goToNextStep}\n          />\n        </Step>\n\n        <Step fullWidth>\n          <Title>Ranking</Title>\n          <RankingBoard ranking={state.ranking} players={players} />\n          <ButtonContainer>\n            <Button onClick={goToPreviousStep} ghost>\n              <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n            </Button>\n          </ButtonContainer>\n          <AdminNextRoundButton round={state.round} />\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReact;\n","// Ant Design Resources\nimport { FallOutlined, RiseOutlined } from '@ant-design/icons';\n// Components\nimport { AvatarIcon, GameOverWrapper, Translate } from 'components';\nimport { orderBy } from 'lodash';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <GameOverWrapper announcementIcon=\"trophy\" info={info} state={state}>\n      <ul\n        className=\"p-all-topics\"\n        style={{ gridTemplateColumns: `repeat(${playerCount % 3 === 0 ? 3 : 5}, 1fr)` }}\n      >\n        {orderBy(state.allTopics, ['likes', 'text'], ['desc', 'asc']).map((topic: PastTopic) => {\n          const trended = topic.likes > playerCount / 2;\n\n          return (\n            <li className=\"p-all-topics__topic\" key={topic.id}>\n              <h3>\n                {trended ? <RiseOutlined /> : <FallOutlined />} {topic.text}\n              </h3>\n              <div className=\"p-all-topics__comment\">\n                <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" />{' '}\n                {topic.likes} <Translate pt=\"curtidas\" en=\"likes\" />\n              </div>\n              {}\n            </li>\n          );\n        })}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseTopicSelection from './PhaseTopicSelection';\nimport PhaseReact from './PhaseReact';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionPolemicaDaVez({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.POLEMICA_DA_VEZ.TOPIC_SELECTION:\n        return PhaseTopicSelection;\n      case PHASES.POLEMICA_DA_VEZ.REACT:\n        return PhaseReact;\n      case PHASES.POLEMICA_DA_VEZ.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.POLEMICA_DA_VEZ}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionPolemicaDaVez;\n"],"names":["StepTopicSelection","currentTopics","currentCustomTopic","onSubmitTopic","translate","useLanguage","useState","customTopic","setCustomTopic","onSubmitCustomTopic","topicId","id","fullWidth","pt","en","className","map","topic","onClick","text","placeholder","onChange","e","target","value","onPressEnter","Boolean","type","state","players","info","meta","useStep","step","goToNextStep","setStep","useWhichPlayerIsThe","activePlayer","isUserTheActivePlayer","request","useAPICall","apiFunction","POLEMICA_DA_VEZ_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitTopicAPIRequest","isFixedRounds","options","fixedRounds","useMock","getRandomItem","phase","allowedPhase","PHASES","round","onPressButton","time","circleColor","contained","title","onClose","currentRound","current","duration","undefined","total","player","addressUser","order","gameOrder","activePlayerId","orCondition","instruction","Topic","likes","clsx","TwitterOutlined","RiseOutlined","src","shape","size","StepLiking","currentTopic","onSubmitReaction","isLoading","useLoading","like","setLike","countOptions","useMemo","Array","Object","keys","length","fill","i","option","key","disabled","reaction","likesGuess","useOnSubmitReactionAPIRequest","playerCount","CommentText","playerId","points","keyPrefix","quantity","TweetComment","totalLikes","isCorrect","isAlmost","includes","author","name","avatar","avatarId","content","datetime","moment","updatedAt","fromNow","StepResolution","level","style","color","LikeFilled","CommentOutlined","ShareAltOutlined","values","showTimer","onExpire","label","goToPreviousStep","ranking","ghost","announcementIcon","gridTemplateColumns","orderBy","allTopics","trended","FallOutlined","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseTopicSelection","PhaseReact","PhaseResolution","PhaseGameOver","PageError"],"sourceRoot":""}