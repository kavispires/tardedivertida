{"version":3,"file":"static/js/522.fa0d0cfc.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextRoundButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","components/debug/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/SectionSettings.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","utils/phases.ts"],"sourcesContent":["import { FireFilled } from '@ant-design/icons';\nimport { Space, SpaceProps } from 'antd';\nimport clsx from 'clsx';\nimport { useGlobalState } from 'hooks';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  children: any;\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\nimport { useState } from 'react';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  isLoading?: boolean;\n  state: GameState;\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n\ntype PlayersReadyStateProps = {\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { FireFilled } from '@ant-design/icons';\nimport { Button, Drawer, Popconfirm, Spin } from 'antd';\nimport { useAPICall, useGlobalState, useLoading } from 'hooks';\nimport { useState } from 'react';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n\ntype AdminMenuDrawerProps = {\n  state: GameState;\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <Button\n          type=\"primary\"\n          danger\n          size=\"small\"\n          onClick={showDrawer}\n          disabled={isLoading}\n          icon={isLoading ? <Spin /> : <FireFilled />}\n        >\n          Admin\n        </Button>\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} visible={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label=\"Make this the last round\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { FireFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { Translate } from 'components/language';\nimport { useAPICall, useGlobalState, useLanguage, useLoading } from 'hooks';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextRoundButtonProps = {\n  buttonText?: ReactChildren;\n  className?: string;\n  round?: GameRound;\n  lastRound?: boolean;\n};\n\nexport function AdminNextRoundButton({\n  buttonText,\n  className = '',\n  round,\n  lastRound = false,\n}: AdminNextRoundButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <Button\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        onClick={() => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n        disabled={isLoading}\n      >\n        {buttonText ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </Button>\n    </AdminOnlyContainer>\n  );\n}\n","import { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { useGlobalState, useLoading } from 'hooks';\n\ninterface AdminButtonProps extends ButtonProps {\n  onClick: GenericFunction;\n  children: ReactChildren;\n}\n\nexport function AdminButton({ onClick, children, ...props }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...props}>\n      {children}\n    </Button>\n  );\n}\n","import { useGlobalState } from 'hooks';\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  onClick: GenericFunction;\n  label: ReactChildren;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ninterface TimedButtonProps extends ButtonProps {\n  duration?: number;\n  onExpire?: GenericFunction;\n  showTimer?: boolean;\n}\n\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  showTimer = true,\n  type,\n  onClick,\n  ...props\n}: TimedButtonProps) {\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    autoStart: true,\n    onExpire: showTimer ? onExpire : undefined,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...props} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children) && ' '}\n      {showTimer && (\n        <span className={clsx(timeClass, `${timeClass}--${type}`)}>{minutes * 60 + seconds}</span>\n      )}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: any;\n  active?: boolean;\n  activeClass?: string;\n  className?: string;\n  hoverType?: 'scale' | 'sepia';\n}\n\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...props\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useDevFeatures } from 'hooks';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  children: ReactChildren;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { getAnimationClass, kebabToPascal } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Icons } from 'components/icons';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\nconst IconIllustrationsComponents: any = Icons;\n\ntype PhaseAnnouncementProps = {\n  title: any;\n  onClose: GenericFunction;\n  buttonText?: string;\n  children?: any;\n  className?: string;\n  currentRound?: number;\n  duration?: number;\n  type?: string;\n  unskippable?: boolean;\n  withoutTimer?: boolean;\n  animationType?: AnimationType;\n};\nexport function PhaseAnnouncement({\n  buttonText,\n  type,\n  title,\n  children,\n  duration,\n  currentRound = 0,\n  onClose,\n  className,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  const { translate } = useLanguage();\n  const durationPerRound = [15, 15, 10, 5, 5, 5]?.[currentRound] ?? 5;\n  const Icon: any =\n    IconIllustrationsComponents[kebabToPascal(type ?? 'multitask')] ?? IconIllustrationsComponents.Multitask;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n      <Icon className=\"phase-announcement__icon\" />\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          {translate('Prosseguir', 'Continue', buttonText)}\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState, useLanguage } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  children: any;\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(text: DualLanguageValue, language: Language, volume: number): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  window.speechSynthesis.speak(utterance);\n}\n","import { useCallback, useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Image, Input, notification, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage, useLoading } from 'hooks';\nimport useGlobalState from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { PUBLIC_URL, RANDOM_NAMES } from 'utils/constants';\nimport { convertYYYYMMDDtoMilliseconds, getRandomItem, isDevEnv } from 'utils/helpers';\nimport { speak } from 'utils/speech';\n// Components\nimport { Translate } from 'components/language';\n\nconst randomName = isDevEnv ? getRandomItem(RANDOM_NAMES) : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [userAvatarId, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume] = useGlobalState('volume');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffect(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  }, []); // eslint-disable-line\n\n  // News\n  useEffect(() => {\n    const newAvatarsNotice = localStorage.get('newAvatarsNotice');\n\n    if (!userAvatarId && (!newAvatarsNotice || convertYYYYMMDDtoMilliseconds('2022/06/21') > Date.now())) {\n      notification.info({\n        message: translate('Novos avatares estão disponíveis!', 'New avatars are available'),\n        placement: 'bottomLeft',\n      });\n    }\n  }, []); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(async () => {\n    try {\n      setLoader('add-player', true);\n      const response: PlainObject = await GAME_API.addPlayer({\n        gameId,\n        gameName,\n        playerName: tempUsername,\n        playerAvatarId: tempAvatar,\n      });\n\n      setUserId(response.data.id);\n      setUsername(response.data.name);\n      setUserAvatarId(response.data.avatarId);\n\n      localStorage.set({\n        username: response.data.name,\n        avatarId: response.data.avatarId,\n        gameId,\n      });\n\n      speak(\n        {\n          pt: `Bem-vindo, ${response.data.name}!`,\n          en: `Welcome, ${response.data.name}!`,\n        },\n        language,\n        volume\n      );\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('add-player', false);\n    }\n  }, [gameId, gameName, tempUsername, tempAvatar]); // eslint-disable-line\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      onAddPlayer();\n    }\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onAddPlayer}\n          loading={isLoading}\n        >\n          {translate('Entrar no jogo', 'Enter')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useLoading, useGlobalState, useLanguage } from 'hooks';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  switch (type) {\n    case 'eye-cloud':\n    case 'monster-eye-cloud':\n    case 'phone-cloud':\n    case 'retro-cloud':\n    case 'sheep-cloud':\n    case 'speech-cloud':\n      return SingleCloud;\n    case 'artsy-clouds':\n    case 'book-clouds':\n    case 'crime-clouds':\n    case 'halloween-clouds':\n    case 'letter-clouds':\n    case 'one-clouds':\n    case 'sky-clouds':\n      return MultiCloud;\n    default:\n      return SingleCloud;\n  }\n}\n\nfunction getCloudFileName(gameCode: string) {\n  return (\n    {\n      A: 'artsy-clouds',\n      C: 'book-clouds',\n      D: 'crime-clouds',\n      E: 'cyber-cloud',\n      G: 'sky-clouds',\n      H: 'crime-clouds',\n      L: 'phone-cloud',\n      M: 'sheep-cloud',\n      N: 'halloween-clouds',\n      O: 'retro-cloud',\n      P: 'speech-cloud',\n      R: 'monster-eye-cloud',\n      S: 'sky-clouds',\n      T: 'eye-cloud',\n      U: 'one-clouds',\n      X: 'letter-clouds',\n    }[gameCode] ?? 'cloud'\n  );\n}\n\ntype CloudBackgroundProps = {\n  gameCode?: string;\n};\n\nexport function CloudBackground({ gameCode = 'Z' }: CloudBackgroundProps) {\n  const cloudType = getCloudFileName(gameCode);\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${cloudType}`)}>\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport useGlobalState from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <CloudBackground gameCode={info.gameCode} />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport { useLoading, useIsUserReady, useAPICall, useLanguage, useMock, useUser, useGlobalState } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { RulesCarousel } from '../rules';\nimport { speak } from 'utils/speech';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(\n        {\n          pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${user.name}`,\n          en: `Done! Now wait for the other players. Good luck, ${user.name}`,\n        },\n        language,\n        volume\n      );\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(\n        {\n          pt: `Agora só resta rezar, ${user.name}, porque o jogo vai começar mesmo assim!`,\n          en: `Now all you have left is to pray ${user.name} because the game is starting anyway!`,\n        },\n        language,\n        volume\n      );\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(\n        {\n          pt: `Vixi ${user.name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n          en: `Oh ${user.name}, you are screwed because the game is starting anyway!`,\n        },\n        language,\n        volume\n      );\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n      <ReadyPlayersBar players={players} />\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <Icons.Gears className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffect } from 'react';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffect(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  }, []); // eslint-disable-line\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  players: GamePlayers;\n  order: PlayerId[];\n  activePlayerId?: PlayerId;\n  className?: string;\n  reorderByUser?: PlayerId;\n  title?: string;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order;\n\n  return (\n    <div className={clsx('game-order', className)}>\n      <header className=\"game-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ul className=\"game-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <>\n              <span\n                key={`turn-order-player-${playerId}`}\n                className={clsx('game-order__player', isActive && 'game-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span key={`turn-order-player-${playerId}-arrow`} className=\"game-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nfunction reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n\ntype WaitingRoomProps = {\n  players: GamePlayers;\n  title?: any;\n  instruction?: any;\n  children?: any;\n};\n\nexport function WaitingRoom({ players, title, instruction, children }: WaitingRoomProps) {\n  const { translate } = useLanguage();\n  return (\n    <div className=\"waiting-room\">\n      <Title>{translate('Pronto!', 'Done!', title)}</Title>\n      <Icons.WaitingRoom style={{ width: '6rem' }} />\n      <Instruction>\n        {Boolean(instruction) ? (\n          instruction\n        ) : (\n          <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n        )}\n      </Instruction>\n      {children}\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Instruction } from 'components/text';\n\ntype CollapsibleRuleProps = {\n  children: any;\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype PopoverRuleProps = {\n  content: any;\n  showLabel?: boolean;\n  label?: any;\n};\n\nexport function PopoverRule({ content, label, showLabel = true }: PopoverRuleProps): JSX.Element {\n  const [isActive, setActive] = useState(false);\n\n  useEffect(() => {\n    setActive(showLabel);\n  }, []); // eslint-disable-line\n\n  return (\n    <div className=\"popover-rule\">\n      <Popover placement=\"bottomLeft\" content={content} trigger=\"click\">\n        <Button\n          shape={'round'}\n          size=\"large\"\n          onMouseOver={() => setActive(true)}\n          onMouseLeave={() => setActive(showLabel ?? false)}\n        >\n          <ReadOutlined />\n          {isActive && Boolean(label) ? label : <Translate pt=\" Regras\" en=\" Rules\" />}\n        </Button>\n      </Popover>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}game-image-${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\n\ntype RulesListProps = {\n  children: any;\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function RulesModal({ gameInfo }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage, useUser } from 'hooks';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures, useGlobalState, useLocalStorage } from 'hooks';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image, Space } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          visible={isDrawerOpen}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}game-image-${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>{' '}\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              visible={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useGameState, useGlobalState, useGamePlayers, useLanguage } from 'hooks';\n// Utils\nimport gameList from 'assets/data/games.json';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useTitle } from 'react-use';\n\nconst GAME_LIST: {\n  [key: string]: GameInfo;\n} = gameList;\n\ntype SessionProps = {\n  gameId: GameId;\n  gameCollection: GameName;\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? GAME_LIST[gameId[0]] : {});\n  }, [gameId]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport { Typography } from 'antd';\n\ntype InstructionsProps = {\n  children: any;\n  white?: boolean;\n  className?: string;\n  contained?: boolean;\n  fullWidth?: boolean;\n};\n\n/**\n * Typography container for instructions\n * @param props\n * @returns\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype RoundsLeftInstructionProps = {\n  round: GameRound;\n};\n\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Faltam <strong>{(round?.total ?? 0) - (round?.current ?? 0)}</strong> rodadas para o jogo\n            terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{(round?.total ?? 0) - (round?.current ?? 0)}</strong> rounds left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","type TextHighlightProps = {\n  children: any;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography } from 'antd';\n\ntype TitleProps = {\n  children: any;\n  white?: boolean;\n  icon?: any;\n  className?: string;\n  level?: 1 | 2 | 3 | 4 | 5 | undefined;\n  size?: 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 1, size = 'large' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","/**\n * Enum of Game Phases\n */\nexport const PHASES: Record<string, Record<string, string>> = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DESENHO_RAPIDAO: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    HINT_GIVING: 'HINT_GIVING',\n    HINT_RECEIVING: 'HINT_RECEIVING',\n    GUESS_THE_CODE: 'GUESS_THE_CODE',\n    DISCUSSION: 'DISCUSSION',\n    SOLUTION: 'SOLUTION',\n  },\n  PALHETA_DE_CORES: {\n    '': '',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    MASTER_PLAYER_SELECTION: 'MASTER_PLAYER_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TE_CONHECO: {\n    WRITE: 'WRITE',\n    TRUTHS_AND_LIES: 'TRUTHS_AND_LIES',\n    RESULT: 'RESULT',\n    MATCH_PLAYERS: 'MATCH_PLAYERS',\n    REVEAL: 'REVEAL',\n  },\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","visible","setVisible","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","size","onClick","placement","closable","onConfirm","phase","lastRound","ButtonLabel","round","current","total","pt","en","AdminNextRoundButton","buttonText","translate","useLanguage","onGoToNextPhase","AdminButton","RocketFilled","AdminOnlyButton","TimedButton","duration","onExpire","showTimer","useTimer","expiryTimestamp","inNSeconds","autoStart","minutes","seconds","timeClass","Boolean","TransparentButton","active","activeClass","hoverType","DebugOnly","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","IconIllustrationsComponents","Icons","PhaseAnnouncement","currentRound","withoutTimer","unskippable","animationType","durationPerRound","Icon","kebabToPascal","Multitask","getAnimationClass","custom","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","setScreenSize","useEffect","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","speak","text","language","volume","utterance","SpeechSynthesisUtterance","lang","speechSynthesis","randomName","getRandomItem","RANDOM_NAMES","Join","meta","setLoader","gameId","setUserId","setUsername","userAvatarId","setUserAvatarId","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","avatarId","newAvailableAvatars","lsAvatarId","localStorage","lsUsername","lsGameId","newAvatarsNotice","convertYYYYMMDDtoMilliseconds","Date","now","notification","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","GAME_API","playerAvatarId","response","data","username","console","error","alt","src","PUBLIC_URL","fallback","CaretLeftOutlined","viewBox","href","avatars","AVATARS","CaretRightOutlined","isComplete","target","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","loading","Waiting","gameMeta","onLockGameAndStart","isLocked","numPlayers","direction","min","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","backgroundImage","CloudBackground","gameCode","cloudType","A","C","D","E","G","H","L","M","N","O","P","R","S","T","U","X","getCloudFileName","CloudTypeComponent","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","animate","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","user","useUser","onBeReady","onSuccess","onBeReadyIDK","onBeReadyQue","useMock","ruleClass","wrap","SmileFilled","MehFilled","RobotFilled","PhaseSetup","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","startWith","starterIndex","slice","reorder","playerId","isActive","backgroundColor","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","CollapsibleRule","contained","ghost","header","PopoverRule","content","showLabel","setActive","trigger","shape","onMouseOver","onMouseLeave","ReadOutlined","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","onCancel","footer","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","useMemo","count","score","SectionSettings","blurEnabled","setBlurEnabled","setIsAdminEnabled","setVolume","toggleDevFeatures","useLocalStorage","setLocalStorage","checked","s","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","SettingOutlined","preview","GAME_LIST","gameList","Session","gameCollection","getActiveComponent","useGamePlayers","useGameState","setInfo","useTitle","table","ActiveComponent","Instruction","fullWidth","RoundsLeftInstruction","TextHighlight","Title","level","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","REVEAL","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","DESENHO_RAPIDAO","PROMPT_SELECTION","DRAWING","GUESSING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","HINT_GIVING","HINT_RECEIVING","GUESS_THE_CODE","DISCUSSION","SOLUTION","PALHETA_DE_CORES","LINHAS_CRUZADAS","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","ONDA_TELEPATICA","DIAL_CLUE","GUESS","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","MASTER_PLAYER_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","CRUZA_PALAVRAS","CLUE_WRITING","TE_CONHECO","WRITE","TRUTHS_AND_LIES","MATCH_PLAYERS"],"sourceRoot":""}