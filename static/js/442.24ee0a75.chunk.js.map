{"version":3,"file":"static/js/442.24ee0a75.chunk.js","mappings":"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","sources":["games/retrato-falado/constants.ts","games/retrato-falado/ViewAnnouncement.tsx","games/retrato-falado/ViewLastSeconds.tsx","games/retrato-falado/MonsterCard.tsx","games/retrato-falado/ViewSketching.tsx","games/retrato-falado/ViewWitnessing.tsx","games/retrato-falado/StepTestimonial.tsx","games/retrato-falado/PhaseCompositeSketch.tsx","games/retrato-falado/api-requests.ts","games/retrato-falado/StepVote.tsx","games/retrato-falado/PhaseEvaluation.tsx","games/retrato-falado/MonsterSketches.tsx","games/retrato-falado/StepResults.tsx","games/retrato-falado/StepRanking.tsx","games/retrato-falado/PhaseReveal.tsx","games/retrato-falado/PhaseGameOver.tsx","games/retrato-falado/SessionRetratoFalado.tsx"],"sourcesContent":["export const VIEWS = {\n  WITNESSING: 'WITNESSING',\n  ANNOUNCEMENT: 'ANNOUNCEMENT',\n  SKETCHING: 'SKETCHING',\n  FINISHING: 'FINISHING',\n};\n\nconst MEMORY_TIME = 20;\nconst ANNOUNCEMENT_TIME = 5;\nconst SKETCH_TIME = 120;\nconst EXTRA_TIME = 5;\n\nexport const TIMES = {\n  MEMORY: MEMORY_TIME,\n  ANNOUNCEMENT: ANNOUNCEMENT_TIME,\n  SKETCH: SKETCH_TIME,\n  EXTRA: EXTRA_TIME,\n  TOTAL: MEMORY_TIME + ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  MEMORY_MARK: ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  ANNOUNCEMENT_MARK: SKETCH_TIME + EXTRA_TIME,\n  SKETCH_MARK: EXTRA_TIME,\n};\n","import { PhaseAnnouncement, Translate } from 'components';\n\ntype ViewAnnouncementProps = {\n  isUserTheWitness: boolean;\n};\n\nexport function ViewAnnouncement({ isUserTheWitness }: ViewAnnouncementProps) {\n  return (\n    <PhaseAnnouncement\n      title={\n        isUserTheWitness ? (\n          <Translate pt=\"Descreva!\" en=\"Describe!\" />\n        ) : (\n          <Translate pt=\"Hora de desenhar!\" en=\"Time to draw!\" />\n        )\n      }\n      unskippable\n      duration={5}\n      type={isUserTheWitness ? 'timer' : 'sketch'}\n      onClose={() => {}}\n    ></PhaseAnnouncement>\n  );\n}\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from 'components';\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nexport function ViewLastSeconds({ isUserTheWitness, remainingTime, lines, setLines }: ViewSketchingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done! \" />\n      </Title>\n      <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n      <Instruction contained>\n        <Translate\n          pt=\"Boca fechada! Aguarde os jogadores darem os últimos retoques.\"\n          en=\"Shut up! Wait for the other players to finish their drawings.\"\n        />\n      </Instruction>\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Termine!\" en=\"Finish it!\" />\n      </Title>\n      <Instruction contained>\n        <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n      </Instruction>\n      <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space, SpaceProps } from 'antd';\nimport { RotateLeftOutlined, RotateRightOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\nimport { ImageCard, Translate } from 'components';\n\ninterface MonsterCardProps extends SpaceProps {\n  currentMonster: Monster;\n  showControls?: boolean;\n}\n\nexport function MonsterCard({ currentMonster, showControls = true, ...props }: MonsterCardProps) {\n  const [monsterOrientation, setMonsterOrientation] = useGlobalState('monsterOrientation');\n  const cardWidth = useCardWidth(5, 16, 120, 360);\n\n  useEffect(() => {\n    if (currentMonster.orientation === 'horizontal') {\n      setMonsterOrientation(currentMonster.orientation);\n    }\n  }, []); // eslint-disable-line\n\n  const onChangeOrientation = () => {\n    const newOrientation = monsterOrientation === 'vertical' ? 'horizontal' : 'vertical';\n    setMonsterOrientation(newOrientation);\n  };\n\n  const baseClass = 'r-monster-card';\n  return (\n    <Space direction=\"vertical\" align=\"center\" {...props}>\n      <ImageCard\n        imageId={currentMonster.id}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          monsterOrientation === 'vertical' ? `${baseClass}--vertical` : `${baseClass}--horizontal`\n        )}\n      />\n      {showControls && (\n        <Button onClick={onChangeOrientation}>\n          {monsterOrientation === 'vertical' ? <RotateRightOutlined /> : <RotateLeftOutlined />}\n          <Translate pt=\"Girar\" en=\"Rotate\" />\n        </Button>\n      )}\n    </Space>\n  );\n}\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from 'components';\nimport { MonsterCard } from './MonsterCard';\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingSketchingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nexport function ViewSketching({\n  isUserTheWitness,\n  remainingSketchingTime,\n  lines,\n  setLines,\n}: ViewSketchingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Descreva o monstro!\" en=\"Describe the monstro!\" />\n      </Title>\n      <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n      <MonsterCard currentMonster={{ id: 'md-bs-000', orientation: 'vertical' }} showControls={false} />\n      <Instruction contained>\n        <Translate\n          pt=\"Tente dar o maior número de detalhes possível. Os jogadores podem te fazer perguntas.\"\n          en=\"Try to give the largest number of details. Player may ask you questions too.\"\n        />\n      </Instruction>\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Desenhe!\" en=\"Sketch it!\" />\n      </Title>\n      <Instruction contained>\n        {remainingSketchingTime > 0 ? (\n          <Translate\n            pt=\"Você pode também fazer perguntas à testemunha.\"\n            en=\"You may also ask the witness questions\"\n          />\n        ) : (\n          <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n        )}\n      </Instruction>\n      <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\n","// Utils\nimport { TIMES } from './constants';\n// Components\nimport { DrawingCanvas, Instruction, TimerBar, Title, Translate } from 'components';\nimport { MonsterCard } from './MonsterCard';\n\ntype ViewWitnessingProps = {\n  isUserTheWitness: boolean;\n  remainingWitnessingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n  currentMonster: Monster;\n};\n\nexport function ViewWitnessing({\n  isUserTheWitness,\n  currentMonster,\n  remainingWitnessingTime,\n  lines,\n  setLines,\n}: ViewWitnessingProps) {\n  return isUserTheWitness ? (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Memorize!\" en=\"Memorize!\" />\n      </Title>\n      <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n      <MonsterCard currentMonster={currentMonster} />\n    </div>\n  ) : (\n    <div className=\"r-view\">\n      <Title>\n        <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"A testemunha está tendo um flashback do monstro.\"\n          en=\"The witness is having a flashback of the monster event now.\"\n        />\n      </Instruction>\n      <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n      <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { TIMES, VIEWS } from './constants';\nimport { inNSeconds } from 'utils/helpers';\n// Components\nimport { ViewSwitch } from 'components';\nimport { ViewAnnouncement } from './ViewAnnouncement';\nimport { ViewLastSeconds } from './ViewLastSeconds';\nimport { ViewSketching } from './ViewSketching';\nimport { ViewWitnessing } from './ViewWitnessing';\nimport { useGlobalState } from 'hooks';\n\ntype StepTestimonialProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitSketch: GenericFunction;\n  onSubmitOrientation: GenericFunction;\n};\n\nexport function StepTestimonial({\n  isUserTheWitness,\n  currentMonster,\n  onSubmitSketch,\n  onSubmitOrientation,\n}: StepTestimonialProps) {\n  const [monsterOrientation] = useGlobalState('monsterOrientation');\n  const [view, setView] = useState(VIEWS.WITNESSING);\n  const [lines, setLines] = useState<any>([]);\n\n  const onEnd = () => {\n    if (isUserTheWitness && monsterOrientation === 'horizontal') {\n      // Submit orientation change if any\n      onSubmitOrientation({ orientation: monsterOrientation });\n    }\n    onSubmitSketch({ sketch: JSON.stringify(lines) });\n  };\n\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(TIMES.TOTAL),\n    autoStart: true,\n    onExpire: onEnd,\n  });\n\n  const timer = minutes * 60 + seconds;\n\n  useEffect(() => {\n    // When time is done for memorizing\n    if (timer === TIMES.MEMORY_MARK) {\n      setView(VIEWS.ANNOUNCEMENT);\n    } else if (timer === TIMES.ANNOUNCEMENT_MARK) {\n      setView(VIEWS.SKETCHING);\n    } else if (timer === TIMES.SKETCH_MARK) {\n      setView(VIEWS.FINISHING);\n    }\n  }, [timer]);\n\n  return (\n    <ViewSwitch\n      cases={[\n        view === VIEWS.WITNESSING,\n        view === VIEWS.ANNOUNCEMENT,\n        view === VIEWS.SKETCHING,\n        view === VIEWS.FINISHING,\n      ]}\n    >\n      <ViewWitnessing\n        isUserTheWitness={isUserTheWitness}\n        currentMonster={currentMonster}\n        remainingWitnessingTime={timer - TIMES.MEMORY_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewAnnouncement isUserTheWitness={isUserTheWitness} />\n      <ViewSketching\n        isUserTheWitness={isUserTheWitness}\n        remainingSketchingTime={timer - TIMES.SKETCH_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewLastSeconds\n        isUserTheWitness={isUserTheWitness}\n        remainingTime={timer}\n        lines={lines}\n        setLines={setLines}\n      />\n    </ViewSwitch>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitOrientationAPIRequest, useOnSubmitSketchAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { TIMES } from './constants';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepTestimonial } from './StepTestimonial';\n\nfunction PhaseCompositeSketch({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const isUserReady = useIsUserReady(players, state);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitSketch = useOnSubmitSketchAPIRequest(setStep);\n  const onSubmitOrientation = useOnSubmitOrientationAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.COMPOSITE_SKETCH}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={7}\n          unskippable\n          circleColor=\"green\"\n        >\n          <Instruction contained>\n            <Translate\n              pt={\n                <>\n                  Um meliante monstruoso está a solta!\n                  <br />\n                  A testemunha <AvatarName player={witness} /> tentará relembrar o incidente!\n                </>\n              }\n              en={\n                <>\n                  A monstrous miscreant is on the loose!\n                  <br />\n                  The witness <AvatarName player={witness} /> must recall all of its features!\n                </>\n              }\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"monster\"\n          title={translate('Memorize! Descreva! Desenhe!', 'Memorize! Describe! Sketch!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 2 ? 20 : 5}\n          unskippable\n        >\n          <Instruction>\n            {isUserTheWitness ? (\n              <Translate\n                pt={\n                  <>\n                    Você terá {TIMES.MEMORY} segundos para memorizar as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para descrevê-lo para\n                    os outros jogadores.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    You'll have {TIMES.MEMORY} seconds to memorize the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to describe it to the other\n                    players.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            ) : (\n              <Translate\n                pt={\n                  <>\n                    A testemunha <AvatarName player={witness} /> terá {TIMES.MEMORY} segundos para memorizar\n                    as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para desenhá-lo\n                    enquanto a testemunha o descreve.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    The witness <AvatarName player={witness} /> will have {TIMES.MEMORY} seconds to memorize\n                    the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to draw the monster while\n                    the witness describes it.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            )}\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTestimonial\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          onSubmitSketch={onSubmitSketch}\n          onSubmitOrientation={onSubmitOrientation}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCompositeSketch;\n","import { RETRATO_FALADO_API } from 'adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitOrientationAPIRequest(setStep: GenericFunction) {\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n  });\n\n  return (payload: SubmitOrientationPayload) => {\n    request({\n      action: 'SUBMIT_ORIENTATION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitSketchAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Desenho enviado com sucesso',\n      \"Time's up! Sketch submitted successfully\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your sketch'\n    ),\n  });\n\n  return (payload: SubmitSketchPayload) => {\n    request({\n      action: 'SUBMIT_SKETCH',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVoteAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-vote',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Voto enviado com sucesso', 'Vote submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu voto',\n      'Oops, the application failed to send your vote'\n    ),\n  });\n\n  return (payload: SubmitVotePayload) => {\n    request({\n      action: 'SUBMIT_VOTE',\n      ...payload,\n    });\n  };\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\nimport { Avatar, CanvasResizer, CanvasSVG, ButtonContainer, Instruction, Title, Translate } from 'components';\nimport { MonsterCard } from './MonsterCard';\n\ntype StepVoteProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitVote: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n};\n\nexport function StepVote({\n  isUserTheWitness,\n  currentMonster,\n  sketches,\n  onSubmitVote,\n  user,\n  players,\n}: StepVoteProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  return (\n    <div>\n      <Title>\n        <Translate pt=\"Vote!\" en=\"Vote!\" />\n      </Title>\n      <Instruction contained>\n        {isUserTheWitness ? (\n          <Translate\n            pt={\n              <>\n                Você só ganha ponto se você escolher o desenho mais votado.\n                <br />\n                Caso você não escolha o mais votado, o jogador que você escolher ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                You only score if you choose the best sketch (the one with the most votes).\n                <br />\n                If you didn't pick the one, the player you chose gets 1 point.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                Vote no desenho que mais se aproxima do monstro.\n                <br />\n                Você não pode votar em si mesmo.\n                <br />O desenho (ou desenhos) mais votado receberá 1 ponto!\n              </>\n            }\n            en={\n              <>\n                Vote for the sketch that best represents the monster.\n                <br />\n                You cannot vote for yourself.\n                <br />\n                The sketch (or sketches) with the most votes gets 1 point.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <CanvasResizer />\n\n      <ButtonContainer>\n        {sketches.map((sketchObj) => {\n          const player = players[sketchObj.playerId];\n          return (\n            <Space direction=\"vertical\" align=\"center\" key={`sketch-for-player-${sketchObj.playerId}`}>\n              <CanvasSVG\n                key={`sketch-${sketchObj.playerId}`}\n                size={canvasSize || canvasWidth}\n                drawing={sketchObj.sketch}\n                className=\"r-sketch\"\n              />\n              <Button\n                type=\"primary\"\n                onClick={() => onSubmitVote({ vote: player.id })}\n                disabled={sketchObj.playerId === user.id}\n              >\n                <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n              </Button>\n            </Space>\n          );\n        })}\n      </ButtonContainer>\n\n      <ButtonContainer>\n        <MonsterCard currentMonster={currentMonster} />\n      </ButtonContainer>\n    </div>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser, useStep } from 'hooks';\nimport { useOnSubmitVoteAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepVote } from './StepVote';\n\nfunction PhaseEvaluation({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitVote = useOnSubmitVoteAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.EVALUATION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"choice\"\n          title={translate('Vote!', 'Vote!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={<>Vote no desenho que você acha que mais parece com o mostro meliante.</>}\n              en={<>Vote for the sketch that best represents the monster.</>}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepVote\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          onSubmitVote={onSubmitVote}\n          user={user}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseEvaluation;\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { Avatar, CanvasSVG } from 'components';\n\ntype MonsterSketchesProps = {\n  sketches: Sketch[];\n  players: Players;\n  canvasSize: number;\n  canvasWidth: number;\n};\n\nexport function MonsterSketches({ sketches, players, canvasSize, canvasWidth }: MonsterSketchesProps) {\n  return (\n    <>\n      {sketches.map((sketchObj) => {\n        const player = players[sketchObj.playerId];\n        return (\n          <Space\n            key={`monster-sketch-item-${sketchObj.playerId}`}\n            direction=\"vertical\"\n            align=\"center\"\n            className=\"r-monster-sketch\"\n          >\n            <CanvasSVG\n              key={`sketch-${sketchObj.playerId}`}\n              size={canvasSize || canvasWidth}\n              drawing={sketchObj.sketch}\n              className=\"r-sketch\"\n            />\n            <div>\n              <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n            </div>\n          </Space>\n        );\n      })}\n    </>\n  );\n}\n","// Utils\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\nimport { AvatarName, ButtonContainer, Instruction, Step, TimedButton, Title, Translate } from 'components';\nimport { MonsterCard } from './MonsterCard';\nimport { MonsterSketches } from './MonsterSketches';\n\ntype StepResultsProps = {\n  currentMonster: Monster;\n  goToNextStep: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n  mostVotes: PlayerId[];\n  witnessVote: any;\n  witness: Player | PlainObject;\n};\n\ntype Sketches = {\n  mostVotedSketches: Sketch[];\n  otherSketches: Sketch[];\n};\n\nexport function StepResults({\n  sketches,\n  players,\n  currentMonster,\n  goToNextStep,\n  mostVotes,\n  witnessVote,\n  witness,\n}: StepResultsProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize] = useGlobalState('canvasSize');\n\n  const { mostVotedSketches, otherSketches } = sketches.reduce(\n    (acc: Sketches, sketch) => {\n      if (mostVotes.includes(sketch.playerId)) {\n        acc.mostVotedSketches.push(sketch);\n      } else {\n        acc.otherSketches.push(sketch);\n      }\n      return acc;\n    },\n    {\n      mostVotedSketches: [],\n      otherSketches: [],\n    }\n  );\n\n  return (\n    <Step fullWidth>\n      <Title>\n        {mostVotes.length > 1 ? (\n          <Translate\n            pt=\"Os monstros mais votados foram...\"\n            en=\"The monsters who got the most votes were...\"\n          />\n        ) : (\n          <Translate pt=\"O mostro mais votado foi...\" en=\"The monster who got the most votes was...\" />\n        )}\n      </Title>\n\n      <Instruction contained>\n        {mostVotes.length > 1 ? (\n          <Translate pt=\"Esses jogadores ganharam 3 pontos cada.\" en=\"These players get 3 points each.\" />\n        ) : (\n          <Translate pt=\"Esse jogador ganha 3 pontos.\" en=\"This player gets 3 points.\" />\n        )}\n      </Instruction>\n\n      <div className=\"r-monster-list\">\n        <MonsterCard currentMonster={currentMonster} style={{ width: `${canvasWidth * 1.5}px` }} />\n        <MonsterSketches\n          sketches={mostVotedSketches}\n          players={players}\n          canvasSize={canvasSize}\n          canvasWidth={canvasWidth}\n        />\n      </div>\n\n      <Instruction contained>\n        {mostVotes.includes(witnessVote) ? (\n          <Translate\n            pt={\n              <>\n                A testemunha <AvatarName player={witness} /> votou no mais votado, logo, é uma testemunha\n                confiável e ganha 3 pontos também.\n              </>\n            }\n            en={\n              <>\n                The witness <AvatarName player={witness} /> voted with the group which means s(he) is a\n                credible witness and gets 3 points as well.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                A testemunha achou que o desenho de <AvatarName player={players[witnessVote]} /> foi o melhor,\n                esse jogador ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                The witness thought that <AvatarName player={players[witnessVote]} />\n                's sketch was the best, so s(he) gets 1 point.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <TimedButton label=\"Ranking\" duration={30} onExpire={goToNextStep} onClick={goToNextStep} />\n\n      <Title level={3} className=\"r-other-sketches-title\">\n        <Translate pt=\"Outros desenhos\" en=\"Other sketches\" />\n      </Title>\n\n      <ButtonContainer>\n        <MonsterSketches\n          sketches={otherSketches}\n          players={players}\n          canvasSize={canvasSize / 1.5}\n          canvasWidth={canvasWidth / 1.5}\n        />\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { AdminNextRoundButton } from 'components/admin';\nimport { Instruction, RankingBoard, Step, Title, Translate } from 'components';\n\ntype StepRankingProps = {\n  ranking: any;\n  players: Players;\n  round: GameRound;\n};\n\nexport function StepRanking({ ranking, players, round }: StepRankingProps) {\n  return (\n    <Step fullWidth>\n      <Title>Ranking</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Distribuição de pontos: Mais votado | Votou com o grupo | Votado pela testemunha\"\n          en=\"Points Distribution: Most votes | Voted with the group | Voted by the witness\"\n        />\n      </Instruction>\n\n      <RankingBoard ranking={ranking} players={players} />\n      <AdminNextRoundButton round={round} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepResults } from './StepResults';\nimport { StepRanking } from './StepRanking';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const [witness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"quality-seal\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt={<>E o mais votado é...</>} en={<>And the one who got the most votes is...</>} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          witness={witness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          mostVotes={state.mostVotes}\n          witnessVote={state.witnessVote}\n          user={user}\n          players={players}\n          goToNextStep={goToNextStep}\n        />\n\n        {/* Step 2 */}\n        <StepRanking ranking={state.ranking} players={players} round={state.round} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { GameOverWrapper, Title, Translate } from 'components';\nimport { MonsterSketches } from './MonsterSketches';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  const canvasWidth = useCardWidth(6, 16, 150, 500);\n\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\">\n      <div>\n        <Title level={2}>\n          <Translate pt=\"Desenhos\" en=\"Sketches\" />\n        </Title>\n        <div className=\"r-gallery\">\n          <MonsterSketches\n            sketches={state.gallery}\n            players={players}\n            canvasSize={canvasWidth}\n            canvasWidth={canvasWidth}\n          />\n        </div>\n      </div>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseCompositeSketch from './PhaseCompositeSketch';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionRetratoFalado({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.RETRATO_FALADO.COMPOSITE_SKETCH:\n        return PhaseCompositeSketch;\n      case PHASES.RETRATO_FALADO.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.RETRATO_FALADO.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.RETRATO_FALADO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionRetratoFalado;\n"],"names":["VIEWS","SKETCH_TIME","TIMES","MEMORY","ANNOUNCEMENT","SKETCH","EXTRA","TOTAL","MEMORY_TIME","MEMORY_MARK","ANNOUNCEMENT_TIME","ANNOUNCEMENT_MARK","SKETCH_MARK","ViewAnnouncement","isUserTheWitness","title","pt","en","unskippable","duration","type","onClose","ViewLastSeconds","remainingTime","lines","setLines","className","steps","value","total","strokeColor","contained","showControls","strokeWidth","MonsterCard","currentMonster","props","useGlobalState","monsterOrientation","setMonsterOrientation","cardWidth","useCardWidth","useEffect","orientation","baseClass","direction","align","imageId","id","clsx","onClick","RotateRightOutlined","RotateLeftOutlined","ViewSketching","remainingSketchingTime","ViewWitnessing","remainingWitnessingTime","StepTestimonial","onSubmitSketch","onSubmitOrientation","useState","view","setView","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","sketch","JSON","stringify","timer","minutes","seconds","cases","players","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","witness","request","useAPICall","apiFunction","RETRATO_FALADO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitSketchAPIRequest","useOnSubmitOrientationAPIRequest","phase","allowedPhase","PHASES","conditions","round","onPressButton","buttonText","time","circleColor","player","currentRound","current","StepVote","sketches","onSubmitVote","user","canvasWidth","Math","min","Object","keys","length","canvasSize","setCanvasSize","floor","map","sketchObj","playerId","size","drawing","vote","disabled","avatarId","name","useUser","useOnSubmitVoteAPIRequest","MonsterSketches","StepResults","mostVotes","witnessVote","reduce","acc","includes","mostVotedSketches","push","otherSketches","fullWidth","style","width","label","level","StepRanking","ranking","announcementIcon","gallery","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseCompositeSketch","PhaseEvaluation","PhaseReveal","PhaseGameOver","PageError"],"sourceRoot":""}