{"version":3,"file":"static/js/page-me.1001c6ec.chunk.js","mappings":"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","sources":["components/auth/SignIn.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","pages/Me/components/UserName.tsx","pages/Me/Me.tsx"],"sourcesContent":["import { useQuery } from 'react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image } from 'antd';\n// API\nimport { signIn } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isLoading, refetch, isError } = useQuery({\n    queryKey: 'sign-in',\n    queryFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    enabled: false,\n    onSuccess: () => {\n      onSuccess();\n    },\n  });\n\n  const onFinish = () => {\n    refetch();\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Form\n        name=\"basic\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"Email\" en=\"Email\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n            <Translate pt=\"Enviar\" en=\"Submit\" />\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || round.forceLastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong> {pluralize(left, 'rodada')} para o\n            jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level (default: 2)\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title (default: medium)\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n  /**\n   * The alignment of the text (default: center)\n   */\n  align?: 'left' | 'right' | 'center';\n};\n\nexport const Title = ({\n  children,\n  white,\n  icon,\n  className,\n  level = 2,\n  size = 'medium',\n  align = 'center',\n}: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, `title--align-${align}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import { TextHighlight } from 'components/text';\n\ntype UserNameProps = {\n  names?: string[];\n};\nexport function UserName({ names }: UserNameProps) {\n  if (!names || names.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <>\n      : <TextHighlight>{names.at(-1)}</TextHighlight>\n    </>\n  );\n}\n","import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Layout, Input, Modal } from 'antd';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Utils\n// import GAME_LIST from 'utils/info';\nimport { NOOP } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { SignIn } from 'components/auth/SignIn';\nimport { Title } from 'components/text';\nimport { UserName } from './components/UserName';\n\nfunction Me() {\n  useTitle('Me - Tarde Divertida');\n  const { isAuthenticated, currentUser } = useCurrentUserContext();\n\n  const notAuthenticated = (\n    <Modal\n      open={!isAuthenticated}\n      title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n      cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n      onCancel={NOOP}\n      okButtonProps={{\n        style: { display: 'none' },\n      }}\n      cancelButtonProps={{\n        style: { display: 'none' },\n      }}\n      closable={false}\n    >\n      <SignIn onSuccess={NOOP} />\n    </Modal>\n  );\n  return (\n    <Layout className=\"dev-layout\">\n      <Layout.Content className=\"container\" id=\"main-container\">\n        {notAuthenticated}\n\n        <Title size=\"x-small\" level={1} align=\"left\">\n          <Translate pt=\"Página do Usuário\" en=\"User Page\" /> <UserName names={currentUser.names} />\n        </Title>\n\n        <Input.TextArea\n          name=\"output\"\n          id=\"\"\n          cols={5}\n          rows={25}\n          readOnly\n          value={JSON.stringify(currentUser, null, 4)}\n        />\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default Me;\n"],"names":["SignIn","onSuccess","Form","form","translate","useLanguage","useQuery","queryKey","queryFn","signIn","getFieldValue","enabled","isLoading","refetch","isError","className","src","logo","preview","name","labelCol","span","wrapperCol","style","maxWidth","initialValues","remember","onFinish","autoComplete","label","pt","en","rules","required","message","help","offset","description","type","showIcon","htmlType","disabled","Instruction","children","white","contained","fullWidth","baseClass","clsx","RoundsLeftInstruction","round","left","total","current","forceLastRound","pluralize","TextHighlight","Title","icon","level","size","align","Boolean","UserName","names","length","at","useTitle","useCurrentUserContext","isAuthenticated","currentUser","notAuthenticated","open","title","cancelText","onCancel","NOOP","okButtonProps","display","cancelButtonProps","closable","id","cols","rows","readOnly","value","JSON","stringify"],"sourceRoot":""}