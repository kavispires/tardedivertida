{"version":3,"file":"static/js/545.3ecea577.chunk.js","mappings":"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","sources":["games/crimes-hediondos/RulesBlobs.tsx","games/crimes-hediondos/ItemCard.tsx","games/crimes-hediondos/StepItemsSelection.tsx","games/crimes-hediondos/SceneTile.tsx","../node_modules/@ant-design/icons-svg/es/asn/PlusSquareFilled.js","../node_modules/@ant-design/icons/es/icons/PlusSquareFilled.js","games/crimes-hediondos/SelectedItems.tsx","games/crimes-hediondos/StepCauseOfDeathSelection.tsx","games/crimes-hediondos/StepLocationSelection.tsx","games/crimes-hediondos/StepReviewCrime.tsx","games/crimes-hediondos/StepReasonForEvidence.tsx","games/crimes-hediondos/PhaseCrimeSelection.tsx","games/crimes-hediondos/_api-requests.ts","games/crimes-hediondos/mock.ts","../node_modules/@ant-design/icons-svg/es/asn/SafetyOutlined.js","../node_modules/@ant-design/icons/es/icons/SafetyOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/GiftOutlined.js","../node_modules/@ant-design/icons/es/icons/GiftOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/ExceptionOutlined.js","../node_modules/@ant-design/icons/es/icons/ExceptionOutlined.js","games/crimes-hediondos/Crime.tsx","games/crimes-hediondos/GroupedItemsBoard.tsx","games/crimes-hediondos/StepNewScene.tsx","games/crimes-hediondos/PhaseSceneMarking.tsx","games/crimes-hediondos/helpers.tsx","games/crimes-hediondos/PlayersCards.tsx","games/crimes-hediondos/SelectableGroupedItemsBoard.tsx","games/crimes-hediondos/StepGuessing.tsx","games/crimes-hediondos/PhaseGuessing.tsx","games/crimes-hediondos/StepReveal.tsx","games/crimes-hediondos/PhaseReveal.tsx","games/crimes-hediondos/PhaseGameOver.tsx","games/crimes-hediondos/SessionCrimesHediondos.tsx","../node_modules/@ant-design/icons-svg/es/asn/CloudUploadOutlined.js","../node_modules/@ant-design/icons/es/icons/CloudUploadOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/EnvironmentOutlined.js","../node_modules/@ant-design/icons/es/icons/EnvironmentOutlined.js"],"sourcesContent":["// Components\nimport { Instruction, Translate } from '../../components';\n\nexport function WelcomeMessage(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Bem-vindo à Convenção Anual de Serial Killers!\n            <br />\n            Você e os outros serial killers decidiram fazer um jogo de adivinhação.\n            <br />\n            O objetivo é todos darem dicas sobre as circunstâncias que seus últimos crimes aconteceram para\n            ajudar os outros jogadores a descobrirem qual arma e qual objeto foram usados durante o crime.\n            <br />\n            Prontos para aterrorizar?\n          </>\n        }\n        en={\n          <>\n            Welcome to the Annual Serial Killers Con!\n            <br />\n            You and the other serial killers decided to make it a game out of it.\n            <br />\n            The goal is to give clues about the circunstancies your latest crime occurred so the other players\n            can guess what weapon and evidence were used during the crime.\n            <br />\n            Ready to terrorize?\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GuessMessage(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Baseado nas informações dadas pelos jogadores, tente adivinhar qual arma e objeto cada jogador\n            usou em seu crime.\n            <br />\n            Você ganha pontos se adivinhar uma das cartas ou ambas as cartas, e você também ganha pontos se os\n            outros adivinharem as suas cartas.\n          </>\n        }\n        en={\n          <>\n            Based on the information given by other players, try to guess the weapon and object used on their\n            crimes.\n            <br />\n            You get points for getting one or both cards correctly, and you get points when other players get\n            yours correctly.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ScoringMessage(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Você ganha 1 ponto para cada arma ou objeto que você acertar.\n            <br />\n            Você ganha 3 pontos bônus se acertar as duas cartas de um mesmo jogador.\n            <br />\n            Para todos os seus acertos, seus respectivos autores ganham 1 ponto (ou 3 se você acertou ambos).\n            <br />\n            Mas tem um segredinho... você só vê os seus pontos.\n          </>\n        }\n        en={\n          <>\n            You get 1 point for each weapon or evidence you get correctly.\n            <br />\n            You gain 3 extra points if you got both cards correctly for the same player.\n            <br />\n            All of your correct guesses grant 1 extra point to the authors (or 3 if you got both).\n            <br />\n            But there's a secret... you only see your scoring, not others'.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GenericMessage(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Escrever msg aqui.\n            <br />\n            Prontos para aterrorizar?\n          </>\n        }\n        en={\n          <>\n            Message comes here.\n            <br />\n            Ready to terrorize?\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { Popover, Tag } from 'antd';\nimport clsx from 'clsx';\nimport { ImageCard } from '../../components';\nimport { useLanguage } from '../../hooks';\n\ntype ItemCardProps = {\n  item: HCard;\n  cardWidth: number;\n  preview?: boolean;\n  isSelected?: boolean;\n  className?: string;\n  activeColor?: string;\n};\n\nexport function ItemCard({\n  item,\n  cardWidth,\n  activeColor,\n  preview = true,\n  isSelected = false,\n  className = '',\n}: ItemCardProps) {\n  const { language } = useLanguage();\n  return (\n    <div\n      className={clsx('h-item-card', isSelected && 'h-item-card--selected', className)}\n      style={activeColor && isSelected ? { borderColor: 'black', backgroundColor: activeColor } : {}}\n    >\n      <Popover content={item.name[language].toUpperCase()}>\n        <Tag\n          className=\"h-item-card__name\"\n          color={item.type === 'weapon' ? 'geekblue' : 'volcano'}\n          style={{ maxWidth: `${cardWidth + 16}px` }}\n        >\n          <span>{item.name[language]}</span>\n        </Tag>\n      </Popover>\n      <ImageCard imageId={item.id} cardWidth={cardWidth} className=\"h-item-card__image\" preview={preview} />\n    </div>\n  );\n}\n","import { Button } from 'antd';\nimport { useState } from 'react';\nimport { ButtonContainer, Instruction, Step, Title, Translate, TransparentButton } from '../../components';\nimport { useCardWidth } from '../../hooks';\nimport { shuffle } from '../../utils/helpers';\nimport { ItemCard } from './ItemCard';\n\ntype StepItemsSelectionProps = {\n  user: GamePlayer;\n  groupedItems: GroupedItems;\n  items: ItemsDict;\n  selections: PlainObject;\n  updateSelections: GenericFunction;\n};\n\nexport function StepItemsSelection({\n  user,\n  items,\n  groupedItems,\n  selections,\n  updateSelections,\n}: StepItemsSelectionProps) {\n  const [weaponId, setWeaponId] = useState<string>(selections.weaponId);\n  const [evidenceId, setEvidenceId] = useState<string>(selections.evidenceId);\n  const cardWidth = useCardWidth(12, 8, 50, 200);\n\n  const userItems = groupedItems[user.itemGroupIndex];\n\n  const onSelectItem = (item: HCard) => {\n    if (item.type === 'weapon') {\n      setWeaponId(item.id);\n    } else {\n      setEvidenceId(item.id);\n    }\n  };\n\n  const onRandomSelect = () => {\n    let randomWeaponId = '';\n    let randomEvidenceId = '';\n    shuffle(userItems).forEach((itemId) => {\n      if (items[itemId].type === 'weapon') {\n        randomWeaponId = itemId;\n      } else {\n        randomEvidenceId = itemId;\n      }\n    });\n    setWeaponId(randomWeaponId);\n    setEvidenceId(randomEvidenceId);\n  };\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Qual foi seu último crime?\" en=\"How was your last crime?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Selecione uma arma do crime (carta azul) e um objeto (carta vermelha).\n              <br />\n              Elas representam a arma usada em seu último crime e um objeto da cena do crime.\n              <br />O jogo contém 16 armas e 16 objetos, mas para essa parte, você vê apenas 4 opções de cada.\n            </>\n          }\n          en={\n            <>\n              Select a weapon (blue card) and an object (red card).\n              <br />\n              They represent the weapon used in your latest crime and an object that was in the crime scene.\n              <br />\n              The game has 16 weapons and 16 objects, but for this phase, you only see 4 options of each.\n            </>\n          }\n        />\n      </Instruction>\n\n      <ButtonContainer>\n        <Button onClick={onRandomSelect}>\n          <Translate pt=\"Selecionar aleatoriamente\" en=\"Random picks\" />\n        </Button>\n      </ButtonContainer>\n\n      <ul className=\"h-items-selection\">\n        {userItems.map((itemId) => (\n          <li key={itemId} className=\"h-items-selection__item\">\n            <TransparentButton onClick={() => onSelectItem(items[itemId])}>\n              <ItemCard\n                item={items[itemId]}\n                cardWidth={cardWidth}\n                preview={false}\n                isSelected={[weaponId, evidenceId].includes(itemId)}\n              />\n            </TransparentButton>\n          </li>\n        ))}\n      </ul>\n\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={!weaponId || !evidenceId}\n          onClick={() => updateSelections({ weaponId, evidenceId })}\n        >\n          »»»\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { CheckCircleFilled } from '@ant-design/icons';\nimport { Button, Popover } from 'antd';\nimport clsx from 'clsx';\nimport { useLanguage } from '../../hooks';\n\ntype SceneTileProps = {\n  tile: SceneTile;\n  index?: number;\n  onSelectValue?: GenericFunction;\n};\n\nexport function SceneTile({ tile, index, onSelectValue }: SceneTileProps) {\n  const { language } = useLanguage();\n  return (\n    <div className={clsx('h-scene-tile', `h-scene-tile--${tile.type}`)}>\n      <Popover content={tile.description[language]}>\n        <h4 className=\"h-scene-tile__title\">{tile.title[language]}</h4>\n      </Popover>\n      <ul className=\"h-scene-tile__options\">\n        {tile.values.map((entry, i) => {\n          const isActive = i === index;\n          return (\n            <li key={`${tile.id}-value-${i}`}>\n              <Button\n                className={clsx('h-scene-tile__button', `h-scene-tile__button--${tile.type}`)}\n                icon={isActive ? <CheckCircleFilled className=\"h-scene-tile__icon\" /> : undefined}\n                onClick={onSelectValue ? () => onSelectValue({ tileId: tile.id, value: i }) : () => {}}\n              >\n                {entry[language]}\n              </Button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// This icon file is generated automatically.\nvar PlusSquareFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM704 536c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z\" } }] }, \"name\": \"plus-square\", \"theme\": \"filled\" };\nexport default PlusSquareFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusSquareFilledSvg from \"@ant-design/icons-svg/es/asn/PlusSquareFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlusSquareFilled = function PlusSquareFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusSquareFilledSvg\n  }));\n};\n\nPlusSquareFilled.displayName = 'PlusSquareFilled';\nexport default /*#__PURE__*/React.forwardRef(PlusSquareFilled);","import { PlusSquareFilled } from '@ant-design/icons';\nimport clsx from 'clsx';\nimport { useCardWidth } from '../../hooks';\nimport { ItemCard } from './ItemCard';\n\ntype SelectedItemsProps = {\n  items: ItemsDict;\n  weaponId: string;\n  evidenceId: string;\n  fadeWeapon?: boolean;\n  fadeEvidence?: boolean;\n};\n\nexport function SelectedItems({\n  items,\n  weaponId,\n  evidenceId,\n  fadeWeapon = false,\n  fadeEvidence = false,\n}: SelectedItemsProps) {\n  const cardWidth = useCardWidth(12, 8, 50, 200);\n\n  return (\n    <ul className=\"h-items-crime-selection\">\n      <li>\n        <ItemCard\n          item={items[weaponId]}\n          cardWidth={cardWidth}\n          preview\n          className={clsx(fadeWeapon && 'h-items-crime-selection__faded')}\n        />\n      </li>\n      <li>\n        <PlusSquareFilled style={{ color: 'white' }} />\n      </li>\n      <li>\n        <ItemCard\n          item={items[evidenceId]}\n          cardWidth={cardWidth}\n          preview\n          className={clsx(fadeEvidence && 'h-items-crime-selection__faded')}\n        />\n      </li>\n    </ul>\n  );\n}\n","import { Button } from 'antd';\nimport { useState } from 'react';\nimport { ButtonContainer, Instruction, Step, Title, Translate } from '../../components';\nimport { SceneTile } from './SceneTile';\nimport { SelectedItems } from './SelectedItems';\n\ntype StepCauseOfDeathSelectionProps = {\n  items: ItemsDict;\n  selections: PlainObject;\n  updateSelections: GenericFunction;\n  causeOfDeathTile: SceneTile;\n};\n\nexport function StepCauseOfDeathSelection({\n  items,\n  selections,\n  updateSelections,\n  causeOfDeathTile,\n}: StepCauseOfDeathSelectionProps) {\n  const [causeOfDeathIndex, setCauseOfDeathIndex] = useState<number>();\n\n  const onSelectItem = (payload: SceneTilePayload) => {\n    setCauseOfDeathIndex(payload.value);\n  };\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Qual foi seu último crime?\" en=\"How was your last crime?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>Baseado somente em sua arma do crime (carta azul), selecione a causa da morte de sua vítima.</>\n          }\n          en={<>Based solely on the weapon (blue card) you've chosen, select your victim's cause of death.</>}\n        />\n      </Instruction>\n\n      <SelectedItems\n        items={items}\n        weaponId={selections.weaponId}\n        evidenceId={selections.evidenceId}\n        fadeEvidence\n      />\n\n      <SceneTile tile={causeOfDeathTile} onSelectValue={onSelectItem} index={causeOfDeathIndex} />\n\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={causeOfDeathIndex === undefined}\n          onClick={() => updateSelections({ causeOfDeath: causeOfDeathIndex })}\n        >\n          »»»\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { Button } from 'antd';\nimport { useState } from 'react';\nimport { ButtonContainer, Instruction, Step, Title, Translate } from '../../components';\nimport { useCardWidth } from '../../hooks';\nimport { ItemCard } from './ItemCard';\nimport { SceneTile } from './SceneTile';\n\ntype StepLocationSelectionProps = {\n  user: GamePlayer;\n  items: ItemsDict;\n  selections: PlainObject;\n  updateSelections: GenericFunction;\n  locationTiles: SceneTile[];\n  groupedItems: GroupedItems;\n};\n\nexport function StepLocationSelection({\n  user,\n  items,\n  selections,\n  updateSelections,\n  locationTiles,\n  groupedItems,\n}: StepLocationSelectionProps) {\n  const cardWidth = useCardWidth(12, 8, 50, 200);\n  const [location, setLocation] = useState<PlainObject>();\n\n  const userItems = groupedItems[user.itemGroupIndex];\n\n  const onSelectItem = (payload: SceneTilePayload) => {\n    setLocation(payload);\n  };\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Onde foi o crime?\" en=\"Where was the crime?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado em qualquer uma das suas cartas (ou ambas), selecione o local onde o crime aconteceu.\n              Lembre-se que você está tentando ajudar os outros jogadores adivinhar o seu crime, seja\n              inteligente!\n            </>\n          }\n          en={\n            <>\n              Based on any card (or both), select where the crime occurred. Remember you are trying to help\n              the players guess your crime, so be smart!\n            </>\n          }\n        />\n      </Instruction>\n\n      <ul className=\"h-items-selection\">\n        {userItems.map((itemId) => (\n          <li key={itemId} className=\"h-items-selection__item\">\n            <ItemCard\n              item={items[itemId]}\n              cardWidth={cardWidth}\n              preview={false}\n              isSelected={[selections.weaponId, selections.evidenceId].includes(itemId)}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"h-scene-tiles-list\">\n        {locationTiles.map((tile) => (\n          <SceneTile\n            key={tile.id}\n            tile={tile}\n            onSelectValue={onSelectItem}\n            index={location?.tileId === tile.id ? location?.value : undefined}\n          />\n        ))}\n      </div>\n\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={location?.tileId === undefined}\n          onClick={() => updateSelections({ locationTile: location?.tileId, locationIndex: location?.value })}\n        >\n          »»»\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { CloudUploadOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { ButtonContainer, Instruction, ReadyPlayersBar, Step, Title, Translate } from '../../components';\nimport { useLanguage } from '../../hooks';\nimport { SceneTile } from './SceneTile';\nimport { SelectedItems } from './SelectedItems';\n\ntype StepReviewCrimeProps = {\n  items: ItemsDict;\n  selections: PlainObject;\n  onSubmitCrime: GenericFunction;\n  locationTiles: SceneTile[];\n  causeOfDeathTile: SceneTile;\n  reasonForEvidenceTile: SceneTile;\n  updateSelection: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepReviewCrime({\n  items,\n  causeOfDeathTile,\n  reasonForEvidenceTile,\n  locationTiles,\n  selections,\n  onSubmitCrime,\n  updateSelection,\n  players,\n}: StepReviewCrimeProps) {\n  const { translate } = useLanguage();\n\n  const locationTile = locationTiles.find((location) => location.id === selections.locationTile);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Seu crime tá bom?\" en=\"Is your crime alright?\" />\n      </Title>\n      <Instruction contained>\n        <Translate pt={<>Revise seu crime.</>} en={<>Recap your crime.</>} />\n      </Instruction>\n\n      <SelectedItems items={items} weaponId={selections.weaponId} evidenceId={selections.evidenceId} />\n\n      <div className=\"h-scene-tiles-list\">\n        <SceneTile\n          tile={causeOfDeathTile}\n          index={selections.causeOfDeath}\n          onSelectValue={(payload) => updateSelection({ causeOfDeath: payload.value })}\n        />\n        <SceneTile\n          tile={reasonForEvidenceTile}\n          index={selections.reasonForEvidence}\n          onSelectValue={(payload) => updateSelection({ reasonForEvidence: payload.value })}\n        />\n        <SceneTile\n          tile={locationTile!}\n          index={selections.locationIndex}\n          onSelectValue={(payload) =>\n            updateSelection({ locationTile: payload.tileId, locationIndex: payload.value })\n          }\n        />\n      </div>\n\n      <ButtonContainer>\n        <Button type=\"primary\" size=\"large\" onClick={onSubmitCrime} icon={<CloudUploadOutlined />}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </ButtonContainer>\n\n      <ReadyPlayersBar\n        players={players}\n        readyText={translate('Já cometi meu crime', \"I'm done committing my crime\")}\n        readyTextPlural={translate('Já cometemos nossos crimes', \"We're done committing our crimes\")}\n      />\n    </Step>\n  );\n}\n","import { Button } from 'antd';\nimport { useState } from 'react';\nimport { ButtonContainer, Instruction, Step, Title, Translate } from '../../components';\nimport { SceneTile } from './SceneTile';\nimport { SelectedItems } from './SelectedItems';\n\ntype StepReasonForEvidenceProps = {\n  items: ItemsDict;\n  selections: PlainObject;\n  updateSelections: GenericFunction;\n  reasonForEvidenceTile: SceneTile;\n};\n\nexport function StepReasonForEvidence({\n  items,\n  selections,\n  updateSelections,\n  reasonForEvidenceTile,\n}: StepReasonForEvidenceProps) {\n  const [reasonForEvidenceIndex, setReasonForEvidenceIndex] = useState<number>();\n\n  const onSelectItem = (payload: SceneTilePayload) => {\n    setReasonForEvidenceIndex(payload.value);\n  };\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Qual foi seu último crime?\" en=\"How was your last crime?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado somente em seu objeto (carta vermelha), selecione o que o objeto significa para o crime.\n            </>\n          }\n          en={\n            <>Based solely on the object (red card) you've chosen, select the meaning of it to the crime.</>\n          }\n        />\n      </Instruction>\n\n      <SelectedItems\n        items={items}\n        weaponId={selections.weaponId}\n        evidenceId={selections.evidenceId}\n        fadeWeapon\n      />\n\n      <SceneTile tile={reasonForEvidenceTile} onSelectValue={onSelectItem} index={reasonForEvidenceIndex} />\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={reasonForEvidenceIndex === undefined}\n          onClick={() => updateSelections({ reasonForEvidence: reasonForEvidenceIndex })}\n        >\n          »»»\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useMock } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from '../../components';\nimport { WelcomeMessage } from './RulesBlobs';\nimport { StepItemsSelection } from './StepItemsSelection';\nimport { StepCauseOfDeathSelection } from './StepCauseOfDeathSelection';\nimport { StepLocationSelection } from './StepLocationSelection';\nimport { StepReviewCrime } from './StepReviewCrime';\nimport { StepReasonForEvidence } from './StepReasonForEvidence';\nimport { useOnSubmitCrimeAPIRequest } from './_api-requests';\nimport { mockCrime } from './mock';\n\nfunction PhaseCrimeSelection({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n  const [selections, setSelections] = useState<SubmitCrimePayload>({});\n\n  const onSubmitCrimeRequest = useOnSubmitCrimeAPIRequest(setStep);\n\n  const onSubmitCrime = () => {\n    onSubmitCrimeRequest(selections);\n  };\n\n  const increaseStep = () => setStep((s: number) => ++s);\n\n  const updateSelections = (payload: PlainObject) => {\n    setSelections((s: SubmitCrimePayload) => ({ ...s, ...payload }));\n    increaseStep();\n  };\n\n  const updateSelection = (payload: PlainObject) => {\n    setSelections((s: SubmitCrimePayload) => ({ ...s, ...payload }));\n  };\n\n  useMock(() => {\n    if (step === 1) {\n      onSubmitCrimeRequest(mockCrime(state.groupedItems[user.itemGroupIndex]));\n    }\n  }, [step]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRIMES_HEDIONDOS.CRIME_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={increaseStep}\n          buttonText=\" \"\n          time={5}\n          circleColor=\"black\"\n        />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"event\"\n          title={translate('A Convenção', 'The Convention')}\n          onClose={increaseStep}\n          currentRound={state?.round?.current}\n          duration={30}\n        >\n          <WelcomeMessage />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepItemsSelection\n          user={user}\n          groupedItems={state.groupedItems}\n          items={state.items}\n          selections={selections}\n          updateSelections={updateSelections}\n        />\n\n        {/* Step 3 */}\n        <PhaseAnnouncement\n          type=\"skull\"\n          title={translate('Causa da Morte', 'Cause of Death')}\n          onClose={increaseStep}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Como a vítima morreu?\" en=\"How did the victim die?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 4 */}\n        <StepCauseOfDeathSelection\n          items={state.items}\n          causeOfDeathTile={state.causeOfDeathTile}\n          selections={selections}\n          updateSelections={updateSelections}\n        />\n\n        {/* Step 5 */}\n        <PhaseAnnouncement\n          type=\"crime-scene\"\n          title={translate('Evidências?', 'Evidence?')}\n          onClose={increaseStep}\n          duration={5}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Conte-nos sobre o objeto que você escolheu.\"\n              en=\"Tell us about the object you selected.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 6 */}\n        <StepReasonForEvidence\n          items={state.items}\n          reasonForEvidenceTile={state.reasonForEvidenceTile}\n          selections={selections}\n          updateSelections={updateSelections}\n        />\n\n        {/* Step 7 */}\n        <PhaseAnnouncement\n          type=\"location\"\n          title={translate('Local do Crime', 'Crime Location')}\n          onClose={increaseStep}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Onde que foi?\" en=\"Where was it?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 8 */}\n        <StepLocationSelection\n          user={user}\n          items={state.items}\n          groupedItems={state.groupedItems}\n          locationTiles={state.locationTiles}\n          selections={selections}\n          updateSelections={updateSelections}\n        />\n\n        {/* Step 9 */}\n        <PhaseAnnouncement\n          type=\"crime-tape\"\n          title={translate('Revisão', 'Review')}\n          onClose={increaseStep}\n          duration={5}\n        ></PhaseAnnouncement>\n\n        {/* Step 10 */}\n        <StepReviewCrime\n          items={state.items}\n          causeOfDeathTile={state.causeOfDeathTile}\n          reasonForEvidenceTile={state.reasonForEvidenceTile}\n          locationTiles={state.locationTiles}\n          selections={selections}\n          onSubmitCrime={onSubmitCrime}\n          updateSelection={updateSelection}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCrimeSelection;\n","import { CRIMES_HEDIONDOS_API } from '../../adapters';\nimport { useAPICall, useLanguage } from '../../hooks';\n\nexport function useOnSubmitCrimeAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRIMES_HEDIONDOS_API.submitAction,\n    actionName: 'submit-crime',\n    onBeforeCall: () => setStep(11),\n    onError: () => setStep(9),\n    successMessage: translate('Crime enviado com sucesso', 'Crime submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu crime',\n      'Oops, the application failed to send your crime'\n    ),\n  });\n\n  return (payload: SubmitCrimePayload) => {\n    request({\n      action: 'SUBMIT_CRIME',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitMarkAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRIMES_HEDIONDOS_API.submitAction,\n    actionName: 'submit-mark',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate(\n      'Nova informação enviadas com sucesso',\n      'New information submitted successfully'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar a nova informação',\n      'Oops, the application failed to send the new information'\n    ),\n  });\n\n  return (payload: SubmitMarkPayload) => {\n    request({\n      action: 'SUBMIT_MARK',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRIMES_HEDIONDOS_API.submitAction,\n    actionName: 'submit-guesses',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Respostas enviadas com sucesso', 'Guesses submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas respostas',\n      'Oops, the application failed to send your guesses'\n    ),\n  });\n\n  return (payload: SubmitGuessesPayload) => {\n    request({\n      action: 'SUBMIT_GUESSES',\n      ...payload,\n    });\n  };\n}\n","import { getRandomItem, shuffle } from '../../utils/helpers';\n\nexport const mockCrime = (itemsGroup: string[]): SubmitCrimePayload => {\n  const shuffledItems = shuffle(itemsGroup);\n  const weapon = shuffledItems.find((e) => e?.includes('wp'));\n  const evidence = shuffledItems.find((e) => e?.includes('ev'));\n  const locationTileId = `location-tile-${getRandomItem([1, 2, 3, 4])}`;\n  const options = [0, 1, 2, 3, 4, 5];\n\n  return {\n    weaponId: weapon,\n    evidenceId: evidence,\n    causeOfDeath: getRandomItem(options),\n    reasonForEvidence: getRandomItem(options),\n    locationTile: locationTileId,\n    locationIndex: getRandomItem(options),\n  };\n};\n\nexport const mockGuesses = (weapons: HCard[], evidences: HCard[], players: GamePlayers, user: GamePlayer) => {\n  const shuffledWeapons = shuffle(weapons);\n  const shuffledEvidences = shuffle(evidences);\n  return Object.values(players).reduce((acc: any, player, index) => {\n    if (player.id !== user.id) {\n      acc[player.id] = {\n        weaponId: shuffledWeapons[index].id,\n        evidenceId: shuffledEvidences[index].id,\n        isComplete: true,\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const mockSceneMark = () => {\n  return getRandomItem([0, 1, 2, 3, 4, 5]);\n};\n","// This icon file is generated automatically.\nvar SafetyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64L128 192v384c0 212.1 171.9 384 384 384s384-171.9 384-384V192L512 64zm312 512c0 172.3-139.7 312-312 312S200 748.3 200 576V246l312-110 312 110v330z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M378.4 475.1a35.91 35.91 0 00-50.9 0 35.91 35.91 0 000 50.9l129.4 129.4 2.1 2.1a33.98 33.98 0 0048.1 0L730.6 434a33.98 33.98 0 000-48.1l-2.8-2.8a33.98 33.98 0 00-48.1 0L483 579.7 378.4 475.1z\" } }] }, \"name\": \"safety\", \"theme\": \"outlined\" };\nexport default SafetyOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SafetyOutlinedSvg from \"@ant-design/icons-svg/es/asn/SafetyOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SafetyOutlined = function SafetyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: SafetyOutlinedSvg\n  }));\n};\n\nSafetyOutlined.displayName = 'SafetyOutlined';\nexport default /*#__PURE__*/React.forwardRef(SafetyOutlined);","// This icon file is generated automatically.\nvar GiftOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M880 310H732.4c13.6-21.4 21.6-46.8 21.6-74 0-76.1-61.9-138-138-138-41.4 0-78.7 18.4-104 47.4-25.3-29-62.6-47.4-104-47.4-76.1 0-138 61.9-138 138 0 27.2 7.9 52.6 21.6 74H144c-17.7 0-32 14.3-32 32v200c0 4.4 3.6 8 8 8h40v344c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V550h40c4.4 0 8-3.6 8-8V342c0-17.7-14.3-32-32-32zm-334-74c0-38.6 31.4-70 70-70s70 31.4 70 70-31.4 70-70 70h-70v-70zm-138-70c38.6 0 70 31.4 70 70v70h-70c-38.6 0-70-31.4-70-70s31.4-70 70-70zM180 482V378h298v104H180zm48 68h250v308H228V550zm568 308H546V550h250v308zm48-376H546V378h298v104z\" } }] }, \"name\": \"gift\", \"theme\": \"outlined\" };\nexport default GiftOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport GiftOutlinedSvg from \"@ant-design/icons-svg/es/asn/GiftOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar GiftOutlined = function GiftOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: GiftOutlinedSvg\n  }));\n};\n\nGiftOutlined.displayName = 'GiftOutlined';\nexport default /*#__PURE__*/React.forwardRef(GiftOutlined);","// This icon file is generated automatically.\nvar ExceptionOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M688 312v-48c0-4.4-3.6-8-8-8H296c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h384c4.4 0 8-3.6 8-8zm-392 88c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h184c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H296zm376 116c-119.3 0-216 96.7-216 216s96.7 216 216 216 216-96.7 216-216-96.7-216-216-216zm107.5 323.5C750.8 868.2 712.6 884 672 884s-78.8-15.8-107.5-44.5C535.8 810.8 520 772.6 520 732s15.8-78.8 44.5-107.5C593.2 595.8 631.4 580 672 580s78.8 15.8 107.5 44.5C808.2 653.2 824 691.4 824 732s-15.8 78.8-44.5 107.5zM640 812a32 32 0 1064 0 32 32 0 10-64 0zm12-64h40c4.4 0 8-3.6 8-8V628c0-4.4-3.6-8-8-8h-40c-4.4 0-8 3.6-8 8v112c0 4.4 3.6 8 8 8zM440 852H208V148h560v344c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V108c0-17.7-14.3-32-32-32H168c-17.7 0-32 14.3-32 32v784c0 17.7 14.3 32 32 32h272c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"exception\", \"theme\": \"outlined\" };\nexport default ExceptionOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ExceptionOutlinedSvg from \"@ant-design/icons-svg/es/asn/ExceptionOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ExceptionOutlined = function ExceptionOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ExceptionOutlinedSvg\n  }));\n};\n\nExceptionOutlined.displayName = 'ExceptionOutlined';\nexport default /*#__PURE__*/React.forwardRef(ExceptionOutlined);","import {\n  CheckCircleFilled,\n  EnvironmentOutlined,\n  ExceptionOutlined,\n  GiftOutlined,\n  SafetyOutlined,\n} from '@ant-design/icons';\nimport clsx from 'clsx';\nimport { Avatar } from '../../components';\nimport { useLanguage } from '../../hooks';\nimport { getAvatarColorById } from '../../utils/helpers';\nimport { ItemCard } from './ItemCard';\n\ntype CrimeProps = {\n  user: GamePlayer;\n  crime: Crime;\n  items: ItemsDict;\n  players: GamePlayers;\n  scenes: ScenesDict;\n  scenesOrder: string[];\n  selections: Guess;\n  weapons: HCard[];\n  evidences: HCard[];\n};\n\nexport function Crime({ crime, players, scenesOrder, scenes, selections, user, items }: CrimeProps) {\n  const player = players[crime.playerId];\n\n  return (\n    <div className=\"h-crime\">\n      <div className=\"h-crime__player\" style={{ backgroundColor: getAvatarColorById(player.avatarId) }}>\n        <span className=\"h-crime__player-avatar\">\n          <Avatar id={player.avatarId} />\n        </span>\n        <span className=\"h-crime__player-name\">{player.name}</span>\n      </div>\n\n      <div className=\"h-crime__scenes\">\n        {scenesOrder\n          .filter((sceneId) => crime.scenes[sceneId] !== undefined)\n          .map((sceneId) => {\n            const scene = scenes[sceneId];\n\n            return (\n              <CrimeScene\n                key={`crime-scene-${sceneId}-by-${crime.playerId}`}\n                scene={scene}\n                playerIndex={crime.scenes[sceneId]}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"h-crime-selections\">\n        <ItemCard item={items[selections?.weaponId ?? user.weaponId]} cardWidth={100} preview />\n\n        <ItemCard item={items[selections?.evidenceId ?? user.evidenceId]} cardWidth={100} preview />\n      </div>\n\n      <div\n        className=\"h-crime__player\"\n        style={{ backgroundColor: selections?.isComplete ? getAvatarColorById(player.avatarId) : undefined }}\n      >\n        {selections?.isComplete && <CheckCircleFilled />}\n      </div>\n    </div>\n  );\n}\n\ntype CrimeSceneProps = {\n  scene: SceneTile;\n  playerIndex: number;\n};\n\nfunction CrimeScene({ scene, playerIndex }: CrimeSceneProps) {\n  const { language } = useLanguage();\n  return (\n    <li className={clsx('h-crime-scene', `h-crime-scene--${scene.type}`)}>\n      <div className={clsx('h-crime-scene__label', `h-crime-scene__label--${scene.type}`)}>\n        <CrimeSceneIcon type={scene.type} /> {scene.title[language]}\n      </div>\n      <div className=\"h-crime-scene__value\">{scene.values[playerIndex][language]}</div>\n    </li>\n  );\n}\n\ntype CrimeSceneIconProps = {\n  type: string;\n};\n\nfunction CrimeSceneIcon({ type }: CrimeSceneIconProps) {\n  switch (type) {\n    case 'cause':\n      return <SafetyOutlined />;\n    case 'evidence':\n      return <GiftOutlined />;\n    case 'location':\n      return <EnvironmentOutlined />;\n    default:\n      return <ExceptionOutlined />;\n  }\n}\n","import { useCardWidth } from '../../hooks';\nimport { ItemCard } from './ItemCard';\n\ntype GroupedItemsBoardProps = {\n  groupedItems: GroupedItems;\n  items: ItemsDict;\n  weaponId?: string;\n  evidenceId?: string;\n};\n\nexport function GroupedItemsBoard({ items, weaponId, evidenceId, groupedItems }: GroupedItemsBoardProps) {\n  const cardWidth = useCardWidth(12, 8, 30, 200);\n  return (\n    <ul className=\"h-grouped-items-board\">\n      {Object.values(groupedItems).map((group, index) => (\n        <li key={`group-${index}`}>\n          <ul className=\"h-grouped-items-board__group\">\n            {group.map((itemId) => (\n              <li key={itemId}>\n                <ItemCard\n                  item={items[itemId]}\n                  cardWidth={cardWidth}\n                  isSelected={[weaponId, evidenceId].includes(itemId)}\n                />\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { Button, Collapse } from 'antd';\nimport { useState } from 'react';\nimport { ButtonContainer, Instruction, Step, Title, Translate } from '../../components';\nimport { Crime } from './Crime';\nimport { GroupedItemsBoard } from './GroupedItemsBoard';\nimport { SceneTile } from './SceneTile';\n\ntype StepNewSceneProps = {\n  user: GamePlayer;\n  items: ItemsDict;\n  groupedItems: GroupedItems;\n  onSubmitMark: GenericFunction;\n  sceneTile: SceneTile;\n  crimes: Crime[];\n  scenes: ScenesDict;\n  scenesOrder: string[];\n  players: GamePlayers;\n};\n\nexport function StepNewScene({\n  user,\n  items,\n  groupedItems,\n  onSubmitMark,\n  sceneTile,\n  crimes,\n  players,\n  scenes,\n  scenesOrder,\n}: StepNewSceneProps) {\n  const [sceneMarkIndex, setSceneMarkIndex] = useState<number>();\n\n  const onSelectItem = (payload: SceneTilePayload) => {\n    setSceneMarkIndex(payload.value);\n  };\n\n  const itemsList = Object.values(items);\n  const crime = crimes.find((crime) => crime.playerId === user.id);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Dê mais detalhes do crime\" en=\"Give us more details\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado em suas cartas, selecione uma opção na nova carta de detalhes da Cena do Crime abaixo.\n            </>\n          }\n          en={<>Based on your cards, select an option in the new Scene card below.</>}\n        />\n      </Instruction>\n\n      <Collapse>\n        <Collapse.Panel\n          key=\"weapons-evidences\"\n          header={<Translate pt=\"Ver todas Armas e Evidências\" en=\"See all Weapons and Evidence\" />}\n        >\n          <GroupedItemsBoard\n            groupedItems={groupedItems}\n            items={items}\n            weaponId={user.weaponId}\n            evidenceId={user.evidenceId}\n          />\n        </Collapse.Panel>\n      </Collapse>\n\n      <div className=\"\">\n        <Crime\n          key={`crime-by-${crime!.playerId}`}\n          user={user}\n          items={items}\n          crime={crime!}\n          players={players}\n          scenes={scenes}\n          scenesOrder={scenesOrder}\n          weapons={itemsList}\n          evidences={itemsList}\n          selections={{\n            weaponId: crime!.weaponId,\n            evidenceId: crime!.evidenceId,\n            isComplete: true,\n          }}\n        />\n      </div>\n\n      <SceneTile tile={sceneTile} onSelectValue={onSelectItem} index={sceneMarkIndex} />\n\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={sceneMarkIndex === undefined}\n          onClick={() => onSubmitMark({ sceneIndex: sceneMarkIndex })}\n        >\n          <Translate pt=\"Enviar\" en=\"Send\" />\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useMock } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from '../../components';\nimport { StepNewScene } from './StepNewScene';\nimport { useOnSubmitMarkAPIRequest } from './_api-requests';\nimport { mockSceneMark } from './mock';\n\nfunction PhaseSceneMarking({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitMark = useOnSubmitMarkAPIRequest(setStep);\n\n  const increaseStep = () => setStep((s: number) => ++s);\n\n  useMock(() => {\n    onSubmitMark({ sceneIndex: mockSceneMark() });\n  }, []);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRIMES_HEDIONDOS.SCENE_MARKING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={increaseStep} buttonText=\" \" time={5} />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"loupe\"\n          title={translate('Nova pista', 'New clue')}\n          onClose={increaseStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              en=\"Compartilhe mais uma pista sobre seu crime:\"\n              pt=\"Share one more piece of information about your crime:\"\n            />\n            <br />\n            {state.currentScene.description[language]}\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepNewScene\n          user={user}\n          groupedItems={state.groupedItems}\n          items={state.items}\n          onSubmitMark={onSubmitMark}\n          sceneTile={state.currentScene}\n          scenes={state.scenes}\n          scenesOrder={state.scenesOrder}\n          crimes={state.crimes}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseSceneMarking;\n","import { orderBy } from 'lodash';\n\ntype SplitWeaponsAndEvidence = {\n  weapons: HCard[];\n  evidences: HCard[];\n};\nexport const splitWeaponsAndEvidence = (items: ItemsDict, language: Language): SplitWeaponsAndEvidence => {\n  const { weapons, evidences } = Object.values(items).reduce(\n    (acc: PlainObject, item) => {\n      if (item.type === 'weapon') {\n        acc.weapons.push(item);\n      } else {\n        acc.evidences.push(item);\n      }\n      return acc;\n    },\n    {\n      weapons: [],\n      evidences: [],\n    }\n  );\n\n  const sortedWeapons = orderBy(weapons, [`name.${language}`], ['asc']);\n  const sortedEvidences = orderBy(evidences, [`name.${language}`], ['asc']);\n\n  return {\n    weapons: sortedWeapons,\n    evidences: sortedEvidences,\n  };\n};\n","import { orderBy } from 'lodash';\nimport { AvatarCard, AvatarIcon, TransparentButton } from '../../components';\n\ntype PlayersCardsProps = {\n  activePlayerId: PlayerId;\n  setActivePlayerId: GenericFunction;\n  guesses: PlainObject;\n  players: GamePlayers;\n  user: GamePlayer;\n};\n\nexport function PlayersCards({\n  activePlayerId,\n  setActivePlayerId,\n  players,\n  guesses,\n  user,\n}: PlayersCardsProps) {\n  return (\n    <ul className=\"h-players-cards\">\n      {orderBy(Object.values(players), ['name']).map((player) => {\n        const isActive = activePlayerId === player.id;\n        const isComplete = user.id === player.id || Boolean(guesses[player.id]?.isComplete);\n        return (\n          <li key={`player-card-${player.id}`}>\n            <TransparentButton onClick={() => setActivePlayerId(player.id)} active={isActive}>\n              <AvatarCard\n                size=\"small\"\n                player={player}\n                withName\n                replacementAvatar={\n                  isComplete && <AvatarIcon type=\"knife\" className=\"h-players-cards__seal\" />\n                }\n              />\n            </TransparentButton>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { TransparentButton } from '../../components';\nimport { useCardWidth } from '../../hooks';\nimport { ItemCard } from './ItemCard';\n\ntype SelectableGroupedItemsBoardProps = {\n  groupedItems: GroupedItems;\n  items: ItemsDict;\n  weaponId?: string;\n  evidenceId?: string;\n  onSelectItem: GenericFunction;\n  activeColor?: string;\n};\n\nexport function SelectableGroupedItemsBoard({\n  items,\n  weaponId,\n  evidenceId,\n  groupedItems,\n  onSelectItem,\n  activeColor,\n}: SelectableGroupedItemsBoardProps) {\n  const cardWidth = useCardWidth(12, 8, 30, 200);\n  return (\n    <ul className=\"h-grouped-items-board\">\n      {Object.values(groupedItems).map((group, index) => (\n        <li key={`group-${index}`}>\n          <ul\n            className=\"h-grouped-items-board__group\"\n            style={Boolean(activeColor) ? { borderColor: activeColor } : {}}\n          >\n            {group.map((itemId) => (\n              <li key={itemId}>\n                <TransparentButton onClick={() => onSelectItem(itemId)}>\n                  <ItemCard\n                    item={items[itemId]}\n                    cardWidth={cardWidth}\n                    isSelected={[weaponId, evidenceId].includes(itemId)}\n                    preview={false}\n                    activeColor={activeColor}\n                  />\n                </TransparentButton>\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { Button } from 'antd';\nimport { useMemo, useState } from 'react';\nimport {\n  ButtonContainer,\n  FloatingHand,\n  Instruction,\n  ReadyPlayersBar,\n  Step,\n  Title,\n  Translate,\n} from '../../components';\nimport { useLanguage, useMock } from '../../hooks';\nimport { getAvatarColorById } from '../../utils/helpers';\nimport { Crime } from './Crime';\nimport { GroupedItemsBoard } from './GroupedItemsBoard';\nimport { splitWeaponsAndEvidence } from './helpers';\nimport { mockGuesses } from './mock';\nimport { PlayersCards } from './PlayersCards';\nimport { SelectableGroupedItemsBoard } from './SelectableGroupedItemsBoard';\n\ntype StepGuessingProps = {\n  user: GamePlayer;\n  players: GamePlayers;\n  items: ItemsDict;\n  groupedItems: GroupedItems;\n  scenes: ScenesDict;\n  scenesOrder: string[];\n  crimes: Crime[];\n  onSubmitGuesses: GenericFunction;\n};\n\nexport function StepGuessing({\n  user,\n  groupedItems,\n  items,\n  players,\n  scenes,\n  scenesOrder,\n  crimes,\n  onSubmitGuesses,\n}: StepGuessingProps) {\n  const { language } = useLanguage();\n  const [guesses, setGuesses] = useState<PlainObject>({});\n  const [activePlayerId, setActivePlayerId] = useState<string>('');\n\n  const onUpdateGuesses = (itemId: string) => {\n    if (activePlayerId && itemId) {\n      const guessObj = {\n        ...(guesses[activePlayerId] ?? {\n          weaponId: undefined,\n          evidenceId: undefined,\n          isComplete: false,\n        }),\n      };\n\n      const isWeapon = itemId.includes('wp');\n\n      if (isWeapon) {\n        guessObj.weaponId = itemId;\n      } else {\n        guessObj.evidenceId = itemId;\n      }\n\n      setGuesses((s: PlainObject) => ({\n        ...s,\n        [activePlayerId]: {\n          ...guessObj,\n          isComplete: Boolean(guessObj?.weaponId && guessObj?.evidenceId),\n        },\n      }));\n    }\n  };\n\n  const { weapons, evidences } = useMemo(() => splitWeaponsAndEvidence(items, language), [items, language]);\n\n  const playerCount = Object.keys(players).length;\n  const isAllComplete =\n    Object.values(guesses).length === playerCount - 1 &&\n    Object.values(guesses).every((guess) => guess.isComplete);\n\n  // DEV: Auto guesses\n  useMock(() => {\n    setGuesses(mockGuesses(weapons, evidences, players, user));\n  }, []);\n\n  const activeCrime = crimes.find((crime) => crime.playerId === activePlayerId);\n\n  const activePlayerGuesses = guesses?.[activePlayerId] ?? {};\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Quais foram os crimes?\" en=\"What were the crimes?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Para cada crime, selecione as respostas que você acha correta.\n              <br />\n              Cada jogador tem o seu par de arma e objeto.\n            </>\n          }\n          en={\n            <>\n              For each crime, select the answer you think best matches the clues.\n              <br />\n              Each player has their weapon and object.\n            </>\n          }\n        />\n      </Instruction>\n\n      <PlayersCards\n        user={user}\n        activePlayerId={activePlayerId}\n        setActivePlayerId={setActivePlayerId}\n        players={players}\n        guesses={guesses}\n      />\n\n      {isAllComplete && (\n        <ButtonContainer>\n          <Button\n            size=\"large\"\n            type=\"primary\"\n            disabled={!isAllComplete}\n            onClick={() => onSubmitGuesses({ guesses })}\n          >\n            <Translate pt=\"Enviar Respostas\" en=\"Send Guesses\" />\n          </Button>\n        </ButtonContainer>\n      )}\n\n      <SelectableGroupedItemsBoard\n        items={items}\n        weaponId={activePlayerGuesses.weaponId}\n        evidenceId={activePlayerGuesses.evidenceId}\n        groupedItems={groupedItems}\n        onSelectItem={onUpdateGuesses}\n        activeColor={getAvatarColorById(players[activePlayerId]?.avatarId)}\n      />\n\n      <ReadyPlayersBar players={players} />\n\n      {activeCrime && (\n        <FloatingHand type=\"stats\">\n          <Crime\n            key={`crime-by-${activeCrime.playerId}`}\n            user={user}\n            crime={activeCrime}\n            players={players}\n            scenes={scenes}\n            scenesOrder={scenesOrder}\n            items={items}\n            weapons={weapons}\n            evidences={evidences}\n            selections={activePlayerGuesses}\n            // onUpdateGuesses={onUpdateGuesses}\n          />\n        </FloatingHand>\n      )}\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from '../../components';\nimport { GuessMessage } from './RulesBlobs';\nimport { StepGuessing } from './StepGuessing';\nimport { useOnSubmitGuessesAPIRequest } from './_api-requests';\n\nfunction PhaseGuessing({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitGuesses = useOnSubmitGuessesAPIRequest(setStep);\n\n  const increaseStep = () => setStep((s: number) => ++s);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRIMES_HEDIONDOS.GUESSING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"guess\"\n          title={translate('Tente Adivinhar', 'Try to guess')}\n          onClose={increaseStep}\n          currentRound={state?.round?.current}\n        >\n          <GuessMessage />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGuessing\n          user={user}\n          groupedItems={state.groupedItems}\n          items={state.items}\n          players={players}\n          scenes={state.scenes}\n          scenesOrder={state.scenesOrder}\n          crimes={state.crimes}\n          onSubmitGuesses={onSubmitGuesses}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGuessing;\n","import { CheckSquareFilled, CloseSquareFilled } from '@ant-design/icons';\nimport { Collapse, Table } from 'antd';\nimport { useMemo } from 'react';\nimport {\n  AvatarName,\n  ButtonContainer,\n  Instruction,\n  PopoverRule,\n  Step,\n  TimedButton,\n  Title,\n  Translate,\n} from '../../components';\nimport { useLanguage } from '../../hooks';\nimport { Crime } from './Crime';\nimport { GroupedItemsBoard } from './GroupedItemsBoard';\nimport { splitWeaponsAndEvidence } from './helpers';\nimport { ScoringMessage } from './RulesBlobs';\n\ntype StepRevealProps = {\n  user: GamePlayer;\n  players: GamePlayers;\n  items: ItemsDict;\n  groupedItems: GroupedItems;\n  scenes: ScenesDict;\n  scenesOrder: string[];\n  crimes: Crime[];\n  onSeeRanking: GenericFunction;\n};\n\nexport function StepReveal({\n  user,\n  groupedItems,\n  items,\n  players,\n  scenes,\n  scenesOrder,\n  crimes,\n  onSeeRanking,\n}: StepRevealProps) {\n  const { language, translate } = useLanguage();\n\n  const { weapons, evidences } = useMemo(() => splitWeaponsAndEvidence(items, language), [items, language]);\n\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <PopoverRule content={<ScoringMessage />} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Se você acertou ambos, a gente te fala. Se você acertou so um ou outro... faça a matemática aí\n              com os pontos.\n              <br />\n              Você acertou {user.correctCrimes} pares e conseguiu um total de {user.secretScore} pontos.\n            </>\n          }\n          en={\n            <>\n              For each crime below, select the answer you think best matches the clues.\n              <br />\n              Each player has their weapon and object.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Collapse>\n        <Collapse.Panel\n          key=\"weapons-evidences\"\n          header={<Translate pt=\" Ver todas Armas e Evidências\" en=\"See all Weapons and Evidence\" />}\n        >\n          <GroupedItemsBoard\n            items={items}\n            weaponId={user.weaponId}\n            evidenceId={user.evidenceId}\n            groupedItems={groupedItems}\n          />\n        </Collapse.Panel>\n      </Collapse>\n\n      <ul>\n        {crimes.map((crime) => (\n          <Crime\n            key={`crime-by-${crime.playerId}`}\n            user={user}\n            crime={crime}\n            items={items}\n            players={players}\n            scenes={scenes}\n            scenesOrder={scenesOrder}\n            selections={user.guesses[crime.playerId]}\n            weapons={weapons}\n            evidences={evidences}\n          />\n        ))}\n      </ul>\n\n      <ButtonContainer>\n        <TimedButton\n          onClick={onSeeRanking}\n          onExpire={onSeeRanking}\n          duration={45}\n          label={<Translate en=\"Ver Ranking\" pt=\"See Ranking\" />}\n        />\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  AdminNextRoundButton,\n  ButtonContainer,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RankingBoard,\n  Step,\n  StepSwitcher,\n  Title,\n  Translate,\n} from '../../components';\nimport { StepReveal } from './StepReveal';\nimport { Button } from 'antd';\nimport { ScoringMessage } from './RulesBlobs';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const increaseStep = () => setStep((s: number) => ++s);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRIMES_HEDIONDOS.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"rank\"\n          title={translate('Resultado', 'Results')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <ScoringMessage />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepReveal\n          user={user}\n          groupedItems={state.groupedItems}\n          items={state.items}\n          players={players}\n          scenes={state.scenes}\n          scenesOrder={state.scenesOrder}\n          crimes={state.crimes}\n          onSeeRanking={increaseStep}\n        />\n\n        {/* Step 2 */}\n        <Step fullWidth>\n          <Title>Ranking</Title>\n\n          <RankingBoard ranking={state.ranking} players={players} />\n\n          <ButtonContainer>\n            <Button onClick={() => setStep(1)}>\n              <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n            </Button>\n          </ButtonContainer>\n          <AdminNextRoundButton round={state.round} lastRound={state?.lastRound} />\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Components\nimport { useMemo } from 'react';\nimport { GameOverWrapper } from '../../components';\nimport { useLanguage, useUser } from '../../hooks';\nimport { Crime } from './Crime';\nimport { splitWeaponsAndEvidence } from './helpers';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  const { language } = useLanguage();\n  const crimes: Crime[] = state.crimes;\n  const user = useUser(players);\n\n  const { weapons, evidences } = useMemo(\n    () => splitWeaponsAndEvidence(state.items, language),\n    [state.items, language]\n  );\n\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\">\n      <ul>\n        {/* {crimes.map((crime) => (\n          <Crime\n            key={`crime-by-${crime.playerId}`}\n            user={user}\n            crime={crime}\n            players={players}\n            scenes={state.scenes}\n            scenesOrder={state.scenesOrder}\n            items={state.items}\n            weapons={weapons}\n            evidences={evidences}\n          />\n        ))} */}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from '../../utils/constants';\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from '../../components';\nimport PhaseCrimeSelection from './PhaseCrimeSelection';\nimport PhaseSceneMarking from './PhaseSceneMarking';\nimport PhaseGuessing from './PhaseGuessing';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionCrimesHediondos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.CRIMES_HEDIONDOS.CRIME_SELECTION:\n        return PhaseCrimeSelection;\n      case PHASES.CRIMES_HEDIONDOS.SCENE_MARKING:\n        return PhaseSceneMarking;\n      case PHASES.CRIMES_HEDIONDOS.GUESSING:\n        return PhaseGuessing;\n      case PHASES.CRIMES_HEDIONDOS.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.CRIMES_HEDIONDOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionCrimesHediondos;\n","// This icon file is generated automatically.\nvar CloudUploadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.3 459a8 8 0 00-12.6 0l-112 141.7a7.98 7.98 0 006.3 12.9h73.9V856c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V613.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 459z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M811.4 366.7C765.6 245.9 648.9 160 512.2 160S258.8 245.8 213 366.6C127.3 389.1 64 467.2 64 560c0 110.5 89.5 200 199.9 200H304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8h-40.1c-33.7 0-65.4-13.4-89-37.7-23.5-24.2-36-56.8-34.9-90.6.9-26.4 9.9-51.2 26.2-72.1 16.7-21.3 40.1-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0152.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10C846.1 454.5 884 503.8 884 560c0 33.1-12.9 64.3-36.3 87.7a123.07 123.07 0 01-87.6 36.3H720c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h40.1C870.5 760 960 670.5 960 560c0-92.7-63.1-170.7-148.6-193.3z\" } }] }, \"name\": \"cloud-upload\", \"theme\": \"outlined\" };\nexport default CloudUploadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloudUploadOutlinedSvg from \"@ant-design/icons-svg/es/asn/CloudUploadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CloudUploadOutlined = function CloudUploadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CloudUploadOutlinedSvg\n  }));\n};\n\nCloudUploadOutlined.displayName = 'CloudUploadOutlined';\nexport default /*#__PURE__*/React.forwardRef(CloudUploadOutlined);","// This icon file is generated automatically.\nvar EnvironmentOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M854.6 289.1a362.49 362.49 0 00-79.9-115.7 370.83 370.83 0 00-118.2-77.8C610.7 76.6 562.1 67 512 67c-50.1 0-98.7 9.6-144.5 28.5-44.3 18.3-84 44.5-118.2 77.8A363.6 363.6 0 00169.4 289c-19.5 45-29.4 92.8-29.4 142 0 70.6 16.9 140.9 50.1 208.7 26.7 54.5 64 107.6 111 158.1 80.3 86.2 164.5 138.9 188.4 153a43.9 43.9 0 0022.4 6.1c7.8 0 15.5-2 22.4-6.1 23.9-14.1 108.1-66.8 188.4-153 47-50.4 84.3-103.6 111-158.1C867.1 572 884 501.8 884 431.1c0-49.2-9.9-97-29.4-142zM512 880.2c-65.9-41.9-300-207.8-300-449.1 0-77.9 31.1-151.1 87.6-206.3C356.3 169.5 431.7 139 512 139s155.7 30.5 212.4 85.9C780.9 280 812 353.2 812 431.1c0 241.3-234.1 407.2-300 449.1zm0-617.2c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 01512 551c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 01400 439c0-29.9 11.7-58 32.8-79.2C454 338.6 482.1 327 512 327c29.9 0 58 11.6 79.2 32.8C612.4 381 624 409.1 624 439c0 29.9-11.6 58-32.8 79.2z\" } }] }, \"name\": \"environment\", \"theme\": \"outlined\" };\nexport default EnvironmentOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EnvironmentOutlinedSvg from \"@ant-design/icons-svg/es/asn/EnvironmentOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EnvironmentOutlined = function EnvironmentOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EnvironmentOutlinedSvg\n  }));\n};\n\nEnvironmentOutlined.displayName = 'EnvironmentOutlined';\nexport default /*#__PURE__*/React.forwardRef(EnvironmentOutlined);"],"names":["WelcomeMessage","contained","pt","en","GuessMessage","ScoringMessage","ItemCard","item","cardWidth","activeColor","preview","isSelected","className","language","useLanguage","clsx","style","borderColor","backgroundColor","content","name","toUpperCase","color","type","maxWidth","imageId","id","StepItemsSelection","user","items","groupedItems","selections","updateSelections","useState","weaponId","setWeaponId","evidenceId","setEvidenceId","useCardWidth","userItems","itemGroupIndex","onClick","randomWeaponId","randomEvidenceId","shuffle","forEach","itemId","map","includes","size","disabled","SceneTile","tile","index","onSelectValue","description","title","values","entry","i","isActive","icon","CheckCircleFilled","undefined","tileId","value","PlusSquareFilled","props","ref","React","AntdIcon","_objectSpread","PlusSquareFilledSvg","displayName","SelectedItems","fadeWeapon","fadeEvidence","StepCauseOfDeathSelection","causeOfDeathTile","causeOfDeathIndex","setCauseOfDeathIndex","payload","causeOfDeath","StepLocationSelection","locationTiles","location","setLocation","onSelectItem","locationTile","locationIndex","StepReviewCrime","reasonForEvidenceTile","onSubmitCrime","updateSelection","players","translate","find","reasonForEvidence","CloudUploadOutlined","readyText","readyTextPlural","StepReasonForEvidence","reasonForEvidenceIndex","setReasonForEvidenceIndex","state","info","isUserReady","useIsUserReady","useUser","step","setStep","setSelections","onSubmitCrimeRequest","request","useAPICall","apiFunction","CRIMES_HEDIONDOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","action","useOnSubmitCrimeAPIRequest","increaseStep","s","useMock","itemsGroup","shuffledItems","weapon","e","evidence","locationTileId","getRandomItem","options","mockCrime","phase","allowedPhase","PHASES","conditions","round","onPressButton","buttonText","time","circleColor","onClose","currentRound","current","duration","SafetyOutlined","SafetyOutlinedSvg","GiftOutlined","GiftOutlinedSvg","ExceptionOutlined","ExceptionOutlinedSvg","Crime","crime","scenesOrder","scenes","player","playerId","getAvatarColorById","avatarId","filter","sceneId","scene","CrimeScene","playerIndex","isComplete","CrimeSceneIcon","EnvironmentOutlined","GroupedItemsBoard","Object","group","StepNewScene","onSubmitMark","sceneTile","crimes","sceneMarkIndex","setSceneMarkIndex","itemsList","header","weapons","evidences","sceneIndex","useOnSubmitMarkAPIRequest","currentScene","splitWeaponsAndEvidence","reduce","acc","push","orderBy","PlayersCards","activePlayerId","setActivePlayerId","guesses","Boolean","active","withName","replacementAvatar","SelectableGroupedItemsBoard","StepGuessing","onSubmitGuesses","setGuesses","useMemo","playerCount","keys","length","isAllComplete","every","guess","shuffledWeapons","shuffledEvidences","mockGuesses","activeCrime","activePlayerGuesses","guessObj","useOnSubmitGuessesAPIRequest","StepReveal","onSeeRanking","correctCrimes","secretScore","onExpire","label","fullWidth","ranking","lastRound","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseCrimeSelection","PhaseSceneMarking","PhaseGuessing","PhaseReveal","PhaseGameOver","PageError","CloudUploadOutlinedSvg","EnvironmentOutlinedSvg"],"sourceRoot":""}