{"version":3,"file":"static/js/arte-ruim.e27293df.chunk.js","mappings":"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","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/icons/TrophyIcon.tsx","components/points/StarPoints.tsx","components/ribbons/Ribbon.tsx","components/ribbons/RibbonGroup.tsx","components/slide-show/SlideShowControls.tsx","components/slide-show/SlideShow.tsx","games/arte-ruim/StepDraw.tsx","games/arte-ruim/PhaseDraw.tsx","games/arte-ruim/utils/api-requests.ts","games/arte-ruim/utils/helpers.ts","games/arte-ruim/components/EvaluationAllDrawings.tsx","games/arte-ruim/components/Card.tsx","games/arte-ruim/components/EvaluationAllCards.tsx","games/arte-ruim/components/TextBlobs.tsx","games/arte-ruim/StepEvaluation.tsx","games/arte-ruim/components/EvaluatedDrawings.tsx","games/arte-ruim/PhaseEvaluation.tsx","games/arte-ruim/components/GalleryWindowCredits.tsx","games/arte-ruim/components/GalleryWindowGuesses.tsx","games/arte-ruim/components/GalleryWindowResult.tsx","games/arte-ruim/StepGallery.tsx","games/arte-ruim/utils/constants.ts","games/arte-ruim/StepRanking.tsx","games/arte-ruim/PhaseGallery.tsx","games/arte-ruim/components/DrawingGrade.tsx","games/arte-ruim/PhaseGameOver.tsx","games/arte-ruim/SessionArteRuim.tsx","hooks/useSlideShow.ts","hooks/useVotingMatch.ts"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\n// State & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { Translate } from 'components/language';\n\n/**\n * Floating canvas resizer bar positioned on the top-left of the page\n * @returns\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <div className=\"canvas-resizer\">\n      <div className=\"canvas-resizer__label\">\n        <Translate pt=\"Tamanho das Images\" en=\"Image Size\" />\n      </div>\n      <Slider\n        className=\"canvas-resizer__slider\"\n        value={canvasSize ?? 100}\n        min={150}\n        max={500}\n        step={50}\n        onChange={setCanvasSize}\n      />\n    </div>\n  );\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  size?: number;\n};\n\nexport const CanvasSVG = ({ drawing = '', className = '', size = 250 }: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 500 500\"\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${size}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  /**\n   * Lines drawn in the canvas\n   */\n  lines: CanvasLine[];\n  /**\n   * Function where any new version of the drawing is sent to\n   */\n  setLines: CanvasSetLine;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Show controls to undo, redo, or erase drawing. Default: false\n   */\n  showControls?: boolean;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n};\n\n/**\n * Canvas drawing board using react-konva\n * It requires an array of lines and an setState function to save the lines\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  /**\n   * Toggles off the isDrawing flag\n   */\n  const startDrawing = () => {\n    isDrawing.current = true;\n  };\n\n  /**\n   * Toggles off the isDrawing flag and resets history\n   */\n  const stopDrawing = () => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n  };\n\n  const startLine = (e: any) => {\n    startDrawing();\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const finishLine = (e: any) => {\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLineEntry);\n    setLines(lines.concat());\n  };\n\n  /**\n   * Start recording drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseDown = (e: any) => {\n    startLine(e);\n  };\n\n  /**\n   * Tracks mouse moving during the drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    if (isDrawing.current) {\n      stopDrawing();\n\n      finishLine(e);\n    }\n  };\n\n  /**\n   * Handles case when a current drawing is stopped off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseUp = () => {\n    stopDrawing();\n  };\n\n  /**\n   * Handles case when a current drawing is started off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseDown = () => {\n    startDrawing();\n  };\n\n  /**\n   * Handles when mouse leaves the stage\n   * @param e - konva mouse event\n   */\n  const handleMouseLeave = (e: any) => {\n    if (isDrawing.current) {\n      finishLine(e);\n\n      window.document.addEventListener('mouseup', handleOffsetMouseUp);\n      window.document.addEventListener('touchEnd', handleOffsetMouseUp);\n      window.document.addEventListener('mousedown', handleOffsetMouseDown);\n      window.document.addEventListener('touchStart', handleOffsetMouseDown);\n    }\n  };\n\n  /**\n   * Handles when mouse reenters the state\n   * @param e\n   */\n  const handleMouseEnter = (e: any) => {\n    if (isDrawing.current) {\n      startLine(e);\n    }\n    window.document.removeEventListener('mouseup', handleOffsetMouseUp);\n    window.document.removeEventListener('touchEnd', handleOffsetMouseUp);\n    window.document.removeEventListener('mousedown', handleOffsetMouseDown);\n    window.document.removeEventListener('touchStart', handleOffsetMouseDown);\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={500}\n        height={500}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onMouseEnter={handleMouseEnter}\n        className={clsx('drawing-canvas', className)}\n        id=\"drawing-canvas\"\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","export function TrophyIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M397.763 87.5h-98.509v213.476h98.509c58.855 0 106.737-47.882 106.737-106.738S456.618 87.5 397.763 87.5zm0 183.476h-68.509V117.5h68.509c42.381 0 76.738 34.357 76.738 76.738-.001 42.381-34.357 76.738-76.738 76.738zM114.237 87.5C55.382 87.5 7.5 135.382 7.5 194.238s47.882 106.738 106.737 106.738h98.509V87.5zm68.509 183.476h-68.509c-42.381 0-76.738-34.357-76.738-76.738S71.856 117.5 114.237 117.5h68.509zM314 419.5H198l15-91h86z\"\n      ></path>\n      <path fill=\"#fee97d\" d=\"M299 328.5h-30l15 91h30z\"></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M382.221 504.5H129.779a7 7 0 01-7-7v-11.629c0-22.091 17.909-40 40-40h186.442c22.091 0 40 17.909 40 40V497.5a7 7 0 01-7 7z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M349.221 445.871h-30c22.092 0 40 17.909 40 40V497.5a7 7 0 01-7 7h30a7 7 0 007-7v-11.629c0-22.092-17.909-40-40-40zm-5 0H167.779v-3.629c0-22.091 17.909-40 40-40h96.442c22.091 0 40 17.909 40 40z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M304.221 402.241h-30c22.092 0 40 17.909 40 40v3.629h30v-3.629c0-22.091-17.909-40-40-40z\"\n      ></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M411.5 57.5h-311c-13.807 0-25-11.193-25-25s11.193-25 25-25h311c13.807 0 25 11.193 25 25s-11.193 25-25 25z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M411.5 7.5h-30c13.807 0 25 11.193 25 25s-11.193 25-25 25h30c13.807 0 25-11.193 25-25s-11.193-25-25-25zM256 362.5c-83.119 0-150.5-67.381-150.5-150.5V57.5h301V212c0 83.119-67.381 150.5-150.5 150.5z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M376.5 57.5V212c0 78.056-59.424 142.229-135.5 149.757 4.934.488 9.937.743 15 .743 83.119 0 150.5-67.381 150.5-150.5V57.5z\"\n      ></path>\n      <circle cx=\"256\" cy=\"207.96\" r=\"94.169\" fill=\"#fff\"></circle>\n      <path\n        fill=\"#fee97d\"\n        d=\"M262.277 154.391l13.139 26.623a7 7 0 005.271 3.829l29.38 4.269c5.742.834 8.034 7.89 3.879 11.94l-21.26 20.723a6.998 6.998 0 00-2.013 6.196l5.019 29.261c.981 5.718-5.021 10.079-10.157 7.379l-26.278-13.815a7.001 7.001 0 00-6.515 0l-26.278 13.815c-5.135 2.7-11.137-1.661-10.157-7.379l5.019-29.261a7 7 0 00-2.013-6.196l-21.26-20.723c-4.155-4.05-1.862-11.106 3.879-11.94l29.38-4.269a7 7 0 005.271-3.829l13.139-26.623c2.569-5.203 9.987-5.203 12.555 0z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M313.946 201.052c4.155-4.05 1.862-11.106-3.88-11.94l-29.38-4.269a6.997 6.997 0 01-5.27-3.829l-13.139-26.623c-2.568-5.203-9.987-5.203-12.554 0l-10.888 22.061 3.874 7.85a18.632 18.632 0 0014.03 10.193c15.284 2.221 21.386 21.003 10.327 31.783a18.632 18.632 0 00-5.359 16.493l1.755 10.236 22.073 11.604c5.135 2.7 11.137-1.661 10.157-7.379l-5.019-29.261a7 7 0 012.013-6.196z\"\n      ></path>\n      <path d=\"M282.025 177.458l-13.022-26.387c-2.462-4.985-7.443-8.082-13.003-8.082s-10.541 3.097-13.003 8.083l-13.022 26.387-29.119 4.231c-5.502.799-9.987 4.581-11.706 9.868-1.718 5.288-.312 10.983 3.669 14.865l21.071 20.539-4.975 29.003c-.939 5.479 1.271 10.914 5.77 14.182s10.349 3.691 15.271 1.104L256 257.557l26.045 13.693c4.903 2.578 10.759 2.174 15.271-1.104 4.498-3.268 6.709-8.702 5.769-14.182l-4.974-29.003 21.071-20.539c3.981-3.881 5.387-9.577 3.669-14.865-1.719-5.287-6.204-9.068-11.706-9.867zm5.426 38.946a14.494 14.494 0 00-4.169 12.834l4.847 28.264-25.382-13.345a14.498 14.498 0 00-13.495 0l-25.381 13.344 4.847-28.262a14.495 14.495 0 00-4.169-12.835l-20.534-20.016 28.377-4.124a14.494 14.494 0 0010.918-7.932L256 158.618l12.69 25.714a14.494 14.494 0 0010.918 7.932l28.377 4.124zm194.096-99.749c-17.941-19.36-41.716-31.799-67.547-35.49v-16.27c16.756-1.282 30-15.316 30-32.394C444 14.58 429.421 0 411.5 0h-311C82.579 0 68 14.58 68 32.5c0 17.078 13.244 31.112 30 32.394v16.27c-25.714 3.676-49.409 16.029-67.321 35.248a7.5 7.5 0 0010.972 10.228C56.721 110.471 76.495 99.908 98 96.352v15.236c-39.204 7.62-68 42.024-68 82.652 0 22.509 8.765 43.663 24.675 59.561 15.532 15.543 36.076 24.242 57.996 24.641a157.847 157.847 0 008.007 15.038h-6.438c-54.722 0-99.24-44.519-99.24-99.24 0-14.091 2.904-27.711 8.633-40.48a7.5 7.5 0 00-13.685-6.14C3.347 162.333 0 178.019 0 194.24c0 62.992 51.248 114.24 114.24 114.24h16.729c17.756 22.957 41.679 40.906 69.267 51.348l-6.089 36.917c-18.396 5.522-32.123 21.915-33.701 41.685-25.112 1.221-45.167 22.032-45.167 47.441V497.5c0 7.995 6.505 14.5 14.5 14.5H382.22c7.995 0 14.5-6.505 14.5-14.5v-11.629c0-25.409-20.055-46.22-45.167-47.441-1.579-19.771-15.306-36.163-33.701-41.685l-6.089-36.917c27.588-10.441 51.511-28.391 69.267-51.348h16.729c62.992 0 114.24-51.248 114.24-114.24.001-28.841-10.814-56.394-30.452-77.585zM65.281 243.195C52.203 230.126 45 212.74 45 194.24c0-32.392 22.265-59.968 53-67.308V212c0 17.851 2.98 35.018 8.461 51.034-15.554-1.728-29.958-8.609-41.18-19.839zM100.5 50C90.851 50 83 42.149 83 32.5S90.851 15 100.5 15h311c9.649 0 17.5 7.851 17.5 17.5S421.149 50 411.5 50zM414 126.932c30.735 7.34 53 34.916 53 67.308 0 18.5-7.203 35.886-20.286 48.958-11.218 11.227-25.621 18.108-41.175 19.836C411.02 247.018 414 229.851 414 212zm-77.518 311.439h-22.895c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h35.634c17.921 0 32.5 14.58 32.5 32.5V497H130.279v-11.129c0-17.92 14.579-32.5 32.5-32.5h115.808c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5H175.518c1.921-16.101 15.651-28.629 32.261-28.629h96.441c16.611-.001 30.342 12.527 32.262 28.629zm-126.801-43.63l4.987-30.237C227.849 368.08 241.703 370 256 370s28.151-1.92 41.332-5.496l4.987 30.237zM256 355c-78.851 0-143-64.149-143-143V65h286v147c0 78.851-64.149 143-143 143zm141.76-61.52h-6.438a157.741 157.741 0 008.007-15.038c21.919-.399 42.463-9.097 57.991-24.637C473.235 237.903 482 216.749 482 194.24c0-40.627-28.796-75.032-68-82.652V96.352c21.605 3.57 41.449 14.208 56.545 30.498C487.604 145.259 497 169.192 497 194.24c0 54.721-44.519 99.24-99.24 99.24zM256 106.291c-56.061 0-101.67 45.609-101.67 101.669S199.939 309.629 256 309.629 357.67 264.02 357.67 207.96 312.061 106.291 256 106.291zm0 188.338c-47.79 0-86.67-38.88-86.67-86.669s38.88-86.669 86.67-86.669 86.67 38.88 86.67 86.669-38.88 86.669-86.67 86.669z\"></path>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { StarFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype StarPointsProps = {\n  keyPrefix: string;\n  quantity?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  hideText?: boolean;\n};\n\nexport const StarPoints = ({ keyPrefix, quantity, className, hideText }: StarPointsProps) => {\n  if (!quantity) {\n    return <span />;\n  }\n\n  const isNegative = quantity < 0;\n  const num = Math.abs(quantity);\n\n  const StarsArray = Array.from({ length: num }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n\n  return (\n    <span className={clsx('star-points', isNegative && 'star-points--negative', className)}>\n      {isNegative ? '-' : '+'} <span className=\"star-points__stars\">{StarsArray}</span>\n      {!hideText && (\n        <>\n          <Translate pt=\"ponto\" en=\"point\" />\n          {num > 1 ? 's' : ''}\n        </>\n      )}\n    </span>\n  );\n};\n","import clsx from 'clsx';\n// Utils\nimport { getAnimationClass, getColorFromLetter } from 'utils/helpers';\n\ntype RibbonProps = {\n  label: string;\n  position?: 'absolute' | 'static';\n};\n\nexport function Ribbon({ label, position = 'absolute' }: RibbonProps): JSX.Element {\n  return (\n    <div className={clsx('ribbon', `ribbon--${position}`)}>\n      <div\n        className={clsx(\n          'ribbon__content',\n          `ribbon__content--${label}`,\n          `color-background--${getColorFromLetter(label)}`,\n          getAnimationClass('bounceIn')\n        )}\n      >\n        {label}\n      </div>\n    </div>\n  );\n}\n","import { Ribbon } from './Ribbon';\n\ntype RibbonGroupProps = {\n  labels: string[];\n};\n\nexport function RibbonGroup({ labels }: RibbonGroupProps) {\n  return (\n    <div className=\"ribbon-group ribbon--absolute\">\n      {labels.length > 0 &&\n        labels.map((label) => (\n          <Ribbon\n            key={label}\n            label={label.length > 0 ? label.charAt(label.length - 1) : label}\n            position=\"static\"\n          />\n        ))}\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n};\n\nexport function SlideShowControls({\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor = 'gray',\n  windowDuration = 10,\n}: SlideShowControlsProps) {\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: windowDuration * length,\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  // Automatically go to the next window every {windowDuration} seconds\n  useEffect(() => {\n    if (timeLeft < windowDuration * length && timeLeft > 0 && timeLeft % windowDuration === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n    }\n  }, [timeLeft, setActiveIndex, length, windowDuration]);\n\n  const goToPreviousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n  };\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">\n          {Array(length)\n            .fill('')\n            .map((e, i) => {\n              return (\n                <div\n                  key={`control-timer-bar-${e + i}`}\n                  className=\"slide-show__controls-timer-bar-node\"\n                  style={{ width: `${99 / length}%` }}\n                >\n                  {e}\n                </div>\n              );\n            })}\n        </div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${Math.abs((windowDuration * timeLeft) / length - 100)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={goToPreviousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Anterior\" en=\"Previous\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={goToNextStep}\n            disabled={disableControls || activeIndex === length - 1}\n          >\n            <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { SlideShowControls } from './SlideShowControls';\n\ntype SlideShowProps = {\n  players: GamePlayers;\n  children: [ReactNode, ReactNode];\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  leftClassName?: string;\n  rightClassName?: string;\n};\n\n/**\n * Display Slick show with a left and right sides with full navigation controls\n * @param props\n * @returns\n */\nexport function SlideShow({\n  children,\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor,\n  windowDuration = 10,\n  className = '',\n  leftClassName = '',\n  rightClassName = '',\n}: SlideShowProps) {\n  return (\n    <div className={clsx('slide-show', className)}>\n      <div className={clsx('slide-show__left', leftClassName)} id=\"gallery-left\">\n        {children[0]}\n      </div>\n      <div className={clsx('slide-show__right', rightClassName)} id=\"gallery-right\">\n        {children[1]}\n      </div>\n      <SlideShowControls\n        length={length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={disableControls}\n        barColor={barColor}\n        windowDuration={windowDuration}\n      />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useAudio } from 'react-use';\n// Utils\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Step } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { DrawingCanvas } from 'components/canvas';\nimport { PanicIcon } from 'components/icons/PanicIcon';\n\n// Sound\nconst arteRuimTimer = require('assets/sounds/arte-ruim-timer.mp3');\n\ntype StepDrawProps = {\n  secretCard: ArteRuimCard | PlainObject;\n  onSubmitDrawing: GenericFunction;\n};\n\nexport function StepDraw({ secretCard, onSubmitDrawing }: StepDrawProps) {\n  const { translate } = useLanguage();\n  const { isDebugEnabled } = useDevFeatures();\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n  const [volume] = useGlobalState('volume');\n  const [audio, , controls] = useAudio({\n    src: arteRuimTimer,\n    autoPlay: true,\n  });\n\n  // Updated volume\n  useEffect(() => {\n    controls.volume(volume);\n  }, [volume]); // eslint-disable-line\n\n  const { seconds } = useCountdown({\n    duration: 11,\n    autoStart: true,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmitDrawing({\n        drawing: JSON.stringify(lines),\n        cardId: secretCard.id,\n      });\n    },\n  });\n\n  return (\n    <Step>\n      <Card\n        size=\"large\"\n        header={translate('Desenhe', 'Draw', isDebugEnabled ? secretCard?.id : undefined)}\n        footer={Array(secretCard?.level).fill('•').join('')}\n        className=\"a-draw-step__card\"\n        color=\"yellow\"\n      >\n        {secretCard?.text}\n        <span className=\"a-draw-step__timer\">{seconds > 0 ? seconds - 1 : 0}</span>\n      </Card>\n      {audio}\n      {isTimesUp ? (\n        <PanicIcon style={{ background: 'white', width: '500px', padding: '2em' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} />\n      )}\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\n// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepDraw } from './StepDraw';\nimport { PaintingIcon } from 'components/icons/PaintingIcon';\n\nfunction PhaseDraw({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const [secretCard, setSecretCard] = useState({});\n\n  useEffect(() => {\n    setSecretCard(players[user?.id]?.currentCard ?? {});\n  }, [players, user?.id]);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.DRAW}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam seus desenhos!',\n          'Please wait while other players finish their artwork!'\n        )}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt={`Essa rodada usará cartas de nível ${state?.level || '?'}`}\n              en={`This round uses cards of level ${state?.level || '?'}`}\n            />\n            {state.level === 4 && (\n              <Instruction contained>\n                <Translate\n                  pt=\"No nível 4, as cartas tem um ou dois temas comuns, então preste atenção nos detalhes\"\n                  en=\"On level 4, the cards have one or two common themes, so pay attention to details\"\n                />\n              </Instruction>\n            )}\n            {state.level === 5 && (\n              <Instruction contained>\n                <Translate\n                  pt=\"No nível 5, só existem duas cartas para todos\"\n                  en=\"On level 5, players draw one of two things only\"\n                />\n              </Instruction>\n            )}\n          </Instruction>\n        </RoundAnnouncement>\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<PaintingIcon />}\n          title={translate('Desenhe!', 'Draw!')}\n          buttonText={translate('Um dó, lá, si... vamos ir... já!', 'Ready! Set! Go!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          withoutTimer\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você terá 10 segundos para ler a sua carta e desenhá-la.\n                  <br />\n                  Aperte o botão quando estiver pronto!\n                  <br />\n                  Não vale usar números e letras.\n                  <br />\n                  Fique esperto porque o tempo começa assim que você apertar.\n                </>\n              }\n              en={\n                <>\n                  You'll have 10 seconds to read and draw your card.\n                  <br />\n                  Press the button when you're ready!\n                  <br />\n                  You can NOT use numbers or letters.\n                  <br />\n                  Be aware of the timer! It starts as soon as you press the button.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepDraw secretCard={secretCard} onSubmitDrawing={onSubmitDrawing} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDraw;\n","import { ARTE_RUIM_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-voting',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate(\n      'Avaliação enviada! Agora aguarde os outros jogadores',\n      'Evaluation sent successfully! Wait for the other players'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n      'Oops, the application failed to send your evaluation'\n    ),\n  });\n\n  return (payload: SubmitVotingPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import { SEPARATOR } from 'utils/constants';\n\nexport function prepareVotes(votes: StringDictionary) {\n  return Object.entries(votes).reduce((acc: StringDictionary, [drawingEntryId, cardEntryId]) => {\n    const [, drawingId] = drawingEntryId.split(SEPARATOR);\n    const [, cardId] = cardEntryId.split(SEPARATOR);\n    acc[drawingId] = cardId;\n    return acc;\n  }, {});\n}\n","import clsx from 'clsx';\n// Utils\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Ribbon } from 'components/ribbons';\n\ntype EvaluationAllDrawingsProps = {\n  drawings: ArteRuimDrawing[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  canvasSize: number;\n  players: GamePlayers;\n};\n\nexport function EvaluationAllDrawings({\n  drawings,\n  activeItem,\n  onActivateItem,\n  votes,\n  canvasSize,\n  players,\n}: EvaluationAllDrawingsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = getEntryId(['drawing', drawingEntry.id]);\n        const isActive = activeItem === canvasEntryId;\n        const vote = votes[canvasEntryId];\n\n        return (\n          <li\n            key={`${canvasEntryId}-${drawingEntry.playerId}`}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon label={vote.charAt(vote.length - 1)} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              size={canvasSize}\n            />\n            <span className=\"a-evaluation-all-drawings__artist\">{players[drawingEntry.playerId].name}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Helpers\nimport { getColorFromLetter } from 'utils/helpers';\n// Components\nimport { Card } from 'components/cards';\nimport { ReactNode } from 'react';\n\ntype ArteRuimCardProps = {\n  /**\n   * The text of the card\n   */\n  text?: ReactNode;\n  /**\n   * The level of the card displayed as dots in the footer\n   */\n  level: number;\n  /**\n   * The header of the card. Default: X\n   */\n  header?: string;\n};\n\n/**\n * This is the Card component\n * @param props {object}\n * @returns\n */\nexport const ArteRuimCard = ({ text, level, header = 'X' }: ArteRuimCardProps) => {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(level).fill('•').join('')}\n    >\n      {text ?? <WarningOutlined />}\n    </Card>\n  );\n};\n","import clsx from 'clsx';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { ArteRuimCard as Card } from './Card';\n\ntype EvaluationAllCardsProps = {\n  cards: ArteRuimCard[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function EvaluationAllCards({ cards, activeItem, onActivateItem, votes }: EvaluationAllCardsProps) {\n  const { isDebugEnabled } = useDevFeatures();\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['card', cardEntry.id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              text={cardEntry.text}\n              level={cardEntry.level}\n              header={isDebugEnabled ? cardEntry.id : letter}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\nexport const EvaluationRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n          par.\n          <br />\n          Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você selecionou.\n          <br />\n          Quando encontrar todos os pares, envie sua avaliação!\n        </>\n      }\n      en={\n        <>\n          Find the pairs of artwork and card by clicking on a card or artwork then on its match.\n          <br />\n          A ribbon will show up on the artwork with the color and letter of the matching card.\n          <br />\n          When you're done, click the button to send your evaluation!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const GalleryRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Agora, mostraremos cada arte, o que os jogadores votaram e a resposta final.\n          <br />\n          Se você votou na expressão correta, você ganha 2 pontos.\n          <br />\n          Quando for a sua arte, você ganha 1 ponto para cada pessoa que votou corretamente.\n        </>\n      }\n      en={\n        <>\n          Now we show each art, what players voted, and the final answer.\n          <br />\n          You get 2 points if you selected the right card.\n          <br />\n          When players selected the correct card for your artwork, you get 1 point for each match!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const ScoringRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você ganha 2 pontos para cada ligação correta entre arte e expressão.\n          <br />\n          Para cada ligação correta que sua arte ganha, você recebe 1 ponto.\n        </>\n      }\n      en={\n        <>\n          You get 2 points if you matched the right card with artwork.\n          <br />\n          For you own artwork, you get 1 point for each correct match the other players done.\n        </>\n      }\n    />\n  </Instruction>\n);\n","import { useCallback, useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { CloudUploadOutlined, ThunderboltOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\nimport { prepareVotes } from './utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { PopoverRule } from 'components/rules';\nimport { CanvasResizer } from 'components/canvas';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { EvaluationAllDrawings } from './components/EvaluationAllDrawings';\nimport { EvaluationAllCards } from './components/EvaluationAllCards';\nimport { EvaluationRules } from './components/TextBlobs';\n\ntype StepEvaluationProps = {\n  drawings: ArteRuimDrawing[];\n  cards: ArteRuimCard[];\n  players: GamePlayers;\n  onSubmitVoting: GenericFunction;\n};\n\nexport function StepEvaluation({ drawings, cards, players, onSubmitVoting }: StepEvaluationProps) {\n  const { isLoading } = useLoading();\n  const user = useUser(players);\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n  const { votes, setVotes, activeItem, activateItem, resetVoting, isVotingComplete } = useVotingMatch(\n    'drawing',\n    true,\n    drawings.length || 2\n  );\n\n  const onGuessForMe = useCallback(() => {\n    const usedDrawings = Object.keys(votes);\n    const usedCards = Object.values(votes);\n    const drawingsKeys = drawings\n      .map((e: ArteRuimDrawing) => getEntryId(['drawing', e.id]))\n      .filter((key: string) => !usedDrawings.includes(key));\n    let cardsKeys = shuffle(\n      cards\n        .map((e: ArteRuimCard, index: number) => getEntryId(['card', e.id, LETTERS[index]]))\n        .filter((key: string) => !usedCards.includes(key))\n    );\n    // For level 5 specifically, if there are less cards than drawings\n    cardsKeys =\n      cardsKeys.length < drawingsKeys.length\n        ? Array(Math.ceil(drawingsKeys.length / cardsKeys.length))\n            .fill(cardsKeys)\n            .flat()\n        : cardsKeys;\n\n    const newVotes = { ...votes };\n    drawingsKeys.forEach((drawingKey: string, index: number) => {\n      if (!newVotes[drawingKey]) {\n        newVotes[drawingKey] = cardsKeys[index];\n      }\n    });\n    setVotes(newVotes);\n  }, [cards, drawings, votes, setVotes]);\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  const selectOwnDrawing = useCallback(() => {\n    const playersDrawing = (drawings ?? []).find((drawing: ArteRuimDrawing) => drawing.playerId === user.id);\n    if (playersDrawing && playersDrawing.level !== 5) {\n      const drawingKey = getEntryId(['drawing', playersDrawing.id]);\n      const cardIndex = (cards ?? []).findIndex((card: ArteRuimCard) => card.playerId === user.id);\n      const cardKey = getEntryId(['card', playersDrawing.id, LETTERS[cardIndex]]);\n      const vote = { [drawingKey]: cardKey };\n      return vote;\n    }\n    return {};\n  }, [user, drawings, cards]);\n\n  // Auto-select the players own drawing and word\n  useEffect(() => {\n    const selection = selectOwnDrawing();\n    if (selection) {\n      setVotes((s: any) => ({ ...s, ...selection }));\n    }\n  }, [selectOwnDrawing, setVotes]);\n\n  useMock(() => {\n    onGuessForMe();\n  }, []);\n\n  return (\n    <Step className=\"a-evaluation-step\">\n      <PopoverRule content={<EvaluationRules />} />\n      <CanvasResizer />\n      <Title>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </Title>\n\n      <Space className=\"space-container\" align=\"center\" wrap>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={() => resetVoting(selectOwnDrawing())}\n          disabled={isLoading}\n        >\n          <Translate pt=\"Limpar seleções\" en=\"Clear selections\" />\n        </Button>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={onGuessForMe}\n          disabled={isLoading || Object.values(votes).length === drawings.length}\n        >\n          <Translate pt=\"Chutar restantes\" en=\"Guess for me\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => onSubmitVoting({ votes: prepareVotes(votes) })}\n          disabled={isLoading || !isVotingComplete}\n          icon={<CloudUploadOutlined />}\n        >\n          <Translate pt=\"Enviar sua avaliação\" en=\"Send evaluation\" />\n        </Button>\n      </Space>\n\n      <EvaluationAllDrawings\n        drawings={drawings ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        canvasSize={canvasSize}\n        players={players}\n      />\n\n      <EvaluationAllCards\n        cards={cards ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n    </Step>\n  );\n}\n","import { useMemo } from 'react';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { AnimatedLoaderIcon } from 'components/icons/AnimatedLoaderIcon';\n\ntype EvaluatedDrawingsProps = {\n  votes?: StringDictionary;\n  cards: ArteRuimCard[];\n  drawings: ArteRuimDrawing[];\n};\n\n/**\n * Displays drawings in the waiting room after evaluation\n * @param props\n * @returns\n */\nexport function EvaluatedDrawings({ votes, cards, drawings }: EvaluatedDrawingsProps) {\n  const [canvasSize] = useGlobalState('canvasSize');\n\n  const cardsDict = useMemo(\n    () =>\n      cards.reduce((acc: Record<string, ArteRuimCard>, card) => {\n        acc[card.id] = card;\n        return acc;\n      }, {}),\n    [cards]\n  );\n\n  const drawingsDict = useMemo(\n    () =>\n      drawings.reduce((acc: Record<string, ArteRuimDrawing>, drawing) => {\n        acc[drawing.id] = drawing;\n        return acc;\n      }, {}),\n    [drawings]\n  );\n\n  if (!votes) {\n    return (\n      <div className=\"a-evaluated-drawings\">\n        <IconAvatar icon={<AnimatedLoaderIcon />} />\n      </div>\n    );\n  }\n  const cSize = Math.min(canvasSize * 0.6, 2000);\n\n  return (\n    <ul className=\"a-evaluated-drawings\">\n      {Object.keys(votes)\n        .sort()\n        .map((drawingKey: string) => {\n          const drawing = drawingsDict[drawingKey] as ArteRuimDrawing;\n          const card = cardsDict[votes[drawingKey]] as ArteRuimCard;\n\n          return (\n            <li className=\"a-evaluated-drawings__item\" key={`${drawing.id}-${card.id}-${card.playerId}`}>\n              <CanvasSVG\n                drawing={drawing.drawing}\n                size={cSize}\n                className=\"a-evaluation-all-drawings__drawing\"\n              />\n              <div className=\"a-evaluated-drawings__card\" style={{ maxWidth: `${cSize}px` }}>\n                {card.text}\n              </div>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n","// Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitVotingAPIRequest } from './utils/api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { StepEvaluation } from './StepEvaluation';\nimport { EvaluationRules } from './components/TextBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { EvaluatedDrawings } from './components/EvaluatedDrawings';\nimport { EvaluateIcon } from 'components/icons/EvaluateIcon';\n\nfunction EvaluationPhase({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const onSubmitVoting = useOnSubmitVotingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.EVALUATION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam de avaliar!',\n          'Please wait while other players finish their evaluations!'\n        )}\n        waitingRoomContent={\n          <EvaluatedDrawings cards={state.cards} drawings={state.drawings} votes={user?.votes} />\n        }\n      >\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          icon={<EvaluateIcon />}\n          title={translate('Adivinhação', 'Match the Pairs')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <EvaluationRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepEvaluation\n          drawings={state.drawings}\n          cards={state.cards}\n          players={players}\n          onSubmitVoting={onSubmitVoting}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","// Components\nimport { AvatarEntry } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowCreditsProps = {\n  artistName: string;\n  artistAvatarId: string;\n};\n\nexport function GalleryWindowCredits({ artistName, artistAvatarId }: GalleryWindowCreditsProps) {\n  return (\n    <div className=\"a-gallery__credits\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Artista\" en=\"Artist\" />\n      </div>\n      <span className=\"a-gallery__artist-name\">\n        <AvatarEntry id={artistAvatarId} name={artistName} />\n      </span>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowGuessesProps = {\n  playersSay: PlayersSay;\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  windowCardId: string;\n  artistColor: string;\n};\n\nexport function GalleryWindowGuesses({\n  playersSay,\n  players,\n  cards,\n  windowCardId,\n  artistColor,\n}: GalleryWindowGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        card: cards.find((i) => i.id === cardId),\n        playersIds,\n        count: playersIds.length,\n        isCorrect: windowCardId === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc']\n  );\n\n  return (\n    <div className=\"a-gallery__guesses\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Participantes votaram\" en=\"Players voted\" />\n      </div>\n      {entries.map((entry, index) => {\n        return (\n          <div key={`guess-${entry.cardId}-${index}`} className=\"a-gallery__guess\">\n            <div\n              className=\"a-gallery__speech-bubble\"\n              style={entry.isCorrect ? { backgroundColor: artistColor, color: 'white' } : {}}\n            >\n              {entry.isCorrect ? (\n                <CrownFilled className=\"a-gallery__speech-bubble-icon\" style={{ color: 'white' }} />\n              ) : (\n                <MessageFilled className=\"a-gallery__speech-bubble-icon\" />\n              )}\n              {entry.card?.text}\n            </div>\n            <div className=\"a-gallery__players\">\n              <AntAvatar.Group>\n                {entry.playersIds.map((playerId) => (\n                  <Avatar\n                    id={players[playerId].avatarId}\n                    key={`guess-avatar-${players[playerId].avatarId}`}\n                  />\n                ))}\n              </AntAvatar.Group>\n              <span className=\"a-gallery__players-names\">\n                {getPlayersFromIds(entry.playersIds, players, true).join(', ')}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\nimport { StarPoints } from 'components/points';\nimport { GarbageIcon } from 'components/icons/GarbageIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\n\ntype GalleryWindowResultProps = {\n  playerArtist: GamePlayer;\n  correctAnswerId: string;\n  correctAnswerText: string;\n  playersPoints?: NumberDictionary;\n  playersSay: PlayersSay;\n  players: GamePlayers;\n};\n\nexport function GalleryWindowResult({\n  playerArtist,\n  correctAnswerId,\n  correctAnswerText,\n  playersPoints,\n  playersSay,\n  players,\n}: GalleryWindowResultProps) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswerId] ?? {});\n\n  return (\n    <div className=\"a-gallery__result\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"E o título correto da obra é\" en=\"And the masterpiece title is\" />\n      </div>\n      <div className=\"a-gallery__speech-bubble\">\n        <CrownFilled className=\"a-gallery__speech-bubble-icon\" />\n        {correctAnswerText}\n      </div>\n      {correctGuesses.length ? (\n        <>\n          <div className=\"a-gallery__players\">\n            <AntAvatar.Group>\n              {correctGuesses.map((playerId) => {\n                return <Avatar key={`correct-guess-avatar-${playerId}`} id={players[playerId].avatarId} />;\n              })}\n            </AntAvatar.Group>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${playerArtist.id}`} />\n            <span className=\"a-gallery__players-names\">\n              {getPlayersFromIds(correctGuesses, players, true).join(', ')}\n            </span>\n          </div>\n          <div className=\"a-gallery__artist-points\">\n            <Avatar id={playerArtist.avatarId} />{' '}\n            <StarPoints\n              quantity={playersPoints?.[playerArtist.id]}\n              keyPrefix={`artist-points-${playerArtist.id}`}\n            />{' '}\n            <span className=\"a-gallery__players-names\">{playerArtist.name}</span>\n          </div>\n        </>\n      ) : (\n        <Typography.Text className=\"a-gallery__no-wins\">\n          <IconAvatar icon={<GarbageIcon />} size=\"large\" shape=\"square\" />\n          <Translate\n            pt=\"Nossa, ninguém acertou. Esse desenho deve ter sido muito ruim.\"\n            en=\"Wow, nobody got it. It must have been a very crappy drawing. Shame...\"\n          />\n        </Typography.Text>\n      )}\n    </div>\n  );\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { WINDOW_DURATION } from './utils/constants';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { GalleryWindowCredits } from './components/GalleryWindowCredits';\nimport { GalleryWindowGuesses } from './components/GalleryWindowGuesses';\nimport { GalleryWindowResult } from './components/GalleryWindowResult';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepGalleryProps = {\n  gallery: ArteRuimWindow[];\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n};\n\nexport function StepGallery({\n  gallery,\n  players,\n  cards,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n\n  const canvasWidth = useCardWidth(2, 16, 200, 500);\n\n  const { drawing, artistId, id, text, playersPoints, playersSay } = gallery[activeIndex];\n\n  const playerArtist = players[artistId];\n  const currentColor = AVATARS[playerArtist.avatarId].color;\n\n  return (\n    <Step className=\"a-gallery-phase__windows\">\n      <Title size=\"small\">\n        <Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRules />} />\n\n      <SlideShow\n        players={players}\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={currentColor}\n        windowDuration={WINDOW_DURATION}\n        leftClassName=\"a-gallery__canvas\"\n        rightClassName=\"a-gallery__info\"\n      >\n        <CanvasSVG drawing={drawing} size={canvasWidth} className=\"a-gallery__drawing\" />\n\n        <>\n          <GalleryWindowCredits artistName={playerArtist.name} artistAvatarId={playerArtist.avatarId} />\n\n          <GalleryWindowGuesses\n            players={players}\n            playersSay={playersSay}\n            cards={cards}\n            windowCardId={id}\n            artistColor={currentColor}\n          />\n\n          <GalleryWindowResult\n            playerArtist={playerArtist}\n            correctAnswerId={id}\n            correctAnswerText={text}\n            playersPoints={playersPoints}\n            playersSay={playersSay}\n            players={players}\n          />\n        </>\n      </SlideShow>\n    </Step>\n  );\n}\n","export const WINDOW_DURATION = 10;\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Components\nimport { RoundsLeftInstruction } from 'components/text';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  goToPreviousStep: GenericFunction;\n  setActiveIndex: GenericFunction;\n  isLastRound?: boolean;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  isGameOver,\n  round,\n  goToPreviousStep,\n  setActiveIndex,\n  isLastRound = false,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          pt=\"Votos corretos em seu desenho por outros jogadores\"\n          en=\"Correct guesses on your drawing by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules />} />\n\n      {!isGameOver && <RoundsLeftInstruction round={round} lastRound={isLastRound} />}\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria De Novo\" en=\"See Gallery Again\" />\n      </Button>\n\n      <AdminNextPhaseButton round={round} lastRound={isLastRound} />\n    </StepRankingWrapper>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\n// Resources and Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { GalleryRules } from './components/TextBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\nimport { PictureIcon } from 'components/icons/PictureIcon';\n\nfunction PhaseGallery({ players, state, info, meta }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep, setStep } = useStep(0);\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(state.gallery.length);\n\n  const isGameOver = meta.options?.shortGame\n    ? state.round.current === 5\n    : Object.values(players).some((player) => player.score > 50);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.GALLERY}\n      className=\"a-gallery-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          icon={<PictureIcon />}\n          title={translate('Galeria de Arte', 'Art Gallery')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n        >\n          <GalleryRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={state.gallery}\n          players={players}\n          cards={state.cards}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={isGameOver}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n          isLastRound={state?.lastRound}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGallery;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Avatar, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst GRADES = ['F', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\ntype DrawingGradeProps = {\n  value: number;\n};\n\nexport const DrawingGrade = ({ value }: DrawingGradeProps) => {\n  const { translate } = useLanguage();\n  const grade = GRADES[Math.floor(value / 0.084)];\n\n  const baseClass = 'a-drawing-grade';\n\n  return (\n    <Tooltip\n      title={translate(\n        `Nota baseada em quantos acertos o desenho teve: ${value * 100}%`,\n        `Grade based on the number of correct guesses the artwork got: ${value * 100}%`\n      )}\n    >\n      <Avatar className={clsx(baseClass, `${baseClass}--${grade[0]}`)}>{grade}</Avatar>\n    </Tooltip>\n  );\n};\n","// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { GameOverWrapper } from 'components/game-over';\nimport { TrophyIcon } from 'components/icons/TrophyIcon';\nimport { Translate } from 'components/language';\nimport { DrawingGrade } from './components/DrawingGrade';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      announcementIcon={<TrophyIcon />}\n      rateWidgetCustomText={<Translate pt=\"Alguma sugestão de carta?\" en=\"Any card suggestions?\" />}\n    >\n      <ul className=\"a-game-over__gallery\">\n        {state.drawings.map((entry: ArteRuimDrawing) => {\n          return (\n            <li className=\"a-game-over__gallery-item\" key={entry.drawing} style={{ width: '200px' }}>\n              <CanvasSVG drawing={entry.drawing} size={200} className=\"a-game-over__gallery-canvas\" />\n              <span className=\"a-game-over__credits\">\n                \"{entry.text}\" <Translate pt=\"por\" en=\"by\" /> {players[entry.playerId].name}\n              </span>\n              <DrawingGrade value={entry.successRate ?? 0} />\n            </li>\n          );\n        })}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseDraw from './PhaseDraw';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseGallery from './PhaseGallery';\nimport PhaseGameOver from './PhaseGameOver';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: THEME_COLORS.WOOD,\n  },\n});\n\nfunction SessionArteRuim({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.ARTE_RUIM.DRAW:\n        return PhaseDraw;\n      case PHASES.ARTE_RUIM.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.ARTE_RUIM.GALLERY:\n        return PhaseGallery;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.ARTE_RUIM}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionArteRuim;\n","import { useEffect, useState } from 'react';\n\n/**\n * Controls slide show\n * @param length\n */\nexport function useSlideShow(length: number): {\n  activeIndex: number;\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>;\n  isFirstGalleryRunThrough: boolean;\n  setIsFirstGalleryRunThrough: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && activeIndex === length - 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [isFirstGalleryRunThrough, activeIndex, length]);\n\n  return {\n    activeIndex,\n    setActiveIndex,\n    isFirstGalleryRunThrough,\n    setIsFirstGalleryRunThrough,\n  };\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { SEPARATOR } from 'utils/constants';\n\n/**\n * Delete duplicated votes on the 'value' side of the votes object\n * @param votes\n * @param target\n */\nconst deleteDuplicate = (votes: PlainObject, target: string) => {\n  const votesArray = Object.entries(votes);\n  const duplicateIndex = votesArray.findIndex((el) => el[1] === target);\n  if (duplicateIndex > -1) {\n    const duplicateKey = votesArray[duplicateIndex][0];\n    delete votes[duplicateKey];\n  }\n};\n\ntype Votes = {\n  [key: string]: string;\n};\n\n/**\n * Keeps track of an object with votes following the schema:\n * {<typeSEPARATORid...>: <typeSEPARATORid...>\n * @param keyType the type of the entry that will work as the key of the voting object\n * @param uniqueOnly Indicates if it is allow to voting duplicates\n * @param completeCount\n * @returns\n */\nexport function useVotingMatch(\n  keyType: string,\n  allowDuplicates: boolean = true,\n  completeCount?: number,\n  initialState: Votes = {}\n): {\n  votes: Votes;\n  setVotes: React.Dispatch<any>;\n  activeItem: string;\n  activateItem: (entryId: string) => void;\n  isVotingComplete: boolean;\n  resetVoting: (newInitialState: Votes) => void;\n} {\n  const [votes, setVotes]: [Votes, React.Dispatch<any>] = useState({ ...initialState });\n  const [activeItem, setActiveItem]: [string, React.Dispatch<any>] = useState('');\n  const [isVotingComplete, setIsVotingComplete]: [boolean, React.Dispatch<any>] = useState(false);\n\n  const activateItem = useCallback(\n    (entryId: string) => {\n      // When new Item is already the active item, deselect it\n      if (entryId === activeItem) {\n        return setActiveItem('');\n      }\n\n      const [type] = entryId.split(SEPARATOR);\n\n      // When no active item or type of new item is the same as active item, set it\n      if (!activeItem || activeItem.startsWith(type)) {\n        return setActiveItem(entryId);\n      }\n\n      // When new item type is a key\n      if (type === keyType) {\n        setVotes((prevVotes: Votes) => {\n          const copy = { ...prevVotes };\n          // Find and clear any previous vote if uniqueOnly\n          if (!allowDuplicates) {\n            deleteDuplicate(copy, activeItem);\n          }\n\n          return {\n            ...copy,\n            [entryId]: activeItem,\n          };\n        });\n        return setActiveItem('');\n      }\n\n      // When new item is a value\n      setVotes((prevVotes: Votes) => {\n        const copy = { ...prevVotes };\n        // Find and clear any previous vote if uniqueOnly\n        if (!allowDuplicates) {\n          deleteDuplicate(copy, entryId);\n        }\n\n        return {\n          ...copy,\n          [activeItem]: entryId,\n        };\n      });\n\n      return setActiveItem('');\n    },\n    [activeItem, keyType, allowDuplicates]\n  );\n\n  const resetVoting = (newInitialState: Votes) => {\n    setVotes(newInitialState ?? initialState);\n    setActiveItem('');\n  };\n\n  useEffect(() => {\n    if (completeCount) {\n      setIsVotingComplete(Object.keys(votes).length === completeCount);\n    }\n  }, [completeCount, votes]);\n\n  return { votes, setVotes, activeItem, activateItem, isVotingComplete, resetVoting };\n}\n"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","className","pt","en","value","min","max","step","onChange","CanvasSVG","drawing","size","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","xmlns","viewBox","overflow","style","width","index","d","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","startDrawing","current","stopDrawing","startLine","e","pos","target","getStage","getPointerPosition","Math","round","finishLine","point","lastLineEntry","concat","splice","handleMouseDown","handleMouseMove","lastLine","handleMouseUp","handleOffsetMouseUp","handleOffsetMouseDown","strokeWidthBySize","small","medium","large","direction","align","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onMouseLeave","window","document","addEventListener","onMouseEnter","removeEventListener","clsx","id","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","TrophyIcon","props","cx","cy","r","StarPoints","keyPrefix","quantity","hideText","isNegative","num","abs","StarsArray","Array","from","_","StarFilled","Ribbon","label","position","getColorFromLetter","getAnimationClass","RibbonGroup","labels","charAt","SlideShowControls","activeIndex","setActiveIndex","setStep","disableControls","barColor","windowDuration","useCountdown","duration","autoStart","onExpire","timeLeft","isRunning","pause","resume","useEffect","s","backgroundColor","icon","StepBackwardOutlined","PauseOutlined","PlayCircleOutlined","StepForwardOutlined","TrophyOutlined","SlideShow","children","leftClassName","rightClassName","arteRuimTimer","require","StepDraw","secretCard","onSubmitDrawing","translate","useLanguage","isDebugEnabled","useDevFeatures","isTimesUp","setTimesUp","volume","useAudio","src","autoPlay","audio","controls","seconds","stringify","cardId","header","undefined","footer","level","join","color","text","PanicIcon","background","padding","players","state","info","useStep","goToNextStep","user","useUser","isUserReady","useIsUserReady","setSecretCard","currentCard","request","useAPICall","apiFunction","ARTE_RUIM_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDrawingAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstruction","onPressButton","buttonText","time","contained","PaintingIcon","title","onClose","currentRound","withoutTimer","prepareVotes","votes","Object","entries","reduce","acc","drawingEntryId","cardEntryId","split","SEPARATOR","drawingId","EvaluationAllDrawings","drawings","activeItem","onActivateItem","liButtonBaseClass","drawingEntry","canvasEntryId","getEntryId","isActive","vote","playerId","name","ArteRuimCard","WarningOutlined","EvaluationAllCards","cards","cardEntry","letter","LETTERS","isUsed","values","includes","role","EvaluationRules","GalleryRules","ScoringRules","StepEvaluation","onSubmitVoting","isLoading","useLoading","canvasWidth","useCardWidth","keys","useVotingMatch","setVotes","activateItem","resetVoting","isVotingComplete","onGuessForMe","useCallback","usedDrawings","usedCards","drawingsKeys","filter","key","cardsKeys","shuffle","ceil","flat","newVotes","forEach","drawingKey","floor","selectOwnDrawing","playersDrawing","find","cardIndex","findIndex","card","cardKey","selection","useMock","content","wrap","type","ThunderboltOutlined","CloudUploadOutlined","EvaluatedDrawings","cardsDict","useMemo","drawingsDict","IconAvatar","AnimatedLoaderIcon","cSize","sort","maxWidth","useOnSubmitVotingAPIRequest","waitingRoomContent","EvaluateIcon","GalleryWindowCredits","artistName","artistAvatarId","GalleryWindowGuesses","playersSay","windowCardId","artistColor","orderBy","playersIds","count","isCorrect","entry","CrownFilled","MessageFilled","avatarId","getPlayersFromIds","GalleryWindowResult","playerArtist","correctAnswerId","correctAnswerText","playersPoints","correctGuesses","GarbageIcon","shape","StepGallery","gallery","isFirstGalleryRunThrough","useTemporarilyHidePlayersBar","artistId","currentColor","AVATARS","StepRanking","ranking","isGameOver","goToPreviousStep","isLastRound","gainedPointsDescriptions","lastRound","PictureOutlined","meta","useSlideShow","options","shortGame","some","player","score","PictureIcon","unskippable","GRADES","DrawingGrade","grade","baseClass","announcementIcon","rateWidgetCustomText","successRate","ConfigProvider","theme","primaryColor","THEME_COLORS","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseDraw","PhaseEvaluation","PhaseGallery","PhaseGameOver","PageError","setIsFirstGalleryRunThrough","deleteDuplicate","votesArray","duplicateIndex","el","keyType","allowDuplicates","completeCount","initialState","setActiveItem","setIsVotingComplete","entryId","startsWith","prevVotes","copy","newInitialState"],"sourceRoot":""}