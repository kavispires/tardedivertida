{"version":3,"file":"static/js/arte-ruim.b5f3738b.chunk.js","mappings":"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","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/cards/Card.tsx","components/cards/FloatingHand.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageBlurButtonContainer.tsx","components/cards/ImageCard.tsx","components/cards/ImageCardHand.tsx","components/cards/ImageCardBack.tsx","components/cards/ImageCardPreloadHand.tsx","components/cards/ImageCardSelectButton.tsx","components/points/StarPoints.tsx","components/ribbons/Ribbon.tsx","components/ribbons/RibbonGroup.tsx","components/slide-show/SlideShowControls.tsx","components/slide-show/SlideShow.tsx","games/arte-ruim/StepDraw.tsx","games/arte-ruim/PhaseDraw.tsx","games/arte-ruim/utils/api-requests.ts","games/arte-ruim/components/EvaluationAllDrawings.tsx","games/arte-ruim/components/Card.tsx","games/arte-ruim/components/EvaluationAllCards.tsx","games/arte-ruim/components/TextBlobs.tsx","games/arte-ruim/StepEvaluation.tsx","games/arte-ruim/PhaseEvaluation.tsx","games/arte-ruim/components/GalleryWindowCredits.tsx","games/arte-ruim/components/GalleryWindowGuesses.tsx","games/arte-ruim/components/GalleryWindowResult.tsx","games/arte-ruim/StepGallery.tsx","games/arte-ruim/utils/constants.ts","games/arte-ruim/StepRanking.tsx","games/arte-ruim/PhaseGallery.tsx","games/arte-ruim/components/DrawingGrade.tsx","games/arte-ruim/PhaseGameOver.tsx","games/arte-ruim/SessionArteRuim.tsx"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\n// State & Hooks\nimport { useGlobalState } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\n/**\n * Floating canvas resizer bar positioned on the top-left of the page\n * @returns\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <div className=\"canvas-resizer\">\n      <div className=\"canvas-resizer__label\">\n        <Translate pt=\"Tamanho das Images\" en=\"Image Size\" />\n      </div>\n      <Slider\n        className=\"canvas-resizer__slider\"\n        value={canvasSize ?? 100}\n        min={150}\n        max={500}\n        step={50}\n        onChange={setCanvasSize}\n      />\n    </div>\n  );\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  drawing: string;\n  className?: string;\n  size?: number;\n};\n\nexport const CanvasSVG = ({ drawing = '', className = '', size = 250 }: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 500 500\"\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${size}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n  className?: string;\n  showControls?: boolean;\n  strokeWidth?: 'small' | 'medium' | 'large';\n};\n\n/**\n * Canvas drawing board using react-konva\n * @param props\n * @returns\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  const handleMouseDown = (e: any) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    if (lastLineEntry[0] === x && lastLineEntry[1] === y) {\n      // add end point\n      lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLineEntry);\n      setLines(lines.concat());\n    }\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={500}\n        height={500}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        className={clsx('drawing-canvas', className)}\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","import clsx from 'clsx';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n\ntype CardProps = {\n  children: any;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype FloatingHandProps = {\n  children: any;\n  type?: 'hand' | 'stats';\n  subtitle?: any;\n};\n\nexport function FloatingHand({ children, subtitle = '', type = 'hand' }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n      >\n        <span className=\"floating-hand__label\">\n          <AvatarIcon\n            type={type === 'hand' ? 'hand-of-cards' : 'user-stats'}\n            size={isExpanded ? 40 : 60}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <Translate pt=\"Passe o mouse para expandir \" en=\"Hover to expand \" />\n          {subtitle}\n        </span>\n        {children}\n      </div>\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageBlurButtonProps = {\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n\ntype ImageBlurButtonContainerProps = {\n  cardId: string;\n  className?: string;\n  children: any;\n  [key: string]: any;\n};\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  className,\n  children,\n  ...props\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...props}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardProps = {\n  imageId: string;\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number;\n  className?: string;\n  preview?: Boolean;\n};\nexport const ImageCard = ({\n  imageId,\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  preview = true,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(imageId);\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          preview && !isBlurred\n            ? {\n                maskClassName: `${baseClass}__preview-mask`,\n              }\n            : false\n        }\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Components\nimport { ImageBlurButton, ImageCard } from '.';\n\ntype ImageCardHandProps = {\n  hand: string[];\n  onSelectCard?: GenericFunction;\n  selectButtonLabel?: string;\n  className?: string;\n  selectButtonClass?: string;\n  sizeRatio?: number;\n  cardSize?: number;\n  minCardSize?: number;\n  disabledSelectButton?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonLabel,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n}: ImageCardHandProps) {\n  const { translate } = useLanguage();\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(sizeRatio, 32, minCardSize);\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div key={`hand-${cardId}`} className=\"image-card-hand__card-container\">\n              {Boolean(onSelectCard) && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  className={selectButtonClass}\n                  onClick={() => onSelectCard!(cardId)}\n                  size=\"small\"\n                  disabled={disabledSelectButton}\n                >\n                  {translate('Selecionar', 'Select', selectButtonLabel)}\n                </Button>\n              )}\n              <ImageCard imageId={cardId} cardWidth={cardSize || cardWidth} />\n              <ImageBlurButton cardId={cardId} />\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Resources\nimport placeholder from 'assets/images/placeholder.jpg';\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardBackProps = {\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number | string;\n  className?: string;\n  previewImageId?: string;\n};\n\nexport const ImageCardBack = ({\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  previewImageId,\n}: ImageCardBackProps) => {\n  const baseClass = 'image-card-back';\n  const { shouldBeBlurred } = useBlurCards();\n  const isBlurred = shouldBeBlurred(previewImageId);\n  const imageURL = (previewImageId ?? '').replace(/-/g, '/');\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <Image\n        width={cardWidth}\n        src={placeholder}\n        preview={\n          Boolean(previewImageId)\n            ? !isBlurred\n              ? {\n                  maskClassName: 'image-card__preview-mask',\n                  src: `${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`,\n                }\n              : false\n            : false\n        }\n      />\n    </div>\n  );\n};\n","// Components\nimport { ImageCard } from './ImageCard';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { StarFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype StarPointsProps = {\n  keyPrefix: string;\n  quantity?: number;\n  className?: string;\n  hideText?: boolean;\n};\n\nexport const StarPoints = ({ keyPrefix, quantity, className, hideText }: StarPointsProps) => {\n  if (!quantity) {\n    return <span />;\n  }\n\n  const isNegative = quantity < 0;\n  const num = Math.abs(quantity);\n\n  const StarsArray = Array.from({ length: num }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n\n  return (\n    <span className={clsx('star-points', isNegative && 'star-points--negative', className)}>\n      {isNegative ? '-' : '+'} <span className=\"star-points__stars\">{StarsArray}</span>\n      {!hideText && (\n        <>\n          <Translate pt=\"ponto\" en=\"point\" />\n          {num > 1 ? 's' : ''}\n        </>\n      )}\n    </span>\n  );\n};\n","import clsx from 'clsx';\n// Utils\nimport { getAnimationClass, getColorFromLetter } from 'utils/helpers';\n\ntype RibbonProps = {\n  label: string;\n  position?: 'absolute' | 'static';\n};\n\nexport function Ribbon({ label, position = 'absolute' }: RibbonProps): JSX.Element {\n  return (\n    <div className={clsx('ribbon', `ribbon--${position}`)}>\n      <div\n        className={clsx(\n          'ribbon__content',\n          `ribbon__content--${label}`,\n          `color-background--${getColorFromLetter(label)}`,\n          getAnimationClass('bounceIn')\n        )}\n      >\n        {label}\n      </div>\n    </div>\n  );\n}\n","import { Ribbon } from './Ribbon';\n\ntype RibbonGroupProps = {\n  labels: string[];\n};\n\nexport function RibbonGroup({ labels }: RibbonGroupProps) {\n  return (\n    <div className=\"ribbon-group ribbon--absolute\">\n      {labels.length > 0 &&\n        labels.map((label) => (\n          <Ribbon\n            key={label}\n            label={label.length > 0 ? label.charAt(label.length - 1) : label}\n            position=\"static\"\n          />\n        ))}\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Utils\nimport { inNSeconds } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n};\n\nexport function SlideShowControls({\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor = 'gray',\n  windowDuration = 10,\n}: SlideShowControlsProps) {\n  const { minutes, seconds, isRunning, pause, resume } = useTimer({\n    expiryTimestamp: inNSeconds(windowDuration * length),\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  const time = minutes * 60 + seconds;\n\n  // Automatically go to the next window every {windowDuration} seconds\n  useEffect(() => {\n    if (time < windowDuration * length && time > 0 && time % windowDuration === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n    }\n  }, [time, setActiveIndex, length, windowDuration]);\n\n  const goToPreviousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n  };\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">\n          {Array(length)\n            .fill('')\n            .map((e, i) => {\n              return (\n                <div\n                  key={`control-timer-bar-${e + i}`}\n                  className=\"slide-show__controls-timer-bar-node\"\n                  style={{ width: `${99 / length}%` }}\n                >\n                  {e}\n                </div>\n              );\n            })}\n        </div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${Math.abs((windowDuration * time) / length - 100)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={goToPreviousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Anterior\" en=\"Previous\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={goToNextStep}\n            disabled={disableControls || activeIndex === length - 1}\n          >\n            <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { SlideShowControls } from './SlideShowControls';\n\ntype SlideShowProps = {\n  players: GamePlayers;\n  children: [ReactChildren, ReactChildren];\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n  className?: string;\n  leftClassName?: string;\n  rightClassName?: string;\n};\n\n/**\n * Display Slick show with a left and right sides with full navigation controls\n * @param props\n * @returns\n */\nexport function SlideShow({\n  children,\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor,\n  windowDuration = 10,\n  className = '',\n  leftClassName = '',\n  rightClassName = '',\n}: SlideShowProps) {\n  return (\n    <div className={clsx('slide-show', className)}>\n      <div className={clsx('slide-show__left', leftClassName)} id=\"gallery-left\">\n        {children[0]}\n      </div>\n      <div className={clsx('slide-show__right', rightClassName)} id=\"gallery-right\">\n        {children[1]}\n      </div>\n      <SlideShowControls\n        length={length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={disableControls}\n        barColor={barColor}\n        windowDuration={windowDuration}\n      />\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { useDevFeatures, useLanguage } from 'hooks';\nimport { inNSeconds } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { Icons } from 'components/icons';\nimport { DrawingCanvas } from 'components/canvas';\n\ntype StepDrawProps = {\n  secretCard: ArteRuimCard | PlainObject;\n  onSubmitDrawing: GenericFunction;\n};\n\nexport function StepDraw({ secretCard, onSubmitDrawing }: StepDrawProps) {\n  const { translate } = useLanguage();\n  const { isDebugEnabled } = useDevFeatures();\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(11),\n    autoStart: true,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmitDrawing({\n        drawing: JSON.stringify(lines),\n        cardId: secretCard.id,\n      });\n    },\n  });\n\n  return (\n    <Step>\n      <Card\n        size=\"large\"\n        header={translate('Desenhe', 'Draw', isDebugEnabled ? secretCard?.id : undefined)}\n        footer={Array(secretCard?.level).fill('•').join('')}\n        className=\"a-draw-step__card\"\n        color=\"yellow\"\n      >\n        {secretCard?.text}\n        <span className=\"a-draw-step__timer\">{seconds > 0 ? seconds - 1 : 0}</span>\n      </Card>\n      {isTimesUp ? (\n        <Icons.Panic style={{ background: 'white', width: '500px', padding: '2em' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} />\n      )}\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport useSound from 'use-sound';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepDraw } from './StepDraw';\n\n// Sound\nconst arteRuimTimer = require('assets/sounds/arte-ruim-timer.mp3');\n\nfunction PhaseDraw({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const [secretCard, setSecretCard] = useState({});\n  const [play] = useSound(arteRuimTimer, { volume: 0.4 });\n\n  useEffect(() => {\n    setSecretCard(players[user?.id]?.currentCard ?? {});\n  }, [players, user?.id]);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  const onStartDrawing = () => {\n    play();\n    setStep(2);\n  };\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.DRAW}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam seus desenhos!',\n          'Please wait while other players finish their artwork!'\n        )}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt={`Essa rodada usará cartas de nível ${state?.level || '?'}`}\n              en={`This round uses cards of level ${state?.level || '?'}`}\n            />\n          </Instruction>\n        </RoundAnnouncement>\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"painting\"\n          title={translate('Desenhe!', 'Draw!')}\n          buttonText={translate('Um dó, lá, si... vamos ir... já!', 'Ready! Set! Go!')}\n          onClose={onStartDrawing}\n          currentRound={state?.round?.current}\n          withoutTimer\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você terá 10 segundos para ler a sua carta e desenhá-la.\n                  <br />\n                  Aperte o botão quando estiver pronto!\n                  <br />\n                  Não vale usar números e letras.\n                  <br />\n                  Fique esperto porque o tempo começa assim que você apertar.\n                </>\n              }\n              en={\n                <>\n                  You'll have 10 seconds to read and draw your card.\n                  <br />\n                  Press the button when you're ready!\n                  <br />\n                  You can NOT use numbers or letters.\n                  <br />\n                  Be aware of the timer! It starts as soon as you press the button.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepDraw secretCard={secretCard} onSubmitDrawing={onSubmitDrawing} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDraw;\n","import { ARTE_RUIM_API } from 'services/adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-voting',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate(\n      'Avaliação enviada! Agora aguarde os outros jogadores',\n      'Evaluation sent successfully! Wait for the other players'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n      'Oops, the application failed to send your evaluation'\n    ),\n  });\n\n  return (payload: SubmitVotingPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Utils\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Ribbon } from 'components/ribbons';\n\ntype EvaluationAllDrawingsProps = {\n  drawings: ArteRuimDrawing[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  canvasSize: number;\n  players: GamePlayers;\n};\n\nexport function EvaluationAllDrawings({\n  drawings,\n  activeItem,\n  onActivateItem,\n  votes,\n  canvasSize,\n  players,\n}: EvaluationAllDrawingsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = getEntryId(['drawing', drawingEntry.id]);\n        const isActive = activeItem === canvasEntryId;\n        const vote = votes[canvasEntryId];\n        return (\n          <li\n            key={canvasEntryId}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon label={vote.charAt(vote.length - 1)} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              size={canvasSize}\n            />\n            <span className=\"a-evaluation-all-drawings__artist\">{players[drawingEntry.playerId].name}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Helpers\nimport { getColorFromLetter } from 'utils/helpers';\n// Components\nimport { Card } from 'components/cards';\n\ntype ArteRuimCardProps = {\n  text?: any;\n  level: number;\n  header?: string;\n};\n\nexport const ArteRuimCard = ({ text, level, header = 'X' }: ArteRuimCardProps) => {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(level).fill('•').join('')}\n    >\n      {text ?? <WarningOutlined />}\n    </Card>\n  );\n};\n","import clsx from 'clsx';\nimport { useDevFeatures } from 'hooks';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { ArteRuimCard as Card } from './Card';\n\ntype EvaluationAllCardsProps = {\n  cards: ArteRuimCard[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function EvaluationAllCards({ cards, activeItem, onActivateItem, votes }: EvaluationAllCardsProps) {\n  const { isDebugEnabled } = useDevFeatures();\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['card', cardEntry.id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              text={cardEntry.text}\n              level={cardEntry.level}\n              header={isDebugEnabled ? cardEntry.id : letter}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\nexport const EvaluationRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n          par.\n          <br />\n          Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você selecionou.\n          <br />\n          Quando encontrar todos os pares, envie sua avaliação!\n        </>\n      }\n      en={\n        <>\n          Find the pairs of artwork and card by clicking on a card or artwork then on its match.\n          <br />\n          A ribbon will show up on the artwork with the color and letter of the matching card.\n          <br />\n          When you're done, click the button to send your evaluation!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const GalleryRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Agora, mostraremos cada arte, o que os jogadores votaram e a resposta final.\n          <br />\n          Se você votou na expressão correta, você ganha 2 pontos.\n          <br />\n          Quando for a sua arte, você ganha 1 ponto para cada pessoa que votou corretamente.\n        </>\n      }\n      en={\n        <>\n          Now we show each art, what players voted, and the final answer.\n          <br />\n          You get 2 points if you selected the right card.\n          <br />\n          When players selected the correct card for your artwork, you get 1 point for each match!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const ScoringRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você ganha 2 pontos para cada ligação correta entre arte e expressão.\n          <br />\n          Para cada ligação correta que sua arte ganha, você recebe 1 ponto.\n        </>\n      }\n      en={\n        <>\n          You get 2 points if you matched the right card with artwork.\n          <br />\n          For you own artwork, you get 1 point for each correct match the other players done.\n        </>\n      }\n    />\n  </Instruction>\n);\n","import { useCallback, useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { CloudUploadOutlined, ThunderboltOutlined } from '@ant-design/icons';\n// Hooks\nimport {\n  useGlobalState,\n  useLanguage,\n  useUser,\n  useLoading,\n  useVotingMatch,\n  useCardWidth,\n  useMock,\n} from 'hooks';\n// Utils\nimport { LETTERS, SEPARATOR } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { PopoverRule } from 'components/rules';\nimport { CanvasResizer } from 'components/canvas';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { EvaluationAllDrawings } from './components/EvaluationAllDrawings';\nimport { EvaluationAllCards } from './components/EvaluationAllCards';\nimport { EvaluationRules } from './components/TextBlobs';\n\nfunction prepareVotes(votes: PlainObject) {\n  return Object.entries(votes).reduce((acc: PlainObject, [drawingEntryId, cardEntryId]) => {\n    const [, drawingId] = drawingEntryId.split(SEPARATOR);\n    const [, cardId] = cardEntryId.split(SEPARATOR);\n    acc[drawingId] = cardId;\n    return acc;\n  }, {});\n}\n\ntype StepEvaluationProps = {\n  drawings: ArteRuimDrawing[];\n  cards: ArteRuimCard[];\n  players: GamePlayers;\n  onSubmitVoting: GenericFunction;\n};\n\nexport function StepEvaluation({ drawings, cards, players, onSubmitVoting }: StepEvaluationProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n  const { votes, setVotes, activeItem, activateItem, resetVoting } = useVotingMatch(\n    'drawing',\n    true,\n    drawings.length || 2\n  );\n\n  const onGuessForMe = useCallback(() => {\n    const usedDrawings = Object.keys(votes);\n    const usedCards = Object.values(votes);\n    const drawingsKeys = drawings\n      .map((e: ArteRuimDrawing) => getEntryId(['drawing', e.id]))\n      .filter((key: string) => !usedDrawings.includes(key));\n    const cardsKeys = shuffle(\n      cards\n        .map((e: ArteRuimCard, index: number) => getEntryId(['card', e.id, LETTERS[index]]))\n        .filter((key: string) => !usedCards.includes(key))\n    );\n    const newVotes = { ...votes };\n    drawingsKeys.forEach((drawingKey: string, index: number) => {\n      if (!newVotes[drawingKey]) {\n        newVotes[drawingKey] = cardsKeys[index];\n      }\n    });\n    setVotes(newVotes);\n  }, [cards, drawings, votes, setVotes]);\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  const selectOwnDrawing = useCallback(() => {\n    const playersDrawing = (drawings ?? []).find((drawing: ArteRuimDrawing) => drawing.playerId === user.id);\n    if (playersDrawing) {\n      const drawingKey = getEntryId(['drawing', playersDrawing.id]);\n      const cardIndex = (cards ?? []).findIndex((card: ArteRuimCard) => card.playerId === user.id);\n      const cardKey = getEntryId(['card', playersDrawing.id, LETTERS[cardIndex]]);\n      const vote = { [drawingKey]: cardKey };\n      return vote;\n    }\n    return {};\n  }, [user, drawings, cards]);\n\n  // Auto-select the players own drawing and word\n  useEffect(() => {\n    const selection = selectOwnDrawing();\n    if (selection) {\n      setVotes((s: any) => ({ ...s, ...selection }));\n    }\n  }, [selectOwnDrawing, setVotes]);\n\n  useMock(() => {\n    onGuessForMe();\n  }, []);\n\n  return (\n    <Step className=\"a-evaluation-step\">\n      <PopoverRule content={<EvaluationRules />} />\n      <CanvasResizer />\n      <Title>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </Title>\n\n      <Space className=\"space-container\" align=\"center\" wrap>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={() => resetVoting(selectOwnDrawing())}\n          disabled={isLoading}\n        >\n          <Translate pt=\"Limpar seleções\" en=\"Clear selections\" />\n        </Button>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={onGuessForMe}\n          disabled={isLoading || Object.values(votes).length === drawings.length}\n        >\n          <Translate pt=\"Chutar restantes\" en=\"Guess for me\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => onSubmitVoting({ votes: prepareVotes(votes) })}\n          disabled={isLoading || Object.values(votes).length < drawings.length}\n          icon={<CloudUploadOutlined />}\n        >\n          <Translate pt=\"Enviar sua avaliação\" en=\"Send evaluation\" />\n        </Button>\n      </Space>\n\n      <EvaluationAllDrawings\n        drawings={drawings ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        canvasSize={canvasSize}\n        players={players}\n      />\n\n      <EvaluationAllCards\n        cards={cards ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n\n      <ReadyPlayersBar\n        players={players}\n        readyText={translate('Já acabei, anda logo!', \"I'm done, hurry up!\")}\n        readyTextPlural={translate('Já acabamos, anda logo!', \"We're done, hurry up!\")}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVotingAPIRequest } from './utils/api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { StepEvaluation } from './StepEvaluation';\nimport { EvaluationRules } from './components/TextBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction EvaluationPhase({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const isUserReady = useIsUserReady(players, state);\n  const onSubmitVoting = useOnSubmitVotingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.EVALUATION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam de avaliar!',\n          'Please wait while other players finish their evaluations!'\n        )}\n      >\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          type=\"evaluate\"\n          title={translate('Adivinhação', 'Match the Pairs')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <EvaluationRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepEvaluation\n          drawings={state.drawings}\n          cards={state.cards}\n          players={players}\n          onSubmitVoting={onSubmitVoting}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","// Components\nimport { AvatarEntry } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowCreditsProps = {\n  artistName: string;\n  artistAvatarId: string;\n};\n\nexport function GalleryWindowCredits({ artistName, artistAvatarId }: GalleryWindowCreditsProps) {\n  return (\n    <div className=\"a-gallery__credits\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Artista\" en=\"Artist\" />\n      </div>\n      <span className=\"a-gallery__artist-name\">\n        <AvatarEntry id={artistAvatarId} name={artistName} />\n      </span>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowGuessesProps = {\n  playersSay: PlayersSay;\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  windowCardId: string;\n  artistColor: string;\n};\n\nexport function GalleryWindowGuesses({\n  playersSay,\n  players,\n  cards,\n  windowCardId,\n  artistColor,\n}: GalleryWindowGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        card: cards.find((i) => i.id === cardId),\n        playersIds,\n        count: playersIds.length,\n        isCorrect: windowCardId === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc']\n  );\n\n  return (\n    <div className=\"a-gallery__guesses\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Participantes votaram\" en=\"Players voted\" />\n      </div>\n      {entries.map((entry, index) => {\n        return (\n          <div key={`guess-${entry.cardId}-${index}`} className=\"a-gallery__guess\">\n            <div\n              className=\"a-gallery__speech-bubble\"\n              style={entry.isCorrect ? { backgroundColor: artistColor, color: 'white' } : {}}\n            >\n              {entry.isCorrect ? (\n                <CrownFilled className=\"a-gallery__speech-bubble-icon\" style={{ color: 'white' }} />\n              ) : (\n                <MessageFilled className=\"a-gallery__speech-bubble-icon\" />\n              )}\n              {entry.card?.text}\n            </div>\n            <div className=\"a-gallery__players\">\n              <AntAvatar.Group>\n                {entry.playersIds.map((playerId) => (\n                  <Avatar\n                    id={players[playerId].avatarId}\n                    key={`guess-avatar-${players[playerId].avatarId}`}\n                  />\n                ))}\n              </AntAvatar.Group>\n              <span className=\"a-gallery__players-names\">\n                {getPlayersFromIds(entry.playersIds, players, true).join(', ')}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar, AvatarIcon } from 'components/avatars';\nimport { StarPoints } from 'components/points';\n\ntype GalleryWindowResultProps = {\n  playerArtist: GamePlayer;\n  correctAnswerId: string;\n  correctAnswerText: string;\n  playersPoints?: NumberDictionary;\n  playersSay: PlayersSay;\n  players: GamePlayers;\n};\n\nexport function GalleryWindowResult({\n  playerArtist,\n  correctAnswerId,\n  correctAnswerText,\n  playersPoints,\n  playersSay,\n  players,\n}: GalleryWindowResultProps) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswerId] ?? {});\n\n  return (\n    <div className=\"a-gallery__result\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"E o título correto da obra é\" en=\"And the masterpiece title is\" />\n      </div>\n      <div className=\"a-gallery__speech-bubble\">\n        <CrownFilled className=\"a-gallery__speech-bubble-icon\" />\n        {correctAnswerText}\n      </div>\n      {correctGuesses.length ? (\n        <>\n          <div className=\"a-gallery__players\">\n            <AntAvatar.Group>\n              {correctGuesses.map((playerId) => {\n                return <Avatar key={`correct-guess-avatar-${playerId}`} id={players[playerId].avatarId} />;\n              })}\n            </AntAvatar.Group>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${playerArtist.id}`} />\n            <span className=\"a-gallery__players-names\">\n              {getPlayersFromIds(correctGuesses, players, true).join(', ')}\n            </span>\n          </div>\n          <div className=\"a-gallery__artist-points\">\n            <Avatar id={playerArtist.avatarId} />{' '}\n            <StarPoints\n              quantity={playersPoints?.[playerArtist.id]}\n              keyPrefix={`artist-points-${playerArtist.id}`}\n            />{' '}\n            <span className=\"a-gallery__players-names\">{playerArtist.name}</span>\n          </div>\n        </>\n      ) : (\n        <Typography.Text className=\"a-gallery__no-wins\">\n          <AvatarIcon type=\"garbage\" size=\"large\" shape=\"square\" />\n          <Translate\n            pt=\"Nossa, ninguém acertou. Esse desenho deve ter sido muito ruim.\"\n            en=\"Wow, nobody got it. It must have been a very crappy drawing. Shame...\"\n          />\n        </Typography.Text>\n      )}\n    </div>\n  );\n}\n","// Hooks\nimport { useCardWidth } from 'hooks';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { WINDOW_DURATION } from './utils/constants';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { GalleryWindowCredits } from './components/GalleryWindowCredits';\nimport { GalleryWindowGuesses } from './components/GalleryWindowGuesses';\nimport { GalleryWindowResult } from './components/GalleryWindowResult';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepGalleryProps = {\n  gallery: ArteRuimWindow[];\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n};\n\nexport function StepGallery({\n  gallery,\n  players,\n  cards,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  const canvasWidth = useCardWidth(2, 16, 200, 500);\n\n  const { drawing, artistId, id, text, playersPoints, playersSay } = gallery[activeIndex];\n\n  const playerArtist = players[artistId];\n  const currentColor = AVATARS[playerArtist.avatarId].color;\n\n  return (\n    <Step className=\"a-gallery-phase__windows\">\n      <Title size=\"small\">\n        <Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRules />} />\n\n      <SlideShow\n        players={players}\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={currentColor}\n        windowDuration={WINDOW_DURATION}\n        leftClassName=\"a-gallery__canvas\"\n        rightClassName=\"a-gallery__info\"\n      >\n        <CanvasSVG drawing={drawing} size={canvasWidth} className=\"a-gallery__drawing\" />\n\n        <>\n          <GalleryWindowCredits artistName={playerArtist.name} artistAvatarId={playerArtist.avatarId} />\n\n          <GalleryWindowGuesses\n            players={players}\n            playersSay={playersSay}\n            cards={cards}\n            windowCardId={id}\n            artistColor={currentColor}\n          />\n\n          <GalleryWindowResult\n            playerArtist={playerArtist}\n            correctAnswerId={id}\n            correctAnswerText={text}\n            playersPoints={playersPoints}\n            playersSay={playersSay}\n            players={players}\n          />\n        </>\n      </SlideShow>\n    </Step>\n  );\n}\n","export const WINDOW_DURATION = 10;\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Components\nimport { RoundsLeftInstruction } from 'components/text';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { AdminNextRoundButton } from 'components/admin';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  goToPreviousStep: GenericFunction;\n  setActiveIndex: GenericFunction;\n  isLastRound?: boolean;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  isGameOver,\n  round,\n  goToPreviousStep,\n  setActiveIndex,\n  isLastRound,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          pt=\"Votos corretos em seu desenho por outros jogadores\"\n          en=\"Correct guesses on your drawing by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules />} />\n\n      {!isGameOver && <RoundsLeftInstruction round={round} />}\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria De Novo\" en=\"See Gallery Again\" />\n      </Button>\n\n      <AdminNextRoundButton round={round} lastRound={isLastRound} />\n    </StepRankingWrapper>\n  );\n}\n","// State & Hooks\nimport { useLanguage, useSlideShow, useStep } from 'hooks';\n// Resources and Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { GalleryRules } from './components/TextBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\n\nfunction PhaseGallery({ players, state, info, meta }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep, setStep } = useStep(0);\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(state.gallery.length);\n\n  const isGameOver = meta.options?.shortGame\n    ? state.round.current === 5\n    : Object.values(players).some((player) => player.score > 50);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.GALLERY}\n      className=\"a-gallery-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          type=\"picture\"\n          title={translate('Galeria de Arte', 'Art Gallery')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n        >\n          <GalleryRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={state.gallery}\n          players={players}\n          cards={state.cards}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={isGameOver}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n          isLastRound={state?.lastRound}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGallery;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Avatar, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n\nconst GRADES = ['F', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\ntype DrawingGradeProps = {\n  value: number;\n};\n\nexport const DrawingGrade = ({ value }: DrawingGradeProps) => {\n  const { translate } = useLanguage();\n  const grade = GRADES[Math.floor(value / 0.084)];\n\n  const baseClass = 'a-drawing-grade';\n\n  return (\n    <Tooltip\n      title={translate(\n        `Nota baseada em quantos acertos o desenho teve: ${value * 100}%`,\n        `Grade based on the number of correct guesses the artwork got: ${value * 100}%`\n      )}\n    >\n      <Avatar className={clsx(baseClass, `${baseClass}--${grade[0]}`)}>{grade}</Avatar>\n    </Tooltip>\n  );\n};\n","// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\nimport { DrawingGrade } from './components/DrawingGrade';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      announcementIcon=\"trophy\"\n      rateWidgetCustomText={<Translate pt=\"Alguma sugestão de carta?\" en=\"Any card suggestions?\" />}\n    >\n      <ul className=\"a-game-over__gallery\">\n        {state.drawings.map((entry: ArteRuimDrawing) => {\n          return (\n            <li className=\"a-game-over__gallery-item\" key={entry.drawing} style={{ width: '200px' }}>\n              <CanvasSVG drawing={entry.drawing} size={200} className=\"a-game-over__gallery-canvas\" />\n              <span className=\"a-game-over__credits\">\n                \"{entry.text}\" <Translate pt=\"por\" en=\"by\" /> {players[entry.playerId].name}\n              </span>\n              <DrawingGrade value={entry.successRate ?? 0} />\n            </li>\n          );\n        })}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseDraw from './PhaseDraw';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseGallery from './PhaseGallery';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionArteRuim({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.ARTE_RUIM.DRAW:\n        return PhaseDraw;\n      case PHASES.ARTE_RUIM.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.ARTE_RUIM.GALLERY:\n        return PhaseGallery;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.ARTE_RUIM}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionArteRuim;\n"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","className","pt","en","value","min","max","step","onChange","CanvasSVG","drawing","size","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","xmlns","viewBox","overflow","style","width","index","d","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","handleMouseDown","e","current","pos","target","getStage","getPointerPosition","Math","round","handleMouseMove","point","lastLine","concat","splice","handleMouseUp","lastLineEntry","strokeWidthBySize","small","medium","large","direction","align","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","clsx","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","Card","children","header","footer","color","randomColor","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","startsWith","backgroundColor","FloatingHand","subtitle","type","isExpanded","setIsExpanded","translate","useLanguage","onMouseOver","onMouseLeave","alt","ImageBlurButton","cardId","useBlurCards","blurCard","isBlurEnabled","placement","title","ghost","EyeInvisibleOutlined","ImageBlurButtonContainer","props","ImageCard","imageId","cardWidth","preview","shouldBeBlurred","fallbackName","imageURL","replace","isBlurred","src","process","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardHand","hand","onSelectCard","selectButtonLabel","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","useCardWidth","Boolean","icon","DownSquareOutlined","ImageCardBack","previewImageId","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","shape","UpCircleOutlined","custom","StarPoints","keyPrefix","quantity","hideText","isNegative","num","abs","StarsArray","Array","from","_","StarFilled","Ribbon","label","position","getAnimationClass","RibbonGroup","labels","charAt","SlideShowControls","activeIndex","setActiveIndex","setStep","disableControls","barColor","windowDuration","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","minutes","seconds","isRunning","pause","resume","time","useEffect","s","StepBackwardOutlined","PauseOutlined","PlayCircleOutlined","StepForwardOutlined","TrophyOutlined","SlideShow","leftClassName","rightClassName","id","StepDraw","secretCard","onSubmitDrawing","isDebugEnabled","useDevFeatures","isTimesUp","setTimesUp","stringify","undefined","level","join","text","background","padding","arteRuimTimer","require","players","state","info","useStep","goToNextStep","user","useUser","isUserReady","useIsUserReady","setSecretCard","useSound","volume","play","currentCard","request","useAPICall","apiFunction","ARTE_RUIM_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDrawingAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstruction","onPressButton","buttonText","contained","onClose","currentRound","withoutTimer","EvaluationAllDrawings","drawings","activeItem","onActivateItem","votes","liButtonBaseClass","drawingEntry","canvasEntryId","getEntryId","isActive","vote","playerId","name","ArteRuimCard","WarningOutlined","EvaluationAllCards","cards","cardEntry","letter","LETTERS","cardEntryId","isUsed","Object","values","includes","role","EvaluationRules","GalleryRules","ScoringRules","prepareVotes","entries","reduce","acc","drawingEntryId","split","SEPARATOR","drawingId","StepEvaluation","onSubmitVoting","isLoading","useLoading","canvasWidth","keys","useVotingMatch","setVotes","activateItem","resetVoting","onGuessForMe","useCallback","usedDrawings","usedCards","drawingsKeys","filter","key","cardsKeys","shuffle","newVotes","forEach","drawingKey","floor","selectOwnDrawing","playersDrawing","find","cardIndex","findIndex","card","cardKey","selection","useMock","content","wrap","ThunderboltOutlined","CloudUploadOutlined","readyText","readyTextPlural","useOnSubmitVotingAPIRequest","GalleryWindowCredits","artistName","artistAvatarId","GalleryWindowGuesses","playersSay","windowCardId","artistColor","orderBy","playersIds","count","isCorrect","entry","CrownFilled","MessageFilled","avatarId","getPlayersFromIds","GalleryWindowResult","playerArtist","correctAnswerId","correctAnswerText","playersPoints","correctGuesses","StepGallery","gallery","isFirstGalleryRunThrough","artistId","currentColor","AVATARS","StepRanking","ranking","isGameOver","goToPreviousStep","isLastRound","gainedPointsDescriptions","PictureOutlined","lastRound","meta","useSlideShow","options","shortGame","some","player","score","unskippable","GRADES","DrawingGrade","grade","announcementIcon","rateWidgetCustomText","successRate","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseDraw","PhaseEvaluation","PhaseGallery","PhaseGameOver","PageError"],"sourceRoot":""}