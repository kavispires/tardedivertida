{"version":3,"file":"static/js/page-users.278a09c1.chunk.js","mappings":"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","sources":["pages/Me/Users.tsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { cloneDeep, merge } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Ant Design Resources\nimport { App, Button, Input, Select, Space, Typography } from 'antd';\n// Services\nimport { USER_API, USER_API_ACTIONS } from 'services/adapters';\nimport { firestore } from 'services/firebase';\n// Sass\nimport './Me.scss';\n// Components\n\ninterface GameUserEntry {\n  gameName?: GameName;\n  gameId: GameId;\n  startedAt: number;\n  endedAt: number;\n  playerCount: number;\n  placement: number;\n  win?: boolean;\n  last?: boolean;\n  achievements: AchievementKey[];\n}\n\ntype AvatarId = string;\ntype AchievementKey = string;\ntype GameName = string;\ntype DailyEntry = {\n  id: string; // Format YYYY-MM-DD\n  number: number;\n  victory: boolean;\n  hearts: number;\n  letters: string[];\n};\n\n/**\n * User database structure saved in Firestore\n */\ninterface FirebaseUserDB {\n  id: string;\n  isAdmin?: boolean;\n  isGuest?: boolean;\n  preferredLanguage: Language;\n  names: string[]; // unique list but most recent comes last\n  gender?: string;\n  avatars: Record<AvatarId, number>;\n  ratings: Record<GameName, number>;\n  games: Record<GameName, Record<GameId, GameUserEntry>>;\n  blurredImages: Record<ImageCardId, true>;\n  daily: Record<CardId, DailyEntry>;\n}\n\nconst DEFAULT_FIREBASE_USER_DB: FirebaseUserDB = {\n  id: '',\n  names: [],\n  avatars: {},\n  preferredLanguage: 'en',\n  games: {},\n  gender: 'unknown',\n  ratings: {},\n  blurredImages: {},\n  daily: {},\n};\n\nfunction Users() {\n  useTitle('Users - Tarde Divertida');\n  const { message, notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const [selectedUserO, setSelectedUserO] = useState(DEFAULT_FIREBASE_USER_DB);\n  const [selectedUserD, setSelectedUserD] = useState(DEFAULT_FIREBASE_USER_DB);\n\n  const usersQuery = useQuery({\n    queryKey: ['users'],\n    queryFn: async () => {\n      const querySnapshot = await getDocs(\n        query(collection(firestore, 'users'), where('isGuest', '!=', true)),\n      );\n      const result: any[] = [];\n      querySnapshot.forEach((doc) => result.push(doc.data()));\n      return result;\n    },\n  });\n\n  const usersMutation = useMutation({\n    mutationKey: ['users'],\n    mutationFn: async (data: FirebaseUserDB) => {\n      USER_API.run({ action: USER_API_ACTIONS.UPDATE_USER_DB, ...data });\n    },\n    onSuccess: () => {\n      message.success('User updated');\n      queryClient.invalidateQueries({\n        queryKey: ['users'],\n      });\n    },\n    onError: (error: any) => {\n      notification.error({\n        message: 'Error',\n        description: error.message,\n      });\n    },\n  });\n\n  const data: FirebaseUserDB[] = usersQuery.data ?? [];\n\n  const onSelectUserO = (uid: string) => {\n    setSelectedUserO(data.find((e) => e.id === uid) ?? DEFAULT_FIREBASE_USER_DB);\n  };\n\n  const onSelectUserD = (uid: string) => {\n    setSelectedUserD(data.find((e) => e.id === uid) ?? DEFAULT_FIREBASE_USER_DB);\n  };\n\n  const options = data.map((entry) => (\n    <Select.Option key={entry.id} value={entry.id}>\n      <strong>{entry?.names?.[0]}</strong>: {entry.id}\n    </Select.Option>\n  ));\n\n  const selectO = (\n    <Select onChange={onSelectUserO} style={{ minWidth: 300 }}>\n      {options}\n    </Select>\n  );\n\n  const selectD = (\n    <Select onChange={onSelectUserD} style={{ minWidth: 300 }}>\n      {options}\n    </Select>\n  );\n\n  const mergedUser = useMemo(\n    () => merge(cloneDeep(selectedUserO ?? {}), cloneDeep(selectedUserD ?? {})),\n    [selectedUserO, selectedUserD],\n  );\n\n  console.log(data);\n\n  return (\n    <div>\n      <Typography.Title>Users</Typography.Title>\n      {usersQuery.isLoading && <Typography.Paragraph>Loading...</Typography.Paragraph>}\n      <Space className=\"margin\" style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)' }}>\n        <Space direction=\"vertical\">\n          <Typography.Title level={2}>Origin</Typography.Title>\n          <Space className=\"margin\">{selectO}</Space>\n          <Typography.Paragraph>\n            {selectedUserO?.names?.join(', ') ?? 'No user selected'}\n          </Typography.Paragraph>\n          <Input.TextArea\n            value={JSON.stringify(selectedUserO ?? {}, null, 2)}\n            rows={20}\n            cols={50}\n            className=\"margin\"\n          />\n        </Space>\n\n        <Space direction=\"vertical\">\n          <Typography.Title level={2}>Destination</Typography.Title>\n          <Space className=\"margin\">{selectD}</Space>\n          <Typography.Paragraph>\n            {selectedUserD?.names?.join(', ') ?? 'No user selected'}\n          </Typography.Paragraph>\n          <Input.TextArea\n            value={JSON.stringify(selectedUserD ?? {}, null, 2)}\n            rows={20}\n            cols={50}\n            className=\"margin\"\n          />\n        </Space>\n      </Space>\n\n      <Space direction=\"vertical\">\n        <Typography.Title level={2}>Merge</Typography.Title>\n\n        <Typography.Paragraph>{mergedUser?.names?.join(', ') ?? 'No user selected'}</Typography.Paragraph>\n        <Input.TextArea\n          value={JSON.stringify(mergedUser ?? {}, null, 2)}\n          rows={20}\n          cols={50}\n          className=\"margin\"\n        />\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          loading={usersMutation.isPending}\n          onClick={() => usersMutation.mutate(mergedUser)}\n          disabled={!mergedUser?.id}\n        >\n          Merge Users \"{selectedUserO.id}\" into \"{selectedUserD.id}\"\n        </Button>\n      </Space>\n    </div>\n  );\n}\n\nexport default Users;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["DEFAULT_FIREBASE_USER_DB","id","names","avatars","preferredLanguage","games","gender","ratings","blurredImages","daily","useTitle","App","useApp","message","notification","queryClient","useQueryClient","useState","selectedUserO","setSelectedUserO","selectedUserD","setSelectedUserD","usersQuery","useQuery","queryKey","queryFn","getDocs","query","collection","firestore","where","querySnapshot","result","forEach","doc","push","data","usersMutation","useMutation","mutationKey","mutationFn","USER_API","run","action","USER_API_ACTIONS","UPDATE_USER_DB","onSuccess","success","invalidateQueries","onError","error","description","options","map","entry","Option","value","selectO","onChange","uid","find","e","style","minWidth","selectD","mergedUser","useMemo","merge","cloneDeep","console","log","Title","isLoading","Paragraph","className","display","gridTemplateColumns","direction","level","join","TextArea","JSON","stringify","rows","cols","type","size","loading","isPending","onClick","mutate","disabled","MutationObserver","client","setOptions","bindMethods","this","bind","reset","prevOptions","defaultMutationOptions","getMutationCache","notify","mutation","observer","state","status","hasListeners","removeObserver","variables","build","addObserver","execute","isSuccess","isError","isIdle","notifyManager","batch","context","onSettled","listeners","listener","useEffect","useSyncExternalStore","useCallback","onStoreChange","subscribe","batchCalls","getCurrentResult","mutateOptions","catch","throwOnError","mutateAsync"],"sourceRoot":""}