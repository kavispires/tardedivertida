{"version":3,"file":"static/js/labirinto-secreto.5f06aaaf.chunk.js","mappings":"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","sources":["components/metrics/MetricHighlight.tsx","components/metrics/PointsHighlight.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx","components/slide-show/SlideShowControls.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/labirinto-secreto/utils/constants.ts","games/labirinto-secreto/utils/helpers.ts","games/labirinto-secreto/components/ForestTree.tsx","components/avatars/AvatarGroup.tsx","games/labirinto-secreto/components/Forest.tsx","games/labirinto-secreto/components/Highlights.tsx","games/labirinto-secreto/components/MapBuilder.tsx","games/labirinto-secreto/StepBuildMap.tsx","games/labirinto-secreto/components/PlayerSelection.tsx","games/labirinto-secreto/StepBuildWait.tsx","games/labirinto-secreto/PhaseMapBuilding.tsx","games/labirinto-secreto/utils/api-requests.ts","games/labirinto-secreto/components/PlayerMap.tsx","games/labirinto-secreto/components/ClickableForest.tsx","games/labirinto-secreto/StepFollowPath.tsx","games/labirinto-secreto/StepPathWaiting.tsx","games/labirinto-secreto/PhasePathFollowing.tsx","components/phases/PhaseWait.tsx","games/labirinto-secreto/StepRanking.tsx","games/labirinto-secreto/components/ResultsSummary.tsx","games/labirinto-secreto/StepGallery.tsx","games/labirinto-secreto/PhaseResults.tsx","games/labirinto-secreto/PhaseGameOver.tsx","games/labirinto-secreto/SessionLabirintoSecreto.tsx","hooks/useSlideShow.ts","hooks/useWhichPlayerIsThe.ts","icons/MapIcon.tsx","icons/PathIcon.tsx","icons/StarIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js","../node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js","../node_modules/@ant-design/icons/es/icons/EyeOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/StepBackwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepBackwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/StepForwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepForwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/TrophyOutlined.js","../node_modules/@ant-design/icons/es/icons/TrophyOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nimport { AvatarSize } from 'antd/lib/avatar/SizeContext';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDimensions } from 'hooks/useDimensions';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [, height] = useDimensions('ranking-row-0');\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className=\"ranking-board\"\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n  windowDuration: number;\n};\n\nexport function SlideShowControls({\n  length,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor = 'gray',\n  windowDuration = 10,\n}: SlideShowControlsProps) {\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: windowDuration * length,\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  // Automatically go to the next window every {windowDuration} seconds\n  useEffect(() => {\n    if (timeLeft < windowDuration * length && timeLeft > 0 && timeLeft % windowDuration === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n    }\n  }, [timeLeft, setActiveIndex, length, windowDuration]);\n\n  const goToPreviousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, length - 1));\n  };\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">\n          {Array(length)\n            .fill('')\n            .map((e, i) => {\n              return (\n                <div\n                  key={`control-timer-bar-${e + i}`}\n                  className=\"slide-show__controls-timer-bar-node\"\n                  style={{ width: `${99 / length}%` }}\n                >\n                  {e}\n                </div>\n              );\n            })}\n        </div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${Math.abs((windowDuration * timeLeft) / length - 100)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={goToPreviousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Anterior\" en=\"Previous\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={goToNextStep}\n            disabled={disableControls || activeIndex === length - 1}\n          >\n            <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","export const FOREST_WIDTH = 7;\nexport const FOREST_HEIGHT = 5;\n\nexport const DIRECTIONS: Record<string, Direction> = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nexport const PAGE_DURATION = 10;\n","import { DIRECTIONS, FOREST_HEIGHT, FOREST_WIDTH } from './constants';\n\n/**\n * Check if a point is on the edge of the forest\n * @param point - point to check\n * @returns - true if point is on the edge\n */\nexport const checkEdge = (point: Point): boolean => {\n  const [x, y] = point;\n  if (x === 0 || x === FOREST_WIDTH - 1 || y === 0 || y === FOREST_HEIGHT - 1) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Get the index of a point in the forest\n * @param point - point to get index of\n * @returns - index of point\n */\nexport const getIndex = (point: Point): number => {\n  const [x, y] = point;\n  return x + y * FOREST_WIDTH;\n};\n\n/**\n * Get the point of an index in the forest\n * @param index\n * @returns\n */\nexport const getPoint = (index: number): Point => {\n  const x = index % FOREST_WIDTH;\n  const y = Math.floor(index / FOREST_WIDTH);\n  return [x, y];\n};\n\nexport const getOriginDirection = (index: TreeId): Direction | null => {\n  const point = getPoint(index);\n  const [x, y] = point;\n  if (x === 0) return DIRECTIONS.LEFT;\n  if (x === FOREST_WIDTH - 1) return DIRECTIONS.RIGHT;\n  if (y === 0) return DIRECTIONS.UP;\n  if (y === FOREST_HEIGHT - 1) return DIRECTIONS.DOWN;\n  return null;\n};\n\nexport const getDirection = (from: TreeId, to: TreeId): Direction => {\n  const [fromX, fromY] = getPoint(from);\n  const [toX, toY] = getPoint(to);\n  if (fromX === toX) {\n    if (fromY < toY) return DIRECTIONS.DOWN;\n    return DIRECTIONS.UP;\n  }\n  if (fromX < toX) return DIRECTIONS.RIGHT;\n  return DIRECTIONS.LEFT;\n};\n\nexport const getAvailableSegments = (origin: TreeId, usedIndexes: TreeId[]): TreeId[] => {\n  const [x, y] = getPoint(origin);\n  const available: Point[] = [];\n  // Top\n  const top: Point = [x, y - 1];\n  const topIndex = getIndex(top);\n  if (top[1] >= 0 && !usedIndexes.includes(topIndex)) {\n    available.push(top);\n  }\n  // Right\n  const right: Point = [x + 1, y];\n  const rightIndex = getIndex(right);\n  if (right[0] < FOREST_WIDTH && !usedIndexes.includes(rightIndex)) {\n    available.push(right);\n  }\n  // Down\n  const down: Point = [x, y + 1];\n  const downIndex = getIndex(down);\n  if (down[1] < FOREST_HEIGHT && !usedIndexes.includes(downIndex)) {\n    available.push(down);\n  }\n  // Left\n  const left: Point = [x - 1, y];\n  const leftIndex = getIndex(left);\n  if (left[0] >= 0 && !usedIndexes.includes(leftIndex)) {\n    available.push(left);\n  }\n\n  return available.map((point) => getIndex(point));\n};\n","import clsx from 'clsx';\n// Utils\nimport { getOriginDirection } from '../utils/helpers';\nimport { getAnimationClass } from 'utils/helpers';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { CompassIcon } from 'icons/CompassIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n\ntype ForestTreeProps = {\n  segment: MapSegment;\n  tree: Tree;\n  startingTeeId?: TreeId;\n  finalTreeId?: TreeId;\n  currentTreeId?: TreeId;\n  showPath?: boolean;\n  showArrow?: boolean;\n  className?: string;\n  hidePassedTreeNames?: boolean;\n};\n\nexport function ForestTree({\n  segment,\n  tree,\n  startingTeeId,\n  finalTreeId,\n  currentTreeId,\n  showPath = false,\n  showArrow = false,\n  className = '',\n  hidePassedTreeNames = false,\n}: ForestTreeProps) {\n  const isSegment = Boolean(segment);\n  const isStartingPoint = startingTeeId === tree.id;\n  const originDirection = getOriginDirection(tree.id);\n  const isFinalPoint = finalTreeId === tree.id;\n  const isCurrentTree = currentTreeId === tree.id;\n  const isPassed = (segment?.passed && !isCurrentTree) ?? false;\n\n  return (\n    <div\n      className={clsx(\n        'forest__tree',\n        isStartingPoint && `forest__tree--${originDirection}`,\n        isFinalPoint && showPath && 'forest__tree--goal',\n        isSegment && showPath && 'forest__tree--segment',\n        isPassed && 'forest__tree--passed',\n        isCurrentTree && 'forest__tree--current',\n        className\n      )}\n    >\n      <TreeCard\n        id={String(tree.treeType)}\n        text={segment?.passed && hidePassedTreeNames ? '' : tree.card.text}\n      />\n      {isCurrentTree && (\n        <div className=\"forest__compass\">\n          <IconAvatar\n            icon={<CompassIcon />}\n            size=\"large\"\n            className={clsx('forest__compass-icon', getAnimationClass('pulse', undefined, undefined, true))}\n          />\n        </div>\n      )}\n      {isStartingPoint && (\n        <IconAvatar\n          icon={<FlagIcon />}\n          size=\"large\"\n          className={`forest__start forest__start--${originDirection}`}\n        />\n      )}\n      {(showArrow || showPath || isPassed) && !isFinalPoint && isSegment && segment.direction && (\n        <IconAvatar\n          icon={<ArrowIcon />}\n          size=\"large\"\n          className={`forest__arrow forest__arrow--${segment.direction}`}\n        />\n      )}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, AvatarProps, Tooltip } from 'antd';\n// Components\nimport { Avatar } from './Avatar';\nimport { orderBy } from 'lodash';\n\ntype AvatarGroupProps = {\n  list: GamePlayer[];\n  user?: GamePlayer;\n  maxCount?: number;\n} & AvatarProps;\n\n/**\n * Displays a group of avatars\n */\nexport function AvatarGroup({ list, user, maxCount = 3, size, ...avatarProps }: AvatarGroupProps) {\n  const players = orderBy(list, [(v) => v.id === user?.id, 'name'], ['asc']);\n\n  return (\n    <AntAvatar.Group maxCount={maxCount} size={size}>\n      {players.map((player) => (\n        <Tooltip key={`avatar-group-${player.id}`} title={player.name}>\n          <Avatar id={player.avatarId} alt={player.name} size={size} {...avatarProps} />\n        </Tooltip>\n      ))}\n    </AntAvatar.Group>\n  );\n}\n","import clsx from 'clsx';\nimport { findLast } from 'lodash';\n// Utils\nimport { getDirection } from '../utils/helpers';\n// Icons\nimport { ArrowIcon } from 'icons/ArrowIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { ForestTree } from './ForestTree';\nimport { Space } from 'antd';\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\nimport { AvatarGroup } from 'components/avatars/AvatarGroup';\n\ntype ForestProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  showPath?: boolean;\n  actions?: {\n    selection: TreeId[];\n    clickableTrees: TreeId[];\n    onSelectTree: (treeId: TreeId) => void;\n    activeTree: TreeId | null;\n    disabled: boolean;\n  };\n  showPlayerPositions?: boolean;\n  players?: GamePlayers;\n  size?: 'small' | 'large';\n  hidePassedTreeNames?: boolean;\n  user?: GamePlayer;\n};\n\nexport function Forest({\n  forest,\n  map = [],\n  showPath,\n  actions,\n  showPlayerPositions = false,\n  players,\n  size = 'large',\n  hidePassedTreeNames = false,\n  user,\n}: ForestProps) {\n  if (!forest || !map || map.length === 0) {\n    return (\n      <Space direction=\"vertical\" className=\"space-container\">\n        <IconAvatar icon={<AnimatedProcessingIcon />} size=\"large\" />\n      </Space>\n    );\n  }\n\n  const startingTeeId = map?.[0]?.treeId;\n  const treeMap = map.reduce((acc: Record<TreeId, MapSegment>, segment) => {\n    acc[segment.treeId] = segment;\n    return acc;\n  }, {});\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? startingTeeId;\n  const finalTreeId = map[map.length - 1]?.treeId;\n\n  return (\n    <div className={clsx('forest-container', size === 'small' && 'forest-container--small')}>\n      <div className=\"forest\">\n        {forest.map((tree) => {\n          const segment = treeMap?.[tree.id];\n\n          if (actions) {\n            const { selection = [], clickableTrees, onSelectTree, activeTree, disabled } = actions;\n            const isPathForward = clickableTrees.includes(tree.id);\n            const isClickable = isPathForward || selection.includes(tree.id);\n\n            if (isClickable) {\n              const isSelected = selection.includes(tree.id);\n              const isActive = activeTree === tree.id;\n              const selectionIndex = selection.indexOf(tree.id);\n\n              return (\n                <div\n                  key={`tree-${tree.id}`}\n                  className={clsx(\n                    'forest__tree-container forest__tree-button',\n                    isPathForward && disabled && 'forest__tree-button--disabled'\n                  )}\n                  onClick={() => {\n                    if ((isClickable && !disabled) || (isClickable && disabled && !isPathForward)) {\n                      onSelectTree(tree.id);\n                    }\n                  }}\n                  role=\"button\"\n                >\n                  <ForestTree\n                    segment={segment}\n                    tree={tree}\n                    startingTeeId={startingTeeId}\n                    finalTreeId={finalTreeId}\n                    currentTreeId={currentTreeId}\n                    showPath={showPath}\n                    className={clsx(\n                      isPathForward && !disabled && 'forest__tree--clickable',\n                      isSelected && 'forest__tree--selected',\n                      isActive && 'forest__tree--active'\n                    )}\n                  />\n                  {isSelected && currentTreeId !== tree.id && (\n                    <IconAvatar\n                      icon={<ArrowIcon />}\n                      size=\"large\"\n                      className={clsx(\n                        `forest__arrow-to forest__arrow-to--${getDirection(\n                          selection[selectionIndex - 1],\n                          tree.id\n                        )}`\n                      )}\n                    />\n                  )}\n\n                  {isPathForward && !disabled && (\n                    <IconAvatar\n                      icon={<ArrowIcon />}\n                      size=\"large\"\n                      className={clsx(\n                        `forest__arrow-to forest__arrow-to--${getDirection(\n                          selection[selection.length - 1] ?? activeTree,\n                          tree.id\n                        )}`\n                      )}\n                    />\n                  )}\n                </div>\n              );\n            }\n          }\n\n          return (\n            <div key={`tree-${tree.id}`} className=\"forest__tree-container\">\n              <ForestTree\n                segment={segment}\n                tree={tree}\n                startingTeeId={startingTeeId}\n                finalTreeId={finalTreeId}\n                currentTreeId={currentTreeId}\n                showPath={showPath}\n                hidePassedTreeNames={hidePassedTreeNames}\n              />\n              {showPlayerPositions && players && segment?.playersIds?.length > 0 && (\n                <div className=\"forest__players\">\n                  <PlayerPositions players={players} playerIds={segment?.playersIds ?? []} user={user} />\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\ntype PlayerPositionsProps = {\n  players: GamePlayers;\n  playerIds: PlayerId[];\n  user?: GamePlayer;\n};\n\nfunction PlayerPositions({ players, playerIds, user }: PlayerPositionsProps) {\n  const list = playerIds.map((playerId) => players[playerId]);\n  return <AvatarGroup list={list} user={user} />;\n}\n","// Components\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\nimport { CompassIcon } from 'icons/CompassIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n\nexport function CompassHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<CompassIcon />}>{children}</MetricHighlight>;\n}\n\nexport function MapHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<MapIcon />}>{children}</MetricHighlight>;\n}\n\nexport function TreeHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<TreeIcon />}>{children}</MetricHighlight>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space, Tooltip } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { getAnimationClass, getColorFromLetter } from 'utils/helpers';\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { TreeCard } from 'components/cards/TreeCard';\nimport { Translate } from 'components/language';\nimport { NoIcon } from 'icons/NoIcon';\nimport { IconAvatar } from 'components/avatars';\nimport { LocationIcon } from 'icons/LocationIcon';\n\ntype MapBuilderProps = {\n  forest: Tree[];\n  user: GamePlayer;\n  onSubmitMap: GenericFunction;\n};\n\nexport function MapBuilder({ user, forest, onSubmitMap }: MapBuilderProps) {\n  const { isLoading } = useLoading();\n  const map: MapSegment[] = (user?.map ?? []).filter((segment: MapSegment) => !segment.passed);\n  const previousSelections = map.map((segment) => segment.clues);\n  const [selections, setSelections] = useState<(ExtendedTextCard | null)[]>(map.map((_) => null));\n  const [currentIndex, setIndex] = useState(0);\n\n  const onSetCard = (card: ExtendedTextCard) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = { ...card };\n      return copy;\n    });\n    setIndex((prev) => prev + 1);\n  };\n\n  const onSkipTree = () => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      copy[currentIndex] = null;\n      return copy;\n    });\n    setIndex((prev) => prev + 1);\n  };\n\n  const onUnsetCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev].map((card, idx) => {\n        if (idx < index) return card;\n\n        return null;\n      });\n      return copy;\n    });\n    setIndex(index);\n  };\n\n  const onNegateCard = (index: number) => {\n    setSelections((prev) => {\n      const copy = [...prev];\n      if (copy[index]) {\n        copy[index]!.negate = !copy[index]?.negate;\n      }\n      return copy;\n    });\n  };\n\n  const usedCards = selections.map((card) => card?.id).filter(Boolean);\n\n  return (\n    <>\n      <Space className=\"space-container map-builder\" wrap>\n        {map.map((segment, index) => {\n          if (segment.passed) {\n            return <></>;\n          }\n\n          const tree = forest[segment.treeId];\n\n          if (!tree) {\n            return <></>;\n          }\n\n          return (\n            <div className=\"map-builder__segment\">\n              {currentIndex === index && (\n                <div className=\"map-builder__caret\">\n                  <IconAvatar\n                    icon={<LocationIcon />}\n                    className={getAnimationClass('bounce', undefined, 'slow', true)}\n                    size=\"small\"\n                  />\n                </div>\n              )}\n\n              {Boolean(selections[index]) && (\n                <Tooltip\n                  title={\n                    <Translate\n                      pt={`Clique para negar: Não-${selections?.[index]?.text}`}\n                      en={`Click to negate: Non-${selections?.[index]?.text}`}\n                    />\n                  }\n                >\n                  <TransparentButton\n                    onClick={() => onNegateCard(index)}\n                    disabled={!selections?.[index]}\n                    className=\"map-builder__card map-builder__card--new\"\n                  >\n                    {selections?.[index]?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {selections?.[index]?.text}\n                  </TransparentButton>\n                </Tooltip>\n              )}\n\n              {(previousSelections?.[index] ?? []).map((card) => {\n                return (\n                  <div className=\"map-builder__card\">\n                    {card?.negate && (\n                      <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                    )}\n                    {card.text}\n                  </div>\n                );\n              })}\n\n              <TransparentButton onClick={() => onUnsetCard(index)} disabled={!selections?.[index]}>\n                <TreeCard id={String(tree.treeType)} text={tree.card.text} />\n              </TransparentButton>\n            </div>\n          );\n        })}\n      </Space>\n\n      <Space className=\"space-container\" wrap>\n        {(user.hand ?? []).map((card: ExtendedTextCard, index: number) => (\n          <TransparentButton\n            onClick={() => onSetCard(card)}\n            key={card.id}\n            disabled={usedCards.includes(card.id)}\n            className=\"map-builder__card-button\"\n          >\n            <Card header={LETTERS[index]} color={getColorFromLetter(LETTERS[index])}>\n              {card.text}\n            </Card>\n          </TransparentButton>\n        ))}\n        <Button\n          size=\"large\"\n          type=\"default\"\n          onClick={() => onSkipTree()}\n          disabled={!previousSelections?.[currentIndex]?.length}\n        >\n          <Translate pt=\"Pular árvore\" en=\"Skip tree\" />\n        </Button>\n      </Space>\n\n      <Space className=\"space-container\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={isLoading || usedCards.length === 0}\n          onClick={() => onSubmitMap({ newMap: selections })}\n        >\n          <Translate pt=\"Enviar Mapa\" en=\"Submit Map\" />\n        </Button>\n      </Space>\n    </>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { CompassHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { MapBuilder } from './components/MapBuilder';\nimport { IconAvatar } from 'components/avatars';\nimport { NoIcon } from 'icons/NoIcon';\nimport { TreeIcon } from 'icons/TreeIcon';\n\ntype StepBuildMapProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  currentRound: number;\n  onSubmitMap: GenericFunction;\n} & AnnouncementProps;\n\nexport function StepBuildMap({\n  players,\n  user,\n  announcement,\n  forest,\n  currentRound,\n  onSubmitMap,\n}: StepBuildMapProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        {currentRound === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )}\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você precisa ajudar os outros jogadores a descobrirem o seu caminho pela floresta.\n              <br />\n              Começando da <CompassHighlight>bússola</CompassHighlight>, escolha 1 carta para cada árvore do\n              caminho.\n              <br />\n              Você ganha <PointsHighlight>pontos</PointsHighlight> se jogadores adivinharem seu caminho, então\n              tente fazer um bom trabalho.\n            </>\n          }\n          en={\n            <>\n              You need to help the other players to discover your path through the forest.\n              <br />\n              Starting from the <CompassHighlight>compass</CompassHighlight>, choose 1 card for each tree of\n              the path.\n              <br />\n              You earn <PointsHighlight>points</PointsHighlight> if players guess your path correctly, so try\n              to do a good job.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Forest forest={forest} map={user.map} showPath hidePassedTreeNames />\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Clique nas cartas em sequência para definir seu mapa, uma carta por árvore.\n              <br />\n              Você pode fazer quantos segmentos quiser desde que pelo menos uma carta esteja em cada árvore\n              (dessa rodada ou de uma rodada anterior já que as cartas são cumulativas).\n              <br />\n              Na barra abaixo, se quiser negar <IconAvatar icon={<NoIcon />} size=\"small\" /> um adjectivo\n              selecionado, clique nele acima da árvore para trocar.\n              <br />\n              Se quiser refazer uma árvore <IconAvatar icon={<TreeIcon />} size=\"small\" />, clique nela.\n              <br />\n              Quando você estiver pronto, aperte Enviar Mapa.\n            </>\n          }\n          en={\n            <>\n              Click on the cards in sequence to define your map, you can't skip any tree.\n              <br />\n              You can build as many segments you with as long as there is at least one card on each tree (from\n              this round or a previous one since the cards are cumulative).\n              <br />\n              If you want to negate <IconAvatar icon={<NoIcon />} size=\"small\" /> an adjective you selected,\n              click on it below the tree to change.\n              <br />\n              If you want to redo a tree <IconAvatar icon={<TreeIcon />} size=\"small\" />, click on it.\n              <br />\n              When you are ready, press Submit Map.\n            </>\n          }\n        />\n      </Instruction>\n\n      <MapBuilder user={user} forest={forest} onSubmitMap={onSubmitMap} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\nimport { IconAvatar } from 'components/avatars';\n// Components\nimport { TreeCard } from 'components/cards/TreeCard';\nimport { NoIcon } from 'icons/NoIcon';\n\ntype PlayerSelectionMapProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  newMap?: (ExtendedTextCard | null)[];\n};\n\nexport function PlayerSelectionMap({ forest, map, newMap }: PlayerSelectionMapProps) {\n  if (!newMap || !map) {\n    return <></>;\n  }\n\n  const userMap: MapSegment[] = (map ?? []).filter((segment: MapSegment) => !segment.passed);\n\n  return (\n    <Space wrap className=\"space-container\">\n      {userMap.map((segment, index) => {\n        const { treeId, passed } = segment;\n        const tree = forest[treeId];\n        return (\n          <div className=\"map-builder__segment\">\n            {Boolean(newMap?.[index]) && (\n              <div className=\"map-builder__card map-builder__card--new\">\n                {newMap?.[index]!.text}\n                {newMap?.[index]?.negate && (\n                  <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                )}\n              </div>\n            )}\n            {segment.clues.map((clue) => {\n              return (\n                <div className=\"map-builder__card\" key={`card-${segment.index}-${clue.id}`}>\n                  {clue.text}\n                  {clue?.negate && (\n                    <IconAvatar icon={<NoIcon />} size=\"small\" className=\"map-builder__card-no\" />\n                  )}\n                </div>\n              );\n            })}\n\n            <TreeCard id={String(tree.treeType)} text={passed ? '' : tree.card.text} />\n          </div>\n        );\n      })}\n    </Space>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\n\ntype StepBuildWaitProps = {\n  user: GamePlayer;\n  forest: Tree[];\n} & AnnouncementProps;\n\nexport function StepBuildWait({ user, announcement, forest }: StepBuildWaitProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt=\"Todos os jogadores já descobriam seu mapa completamente\"\n          en=\"All players have discovered your map completely\"\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={<>Aguarde pacientemente, você ainda vai participar na hora de adivinhar.</>}\n          en={<>Sit and wait patiently, you will still participate when it's time to guess.</>}\n        />\n      </Instruction>\n\n      <Forest forest={forest} map={user.map} showPath />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitMapAPIRequest } from './utils/api-requests';\n// Icons\nimport { MapIcon } from 'icons/MapIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepBuildMap } from './StepBuildMap';\nimport { PlayerSelectionMap } from './components/PlayerSelection';\nimport { StepBuildWait } from './StepBuildWait';\nimport { ViewOr } from 'components/views';\n\nexport function PhaseMapBuilding({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitMap = useOnSubmitMapAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<MapIcon />}\n      title={\n        state.round.current === 1 ? (\n          <Translate pt=\"Construa o seu mapa\" en=\"Build your map\" />\n        ) : (\n          <Translate pt=\"Expanda seu mapa\" en=\"Expand your map\" />\n        )\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt=\"Você consegue mapear as árvores usando apenas adjetivos?\"\n          en=\"Can you map the tree path using only adjectives?\"\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  const isUserMapComplete = user?.map && user.map.every((segment: MapSegment) => segment.passed);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.MAP_BUILDING}>\n      <StepSwitcher\n        step={step}\n        conditions={[!user.isReady, !user.isReady, !user.isReady]}\n        players={players}\n        waitingRoomContent={<PlayerSelectionMap forest={state.forest} map={user.map} newMap={user.newMap} />}\n      >\n        {/* Step 0 */}\n        <ViewOr condition={isUserMapComplete}>\n          <StepBuildWait user={user} announcement={announcement} forest={state.forest} />\n\n          <StepBuildMap\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            currentRound={state.round.current}\n            onSubmitMap={onSubmitMap}\n          />\n        </ViewOr>\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { LABIRINTO_SECRETO_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitMapAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LABIRINTO_SECRETO_API.submitAction,\n    actionName: 'submit-map',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Mapa submetido com sucesso', 'Map submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu mapa',\n      'Oops, the application found an error while trying to submit your map'\n    ),\n  });\n\n  return (payload: SubmitMapPayload) => {\n    request({\n      action: 'SUBMIT_MAP',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitPathAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LABIRINTO_SECRETO_API.submitAction,\n    actionName: 'submit-path',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Caminho submetido com sucesso', 'Path submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu caminho',\n      'Oops, the application found an error while trying to submit your path'\n    ),\n  });\n\n  return (payload: SubmitPathGuessPayload) => {\n    request({\n      action: 'SUBMIT_PATH',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\nimport { IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n// Components\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\n\ntype PlayerMapProps = {\n  map: MapSegment[];\n  selectedTrees?: Tree[];\n};\n\nexport function PlayerMap({ map = [], selectedTrees = [] }: PlayerMapProps) {\n  const currentMap = map.filter((segment) => segment.active);\n\n  return (\n    <Space\n      wrap\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 100px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const selectedTree = selectedTrees[index + 1];\n        return (\n          <div className=\"player-map__segment\" key={`map-${segment.index}`}>\n            {selectedTree && (\n              <TreeCard\n                id={String(selectedTree.treeType)}\n                className=\"player-map__tree\"\n                text={selectedTree.card.text}\n              />\n            )}\n\n            <IconAvatar icon={<MapIcon />} size=\"large\" className=\"player-map__icon\" />\n            {segment.clues.map((clue) => {\n              return (\n                <div className=\"player-map__clue\" key={`clue-${segment.index}-${clue.id}`}>\n                  {clue.text}\n                  {clue?.negate && (\n                    <IconAvatar icon={<NoIcon />} size=\"small\" className=\"player-map__clue-no\" />\n                  )}\n                </div>\n              );\n            })}\n\n            {arr.length - 1 !== index && (\n              <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"player-map__arrow\" />\n            )}\n          </div>\n        );\n      })}\n    </Space>\n  );\n}\n","import { useState } from 'react';\nimport { findLast } from 'lodash';\n// Utils\nimport { getAvailableSegments } from '../utils/helpers';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Components\nimport { Forest } from './Forest';\nimport { Translate } from 'components/language';\nimport { Button, Space } from 'antd';\nimport { PlayerMap } from './PlayerMap';\n\ntype ClickableForestProps = {\n  forest: Tree[];\n  map?: MapSegment[];\n  onSubmitPath: GenericFunction;\n  pathId: PlayerId;\n};\n\nexport function ClickableForest({ forest, map = [], onSubmitPath, pathId }: ClickableForestProps) {\n  const { isLoading } = useLoading();\n\n  const currentMap = map.filter((segment) => !segment.passed && segment.clues.length > 0);\n  const currentTreeId = findLast(map, (segment) => segment.passed)?.treeId ?? map?.[0]?.treeId ?? 0;\n  const passedTrees = map.filter((segment) => segment.passed).map((segment) => segment.treeId);\n\n  const [selection, setSelection] = useState<TreeId[]>([currentTreeId]);\n  const [activeTree, setActiveTree] = useState<TreeId>(currentTreeId);\n\n  const clickableTrees: TreeId[] = getAvailableSegments(activeTree, [...selection, ...passedTrees]);\n\n  const isDisabled = selection.length > currentMap.length;\n\n  const onSelectTree = (treeId: TreeId) => {\n    setActiveTree(treeId);\n    const index = selection.indexOf(treeId);\n    if (index > -1) {\n      setSelection((prev) => prev.slice(0, index + 1));\n    } else {\n      setSelection((prev) => [...prev, treeId]);\n    }\n  };\n\n  const selectedTrees = selection.map((treeId) => forest[treeId]);\n\n  return (\n    <Space direction=\"vertical\" className=\"space-container\">\n      <PlayerMap map={map} selectedTrees={selectedTrees} />\n\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => onSubmitPath({ guess: selection.slice(1), pathId, choseRandomly: false })}\n        disabled={isLoading || selection.length - 1 < currentMap.length}\n      >\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n      <Forest\n        forest={forest}\n        map={map}\n        actions={{\n          selection,\n          clickableTrees,\n          onSelectTree,\n          activeTree,\n          disabled: isDisabled,\n        }}\n      />\n    </Space>\n  );\n}\n","// Hooks\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ClickableForest } from './components/ClickableForest';\nimport { AvatarName } from 'components/avatars';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepFollowPathProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  forest: Tree[];\n  onSubmitPath: GenericFunction;\n  activePlayer: GamePlayer;\n  isTheActivePlayer: boolean;\n} & AnnouncementProps;\n\nexport function StepFollowPath({\n  players,\n  announcement,\n  forest,\n  activePlayer,\n  onSubmitPath,\n}: StepFollowPathProps) {\n  const playerCount = Object.keys(players).length;\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Siga o mapa de <AvatarName player={activePlayer} />\n            </>\n          }\n          en={\n            <>\n              Follow <AvatarName player={activePlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, clique nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> circuladas de pontinhos brancos para escolher aquele\n              caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar (Por\n              exemplo, 3 jogadores = 3 pontos).\n              <br />\n              Então, talvez valha a pena discutir! Porém, se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />O criador do mapa ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, click on the{' '}\n              <TreeHighlight>circled trees</TreeHighlight> with white dots to choose that path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses it\n              (For example, 3 players = 3 points).\n              <br />\n              So, it might be worth discussing out loud! However, if only one player guesses the path, they\n              earn <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              The map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </Instruction>\n\n      {Boolean(forest) && activePlayer.map && (\n        <ClickableForest\n          forest={forest}\n          map={activePlayer.map}\n          onSubmitPath={onSubmitPath}\n          pathId={activePlayer.id}\n        />\n      )}\n\n      {/* <Instruction contained>\n        <Translate pt={<>Guessing: passed trees, current position, clickable buttons</>} en={<>?</>} />\n      </Instruction>\n\n      <Instruction contained>\n        <Translate pt={<>Result: passed trees, current position, playerPositions</>} en={<>?</>} />\n      </Instruction>\n      <Forest\n        forest={forest}\n        map={user.map}\n        playerPositions={{\n          4: <AvatarGroup list={[...Object.values(players), ...Object.values(players)]} user={user} />,\n        }}\n      /> */}\n    </Step>\n  );\n}\n","// Hooks\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { MapHighlight, TreeHighlight } from './components/Highlights';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { PlayerMap } from './components/PlayerMap';\n\ntype StepPathWaitingProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activePlayer: GamePlayer;\n} & AnnouncementProps;\n\nexport function StepPathWaiting({ players, announcement, forest, activePlayer }: StepPathWaitingProps) {\n  const playerCount = Object.keys(players).length;\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={<>Os jogadores estão seguindo o seu mapa!</>}\n          en={<>Players are following your map!</>}\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Baseado no <MapHighlight>mapa de adjetivos</MapHighlight>, eles vão clicando nas{' '}\n              <TreeHighlight>árvores</TreeHighlight> para escolher o caminho.\n              <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar. Por\n              exemplo, 3 jogadores = 3 pontos.\n              <br />\n              Se somente um jogador acertar o caminho, ele ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n              <br />\n              Você, como criador do mapa ganha o mesmo número de pontos que os jogadores.\n            </>\n          }\n          en={\n            <>\n              Based on the <MapHighlight>adjectives map</MapHighlight>, players will click on the{' '}\n              <TreeHighlight>trees</TreeHighlight> to choose the path.\n              <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player that guesses\n              it. For example, 3 players = 3 points.\n              <br />\n              If only one player guesses the path, they earn{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n              <br />\n              You as the map creator also earns the same number of points as the players.\n            </>\n          }\n        />\n      </Instruction>\n\n      <PlayerMap map={activePlayer.map} />\n\n      <Forest forest={forest} map={activePlayer.map} showPath />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitPathAPIRequest } from './utils/api-requests';\n// Icons\nimport { DirectionsIcon } from 'icons/DirectionsIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { StepFollowPath } from './StepFollowPath';\nimport { ViewOr } from 'components/views';\nimport { StepPathWaiting } from './StepPathWaiting';\n\nexport function PhasePathFollowing({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n  const [activePlayer, isTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitPath = useOnSubmitPathAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<DirectionsIcon />}\n      title={<Translate pt=\"Siga os mapas!\" en=\"Follow the maps!\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={3}\n    >\n      <Instruction>\n        <Translate\n          pt=\"Vamos analisar e tentar seguir o mapa de cada jogador\"\n          en=\"Let's analise and try to follow the each player's map\"\n        />\n        <br />\n        <TurnOrder players={players} order={state.turnOrder} activePlayerId={state.activePlayerId} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING}>\n      <StepSwitcher step={step} conditions={[!user.isReady, !user.isReady, !user.isReady]} players={players}>\n        {/* Step 0 */}\n        <ViewOr condition={isTheActivePlayer}>\n          <StepPathWaiting\n            players={players}\n            announcement={announcement}\n            forest={state.forest}\n            activePlayer={activePlayer}\n          />\n\n          <StepFollowPath\n            players={players}\n            user={user}\n            announcement={announcement}\n            forest={state.forest}\n            onSubmitPath={onSubmitPath}\n            activePlayer={activePlayer}\n            isTheActivePlayer={isTheActivePlayer}\n          />\n        </ViewOr>\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedProcessingIcon } from 'icons/AnimatedProcessingIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseWaitProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseWait({ info, state }: PhaseWaitProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.WAIT} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Processando...\" en=\"Processing...\" />\n        </Title>\n\n        <AnimatedProcessingIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Components\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction } from 'components/text';\nimport { VIPNextPhaseButton } from 'components/vip';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: GenericFunction;\n};\n\nexport function StepRanking({ players, ranking, goToPreviousStep, round }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Rotas corretos\" en=\"Correct paths\" />,\n        <Translate pt=\"Pontos por sua rota\" en=\"Points for your route\" />,\n      ]}\n    >\n      <Instruction contained>\n        <Translate\n          pt=\"Não se preocupe se você ficou pra trás! o jogador mais a frente de cada rota, te gritou e você conseguiu encontrá-lo.\"\n          en=\"Don't worry if you were left behind! The player furthest ahead on that route, call you and you caught up\"\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <VIPNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Ant Design Resources\nimport { Space, Tooltip } from 'antd';\nimport { Avatar, IconAvatar } from 'components/avatars';\nimport { TreeCard } from 'components/cards/TreeCard';\n// Components\nimport { ArrowIcon } from 'icons/ArrowIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { NoIcon } from 'icons/NoIcon';\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype PlayerMapResultsSummaryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  currentPlayer: GamePlayer;\n  user: GamePlayer;\n};\n\nexport function PlayerMapResultsSummary({\n  players,\n  forest,\n  currentPlayer,\n  user,\n}: PlayerMapResultsSummaryProps) {\n  const currentMap: MapSegment[] = currentPlayer.map.filter((segment: MapSegment) => segment.active);\n\n  return (\n    <Space\n      wrap\n      className=\"space-container player-map\"\n      style={{ gridTemplateColumns: `repeat(${currentMap.length}, 100px)` }}\n    >\n      {currentMap.map((segment, index, arr) => {\n        const tree = segment.passed ? forest[segment.treeId] : null;\n\n        return (\n          <div className=\"player-map__segment\" key={`map-${segment.index}`}>\n            {tree && (\n              <TreeCard\n                id={String(tree.treeType)}\n                className=\"player-map__tree\"\n                text={tree.card.text}\n                width={75}\n              />\n            )}\n\n            <IconAvatar icon={<MapIcon />} size=\"large\" className=\"player-map__icon\" />\n            {segment.clues.map((clue) => {\n              return (\n                <div className=\"player-map__clue\" key={`clue-${segment.index}-${clue.id}`}>\n                  {clue.text}\n                  {clue?.negate && (\n                    <IconAvatar icon={<NoIcon />} size=\"small\" className=\"player-map__clue-no\" />\n                  )}\n                </div>\n              );\n            })}\n\n            {arr.length - 1 !== index && (\n              <IconAvatar icon={<ArrowIcon />} size=\"small\" className=\"player-map__arrow\" />\n            )}\n\n            {segment.playersIds.length > 0 ? (\n              <div className=\"player-map__players\">\n                {segment.playersIds.map((playerId) => {\n                  const player = players[playerId];\n                  return (\n                    <Tooltip title={player.name} key={`player-${playerId}`}>\n                      <Avatar size=\"small\" id={player.avatarId} />\n                    </Tooltip>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"player-map__no-players\">\n                <Translate pt=\"Nenhum jogador\" en=\"No players\" />\n              </div>\n            )}\n\n            {segment.score > 0 && <PointsHighlight>{segment.score}</PointsHighlight>}\n          </div>\n        );\n      })}\n    </Space>\n  );\n}\n","// Utils\nimport { PAGE_DURATION } from './utils/constants';\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Forest } from './components/Forest';\nimport { AvatarName } from 'components/avatars';\nimport { SlideShowControls } from 'components/slide-show/SlideShowControls';\nimport { PlayerMapResultsSummary } from './components/ResultsSummary';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepGalleryProps = {\n  players: GamePlayers;\n  forest: Tree[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n  user: GamePlayer;\n  gallery: GamePlayer[];\n};\n\nexport function StepGallery({\n  players,\n  gallery,\n  user,\n  forest,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  const playerCount = Object.keys(players).length;\n\n  const currentPlayer = gallery[activeIndex];\n  const currentColor = getAvatarColorById(currentPlayer.avatarId);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Mapa do(a) <AvatarName player={currentPlayer} />\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={currentPlayer} />\n              's map\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você ganha pontos ao acertar o caminho do mapa. <br />\n              Cada árvore correta vale <PointsHighlight>1 ponto</PointsHighlight> por jogador que acertar.{' '}\n              <br />\n              Se você for o único que acertou, você ganha{' '}\n              <PointsHighlight>{playerCount} pontos</PointsHighlight>.\n            </>\n          }\n          en={\n            <>\n              You get points by guessing the map path. <br />\n              Each correct tree is worth <PointsHighlight>1 point</PointsHighlight> per player who guesses it.{' '}\n              <br />\n              If you are the only one who guessed it, you get{' '}\n              <PointsHighlight>{playerCount} points</PointsHighlight>.\n            </>\n          }\n        />\n      </Instruction>\n\n      <PlayerMapResultsSummary players={players} forest={forest} currentPlayer={currentPlayer} user={user} />\n\n      <Forest\n        forest={forest}\n        map={currentPlayer.map}\n        size=\"small\"\n        players={players}\n        showPlayerPositions\n        user={user}\n      />\n\n      <SlideShowControls\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={currentColor}\n        windowDuration={PAGE_DURATION}\n      />\n    </Step>\n  );\n}\n","import { useMemo } from 'react';\n// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { sortPlayers } from 'utils/helpers';\n// Icons\nimport { PathIcon } from 'icons/PathIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRanking } from './StepRanking';\nimport { StepGallery } from './StepGallery';\n\nexport function PhaseResults({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep, goToPreviousStep, goToNextStep } = useStep();\n  const gallery = useMemo(\n    () => sortPlayers(players).filter((player) => player.map.some((segment: MapSegment) => segment.active)),\n    [players]\n  );\n\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(gallery.length);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LABIRINTO_SECRETO.RESULTS}>\n      <StepSwitcher step={step} conditions={[]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PathIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          currentRound={state?.round?.current}\n          type=\"block\"\n          onClose={goToNextStep}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quem é o melhor em seguir direções?\"\n              en=\"Who is the best at following directions?\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={gallery}\n          players={players}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          forest={state.forest}\n          setStep={setStep}\n          user={user}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Space } from 'antd';\n\nexport function PhaseGameOver({ state, info, players }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<FlagIcon />}>\n      <Space className=\"space-container\" wrap>\n        TODO: Add player paths\n      </Space>\n    </GameOverWrapper>\n  );\n}\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseMapBuilding } from './PhaseMapBuilding';\n// Sass\nimport './labirinto-secreto.scss';\nimport { PhasePathFollowing } from './PhasePathFollowing';\nimport { PhaseWait } from 'components/phases/PhaseWait';\nimport { PhaseResults } from './PhaseResults';\nimport { PhaseGameOver } from './PhaseGameOver';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.DEFAULT.WAIT:\n      return PhaseWait;\n    case PHASES.LABIRINTO_SECRETO.MAP_BUILDING:\n      return PhaseMapBuilding;\n    case PHASES.LABIRINTO_SECRETO.PATH_FOLLOWING:\n      return PhasePathFollowing;\n    case PHASES.LABIRINTO_SECRETO.RESULTS:\n      return PhaseResults;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionLabirintoSecreto() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.FOREST,\n          colorLink: THEME_COLORS.FOREST,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.LABIRINTO_SECRETO} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionLabirintoSecreto;\n","import { useEffect, useState } from 'react';\n\n/**\n * Controls slide show\n * @param length\n */\nexport function useSlideShow(length: number): {\n  activeIndex: number;\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>;\n  isFirstGalleryRunThrough: boolean;\n  setIsFirstGalleryRunThrough: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && activeIndex === length - 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [isFirstGalleryRunThrough, activeIndex, length]);\n\n  return {\n    activeIndex,\n    setActiveIndex,\n    isFirstGalleryRunThrough,\n    setIsFirstGalleryRunThrough,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: GamePlayers = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>({});\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function MapIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffe1bd\"\n        d=\"M502.682 405.795L424.508 87.522H206.292a20 20 0 00-14.142 5.858l-20 20c-7.81 7.81-20.474 7.81-28.284 0l-20-20a20 20 0 00-14.142-5.858H87.508L9.335 405.795a63.299 63.299 0 00-1.827 15.094v3.628c0 44.183 35.817 80 80 80h204.591a20 20 0 0014.142-5.858l20-20c7.811-7.81 20.474-7.81 28.284 0l20 20a20 20 0 0014.142 5.858h35.841c44.183 0 80-35.817 80-80v-3.628c0-5.087-.613-10.155-1.826-15.094z\"\n      ></path>\n      <path\n        fill=\"#ffd3a3\"\n        d=\"M225.341 224.516V87.522h-19.049a19.998 19.998 0 00-14.142 5.858l-20 20c-7.811 7.81-20.474 7.81-28.284 0l-20-20a20 20 0 00-14.142-5.858H87.508L9.335 405.795a63.299 63.299 0 00-1.827 15.094v3.628c0 44.183 35.817 80 80 80h204.591a20 20 0 0014.142-5.858l20-20c7.811-7.81 20.474-7.81 28.284 0l20 20a20 20 0 0014.142 5.858h35.841c44.183 0 80-35.817 80-80h-79.167c-110.456-.001-200-89.544-200-200.001z\"\n      ></path>\n      <path\n        fill=\"#fff1ce\"\n        d=\"M7.508 84.157v340.359c0-38.66 27.422-70.915 63.877-78.375 9.327-1.909 16.123-9.949 16.123-19.469V27.571c0-13.719-13.534-23.467-26.48-18.927-31.169 10.929-53.52 40.611-53.52 75.513zm443.48-75.513c-12.946-4.54-26.48 5.208-26.48 18.927V192.24a20 20 0 005.858 14.142l20 20c7.81 7.81 7.81 20.474 0 28.284l-20 20a20 20 0 00-5.858 14.142v37.864c0 9.52 6.796 17.561 16.123 19.47 36.455 7.46 63.877 39.715 63.877 78.375V84.157c0-34.902-22.351-64.584-53.52-75.513z\"\n      ></path>\n      <circle cx=\"170.008\" cy=\"183.062\" r=\"30\" fill=\"#b77158\"></circle>\n      <path d=\"M453.47 1.565a27.282 27.282 0 00-9.035-1.549c-15.123 0-27.427 12.361-27.427 27.555v52.451H206.292c-7.346 0-14.252 2.861-19.445 8.055l-20 20c-4.873 4.875-12.805 4.875-17.678 0l-20-19.999c-5.193-5.194-12.1-8.056-19.445-8.056H95.008V27.571a27.615 27.615 0 00-11.63-22.488c-7.33-5.197-16.383-6.481-24.831-3.517C23.534 13.843.008 47.034.008 84.157v340.359c0 48.248 39.252 87.5 87.5 87.5h204.591c7.346 0 14.251-2.86 19.445-8.054l20-20c4.873-4.875 12.805-4.875 17.678 0l20 20c5.194 5.193 12.1 8.054 19.445 8.054h35.841c18.216 0 35.678-5.545 50.499-16.034a7.5 7.5 0 00-8.666-12.244c-12.273 8.687-26.738 13.278-41.833 13.278h-35.841c-3.339 0-6.478-1.3-8.838-3.661l-20-20c-10.723-10.721-28.17-10.721-38.893 0l-20 20a12.414 12.414 0 01-8.838 3.661H87.508c-39.977 0-72.5-32.523-72.5-72.5 0-34.293 24.343-64.164 57.88-71.027 12.817-2.622 22.12-13.9 22.12-26.816v-50.989c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v50.989c0 5.917-4.164 10.901-10.127 12.121-22.984 4.703-42.39 18.354-54.873 36.85V84.157c0-30.762 19.491-58.264 48.502-68.437 3.801-1.331 7.88-.749 11.192 1.599 3.372 2.391 5.306 6.128 5.306 10.252v218.112c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5V95.022h14.716c3.339 0 6.478 1.3 8.838 3.662l20 20c5.361 5.361 12.404 8.041 19.446 8.041s14.085-2.68 19.446-8.041l20-20.001a12.414 12.414 0 018.838-3.661h210.716v97.218c0 7.346 2.86 14.251 8.054 19.445l20 20a12.417 12.417 0 013.662 8.839c0 3.338-1.301 6.478-3.662 8.838l-20 20.001c-5.193 5.194-8.054 12.101-8.054 19.445v37.864c0 12.916 9.303 24.194 22.119 26.816 33.538 6.863 57.881 36.734 57.881 71.027 0 14.622-4.33 28.711-12.522 40.744a7.503 7.503 0 006.193 11.722 7.494 7.494 0 006.207-3.28c9.893-14.532 15.122-31.541 15.122-49.186V84.157c0-37.122-23.524-70.314-58.538-82.592zm-11.336 337.229c-5.962-1.22-10.126-6.204-10.126-12.121v-37.864c0-3.339 1.3-6.479 3.661-8.839l20-20c10.722-10.723 10.722-28.169 0-38.892l-20-20a12.583 12.583 0 01-3.661-8.838V27.571c0-6.923 5.574-12.555 12.427-12.555 1.368 0 2.738.237 4.072.704 29.01 10.173 48.501 37.676 48.501 68.437v291.486c-12.483-18.496-31.889-32.146-54.874-36.849z\"></path>\n      <path d=\"M207.508 183.062c0-20.678-16.822-37.5-37.5-37.5s-37.5 16.822-37.5 37.5 16.822 37.5 37.5 37.5 37.5-16.822 37.5-37.5zm-37.5 22.5c-12.406 0-22.5-10.094-22.5-22.5s10.094-22.5 22.5-22.5 22.5 10.094 22.5 22.5-10.094 22.5-22.5 22.5zm207.304 114.022a7.502 7.502 0 00-10.607 0l-14.696 14.696-14.696-14.696a7.5 7.5 0 00-10.607 10.607l14.696 14.696-14.696 14.696a7.5 7.5 0 1010.608 10.607l14.696-14.696 14.696 14.696c1.465 1.464 3.385 2.196 5.304 2.196s3.839-.732 5.304-2.196a7.5 7.5 0 000-10.607l-14.696-14.696 14.696-14.696a7.502 7.502 0 00-.002-10.607zM240.008 190.562h7.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-7.5c-4.143 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5zm115.579 40.693a7.502 7.502 0 007.863-7.119c.038-.771.058-1.547.058-2.327a46.17 46.17 0 00-2.479-14.971 7.5 7.5 0 10-14.193 4.853 31.189 31.189 0 011.633 11.7 7.5 7.5 0 007.118 7.864zm-56.38-48.193c0-4.143-3.357-7.5-7.5-7.5h-14.733c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.733c4.143 0 7.5-3.357 7.5-7.5zm10.82 77.492c0-4.143-3.357-7.5-7.5-7.5h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.732a7.5 7.5 0 007.5-7.5zm25.16-65.601a7.5 7.5 0 003.48-14.148 45.872 45.872 0 00-16.756-5.011 7.5 7.5 0 00-1.492 14.926 30.892 30.892 0 0111.299 3.378 7.483 7.483 0 003.469.855zm-3.546 70.349a7.48 7.48 0 002.782-.538 46.077 46.077 0 0014.704-9.438 7.501 7.501 0 00-10.336-10.872 31.134 31.134 0 01-9.937 6.382 7.5 7.5 0 00-4.18 9.748 7.505 7.505 0 006.967 4.718zM209.038 444.763a7.52 7.52 0 002.021-.278 53.68 53.68 0 0015.482-7.132 7.5 7.5 0 002.054-10.405c-2.308-3.441-6.968-4.361-10.405-2.054a38.725 38.725 0 01-11.164 5.144 7.5 7.5 0 002.012 14.725zm-9.642-176.709h14.732c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5zm-36.732 166.498a53.851 53.851 0 0014.788 8.46 7.505 7.505 0 002.646.484 7.5 7.5 0 002.649-14.519 38.908 38.908 0 01-10.677-6.108 7.5 7.5 0 00-9.406 11.683zm75.016-19.177a7.48 7.48 0 002.555.451 7.504 7.504 0 007.052-4.946 53.785 53.785 0 003.195-16.732 7.499 7.499 0 00-7.5-7.73 7.5 7.5 0 00-7.492 7.271 38.86 38.86 0 01-2.305 12.08 7.499 7.499 0 004.495 9.606zm-87.672-91.702c4.143 0 7.5-3.357 7.5-7.5V301.44c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v14.733a7.5 7.5 0 007.5 7.5zm-7.5 36.699c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-14.733c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5zm22.445-81.318a31.23 31.23 0 019.218-7.397 7.5 7.5 0 00-7.012-13.26 46.203 46.203 0 00-13.626 10.931 7.5 7.5 0 005.706 12.363 7.481 7.481 0 005.714-2.637zM142.508 392.47c0 4.703.606 9.375 1.804 13.886a7.504 7.504 0 007.244 5.578 7.5 7.5 0 007.254-9.426 39.19 39.19 0 01-1.302-10.038v-2.633c0-4.143-3.357-7.5-7.5-7.5s-7.5 3.357-7.5 7.5zm115.82-139.416h-14.732c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h14.732c4.143 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.5-7.5zm-4.082 115.744a31.276 31.276 0 017.483-9.151 7.498 7.498 0 00.943-10.564 7.497 7.497 0 00-10.564-.943 46.227 46.227 0 00-11.056 13.522 7.5 7.5 0 1013.194 7.136zm30.262-16.411h7.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-7.5c-4.143 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5z\"></path>\n    </svg>\n  );\n}\n","export function PathIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#60a917\"\n        d=\"M170.51 162a85.29 85.29 0 01-6 32.82 55.58 55.58 0 01-25.15 28.56h-.6A709 709 0 0094.2 96.18a19.43 19.43 0 00-25.57-9 561.34 561.34 0 0127.19-69.17 17 17 0 0130.52 0c17.4 35.46 44.17 114.07 44.17 143.99z\"\n      ></path>\n      <path\n        fill=\"#a4c400\"\n        d=\"M460.37 162c0 37.77-18.93 60.27-44.68 66.41a63.7 63.7 0 01-30 0 54.32 54.32 0 01-38.62-33.59A83.61 83.61 0 01341 162c0-29.92 26.77-108.53 44.42-144a17 17 0 0130.52 0c17.65 35.46 44.42 114.07 44.42 144z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M416 18.01a17.05 17.05 0 00-28.05-3.58 17.29 17.29 0 012.47 3.58c17.65 35.46 44.42 114.07 44.42 144 0 37.77-18.93 60.27-44.67 66.41l-2.22.43a62.51 62.51 0 0012.79 1.36 61.62 61.62 0 0015-1.79c25.58-6.14 44.68-28.64 44.68-66.41-.05-29.93-26.82-108.54-44.42-144z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M400.69 204.63c-21.66 0-34.1-15.52-34.1-42.63a8.53 8.53 0 1117.05 0c0 25.58 12.36 25.58 17.05 25.58a8.53 8.53 0 010 17.05z\"\n      ></path>\n      <path\n        fill=\"sienna\"\n        d=\"M375.11 272.83a74.12 74.12 0 0010.57-44.42 63.7 63.7 0 0030 0 74.26 74.26 0 0010.57 44.42z\"\n      ></path>\n      <path\n        fill=\"#ffeb3a\"\n        d=\"M358.06 443.33a400.89 400.89 0 00-89 55.33 17 17 0 01-11.25 4.35H58.31a8.53 8.53 0 01-7.16-13.47c63.43-89.68 189.52-98.55 230.18-122.93C324 341.03 179 315.45 179 264.3c0-31.37 48.17-59.67 85.25-76.72q20.21 0 38.88 1.79h.6c-20.63 20-57.21 63.94-5.46 83.37 68.32 25.66 255.87 76.82 59.79 170.59z\"\n      ></path>\n      <path\n        fill=\"#ffdc00\"\n        d=\"M298.39 272.83c-51.75-19.44-15.18-63.34 5.45-83.38h-.6a389.94 389.94 0 00-39-1.87l-1.79.85c5.12 0 10.15.51 15.09.94h.6c-20.63 20-57.2 63.94-5.46 83.37 68.21 25.58 255.76 76.73 59.68 170.51a400.89 400.89 0 00-89 55.33 17.08 17.08 0 01-11.26 4.35h25.58a17 17 0 0011.32-4.35 401 401 0 0189.09-55.25c196.08-93.77 8.53-144.93-59.67-170.5z\"\n      ></path>\n      <path\n        fill=\"#a4c400\"\n        d=\"M144.93 262.34c0 45-23.27 71.44-54.31 77.41a75.91 75.91 0 01-27.79 0c-31-6-54.3-32.39-54.3-77.41 0-34.57 30.52-125.23 51.15-166.16a18.73 18.73 0 019-8.52h-.48a19.44 19.44 0 0125.58 9 709.15 709.15 0 0145 126.68 182.21 182.21 0 016.14 39z\"\n      ></path>\n      <path\n        fill=\"#90ac00\"\n        d=\"M76.73 315.45c-26.69 0-42.63-19.86-42.63-53.11a8.53 8.53 0 0117 0c0 24 8.53 36.06 25.58 36.06a8.53 8.53 0 010 17.05z\"\n      ></path>\n      <path\n        fill=\"sienna\"\n        d=\"M102.3 383.66H51.15a78.3 78.3 0 0011.68-43.89 75.91 75.91 0 0027.79 0 78.46 78.46 0 0011.68 43.89z\"\n      ></path>\n      <circle cx=\"238.71\" cy=\"468.91\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"238.71\" cy=\"417.76\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"400.69\" cy=\"349.55\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"358.06\" cy=\"332.5\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"213.13\" cy=\"264.3\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <circle cx=\"366.59\" cy=\"358.08\" r=\"8.53\" fill=\"#ff9801\"></circle>\n      <path\n        fill=\"#ffdc00\"\n        d=\"M306.91 170.52a49.73 49.73 0 01-3.67 18.93 389.94 389.94 0 00-39-1.87h-8.52c-16.63 0-32.48.59-47.49 1.87a49.34 49.34 0 01-3.66-18.93 51.15 51.15 0 01102.3 0z\"\n      ></path>\n      <path\n        fill=\"#fec108\"\n        d=\"M255.76 119.37a48.49 48.49 0 00-12.76 1.71 51.13 51.13 0 0138.36 49.44 50.21 50.21 0 01-3.23 17.57c8.52 0 17 .68 25.57 1.36a49.73 49.73 0 003.24-18.93 51.15 51.15 0 00-51.15-51.15z\"\n      ></path>\n      <path d=\"M503.93 219.12a468.77 468.77 0 01-48.51-8.53A85.23 85.23 0 00468.89 162c0-32.48-27.45-112-45.35-147.83a25.58 25.58 0 00-45.7 0c-17.9 35.81-45.35 115.35-45.35 147.83a106.92 106.92 0 002.38 22.42c-6.9-.94-13.72-1.79-20.54-2.47a57.67 57.67 0 001.11-11.43 59.68 59.68 0 00-119.36 0 56.21 56.21 0 001.11 11.43c-7 .68-13.81 1.53-20.46 2.47a105 105 0 002.3-22.42c0-32.4-27.45-111.94-45.35-147.83a25.57 25.57 0 00-45.78 0 567.12 567.12 0 00-26.6 67.27 27.38 27.38 0 00-9.64 11C31.29 133.77 0 226.28 0 262.34c0 48.17 24.64 75 54.14 83.89a66.92 66.92 0 01-10.06 32.65 8.52 8.52 0 002.3 11.89 8.56 8.56 0 0011.85-2.3A83.33 83.33 0 0071 349.56h11.44a83.31 83.31 0 0012.79 39.13 8.61 8.61 0 0014.15-9.81 66.82 66.82 0 01-10.06-32.65c29.5-8.52 54.14-35.72 54.14-83.89a174.47 174.47 0 00-5-34.7 63 63 0 0022-25.06 495.51 495.51 0 0157.54-5.8c-38.19 22.17-57.54 44.85-57.54 67.52 0 31.21 39 51.15 73.4 69.14 14.14 7.33 35.34 18.25 36.88 22.77a10 10 0 01-3.74 3.06 268.45 268.45 0 01-52.18 19c-56.53 17.07-134.11 40.6-180.49 106.41a17.09 17.09 0 0014 26.86h199.5a25.6 25.6 0 0017.05-6.48 392.43 392.43 0 0186.87-54.05c63.25-30.24 93.25-58.83 91.63-88.24-2.31-44.84-77.5-71.44-132.32-90.88-7.24-2.56-13.89-4.86-19.69-7.08-12.11-4.51-19-10.57-20.55-18-2.38-11.68 7.16-29.25 26.26-48.51 11.25 1 22.51 2.38 34.1 4.26a63.3 63.3 0 0036.06 32.21 61.91 61.91 0 01-9.2 33.33 8.52 8.52 0 002.3 11.85 8.56 8.56 0 0011.85-2.3 76.79 76.79 0 0012-38.87 62.38 62.38 0 0013 0 76.69 76.69 0 0012 39.21 8.63 8.63 0 0014.15-9.89 62 62 0 01-9.21-33.33 63.8 63.8 0 0017.74-9.55 489.22 489.22 0 0060.18 10.83h.95a8.54 8.54 0 10.94-17zM76.73 332.51c-36.23 0-59.68-27.54-59.68-70.17 0-33.25 30.61-123.36 49.87-162a10.91 10.91 0 0119.61 0c19.27 38.62 49.87 128.73 49.87 162 0 42.63-23.4 70.17-59.67 70.17zm25.06-240.08a27.61 27.61 0 00-20.97-15.66 520.47 520.47 0 0122.34-54.91 8.53 8.53 0 0115.26 0C135.21 55.52 162 133.44 162 162a61.82 61.82 0 01-17.9 47.57 729.36 729.36 0 00-42.31-117.14zm111.34 78.09a42.63 42.63 0 0185.26 0 39.57 39.57 0 01-1.37 10 655.13 655.13 0 00-32.39-1.36h-8.87c-14.15 0-27.88.51-41.26 1.44a38.37 38.37 0 01-1.37-10.08zm51.15 79.8c2.82 13.47 13.39 23.79 31.29 30.52l19.95 7.16c44.59 15.78 119.36 42.2 121.06 75.71.77 14.58-12.87 38.87-82 71.95a408.59 408.59 0 00-91.14 56.61 8.54 8.54 0 01-5.62 2.22H58.23c43.05-61.05 117.31-83.47 172-99.84a275.35 275.35 0 0055.93-20.71 20.46 20.46 0 0012-17.73c-.43-14.33-19.52-24.22-45.95-37.86-29.07-14.83-64.62-33.25-64.62-54.05s28.64-44.84 78.6-68.2c6.48 0 12.79 0 19.1.51-13.64 16.54-24.9 35.64-21 53.71zM349.54 162c0-26.68 24.89-102.82 43.56-140.16a8.54 8.54 0 0115.18 0C427 59.18 451.84 135.32 451.84 162a62.94 62.94 0 01-17 47l-.84.77a45.81 45.81 0 01-21.31 10.66 54.62 54.62 0 01-12 1.28c-31.54-.03-51.15-22.88-51.15-59.71z\"></path>\n      <path d=\"M264.28 85.27v-17a8.53 8.53 0 00-17 0v17a8.53 8.53 0 1017 0zm-51.15 19.95a8.53 8.53 0 007.42-12.79L212 77.68a8.55 8.55 0 10-14.83 8.53l8.53 14.75a8.5 8.5 0 007.43 4.26zm85.26 0a8.52 8.52 0 007.41-4.26l8.53-14.75a8.56 8.56 0 00-14.84-8.53L291 92.43a8.53 8.53 0 007.42 12.79z\"></path>\n    </svg>\n  );\n}\n","export function StarIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffb820\"\n        d=\"M491.64 188.725l-153.53-22.31-68.66-139.12c-2.75-5.57-8.1-8.36-13.45-8.36l.02 400.2 137.3 72.19c11.01 5.78 23.86-3.56 21.76-15.81l-26.22-152.92 111.09-108.29c8.91-8.68 3.99-23.79-8.31-25.58z\"\n      ></path>\n      <path\n        fill=\"#ffd06a\"\n        d=\"M356.62 312.125s23.68 138.03 23.76 138.49c-.08-.01-122.45-31-124.36-31.48-.02-.01-137.34 72.19-137.34 72.19-11.01 5.78-23.86-3.56-21.76-15.81l26.22-152.92-111.09-108.29c-8.91-8.68-3.99-23.79 8.31-25.58l153.53-22.31 68.66-139.12c2.75-5.57 8.1-8.36 13.45-8.36l62.19 174.9 139.06 20.21z\"\n      ></path>\n      <path d=\"M510.883 196.615c-2.666-8.204-9.625-14.07-18.16-15.311l-149.632-21.743-66.918-135.588c-3.817-7.735-11.547-12.54-20.173-12.54s-16.356 4.805-20.173 12.54L168.91 159.561 19.278 181.305c-8.537 1.24-15.495 7.106-18.161 15.311s-.484 17.04 5.693 23.062l108.274 105.541-9.911 57.786a7.501 7.501 0 006.124 8.66 7.499 7.499 0 008.66-6.125l10.578-61.672a7.502 7.502 0 00-2.157-6.639L17.28 208.934c-2.089-2.036-2.798-4.909-1.897-7.684.902-2.775 3.164-4.683 6.052-5.103l153.534-22.31a7.498 7.498 0 005.647-4.103l68.662-139.125c1.292-2.617 3.804-4.179 6.722-4.179s5.431 1.562 6.722 4.179l68.663 139.125a7.5 7.5 0 005.647 4.103l153.534 22.31c2.888.42 5.15 2.327 6.051 5.102.902 2.775.193 5.648-1.896 7.685L383.622 317.228a7.499 7.499 0 00-2.157 6.639l26.227 152.913c.494 2.876-.621 5.617-2.982 7.332-2.361 1.714-5.312 1.929-7.895.57L259.49 412.487a7.504 7.504 0 00-6.98 0l-137.325 72.195c-2.583 1.358-5.535 1.144-7.894-.57-2.361-1.715-3.476-4.456-2.982-7.332l10.578-61.673a7.501 7.501 0 00-6.124-8.66 7.501 7.501 0 00-8.66 6.125l-10.578 61.673c-1.458 8.502 1.971 16.933 8.95 22.003 3.943 2.865 8.557 4.32 13.201 4.32a22.51 22.51 0 0010.49-2.608L256 427.6l133.834 70.36c7.635 4.014 16.713 3.357 23.692-1.712 6.979-5.07 10.408-13.502 8.949-22.003l-25.56-149.027L505.19 219.677c6.177-6.022 8.359-14.859 5.693-23.062z\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar CaretUpOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z\" } }] }, \"name\": \"caret-up\", \"theme\": \"outlined\" };\nexport default CaretUpOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CaretUpOutlinedSvg from \"@ant-design/icons-svg/es/asn/CaretUpOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar CaretUpOutlined = function CaretUpOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CaretUpOutlinedSvg\n  }));\n};\nCaretUpOutlined.displayName = 'CaretUpOutlined';\nexport default /*#__PURE__*/React.forwardRef(CaretUpOutlined);","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar DownSquareOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\" } }] }, \"name\": \"down-square\", \"theme\": \"outlined\" };\nexport default DownSquareOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownSquareOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownSquareOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar DownSquareOutlined = function DownSquareOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownSquareOutlinedSvg\n  }));\n};\nDownSquareOutlined.displayName = 'DownSquareOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownSquareOutlined);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeInvisibleOutlinedSvg from \"@ant-design/icons-svg/es/asn/EyeInvisibleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeInvisibleOutlined = function EyeInvisibleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeInvisibleOutlinedSvg\n  }));\n};\nEyeInvisibleOutlined.displayName = 'EyeInvisibleOutlined';\nexport default /*#__PURE__*/React.forwardRef(EyeInvisibleOutlined);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeOutlinedSvg from \"@ant-design/icons-svg/es/asn/EyeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeOutlined = function EyeOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeOutlinedSvg\n  }));\n};\nEyeOutlined.displayName = 'EyeOutlined';\nexport default /*#__PURE__*/React.forwardRef(EyeOutlined);","// This icon file is generated automatically.\nvar StepBackwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 000 33.9M330 864h-64a8 8 0 01-8-8V168a8 8 0 018-8h64a8 8 0 018 8v688a8 8 0 01-8 8\" } }] }, \"name\": \"step-backward\", \"theme\": \"outlined\" };\nexport default StepBackwardOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport StepBackwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepBackwardOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar StepBackwardOutlined = function StepBackwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: StepBackwardOutlinedSvg\n  }));\n};\nStepBackwardOutlined.displayName = 'StepBackwardOutlined';\nexport default /*#__PURE__*/React.forwardRef(StepBackwardOutlined);","// This icon file is generated automatically.\nvar StepForwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 010 33.9M694 864h64a8 8 0 008-8V168a8 8 0 00-8-8h-64a8 8 0 00-8 8v688a8 8 0 008 8\" } }] }, \"name\": \"step-forward\", \"theme\": \"outlined\" };\nexport default StepForwardOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport StepForwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepForwardOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar StepForwardOutlined = function StepForwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: StepForwardOutlinedSvg\n  }));\n};\nStepForwardOutlined.displayName = 'StepForwardOutlined';\nexport default /*#__PURE__*/React.forwardRef(StepForwardOutlined);","// This icon file is generated automatically.\nvar TrophyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 00-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 00-44-44zM184 352V232h64v207.6a91.99 91.99 0 01-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z\" } }] }, \"name\": \"trophy\", \"theme\": \"outlined\" };\nexport default TrophyOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport TrophyOutlinedSvg from \"@ant-design/icons-svg/es/asn/TrophyOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar TrophyOutlined = function TrophyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: TrophyOutlinedSvg\n  }));\n};\nTrophyOutlined.displayName = 'TrophyOutlined';\nexport default /*#__PURE__*/React.forwardRef(TrophyOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["MetricHighlight","children","icon","type","className","iconSize","iconPlacement","clsx","size","PointsHighlight","GainedPoint","gainedPoint","order","description","isPositive","isNegative","title","pt","en","color","GainedPoints","gainedPoints","playerId","gainedPointsDescriptions","points","Array","isArray","map","index","RankingBoard","players","ranking","hideGainedPoints","delay","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useDimensions","height","maxPoints","useMemo","Math","max","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","useEffectOnce","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","position","previousScore","useEffect","style","length","hPosition","id","top","CrownFilled","avatarId","name","undefined","StepRankingWrapper","subtitle","useTemporarilyHidePlayersBar","CaretUpOutlined","SlideShowControls","activeIndex","setActiveIndex","setStep","disableControls","barColor","windowDuration","timeLeft","isRunning","pause","resume","s","min","fill","e","i","width","abs","backgroundColor","onClick","disabled","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","DIRECTIONS","getIndex","point","getPoint","floor","getDirection","from","to","fromX","fromY","toX","toY","ForestTree","segment","tree","startingTeeId","finalTreeId","currentTreeId","showPath","showArrow","hidePassedTreeNames","isSegment","Boolean","isStartingPoint","originDirection","x","y","FOREST_WIDTH","FOREST_HEIGHT","getOriginDirection","isFinalPoint","isCurrentTree","isPassed","passed","TreeCard","String","treeType","text","card","CompassIcon","getAnimationClass","FlagIcon","direction","ArrowIcon","AvatarGroup","list","user","maxCount","avatarProps","v","player","Avatar","alt","Forest","forest","actions","showPlayerPositions","AnimatedProcessingIcon","treeId","treeMap","findLast","selection","clickableTrees","onSelectTree","activeTree","isPathForward","includes","isClickable","isSelected","isActive","selectionIndex","indexOf","role","playersIds","PlayerPositions","playerIds","CompassHighlight","MapHighlight","MapIcon","TreeHighlight","TreeIcon","MapBuilder","onSubmitMap","isLoading","useLoading","filter","previousSelections","clues","_","selections","setSelections","currentIndex","setIndex","usedCards","wrap","LocationIcon","prev","copy","negate","onNegateCard","NoIcon","idx","onUnsetCard","hand","onSetCard","header","LETTERS","getColorFromLetter","newMap","StepBuildMap","announcement","currentRound","fullWidth","contained","PlayerSelectionMap","userMap","clue","StepBuildWait","PhaseMapBuilding","state","info","useUser","useStep","step","translate","useLanguage","request","useAPICall","apiFunction","LABIRINTO_SECRETO_API","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitMapAPIRequest","round","current","isUserMapComplete","every","phase","allowedPhase","PHASES","conditions","isReady","waitingRoomContent","PlayerMap","selectedTrees","currentMap","active","gridTemplateColumns","arr","selectedTree","ClickableForest","onSubmitPath","pathId","passedTrees","setSelection","setActiveTree","origin","usedIndexes","available","topIndex","push","right","rightIndex","down","downIndex","left","leftIndex","getAvailableSegments","isDisabled","guess","slice","choseRandomly","StepFollowPath","activePlayer","playerCount","Object","keys","StepPathWaiting","PhasePathFollowing","useWhichPlayerIsThe","isTheActivePlayer","useOnSubmitPathAPIRequest","DirectionsIcon","turnOrder","activePlayerId","PhaseWait","PhaseContainer","StepRanking","goToPreviousStep","align","PlayerMapResultsSummary","currentPlayer","score","StepGallery","gallery","isFirstGalleryRunThrough","currentColor","getAvatarColorById","PhaseResults","goToNextStep","sortPlayers","some","useSlideShow","PathIcon","onClose","PhaseGameOver","announcementIcon","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","setIsFirstGalleryRunThrough","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser","props","xmlns","viewBox","d","cx","cy","r","StarIcon","ref","React","AntdIcon","_objectSpread","CaretUpOutlinedSvg","displayName","CrownFilledSvg","DownSquareOutlined","DownSquareOutlinedSvg","EyeInvisibleOutlined","EyeInvisibleOutlinedSvg","EyeOutlined","EyeOutlinedSvg","StepBackwardOutlined","StepBackwardOutlinedSvg","StepForwardOutlined","StepForwardOutlinedSvg","TrophyOutlined","TrophyOutlinedSvg","UpCircleOutlined","UpCircleOutlinedSvg"],"sourceRoot":""}