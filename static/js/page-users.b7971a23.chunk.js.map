{"version":3,"file":"static/js/page-users.b7971a23.chunk.js","mappings":"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","sources":["pages/Me/Users.tsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["// Components\n// Sass\nimport './Me.scss';\n\nimport { App, Button, Input, Select, Space, Typography } from 'antd';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { cloneDeep, merge } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useTitle } from 'react-use';\nimport { USER_API, USER_API_ACTIONS } from 'services/adapters';\nimport { firestore } from 'services/firebase';\n\ninterface GameUserEntry {\n  gameName?: GameName;\n  gameId: GameId;\n  startedAt: number;\n  endedAt: number;\n  playerCount: number;\n  placement: number;\n  win?: boolean;\n  last?: boolean;\n  achievements: AchievementKey[];\n}\n\ntype AvatarId = string;\ntype AchievementKey = string;\ntype GameName = string;\ntype DailyEntry = {\n  id: string; // Format YYYY-MM-DD\n  number: number;\n  victory: boolean;\n  hearts: number;\n  letters: string[];\n};\n\n/**\n * User database structure saved in Firestore\n */\ninterface FirebaseUserDB {\n  id: string;\n  isAdmin?: boolean;\n  isGuest?: boolean;\n  preferredLanguage: Language;\n  names: string[]; // unique list but most recent comes last\n  gender?: string;\n  avatars: Record<AvatarId, number>;\n  ratings: Record<GameName, number>;\n  games: Record<GameName, Record<GameId, GameUserEntry>>;\n  blurredImages: Record<ImageCardId, true>;\n  daily: Record<CardId, DailyEntry>;\n}\n\nconst DEFAULT_FIREBASE_USER_DB: FirebaseUserDB = {\n  id: '',\n  names: [],\n  avatars: {},\n  preferredLanguage: 'en',\n  games: {},\n  gender: 'unknown',\n  ratings: {},\n  blurredImages: {},\n  daily: {},\n};\n\nfunction Users() {\n  useTitle('Users - Tarde Divertida');\n  const { message, notification } = App.useApp();\n  const queryClient = useQueryClient();\n\n  const [selectedUserO, setSelectedUserO] = useState(DEFAULT_FIREBASE_USER_DB);\n  const [selectedUserD, setSelectedUserD] = useState(DEFAULT_FIREBASE_USER_DB);\n\n  const usersQuery = useQuery({\n    queryKey: ['users'],\n    queryFn: async () => {\n      const querySnapshot = await getDocs(\n        query(collection(firestore, 'users'), where('isGuest', '!=', true))\n      );\n      const result: any[] = [];\n      querySnapshot.forEach((doc) => result.push(doc.data()));\n      return result;\n    },\n  });\n\n  const usersMutation = useMutation({\n    mutationKey: ['users'],\n    mutationFn: async (data: FirebaseUserDB) => {\n      USER_API.run({ action: USER_API_ACTIONS.UPDATE_USER_DB, ...data });\n    },\n    onSuccess: () => {\n      message.success('User updated');\n      queryClient.invalidateQueries(['users']);\n    },\n    onError: (error: any) => {\n      notification.error({\n        message: 'Error',\n        description: error.message,\n      });\n    },\n  });\n\n  const data: FirebaseUserDB[] = usersQuery.data ?? [];\n\n  const onSelectUserO = (uid: string) => {\n    setSelectedUserO(data.find((e) => e.id === uid) ?? DEFAULT_FIREBASE_USER_DB);\n  };\n\n  const onSelectUserD = (uid: string) => {\n    setSelectedUserD(data.find((e) => e.id === uid) ?? DEFAULT_FIREBASE_USER_DB);\n  };\n\n  const options = data.map((entry) => (\n    <Select.Option key={entry.id} value={entry.id}>\n      <strong>{entry?.names?.[0]}</strong>: {entry.id}\n    </Select.Option>\n  ));\n\n  const selectO = (\n    <Select onChange={onSelectUserO} style={{ minWidth: 300 }}>\n      {options}\n    </Select>\n  );\n\n  const selectD = (\n    <Select onChange={onSelectUserD} style={{ minWidth: 300 }}>\n      {options}\n    </Select>\n  );\n\n  const mergedUser = useMemo(\n    () => merge(cloneDeep(selectedUserO ?? {}), cloneDeep(selectedUserD ?? {})),\n    [selectedUserO, selectedUserD]\n  );\n\n  console.log(data);\n\n  return (\n    <div>\n      <Typography.Title>Users</Typography.Title>\n      {usersQuery.isLoading && <Typography.Paragraph>Loading...</Typography.Paragraph>}\n      <Space className=\"margin\" style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)' }}>\n        <Space direction=\"vertical\">\n          <Typography.Title level={2}>Origin</Typography.Title>\n          <Space className=\"margin\">{selectO}</Space>\n          <Typography.Paragraph>\n            {selectedUserO?.names?.join(', ') ?? 'No user selected'}\n          </Typography.Paragraph>\n          <Input.TextArea\n            value={JSON.stringify(selectedUserO ?? {}, null, 2)}\n            rows={20}\n            cols={50}\n            className=\"margin\"\n          />\n        </Space>\n\n        <Space direction=\"vertical\">\n          <Typography.Title level={2}>Destination</Typography.Title>\n          <Space className=\"margin\">{selectD}</Space>\n          <Typography.Paragraph>\n            {selectedUserD?.names?.join(', ') ?? 'No user selected'}\n          </Typography.Paragraph>\n          <Input.TextArea\n            value={JSON.stringify(selectedUserD ?? {}, null, 2)}\n            rows={20}\n            cols={50}\n            className=\"margin\"\n          />\n        </Space>\n      </Space>\n\n      <Space direction=\"vertical\">\n        <Typography.Title level={2}>Merge</Typography.Title>\n\n        <Typography.Paragraph>{mergedUser?.names?.join(', ') ?? 'No user selected'}</Typography.Paragraph>\n        <Input.TextArea\n          value={JSON.stringify(mergedUser ?? {}, null, 2)}\n          rows={20}\n          cols={50}\n          className=\"margin\"\n        />\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          loading={usersMutation.isLoading}\n          onClick={() => usersMutation.mutate(mergedUser)}\n          disabled={!mergedUser?.id}\n        >\n          Merge Users \"{selectedUserO.id}\" into \"{selectedUserD.id}\"\n        </Button>\n      </Space>\n    </div>\n  );\n}\n\nexport default Users;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["DEFAULT_FIREBASE_USER_DB","id","names","avatars","preferredLanguage","games","gender","ratings","blurredImages","daily","useTitle","App","message","notification","queryClient","useQueryClient","useState","selectedUserO","setSelectedUserO","selectedUserD","setSelectedUserD","usersQuery","useQuery","queryKey","queryFn","getDocs","query","collection","firestore","where","querySnapshot","result","forEach","doc","push","data","usersMutation","useMutation","mutationKey","mutationFn","USER_API","action","USER_API_ACTIONS","onSuccess","success","invalidateQueries","onError","error","description","options","map","entry","value","selectO","onChange","uid","find","e","style","minWidth","selectD","mergedUser","useMemo","merge","cloneDeep","console","log","isLoading","className","display","gridTemplateColumns","direction","level","join","JSON","stringify","rows","cols","type","size","loading","onClick","mutate","disabled","constructor","bindMethods","this","bind","reset","setOptions","prevOptions","client","defaultMutationOptions","shallowEqualObjects","mutation","observer","onUnsubscribe","onMutationUpdate","notifyOptions","listeners","getCurrentResult","getMutationCache","build","variables","currentMutation","updateResult","state","getDefaultState","isSuccess","isError","isIdle","notify","notifyManager","listener","noop"],"sourceRoot":""}