{"version":3,"file":"static/js/472.42936170.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextPhaseButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","hooks/useAPICall.ts","hooks/useCountdown.ts"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\nimport { useState } from 'react';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  isLoading?: boolean;\n  state: GameState;\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n\ntype PlayersReadyStateProps = {\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm, Spin } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n\ntype AdminMenuDrawerProps = {\n  state: GameState;\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [usingEmulators] = useGlobalState('usingEmulators');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const [meta] = useGlobalState('gameMeta');\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <Button\n          type=\"primary\"\n          danger\n          size=\"small\"\n          onClick={showDrawer}\n          disabled={isLoading}\n          icon={isLoading ? <Spin /> : <FireFilled />}\n        >\n          Admin\n        </Button>\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} visible={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label=\"Make this the last round\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button target=\"_blank\" href={getFirebaseUrl(usingEmulators, meta.gameName, meta.gameId)}>\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n\nconst getFirebaseUrl = (usingEmulators: boolean, gameCollection: GameName, gameId: GameId) => {\n  return usingEmulators\n    ? `http://localhost:4000/firestore/${gameCollection}/${gameId}/session/state`\n    : `https://console.firebase.google.com/u/0/project/game-session/firestore/data/~2${gameCollection}~2F${gameId}~2Fsession~2Fstate`;\n};\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Flag indicating if the current round should be considered the final round\n   */\n  lastRound?: boolean;\n  /**\n   * Time to auto trigger the button in seconds\n   */\n  autoTriggerTime?: number;\n};\n\n/**\n * Button only available to the admin to go to the next phase.\n * It can be auto-triggered by using the autoTriggerTime\n * @param props\n * @returns\n */\nexport function AdminNextPhaseButton({\n  className = '',\n  round,\n  lastRound = false,\n  autoTriggerTime = 0,\n  children,\n}: AdminNextPhaseButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE });\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <TimedButton\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        disabled={isLoading}\n        onClick={handleClick}\n        onExpire={handleClick}\n        duration={autoTriggerTime}\n        hideTimer={!Boolean(autoTriggerTime)}\n      >\n        {children ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </TimedButton>\n    </AdminOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n\ninterface AdminButtonProps extends ButtonProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Action triggered when the button is clicked\n   */\n  onClick: GenericFunction;\n}\n\nexport function AdminButton({ onClick, children, ...rest }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...rest}>\n      {children}\n    </Button>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  onClick: GenericFunction;\n  label: ReactNode;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useCountdown } from 'hooks/useCountdown';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n    disabled: hideTimer,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && <span className={clsx(timeClass, `${timeClass}--${type}`)}>{timeLeft}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useCallback } from 'react';\nimport { message, notification } from 'antd';\nimport { HttpsCallable } from 'firebase/functions';\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\ntype useAPICallArgs = {\n  apiFunction: HttpsCallable<unknown, unknown>;\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\n/**\n * Wrapper around common firebase http call\n * @param data\n * @param data.apiFunction\n * @param [data.onBeforeCall] what to run before the api call\n * @param [data.onAfterCall] what to run after the api call\n * @param [data.onError] what to run if an error occurs\n * @param [data.onSuccess] what to run if success occurs\n * @param [data.actionName] the name used in the loader hook\n * @param [data.successMessage]\n * @param [data.errorMessage]\n * @returns\n */\n\n/**\n * Wrapper around common firebase http call\n * @param options\n * @returns\n */\nexport function useAPICall({\n  apiFunction,\n  actionName = 'api-action',\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: useAPICallArgs): (...args: any[]) => any {\n  const { setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [userId] = useGlobalState('userId');\n\n  const onAPICall = debounce(\n    useCallback(\n      async (payload: {}) => {\n        try {\n          setLoader(actionName, true);\n          await onBeforeCall();\n          const response = await apiFunction({\n            gameId,\n            gameName,\n            playerId: userId,\n            ...payload,\n          });\n\n          if (response.data) {\n            onSuccess();\n            message.success(successMessage);\n          }\n        } catch (e: any) {\n          notification.error({\n            message: errorMessage,\n            description: JSON.stringify(e.message),\n            placement: 'bottomLeft',\n          });\n          console.error(e);\n          onError();\n        } finally {\n          await onAfterCall();\n          setLoader(actionName, false);\n        }\n      },\n      [\n        actionName,\n        apiFunction,\n        errorMessage,\n        gameId,\n        gameName,\n        userId,\n        setLoader,\n        successMessage,\n        onBeforeCall,\n        onAfterCall,\n        onError,\n        onSuccess,\n      ]\n    )\n  );\n\n  return onAPICall;\n}\n","import { TimerResult, TimerSettings, useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ntype SelectedTimeSettings = Omit<TimerSettings, 'expiryTimestamp'>;\n\ninterface useCountdownSettings extends SelectedTimeSettings {\n  /**\n   * The duration of the countdown in seconds\n   */\n  duration: number;\n  /**\n   * Disable timer\n   */\n  disabled?: boolean;\n}\n\ninterface useCountdownResults extends TimerResult {\n  /**\n   * Time left in total seconds (minutes + seconds)\n   */\n  timeLeft: number;\n}\n\n/**\n * Timer countdown to perform actions\n * @param settings\n * @returns\n */\nexport function useCountdown({\n  duration,\n  onExpire,\n  disabled = false,\n  ...rest\n}: useCountdownSettings): useCountdownResults {\n  const timer = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    onExpire: disabled ? undefined : onExpire,\n    ...rest,\n  });\n\n  const timeLeft = timer.minutes * 60 + timer.seconds;\n\n  return {\n    ...timer,\n    timeLeft,\n  };\n}\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","usingEmulators","visible","setVisible","meta","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","size","onClick","placement","closable","onConfirm","phase","lastRound","target","href","getFirebaseUrl","gameName","gameId","gameCollection","ButtonLabel","round","current","total","pt","en","AdminNextPhaseButton","autoTriggerTime","translate","useLanguage","onGoToNextPhase","handleClick","onExpire","duration","hideTimer","Boolean","AdminButton","rest","RocketFilled","AdminOnlyButton","TimedButton","timeLeft","useCountdown","autoStart","timeClass","TransparentButton","active","activeClass","hoverType","onBeforeCall","onError","onSuccess","setLoader","userId","onAPICall","func","timer","timeout","args","clearTimeout","setTimeout","apply","debounce","useCallback","playerId","data","notification","description","console","error","useTimer","expiryTimestamp","inNSeconds","minutes","seconds"],"sourceRoot":""}