{"version":3,"file":"static/js/7504.c3992dd7.chunk.js","mappings":"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","sources":["components/general/GameTags.tsx","pages/Hub/components/CreateGameModal.tsx","hooks/useRedirectToNewGame.ts","pages/Hub/components/GameCard.tsx"],"sourcesContent":["// Ant Design Resources\nimport { Space, SpaceProps, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { TAG_DICT } from 'utils/constants';\n\nconst sortTags = (tags: string[]) => {\n  const sortedTags: string[] = [];\n\n  tags.forEach((tag) => {\n    if (TAG_DICT?.[tag]?.index !== undefined) {\n      sortedTags[TAG_DICT[tag].index] = tag;\n    } else if (sortedTags.length < 18) {\n      sortedTags[18] = tag;\n    } else {\n      sortedTags.push(tag);\n    }\n  });\n\n  return sortedTags.filter((v) => Boolean(v));\n};\n\ntype GameTagsProps = {\n  tags: string[];\n  gameCode: GameCode;\n} & SpaceProps;\n\nexport function GameTags({ tags, gameCode, ...rest }: GameTagsProps) {\n  const { language } = useLanguage();\n  const sortedTags = sortTags(tags);\n\n  return (\n    <Space wrap {...rest}>\n      {sortedTags.map((tag) => (\n        <Tag key={`${gameCode}-${tag}`} color={TAG_DICT[tag]?.color}>\n          {TAG_DICT[tag]?.label[language]}\n        </Tag>\n      ))}\n    </Space>\n  );\n}\n","import clsx from 'clsx';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useCopyToClipboard } from 'react-use';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Image, Modal, message, Button, notification, Divider, Typography, Switch, Space, Alert } from 'antd';\n// Adapters\nimport { ADMIN_API } from 'services/adapters';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { useRedirectToNewGame } from 'hooks/useRedirectToNewGame';\n// Constants\nimport { LATEST_GAME_IDS, PUBLIC_URL } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { Loading } from 'components/loaders';\n\nconst updateLocal24hGameIds = (latestGameIds: NumberDictionary, newId: GameId) => {\n  const now = Date.now();\n  const past24Hours = now - 1000 * 60 * 60 * 24;\n  const cleanedUpIds = Object.entries(latestGameIds ?? {}).reduce((acc: PlainObject, [key, timestamp]) => {\n    if (timestamp > past24Hours) {\n      acc[key] = timestamp;\n    }\n    return acc;\n  }, {});\n  return {\n    [LATEST_GAME_IDS]: {\n      ...cleanedUpIds,\n      [newId]: now,\n    },\n  };\n};\n\nconst latestGameBeforeNewOne = (latestGameIds: NumberDictionary) => {\n  const idsObjectList = Object.entries(latestGameIds).map(([gameId, createdAt]) => ({ gameId, createdAt }));\n  if (idsObjectList.length < 2) {\n    return null;\n  }\n\n  const orderedList = orderBy(idsObjectList, 'createdAt', 'desc');\n  const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n  const currentMilliseconds = Date.now();\n\n  // Check if game is too old\n  if (orderedList[1].createdAt - currentMilliseconds > twoHoursInMilliseconds) {\n    return null;\n  }\n\n  return orderedList[1].gameId;\n};\n\ntype CreateGameModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function CreateGameModal({ gameInfo }: CreateGameModalProps): JSX.Element {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  const { language, translate } = useLanguage();\n  const { setLoader } = useLoading();\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n  const [isVisible, setVisibility] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [gameId, setGameId] = useState(null);\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUserName] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [options, setOptions] = useState({});\n  const previousGameId = latestGameBeforeNewOne(getLocalStorage(LATEST_GAME_IDS));\n\n  const { startRedirect, isSettingRedirect, wasRedirectSuccessful } = useRedirectToNewGame();\n\n  useEffect(() => {\n    if (state.value && gameId) {\n      message.info(`Copied to clipboard: ${state.value}`);\n    }\n  }, [state, gameId]);\n\n  const onCloseModal = useCallback(() => {\n    setVisibility(false);\n  }, []);\n\n  const onChangeOptions = (key: string, value: boolean) => {\n    setOptions((s) => ({\n      ...s,\n      [key]: value,\n    }));\n  };\n\n  const createGame = async () => {\n    try {\n      setLoader('create', true);\n      setLoading(true);\n      const response: PlainObject = await ADMIN_API.createGame({\n        gameName: gameInfo.gameName,\n        language,\n        options,\n      });\n      if (response.data.gameId) {\n        setGameId(response.data.gameId);\n        setUserId(null);\n        setUserName('');\n        setUserAvatarId('');\n        setLocalStorage(updateLocal24hGameIds(getLocalStorage(LATEST_GAME_IDS), response.data.gameId));\n        const baseUrl = window.location.href.split(pathname)[0];\n        copyToClipboard(`${baseUrl}/${response.data.gameId}`);\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Aplicativo encontrou um erro ao tentar criar o jogo',\n          'The application found an error while trying to create a game',\n          language\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      setVisibility(false);\n    } finally {\n      setLoading(false);\n      setLoader('create', false);\n    }\n  };\n\n  const onConfirmGame = async () => {\n    if (gameId) {\n      navigate(`/${gameId}`);\n    } else {\n      message.info(\n        translate('Péra! O jogo ainda não foi inicializado.', 'Wait! The game has not been created')\n      );\n    }\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => setVisibility(true)} block>\n        <Translate pt=\"Criar\" en=\"Create\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Criando novo jogo', 'Creating new game')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          onOk={onConfirmGame}\n          okButtonProps={{ disabled: Boolean(!gameId) || isSettingRedirect }}\n          maskClosable={false}\n        >\n          <>\n            <Image\n              alt={gameInfo.title[language]}\n              src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n              fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n              className=\"round-corners\"\n            />\n\n            <Options\n              options={gameInfo.options}\n              disabled={isLoading || Boolean(gameId)}\n              onChangeOptions={onChangeOptions}\n              selectedOptions={options}\n            />\n\n            <Divider />\n\n            {isLoading && (\n              <>\n                <Instruction>\n                  <Translate pt=\"O jogo está sendo criado...\" en=\"The game session is being created\" />\n                </Instruction>\n                <Loading message={translate('Gerando...', 'Generating...')} margin />\n              </>\n            )}\n\n            {gameInfo.version.startsWith('alpha') && (\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"Este jogo está em alpha, não o jogue\"\n                    en=\"This game is still in alpha and shouldn't be played\"\n                  />\n                }\n              />\n            )}\n\n            {gameInfo.version.startsWith('beta') && (\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"Este jogo está em beta, prossiga com cuidado\"\n                    en=\"This game is in beta and bugs might be everywhere\"\n                  />\n                }\n              />\n            )}\n\n            {Boolean(gameId) ? (\n              <div>\n                <Title className=\"center\">\n                  <Translate pt=\"Jogo inicializado\" en=\"Game Initialized\" />: {gameId}\n                </Title>\n                <Instruction>\n                  {previousGameId && !wasRedirectSuccessful && (\n                    <Alert\n                      type=\"info\"\n                      showIcon\n                      message={\n                        <>\n                          <Translate\n                            pt={\n                              <>\n                                Você quer redirecionar jogadores em {previousGameId} para essa nova partida?\n                              </>\n                            }\n                            en={<>Redirect players in {previousGameId} to this new play?</>}\n                          />\n                          <Button\n                            size=\"large\"\n                            onClick={() =>\n                              startRedirect(previousGameId ?? '', gameId ?? '', gameInfo.gameName)\n                            }\n                            disabled={!gameId || !previousGameId}\n                            loading={isSettingRedirect}\n                          >\n                            <Translate pt=\"Redirecione-os\" en=\"Redirect them\" />\n                          </Button>\n                        </>\n                      }\n                    />\n                  )}\n                  {wasRedirectSuccessful && (\n                    <Alert\n                      type=\"info\"\n                      showIcon\n                      message={\n                        <Translate\n                          pt={\n                            <>\n                              Jogadores em {previousGameId} foram convidados para o jogo {gameId}\n                            </>\n                          }\n                          en={\n                            <>\n                              Players in {previousGameId} have been invited to {gameId}\n                            </>\n                          }\n                        />\n                      }\n                    />\n                  )}\n                </Instruction>\n              </div>\n            ) : (\n              <Space className=\"space-container\" align=\"center\">\n                <Button type=\"primary\" size=\"large\" disabled={isLoading} onClick={createGame}>\n                  <Translate pt=\"Criar Jogo\" en=\"Create Game\" />\n                </Button>\n              </Space>\n            )}\n          </>\n        </Modal>\n      )}\n    </>\n  );\n}\n\ntype OptionsProps = {\n  options?: GameInfo['options'];\n  disabled: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\nfunction Options({ options = [], disabled, onChangeOptions, selectedOptions }: OptionsProps) {\n  return Boolean(options.length) ? (\n    <div className=\"create-game-modal-options\">\n      <Typography.Title level={5} className=\"create-game-modal-options__title\">\n        <Translate pt=\"Opções:\" en=\"Options:\" />\n      </Typography.Title>\n      {(options ?? []).map((option) => (\n        <Typography.Paragraph\n          key={`option-${option.label}`}\n          className={clsx(\n            'create-game-modal-options__option',\n            option.disabled && 'create-game-modal-options__option--disabled'\n          )}\n        >\n          <span className=\"create-game-modal-options__label\">{option.label}</span>\n          <span\n            className={clsx(\n              'create-game-modal-options__off',\n              !selectedOptions[option.key] && 'create-game-modal-options--selected'\n            )}\n          >\n            {option?.off ?? ''}\n          </span>\n          <Switch disabled={disabled || option.disabled} onChange={(e) => onChangeOptions(option.key, e)} />\n          <span\n            className={clsx(\n              'create-game-modal-options__on',\n              selectedOptions[option.key] && 'create-game-modal-options--selected'\n            )}\n          >\n            {option?.on ?? ''}\n          </span>\n          {Boolean(option.description) && (\n            <span className=\"create-game-modal-options__option-description\">{option.description}</span>\n          )}\n        </Typography.Paragraph>\n      ))}\n    </div>\n  ) : (\n    <div className=\"create-game-modal-options create-game-modal-options__no-options\">\n      <Typography.Text>\n        <Translate pt=\"Este jogo não possui customizações\" en=\"This game does not support customizations\" />\n      </Typography.Text>\n    </div>\n  );\n}\n","import { notification } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useMutation, useQuery } from 'react-query';\nimport { GAME_API } from 'services/adapters';\nimport { ADMIN_API } from 'services/adapters';\nimport { useCurrentUserContext } from './useCurrentUserContext';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\ntype GameMetaResponse = {\n  data: GameMeta;\n};\n\nexport function useRedirectToNewGame() {\n  const { currentUser } = useCurrentUserContext();\n  const [happenedOnce, setHappenedOnce] = useState(false);\n  const [previousGameId, setPreviousGameId] = useState('');\n  const [newGame, setNewGame] = useState({\n    gameId: '',\n    gameName: '',\n  });\n\n  const metaQuery = useQuery<GameMetaResponse>({\n    queryKey: ['meta', previousGameId],\n    queryFn: async () => {\n      console.count('Fetching game meta...');\n      return (await GAME_API.loadGame({ gameId: previousGameId })) as GameMetaResponse;\n    },\n    enabled: Boolean(previousGameId),\n    onError: (e: any) => {\n      console.error(e);\n      notification.error({\n        message: 'Failed to load previous game to trigger the redirect',\n        description: JSON.stringify(e.message),\n      });\n    },\n  });\n\n  const mutation = useMutation({\n    mutationKey: ['oldState', newGame.gameId],\n    mutationFn: async (payload: {}) => {\n      const meta = metaQuery.data?.data as GameMeta;\n\n      return await ADMIN_API.performAdminAction({\n        gameId: previousGameId,\n        gameName: meta?.gameName ?? '',\n        playerId: currentUser.id,\n        action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY,\n        state: payload,\n      });\n    },\n    onSuccess: async () => {\n      notification.success({\n        message: 'Redirect successfully triggered',\n      });\n    },\n    onError: (e: any) => {\n      console.error(e);\n      notification.error({\n        message: 'Failed to load previous game to continue the redirect',\n        description: JSON.stringify(e.message),\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (\n      !happenedOnce &&\n      previousGameId &&\n      newGame.gameId &&\n      newGame.gameName &&\n      metaQuery.isSuccess &&\n      metaQuery?.data?.data?.gameName\n    ) {\n      setHappenedOnce(true);\n      mutation.mutate({\n        redirect: {\n          redirectAt: Date.now(),\n          ...newGame,\n        },\n      });\n    }\n  }, [previousGameId, happenedOnce, newGame, metaQuery?.data?.data?.gameName, metaQuery.isSuccess, mutation]);\n\n  const startRedirect = async (previousGameId: GameId, newGameId: GameId, newGameName: GameName) => {\n    if (happenedOnce) {\n      notification.error({\n        message: 'Redirect has failed to trigger',\n      });\n      return;\n    }\n    setNewGame({\n      gameId: newGameId,\n      gameName: newGameName,\n    });\n    setPreviousGameId(previousGameId);\n  };\n\n  return {\n    isSettingRedirect: metaQuery.isLoading && mutation.isLoading,\n    startRedirect,\n    wasRedirectSuccessful: mutation.isSuccess,\n  };\n}\n","// Ant Design Resources\nimport { Card, Image, Divider, Badge, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv, truncateRecommended } from 'utils/helpers';\n// Components\nimport { RulesModal } from 'components/rules';\nimport { CreateGameModal } from './CreateGameModal';\nimport { GameTags } from 'components/general/GameTags';\nimport { ClockCircleOutlined } from '@ant-design/icons';\n\nconst getVersionColor = (version: string) => {\n  if (version.includes('dev')) {\n    return '#6cb3f6';\n  }\n\n  if (version.includes('alpha')) {\n    return '#F97659';\n  }\n\n  if (version.includes('beta')) {\n    return '#F9D859';\n  }\n\n  const major = Number(version.split('.')[0]);\n\n  if (isNaN(major)) {\n    return '#96A0A3';\n  }\n\n  if (major === 0) {\n    return '#F9D859';\n  }\n\n  if (major === 1) {\n    return '#72D984';\n  }\n\n  if (major === 2) {\n    return '#7CBD51';\n  }\n\n  if (major >= 3) {\n    return '#7CBD51';\n  }\n\n  return '#96A0A3';\n};\n\ntype GameCardProps = {\n  game: GameInfo;\n  isAdmin?: boolean;\n};\n\nexport function GameCard({ game, isAdmin = true }: GameCardProps) {\n  const { language, translate } = useLanguage();\n\n  const duration = calculateGameAverageDuration(game);\n\n  return (\n    <Card\n      key={game.gameName}\n      className=\"game-card\"\n      cover={\n        <Badge.Ribbon text={game.version} color={getVersionColor(game.version)}>\n          <Image\n            alt={game.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${game.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          />\n        </Badge.Ribbon>\n      }\n    >\n      <div className=\"game-card__contents\">\n        <Space direction=\"vertical\">\n          <Card.Meta\n            title={\n              <span className=\"game-card__title\" title={game.title[language]}>\n                {isDevEnv && `[${game.gameCode}]`} {game.title[language]}\n              </span>\n            }\n            description={`${translate('Baseado em', 'Based on')} ${game.basedOn\n              .split('')\n              .reverse()\n              .join('')}`}\n          />\n\n          <Card.Meta className=\"game-card__description\" description={game.summary[language]} />\n\n          {Boolean(game.rules?.[language]?.length > 1) && (\n            <RulesModal\n              gameInfo={game}\n              buttonProps={{ size: 'small', className: 'game-card__margin-bottom' }}\n            />\n          )}\n\n          <GameTags\n            wrap\n            size={[1, 6]}\n            style={{ display: 'flex' }}\n            gameCode={game.gameCode}\n            tags={game.tags}\n          />\n        </Space>\n      </div>\n\n      <div className=\"game-card__actions\">\n        {game.duration && (\n          <Card.Meta\n            description={\n              <>\n                <ClockCircleOutlined /> {duration.min} min - {duration.max} min (Avg: {duration.ideal} min)\n              </>\n            }\n          />\n        )}\n\n        <Divider className=\"game-card__divider\" />\n\n        <Space direction=\"vertical\">\n          <Card.Meta\n            description={translate(\n              `Para ${game.playerCount.min}-${game.playerCount.max} jogadores`,\n              `For ${game.playerCount.min}-${game.playerCount.max} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count\"\n            description={translate(\n              `Melhor com ${game.playerCount.best || '?'} jogadores`,\n              `Best wih ${game.playerCount.best || '?'} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count game-card__margin-bottom\"\n            description={translate(\n              `Recomendado jogar com ${truncateRecommended(game.playerCount.recommended)}`,\n              `Recommended with ${truncateRecommended(game.playerCount.recommended)}`\n            )}\n          />\n        </Space>\n\n        {isAdmin && (\n          <div style={{ marginTop: '1rem' }}>\n            {Boolean(game.available[language]) && <CreateGameModal gameInfo={game} />}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n"],"names":["GameTags","tags","gameCode","rest","language","useLanguage","sortedTags","forEach","tag","undefined","TAG_DICT","index","length","push","filter","v","Boolean","sortTags","wrap","map","color","label","updateLocal24hGameIds","latestGameIds","newId","now","Date","past24Hours","cleanedUpIds","Object","entries","reduce","acc","key","timestamp","LATEST_GAME_IDS","CreateGameModal","gameInfo","navigate","useNavigate","pathname","useLocation","useCopyToClipboard","state","copyToClipboard","translate","setLoader","useLoading","useLocalStorage","getLocalStorage","setLocalStorage","useState","isVisible","setVisibility","isLoading","setLoading","gameId","setGameId","useGlobalState","setUserId","setUserName","setUserAvatarId","options","setOptions","previousGameId","idsObjectList","createdAt","orderedList","orderBy","currentMilliseconds","latestGameBeforeNewOne","currentUser","useCurrentUserContext","happenedOnce","setHappenedOnce","setPreviousGameId","gameName","newGame","setNewGame","metaQuery","useQuery","queryKey","queryFn","console","count","GAME_API","enabled","onError","e","error","notification","message","description","JSON","stringify","mutation","useMutation","mutationKey","mutationFn","payload","meta","data","ADMIN_API","playerId","id","action","ADMIN_ACTIONS","onSuccess","useEffect","isSuccess","mutate","redirect","redirectAt","startRedirect","newGameId","newGameName","isSettingRedirect","wasRedirectSuccessful","useRedirectToNewGame","value","onCloseModal","useCallback","createGame","response","baseUrl","window","location","href","split","placement","onConfirmGame","type","onClick","block","pt","en","title","open","onCancel","onOk","okButtonProps","disabled","maskClosable","alt","src","PUBLIC_URL","fallback","className","Options","onChangeOptions","s","selectedOptions","margin","version","startsWith","showIcon","size","loading","align","level","option","clsx","off","onChange","on","getVersionColor","includes","major","Number","isNaN","GameCard","game","isAdmin","duration","calculateGameAverageDuration","cover","text","direction","isDevEnv","basedOn","reverse","join","summary","rules","buttonProps","style","display","ClockCircleOutlined","min","max","ideal","playerCount","best","truncateRecommended","recommended","marginTop","available"],"sourceRoot":""}