{"version":3,"file":"static/js/arte-ruim.d3c5dcaf.chunk.js","mappings":"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","sources":["components/audio/ArteRuimTimerSound.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/arte-ruim/utils/constants.ts","games/arte-ruim/components/TextBlobs.tsx","games/arte-ruim/components/LevelInstruction.tsx","games/arte-ruim/StepDraw.tsx","games/arte-ruim/PhaseDraw.tsx","games/arte-ruim/utils/api-requests.ts","games/arte-ruim/components/EvaluatedDrawings.tsx","games/arte-ruim/utils/helpers.ts","games/arte-ruim/components/EvaluationAllDrawings.tsx","games/arte-ruim/components/Card.tsx","games/arte-ruim/components/EvaluationAllCards.tsx","games/arte-ruim/StepEvaluation.tsx","games/arte-ruim/PhaseEvaluation.tsx","games/arte-ruim/components/GalleryWindowCredits.tsx","games/arte-ruim/components/GalleryWindowGuesses.tsx","games/arte-ruim/components/GalleryWindowResult.tsx","games/arte-ruim/StepGallery.tsx","games/arte-ruim/StepRanking.tsx","games/arte-ruim/PhaseGallery.tsx","games/arte-ruim/components/DrawingGrade.tsx","games/arte-ruim/components/FinalGallery.tsx","games/arte-ruim/PhaseGameOver.tsx","games/arte-ruim/SessionArteRuim.tsx","games/arte-ruim/utils/achievements.ts","icons/ClockIcon.tsx","icons/PaintingIcon.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAudio } from 'react-use';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Sound\nconst arteRuimTimer = require('assets/sounds/arte-ruim-timer-remix.mp3');\n\nexport function ArteRuimTimerSound() {\n  const [volume] = useGlobalLocalStorage('volume');\n  const [audio, , controls] = useAudio({\n    src: arteRuimTimer,\n    autoPlay: true,\n    loop: false,\n  });\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: it only needs to be retriggered when the volume changes\n  useEffect(() => {\n    controls.volume(volume);\n  }, [volume]);\n\n  return <>{audio}</>;\n}\n","import type { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import type { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import type { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","export const ARTE_RUIM_ACTIONS = {\n  SUBMIT_DRAWING: 'SUBMIT_DRAWING',\n  SUBMIT_VOTING: 'SUBMIT_VOTING',\n} as const;\n\nexport const SLIDE_DURATION = 10;\n","import clsx from 'clsx';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { TimeHighlight } from 'components/metrics/TimeHighlight';\nimport { Instruction } from 'components/text';\n\nexport const DrawInstruction = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você terá <TimeHighlight>10</TimeHighlight> segundos para ler a sua carta e desenhá-la.\n          <br />\n          Aperte o botão quando estiver pronto!\n          <br />\n          <span className={clsx(getAnimationClass('tada'))}>\n            <strong>Não vale usar números e letras.</strong>\n          </span>\n          <br />\n          Fique esperto porque o tempo começa assim que você apertar.\n        </>\n      }\n      en={\n        <>\n          You'll have <TimeHighlight>10</TimeHighlight> seconds to read and draw your card.\n          <br />\n          Press the button when you're ready!\n          <br />\n          <span className={clsx(getAnimationClass('tada'))}>\n            <strong>You can NOT use numbers or letters.</strong>\n          </span>\n          <br />\n          Be aware of the timer! It starts as soon as you press the button.\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const EvaluationRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n          par.\n          <br />\n          Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você selecionou.\n          <br />\n          Quando encontrar todos os pares, envie sua avaliação!\n        </>\n      }\n      en={\n        <>\n          Find the pairs of artwork and card by clicking on a card or artwork then on its match.\n          <br />A ribbon will show up on the artwork with the color and letter of the matching card.\n          <br />\n          When you're done, click the button to send your evaluation!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const GalleryRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Agora, mostraremos cada arte, o que os jogadores votaram e a resposta final.\n          <br />\n          Se você votou na expressão correta, você ganha <PointsHighlight type=\"positive\">2</PointsHighlight>{' '}\n          pontos.\n          <br />\n          Quando for a sua arte, você ganha <PointsHighlight type=\"positive\">1</PointsHighlight> ponto para\n          cada pessoa que votou corretamente.\n        </>\n      }\n      en={\n        <>\n          Now we show each art, what players voted, and the final answer.\n          <br />\n          You get <PointsHighlight type=\"positive\">2</PointsHighlight> points if you selected the right card.\n          <br />\n          When players selected the correct card for your artwork, you get{' '}\n          <PointsHighlight type=\"positive\">1</PointsHighlight> point for each match!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const ScoringRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você ganha <PointsHighlight type=\"positive\">2</PointsHighlight> pontos para cada ligação correta\n          entre arte e expressão.\n          <br />\n          Para cada ligação correta que sua arte ganha, você recebe{' '}\n          <PointsHighlight type=\"positive\">1</PointsHighlight> ponto.\n        </>\n      }\n      en={\n        <>\n          You get <PointsHighlight type=\"positive\">2</PointsHighlight> points if you matched the right card\n          with artwork.\n          <br />\n          For you own artwork, you get <PointsHighlight type=\"positive\">1</PointsHighlight> point for each\n          correct match the other players done.\n        </>\n      }\n    />\n  </Instruction>\n);\n","// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype LevelInstructionProps = {\n  level: number;\n  levelType: string;\n};\n\nexport function LevelInstruction({ level, levelType }: LevelInstructionProps) {\n  if (level < 4) {\n    return <></>;\n  }\n\n  if (level === 4) {\n    return (\n      <Instruction contained>\n        <Translate\n          pt=\"No nível 4, as cartas tem um ou dois temas comuns, então preste atenção nos detalhes\"\n          en=\"On level 4, the cards have one or two common themes, so pay attention to details\"\n        />\n      </Instruction>\n    );\n  }\n\n  if (levelType === 'pairs') {\n    return (\n      <Instruction contained>\n        <Translate\n          pt=\"No nível 5, só existem duas cartas para todos\"\n          en=\"On level 5, players draw one of two things only\"\n        />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Rodada Especial:{' '}\n            <DualTranslate>{getLevelText[levelType] ?? { pt: 'Surpresa', en: 'Surprise' }}</DualTranslate>\n          </>\n        }\n        en={<>Special Round: {}</>}\n      />\n    </Instruction>\n  );\n}\n\nconst getLevelText: Record<string, DualLanguageValue> = {\n  contenders: {\n    pt: 'Personagens e Personalidades',\n    en: 'Characters and Celebrities',\n  },\n  movies: {\n    pt: 'Filmes',\n    en: 'Movies',\n  },\n  adjectives: {\n    pt: 'Adjetivos',\n    en: 'Adjectives',\n  },\n};\n","import { mockDrawing } from 'mock/drawing';\nimport { useEffect, useState } from 'react';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\n// Icons\nimport { PanicIcon } from 'icons/PanicIcon';\n// Components\nimport { ArteRuimTimerSound } from 'components/audio/ArteRuimTimerSound';\nimport { DrawingCanvas } from 'components/canvas';\nimport { Card } from 'components/cards';\nimport { DevButton } from 'components/debug';\nimport { Step, type StepProps } from 'components/steps';\n// Internal\nimport type { ArteRuimCard } from './utils/types';\n\ntype StepDrawProps = {\n  secretCard: ArteRuimCard | PlainObject;\n  onSubmitDrawing: GenericFunction;\n  startDrawingTimer: boolean;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepDraw({ secretCard, onSubmitDrawing, startDrawingTimer, announcement }: StepDrawProps) {\n  const { translate } = useLanguage();\n  const { isDebugEnabled } = useDevFeatures();\n  const [lines, setLines] = useState<CanvasLine[]>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { seconds, start, isRunning } = useCountdown({\n    duration: 12,\n    autoStart: false,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmitDrawing({\n        drawing: JSON.stringify(lines),\n        cardId: secretCard.id,\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isRunning && startDrawingTimer) {\n      start();\n    }\n  }, [startDrawingTimer, isRunning, start]);\n\n  const onMockDrawing = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(mockDrawing()),\n      cardId: secretCard.id,\n    });\n\n  useMock(() => {\n    onSubmitDrawing({\n      drawing: JSON.stringify(mockDrawing()),\n      cardId: secretCard.id,\n    });\n  });\n\n  return (\n    <Step announcement={announcement}>\n      <Card\n        size=\"large\"\n        header={translate('Desenhe', 'Draw', isDebugEnabled ? secretCard?.id : undefined)}\n        footer={Array(secretCard?.level).fill('•').join('')}\n        className=\"a-draw-step__card\"\n        color=\"yellow\"\n      >\n        {isRunning && (\n          <>\n            {secretCard?.text}\n            <span className=\"a-draw-step__timer\">{seconds > 1 ? seconds - 2 : 0}</span>\n          </>\n        )}\n      </Card>\n      {isRunning && <ArteRuimTimerSound />}\n\n      <DevButton onClick={onMockDrawing}>Mock Drawing</DevButton>\n\n      {isTimesUp ? (\n        <PanicIcon style={{ background: 'white', width: '500px', padding: '2em' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} />\n      )}\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PaintingIcon } from 'icons/PaintingIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { RoundAnnouncement } from 'components/round';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\nimport { DrawInstruction } from './components/TextBlobs';\nimport { LevelInstruction } from './components/LevelInstruction';\nimport { StepDraw } from './StepDraw';\n\nfunction PhaseDraw({ players, state }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n  const [startDrawingTimer, setStartDrawingTimer] = useState(false);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<PaintingIcon />}\n      title={<Translate pt=\"Desenhe!\" en=\"Draw!\" />}\n      buttonText={<Translate pt=\"Um dó, lá, si... vamos e... já!\" en=\"Ready! Set! Go!\" />}\n      onClose={() => setStartDrawingTimer(true)}\n      currentRound={state?.round?.current}\n      withoutTimer\n      type=\"overlay\"\n    >\n      <DrawInstruction />\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.DRAW}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          instruction: (\n            <Translate\n              pt=\"Vamos aguardar enquanto os outros jogadores terminam seus desenhos!\"\n              en=\"Please wait while other players finish their artwork!\"\n            />\n          ),\n        }}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          unskippable\n        >\n          <Instruction contained>\n            <Translate\n              pt={`Essa rodada usará cartas de nível ${state?.level || '?'}`}\n              en={`This round uses cards of level ${state?.level || '?'}`}\n            />\n            <LevelInstruction level={state.level} levelType={state.levelType} />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <StepDraw\n          secretCard={user.currentCard ?? {}}\n          onSubmitDrawing={onSubmitDrawing}\n          announcement={announcement}\n          startDrawingTimer={startDrawingTimer}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDraw;\n","// Hooks\nimport { useGameActionRequest } from 'hooks/useGameActionRequest';\nimport { useLanguage } from 'hooks/useLanguage';\nimport type { UseStep } from 'hooks/useStep';\n// Internal\nimport type { SubmitDrawingPayload, SubmitVotingPayload } from './types';\nimport { ARTE_RUIM_ACTIONS } from './constants';\n\nexport function useOnSubmitDrawingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\",\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art',\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: ARTE_RUIM_ACTIONS.SUBMIT_DRAWING,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-voting',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate(\n      'Avaliação enviada! Agora aguarde os outros jogadores',\n      'Evaluation sent successfully! Wait for the other players',\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n      'Oops, the application failed to send your evaluation',\n    ),\n  });\n\n  return (payload: SubmitVotingPayload) => {\n    request({\n      action: ARTE_RUIM_ACTIONS.SUBMIT_VOTING,\n      ...payload,\n    });\n  };\n}\n","import { useMemo } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Icons\nimport { AnimatedLoaderIcon } from 'icons/AnimatedLoaderIcon';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { CanvasSVG } from 'components/canvas';\n// Internal\nimport type { ArteRuimCard, ArteRuimDrawing } from '../utils/types';\n\ntype EvaluatedDrawingsProps = {\n  votes?: StringDictionary;\n  cards: ArteRuimCard[];\n  drawings: ArteRuimDrawing[];\n  players: GamePlayers;\n};\n\n/**\n * Displays drawings in the waiting room after evaluation\n * @param props\n * @returns\n */\nexport function EvaluatedDrawings({ votes, cards, drawings, players }: EvaluatedDrawingsProps) {\n  const [canvasSize] = useGlobalLocalStorage('canvasSize');\n\n  const cardsDict = useMemo(\n    () =>\n      cards.reduce((acc: Record<string, ArteRuimCard>, card) => {\n        acc[card.id] = card;\n        return acc;\n      }, {}),\n    [cards],\n  );\n\n  const drawingsDict = useMemo(\n    () =>\n      drawings.reduce((acc: Record<string, ArteRuimDrawing>, drawing) => {\n        acc[drawing.id] = drawing;\n        return acc;\n      }, {}),\n    [drawings],\n  );\n\n  if (!votes) {\n    return (\n      <div className=\"a-evaluated-drawings\">\n        <IconAvatar icon={<AnimatedLoaderIcon />} />\n      </div>\n    );\n  }\n  const cSize = Math.min(canvasSize * 0.6, 2000);\n\n  return (\n    <ul className=\"a-evaluated-drawings\">\n      {Object.keys(votes)\n        .sort()\n        .map((drawingKey: string) => {\n          const drawing = drawingsDict[drawingKey] as ArteRuimDrawing;\n          const card = cardsDict[votes[drawingKey]] as ArteRuimCard;\n\n          return (\n            <li className=\"a-evaluated-drawings__item\" key={`${drawing.id}-${card.id}-${card.playerId}`}>\n              <div className=\"a-evaluated-drawings__card\" style={{ maxWidth: `${cSize}px` }}>\n                <AvatarName player={players[drawing.playerId]} size=\"small\" />\n              </div>\n              <CanvasSVG\n                drawing={drawing.drawing}\n                width={cSize}\n                className=\"a-evaluation-all-drawings__drawing\"\n              />\n              <div className=\"a-evaluated-drawings__card\" style={{ maxWidth: `${cSize}px` }}>\n                {card.text}\n              </div>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n","// Utils\nimport { SEPARATOR } from 'utils/constants';\n\nexport function prepareVotes(votes: StringDictionary) {\n  return Object.entries(votes).reduce((acc: StringDictionary, [drawingEntryId, cardEntryId]) => {\n    const [, drawingId] = drawingEntryId.split(SEPARATOR);\n    const [, cardId] = cardEntryId.split(SEPARATOR);\n    acc[drawingId] = cardId;\n    return acc;\n  }, {});\n}\n","import clsx from 'clsx';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { Ribbon } from 'components/ribbons';\n// Internal\nimport type { ArteRuimDrawing } from '../utils/types';\n\ntype EvaluationAllDrawingsProps = {\n  drawings: ArteRuimDrawing[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  canvasSize: number;\n  players: GamePlayers;\n};\n\nexport function EvaluationAllDrawings({\n  drawings,\n  activeItem,\n  onActivateItem,\n  votes,\n  canvasSize,\n  players,\n}: EvaluationAllDrawingsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = getEntryId(['drawing', drawingEntry.id]);\n        const isActive = activeItem === canvasEntryId;\n        const vote = votes[canvasEntryId];\n\n        return (\n          <li\n            key={`${canvasEntryId}-${drawingEntry.playerId}`}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon label={vote.charAt(vote.length - 1)} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              width={canvasSize}\n            />\n\n            <span className=\"a-evaluation-all-drawings__artist\">\n              <AvatarName player={players[drawingEntry.playerId]} />\n            </span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import type { ReactNode } from 'react';\n// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Components\nimport { Card } from 'components/cards';\n\ntype ArteRuimCardProps = {\n  /**\n   * The text of the card\n   */\n  text?: ReactNode;\n  /**\n   * The level of the card displayed as dots in the footer\n   */\n  level: number;\n  /**\n   * The header of the card. Default: X\n   */\n  header?: string;\n};\n\n/**\n * This is the Card component\n * @param props {object}\n * @returns\n */\nexport const ArteRuimCard = ({ text, level, header = 'X' }: ArteRuimCardProps) => {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(level).fill('•').join('')}\n    >\n      {text ?? <WarningOutlined />}\n    </Card>\n  );\n};\n","import clsx from 'clsx';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId } from 'utils/helpers';\n// Internal\nimport type { ArteRuimCard } from '../utils/types';\nimport { ArteRuimCard as Card } from './Card';\n\ntype EvaluationAllCardsProps = {\n  cards: ArteRuimCard[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  levelType: string;\n};\n\nexport function EvaluationAllCards({\n  cards,\n  activeItem,\n  onActivateItem,\n  votes,\n  levelType,\n}: EvaluationAllCardsProps) {\n  const { isDebugEnabled } = useDevFeatures();\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['card', cardEntry.id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && levelType !== 'pairs' && `${liButtonBaseClass}--used`,\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              text={cardEntry.text}\n              level={cardEntry.level}\n              header={isDebugEnabled ? cardEntry.id : letter}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n// Ant Design Resources\nimport { ClearOutlined, ThunderboltOutlined } from '@ant-design/icons';\nimport { Button, Space } from 'antd';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\n// Components\nimport { SendButton } from 'components/buttons';\nimport { CanvasResizer } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { PopoverRule } from 'components/rules';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { ArteRuimCard, ArteRuimDrawing } from './utils/types';\nimport { prepareVotes } from './utils/helpers';\nimport { EvaluationAllDrawings } from './components/EvaluationAllDrawings';\nimport { EvaluationAllCards } from './components/EvaluationAllCards';\nimport { EvaluationRules } from './components/TextBlobs';\n\ntype StepEvaluationProps = {\n  drawings: ArteRuimDrawing[];\n  cards: ArteRuimCard[];\n  players: GamePlayers;\n  onSubmitVoting: GenericFunction;\n  levelType: string;\n  user: GamePlayer;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepEvaluation({\n  drawings,\n  cards,\n  players,\n  onSubmitVoting,\n  levelType,\n  announcement,\n  user,\n}: StepEvaluationProps) {\n  const { isLoading } = useLoading();\n\n  const canvasWidth = useCardWidth(5, {\n    gap: 16,\n    minWidth: 150,\n    maxWidth: 500,\n  });\n  const [canvasSize, setCanvasSize] = useGlobalLocalStorage('canvasSize');\n  const { votes, setVotes, activeItem, activateItem, resetVoting, isVotingComplete } = useVotingMatch(\n    'drawing',\n    true,\n    drawings.length || 2,\n  );\n  const [choseRandomly, setChoseRandomly] = useState(false);\n\n  const onGuessForMe = useCallback(() => {\n    setChoseRandomly(true);\n    const usedDrawings = Object.keys(votes);\n    const usedCards = Object.values(votes);\n    const drawingsKeys = drawings\n      .map((e: ArteRuimDrawing) => getEntryId(['drawing', e.id]))\n      .filter((key: string) => !usedDrawings.includes(key));\n    let cardsKeys = shuffle(\n      cards\n        .map((e: ArteRuimCard, index: number) => getEntryId(['card', e.id, LETTERS[index]]))\n        .filter((key: string) => !usedCards.includes(key)),\n    );\n    // For level 5 specifically, if there are less cards than drawings\n    cardsKeys =\n      cardsKeys.length < drawingsKeys.length\n        ? Array(Math.ceil(drawingsKeys.length / cardsKeys.length))\n            .fill(cardsKeys)\n            .flat()\n        : cardsKeys;\n\n    const newVotes = { ...votes };\n    drawingsKeys.forEach((drawingKey: string, index: number) => {\n      if (!newVotes[drawingKey]) {\n        newVotes[drawingKey] = cardsKeys[index];\n      }\n    });\n    setVotes(newVotes);\n  }, [cards, drawings, votes, setVotes]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]);\n\n  const selectOwnDrawing = useCallback(() => {\n    const playersDrawing = (drawings ?? []).find((drawing: ArteRuimDrawing) => drawing.playerId === user.id);\n    if (playersDrawing && playersDrawing.level !== 5) {\n      const drawingKey = getEntryId(['drawing', playersDrawing.id]);\n      const cardIndex = (cards ?? []).findIndex((card: ArteRuimCard) => card.playerId === user.id);\n      const cardKey = getEntryId(['card', playersDrawing.id, LETTERS[cardIndex]]);\n      const vote = { [drawingKey]: cardKey };\n      return vote;\n    }\n    return {};\n  }, [user, drawings, cards]);\n\n  // Auto-select the players own drawing and word\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Hook should be called only if the user character changes\n  useEffect(() => {\n    const selection = selectOwnDrawing();\n    if (selection) {\n      setVotes((s) => ({ ...s, ...selection }));\n    }\n  }, [user?.id]);\n\n  useMock(() => {\n    onGuessForMe();\n  }, []);\n\n  return (\n    <Step announcement={announcement} fullWidth>\n      <PopoverRule content={<EvaluationRules />} />\n      <CanvasResizer />\n      <StepTitle>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </StepTitle>\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              Faça pares com as cartas e os desenhos.\n              <br />\n              Basta clicar em um desenho e depois em sua carta correspondente, ou vice-versa.\n              <br />\n              Para refazer, basta reselecionar o desenho ou carta normalmente.\n              <br />\n              Quando estiver pronto, clique em <b>Enviar sua avaliação</b>.\n            </>\n          }\n          en={\n            <>\n              Match the cards and drawings.\n              <br />\n              Just click on a drawing and then on its corresponding card, or vice versa.\n              <br />\n              To redo, just reselect the drawing or card normally.\n              <br />\n              When you're ready, click <b>Send evaluation</b>.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <Space direction=\"vertical\">\n        <SpaceContainer wrap>\n          <Button\n            type=\"default\"\n            icon={<ClearOutlined />}\n            onClick={() => resetVoting(selectOwnDrawing())}\n            disabled={isLoading}\n          >\n            <Translate pt=\"Limpar seleções\" en=\"Clear selections\" />\n          </Button>\n          <Button\n            type=\"default\"\n            icon={<ThunderboltOutlined />}\n            onClick={onGuessForMe}\n            disabled={isLoading || Object.values(votes).length === drawings.length}\n          >\n            <Translate pt=\"Chutar restantes\" en=\"Guess for me\" />\n          </Button>\n          <SendButton\n            onClick={() => onSubmitVoting({ votes: prepareVotes(votes), choseRandomly })}\n            disabled={!isVotingComplete}\n          >\n            <Translate pt=\"Enviar sua avaliação\" en=\"Send evaluation\" />\n          </SendButton>\n        </SpaceContainer>\n\n        <EvaluationAllDrawings\n          drawings={drawings ?? []}\n          activeItem={activeItem}\n          onActivateItem={activateItem}\n          votes={votes}\n          canvasSize={canvasSize}\n          players={players}\n        />\n\n        <EvaluationAllCards\n          cards={cards ?? []}\n          activeItem={activeItem}\n          onActivateItem={activateItem}\n          votes={votes}\n          levelType={levelType}\n        />\n      </Space>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { ViewIf } from 'components/views';\n// Internal\nimport { useOnSubmitVotingAPIRequest } from './utils/api-requests';\nimport { EvaluationRules } from './components/TextBlobs';\nimport { EvaluatedDrawings } from './components/EvaluatedDrawings';\nimport { StepEvaluation } from './StepEvaluation';\n\nfunction EvaluationPhase({ players, state }: PhaseProps) {\n  const { step, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitVoting = useOnSubmitVotingAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<EvaluateIcon />}\n      title={<Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <EvaluationRules />\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.EVALUATION}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          instruction: (\n            <Translate\n              pt=\"Vamos aguardar enquanto os outros jogadores terminam de avaliar!\"\n              en=\"Please wait while other players finish their evaluations!\"\n            />\n          ),\n          content: (\n            <EvaluatedDrawings\n              cards={state.cards}\n              drawings={state.drawings}\n              votes={user?.votes}\n              players={players}\n            />\n          ),\n        }}\n      >\n        {/*Step 0 */}\n        <ViewIf condition={state.drawings && user.id}>\n          <StepEvaluation\n            drawings={state.drawings}\n            cards={state.cards}\n            players={players}\n            onSubmitVoting={onSubmitVoting}\n            levelType={state.levelType}\n            announcement={announcement}\n            user={user}\n          />\n        </ViewIf>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","// Types\nimport type { GamePlayer } from 'types/player';\n// Components\nimport { AvatarEntry } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { SlideShowLabel } from 'components/slide-show';\n\ntype GalleryWindowCreditsProps = {\n  artist: GamePlayer;\n};\n\nexport function GalleryWindowCredits({ artist }: GalleryWindowCreditsProps) {\n  return (\n    <div className=\"a-gallery__credits\">\n      <SlideShowLabel>\n        <Translate pt=\"Artista\" en=\"Artist\" />\n      </SlideShowLabel>\n      <span className=\"uppercase\">\n        <AvatarEntry player={artist} />\n      </span>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { Translate } from 'components/language';\nimport { SlideShowBubbleValue, SlideShowLabel, SlideShowPlayersList } from 'components/slide-show';\n// Internal\nimport type { ArteRuimCard } from '../utils/types';\nimport type { PlayersSay } from '../utils/types';\n// Ant Design Resources\n// Utils\n\ntype GalleryWindowGuessesProps = {\n  playersSay: PlayersSay;\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  windowCardId: string;\n  artistColor: string;\n};\n\nexport function GalleryWindowGuesses({\n  playersSay,\n  players,\n  cards,\n  windowCardId,\n  artistColor,\n}: GalleryWindowGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        card: cards.find((i) => i.id === cardId),\n        playersIds,\n        count: playersIds.length,\n        isCorrect: windowCardId === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc'],\n  );\n\n  return (\n    <div className=\"a-gallery__guesses\">\n      <SlideShowLabel>\n        <Translate pt=\"Participantes votaram\" en=\"Players voted\" />\n      </SlideShowLabel>\n\n      {entries.map((entry, index) => {\n        return (\n          <div key={`guess-${entry.cardId}-${index}`} className=\"a-gallery__guess\">\n            <SlideShowBubbleValue winner={entry.isCorrect} backgroundColor={artistColor}>\n              {entry.card?.text}\n            </SlideShowBubbleValue>\n\n            <SlideShowPlayersList players={players} playersIds={entry.playersIds} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Components\nimport { Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\nimport {\n  SlideShowBubbleValue,\n  SlideShowLabel,\n  SlideShowNoWins,\n  SlideShowPlayersList,\n} from 'components/slide-show';\n// Internal\nimport type { PlayersSay } from '../utils/types';\n\ntype GalleryWindowResultProps = {\n  playerArtist: GamePlayer;\n  correctAnswerId: string;\n  correctAnswerText: string;\n  playersPoints?: NumberDictionary;\n  playersSay: PlayersSay;\n  players: GamePlayers;\n};\n\nexport function GalleryWindowResult({\n  playerArtist,\n  correctAnswerId,\n  correctAnswerText,\n  playersPoints,\n  playersSay,\n  players,\n}: GalleryWindowResultProps) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswerId] ?? {});\n\n  return (\n    <div className=\"a-gallery__result\">\n      <SlideShowLabel>\n        <Translate pt=\"E o título correto da obra é\" en=\"And the masterpiece title is\" />\n      </SlideShowLabel>\n      <SlideShowBubbleValue winner>{correctAnswerText}</SlideShowBubbleValue>\n      {correctGuesses.length ? (\n        <>\n          <SlideShowPlayersList players={players} playersIds={correctGuesses}>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${playerArtist.id}`} />\n          </SlideShowPlayersList>\n\n          <SlideShowPlayersList players={players} playersIds={[playerArtist.id]}>\n            <StarPoints\n              quantity={playersPoints?.[playerArtist.id]}\n              keyPrefix={`artist-points-${playerArtist.id}`}\n            />\n          </SlideShowPlayersList>\n        </>\n      ) : (\n        <SlideShowNoWins>\n          <Translate\n            pt=\"Esse desenho deve ter sido muito ruim.\"\n            en=\"It must have been a very crappy drawing. Shame...\"\n          />\n        </SlideShowNoWins>\n      )}\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport type { SlideShowConfig } from 'hooks/useSlideShow';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { StepTitle } from 'components/text';\n// Internal\nimport type { ArteRuimCard } from './utils/types';\nimport type { ArteRuimWindow } from './utils/types';\nimport { GalleryWindowCredits } from './components/GalleryWindowCredits';\nimport { GalleryWindowGuesses } from './components/GalleryWindowGuesses';\nimport { GalleryWindowResult } from './components/GalleryWindowResult';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepGalleryProps = {\n  gallery: ArteRuimWindow[];\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  slideShowConfig: SlideShowConfig;\n};\n\nexport function StepGallery({ gallery, players, cards, slideShowConfig }: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n\n  const canvasWidth = useCardWidth(2, { gap: 16, minWidth: 200, maxWidth: 500 });\n\n  const { drawing, artistId, id, text, playersPoints, playersSay } = gallery[slideShowConfig.slideIndex];\n\n  const playerArtist = players[artistId];\n  const currentColor = getAvatarColorById(playerArtist.avatarId);\n\n  return (\n    <Step fullWidth>\n      <StepTitle size=\"small\">\n        <Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />\n      </StepTitle>\n\n      <PopoverRule content={<ScoringRules />} />\n\n      <SlideShow\n        config={slideShowConfig}\n        barColor={currentColor}\n        leftClassName=\"a-gallery__canvas\"\n        rightClassName=\"a-gallery__info\"\n      >\n        <CanvasSVG drawing={drawing} width={canvasWidth} className=\"a-gallery__drawing\" />\n\n        <>\n          <GalleryWindowCredits artist={playerArtist} />\n\n          <GalleryWindowGuesses\n            players={players}\n            playersSay={playersSay}\n            cards={cards}\n            windowCardId={id}\n            artistColor={currentColor}\n          />\n\n          <GalleryWindowResult\n            playerArtist={playerArtist}\n            correctAnswerId={id}\n            correctAnswerText={text}\n            playersPoints={playersPoints}\n            playersSay={playersSay}\n            players={players}\n          />\n        </>\n      </SlideShow>\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { PictureOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Types\nimport type { GameRanking, GameRound } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { HostNextPhaseButton } from 'components/host';\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Instruction, RoundsLeftInstruction } from 'components/text';\n// Internal\nimport { ScoringRules } from './components/TextBlobs';\n// Hooks\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  onGoBack: () => void;\n  threshold: number;\n};\n\nexport function StepRanking({ players, ranking, isGameOver, round, onGoBack, threshold }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate key=\"1\" pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          key=\"2\"\n          pt=\"Votos corretos em seu desenho por outros jogadores\"\n          en=\"Correct guesses on your drawing by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules />} />\n\n      {threshold > 0 && (\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                O jogo termina quando alguém passa os <PointsHighlight>{threshold} pontos</PointsHighlight> ou{' '}\n                {round.total} rodadas.\n              </>\n            }\n            en={\n              <>\n                The game ends when someones passes <PointsHighlight>{threshold} points</PointsHighlight> or{' '}\n                {round.total} rounds.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      {!isGameOver && <RoundsLeftInstruction round={round} />}\n\n      <Button size=\"large\" onClick={onGoBack} icon={<PictureOutlined />}>\n        <Translate pt=\"Ver Galeria Novamente\" en=\"See Gallery Again\" />\n      </Button>\n\n      <HostNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PictureIcon } from 'icons/PictureIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\n// Internal\nimport { SLIDE_DURATION } from './utils/constants';\nimport { GalleryRules } from './components/TextBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\n\nfunction PhaseGallery({ players, state, meta }: PhaseProps) {\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const slideShowConfig = useSlideShow({\n    length: state.gallery.length,\n    slideDuration: SLIDE_DURATION,\n    onExpire: goToNextStep,\n  });\n\n  const onGoBack = () => {\n    slideShowConfig.reset();\n    goToPreviousStep();\n  };\n\n  const isGameOver = meta.options?.shortGame\n    ? state.round.current === 5\n    : Object.values(players).some((player) => player.score > 50);\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.GALLERY} className=\"a-gallery-phase\">\n      <StepSwitcher step={step} players={players}>\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          icon={<PictureIcon />}\n          title={<Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          type=\"block\"\n        >\n          <GalleryRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={state.gallery}\n          players={players}\n          cards={state.cards}\n          slideShowConfig={slideShowConfig}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={isGameOver}\n          round={state.round}\n          onGoBack={onGoBack}\n          threshold={state.threshold}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGallery;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Avatar, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst GRADES = ['F', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\ntype DrawingGradeProps = {\n  value: number;\n};\n\nexport const DrawingGrade = ({ value }: DrawingGradeProps) => {\n  const { translate } = useLanguage();\n  const grade = GRADES[Math.floor(value / 0.084)];\n\n  const baseClass = 'a-drawing-grade';\n\n  return (\n    <Tooltip\n      title={translate(\n        `Nota baseada em quantos acertos o desenho teve: ${value * 100}%`,\n        `Grade based on the number of correct guesses the artwork got: ${value * 100}%`,\n      )}\n    >\n      <Avatar className={clsx(baseClass, `${baseClass}--${grade[0]}`)}>{grade}</Avatar>\n    </Tooltip>\n  );\n};\n","// Types\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Container } from 'components/layout/Container';\n// Internal\nimport type { ArteRuimDrawing } from '../utils/types';\nimport { DrawingGrade } from './DrawingGrade';\n\ntype FinalGalleryProps = {\n  drawings: ArteRuimDrawing[];\n  players: GamePlayers;\n};\n\nexport function FinalGallery({ drawings, players }: FinalGalleryProps) {\n  return (\n    <Container title={<Translate pt=\"Galeria\" en=\"Galeria\" />}>\n      <ul className=\"a-game-over__gallery\">\n        {drawings.map((entry: ArteRuimDrawing) => {\n          const successRate = entry.successRate ?? 0;\n\n          return (\n            <li className=\"a-game-over__gallery-item\" key={entry.drawing} style={{ width: '200px' }}>\n              <CanvasSVG drawing={entry.drawing} width={200} className=\"a-game-over__gallery-canvas\" />\n              <span className=\"a-game-over__credits\">\n                \"{entry.text}\" <Translate pt=\"por\" en=\"by\" /> {players[entry.playerId].name}\n              </span>\n              <DrawingGrade value={successRate > 1 ? successRate / 100 : successRate} />\n            </li>\n          );\n        })}\n      </ul>\n    </Container>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Icons\nimport { TrophyIcon } from 'icons/TrophyIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\nimport { Translate } from 'components/language';\n// Internal\nimport { achievementsReference } from './utils/achievements';\nimport { FinalGallery } from './components/FinalGallery';\n\nfunction PhaseGameOver({ state, players }: PhaseProps) {\n  return (\n    <GameOverWrapper\n      state={state}\n      players={players}\n      announcementIcon={<TrophyIcon />}\n      rateWidgetCustomText={<Translate pt=\"Alguma sugestão de carta?\" en=\"Any card suggestions?\" />}\n    >\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <FinalGallery players={players} drawings={state.drawings} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Types\nimport type { GameState } from 'types/game';\n// Utils\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { Session } from 'components/session';\n// Internal\nimport PhaseDraw from './PhaseDraw';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseGallery from './PhaseGallery';\nimport PhaseGameOver from './PhaseGameOver';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.ARTE_RUIM.DRAW:\n      return PhaseDraw;\n    case PHASES.ARTE_RUIM.EVALUATION:\n      return PhaseEvaluation;\n    case PHASES.ARTE_RUIM.GALLERY:\n      return PhaseGallery;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionArteRuim() {\n  return <Session gameCollection={GAME_COLLECTION.ARTE_RUIM} getActiveComponent={getActiveComponent} />;\n}\n\nexport default SessionArteRuim;\n","// Types\nimport type { AchievementReference } from 'types/achievements';\n\nconst ACHIEVEMENTS = {\n  SOLITARY_LOSER: 'SOLITARY_LOSER',\n  SOLITARY_WINNER: 'SOLITARY_WINNER',\n  BEST_ARTIST: 'BEST_ARTIST',\n  WORST_ARTIST: 'WORST_ARTIST',\n  TABLE_VOTES: 'TABLE_VOTES',\n  CHOOSE_FOR_ME: 'CHOOSE_FOR_ME',\n};\n\nexport const achievementsReference: AchievementReference = {\n  [ACHIEVEMENTS.BEST_ARTIST]: {\n    icon: 'paint-brush',\n    title: {\n      pt: 'Melhor Artista',\n      en: 'Best Artist',\n    },\n    description: {\n      pt: 'Todos os jogadores acertaram unanimemente seu desenho mais vezes',\n      en: 'Got players to guess your drawing unanimously the most',\n    },\n  },\n  [ACHIEVEMENTS.WORST_ARTIST]: {\n    icon: 'broken-pencil',\n    title: {\n      pt: 'Artista Mais Não Convencional',\n      en: 'Most Unconventional Artist',\n    },\n    description: {\n      pt: 'Todos os jogadores NÃO acertaram unanimemente seu desenho mais vezes',\n      en: 'Got players to miss your drawing unanimously the most',\n    },\n  },\n  [ACHIEVEMENTS.SOLITARY_WINNER]: {\n    icon: 'person',\n    title: {\n      pt: 'Adivinhador Solitário',\n      en: 'Best Solitary Guesser',\n    },\n    description: {\n      pt: 'Foi o único que acertou o desenho mais vezes',\n      en: 'Was the only one to get the drawings correctly the most',\n    },\n  },\n  [ACHIEVEMENTS.SOLITARY_LOSER]: {\n    icon: 'difference',\n    title: {\n      pt: 'Mais Diferentão',\n      en: 'Most Unique Guesser',\n    },\n    description: {\n      pt: 'Foi o único que errou o desenho mais vezes',\n      en: 'Was the only one to NOT get the drawings the most',\n    },\n  },\n  [ACHIEVEMENTS.TABLE_VOTES]: {\n    icon: 'table',\n    title: {\n      pt: 'Melhor Votador Pra Mesa',\n      en: 'Best Table Voter',\n    },\n    description: {\n      pt: 'Votou nas cartas extras que não eram de nenhum jogador mais vezes',\n      en: \"Voted for extra cards that didn't belong to any player the most\",\n    },\n  },\n  [ACHIEVEMENTS.CHOOSE_FOR_ME]: {\n    icon: 'dice',\n    title: {\n      pt: 'Menos Brasileiro',\n      en: 'The Shirker',\n    },\n    description: {\n      pt: 'Apertou o botão Chutar Restantes mais vezes',\n      en: \"Pressed 'Guess for me' the most\",\n    },\n  },\n};\n\nexport default achievementsReference;\n","export function ClockIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <circle cx=\"256\" cy=\"256\" r=\"248\" fill=\"#ff5876\"></circle>\n      <path\n        fill=\"#e6485d\"\n        d=\"M256 486C122.048 486 12.919 379.795 8.18 247c-.107 2.988-.18 5.986-.18 9 0 136.967 111.033 248 248 248s248-111.033 248-248c0-3.014-.073-6.012-.18-9C499.081 379.795 389.952 486 256 486z\"\n      ></path>\n      <circle cx=\"256\" cy=\"256\" r=\"206.942\" fill=\"#e4eef9\"></circle>\n      <path\n        fill=\"#d5e0f2\"\n        d=\"M256 444.942c-111.274 0-202.022-87.828-206.736-197.942a209.92 209.92 0 00-.207 9c0 114.291 92.651 206.942 206.942 206.942S462.942 370.291 462.942 256c0-3.017-.079-6.015-.207-9C458.022 357.114 367.274 444.942 256 444.942z\"\n      ></path>\n      <path\n        fill=\"#405b6c\"\n        d=\"M331.17 183.393c-5.899-5.818-15.396-5.752-21.213.146L262.848 231.3c10.522 2.911 18.324 12.359 18.76 23.701l49.707-50.395c5.818-5.898 5.753-15.396-.145-21.213zM230.367 256c0-11.14 7.109-20.617 17.036-24.151l-92.462-82.397c-6.186-5.512-15.667-4.966-21.178 1.219s-4.966 15.667 1.219 21.178l95.407 85.021c-.01-.289-.022-.578-.022-.87z\"\n      ></path>\n      <circle cx=\"256\" cy=\"256\" r=\"25.633\" fill=\"#ff5876\"></circle>\n      <path\n        fill=\"#2d4456\"\n        d=\"M216.381 244.387l14.008 12.483c-.01-.29-.022-.578-.022-.87 0-11.14 7.109-20.617 17.036-24.151l-12.635-11.26c-8.792 5.283-15.446 13.747-18.387 23.798zm58.377-25.163l-11.91 12.075c10.522 2.911 18.324 12.359 18.76 23.701l13.128-13.31c-3.606-9.76-10.801-17.775-19.978-22.466z\"\n      ></path>\n      <path\n        fill=\"#e6485d\"\n        d=\"M256 263.634c-10.989 0-20.36-6.917-24.005-16.634a25.56 25.56 0 00-1.629 9c0 14.157 11.477 25.634 25.633 25.634 14.157 0 25.634-11.477 25.634-25.634a25.56 25.56 0 00-1.629-9c-3.644 9.716-13.015 16.634-24.004 16.634z\"\n      ></path>\n      <path d=\"M437.02 74.98C388.667 26.629 324.381 0 256 0S123.333 26.629 74.98 74.98C26.628 123.333 0 187.62 0 256c0 65.664 24.828 128.099 69.909 175.802a7.515 7.515 0 1010.923-10.323C38.398 376.577 15.029 317.809 15.029 256c0-64.366 25.065-124.879 70.578-170.392C131.121 40.094 191.634 15.029 256 15.029s124.879 25.065 170.392 70.579C471.905 131.121 496.97 191.634 496.97 256s-25.066 124.879-70.578 170.392C380.879 471.906 320.366 496.971 256 496.971c-56.111 0-110.745-19.706-153.838-55.487a7.515 7.515 0 00-9.601 11.563C138.346 491.063 196.389 512 256 512c68.381 0 132.667-26.629 181.02-74.98C485.372 388.667 512 324.38 512 256s-26.628-132.667-74.98-181.02z\"></path>\n      <path d=\"M402.975 109.552a7.514 7.514 0 00-.363-10.621C362.703 61.662 310.635 41.138 256 41.138c-57.391 0-111.348 22.349-151.93 62.932S41.138 198.608 41.138 256s22.349 111.348 62.932 151.931 94.539 62.931 151.93 62.931 111.348-22.349 151.931-62.931S470.862 313.392 470.862 256c0-49.329-16.259-95.72-47.02-134.156a7.514 7.514 0 10-11.734 9.39c28.605 35.743 43.724 78.886 43.724 124.766 0 110.188-89.645 199.833-199.833 199.833S56.167 366.188 56.167 256 145.812 56.167 256 56.167c50.813 0 99.238 19.088 136.354 53.748a7.512 7.512 0 0010.621-.363z\"></path>\n      <path d=\"M263.515 98.649V75.372a7.515 7.515 0 10-15.03 0v23.276a7.515 7.515 0 0015.03.001zm-15.03 314.702v23.276a7.515 7.515 0 1015.03 0v-23.276a7.515 7.515 0 10-15.03 0zm188.142-149.836a7.515 7.515 0 100-15.03h-23.276c-4.151 0-7.515 3.364-7.515 7.515s3.364 7.515 7.515 7.515zm-361.254-15.03c-4.151 0-7.515 3.364-7.515 7.515s3.364 7.515 7.515 7.515h23.276a7.515 7.515 0 100-15.03zm282.215 102.661a7.515 7.515 0 009.667-11.508l-81.672-68.603c2-3.919 3.245-8.283 3.539-12.904l47.69-48.35c8.687-8.451 8.585-23.551-.219-31.882-8.432-8.714-23.553-8.576-31.882.219l-44.363 44.977a33.14 33.14 0 00-11.013.378l-89.594-79.841c-8.887-8.252-23.953-7.381-31.831 1.833-8.269 9.28-7.447 23.559 1.833 31.829L173.1 215.93a7.516 7.516 0 0010-11.22l-43.355-38.635c-3.094-2.757-3.368-7.517-.611-10.61 2.624-3.072 7.653-3.36 10.61-.611l84.956 75.708a33.368 33.368 0 00-9.068 12.05l-20.094-17.906a7.516 7.516 0 00-9.999 11.221l27.576 24.573c2.204 16.183 16.106 28.698 32.885 28.698a33.025 33.025 0 0019.916-6.655zm-42.175-162.473c2.777-2.934 7.809-2.968 10.627-.072 2.936 2.777 2.969 7.81.072 10.627l-40.747 41.311a33.435 33.435 0 00-9.876-11.39zM256 274.169c-10.019 0-18.169-8.151-18.169-18.169s8.151-18.169 18.169-18.169c10.019 0 18.169 8.151 18.169 18.169s-8.15 18.169-18.169 18.169z\"></path>\n    </svg>\n  );\n}\n","export function PaintingIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#d19a6e\"\n        d=\"M255.517 48.881h-47.52V19.77c0-6.777 5.493-12.27 12.27-12.27h22.98c6.777 0 12.27 5.493 12.27 12.27z\"\n      ></path>\n      <path\n        fill=\"#bc845e\"\n        d=\"M234.907 7.5h-14.64c-6.777 0-12.27 5.493-12.27 12.27v29.111h14.64V19.77c0-6.777 5.494-12.27 12.27-12.27z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M306.997 87.601h-150.48v-25.58c0-7.257 5.883-13.14 13.14-13.14h124.2c7.257 0 13.14 5.883 13.14 13.14z\"\n      ></path>\n      <path\n        fill=\"#ffa95f\"\n        d=\"M188.377 48.881h-18.72c-7.257 0-13.14 5.883-13.14 13.14v25.58h18.72v-25.58c0-7.257 5.883-13.14 13.14-13.14z\"\n      ></path>\n      <path\n        fill=\"#d19a6e\"\n        d=\"M175.536 492.233l25.619-71.973h-49.68l-24.066 67.611c-2.886 8.108 3.126 16.629 11.732 16.629h19.009a18.455 18.455 0 0017.386-12.267zM288.138 492.233l-25.619-71.973h49.68l24.066 67.611c2.886 8.108-3.126 16.629-11.732 16.629h-19.009a18.455 18.455 0 01-17.386-12.267z\"\n      ></path>\n      <path\n        fill=\"#bc845e\"\n        d=\"M166.538 446.66h25.22l9.397-26.4h-49.68l-24.066 67.611c-2.886 8.108 3.126 16.629 11.732 16.629h18.24c-8.606 0-14.618-8.521-11.732-16.629l12.583-35.352a8.817 8.817 0 018.306-5.859zM306.378 492.233l-13.836-38.871c-1.163-3.268 1.26-6.703 4.729-6.703h24.325l-9.397-26.4h-49.68l25.619 71.973a18.455 18.455 0 0017.387 12.267h18.24a18.453 18.453 0 01-17.387-12.266z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M398.405 429.244H65.27c-6.742 0-12.208-5.466-12.208-12.208v-24.889c0-6.742 5.466-12.208 12.208-12.208h37.194l39.512-21.24 34.244 21.24h222.185c6.742 0 12.208 5.466 12.208 12.208v24.889c-.001 6.742-5.466 12.208-12.208 12.208z\"\n      ></path>\n      <path\n        fill=\"#ffa95f\"\n        d=\"M71.062 417.036v-24.889c0-6.742 5.466-12.208 12.208-12.208h-18c-6.742 0-12.208 5.466-12.208 12.208v24.889c0 6.742 5.466 12.208 12.208 12.208h18c-6.742 0-12.208-5.466-12.208-12.208z\"\n      ></path>\n      <path\n        fill=\"#f4f4f4\"\n        d=\"M376.742 379.94H86.932V112.753c0-13.891 11.261-25.152 25.152-25.152H351.59c13.891 0 25.152 11.261 25.152 25.152z\"\n      ></path>\n      <path\n        fill=\"#e5e5e5\"\n        d=\"M376.742 145.146a67.752 67.752 0 00-3.022-3.232c-12.437-12.437-28.972-19.421-46.558-19.667l-3.622-.047c-9.196 0-17.817 3.607-24.276 10.157-6.458 6.548-9.944 15.22-9.815 24.418l.044 3.142c.246 17.587 7.23 34.122 19.667 46.559a67.3 67.3 0 0029.421 17.196l34.692 34.691a236.08 236.08 0 003.469 3.383zM134.201 87.601h-22.116c-13.891 0-25.152 11.261-25.152 25.152V379.94h22.116V112.753c0-13.891 11.261-25.152 25.152-25.152z\"\n      ></path>\n      <path\n        fill=\"#69d6f4\"\n        d=\"M132.664 161.295v158.191c0 9.055 7.34 16.395 16.395 16.395s16.395-7.34 16.395-16.395V212.909c0-8.83 7.158-15.989 15.989-15.989 8.83 0 15.989 7.158 15.989 15.989v12.45c0 9.189 7.52 16.994 16.708 16.822 8.91-.167 16.082-7.442 16.082-16.392V212.91c0-8.83 7.158-15.989 15.989-15.989h36.024c8.83 0 15.989 7.158 15.989 15.989v74.467c0 9.189 7.52 16.994 16.708 16.822 8.91-.167 16.082-7.442 16.082-16.392V152.51c0-5.694-4.616-10.31-10.31-10.31H151.759c-10.546 0-19.095 8.549-19.095 19.095z\"\n      ></path>\n      <path\n        fill=\"#69d6f4\"\n        d=\"M230.22 286.12c0-8.881-7.199-16.08-16.08-16.08h-.63c-8.881 0-16.08 7.199-16.08 16.08 0 8.881 7.199 16.08 16.08 16.08h.63c8.881 0 16.08-7.199 16.08-16.08z\"\n      ></path>\n      <path\n        fill=\"#51c1ed\"\n        d=\"M320.701 142.2h-28.223a33.96 33.96 0 00-3.029 14.574l.044 3.142c.246 17.587 7.23 34.122 19.667 46.558a67.264 67.264 0 0021.852 14.578V152.51c-.002-5.694-4.617-10.31-10.311-10.31z\"\n      ></path>\n      <path\n        fill=\"#aab2bd\"\n        d=\"M371.204 228.009l16.211 16.211a210.226 210.226 0 0015.636 14.141l37.697 30.801a11.129 11.129 0 0014.911-.749 11.129 11.129 0 00.749-14.911l-30.801-37.697a210.226 210.226 0 00-14.141-15.636l-16.211-16.211z\"\n      ></path>\n      <path\n        fill=\"#969faa\"\n        d=\"M449.658 280.253l-37.697-30.801a210.226 210.226 0 01-15.636-14.141L380.114 219.1l-8.91 8.91 16.211 16.211a210.226 210.226 0 0015.636 14.141l37.697 30.801a11.129 11.129 0 0014.911-.749 11.078 11.078 0 003.063-5.847 11.103 11.103 0 01-9.064-2.314z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M355.109 189.154h34.013v31.433h-34.013z\"\n        transform=\"rotate(-45 372.107 204.954)\"\n      ></path>\n      <path\n        fill=\"#fc8d94\"\n        d=\"M309.447 156.495l.044 3.142a47.168 47.168 0 0034.704 44.836l4.783 1.31 24.051-24.051-1.31-4.783a47.172 47.172 0 00-44.836-34.704l-3.142-.044c-7.94-.11-14.405 6.354-14.294 14.294z\"\n      ></path>\n      <path fill=\"#ffa95f\" d=\"M373.028 181.732l-24.051 24.051 22.227 22.226 8.91-8.91-22.227-22.226z\"></path>\n      <path\n        fill=\"#fa6f7c\"\n        d=\"M353.105 195.563a47.172 47.172 0 01-34.704-44.836l-.044-3.142a14.047 14.047 0 01.732-4.652c-5.658 1.886-9.73 7.252-9.642 13.562l.044 3.142a47.168 47.168 0 0034.704 44.836l4.783 1.31 24.051-24.051-15.141 15.141z\"\n      ></path>\n      <g>\n        <path d=\"M398.405 372.44h-14.163V268.92a7.5 7.5 0 00-15 0v103.52H159.071a7.5 7.5 0 000 15h239.334a4.713 4.713 0 014.708 4.708v24.889a4.713 4.713 0 01-4.708 4.708H65.27a4.713 4.713 0 01-4.708-4.708v-24.889a4.713 4.713 0 014.708-4.708h61.408a7.5 7.5 0 000-15H94.432V112.753c0-9.733 7.919-17.652 17.652-17.652H351.59c9.733 0 17.652 7.919 17.652 17.652v25.126a7.5 7.5 0 0015 0v-25.126c0-18.004-14.648-32.652-32.652-32.652h-37.092v-18.08c0-11.381-9.259-20.64-20.64-20.64h-30.84V19.77c0-10.901-8.869-19.77-19.77-19.77h-22.98c-10.901 0-19.77 8.869-19.77 19.77v21.611h-30.84c-11.381 0-20.64 9.259-20.64 20.64v18.08h-36.933c-18.004 0-32.652 14.648-32.652 32.652V372.44H65.27c-10.867 0-19.708 8.841-19.708 19.708v24.889c0 10.867 8.841 19.708 19.708 19.708h72.376l-17.303 48.613c-2.171 6.101-1.239 12.902 2.494 18.193s9.828 8.45 16.304 8.45h19.009c10.953 0 20.78-6.933 24.453-17.251l20.646-58.005h57.177l20.647 58.005c3.673 10.319 13.5 17.251 24.452 17.251h19.009a19.98 19.98 0 0016.304-8.45 19.978 19.978 0 002.494-18.194l-17.303-48.612h72.376c10.867 0 19.708-8.841 19.708-19.708v-24.889c0-10.867-8.841-19.708-19.708-19.708zM215.497 19.77c0-2.63 2.14-4.77 4.77-4.77h22.98c2.63 0 4.77 2.14 4.77 4.77v21.611h-32.52zm-51.48 42.251c0-3.11 2.53-5.64 5.64-5.64h124.2c3.11 0 5.64 2.53 5.64 5.64v18.08h-135.48zm4.453 427.697A10.977 10.977 0 01158.149 497H139.14c-2.317 0-3.602-1.467-4.047-2.098s-1.396-2.333-.619-4.516l19.094-53.643h33.758zm160.729.668c.777 2.183-.174 3.886-.619 4.517s-1.73 2.098-4.047 2.098h-19.009a10.976 10.976 0 01-10.321-7.282l-18.856-52.975h33.758z\"></path>\n        <path d=\"M214.14 262.54h-.629c-13.002 0-23.58 10.578-23.58 23.58s10.578 23.58 23.58 23.58h.629c13.002 0 23.58-10.578 23.58-23.58s-10.578-23.58-23.58-23.58zm0 32.16h-.629c-4.731 0-8.58-3.849-8.58-8.58s3.849-8.58 8.58-8.58h.629c4.731 0 8.58 3.849 8.58 8.58s-3.849 8.58-8.58 8.58z\"></path>\n        <path d=\"M282.232 189.42h-36.023c-12.952 0-23.489 10.537-23.489 23.489v12.879c0 4.813-3.913 8.803-8.722 8.893-2.268.05-4.48-.861-6.195-2.544-1.826-1.792-2.873-4.263-2.873-6.779v-12.45c0-12.952-10.537-23.489-23.488-23.489s-23.489 10.537-23.489 23.489v106.577c0 4.904-3.99 8.895-8.895 8.895-4.904 0-8.895-3.99-8.895-8.895v-158.19c0-6.394 5.201-11.595 11.595-11.595H282.19a7.5 7.5 0 000-15H151.759c-14.665 0-26.595 11.93-26.595 26.595v158.19c0 13.175 10.719 23.895 23.895 23.895 13.175 0 23.895-10.719 23.895-23.895V212.909c0-4.681 3.808-8.489 8.489-8.489s8.488 3.808 8.488 8.489v12.45c0 6.517 2.685 12.89 7.366 17.484 4.613 4.526 10.632 6.954 16.983 6.835 12.925-.242 23.441-10.959 23.441-23.89v-12.879c0-4.681 3.808-8.489 8.489-8.489h36.023c4.681 0 8.489 3.808 8.489 8.489v74.467c0 6.518 2.685 12.89 7.366 17.485 4.612 4.526 10.634 6.959 16.982 6.835 12.925-.242 23.441-10.959 23.441-23.891v-59.796a7.5 7.5 0 00-15 0v59.796c0 4.814-3.913 8.803-8.722 8.894-2.287.039-4.48-.861-6.195-2.544-1.826-1.792-2.873-4.263-2.873-6.779v-74.467c0-12.952-10.537-23.489-23.489-23.489z\"></path>\n        <path d=\"M462.216 268.757l-30.801-37.697a218.436 218.436 0 00-14.646-16.194l-37.032-37.032-.785-2.866a54.76 54.76 0 00-14.07-24.215c-10.123-10.123-23.58-15.807-37.894-16.007l-3.144-.044c-5.86-.066-11.414 2.164-15.573 6.325-4.16 4.16-6.406 9.69-6.323 15.573l.043 3.142c.2 14.314 5.885 27.772 16.007 37.894a54.764 54.764 0 0024.215 14.07l2.866.785 37.032 37.032a218.5 218.5 0 0016.194 14.646l37.697 30.802a18.589 18.589 0 0011.791 4.222 18.58 18.58 0 0013.17-5.476 18.574 18.574 0 001.253-24.96zM316.99 159.532l-.044-3.142a6.548 6.548 0 011.931-4.757c1.271-1.271 2.992-1.98 4.758-1.932l3.143.044c10.386.145 20.151 4.27 27.497 11.615a39.746 39.746 0 0110.21 17.571l.159.58-17.888 17.888-.58-.159a39.74 39.74 0 01-17.571-10.21c-7.346-7.345-11.471-17.111-11.615-27.498zm56.038 32.806l11.62 11.62-13.444 13.444-11.62-11.62zm77.328 90.773a3.619 3.619 0 01-4.862.244l-37.697-30.801a203.468 203.468 0 01-15.079-13.637l-10.908-10.908 13.444-13.444 10.908 10.908a203.67 203.67 0 0113.637 15.079l30.801 37.697a3.618 3.618 0 01-.244 4.862z\"></path>\n      </g>\n    </svg>\n  );\n}\n"],"names":["arteRuimTimer","require","ArteRuimTimerSound","useGlobalLocalStorage","volume","useAudio","src","autoPlay","loop","audio","controls","useEffect","View","children","ViewIf","condition","ViewOr","ViewSwitch","cases","length","Error","console","warn","ARTE_RUIM_ACTIONS","DrawInstruction","pt","TimeHighlight","className","clsx","getAnimationClass","en","EvaluationRules","GalleryRules","PointsHighlight","type","ScoringRules","LevelInstruction","level","levelType","contained","getLevelText","contenders","movies","adjectives","StepDraw","secretCard","onSubmitDrawing","startDrawingTimer","announcement","translate","useLanguage","isDebugEnabled","useDevFeatures","useState","lines","setLines","isTimesUp","setTimesUp","useCountdown","duration","autoStart","onExpire","drawing","JSON","stringify","cardId","id","seconds","start","isRunning","useMock","mockDrawing","size","header","undefined","footer","Array","fill","join","color","text","onClick","PanicIcon","style","background","width","padding","players","state","useStep","step","goToNextStep","setStep","user","useUser","setStartDrawingTimer","request","useGameActionRequest","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDrawingAPIRequest","icon","PaintingIcon","title","buttonText","onClose","currentRound","round","current","withoutTimer","phase","allowedPhase","PHASES","ARTE_RUIM","DRAW","waitingRoom","instruction","onPressButton","time","unskippable","currentCard","EvaluatedDrawings","votes","cards","drawings","canvasSize","cardsDict","useMemo","reduce","acc","card","drawingsDict","IconAvatar","AnimatedLoaderIcon","cSize","Math","min","Object","keys","sort","map","drawingKey","maxWidth","player","playerId","prepareVotes","entries","drawingEntryId","cardEntryId","split","SEPARATOR","drawingId","EvaluationAllDrawings","activeItem","onActivateItem","liButtonBaseClass","drawingEntry","canvasEntryId","getEntryId","isActive","vote","label","charAt","ArteRuimCard","getColorFromLetter","WarningOutlined","EvaluationAllCards","cardEntry","index","letter","LETTERS","isUsed","values","includes","role","StepEvaluation","onSubmitVoting","isLoading","useLoading","canvasWidth","useCardWidth","gap","minWidth","setCanvasSize","useVotingMatch","setVotes","activateItem","resetVoting","isVotingComplete","choseRandomly","setChoseRandomly","onGuessForMe","useCallback","usedDrawings","usedCards","drawingsKeys","e","filter","key","cardsKeys","shuffle","ceil","flat","newVotes","forEach","floor","selectOwnDrawing","playersDrawing","find","cardIndex","findIndex","cardKey","selection","s","fullWidth","content","direction","SpaceContainer","wrap","ClearOutlined","disabled","ThunderboltOutlined","onSuccess","useOnSubmitVotingAPIRequest","EvaluateIcon","EVALUATION","GalleryWindowCredits","artist","GalleryWindowGuesses","playersSay","windowCardId","artistColor","orderBy","playersIds","i","count","isCorrect","entry","winner","backgroundColor","GalleryWindowResult","playerArtist","correctAnswerId","correctAnswerText","playersPoints","correctGuesses","quantity","keyPrefix","StepGallery","gallery","slideShowConfig","useTemporarilyHidePlayersBar","slideIndex","artistId","currentColor","getAvatarColorById","avatarId","config","barColor","leftClassName","rightClassName","StepRanking","ranking","isGameOver","onGoBack","threshold","gainedPointsDescriptions","total","PictureOutlined","meta","goToPreviousStep","useSlideShow","slideDuration","options","shortGame","some","score","GALLERY","PictureIcon","reset","GRADES","DrawingGrade","value","grade","baseClass","A","FinalGallery","Container","successRate","name","announcementIcon","TrophyIcon","rateWidgetCustomText","Achievements","achievements","reference","achievementsReference","getActiveComponent","LoadingPage","DEFAULT","LOBBY","PhaseLobby","RULES","PhaseRules","SETUP","PhaseSetup","PhaseDraw","PhaseEvaluation","PhaseGallery","GAME_OVER","PhaseGameOver","PageError","gameCollection","GAME_COLLECTION","ACHIEVEMENTS","description","ClockIcon","props","xmlns","viewBox","cx","cy","r","d","transform"],"sourceRoot":""}