{"version":3,"file":"static/js/93.06af346b.chunk.js","mappings":"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","sources":["games/mente-coletiva/RoundType.tsx","games/mente-coletiva/Pasture.tsx","games/mente-coletiva/RulesBlobs.tsx","games/mente-coletiva/StepQuestionSelection.tsx","games/mente-coletiva/StepQuestionSelectionWaiting.tsx","games/mente-coletiva/PhaseQuestionSelection.tsx","games/mente-coletiva/api-requests.ts","games/mente-coletiva/mock.ts","games/mente-coletiva/Question.tsx","games/mente-coletiva/StepAnswering.tsx","games/mente-coletiva/PhaseEverybodyWrites.tsx","games/mente-coletiva/AdminAnswerControl.tsx","games/mente-coletiva/AnswerGroup.tsx","games/mente-coletiva/UserAnswers.tsx","games/mente-coletiva/StepCompare.tsx","games/mente-coletiva/PhaseCompare.tsx","../node_modules/@ant-design/icons-svg/es/asn/HeartFilled.js","../node_modules/@ant-design/icons/es/icons/HeartFilled.js","games/mente-coletiva/StepResolution.tsx","games/mente-coletiva/PhaseResolution.tsx","games/mente-coletiva/PhaseGameOver.tsx","games/mente-coletiva/SessionMenteColetiva.tsx","../node_modules/@ant-design/icons-svg/es/asn/LockFilled.js","../node_modules/@ant-design/icons/es/icons/LockFilled.js","../node_modules/@ant-design/icons-svg/es/asn/PlusCircleFilled.js","../node_modules/@ant-design/icons/es/icons/PlusCircleFilled.js","../node_modules/@ant-design/icons-svg/es/asn/QuestionCircleFilled.js","../node_modules/@ant-design/icons/es/icons/QuestionCircleFilled.js"],"sourcesContent":["import clsx from 'clsx';\n// Components\nimport { Icons, Translate } from 'components';\n\ntype RoundTypeProps = {\n  roundType: Number;\n  className?: string;\n};\n\nexport function RoundType({ roundType, className = '' }: RoundTypeProps) {\n  const arrowBaseClass = 'm-round-type__arrow';\n  return (\n    <div className={clsx('m-round-type', className)}>\n      <div className=\"m-round-type__arrows\">\n        {roundType === 0 && <Icons.Arrow className={clsx(arrowBaseClass, `${arrowBaseClass}--0`)} />}\n        <Icons.Arrow className={clsx(arrowBaseClass, `${arrowBaseClass}--1`)} />\n        {roundType >= 2 && <Icons.Arrow className={clsx(arrowBaseClass, `${arrowBaseClass}--2`)} />}\n        {roundType === 3 && <Icons.Arrow className={clsx(arrowBaseClass, `${arrowBaseClass}--3`)} />}\n      </div>\n\n      <div>\n        <Translate pt={<>Nesta rodada,</>} en={<>This round</>} />\n      </div>\n      {roundType === 1 && (\n        <Translate\n          pt={<>todos com a pontuação mais baixa movem uma cerquinha para direita.</>}\n          en={<>all players with the lowest score move one fence to the right.</>}\n        />\n      )}\n      {roundType === 2 && (\n        <Translate\n          pt={\n            <>\n              todos com as <span className=\"m-round-type__number\">2</span> pontuações mais baixas movem uma\n              cerquinha para direita.\n            </>\n          }\n          en={\n            <>\n              all players with the <span className=\"m-round-type__number\">2</span> lowest scores move one\n              fence to the right.\n            </>\n          }\n        />\n      )}\n      {roundType === 3 && (\n        <Translate\n          pt={\n            <>\n              todos com as <span className=\"m-round-type__number\">3</span> pontuações mais baixas movem uma\n              cerquinha para direita.\n            </>\n          }\n          en={\n            <>\n              all players with the <span className=\"m-round-type__number\">3</span> lowest scores move one\n              fence to the right.\n            </>\n          }\n        />\n      )}\n      {roundType === 0 && (\n        <Translate\n          pt={\n            <>\n              todos com a pontuação mais baixa movem uma cerquinha para direita e todos com a pontuação mais\n              alta movem uma cerquinha <span className=\"m-round-type__highlight\">para a esquerda</span>!\n            </>\n          }\n          en={\n            <>\n              all players with the lowest score move one fence to the right and all players with the highest\n              score move one fence <span className=\"m-round-type__highlight\">to the left</span>!\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useDimensions } from 'hooks';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SheepAvatar } from 'components';\nimport { RoundType } from './RoundType';\n\ntype PastureProps = {\n  players: GamePlayers;\n  pastureSize?: number;\n  roundType?: number;\n};\n\nexport function Pasture({ players, pastureSize = 5, roundType }: PastureProps) {\n  const [width] = useDimensions();\n  const isShortPasture = pastureSize === 3;\n\n  const pastureBase = Math.min(width, 1360) - 36;\n  const pastureWidth = pastureBase * (isShortPasture ? 0.65 : 1);\n  const pastureHeight = pastureBase / 4;\n  const sheepWidth = Math.min(width, 1360) / 22;\n  const gridStyleDistribution = {\n    gridTemplateColumns: isShortPasture ? '1fr 1fr 1fr 0.65fr' : '1fr 1fr 1fr 1fr 1fr 0.65fr',\n  };\n\n  const sheepPerEnclosure = useMemo(() => {\n    const spe = Array(pastureSize + 1).fill(null);\n    Object.values(players).forEach((player) => {\n      if (spe[player.level] === null) {\n        spe[player.level] = [];\n      }\n      spe[player.level].push(player);\n    });\n\n    return spe;\n  }, [players, pastureSize]);\n\n  return (\n    <div className=\"m-pasture-container\" style={{ width: `${pastureWidth}px` }}>\n      {roundType !== undefined && <RoundType roundType={roundType} className=\"m-pasture-round-type\" />}\n\n      <div className=\"m-pasture\" style={{ height: `${pastureHeight}px` }}>\n        <img\n          src={`${PUBLIC_URL.IN_GAME}m-pasture-${pastureSize}.png`}\n          alt=\"pasture background\"\n          className=\"m-pasture__background\"\n        />\n\n        <div className=\"m-enclosures\" style={gridStyleDistribution}>\n          {sheepPerEnclosure.map((sheepPlayers, enclosureId) => {\n            const enclosureKey = `m-enclosure-${enclosureId}`;\n            return (\n              <div className={clsx('m-enclosure', enclosureKey)} key={enclosureKey}>\n                {sheepPlayers &&\n                  sheepPlayers.map((player: GamePlayer, index: number) => {\n                    const sheepKey = `${enclosureKey}-${player.id}`;\n                    const sheepClassName = `m-sheep--pos-${index}`;\n\n                    return (\n                      <SheepAvatar\n                        key={sheepKey}\n                        id={player.avatarId}\n                        className={clsx(\n                          'm-sheep',\n                          sheepClassName,\n                          player.animateRight && 'm-sheep--animate-right',\n                          player.animateLeft && 'm-sheep--animate-left',\n                          player.animateRebound && 'm-sheep--animate-rebound',\n                          player.level === pastureSize && 'm-sheep--animate-die'\n                        )}\n                        width={sheepWidth}\n                        animate\n                      />\n                    );\n                  })}\n              </div>\n            );\n          })}\n        </div>\n\n        <img\n          src={`${PUBLIC_URL.IN_GAME}m-fence-${pastureSize}.svg`}\n          alt=\"fence\"\n          className=\"m-pasture__fence\"\n        />\n        <div className=\"m-pasture-names\">\n          <div className=\"m-enclosures m-enclosures--names\" style={gridStyleDistribution}>\n            {sheepPerEnclosure.map((sheepPlayers, index) => {\n              const names = sheepPlayers?.map((p: GamePlayer) => p.name)?.join(',\\n') ?? '';\n              return (\n                <span\n                  key={`m-enclosure-${index}`}\n                  className={clsx('m-enclosure-names', names && 'm-enclosure-names--has-names')}\n                >\n                  {names}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { AvatarName, Instruction, Translate } from 'components';\n\ntype GamePremiseRulesProps = {\n  activePlayer: GamePlayer;\n};\n\nexport function GamePremiseRules({ activePlayer }: GamePremiseRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Precisamos reduzir essa população! Vamos fazer uma pergunta em que todos tem que escrever uma\n            certa quantidade de respostas. Você ganha um ponto para cada resposta igual a de outra ovelha.\n            Quem receber o menor número de pontos move uma seção para a direita.\n            <br />\n            Se você já está no último pasto e tiver que mover pra direita, você cai no precipício e morre. O\n            pasto fica menos lotado e todos mais felizes.\n            <br />\n            <Instruction contained>\n              <AvatarName player={activePlayer} /> escolherá uma pergunta para essa rodada.\n            </Instruction>\n          </>\n        }\n        en={\n          <>\n            We are sheep and our pasture is overcrowded! We need to decide who should leave.\n            <br />\n            Let's ask a question and everyone has to give a certain number of answers. You are trying to match\n            answers with other sheep to get points. Whoever gets the fewest points moves one section to the\n            right.\n            <br />\n            If you are already in the last pasture and have to move to the right, you fall off the cliff and\n            die. The pasture is less crowded and everyone is happier.\n            <br />\n            <Instruction contained>\n              <AvatarName player={activePlayer} addressUser /> will choose a question for this round.\n            </Instruction>\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function AnsweringRules() {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Agora é hora de responder!\n            <br />\n            Pense em respostas comuns que fará com que você responda igual a outros jogadores.\n            <br />\n            Você ganha 1 ponto para cada uma de suas respostas + 1 ponto para cada resposta igual a de outro\n            jogador (1 ponto por jogador).\n            <br />\n            Por exemplo, se 3 jogadores escreveram 'bola', são 3 pontos para cada.\n          </>\n        }\n        en={\n          <>\n            It's time to answer!\n            <br />\n            Think of common answers that will help you match the largest number of players.\n            <br />\n            You get 1 point for each of your answers + 1 point for each match with other players.\n            <br />\n            For example, if 3 players write 'chicken', each of those players get 3 points.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ComparingRules() {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Hora de comparar respostas!\n            <br />\n            O jogo agrupará todas as respostas iguais, mas agora vocês tem a chance de adicionar palavras que\n            o jogo não agrupou por conta de erro gramatical, acento ou plural.\n            <br />\n            Lembre-se gêneros são considerados diferentes <code>príncipe ≠ princesa</code>, assim como geral\n            vs específico <code>caminhão ≠ caminhão de mudança</code>.\n          </>\n        }\n        en={\n          <>\n            Time to compare answers!\n            <br />\n            The game will group all identical answers, but now the group has a chance to add answers that it\n            missed because of typo, accents, or pluralization.\n            <br />\n            Remember that genders are considered different <code>prince ≠ princess</code>, as well as general\n            vs specific <code>truck ≠ fire truck</code>.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Components\nimport { PopoverRule, Step, Title, Translate } from 'components';\nimport { Pasture } from './Pasture';\nimport { GamePremiseRules } from './RulesBlobs';\n\ntype StepQuestionSelectionProps = {\n  activePlayer: GamePlayer;\n  currentQuestions: MQuestion[];\n  onSubmitQuestion: GenericFunction;\n  players: GamePlayers;\n  roundType: number;\n  pastureSize: number;\n};\n\nexport function StepQuestionSelection({\n  currentQuestions,\n  onSubmitQuestion,\n  players,\n  roundType,\n  activePlayer,\n  pastureSize,\n}: StepQuestionSelectionProps) {\n  return (\n    <Step fullWidth className=\"m-step\">\n      <Title>\n        <Translate pt=\"Selecione uma das perguntas\" en=\"Select one of the questions\" />\n      </Title>\n\n      <PopoverRule content={<GamePremiseRules activePlayer={activePlayer} />} />\n\n      <ul className=\"m-questions contained\">\n        {currentQuestions.map((question) => (\n          <li className=\"m-questions__item\" key={question.id}>\n            <button\n              onClick={() => onSubmitQuestion({ questionId: question.id })}\n              className=\"m-question m-question--button\"\n            >\n              <span className=\"m-question__prefix\">{question.prefix}</span>\n              <span className=\"m-question__number\">{question.number}</span>\n              <span className=\"m-question__suffix\">{question.suffix}</span>\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      <Pasture players={players} pastureSize={pastureSize} roundType={roundType} />\n    </Step>\n  );\n}\n","// Components\nimport { AvatarIcon, AvatarName, Instruction, Step, Title, Translate } from 'components';\nimport { Pasture } from './Pasture';\n\ntype StepQuestionSelectionWaitingProps = {\n  activePlayer: GamePlayer;\n  players: GamePlayers;\n  roundType: number;\n  pastureSize: number;\n};\n\nexport function StepQuestionSelectionWaiting({\n  activePlayer,\n  players,\n  roundType,\n  pastureSize,\n}: StepQuestionSelectionWaitingProps) {\n  return (\n    <Step fullWidth className=\"m-step\">\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" /> <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n      </Title>\n\n      <Instruction contained>\n        <AvatarName player={activePlayer} addressUser />{' '}\n        <Translate pt=\"está escolhendo a pergunta da rodada.\" en=\"is choosing the question for the round.\" />\n        <br />\n      </Instruction>\n\n      <Pasture players={players} pastureSize={pastureSize} roundType={roundType} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitQuestionAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n  ViewOr,\n} from 'components';\nimport { StepQuestionSelection } from './StepQuestionSelection';\nimport { StepQuestionSelectionWaiting } from './StepQuestionSelectionWaiting';\nimport { GamePremiseRules } from './RulesBlobs';\n\nfunction PhaseQuestionSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [activePlayer, isUserTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitQuestion = useOnSubmitQuestionAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MENTE_COLETIVA.QUESTION_SELECTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={3} circleColor=\"white\">\n          <Instruction contained>\n            <Translate\n              pt=\"Somos ovelhinhas e nosso pasto está superlotado!\"\n              en=\"We are sheep and our pasture is overcrowded!\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"sheep\"\n          title={translate('O Pasto Superlotado', 'A Overcrowded Pasture')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 3 ? 40 : 10}\n        >\n          <GamePremiseRules activePlayer={activePlayer} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheActivePlayer}>\n          <StepQuestionSelection\n            players={players}\n            currentQuestions={state.currentQuestions}\n            onSubmitQuestion={onSubmitQuestion}\n            roundType={state.roundType}\n            activePlayer={activePlayer}\n            pastureSize={state.pastureSize}\n          />\n\n          <StepQuestionSelectionWaiting\n            activePlayer={activePlayer}\n            players={players}\n            roundType={state.roundType}\n            pastureSize={state.pastureSize}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseQuestionSelection;\n","import { MENTE_COLETIVA_API } from 'adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitQuestionAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MENTE_COLETIVA_API.submitAction,\n    actionName: 'submit-question',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Pergunta enviada com sucesso!', 'Question send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar a pergunta',\n      'Oops, the application failed to submit the question'\n    ),\n  });\n\n  return (payload: SubmitQuestionPayload) => {\n    request({\n      action: 'SUBMIT_QUESTION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitAnswersAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MENTE_COLETIVA_API.submitAction,\n    actionName: 'submit-answers',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Respostas enviadas com sucesso!', 'Answers send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar respostas',\n      'Oops, the application failed to submit answers'\n    ),\n  });\n\n  return (payload: SubmitAnswersPayload) => {\n    request({\n      action: 'SUBMIT_ANSWERS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnAddAnswerAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MENTE_COLETIVA_API.submitAction,\n    actionName: 'add-answer',\n    successMessage: translate('Resposta adicionada com sucesso!', 'Answer added successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar adicionar respostar',\n      'Oops, the application failed to add answer'\n    ),\n  });\n\n  return (payload: AddAnswerPayload) => {\n    request({\n      action: 'ADD_ANSWER',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnNextAnswersAPIRequest(clearAllowList: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MENTE_COLETIVA_API.submitAction,\n    actionName: 'next-answers',\n    onSuccess: clearAllowList,\n    successMessage: translate(\n      'Próximas respostas acionadas com sucesso!',\n      'Next answers triggered successfully!'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar avançar',\n      'Oops, the application failed to advance'\n    ),\n  });\n\n  return (payload: NextAnswersPayload) => {\n    request({\n      action: 'NEXT_ANSWERS',\n      ...payload,\n    });\n  };\n}\n","import { shuffle } from 'lodash';\nimport { getEntryId } from 'utils/helpers';\n\nexport const mockAnswers = (userId: PlayerId, numAnswers: number) => {\n  const list = ['agua', 'bola', 'coco', 'dedo', 'egua', 'flauta', 'gatilho', 'hélio', 'jaguar'];\n  const list2 = ['água', 'bola', 'cocô', 'dedo', 'égua', 'flauta', 'gatilho', 'helio', 'jipe'];\n\n  const shuffled = shuffle(Math.random() > 0.5 ? list : list2);\n\n  return Array(numAnswers)\n    .fill(0)\n    .map((i, index) => ({ [getEntryId(['answer', `${index}`, userId])]: shuffled[i + index].toUpperCase() }))\n    .reduce((acc, item) => {\n      acc = { ...acc, ...item };\n      return acc;\n    }, {});\n};\n","type QuestionProps = {\n  question: MQuestion;\n};\n\nexport function Question({ question }: QuestionProps) {\n  return (\n    <span className=\"m-question m-question--span\">\n      <span className=\"m-question__prefix\">{question.prefix}</span>\n      <span className=\"m-question__number\">{question.number}</span>\n      <span className=\"m-question__suffix\">{question.suffix}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLanguage, useMock } from 'hooks';\n// Utils\nimport { getEntryId } from 'utils/helpers';\nimport { mockAnswers } from './mock';\n// Components\nimport { ButtonContainer, PopoverRule, Step, Title, Translate } from 'components';\nimport { Pasture } from './Pasture';\nimport { Question } from './Question';\nimport { AnsweringRules } from './RulesBlobs';\n\ntype StepAnsweringProps = {\n  currentQuestion: MQuestion;\n  onSubmitAnswers: GenericFunction;\n  players: GamePlayers;\n  roundType: number;\n  user: GamePlayer;\n  pastureSize: number;\n};\n\nexport function StepAnswering({\n  user,\n  currentQuestion,\n  players,\n  roundType,\n  onSubmitAnswers,\n  pastureSize,\n}: StepAnsweringProps) {\n  const { translate } = useLanguage();\n  const [answers, setAnswers] = useState({});\n\n  // DEV: Mock answers\n  useMock(() => {\n    onSubmitAnswers({ answers: mockAnswers(user.id, currentQuestion.number) });\n  }, []);\n\n  const onWriteAnswer = (e: any) => {\n    setAnswers((s) => ({\n      ...s,\n      [e.target.id]: e.target.value.toUpperCase().trim(),\n    }));\n  };\n\n  const isDisabled =\n    Object.keys(answers).length < currentQuestion.number ||\n    new Set(Object.values(answers)).size !== currentQuestion.number;\n\n  const onPressEnter = () => {\n    if (!isDisabled) {\n      onSubmitAnswers({ answers });\n    }\n  };\n\n  return (\n    <Step fullWidth>\n      <div className=\"m-step__contained-content\">\n        <Title level={3}>\n          <Translate pt=\"Responda a pergunta:\" en=\"Answer the question:\" />\n          <Question question={currentQuestion} />\n        </Title>\n\n        <PopoverRule content={<AnsweringRules />} />\n\n        <ol className=\"m-answers\">\n          {Array(currentQuestion.number)\n            .fill(1)\n            .map((i, index) => {\n              const num = i + index;\n              const key = `answer-${index}`;\n              const id = getEntryId(['answer', index, user.id]);\n              return (\n                <li className=\"m-answers__item\" key={key}>\n                  <Input\n                    className=\"m-answers__input\"\n                    id={id}\n                    placeholder={translate(`Escreva a resposta ${num} aqui`, `Write answer ${num} here`)}\n                    autoComplete=\"off\"\n                    onChange={onWriteAnswer}\n                    onPressEnter={onPressEnter}\n                  />\n                </li>\n              );\n            })}\n        </ol>\n        <ButtonContainer>\n          <Button type=\"primary\" disabled={isDisabled} onClick={() => onSubmitAnswers({ answers })}>\n            <Translate pt=\"Enviar respostas\" en=\"Submit answers\" />\n          </Button>\n        </ButtonContainer>\n      </div>\n\n      <Pasture players={players} pastureSize={pastureSize} roundType={roundType} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep, useUser } from 'hooks';\nimport { useOnSubmitAnswersAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\nimport { StepAnswering } from './StepAnswering';\nimport { AnsweringRules } from './RulesBlobs';\n\nfunction PhaseEverybodyWrites({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitAnswers = useOnSubmitAnswersAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MENTE_COLETIVA.EVERYBODY_WRITES}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"writing\"\n          title={translate('Todos Respondem', 'Everybody Writes')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 3 ? 20 : undefined}\n        >\n          <AnsweringRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepAnswering\n          currentQuestion={state.currentQuestion}\n          players={players}\n          roundType={state.roundType}\n          onSubmitAnswers={onSubmitAnswers}\n          user={user}\n          pastureSize={state.pastureSize}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseEverybodyWrites;\n","import { useMemo } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n// Hooks\nimport { useLoading } from 'hooks';\n// Components\nimport { AdminButton, AdminOnlyContainer, Avatar, Translate } from 'components';\n\ntype AdminAnswerControlProps = {\n  allAnswers: MAnswer[];\n  allowedList: AllowedList;\n  answerGroup: AnswerGroup;\n  onAddAnswer: GenericFunction;\n  onNextAnswer: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function AdminAnswerControl({\n  allAnswers,\n  allowedList,\n  answerGroup,\n  onNextAnswer,\n  onAddAnswer,\n  players,\n}: AdminAnswerControlProps) {\n  const { isLoading } = useLoading();\n\n  const filteredAnswers = useMemo(\n    () =>\n      allAnswers.filter((answer) => {\n        if (answer.isLocked) return false;\n\n        const included = answerGroup.entries.map((a: MAnswer) => a.id);\n        const playerIds = answerGroup.entries.map((a: MAnswer) => a.playerId);\n\n        return !included.includes(answer.id) && !playerIds.includes(answer.playerId);\n      }),\n    [allAnswers, answerGroup]\n  );\n\n  return (\n    <AdminOnlyContainer className=\"m-admin\">\n      <AdminButton\n        onClick={() => onNextAnswer({ allowedList: Object.keys(allowedList) })}\n        disabled={isLoading}\n      >\n        <Translate pt=\"Confirmar e ir para próxima resposta\" en=\"Confirm and go to next answer\" />\n      </AdminButton>\n\n      <ul className=\"m-admin__players-answers\">\n        {filteredAnswers.map((answer) => {\n          return (\n            <Button\n              size=\"large\"\n              disabled={isLoading}\n              className=\"m-admin__answer\"\n              icon={<PlusCircleFilled />}\n              key={`admin-${answer.id}`}\n              onClick={() => onAddAnswer({ answer: { ...answer } })}\n            >\n              <Avatar id={players[answer.playerId].avatarId} /> {answer.answer}\n            </Button>\n          );\n        })}\n      </ul>\n    </AdminOnlyContainer>\n  );\n}\n","// Ant Design Resources\nimport { Checkbox } from 'antd';\nimport { LockFilled, QuestionCircleFilled } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState, useLanguage } from 'hooks';\n// Components\nimport { Card, Instruction, SheepAvatar, Title, Translate } from 'components';\nimport { Question } from './Question';\n\ntype AnswerGroupProps = {\n  currentQuestion: MQuestion;\n  answerGroup: AnswerGroup;\n  players: GamePlayers;\n  remainingGroupsCount: number;\n  allowUserAnswer: GenericFunction;\n};\n\nexport function AnswerGroup({\n  answerGroup,\n  currentQuestion,\n  players,\n  allowUserAnswer,\n  remainingGroupsCount,\n}: AnswerGroupProps) {\n  const { translate } = useLanguage();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  return (\n    <div className=\"m-step\">\n      <Title level={3}>\n        <Translate pt=\"Comparar Respostas\" en=\"Compare Answers\" />\n        <Card\n          header={translate('Pergunta', 'Question')}\n          color={['yellow', 'orange', 'green', 'blue', 'purple'][remainingGroupsCount % 5]}\n          className=\"m-question-card\"\n          footer={Array(remainingGroupsCount).fill('•').join('')}\n        >\n          <Question question={currentQuestion} />\n        </Card>\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt=\"Não existe resposta certa ou errada. Aqui, apenas agrupamos respostas iguais para ganhar pontos. O objetivo é pensar como o grupo!\"\n          en=\"There's no wrong or right answer. Here, we just group equal answers for points. The goal is to think like the group\"\n        />\n      </Instruction>\n\n      <div className=\"m-answer-group\">\n        <div className=\"m-answer-group__answer-container\">\n          <div className=\"m-answer-group__answer\">{answerGroup.answer}</div>\n        </div>\n        <ul className=\"m-answer-group__players\">\n          {answerGroup.entries.map((entry) => {\n            const key = `ag-${entry.id}`;\n            const player = players[entry.playerId];\n            const isLocked =\n              player.answers[entry.id].parsedAnswer === answerGroup.parsedAnswer ||\n              player.answers[entry.id].isLocked;\n            return (\n              <li className=\"m-answer-group__player\" key={key}>\n                <SheepAvatar\n                  id={player.avatarId}\n                  className=\"m-answer-group__sheep-avatar\"\n                  width={40}\n                  animate\n                />\n                <span className=\"m-answer-group__player-name\">\n                  {player.name} {isLocked ? <LockFilled /> : <QuestionCircleFilled />}\n                </span>\n                {!isLocked && (\n                  <span className=\"m-answer-group__speech-bubble-small\">\n                    {player.answers[entry.id].answer}\n                  </span>\n                )}\n                {!isLocked && isAdmin && (\n                  <div className=\"m-answer-group__allow-add\">\n                    <Checkbox\n                      data-allowAnswer={entry.id}\n                      onChange={(e) => allowUserAnswer(e.target.checked, entry.id)}\n                    />\n                  </div>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default AnswerGroup;\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { LockFilled, PlusCircleFilled } from '@ant-design/icons';\n// Hooks\nimport { useLoading } from 'hooks';\n// Components\nimport { ButtonContainer, Instruction, Translate } from 'components';\n\ntype UserAnswersProps = {\n  answerGroup: any;\n  user: GamePlayer;\n  onAddAnswer: GenericFunction;\n};\n\nexport function UserAnswers({ answerGroup, user, onAddAnswer }: UserAnswersProps) {\n  const { isLoading } = useLoading();\n\n  const alreadyHasAnswer = answerGroup.entries.some((entry: any) => entry.playerId === user.id);\n\n  const points = Object.values(user.answers).reduce((acc, answer: any) => {\n    return acc + (answer?.score ?? 0);\n  }, 0);\n\n  return (\n    <div className=\"m-step\">\n      <div className=\"m-step__contained-content\">\n        <Instruction contained>\n          <Translate\n            pt=\"Se você cometeu um erro ortográfico ou acha que sua resposta deveria estar no grupo acima, clique nela para adicioná-la. Você só pode ter uma resposta por pergunta!\"\n            en=\"If you made a typo or for some reason think your answer should be in this group, click on it to add it. You can only have one answer per question.\"\n          />\n          <br />\n          <Translate pt={<>Você tem: {points} ponto(s)</>} en={<>You have: {points} point(s)</>} />\n        </Instruction>\n\n        <ButtonContainer className=\"m-user-answers\">\n          {Object.entries(user.answers).map(([key, answerObj]: any) => {\n            return (\n              <Button\n                key={`a-b-${key}`}\n                disabled={answerObj?.isLocked || alreadyHasAnswer || isLoading}\n                className=\"m-user-answer\"\n                icon={answerObj.isLocked ? <LockFilled /> : <PlusCircleFilled />}\n                onClick={() => onAddAnswer({ answer: { id: key, playerId: user.id, ...answerObj } })}\n              >\n                {answerObj.answer} {Boolean(answerObj.score) && `(${answerObj.score})`}\n              </Button>\n            );\n          })}\n        </ButtonContainer>\n      </div>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Divider } from 'antd';\n// Components\nimport { Step } from 'components';\nimport { AdminAnswerControl } from './AdminAnswerControl';\nimport { AnswerGroup } from './AnswerGroup';\nimport { UserAnswers } from './UserAnswers';\n\ntype StepCompareProps = {\n  currentQuestion: MQuestion;\n  answerGroup: AnswerGroup;\n  players: GamePlayers;\n  user: GamePlayer;\n  allAnswers: MAnswer[];\n  onAddAnswer: GenericFunction;\n  onNextAnswer: GenericFunction;\n  remainingGroupsCount: number;\n  allowedList: AllowedList;\n  setAllowedList: GenericFunction;\n};\n\nexport function StepCompare({\n  currentQuestion,\n  answerGroup,\n  players,\n  user,\n  allAnswers,\n  onAddAnswer,\n  onNextAnswer,\n  remainingGroupsCount,\n  allowedList,\n  setAllowedList,\n}: StepCompareProps) {\n  const allowUserAnswer = (isAllowed: boolean, answerId: string) => {\n    const allowedListCopy = { ...allowedList };\n    if (!isAllowed) {\n      delete allowedListCopy?.[answerId];\n      setAllowedList(allowedListCopy);\n    } else {\n      setAllowedList({ ...allowedListCopy, [answerId]: true });\n    }\n  };\n\n  if (!answerGroup) {\n    return <Step fullWidth>Pronto!</Step>;\n  }\n\n  return (\n    <Step fullWidth>\n      <AnswerGroup\n        currentQuestion={currentQuestion}\n        answerGroup={answerGroup}\n        players={players}\n        allowUserAnswer={allowUserAnswer}\n        remainingGroupsCount={remainingGroupsCount}\n      />\n      <Divider />\n      <UserAnswers user={user} answerGroup={answerGroup} onAddAnswer={onAddAnswer} />\n      <Divider />\n      <AdminAnswerControl\n        answerGroup={answerGroup}\n        allAnswers={allAnswers}\n        players={players}\n        onAddAnswer={onAddAnswer}\n        onNextAnswer={onNextAnswer}\n        allowedList={allowedList}\n      />\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// Hooks\nimport { useLanguage, useStep, useUser } from 'hooks';\nimport { useOnAddAnswerAPIRequest, useOnNextAnswersAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\nimport { StepCompare } from './StepCompare';\nimport { ComparingRules } from './RulesBlobs';\n\nfunction PhaseCompare({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n  const user = useUser(players);\n  const [allowedList, setAllowedList] = useState({});\n\n  const onAddAnswer = useOnAddAnswerAPIRequest();\n  const onNextAnswer = useOnNextAnswersAPIRequest(() => setAllowedList({}));\n\n  const answerGroup = state.answersList[0];\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MENTE_COLETIVA.COMPARE}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"discussion\"\n          title={translate('Respostas', 'Answers')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 3 ? 20 : undefined}\n        >\n          <ComparingRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepCompare\n          currentQuestion={state.currentQuestion}\n          answerGroup={answerGroup}\n          players={players}\n          user={user}\n          allAnswers={state.allAnswers}\n          onAddAnswer={onAddAnswer}\n          onNextAnswer={onNextAnswer}\n          remainingGroupsCount={state.answersList.length}\n          allowedList={allowedList}\n          setAllowedList={setAllowedList}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCompare;\n","// This icon file is generated automatically.\nvar HeartFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M923 283.6a260.04 260.04 0 00-56.9-82.8 264.4 264.4 0 00-84-55.5A265.34 265.34 0 00679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 00-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9z\" } }] }, \"name\": \"heart\", \"theme\": \"filled\" };\nexport default HeartFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport HeartFilledSvg from \"@ant-design/icons-svg/es/asn/HeartFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar HeartFilled = function HeartFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: HeartFilledSvg\n  }));\n};\n\nHeartFilled.displayName = 'HeartFilled';\nexport default /*#__PURE__*/React.forwardRef(HeartFilled);","import { useEffect, useMemo, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Ant Design Resources\nimport { HeartFilled } from '@ant-design/icons';\n// Hooks\nimport { getAnimationClass, inNSeconds } from 'utils/helpers';\n// Components\nimport {\n  AdminNextRoundButton,\n  Instruction,\n  RankingBoard,\n  Step,\n  StepSwitcher,\n  Title,\n  Translate,\n} from 'components';\nimport { Pasture } from './Pasture';\nimport { RoundType } from './RoundType';\nimport clsx from 'clsx';\n\ntype StepResolutionProps = {\n  ranking: GameRanking;\n  players: GamePlayers;\n  roundType: number;\n  pastureChangeStr: string;\n  round: GameRound;\n  announceSave: boolean;\n  pastureSize: number;\n};\n\nexport function StepResolution({\n  ranking,\n  players,\n  roundType,\n  pastureChangeStr,\n  round,\n  pastureSize,\n  announceSave = false,\n}: StepResolutionProps) {\n  const [step, setStep] = useState(0);\n  const [pastureIndex, setPastureIndex] = useState(0);\n  const [showAnnounceSave, setShowAnnounceSave] = useState(false);\n\n  const pastureChange = useMemo(() => JSON.parse(pastureChangeStr), [pastureChangeStr]);\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(15),\n    autoStart: true,\n  });\n\n  useEffect(() => {\n    if (seconds === 7) {\n      setStep(1);\n    }\n    if (seconds === 5) {\n      setPastureIndex(1);\n    }\n    if (seconds === 4 && announceSave) {\n      setShowAnnounceSave(true);\n    }\n\n    if (seconds === 1) {\n      setPastureIndex(2);\n    }\n  }, [seconds]); // eslint-disable-line\n\n  return (\n    <Step fullWidth>\n      <Title level={1}>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      {step === 0 && <RoundType roundType={roundType} />}\n\n      <StepSwitcher step={step}>\n        <Step key={0}>\n          <RankingBoard ranking={ranking} players={players} />\n        </Step>\n\n        <Step key={1}>\n          {showAnnounceSave && (\n            <Instruction contained className={clsx('m-save-card', getAnimationClass('zoomInDown'))}>\n              <HeartFilled style={{ color: 'red' }} />{' '}\n              <Translate\n                pt=\"Vamos dar uma última chance para a pobre ovelhinha que\n              ia morrer agora\"\n                en=\"Let's give one more chance to the poor sheep about to die. The last one!\"\n              />{' '}\n              <HeartFilled style={{ color: 'red' }} />\n            </Instruction>\n          )}\n          <Pasture\n            players={pastureChange[pastureIndex]}\n            pastureSize={pastureSize}\n            roundType={step > 0 ? roundType : undefined}\n          />\n          <AdminNextRoundButton round={round} />\n        </Step>\n      </StepSwitcher>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepResolution } from './StepResolution';\n\nfunction PhaseResolution({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MENTE_COLETIVA.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"customer-review\"\n          title={translate('Resultado', 'And who moves is...')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora podemos saber quem deve ser linchado porque não combina com o grupo!\n                  <br />\n                  Graças a Deus, mais espaço!\n                </>\n              }\n              en={\n                <>\n                  Now we will know who can be moved because they don't match with the group!\n                  <br />\n                  Thank God, more room!\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResolution\n          ranking={state.ranking}\n          players={players}\n          pastureChangeStr={state.pastureChangeStr}\n          roundType={state.roundType}\n          announceSave={state?.announceSave}\n          round={state.round}\n          pastureSize={state.pastureSize}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Components\nimport { GameOverWrapper, Title, SheepAvatar } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"the-end\">\n      <div className=\"m-game-over-in-memoriam\">\n        <Title>In memoriam</Title>\n        <div className=\"m-sheep-rip\">\n          {state.losers.map((player: GamePlayer) => {\n            return (\n              <div className=\"m-sheep-rip__entry\" key={`sheep-player-1`}>\n                <SheepAvatar id={player.avatarId} width={80} />\n                <span className=\"m-sheep-rip__name\">{player.name}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseQuestionSelection from './PhaseQuestionSelection';\nimport PhaseEverybodyWrites from './PhaseEverybodyWrites';\nimport PhaseCompare from './PhaseCompare';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionMenteColetiva({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.MENTE_COLETIVA.QUESTION_SELECTION:\n        return PhaseQuestionSelection;\n      case PHASES.MENTE_COLETIVA.EVERYBODY_WRITES:\n        return PhaseEverybodyWrites;\n      case PHASES.MENTE_COLETIVA.COMPARE:\n        return PhaseCompare;\n      case PHASES.MENTE_COLETIVA.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.MENTE_COLETIVA}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionMenteColetiva;\n","// This icon file is generated automatically.\nvar LockFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM540 701v53c0 4.4-3.6 8-8 8h-40c-4.4 0-8-3.6-8-8v-53a48.01 48.01 0 1156 0zm152-237H332V240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224z\" } }] }, \"name\": \"lock\", \"theme\": \"filled\" };\nexport default LockFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LockFilledSvg from \"@ant-design/icons-svg/es/asn/LockFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LockFilled = function LockFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LockFilledSvg\n  }));\n};\n\nLockFilled.displayName = 'LockFilled';\nexport default /*#__PURE__*/React.forwardRef(LockFilled);","// This icon file is generated automatically.\nvar PlusCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z\" } }] }, \"name\": \"plus-circle\", \"theme\": \"filled\" };\nexport default PlusCircleFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusCircleFilledSvg from \"@ant-design/icons-svg/es/asn/PlusCircleFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlusCircleFilled = function PlusCircleFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusCircleFilledSvg\n  }));\n};\n\nPlusCircleFilled.displayName = 'PlusCircleFilled';\nexport default /*#__PURE__*/React.forwardRef(PlusCircleFilled);","// This icon file is generated automatically.\nvar QuestionCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 708c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm62.9-219.5a48.3 48.3 0 00-30.9 44.8V620c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-21.5c0-23.1 6.7-45.9 19.9-64.9 12.9-18.6 30.9-32.8 52.1-40.9 34-13.1 56-41.6 56-72.7 0-44.1-43.1-80-96-80s-96 35.9-96 80v7.6c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V420c0-39.3 17.2-76 48.4-103.3C430.4 290.4 470 276 512 276s81.6 14.5 111.6 40.7C654.8 344 672 380.7 672 420c0 57.8-38.1 109.8-97.1 132.5z\" } }] }, \"name\": \"question-circle\", \"theme\": \"filled\" };\nexport default QuestionCircleFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport QuestionCircleFilledSvg from \"@ant-design/icons-svg/es/asn/QuestionCircleFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar QuestionCircleFilled = function QuestionCircleFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: QuestionCircleFilledSvg\n  }));\n};\n\nQuestionCircleFilled.displayName = 'QuestionCircleFilled';\nexport default /*#__PURE__*/React.forwardRef(QuestionCircleFilled);"],"names":["RoundType","roundType","className","arrowBaseClass","clsx","pt","en","Pasture","players","pastureSize","useDimensions","width","isShortPasture","pastureBase","Math","min","pastureWidth","pastureHeight","sheepWidth","gridStyleDistribution","gridTemplateColumns","sheepPerEnclosure","useMemo","spe","Array","fill","Object","values","forEach","player","level","push","style","undefined","height","src","PUBLIC_URL","alt","map","sheepPlayers","enclosureId","enclosureKey","index","sheepKey","id","sheepClassName","avatarId","animateRight","animateLeft","animateRebound","animate","names","p","name","join","GamePremiseRules","activePlayer","contained","addressUser","AnsweringRules","ComparingRules","StepQuestionSelection","currentQuestions","onSubmitQuestion","fullWidth","content","question","onClick","questionId","prefix","number","suffix","StepQuestionSelectionWaiting","type","size","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","useWhichPlayerIsThe","isUserTheActivePlayer","request","useAPICall","apiFunction","MENTE_COLETIVA_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitQuestionAPIRequest","phase","allowedPhase","PHASES","round","onPressButton","time","circleColor","title","onClose","currentRound","current","duration","orCondition","mockAnswers","userId","numAnswers","shuffled","shuffle","random","i","getEntryId","toUpperCase","reduce","acc","item","Question","StepAnswering","user","currentQuestion","onSubmitAnswers","useState","answers","setAnswers","useMock","onWriteAnswer","e","s","target","value","trim","isDisabled","keys","length","Set","onPressEnter","num","key","placeholder","autoComplete","onChange","disabled","useUser","useOnSubmitAnswersAPIRequest","AdminAnswerControl","allAnswers","allowedList","answerGroup","onNextAnswer","onAddAnswer","isLoading","useLoading","filteredAnswers","filter","answer","isLocked","included","entries","a","playerIds","playerId","includes","icon","PlusCircleFilled","AnswerGroup","allowUserAnswer","remainingGroupsCount","useGlobalState","isAdmin","header","color","footer","entry","parsedAnswer","LockFilled","QuestionCircleFilled","checked","UserAnswers","alreadyHasAnswer","some","points","score","answerObj","Boolean","StepCompare","setAllowedList","isAllowed","answerId","allowedListCopy","useOnAddAnswerAPIRequest","clearAllowList","onSuccess","useOnNextAnswersAPIRequest","answersList","HeartFilled","props","ref","React","AntdIcon","_objectSpread","HeartFilledSvg","displayName","StepResolution","ranking","pastureChangeStr","announceSave","pastureIndex","setPastureIndex","showAnnounceSave","setShowAnnounceSave","pastureChange","JSON","parse","seconds","useTimer","expiryTimestamp","inNSeconds","autoStart","useEffect","getAnimationClass","announcementIcon","losers","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseQuestionSelection","PhaseEverybodyWrites","PhaseCompare","PhaseResolution","PhaseGameOver","PageError","LockFilledSvg","PlusCircleFilledSvg","QuestionCircleFilledSvg"],"sourceRoot":""}