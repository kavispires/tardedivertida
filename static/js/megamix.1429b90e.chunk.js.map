{"version":3,"file":"static/js/megamix.1429b90e.chunk.js","mappings":"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","sources":["components/cards/MonsterCard.tsx","components/cards/MovieCard.tsx","components/cards/MovieReviewCard.tsx","components/metrics/CardHighlight.tsx","components/metrics/MetricHighlight.tsx","components/metrics/PlayersHighlight.tsx","components/metrics/PointsHighlight.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx","games/contadores-historias/components/BookPages.tsx","games/megamix/utils/helpers.ts","games/megamix/components/TaskIcon.tsx","games/megamix/utils/constants.ts","games/megamix/components/TaskInstructions.tsx","games/megamix/components/ClubLine.tsx","mock/clues.ts","games/megamix/utils/mock.ts","games/megamix/components/MinigameTitle.tsx","games/megamix/components/TaskArteRuim.tsx","games/megamix/components/TaskCaminhosMagicos.tsx","games/megamix/components/TaskContadoresHistorias.tsx","games/megamix/components/TaskCrimesHediondos.tsx","components/general/SpreadsheetGrid.tsx","games/megamix/components/TaskCruzaPalavras.tsx","games/megamix/components/TaskDetetivesImaginativos.tsx","games/megamix/components/TaskDilemaDosEsquiadores.tsx","games/megamix/components/TaskEspiaoEntreNos.tsx","games/megamix/components/TaskFileiraDeFatos.tsx","games/megamix/components/TaskGaleriaDeSonhos.tsx","games/megamix/components/TaskMenteColetiva.tsx","games/megamix/components/TaskNamoroOuAmizade.tsx","games/megamix/components/TaskNaRuaDoMedo.tsx","games/megamix/components/TaskOndaTelepatica.tsx","games/megamix/components/TaskPalhetaDeFores.tsx","games/megamix/components/SocialProfile.tsx","games/megamix/components/TaskPolemicaDaVez.tsx","games/megamix/components/TaskPortaDosDesesperados.tsx","games/megamix/components/TaskQuemNaoMata.tsx","games/megamix/components/TaskRetratoFalado.tsx","games/megamix/components/TaskSuperCampeonato.tsx","games/megamix/components/TaskTestemunhaOcular.tsx","games/megamix/components/TaskUeSoIsso.tsx","games/megamix/components/TaskVamosAoCinema.tsx","games/megamix/StepTask.tsx","games/megamix/components/TaskTitle.tsx","games/megamix/components/RulesBlobs.tsx","components/audio/DJPruPruPruSound.tsx","games/megamix/PhaseTask.tsx","games/megamix/utils/api-requests.ts","games/megamix/components/SeedArteRuim.tsx","games/megamix/components/SeedCaminhosMagicos.tsx","games/megamix/components/SeedClubber.tsx","games/megamix/components/SeedFileiraDeFatos.tsx","games/megamix/components/SeedOndaTelepatica.tsx","games/megamix/components/SeedPolemicaDaVez.tsx","games/megamix/components/SeedRetratoFalado.tsx","games/megamix/StepSeeding.tsx","games/megamix/PhaseSeeding.tsx","games/megamix/components/WinningCount.tsx","games/megamix/components/ResultArteRuim.tsx","games/megamix/components/ResultCaminhosMagicos.tsx","games/megamix/components/ResultCruzaPalavras.tsx","games/megamix/components/ResultNamoroOuAmizade.tsx","games/megamix/components/ResultNaRuaDoMedo.tsx","games/megamix/components/ResultRetratoFalado.tsx","games/megamix/components/ResultVamosNoCinema.tsx","games/megamix/components/ResultValueDelegator.tsx","games/megamix/components/SpacePlayerCheckWrapper.tsx","games/megamix/components/VoteArteRuim.tsx","games/megamix/components/VoteCruzaPalavras.tsx","games/megamix/components/VoteNamoroOuAmizade.tsx","games/megamix/components/VoteNaRuaDoMedo.tsx","games/megamix/components/VoteRetratoFalado.tsx","games/megamix/components/VoteVamosAoCinema.tsx","games/megamix/components/VotesDelegator.tsx","games/megamix/StepResult.tsx","games/megamix/StepRanking.tsx","games/megamix/PhaseResult.tsx","games/megamix/PhaseGameOver.tsx","games/megamix/SessionMegamix.tsx","games/na-rua-do-medo/components/CandyCount.tsx","games/na-rua-do-medo/components/HouseCard.tsx","games/onda-telepatica/utils/helpers.ts","games/porta-dos-desesperados/components/Book.tsx","games/porta-dos-desesperados/components/DoorFrame.tsx","icons/GuessIcon.tsx","icons/ImageCardsIcon.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Space, SpaceProps } from 'antd';\nimport { RotateLeftOutlined, RotateRightOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\n// Sass\nimport './MonsterCard.scss';\n\ninterface MonsterCardProps extends SpaceProps {\n  currentMonster: Monster;\n  showControls?: boolean;\n  cardWidth?: number;\n}\n\nexport function MonsterCard({ currentMonster, showControls = true, cardWidth, ...props }: MonsterCardProps) {\n  const [monsterOrientation, setMonsterOrientation] = useGlobalState('monsterOrientation');\n  const defaultCardWidth = useCardWidth(5, 16, 120, 360);\n\n  useEffectOnce(() => {\n    if (currentMonster.orientation === 'horizontal') {\n      setMonsterOrientation(currentMonster.orientation);\n    }\n  });\n\n  const onChangeOrientation = () => {\n    const newOrientation = monsterOrientation === 'vertical' ? 'horizontal' : 'vertical';\n    setMonsterOrientation(newOrientation);\n  };\n\n  const baseClass = 'monster-card';\n  return (\n    <Space direction=\"vertical\" align=\"center\" {...props}>\n      <ImageCard\n        imageId={currentMonster.id}\n        cardWidth={cardWidth || defaultCardWidth}\n        className={clsx(\n          baseClass,\n          monsterOrientation === 'vertical' ? `${baseClass}--vertical` : `${baseClass}--horizontal`\n        )}\n      />\n      {showControls && (\n        <Button onClick={onChangeOrientation}>\n          {monsterOrientation === 'vertical' ? <RotateRightOutlined /> : <RotateLeftOutlined />}\n          <Translate pt=\"Girar\" en=\"Rotate\" />\n        </Button>\n      )}\n    </Space>\n  );\n}\n","import clsx from 'clsx';\n// Sass\nimport './MovieCard.scss';\n\ntype MovieCardProps = {\n  movie: MovieCard;\n  disableSuffix?: boolean;\n  suffixColor?: string;\n  disablePrefix?: boolean;\n  prefixColor?: string;\n};\n\nexport function MovieCard({ movie, disableSuffix, disablePrefix, prefixColor, suffixColor }: MovieCardProps) {\n  return (\n    <div className=\"movie-card\">\n      <div\n        className={clsx('movie-card__suffix', disableSuffix && 'movie-card__suffix--disabled')}\n        style={{ backgroundColor: !disableSuffix && suffixColor ? suffixColor : 'rgba(248, 248, 248, 0.6)' }}\n      >\n        {movie.suffix}\n      </div>\n\n      <div\n        className={clsx('movie-card__prefix', disablePrefix && 'movie-card__prefix--disabled')}\n        style={{ backgroundColor: !disablePrefix && prefixColor ? prefixColor : 'rgba(248, 248, 248, 0.6)' }}\n      >\n        {movie.prefix}\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport Highlighter from 'react-highlight-words';\nimport { Translate } from 'components/language';\n// Sass\nimport './MovieReviewCard.scss';\n\ntype MovieReviewCardProps = {\n  /**\n   * The type of review\n   */\n  type: 'positive' | 'negative';\n  /**\n   * The review itself\n   */\n  text: string;\n  /**\n   * Optional list of words to be highlighted in the review\n   */\n  highlights?: string[];\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport const MovieReviewCard = ({ type, text, highlights = [], className = '' }: MovieReviewCardProps) => {\n  const baseClass = 'movie-review-card';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${type}`, className)}>\n      <span className={`${baseClass}__header`}>\n        {type === 'positive' ? (\n          <Translate pt=\"Crítica Positiva\" en=\"Positive Review\" />\n        ) : (\n          <Translate pt=\"Crítica Negativa\" en=\"Negative Review\" />\n        )}\n        {type === 'positive' ? ' 👏' : ' 🤮'}\n      </span>\n      <div className={`${baseClass}__content`}>\n        <Highlighter\n          className={`${baseClass}__text`}\n          highlightClassName={clsx(`${baseClass}__text-highlight`, `${baseClass}__text-highlight--${type}`)}\n          searchWords={highlights}\n          autoEscape={true}\n          textToHighlight={text}\n        />\n      </div>\n    </div>\n  );\n};\n","import { ImageCardsIcon } from 'icons/ImageCardsIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function CardHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ImageCardsIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nimport { AvatarSize } from 'antd/lib/avatar/SizeContext';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { PlayersIcon } from 'icons/PlayersIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PlayersHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<PlayersIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDimensions } from 'hooks/useDimensions';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [, height] = useDimensions('ranking-row-0');\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className=\"ranking-board\"\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype BookPagesProps = {\n  leftPage: ReactNode;\n  rightPage: ReactNode;\n};\n\nexport function BookPages({ leftPage, rightPage }: BookPagesProps) {\n  return (\n    <svg viewBox=\"0 0 590 320\" className=\"c-book-pages\">\n      <path\n        d=\"M4 12.46s71.16 8 145.65 0S295 16 295 16s90.78-12.42 156 0S586 5.14 586 5.14v296s-43.23 24.6-158.29 8S295 314 295 314s-94.44-17.89-143.33-3.59c-29.88 8.74-147.64-4-147.64-4z\"\n        fill=\"#ffffff\"\n      ></path>\n      <foreignObject x=\"13\" y=\"23\" width=\"280\" height=\"276\">\n        <div>{leftPage}</div>\n      </foreignObject>\n\n      <foreignObject x=\"295\" y=\"23\" width=\"280\" height=\"276\">\n        <div>{rightPage}</div>\n      </foreignObject>\n      <path d=\"M294.75 23.77h.5v280.66h-.5z\" fill=\"grey\"></path>\n    </svg>\n  );\n}\n","import { StepProps } from 'antd';\n\nexport const buildSeedingSteps = (\n  seeds: SeedEntry[],\n  translate: (pt: string, en: string, custom?: string | undefined) => string\n): StepProps[] => {\n  return seeds.map((seed) => {\n    switch (seed.type) {\n      case 'arte-ruim':\n        return {\n          title: translate('Hobby Artístico', 'Artistic Hobby'),\n          description: translate('Se expresse!', 'Express yourself!'),\n        };\n      case 'caminhos-magicos':\n        return {\n          title: translate('Postando no Insta', 'Instagram post'),\n          description: translate('Não existe sexy demais!', 'Do it for the likes!'),\n        };\n      case 'fileira-de-fatos':\n        return {\n          title: translate('Torpedo do Amigo', \"A friend's text\"),\n          description: translate('Responda!', 'Reply!'),\n        };\n      case 'onda-telepatica':\n        return {\n          title: translate('Tarefa de Casa', 'Homework'),\n          description: translate('Não pode deixar pra depois!', \"You can't leave it for tomorrow!\"),\n        };\n      case 'polemica-da-vez':\n        return {\n          title: translate('Redes sociais', 'Social Media'),\n          description: translate('Dê uma olhada no twitter', 'Check it out twitter'),\n        };\n      case 'retrato-falado':\n        return {\n          title: translate('Flashback', 'Flashback'),\n          description: translate('Um evento traumatizante', 'A traumatizing event'),\n        };\n      case 'clubber':\n        return {\n          title: translate('Roupinha', 'Outfit'),\n          description: translate('Como ir pra balada', 'How to be cool'),\n        };\n      default:\n        return {};\n    }\n  });\n};\n\nexport const showDJPruPruPruStep = (round: GameRound) => {\n  if (round.current <= 1 || !round) return 0; // true\n\n  if (round.current === Math.round(round.total / 2)) return 0;\n\n  if (round.current === round.total) return 0;\n\n  return 1; // false\n};\n\nexport const getMovieTitles = (movies: MovieCard[]) => {\n  return {\n    A: `${movies[0].prefix} ${movies[1].suffix}`,\n    B: `${movies[1].prefix} ${movies[2].suffix}`,\n    C: `${movies[3].prefix} ${movies[4].suffix}`,\n    D: `${movies[4].prefix} ${movies[5].suffix}`,\n  };\n};\n","// Components\nimport { BoxingGlovesIcon } from 'icons/BoxingGlovesIcon';\nimport { ColorWheelIcon } from 'icons/ColorWheelIcon';\nimport { CrimeSceneIcon } from 'icons/CrimeSceneIcon';\nimport { CriminalIcon } from 'icons/CriminalIcon';\nimport { CrossWordsIcon } from 'icons/CrossWordsIcon';\nimport { DetectiveIcon } from 'icons/DetectiveIcon';\nimport { DreamIcon } from 'icons/DreamIcon';\nimport { FairyTaleIcon } from 'icons/FairyTaleIcon';\nimport { GuessIcon } from 'icons/GuessIcon';\nimport { LoveIcon } from 'icons/LoveIcon';\nimport { MagicDoorIcon } from 'icons/MagicDoorIcon';\nimport { MonsterIcon } from 'icons/MonsterIcon';\nimport { MovieTheaterIcon } from 'icons/MovieTheaterIcon';\nimport { PassportIcon } from 'icons/PassportIcon';\nimport { PathIcon } from 'icons/PathIcon';\nimport { PictureIcon } from 'icons/PictureIcon';\nimport { QueueIcon } from 'icons/QueueIcon';\nimport { RevolverIcon } from 'icons/RevolverIcon';\nimport { SheepIcon } from 'icons/SheepIcon';\nimport { SkiingIcon } from 'icons/SkiingIcon';\nimport { TDIcon } from 'icons/TDIcon';\nimport { TrendingIcon } from 'icons/TrendingIcon';\nimport { TrickOrTreatIcon } from 'icons/TrickOrTreatIcon';\nimport { WavelengthDeviceIcon } from 'icons/WavelengthDeviceIcon';\n\ntype TaskIconProps = {\n  task: Task;\n};\n\nexport const TaskIcon = ({ task }: TaskIconProps) => {\n  switch (task.game) {\n    case 'arte-ruim':\n      return <PictureIcon />;\n    case 'caminhos-magicos':\n      return <PathIcon />;\n    case 'contadores-historias':\n      return <FairyTaleIcon />;\n    case 'crimes-hediondos':\n      return <CrimeSceneIcon />;\n    case 'cruza-palavras':\n      return <CrossWordsIcon />;\n    case 'detetives-imaginativos':\n      return <DetectiveIcon />;\n    case 'dilema-dos-esquiadores':\n      return <SkiingIcon />;\n    case 'espiao-entre-nos':\n      return <PassportIcon />;\n    case 'fileira-de-fatos':\n      return <QueueIcon />;\n    case 'galeria-de-sonhos':\n      return <DreamIcon />;\n    case 'mente-coletiva':\n      return <SheepIcon />;\n    case 'namoro-ou-amizade':\n      return <LoveIcon />;\n    case 'na-rua-do-medo':\n      return <TrickOrTreatIcon />;\n    case 'namoro-amizade':\n      return <LoveIcon />;\n    case 'onda-telepatica':\n      return <WavelengthDeviceIcon />;\n    case 'palheta-de-cores':\n      return <ColorWheelIcon />;\n    case 'polemica-da-vez':\n      return <TrendingIcon />;\n    case 'porta-dos-desesperados':\n      return <MagicDoorIcon />;\n    case 'quem-nao-mata':\n      return <RevolverIcon />;\n    case 'retrato-falado':\n      return <MonsterIcon />;\n    case 'super-campeonato':\n      return <BoxingGlovesIcon />;\n    case 'testemunha-ocular':\n      return <CriminalIcon />;\n    case 'ue-so-isso':\n      return <GuessIcon />;\n    case 'vamos-ao-cinema':\n      return <MovieTheaterIcon />;\n    default:\n      return <TDIcon />;\n  }\n};\n","export const TITLES: Record<string, DualLanguageValue> = {\n  'arte-ruim': {\n    pt: 'Arte Ruim Pra Dedéu',\n    en: 'Questionable Art',\n  },\n  'caminhos-magicos': {\n    pt: 'Caminhos Mágicos',\n    en: 'Magic Pathways',\n  },\n  'contadores-historias': {\n    pt: 'Contadores de Histórias',\n    en: 'Storytellers',\n  },\n  'crimes-hediondos': {\n    pt: 'Crimes Hediondos',\n    en: 'Horrific Crimes',\n  },\n  'cruza-palavras': {\n    pt: 'Cruza Palavras',\n    en: 'Mixed Clues',\n  },\n  'detetives-imaginativos': {\n    pt: 'Detetives Imaginativos',\n    en: 'Imaginative Detectives',\n  },\n  'dilema-dos-esquiadores': {\n    pt: 'O Dilema do Esquiador',\n    en: \"The Skier's Dilemma\",\n  },\n  'espiao-entre-nos': {\n    pt: 'Espião Entre Nós',\n    en: 'Spy the Spies',\n  },\n  'fileira-de-fatos': {\n    pt: 'Fileira de Fatos',\n    en: 'Facts Lineup',\n  },\n  'galeria-de-sonhos': {\n    pt: 'Galeria de Sonhos',\n    en: 'Dream Gallery',\n  },\n  'mente-coletiva': {\n    pt: 'Mente Coletiva',\n    en: 'Herd Mind',\n  },\n  'na-rua-do-medo': {\n    pt: 'Na Rua do Medo',\n    en: 'Fear Street',\n  },\n  'namoro-ou-amizade': {\n    pt: 'Namoro ou Amizade',\n    en: 'Awkward Dates',\n  },\n  'onda-telepatica': {\n    pt: 'Ondas Telepáticas',\n    en: 'Telepathic Waves',\n  },\n  'palheta-de-cores': {\n    pt: 'Palheta de Cores',\n    en: 'Color Palette',\n  },\n  'polemica-da-vez': {\n    pt: 'Polêmica da Vez',\n    en: \"That's Polemic!\",\n  },\n  'porta-dos-desesperados': {\n    pt: 'Porta dos Desesperados',\n    en: 'Obscure Doors',\n  },\n  'retrato-falado': {\n    pt: 'Retrato Falado Monstruoso',\n    en: 'Monster Sketch',\n  },\n  'quem-nao-mata': {\n    pt: 'Quem Não Mata, Morre',\n    en: 'Mortal Standoff',\n  },\n  'super-campeonato': {\n    pt: 'Super Campeonato',\n    en: 'Ultimate Championship',\n  },\n  'testemunha-ocular': {\n    pt: 'Testemunha Ocular',\n    en: 'Eye Witness',\n  },\n  'ue-so-isso': {\n    pt: 'Ué, só isso?',\n    en: \"That's it?\",\n  },\n  'vamos-ao-cinema': {\n    pt: 'Vamos no cinema?',\n    en: 'Movie night!',\n  },\n};\n\nexport const INSTRUCTIONS: Record<string, DualLanguageValue> = {\n  'arte-ruim': {\n    pt: 'Uma imagem vale mais que mil palavras',\n    en: \"That's art!\",\n  },\n  'caminhos-magicos': {\n    pt: 'Vamos andar pela floresta',\n    en: \"Let's walk into the woods\",\n  },\n  'contadores-historias': {\n    pt: 'Conte uma história',\n    en: 'Tell us a story',\n  },\n  'crimes-hediondos': {\n    pt: 'Desvenda o crime!',\n    en: 'Solve the crime!',\n  },\n  'cruza-palavras': {\n    pt: 'Coloque a dica na grade de palavras!',\n    en: 'Place the clue in the word grid!',\n  },\n  'detetives-imaginativos': {\n    pt: 'Há um impostor entre a gente!',\n    en: 'There is an impostor among us!',\n  },\n  'dilema-dos-esquiadores': {\n    pt: 'Escolha uma montanha para esquiar!',\n    en: 'Choose a mountain to ski!',\n  },\n  'espiao-entre-nos': {\n    pt: 'Onde você está?',\n    en: 'Where are we?',\n  },\n  'fileira-de-fatos': {\n    pt: 'Coloque a fila de números na ordem!',\n    en: 'Place the line of numbers in order!',\n  },\n  'galeria-de-sonhos': {\n    pt: 'Um tema, um sonho, várias images',\n    en: 'A theme, a dream, many images',\n  },\n  'mente-coletiva': {\n    pt: 'Junte-se as ovelhas!',\n    en: 'Join the herd!',\n  },\n  'na-rua-do-medo': {\n    pt: 'Gostosuras ou travessuras?',\n    en: 'Trick or treat?',\n  },\n  'namoro-ou-amizade': {\n    pt: 'Selecione o melhor partido',\n    en: \"Who's the best catch?\",\n  },\n  'onda-telepatica': {\n    pt: 'Para onde o ponteiro está apontando?',\n    en: 'Where is the pointer pointing to?',\n  },\n  'palheta-de-cores': {\n    pt: 'Selecione a melhor cor',\n    en: 'Select the best color swatch',\n  },\n  'polemica-da-vez': {\n    pt: 'Quantas curtidas isso ganha?',\n    en: 'How many likes, huh?',\n  },\n  'porta-dos-desesperados': {\n    pt: 'Qual a porta é a saída?',\n    en: 'What door is the exit?',\n  },\n  'quem-nao-mata': {\n    pt: 'Mate alguém...',\n    en: 'Kill someone...',\n  },\n  'retrato-falado': {\n    pt: 'Qual o melhor monstro?',\n    en: 'What is the best monster?',\n  },\n  'super-campeonato': {\n    pt: 'Quem ganha essa batalha?',\n    en: 'Who will win this battle?',\n  },\n  'testemunha-ocular': {\n    pt: 'Quem é o criminoso?',\n    en: 'Who is the perpetrator?',\n  },\n  'ue-so-isso': {\n    pt: 'Escreva uma dica para ser eliminada',\n    en: 'Write a clue to be eliminated',\n  },\n  'vamos-ao-cinema': {\n    pt: 'Vamos ver qual filme?',\n    en: 'But what movie?',\n  },\n};\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { INSTRUCTIONS } from '../utils/constants';\n\ntype TaskInstructionsProps = {\n  task: Task;\n};\n\nexport const TaskInstructions = ({ task }: TaskInstructionsProps) => {\n  const { dualTranslate } = useLanguage();\n\n  const instruction: DualLanguageValue = INSTRUCTIONS?.[task.game] ?? {\n    pt: 'Se vire nos 30!',\n    en: 'Do something!',\n  };\n\n  return <>{dualTranslate(instruction)}</>;\n};\n","import { useMemo } from 'react';\n// AntDesign Resources\nimport { Tooltip } from 'antd';\n// Hooks\n// Utils\nimport { sortPlayers } from 'utils/helpers';\n// Components\nimport { VIPLineIcon } from 'icons/VIPLineIcon';\nimport { ClubberAvatar } from './ClubberAvatar';\n\ntype MinigameTitleProps = {\n  players: GamePlayers;\n  currentRound: number;\n};\n\nexport function ClubLine({ players, currentRound }: MinigameTitleProps) {\n  const { winners, losers } = useMemo(() => {\n    const playersList = sortPlayers(players);\n\n    return {\n      winners: playersList.filter((player) => player.team[currentRound - 1] === 'W'),\n      losers: playersList.filter((player) => player.team[currentRound - 1] === 'L'),\n    };\n  }, [players, currentRound]);\n\n  return (\n    <div className=\"club-line\">\n      <div className=\"club-line__background\"></div>\n      <div className=\"club-line__clubbers\">\n        <div className=\"club-line__area\">\n          {winners.map((player) => (\n            <Tooltip title={player.name} key={`${player.id}-${player.clubberId}`}>\n              <ClubberAvatar\n                id={player.avatarId}\n                clubberId={player.clubberId}\n                className=\"club-line__player\"\n                animate\n              />\n            </Tooltip>\n          ))}\n        </div>\n        <VIPLineIcon className=\"club-line__vip-icon\" />\n        <div className=\"club-line__area\">\n          {losers.map((player) => (\n            <Tooltip title={player.name} key={`${player.id}-${player.clubberId}`}>\n              <ClubberAvatar\n                key={`${player.id}-${player.clubberId}`}\n                id={player.avatarId}\n                clubberId={player.clubberId}\n                className=\"club-line__player club-line__player--trash\"\n              />\n            </Tooltip>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { getRandomItem } from 'utils/helpers';\n\nconst clues = ['agua', 'bola', 'coco', 'dedo', 'egua', 'flauta', 'gatilho', 'hélio', 'jaguar'];\n\nexport const mockClue = (): string => {\n  return getRandomItem(clues);\n};\n","import { mockClue } from 'mock/clues';\nimport { mockDrawing } from 'mock/drawing';\nimport { getRandomItem } from 'utils/helpers';\n\nexport function mockSeeding(seeds: SeedEntry[]) {\n  const data: PlainObject = {};\n  seeds.forEach((seed) => {\n    switch (seed.type) {\n      case 'arte-ruim':\n        data[seed.card.id] = JSON.stringify(mockDrawing());\n        break;\n      case 'caminhos-magicos':\n        const ids = getIds(seed.cards);\n        data[seed.portal.id] = getRandomItem(ids);\n        break;\n      case 'fileira-de-fatos':\n        data.fact = Math.round(Math.random() * 100);\n        break;\n      case 'onda-telepatica':\n        data.wave = mockClue();\n        break;\n      case 'polemica-da-vez':\n        data.likeTopic = getRandomItem([true, false]);\n        break;\n      case 'retrato-falado':\n        data[seed.card.id] = JSON.stringify(mockDrawing());\n        break;\n      case 'clubber':\n        data.clubberId = seed.outfits[0];\n        break;\n      default:\n        return {};\n    }\n  });\n\n  return data;\n}\n\nexport function mockSelection(options: unknown[], propertyName?: string) {\n  const random = getRandomItem(options) as PlainObject;\n  return propertyName ? random[propertyName] : random;\n}\n\nexport function mockText() {\n  return getRandomItem(['bola', 'bolas', 'prata', 'prato', 'pirulito', 'domingo']);\n}\n\nexport function getIds(list: PlainObject[]) {\n  return list.map((entry) => entry.id);\n}\n","// Utils\nimport { INSTRUCTIONS } from '../utils/constants';\n// Components\nimport { Title } from 'components/text';\nimport { useLanguage } from 'hooks/useLanguage';\n\ntype MinigameTitleProps = {\n  round: GameRound;\n  task: Task;\n};\n\nexport function MinigameTitle({ round, task }: MinigameTitleProps) {\n  const { dualTranslate } = useLanguage();\n  return (\n    <Title size=\"small\">\n      <span className=\"minigame-title__number\">Minigame {round.current}</span>\n      <br />\n      {dualTranslate(INSTRUCTIONS[task.game])}\n    </Title>\n  );\n}\n","// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getColorFromIndex } from 'utils/helpers';\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { CanvasSVG } from 'components/canvas';\nimport { TransparentButton } from 'components/buttons';\n\nexport const TaskArteRuim = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const cardWidth = useCardWidth(5, 32, 250, 270);\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    if (task.variant === 'cards') {\n      onSelect(mockSelection(task.data.cards, 'id'));\n    }\n\n    if (task.variant === 'drawings') {\n      onSelect(mockSelection(task.data.options, 'playerId'));\n    }\n  });\n\n  if (task.variant === 'cards') {\n    return (\n      <>\n        <MinigameTitle round={round} task={task} />\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Dentre as cartas abaixo, qual melhor descreve essa linda ilustração?\n                <br />\n                Foi você quem desenhou? Lembre-se que a resposta correta não é importante, e sim o que a\n                maioria escolher.\n              </>\n            }\n            en={\n              <>\n                Among the cards below, which one best describes the beautiful illustration?\n                <br />\n                <em>\n                  Is that your drawing? Remember that the correct answer is not important, but what the\n                  majority will choose.\n                </em>\n              </>\n            }\n          />\n        </Instruction>\n\n        <Space className=\"space-container\">\n          <CanvasSVG drawing={task.data.option.drawing} width={cardWidth} className=\"a-drawing\" />\n        </Space>\n\n        <Space className=\"space-container\">\n          {task.data.cards.map((card: TextCard, index: number) => (\n            <TransparentButton\n              key={card.id}\n              disabled={isLoading || user.ready}\n              onClick={() =>\n                onSubmitTask({\n                  data: { value: card.id },\n                })\n              }\n            >\n              <Card header={LETTERS[index]} color={getColorFromIndex(index)}>\n                {card.text}\n              </Card>\n            </TransparentButton>\n          ))}\n        </Space>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Dentre as ilustrações abaixo, qual melhor descreve a carta?\n              <br />\n              Foi você quem desenhou? Lembre-se que a resposta correta não é importante, e sim o que a maioria\n              escolher.\n            </>\n          }\n          en={\n            <>\n              Among the illustrations below, which one best fits the card?\n              <br />\n              <em>\n                Is that your drawing? Remember that the correct answer is not important, but what the majority\n                will choose.\n              </em>\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <Card header=\"A\" color={getColorFromIndex(0)}>\n          {task.data.cards[1].text}\n        </Card>\n      </Space>\n\n      <div className=\"a-drawings\">\n        {task.data.options.map((entry: PlainObject) => (\n          <div className=\"a-drawings__entry\">\n            <CanvasSVG drawing={entry.drawing} width={cardWidth} className=\"a-drawing\" />\n\n            <Space className=\"space-container\">\n              <Button\n                shape=\"round\"\n                type=\"primary\"\n                disabled={user.ready}\n                loading={isLoading}\n                onClick={() => onSelect(entry.playerId)}\n              >\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            </Space>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import { Fragment } from 'react';\n// AntDesign Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, TextHighlight } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { TransparentButton } from 'components/buttons';\nimport { TreeOneIcon } from 'icons/TreeOneIcon';\nimport { TreeTwoIcon } from 'icons/TreeTwoIcon';\nimport { TreeThreeIcon } from 'icons/TreeThreeIcon';\nimport { MapIcon } from 'icons/MapIcon';\nimport { RightSquareOutlined } from '@ant-design/icons';\n\nexport const TaskCaminhosMagicos = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: number) => {\n    onSubmitTask({\n      data: { value: String(value) },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection([0, 1, 2]));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Para atravessar a floresta, você precisa passar por essas 3 árvores.\n              <br />\n              Com mapa feito de adjetivos (que útil), qual rota você selecionaria ir da{' '}\n              <TextHighlight>{task.data.portals[0].text}</TextHighlight> ao{' '}\n              <TextHighlight>{task.data.portals[2].text}</TextHighlight>?\n            </>\n          }\n          en={\n            <>\n              To cross the woods, you need to pass by 3 trees.\n              <br />\n              With a map made of adjectives (wow, so useful), what route would to select to go from{' '}\n              <TextHighlight>{task.data.portals[0].text}</TextHighlight> to{' '}\n              <TextHighlight>{task.data.portals[2].text}</TextHighlight>?\n            </>\n          }\n        />\n      </Instruction>\n\n      <div className=\"cm-trees\">\n        <div className=\"cm-trees__tree\">\n          <IconAvatar icon={<TreeOneIcon />} size={84} />\n          <div className=\"cm-trees__text\">{task.data.portals[0].text}</div>\n        </div>\n\n        <div className=\"cm-trees__tree\">\n          <IconAvatar icon={<TreeTwoIcon />} size={84} />\n          <div className=\"cm-trees__text\">{task.data.portals[1].text}</div>\n        </div>\n\n        <div className=\"cm-trees__tree\">\n          <IconAvatar icon={<TreeThreeIcon />} size={84} />\n          <div className=\"cm-trees__text\">{task.data.portals[2].text}</div>\n        </div>\n      </div>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <TransparentButton\n          className=\"cm-clues__clue\"\n          disabled={user.ready || isLoading}\n          onClick={() => onSelect(0)}\n        >\n          {'A'}\n          <IconAvatar icon={<MapIcon />} size={48} />\n          {Object.values<PlainObject>(task.data.options[0]).map((option, index, arr) => {\n            return (\n              <Fragment key={`${option.playerId}-${index}`}>\n                <span className=\"cm-clues__clue-text\">{option.text}</span>\n                {arr.length - 1 > index && <RightSquareOutlined />}\n              </Fragment>\n            );\n          })}\n        </TransparentButton>\n        <TransparentButton\n          className=\"cm-clues__clue\"\n          disabled={user.ready || isLoading}\n          onClick={() => onSelect(1)}\n        >\n          {'B'}\n          <IconAvatar icon={<MapIcon />} size={48} />\n          {Object.values<PlainObject>(task.data.options[1]).map((option, index, arr) => {\n            return (\n              <Fragment key={`${option.playerId}-${index}`}>\n                <span className=\"cm-clues__clue-text\">{option.text}</span>\n                {arr.length - 1 > index && <RightSquareOutlined />}\n              </Fragment>\n            );\n          })}\n        </TransparentButton>\n        <TransparentButton\n          className=\"cm-clues__clue\"\n          disabled={user.ready || isLoading}\n          onClick={() => onSelect(2)}\n        >\n          {'C'}\n          <IconAvatar icon={<MapIcon />} size={48} />\n          {Object.values<PlainObject>(task.data.options[2]).map((option, index, arr) => {\n            return (\n              <Fragment key={`${option.playerId}-${index}`}>\n                <span className=\"cm-clues__clue-text\">{option.text}</span>\n                {arr.length - 1 > index && <RightSquareOutlined />}\n              </Fragment>\n            );\n          })}\n        </TransparentButton>\n      </Space>\n    </>\n  );\n};\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockText } from '../utils/mock';\n// Components\nimport { ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { BookPages } from 'games/contadores-historias/components/BookPages';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskContadoresHistorias = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { isLoading } = useLoading();\n  const [clue, setClue] = useState('');\n\n  const onSubmitClue = () => {\n    if (clue.length > 1) {\n      onSubmitTask({\n        data: { value: clue },\n      });\n    }\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockText() },\n    });\n  });\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n\n      <BookPages\n        leftPage={\n          <ImageBlurButtonContainer cardId={task.data.cardId}>\n            <ImageCard imageId={task.data.cardId} cardWidth={150} />\n          </ImageBlurButtonContainer>\n        }\n        rightPage={\n          <div>\n            <Instruction contained>\n              <Translate\n                pt={\n                  <>\n                    Escreva uma história para essa página do livro.\n                    <br />\n                    Seja bem óbvio e palavras únicas têm mais chances de dar match.\n                  </>\n                }\n                en={\n                  <>\n                    Write a clue about this page of the book.\n                    <br />\n                    Be obvious and single-word clues have more chances of matching other players\n                  </>\n                }\n              />\n            </Instruction>\n            <Input\n              onChange={(e) => setClue(e.target.value)}\n              onPressEnter={onSubmitClue}\n              className=\"c-input\"\n            />\n          </div>\n        }\n      />\n\n      <Button\n        shape=\"round\"\n        type=\"primary\"\n        disabled={user.ready || clue.length < 2}\n        loading={isLoading}\n        onClick={onSubmitClue}\n      >\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n    </>\n  );\n};\n","import clsx from 'clsx';\n// AntDesign Resources\nimport { Button, Popover, Tag } from 'antd';\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskCrimesHediondos = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const cardWidth = useCardWidth(12, 32, 100, 130);\n  const { dualTranslate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockSelection(task.data.cards, 'id') },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              O médico legista examinou o crime e chegou às conclusões abaixo.\n              <br />\n              Selecione qual {task.variant === 'weapon' ? 'armas' : 'evidencias'} você acha que foi usada no\n              crime.\n            </>\n          }\n          en={\n            <>\n              The forensic scientist examined the body and came to those conclusions below.\n              <br />\n              Select the one {task.variant} you think took part in the crime.\n            </>\n          }\n        />\n      </Instruction>\n\n      <ul className=\"h-table\">\n        {Boolean(task.data.scenes.causeOfDeath) && (\n          <SceneTile tile={task.data.scenes.causeOfDeath} index={task.data.crimeIndexes.causeOfDeath} />\n        )}\n        {Boolean(task.data.scenes.reasonForEvidence) && (\n          <SceneTile\n            tile={task.data.scenes.reasonForEvidence}\n            index={task.data.crimeIndexes.reasonForEvidence}\n          />\n        )}\n\n        <SceneTile tile={task.data.scenes.location} index={task.data.crimeIndexes.location} />\n        <SceneTile tile={task.data.scenes.sceneA} index={task.data.crimeIndexes.sceneA} />\n        <SceneTile tile={task.data.scenes.sceneB} index={task.data.crimeIndexes.sceneB} />\n        <SceneTile tile={task.data.scenes.sceneC} index={task.data.crimeIndexes.sceneC} />\n      </ul>\n\n      <ul className=\"h-cards\">\n        {task.data.cards.map((card: HCard) => {\n          return (\n            <li\n              className={clsx('h-item-card', user?.data?.value === card.id && 'h-item-card--selected')}\n              key={card.id}\n            >\n              <Popover content={dualTranslate(card.name).toUpperCase()}>\n                <Tag\n                  className=\"h-item-card__name\"\n                  color={card.type === 'weapon' ? 'geekblue' : 'volcano'}\n                  style={{ maxWidth: `${cardWidth + 16}px` }}\n                >\n                  <span>\n                    <DualTranslate>{card.name}</DualTranslate>\n                  </span>\n                </Tag>\n              </Popover>\n              <ImageCard imageId={card.id} cardWidth={cardWidth} className=\"h-item-card__image\" />\n              <Button\n                shape=\"round\"\n                type=\"primary\"\n                disabled={user.ready}\n                loading={isLoading}\n                onClick={() =>\n                  onSubmitTask({\n                    data: { value: card.id },\n                  })\n                }\n              >\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\ntype SceneTileProps = {\n  tile: SceneTile;\n  index: number;\n};\n\nfunction SceneTile({ tile, index }: SceneTileProps) {\n  const { dualTranslate } = useLanguage();\n  return (\n    <li className={clsx('h-scene-tile', `h-scene-tile--${tile.type}`)}>\n      <Popover content={dualTranslate(tile.description)}>\n        <h4 className=\"h-scene-tile__title\">{dualTranslate(tile.title)}</h4>\n      </Popover>\n      <ul className=\"h-scene-tile__options\">\n        {tile.values.map((entry, i) => {\n          const isActive = i === index;\n          return (\n            <li\n              key={`${tile.id}-value-${i}`}\n              className={clsx(\n                'h-scene-tile__item',\n                `h-scene-tile__item--${tile.type}`,\n                isActive && 'h-scene-tile__item--active'\n              )}\n            >\n              {isActive && <CheckCircleFilled className=\"h-scene-tile__icon\" />}\n              {dualTranslate(entry)}\n            </li>\n          );\n        })}\n      </ul>\n    </li>\n  );\n}\n","// Sass\nimport clsx from 'clsx';\nimport { ReactNode } from 'react';\nimport './SpreadsheetGrid.scss';\n\ntype SpreadsheetGridProps = {\n  /**\n   * Number of columns\n   */\n  columns: number;\n  /**\n   * Number of rows\n   */\n  rows: number;\n  /**\n   * Add the blank top left corner cell\n   */\n  topLeftCorner?: boolean;\n  /**\n   * Content of the grid, usually SpreadsheetCell components\n   */\n  children?: ReactNode;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\nexport function SpreadsheetGrid({ columns, rows, topLeftCorner, children, className }: SpreadsheetGridProps) {\n  return (\n    <div\n      className={clsx('spreadsheet-grid', className)}\n      style={{ gridTemplateColumns: `repeat(${columns}, 1fr)`, gridTemplateRows: `repeat(${rows}, auto)` }}\n      role=\"table\"\n    >\n      {topLeftCorner && <SpreadsheetCell header></SpreadsheetCell>}\n      {children}\n    </div>\n  );\n}\n\ntype SpreadsheetCellProps = {\n  /**\n   * The content of the Cell\n   */\n  children?: ReactNode;\n  /**\n   * Style cell as header\n   */\n  header?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\nexport function SpreadsheetCell({ children, header, className }: SpreadsheetCellProps) {\n  return (\n    <span className={clsx('spreadsheet-cell', header && 'spreadsheet-cell--header', className)} role=\"cell\">\n      {children}\n    </span>\n  );\n}\n","// AntDesign Resources\nimport { Button, ButtonProps, Space } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n// Hooks\nimport { useMock } from 'hooks/useMock';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { SpreadsheetCell, SpreadsheetGrid } from 'components/general/SpreadsheetGrid';\n\nexport const TaskCruzaPalavras = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onSelect = (position: number) => {\n    onSubmitTask({\n      data: { value: String(position) },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection([0, 1, 2, 3]));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Alguém escreveu a dica péssima abaixo, e agora? Aonde ela se encaixa na grade?\n              <br />\n              Clique na célula apropriada!\n            </>\n          }\n          en={\n            <>\n              Someone wrote this terrible clue below, where does it fit in the grid? Click the appropriate\n              grid cell!\n            </>\n          }\n        />\n      </Instruction>\n\n      <Card header={translate('Dica', 'Clue')} color=\"red\">\n        <Avatar id=\"A\" /> {task.data.clue.text}\n      </Card>\n\n      <Space className=\"space-container\">\n        <SpreadsheetGrid columns={3} rows={3} topLeftCorner>\n          <SpreadsheetCell header>{task.data.cards[0].text}</SpreadsheetCell>\n          <SpreadsheetCell header>{task.data.cards[1].text}</SpreadsheetCell>\n          <SpreadsheetCell header>{task.data.cards[2].text}</SpreadsheetCell>\n          <SpreadsheetCell>\n            <CellPlusButton onClick={() => onSelect(0)} disabled={user.ready} loading={isLoading} />\n          </SpreadsheetCell>\n          <SpreadsheetCell>\n            <CellPlusButton onClick={() => onSelect(1)} disabled={user.ready} loading={isLoading} />\n          </SpreadsheetCell>\n          <SpreadsheetCell header>{task.data.cards[3].text}</SpreadsheetCell>\n          <SpreadsheetCell>\n            <CellPlusButton onClick={() => onSelect(2)} disabled={user.ready} loading={isLoading} />\n          </SpreadsheetCell>\n          <SpreadsheetCell>\n            <CellPlusButton onClick={() => onSelect(3)} disabled={user.ready} loading={isLoading} />\n          </SpreadsheetCell>\n        </SpreadsheetGrid>\n      </Space>\n    </>\n  );\n};\n\nfunction CellPlusButton({ onClick, loading, ...rest }: ButtonProps) {\n  return (\n    <Button onClick={onClick} shape=\"circle\" loading={loading} {...rest}>\n      {!loading && <PlusCircleFilled />}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// AntDesign Resources\nimport { Button, Image, Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { AVATARS, BOTS_LIST } from 'utils/avatars';\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskDetetivesImaginativos = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const cardWidth = useCardWidth(7, 32, 200, 270);\n  const { language } = useLanguage();\n  const { isLoading } = useLoading();\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockSelection(task.data.cards) },\n    });\n  });\n\n  if (task.variant === 'impostor') {\n    return (\n      <>\n        <MinigameTitle round={round} task={task} />\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Você é o impostor e não sabe a palavra-secreta. Os outros jogadores escolheram as cartas\n                abaixo que supostamente combinam com a palavra-secreta.\n              </>\n            }\n            en={\n              <>\n                You are the impostor and don't know the secret clue. The other players played the cards below\n                and they all supposed to match the secret clue.\n              </>\n            }\n          />\n        </Instruction>\n\n        <Image.PreviewGroup>\n          <ul className=\"d-table\">\n            {task.data.table.map((cardId: ImageCardId, index: number) => {\n              const bot = BOTS_LIST[index];\n              return (\n                <div className=\"d-table__player-entry\" key={`table-focus-${cardId}`}>\n                  <ImageBlurButtonContainer\n                    cardId={cardId}\n                    className={clsx(\n                      'd-table__card',\n                      user?.data?.value === cardId && 'd-table__card--selected'\n                    )}\n                  >\n                    <ImageCard\n                      key={`table-focus-${cardId}`}\n                      imageId={cardId}\n                      cardWidth={cardWidth * 0.6}\n                      className=\"d-table__image-card\"\n                    />\n                  </ImageBlurButtonContainer>\n\n                  <div className=\"d-table__player-info\">\n                    <Avatar id={bot.avatarId} className=\"d-table__player-avatar\" size=\"default\" />\n                    <span\n                      className=\"d-table__player-bar\"\n                      style={{ backgroundColor: AVATARS[bot.avatarId].color }}\n                    />\n                    <span className=\"d-table__player-name\">\n                      {bot.name}, {AVATARS[bot.avatarId].description[language]}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          </ul>\n        </Image.PreviewGroup>\n\n        <Instruction contained>\n          <Translate\n            pt={<>Qual das suas cartas você usaria para passar despercebido?</>}\n            en={<>Which card in your hand would play so you can blend in with the others?</>}\n          />\n        </Instruction>\n\n        <Image.PreviewGroup>\n          <Space className=\"space-container\">\n            {task.data.cards.map((cardId: ImageCardId) => {\n              return (\n                <div className=\"d-table__player-entry\" key={`table-focus-${cardId}`}>\n                  <ImageBlurButtonContainer\n                    cardId={cardId}\n                    className={clsx(\n                      'd-table__card',\n                      user?.data?.value === cardId && 'd-table__card--selected'\n                    )}\n                  >\n                    <ImageCard\n                      key={`table-focus-${cardId}`}\n                      imageId={cardId}\n                      cardWidth={cardWidth * 0.75}\n                      className=\"d-table__image-card\"\n                    />\n                  </ImageBlurButtonContainer>\n\n                  <Space className=\"space-container\">\n                    <Button\n                      shape=\"round\"\n                      type=\"primary\"\n                      disabled={user.ready}\n                      loading={isLoading}\n                      onClick={() =>\n                        onSubmitTask({\n                          data: { value: cardId },\n                        })\n                      }\n                    >\n                      <Translate pt=\"Selecionar\" en=\"Select\" />\n                    </Button>\n                  </Space>\n                </div>\n              );\n            })}\n          </Space>\n        </Image.PreviewGroup>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Dentre as cartas abaixo, uma delas é do impostor! Você sabe qual é?\n              <br />\n              Selecione a carta que você acha <strong>NÃO</strong> combina com as outras duas.\n            </>\n          }\n          en={\n            <>\n              Among the cards below, one belongs to the impostor! Do you know which one?\n              <br />\n              Select the card that does <strong>NOT</strong> match the others.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Image.PreviewGroup>\n        <ul className=\"d-table\">\n          {task.data.cards.map((cardId: ImageCardId, index: number) => {\n            const bot = BOTS_LIST[index];\n            return (\n              <div className=\"d-table__player-entry\" key={`table-focus-${cardId}`}>\n                <ImageBlurButtonContainer\n                  cardId={cardId}\n                  className={clsx('d-table__card', user?.data?.value === cardId && 'd-table__card--selected')}\n                >\n                  <ImageCard\n                    key={`table-focus-${cardId}`}\n                    imageId={cardId}\n                    cardWidth={cardWidth}\n                    className=\"d-table__image-card\"\n                  />\n                </ImageBlurButtonContainer>\n\n                <div className=\"d-table__player-info\">\n                  <Avatar id={bot.avatarId} className=\"d-table__player-avatar\" size=\"default\" />\n                  <span\n                    className=\"d-table__player-bar\"\n                    style={{ backgroundColor: AVATARS[bot.avatarId].color }}\n                  />\n                  <span className=\"d-table__player-name\">\n                    {bot.name}, {AVATARS[bot.avatarId].description[language]}\n                  </span>\n                </div>\n                <Space className=\"space-container\">\n                  <Button\n                    shape=\"round\"\n                    type=\"primary\"\n                    disabled={user.ready}\n                    loading={isLoading}\n                    onClick={() =>\n                      onSubmitTask({\n                        data: { value: cardId },\n                      })\n                    }\n                  >\n                    <Translate pt=\"Esse é o impostor\" en=\"This is the impostor\" />\n                  </Button>\n                </Space>\n              </div>\n            );\n          })}\n        </ul>\n      </Image.PreviewGroup>\n    </>\n  );\n};\n","// AntDesign Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { SkiingIcon } from 'icons/SkiingIcon';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { TransparentButton } from 'components/buttons';\nimport { SnowHillIcon } from 'icons/SnowHillIcon';\n\nexport const TaskDilemaDosEsquiadores = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection([task.data.dilemma.left, task.data.dilemma.right]));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você tem os pensamentos mais filosóficos quando você está esquiando ladeira abaixo.\n              <br />\n              Selecione a opção apropriada para a questão séria:\n            </>\n          }\n          en={\n            <>\n              You have the most philosophical shower thoughts while skiing\n              <br />\n              Select the best option below:\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <div className=\"dd-animated-skiier\">\n          <IconAvatar icon={<SkiingIcon />} size={84} />\n        </div>\n        <Card header={translate('Dica', 'Clue')} color=\"red\">\n          {task.data.dilemma.prompt}\n        </Card>\n\n        <Space className=\"space-container\">\n          <div className=\"dd-buttons\">\n            <TransparentButton\n              onClick={() => onSelect(task.data.dilemma.left)}\n              disabled={user.ready || isLoading}\n              className=\"dd-button\"\n            >\n              <span className=\"dd-button__hill dd-button__hill--left\">\n                <IconAvatar icon={<SnowHillIcon />} size={64} />\n              </span>\n              <span className=\"dd-button__text\">{task.data.dilemma.left}</span>\n            </TransparentButton>\n            <TransparentButton\n              onClick={() => onSelect(task.data.dilemma.right)}\n              disabled={user.ready || isLoading}\n              className=\"dd-button\"\n            >\n              <span className=\"dd-button__hill\">\n                <IconAvatar icon={<SnowHillIcon />} size={64} />\n              </span>\n              <span className=\"dd-button__text\">{task.data.dilemma.right}</span>\n            </TransparentButton>\n          </div>\n        </Space>\n      </Space>\n    </>\n  );\n};\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockText } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction, TextHighlight } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskEspiaoEntreNos = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [answer, setAnswer] = useState('');\n\n  const onSubmitAnswer = () => {\n    if (answer.length > 1) {\n      onSubmitTask({\n        data: { value: answer },\n      });\n    }\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockText() },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você está em um(a) <TextHighlight>{task.data.location.name}</TextHighlight>. Você é um(a){' '}\n              <TextHighlight>{task.data.location.roles[task.data.roleIndex]}</TextHighlight>.<br />\n              Agora, responda à pergunta abaixo com uma resposta simples.\n            </>\n          }\n          en={\n            <>\n              You are at/in/on a <TextHighlight>{task.data.location.name}</TextHighlight>. You are a{' '}\n              <TextHighlight>{task.data.location.roles[task.data.roleIndex]}</TextHighlight>.<br />\n              Now, simply answer the following question.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <Card>{task.data.question}</Card>\n      </Space>\n\n      <Instruction contained>\n        <Translate\n          pt={<>Responda à pergunta abaixo com uma resposta simples.</>}\n          en={<>Answer the prompt below with a simple answer.</>}\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <Input\n          onChange={(e) => setAnswer(e.target.value)}\n          placeholder={translate('Escreva aqui', 'Answer here')}\n          onPressEnter={onSubmitAnswer}\n          disabled={isLoading || user.ready}\n        />\n        <Button\n          shape=\"round\"\n          type=\"primary\"\n          disabled={user.ready || answer.length < 2}\n          loading={isLoading}\n          onClick={onSubmitAnswer}\n        >\n          <Translate pt=\"Selecionar\" en=\"Select\" />\n        </Button>\n      </Space>\n    </>\n  );\n};\n","import { ReactNode } from 'react';\n// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { getAvatarColorById } from 'utils/helpers';\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nfunction getRevealedEntry(options: PlainObject[], playerId: PlayerId) {\n  const index = options.findIndex((option) => option.playerId === playerId);\n  return index > -1 ? index : 2;\n}\n\nexport const TaskFileiraDeFatos = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const revealedIndex = getRevealedEntry(task.data.options, user.id);\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockSelection(['before', 'after']) },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n\n      <Space className=\"space-container\">\n        <Card header={translate('Pergunta', 'Question')}>{task.data.card.question}</Card>\n      </Space>\n\n      <Instruction contained>\n        <Translate\n          pt={<>Temos duas respostas numéricas em ordem crescente para a pergunta acima.</>}\n          en={<>We have two secretly sorted numbered answers for the question above.</>}\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <Chevron\n          player={players[task.data.options[0].playerId]}\n          value={task.data.options[0].value}\n          reveal={revealedIndex === 0}\n        />\n        <Chevron\n          player={players[task.data.options[1].playerId]}\n          value={task.data.options[1].value}\n          reveal={revealedIndex === 1}\n        />\n      </Space>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              A resposta abaixo vai <strong>antes</strong> ou <strong>depois</strong> das duas acima? <br />\n              <em>(Para te ajudar um pouco, revelamos o valor de um dos números)</em>\n            </>\n          }\n          en={\n            <>\n              Does the answer below goes <strong>before</strong> or <strong>after</strong> the two players?\n              <br />\n              <em>(To help out a bit, we revealed the value of one if the chevrons)</em>\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <Chevron\n          player={players[task.data.options[2].playerId]}\n          value={task.data.options[2].value}\n          reveal={revealedIndex === 2}\n        />\n      </Space>\n\n      <Space className=\"space-container\">\n        <Button\n          shape=\"round\"\n          type=\"primary\"\n          disabled={user.ready}\n          loading={isLoading}\n          onClick={() =>\n            onSubmitTask({\n              data: { value: 'before' },\n            })\n          }\n        >\n          <Translate pt=\"Antes\" en=\"Before\" />\n        </Button>\n        <Button\n          shape=\"round\"\n          type=\"primary\"\n          disabled={user.ready}\n          loading={isLoading}\n          onClick={() =>\n            onSubmitTask({\n              data: { value: 'after' },\n            })\n          }\n        >\n          <Translate pt=\"Depois\" en=\"After\" />\n        </Button>\n      </Space>\n    </>\n  );\n};\n\ntype ChevronProps = {\n  player: GamePlayer;\n  value: number;\n  reveal?: boolean;\n};\n\nexport function Chevron({ player, value, reveal }: ChevronProps) {\n  const color = getAvatarColorById(player.avatarId);\n  return (\n    <div className=\"ff-chevron\">\n      <ChevronImage color={color}>\n        <span className=\"ff-chevron__value\">{reveal ? value : '?'}</span>\n      </ChevronImage>\n      <div className=\"ff-chevron__name\">{player.name}</div>\n    </div>\n  );\n}\n\ntype ChevronImageProps = {\n  children: ReactNode;\n  color: string;\n};\n\nfunction ChevronImage({ children, color }: ChevronImageProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n      <path\n        fill={color}\n        d=\"M115.8 461.5L244 501.56a8.52 8.52 0 009.8-3.65L400.91 260.5a8.58 8.58 0 000-9L253.82 14.09a8.54 8.54 0 00-9.8-3.66L115.8 50.5a8.54 8.54 0 00-4.89 12.35l106.7 189a8.55 8.55 0 010 8.4l-106.7 189a8.54 8.54 0 004.89 12.35\"\n      ></path>\n      <path\n        fill=\"#000000\"\n        opacity=\"0.5\"\n        d=\"M142.94 101.4l133.68-41.56a8.53 8.53 0 015.69.22l-28.49-46a8.51 8.51 0 00-9.8-3.65L115.8 50.5a8.54 8.54 0 00-4.89 12.35L137 109a8.52 8.52 0 016-7.6\"\n      ></path>\n      <path\n        fill=\"#000000\"\n        d=\"M246.57 512a18.66 18.66 0 01-5.55-.85L112.8 471.08a18.58 18.58 0 01-10.64-26.87l37.25-66a10 10 0 1117.49 9.88l-36.33 64.33 125.33 39.21L391.88 256 245.9 20.37 120.57 59.54l105.79 187.32a18.71 18.71 0 010 18.28l-40.26 71.29a10 10 0 01-17.49-9.88L208.45 256 102.16 67.79a18.58 18.58 0 0110.64-26.87L241 .85a18.58 18.58 0 0121.34 8l147.1 237.36a18.49 18.49 0 010 19.58L262.36 503.2a18.58 18.58 0 01-15.79 8.8z\"\n      ></path>\n      <foreignObject x=\"241.18\" y=\"219.18\" width=\"121.5\" height=\"65.89\">\n        {children}\n      </foreignObject>\n    </svg>\n  );\n}\n","// AntDesign Resources\nimport { Button, Image, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { Card, ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\n\nexport const TaskGaleriaDeSonhos = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const cardWidth = useCardWidth(8, 8, 150, 350, 8);\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.cards));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Com o tema abaixo, qual <CardHighlight>carta-sonho</CardHighlight> é a mais provável dos outros\n              jogadores também visitarem?\n            </>\n          }\n          en={\n            <>\n              With the theme below, what is the <CardHighlight>Dream Card</CardHighlight> most likely to be\n              visited by other players?\n            </>\n          }\n        />\n      </Instruction>\n\n      <Card header={translate('Tema', 'Theme')} color=\"orange\">\n        {task.data.theme.text}\n      </Card>\n\n      <Image.PreviewGroup>\n        <Space className=\"space-container\">\n          {task.data.cards.map((cardId: ImageCardId) => {\n            return (\n              <Space className=\"space-container\" direction=\"vertical\">\n                <ImageBlurButtonContainer cardId={cardId}>\n                  <ImageCard imageId={cardId} cardWidth={cardWidth} />\n                </ImageBlurButtonContainer>\n                <Button\n                  shape=\"round\"\n                  type=\"primary\"\n                  disabled={user.ready}\n                  loading={isLoading}\n                  onClick={() => onSelect(cardId)}\n                >\n                  <Translate pt=\"Selecionar\" en=\"Select\" />\n                </Button>\n              </Space>\n            );\n          })}\n        </Space>\n      </Image.PreviewGroup>\n    </>\n  );\n};\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockText } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskMenteColetiva = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [answer, setAnswer] = useState('');\n\n  const onSubmitAnswer = () => {\n    if (answer.length > 1) {\n      onSubmitTask({\n        data: { value: answer },\n      });\n    }\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockText() },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Responda à pergunta abaixo com uma resposta simples.\n              <br />O objetivo é responder com o grupo e se juntar ao rebanho!\n            </>\n          }\n          en={\n            <>\n              Answer the prompt below with a simple answer.\n              <br />\n              The goal is to give an answer that will match the group so you can join the herd!\n            </>\n          }\n        />\n      </Instruction>\n\n      <Card className=\"m-question-wrapper\">\n        <span className=\"m-question m-question--span\">\n          <span className=\"m-question__prefix\">{task.data.question.prefix}</span>\n          <span className=\"m-question__number\">1</span>\n          <span className=\"m-question__suffix\">{task.data.question.suffix}</span>\n        </span>\n      </Card>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <Input\n          onChange={(e) => setAnswer(e.target.value)}\n          placeholder={translate('Escreva aqui', 'Answer here')}\n          onPressEnter={onSubmitAnswer}\n          disabled={isLoading || user.ready}\n        />\n        <Button\n          shape=\"round\"\n          type=\"primary\"\n          disabled={user.ready || answer.length < 2}\n          loading={isLoading}\n          onClick={onSubmitAnswer}\n        >\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Space>\n    </>\n  );\n};\n","// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskNamoroOuAmizade = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.heads, 'id'));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Dos <strong>3 partidos</strong> abaixo, qual é o melhor?\n            </>\n          }\n          en={\n            <>\n              From <strong>3 candidates</strong> below, which one is the best one?\n            </>\n          }\n        />\n      </Instruction>\n\n      <div className=\"noa-candidates\">\n        {task.data.heads.map((head: DatingCandidateImageCard, index: number) => {\n          return (\n            <Space className=\"space-container\" direction=\"vertical\">\n              <Candidate\n                head={head}\n                body={task.data.bodies[index]}\n                interest={task.data.interests[index]}\n                need={task.data.needs[index]}\n                funFact={task.data.funFacts[index]}\n              />\n              <Button\n                onClick={() => onSelect(head.id)}\n                disabled={user.ready || isLoading}\n                className=\"noa-button\"\n                key={head.id}\n                type=\"primary\"\n                shape=\"round\"\n              >\n                <Translate pt=\"Esse\" en=\"This one\" />\n              </Button>\n            </Space>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\ntype CandidateProps = {\n  head: DatingCandidateImageCard;\n  body: DatingCandidateImageCard;\n  interest: DatingCandidateCard;\n  need: DatingCandidateCard;\n  funFact: DatingCandidateCard;\n};\n\nexport const Candidate = ({ head, body, interest, need, funFact }: CandidateProps) => {\n  return (\n    <div className=\"noa-candidate\">\n      <div className=\"noa-candidate__image\">\n        <div className=\"noa-candidate__text\">\n          <DualTranslate>{head.name}</DualTranslate>\n        </div>\n        <ImageCard cardWidth={100} imageId={head.id} />\n        <ImageCard cardWidth={100} imageId={body.id} />\n        <div className=\"noa-candidate__text\">\n          <DualTranslate>{body.name}</DualTranslate>\n        </div>\n      </div>\n      <div className=\"noa-candidate__info\">\n        <div className=\"noa-candidate__info-entry\">\n          <div className=\"noa-candidate__info-label\">\n            <Translate pt=\"Curto/Quero\" en=\"I enjoy/wish to\" />\n          </div>\n          {interest.text}\n        </div>\n        <div className=\"noa-candidate__info-entry\">\n          <div className=\"noa-candidate__info-label\">\n            <Translate pt=\"Quero alguém que\" en=\"I want someone who\" />\n          </div>\n          {need.text}\n        </div>\n        <div className=\"noa-candidate__info-entry\">\n          <div className=\"noa-candidate__info-label\">\n            <Translate pt=\"Uma coisa sobre mim\" en=\"Something about me\" />\n          </div>\n          {funFact.text}\n        </div>\n      </div>\n    </div>\n  );\n};\n","// AntDesign Resources\nimport { Avatar, Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { TransparentButton } from 'components/buttons';\nimport { HouseCard } from 'games/na-rua-do-medo/components/HouseCard';\n\nexport const TaskNaRuaDoMedo = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(\n      task.variant === 'kids'\n        ? mockSelection(['0', '1'])\n        : mockSelection(task.data.options.map((h: NCard) => h.id))\n    );\n  });\n\n  if (task.variant === 'kids') {\n    return (\n      <>\n        <MinigameTitle round={round} task={task} />\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Estamos indo de porta em porta buscar doces...\n                <br />\n                Mas qual rua devemos ir? A rua com mais doces? A rua com menos medo?\n              </>\n            }\n            en={\n              <>\n                We're trick-or-treating...\n                <br />\n                Which street should we hit first? The one with more candy? The one with less horror?\n              </>\n            }\n          />\n        </Instruction>\n\n        <Space className=\"space-container\" direction=\"vertical\">\n          <TransparentButton\n            className=\"n-street\"\n            disabled={user.ready || isLoading}\n            onClick={() => onSelect('0')}\n          >\n            <Avatar>A</Avatar>\n            <div className=\"n-street__houses\">\n              {task.data.options['0'].map((house: NCard) => (\n                <HouseCard key={`A-${house.id}`} card={house} candyLeftover={0} preview={false} />\n              ))}\n            </div>\n          </TransparentButton>\n          <TransparentButton\n            className=\"n-street\"\n            disabled={user.ready || isLoading}\n            onClick={() => onSelect('1')}\n          >\n            <Avatar>B</Avatar>\n            <div className=\"n-street__houses\">\n              {task.data.options['1'].map((house: NCard) => (\n                <HouseCard key={`B-${house.id}`} card={house} candyLeftover={0} preview={false} />\n              ))}\n            </div>\n          </TransparentButton>\n        </Space>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você estava tranquilo em casa e <strong>6 crianças</strong> apareceram na sua porta. Qual das\n              opções você escolheria para dar pra eles? Assustar ou guloseimas?\n            </>\n          }\n          en={\n            <>\n              You are hanging out at home and <strong>6 kids</strong> showed up at our door. Which of the\n              options do you choose to give to them? Scare 'em or give treats?\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        {task.data.options.map((house: NCard) => (\n          <Space direction=\"vertical\" key={house.id} className=\"space-container n-street-house\">\n            <HouseCard card={house} candyLeftover={0} preview={false} />\n            <Button\n              shape=\"round\"\n              type=\"primary\"\n              disabled={user.ready || isLoading}\n              onClick={() => onSelect(house.id)}\n              loading={isLoading}\n            >\n              <Translate pt=\"Selecionar\" en=\"Select\" />\n            </Button>\n          </Space>\n        ))}\n      </Space>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport clsx from 'clsx';\n// AntDesign Resources\nimport { ArrowLeftOutlined, ArrowRightOutlined, MinusOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\nimport { getColorModifier } from 'games/onda-telepatica/utils/helpers';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction, TextHighlight } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskOndaTelepatica = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { isLoading } = useLoading();\n  const [position, setPosition] = useState(0);\n\n  const onSelect = (value: string) => {\n    if (!isLoading && !user.ready) {\n      onSubmitTask({\n        data: { value },\n      });\n    }\n  };\n\n  // // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(['left', 'center', 'right']));\n  });\n\n  const cardSideClass = 'o-card__side';\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Com a carta de as duas ideias opostas e a dica abaixo, você acha que o Medidor de Ondas\n              Telepáticas apontaria para a <TextHighlight>Esquerda</TextHighlight>,{' '}\n              <TextHighlight>Centro</TextHighlight> ou <TextHighlight>Direita</TextHighlight>?\n            </>\n          }\n          en={\n            <>\n              With the card of the two opposing ideas and the clue below, do you think the Wavelength\n              Measuring device would point to the <TextHighlight>Left</TextHighlight>,{' '}\n              <TextHighlight>Center</TextHighlight>, or <TextHighlight>Right</TextHighlight>?\n            </>\n          }\n        />\n      </Instruction>\n\n      <Card>{task.data.option.value}</Card>\n\n      <div className=\"o-simple-dial\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 669.93 340\" width=\"40vw\">\n          <path\n            fill=\"#181d44\"\n            d=\"M669.88 329.88a440.53 440.53 0 00-27.31-127.68C591.16 83.26 472.81 0 335 0h-.22C198.2.07 80.75 81.88 28.66 199.16A439.25 439.25 0 000 332a7.67 7.67 0 007.68 8h654.63a7.7 7.7 0 007.21-5 7.78 7.78 0 00.41-1.68l-.05-3.44z\"\n          ></path>\n          <path\n            fill=\"#b8b2a6\"\n            d=\"M119.67 121.48a303.5 303.5 0 00-61.93 91.22 401 401 0 00-25.59 120 7 7 0 00.43 2.75A6.86 6.86 0 0039 340h295.86L181.06 73.61a300.5 300.5 0 00-61.39 47.87z\"\n            className=\"o-simple-dial__clickable\"\n            onClick={() => onSelect('left')}\n            onMouseEnter={() => setPosition(-1)}\n          ></path>\n\n          <path\n            fill=\"#c2acc7\"\n            d=\"M630.39 330.85A402.06 402.06 0 00606 215.46 302.44 302.44 0 00487.05 77L335.19 340h288.44a6.88 6.88 0 006.44-4.52 7.56 7.56 0 00.36-1.51c0-1.04-.02-2.08-.04-3.12z\"\n            className=\"o-simple-dial__clickable\"\n            onClick={() => onSelect('right')}\n            onMouseEnter={() => setPosition(1)}\n          ></path>\n          <path\n            fill=\"#96a6a8\"\n            d=\"M331.32 32.7h-.2a295 295 0 00-150.06 40.91L334.86 340h.33L487.05 77a295 295 0 00-155.73-44.3z\"\n            className=\"o-simple-dial__clickable\"\n            onClick={() => onSelect('center')}\n            onMouseEnter={() => setPosition(0)}\n          ></path>\n\n          <path\n            fill=\"#ff0004\"\n            d=\"M336.46 24.24a1.5 1.5 0 0 0-3 0L326.65 340a1.48 1.48 0 0 0 .45 1.1l6.81 6.73a1.51 1.51 0 0 0 2.11 0l6.81-6.73a1.48 1.48 0 0 0 .45-1.1Z\"\n            className={clsx('o-simple-dial__pointer', `o-simple-dial__pointer--p${position}`)}\n          ></path>\n        </svg>\n      </div>\n\n      <div className={clsx('o-card')}>\n        <div\n          className={clsx(\n            cardSideClass,\n            `${cardSideClass}--left`,\n            `${cardSideClass}--L${getColorModifier(task.data.card.left)}`\n          )}\n        >\n          <span className=\"o-card__arrow\">\n            <ArrowLeftOutlined /> <MinusOutlined /> <MinusOutlined />\n          </span>\n          <span className=\"o-card__text\">{task.data.card.left}</span>\n        </div>\n        <div\n          className={clsx(\n            cardSideClass,\n            `${cardSideClass}--right`,\n            `${cardSideClass}--R${getColorModifier(task.data.card.right)}`\n          )}\n        >\n          <span className=\"o-card__arrow\">\n            <MinusOutlined /> <MinusOutlined /> <ArrowRightOutlined />\n          </span>\n          <span className=\"o-card__text\">{task.data.card.right}</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport function SimpleDial() {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 669.93 340\">\n      <path\n        fill=\"#181d44\"\n        d=\"M669.88 329.88a440.53 440.53 0 00-27.31-127.68C591.16 83.26 472.81 0 335 0h-.22C198.2.07 80.75 81.88 28.66 199.16A439.25 439.25 0 000 332a7.67 7.67 0 007.68 8h654.63a7.7 7.7 0 007.21-5 7.78 7.78 0 00.41-1.68l-.05-3.44z\"\n      ></path>\n      <path\n        fill=\"#b8b2a6\"\n        d=\"M119.67 121.48a303.5 303.5 0 00-61.93 91.22 401 401 0 00-25.59 120 7 7 0 00.43 2.75A6.86 6.86 0 0039 340h295.86L181.06 73.61a300.5 300.5 0 00-61.39 47.87z\"\n      ></path>\n      <path\n        fill=\"#96a6a8\"\n        d=\"M331.32 32.7h-.2a295 295 0 00-150.06 40.91L334.86 340h.33L487.05 77a295 295 0 00-155.73-44.3z\"\n      ></path>\n      <path\n        fill=\"#c2acc7\"\n        d=\"M630.39 330.85A402.06 402.06 0 00606 215.46 302.44 302.44 0 00487.05 77L335.19 340h288.44a6.88 6.88 0 006.44-4.52 7.56 7.56 0 00.36-1.51c0-1.04-.02-2.08-.04-3.12z\"\n      ></path>\n    </svg>\n  );\n}\n","// AntDesign Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { TransparentButton } from 'components/buttons';\n\nexport const TaskPalhetaDeCores = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onSelect = (color: string) => {\n    onSubmitTask({\n      data: { value: color },\n    });\n  };\n\n  // // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.palette));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={<>Selecione a cor que melhor representa o personagem abaixo!</>}\n          en={<>Select the color that best represents the character below!</>}\n        />\n      </Instruction>\n\n      <Card header={translate('Dica', 'Clue')} color=\"red\">\n        {task.data.card.text}\n      </Card>\n\n      <Space className=\"space-container k-palette\" wrap>\n        {task.data.palette.map((color: string) => {\n          return (\n            <TransparentButton\n              onClick={() => onSelect(color)}\n              className=\"k-swatch-button\"\n              disabled={user.read || isLoading}\n            >\n              <SplatterSVG color={color} />\n            </TransparentButton>\n          );\n        })}\n      </Space>\n    </>\n  );\n};\n\ntype SplatterSVGProps = {\n  color: string;\n} & React.SVGProps<SVGSVGElement>;\n\nexport function SplatterSVG({ color, ...rest }: SplatterSVGProps) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 494.11 511.04\" {...rest}>\n      <path\n        fill={color}\n        d=\"M228.54 0h35.93a4.71 4.71 0 001.3.7c27.26 5 48.92 19.17 65.61 41 13.89 18.12 23 38.05 20.86 61.68-.63 6.91-2.09 13.82-2 20.71.12 7.66 6.12 12.85 13.67 11.74a42 42 0 0014.62-5.55c17.16-10 35.31-15.24 55.25-12.26 27.14 4 51.12 26.19 58 53.26 7.35 29-3 59.73-25.55 76.79-14.57 11-31.25 14.29-49 15.54-14.61 1-24.33 10.1-29.58 23.39-5.11 12.92-2.78 24.76 7.31 34.73 4.49 4.44 9 8.85 13.5 13.3 17.49 17.35 28.24 38.14 30.44 62.73 2.4 26.77-5.22 50.77-21.48 72.23-44 58-133.58 54-171.09-8.39-9.08-15.11-15-32.1-22.78-48-3.63-7.38-7.36-15.08-12.73-21.14-12.88-14.54-34-16.34-53.09-6-12.18 6.57-20.6 17.13-29.76 27A73.21 73.21 0 014.9 387.52C2.41 380.4 1.59 372.7 0 365.28v-4c.34-2.26.82-4.52 1-6.8 2.2-27.35 22.3-52.14 48.79-59.39 10.7-2.92 21.71-4.67 32.5-7.28 16.67-4 28.74-17 30.45-32.32 1.95-17.45-6.31-33.26-21.72-41.45-4.4-2.33-8.91-4.44-13.31-6.77-19.58-10.38-28-26.24-24.72-46.46 3.2-19.73 19-33.44 38.86-34.2 10.44-.39 19.85 3.32 29.55 6.12 14.11 4.07 25-.16 22.21-19.54a84 84 0 011-31.1c10.26-42.42 36.89-69.48 79.33-80.57 1.56-.44 3.12-1 4.6-1.52z\"\n      ></path>\n    </svg>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// AntDesign Resources\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\n\ntype SocialProfileProps = {\n  avatarId: string;\n  name: ReactNode;\n  handle: ReactNode;\n  verified?: boolean;\n  className?: string;\n};\n\nexport function SocialProfile({ avatarId, name, handle, verified, className }: SocialProfileProps) {\n  return (\n    <div className={clsx('profile', className)}>\n      <Avatar id={avatarId} size=\"large\" className=\"profile__avatar\" />\n      <span className=\"profile__name\">\n        {name} {verified && <CheckCircleFilled style={{ color: 'dodgerBlue' }} />}\n      </span>\n      <span className=\"profile__handle\">{handle}</span>\n    </div>\n  );\n}\n","// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { SocialProfile } from './SocialProfile';\n\nexport const TaskPolemicaDaVez = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: number) => {\n    onSubmitTask({\n      data: { value: String(value) },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.options));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={<>Observe o tópico abaixo, quantas curtidas você acha que ele ganhou?</>}\n          en={<>How many likes did this trending topic get?</>}\n        />\n      </Instruction>\n\n      <div className=\"tweet\">\n        <SocialProfile avatarId=\"A\" name=\"Bob\" handle=\"@bob\" verified />\n        <span className=\"tweet__text\">{task.data.card.text}</span>\n      </div>\n\n      <Space className=\"space-container\">\n        {task.data.options.map((option: number) => {\n          return (\n            <Button\n              key={`option-${option}`}\n              onClick={() => onSelect(option)}\n              size=\"large\"\n              disabled={isLoading || user.ready}\n              type=\"primary\"\n              shape=\"circle\"\n            >\n              {option}\n            </Button>\n          );\n        })}\n      </Space>\n    </>\n  );\n};\n","// AntDesign Resources\nimport { Button, Image, Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { Book } from 'games/porta-dos-desesperados/components/Book';\nimport { DoorFrame } from 'games/porta-dos-desesperados/components/DoorFrame';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskPortaDosDesesperados = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const doorWidth = useCardWidth(8, 8, 150, 350, 8);\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.doors));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              A pista está nas páginas do livro.\n              <br />\n              Selecione a porta correta que mais se relaciona com o livro.\n            </>\n          }\n          en={\n            <>\n              The clue is in the pages of the book.\n              <br />\n              Select the door that best fits the clue.\n            </>\n          }\n        />\n      </Instruction>\n      <Image.PreviewGroup>\n        <Space className=\"space-container\">\n          {task.data.doors.map((cardId: ImageCardId) => {\n            return (\n              <Space className=\"space-container\" direction=\"vertical\" key={cardId}>\n                <ImageBlurButtonContainer cardId={cardId}>\n                  <DoorFrame width={doorWidth}>\n                    <ImageCard imageId={cardId} cardWidth={150} />\n                  </DoorFrame>\n                </ImageBlurButtonContainer>\n                <Button\n                  shape=\"round\"\n                  type=\"primary\"\n                  disabled={user.ready}\n                  loading={isLoading}\n                  onClick={() => onSelect(cardId)}\n                >\n                  <Translate pt=\"Esse é a saída\" en=\"This is the exit\" />\n                </Button>\n              </Space>\n            );\n          })}\n        </Space>\n      </Image.PreviewGroup>\n\n      <Space className=\"i-book-container\">\n        <Image.PreviewGroup>\n          <Book>\n            <ImageBlurButtonContainer cardId={task.data.book}>\n              <ImageCard imageId={task.data.book[0]} cardWidth={140} />\n            </ImageBlurButtonContainer>\n            <ImageBlurButtonContainer cardId={task.data.book}>\n              <ImageCard imageId={task.data.book?.[1] || task.data.book[0]} cardWidth={140} />\n            </ImageBlurButtonContainer>\n          </Book>\n        </Image.PreviewGroup>\n      </Space>\n    </>\n  );\n};\n","import clsx from 'clsx';\n// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { Avatar } from 'components/avatars';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { ShooterIcon } from 'icons/ShooterIcon';\nimport { sortPlayers } from 'utils/helpers';\n\nexport const TaskQuemNaoMata = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(Object.keys(players)));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Estamos num impasse! O primeiro a se mexer leva bala! Em quem você atira primeiro? (Pode ser\n              você mesmo)\n            </>\n          }\n          en={<>A standoff! Who are you going to shoot first? (It could be yourself)</>}\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" wrap>\n        {sortPlayers(players, 'name').map((player, index, arr) => {\n          return (\n            <div key={player.id} className=\"qnm-shooter\">\n              <IconAvatar\n                icon={<ShooterIcon />}\n                size={48}\n                className={clsx(index >= arr.length / 2 && 'qnm-shooter__reverse')}\n              />\n              <Button\n                icon={<Avatar id={player.avatarId} size=\"small\" />}\n                onClick={() => onSelect(player.id)}\n                type=\"primary\"\n                loading={isLoading}\n                disabled={user.ready}\n              >\n                {player.name}\n              </Button>\n            </div>\n          );\n        })}\n      </Space>\n    </>\n  );\n};\n","// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { CanvasSVG } from 'components/canvas';\nimport { MonsterCard } from 'components/cards/MonsterCard';\n\nexport const TaskRetratoFalado = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const cardWidth = useCardWidth(5, 32, 250, 270);\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.options, 'playerId'));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Dentre as ilustrações abaixo, qual melhor ilustra o mostro?\n              <br />\n              Foi você quem desenhou? Você pode votar em si mesmo se quiser.\n            </>\n          }\n          en={\n            <>\n              Among the illustrations below, which one best illustrates the monster?\n              <br />\n              Is that your drawing? You may vote for yourself if you want.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <MonsterCard currentMonster={task.data.card} showControls cardWidth={250} />\n      </Space>\n\n      <div className=\"a-drawings\">\n        {task.data.options.map((entry: PlainObject) => (\n          <div className=\"a-drawings__entry\" key={entry.playerId}>\n            <CanvasSVG drawing={entry.drawing} width={cardWidth} className=\"a-drawing\" />\n\n            <Space className=\"space-container\">\n              <Button\n                shape=\"round\"\n                type=\"primary\"\n                disabled={user.ready}\n                loading={isLoading}\n                onClick={() => onSelect(entry.playerId)}\n              >\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            </Space>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import clsx from 'clsx';\n// AntDesign Resources\nimport { Button, Image, Space } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { Card, ImageBlurButtonContainer } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './/MinigameTitle';\nimport { mockSelection } from '../utils/mock';\n\nexport const TaskSuperCampeonato = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const cardWidth = useCardWidth(6, 32, 200, 270);\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockSelection(task.data.contenders, 'id') },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={<>É a batalha final, qual desses dois venceria esse desafio?</>}\n          en={<>It's the final showdown, which one of these two would win this challenge?</>}\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <Card header={translate('Desafio', 'Challenge')} color=\"purple\">\n          {task.data.challenge.text}\n        </Card>\n      </Space>\n\n      <Space className=\"space-container center\">\n        {task.data.contenders.map((contender: WContender, index: number) => {\n          return (\n            <Space direction=\"vertical\" key={contender.id}>\n              <ImageBlurButtonContainer cardId={contender.id}>\n                <ContenderCard\n                  size={cardWidth}\n                  overlayColor={index === 0 ? 'red' : 'blue'}\n                  contender={contender}\n                />\n              </ImageBlurButtonContainer>\n              <Button\n                shape=\"round\"\n                type=\"primary\"\n                disabled={user.ready}\n                loading={isLoading}\n                onClick={() =>\n                  onSubmitTask({\n                    data: { value: contender.id },\n                  })\n                }\n              >\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            </Space>\n          );\n        })}\n      </Space>\n    </>\n  );\n};\n\ntype ContenderCardProps = {\n  size: number;\n  overlayColor: string;\n  contender: WContender | WBracket;\n  className?: string;\n  hideName?: boolean;\n};\n\nexport function ContenderCard({ size, overlayColor, contender, className, hideName }: ContenderCardProps) {\n  const { language } = useLanguage();\n  const { shouldBeBlurred } = useBlurCards();\n\n  const isBlurred = shouldBeBlurred(contender.id);\n\n  const imageURL = contender.id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('w-contender', className)} style={{ width: `${size}px` }}>\n      {!hideName && <span className=\"w-contender-name\">{contender.name[language]}</span>}\n      <img\n        src={`${PUBLIC_URL.IN_GAME}/w-overlay-${overlayColor}.png`}\n        className=\"w-contender-overlay\"\n        alt=\"contender\"\n        style={{ width: `${size}px` }}\n      />\n      <Image\n        src={`${process.env.REACT_APP_TDI_IMAGES_URL}${imageURL}.jpg`}\n        width={size}\n        className={clsx('w-contender-image', isBlurred && 'w-contender-image--blur')}\n        fallback={`${PUBLIC_URL.IN_GAME}/w-no-image.jpg`}\n        alt={contender.name[language]}\n      />\n    </div>\n  );\n}\n","// AntDesign Resources\nimport { Button, Image, Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { Card, ImageCard } from 'components/cards';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { SpeechBubbleAcceptedIcon } from 'icons/SpeechBubbleAcceptedIcon';\nimport { SpeechBubbleDeclinedIcon } from 'icons/SpeechBubbleDeclinedIcon';\n\nexport const TaskTestemunhaOcular = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const cardWidth = useCardWidth(8, 8, 150, 350, 8);\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(task.data.suspects, 'id'));\n  });\n\n  if (task.variant === 'suspects') {\n    return (\n      <>\n        <MinigameTitle round={round} task={task} />\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Uma testemunha deu essa resposta ao tentar falar quem era o criminoso à polícia.\n                <br />\n                Qual dos suspeito você acha que é o criminoso?\n              </>\n            }\n            en={\n              <>\n                A witness gave this answer when trying to explain who the perpetrator was to the police.\n                <br />\n                Which one of them is the perpetrator?\n              </>\n            }\n          />\n        </Instruction>\n\n        <Card header={translate('Pergunta', 'Question')} color=\"orange\">\n          {task.data.question.question}\n        </Card>\n\n        <Space className=\"space-container\">\n          {task.data.answer ? (\n            <Translate en=\"YES\" pt=\"SIM\" />\n          ) : (\n            <>\n              <Translate en=\"NO\" pt=\"NÃO\" />\n            </>\n          )}{' '}\n          <IconAvatar\n            size=\"large\"\n            icon={task.data.answer ? <SpeechBubbleAcceptedIcon /> : <SpeechBubbleDeclinedIcon />}\n          />\n        </Space>\n\n        <Image.PreviewGroup>\n          <Space className=\"space-container\">\n            {task.data.suspects.map((suspect: PlainObject) => {\n              return (\n                <Space className=\"space-container\" direction=\"vertical\" key={suspect.id}>\n                  <div className=\"t-suspects-table__suspect\">\n                    <ImageCard\n                      imageId={suspect.id}\n                      className=\"t-suspects-table__suspect-image\"\n                      cardWidth={cardWidth}\n                      preview={false}\n                    />\n                    <div className=\"t-suspects-table__suspect-name\">\n                      <DualTranslate>{suspect.name}</DualTranslate>\n                    </div>\n                  </div>\n\n                  <Button\n                    shape=\"round\"\n                    type=\"primary\"\n                    disabled={user.ready}\n                    loading={isLoading}\n                    onClick={() => onSelect(suspect.id)}\n                  >\n                    <Translate pt=\"Selecionar\" en=\"Select\" />\n                  </Button>\n                </Space>\n              );\n            })}\n          </Space>\n        </Image.PreviewGroup>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você é a testemunha de um crime horrível. O detetive te fez essa pergunta sobre esse suspeito.\n              <br />O que você responde?\n            </>\n          }\n          en={\n            <>\n              You're the witness of a horrible crime. The detective asked you this question about the suspect.\n              <br />\n              what do you answer?\n            </>\n          }\n        />\n      </Instruction>\n\n      <Card header={translate('Pergunta', 'Question')} color=\"orange\">\n        {task.data.question.question}\n      </Card>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <ImageCard\n          imageId={task.data.suspect.id}\n          className=\"t-suspects-table__suspect-image\"\n          cardWidth={cardWidth}\n          preview={false}\n        />\n        <div className=\"t-suspects-table__suspect-name\">\n          <DualTranslate>{task.data.suspect.name}</DualTranslate>\n        </div>\n      </Space>\n\n      <Space className=\"space-container\">\n        <Button size=\"large\" icon={<SpeechBubbleDeclinedIcon />} onClick={() => onSelect('NO')}>\n          <Translate en=\"NO\" pt=\"NÃO\" />\n        </Button>\n\n        <Button size=\"large\" icon={<SpeechBubbleAcceptedIcon />} onClick={() => onSelect('YES')}>\n          <Translate en=\"YES\" pt=\"SIM\" />\n        </Button>\n      </Space>\n    </>\n  );\n};\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockText } from '../utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\n\nexport const TaskUeSoIsso = ({ task, round, onSubmitTask, user, players }: TaskProps) => {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [clue, setClue] = useState('');\n\n  const onSubmitClue = () => {\n    if (clue.length > 1 && clue.toLowerCase() !== task.data.card.text.toLowerCase()) {\n      onSubmitTask({\n        data: { value: clue },\n      });\n    }\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSubmitTask({\n      data: { value: mockText() },\n    });\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Num jogo normal de <strong>Ué, Só Isso</strong>, você está tentando dar uma dica que não seja\n              igual a dos outros jogadores para que sua dica não seja eliminada.\n              <br />\n              Dessa vez, você <strong>quer que sua dica (palavra-única) seja eliminada</strong>, seja bem\n              óbvio!\n            </>\n          }\n          en={\n            <>\n              In a normal game of <strong>That's it?</strong>, you are trying to write a clue that is not the\n              same as other players' so it doesn't get removed.\n              <br />\n              This time, you <strong>want your clue (single word) to be eliminated</strong>, so be very\n              obvious!\n            </>\n          }\n        />\n      </Instruction>\n      <Space className=\"space-container\">\n        <Card color=\"purple\" header={translate('A Palavra Secreta é', 'Secret Word')} size=\"large\">\n          {task.data.card.text}\n        </Card>\n      </Space>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <SuggestionEasel\n          id={user.id}\n          onChangeInput={(e) => setClue(e.target.value)}\n          onPressEnter={onSubmitClue}\n        />\n        <Button\n          shape=\"round\"\n          type=\"primary\"\n          disabled={user.ready || clue.length < 2 || clue.toLowerCase() === task.data.card.text.toLowerCase()}\n          loading={isLoading}\n          onClick={onSubmitClue}\n        >\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Space>\n    </>\n  );\n};\n\ntype SuggestionEaselProps = {\n  id: string;\n  onChangeInput?: GenericFunction;\n  onPressEnter?: GenericFunction;\n  value?: string;\n};\n\nexport function SuggestionEasel({ id, onChangeInput, onPressEnter, value }: SuggestionEaselProps) {\n  const { translate } = useLanguage();\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 230 60\"\n      overflow=\"visible\"\n      width=\"230\"\n      className=\"u-suggestion-easel\"\n    >\n      <path fill=\"#fff\" d=\"M26.7 59.5L14.1.5h202.7l12.6 59z\" />\n      <path fill=\"#4d4d4d\" d=\"M216.4 1l12.4 58H27.1L14.7 1h201.7m.8-1H13.5l12.8 60H230L217.2 0z\" />\n      <path fill=\"#4d4d4d\" d=\"M24.2 48.3L13.5 0 0 48.3z\" />\n      <foreignObject x=\"32.6\" y=\"13.9\" width=\"185\" height=\"300\">\n        <div>\n          <Input\n            placeholder={translate('Escreva dica aqui', 'Write here')}\n            key={id}\n            id={id}\n            value={value}\n            onChange={onChangeInput}\n            className=\"u-suggestion-easel__input\"\n            bordered={false}\n            onPressEnter={onPressEnter}\n            autoComplete=\"off\"\n          />\n        </div>\n      </foreignObject>\n      <path opacity=\".2\" d=\"M0 48.3L26.3 60l-2.1-11.7z\" />\n    </svg>\n  );\n}\n","// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { mockSelection } from '../utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { MinigameTitle } from './MinigameTitle';\nimport { MovieCard } from 'components/cards/MovieCard';\nimport { MovieReviewCard } from 'components/cards/MovieReviewCard';\n\nexport const TaskVamosAoCinema = ({ task, round, onSubmitTask, user }: TaskProps) => {\n  const { isLoading } = useLoading();\n\n  const onSelect = (value: string) => {\n    onSubmitTask({\n      data: { value },\n    });\n  };\n\n  // DEV Mock\n  useMock(() => {\n    onSelect(mockSelection(['A', 'B', 'C', 'D']));\n  });\n\n  return (\n    <>\n      <MinigameTitle round={round} task={task} />\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Decidimos que o filme que mais se encaixa nas críticas abaixo é o que vamos assistir! Qual filme\n              você quer ver?\n            </>\n          }\n          en={\n            <>\n              We decided that we will watch a movie that best match both reviews bellow! Which movie do you\n              prefer?\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <MovieReviewCard\n          type=\"positive\"\n          text={task.data.reviews.good.text}\n          highlights={task.data.reviews.good.highlights}\n        />\n\n        <MovieReviewCard\n          type=\"negative\"\n          text={task.data.reviews.bad.text}\n          highlights={task.data.reviews.bad.highlights}\n        />\n      </Space>\n\n      <Space className=\"v-movies\">\n        <Space className=\"space-container\" direction=\"vertical\">\n          <MovieCard movie={task.data.movies[0]} disableSuffix prefixColor=\"Khaki\" />\n          <MovieCard movie={task.data.movies[1]} prefixColor=\"aquamarine\" suffixColor=\"Khaki\" />\n          <MovieCard movie={task.data.movies[2]} disablePrefix suffixColor=\"aquamarine\" />\n        </Space>\n        <div className=\"v-movie-buttons\">\n          <Button\n            shape=\"circle\"\n            size=\"large\"\n            type=\"primary\"\n            style={{ background: 'Khaki', color: 'black' }}\n            onClick={() => onSelect('A')}\n            disabled={isLoading || user.ready}\n          >\n            A\n          </Button>\n          <Button\n            shape=\"circle\"\n            size=\"large\"\n            type=\"primary\"\n            style={{ background: 'aquamarine', color: 'black' }}\n            onClick={() => onSelect('B')}\n            disabled={isLoading || user.ready}\n          >\n            B\n          </Button>\n        </div>\n        <div className=\"v-movie-buttons\">\n          <Button\n            shape=\"circle\"\n            size=\"large\"\n            type=\"primary\"\n            style={{ background: 'LightGreen', color: 'black' }}\n            onClick={() => onSelect('C')}\n            disabled={isLoading || user.ready}\n          >\n            C\n          </Button>\n          <Button\n            shape=\"circle\"\n            size=\"large\"\n            type=\"primary\"\n            style={{ background: 'Plum', color: 'black' }}\n            onClick={() => onSelect('D')}\n            disabled={isLoading || user.ready}\n          >\n            D\n          </Button>\n        </div>\n        <Space className=\"space-container\" direction=\"vertical\">\n          <MovieCard movie={task.data.movies[3]} disableSuffix prefixColor=\"LightGreen\" />\n          <MovieCard movie={task.data.movies[4]} prefixColor=\"Plum\" suffixColor=\"LightGreen\" />\n          <MovieCard movie={task.data.movies[5]} disablePrefix suffixColor=\"Plum\" />\n        </Space>\n      </Space>\n    </>\n  );\n};\n","// Components\nimport { Step } from 'components/steps';\nimport { ClubLine } from './components/ClubLine';\nimport { TaskArteRuim } from './components/TaskArteRuim';\nimport { TaskCaminhosMagicos } from './components/TaskCaminhosMagicos';\nimport { TaskContadoresHistorias } from './components/TaskContadoresHistorias';\nimport { TaskCrimesHediondos } from './components/TaskCrimesHediondos';\nimport { TaskCruzaPalavras } from './components/TaskCruzaPalavras';\nimport { TaskDetetivesImaginativos } from './components/TaskDetetivesImaginativos';\nimport { TaskDilemaDosEsquiadores } from './components/TaskDilemaDosEsquiadores';\nimport { TaskEspiaoEntreNos } from './components/TaskEspiaoEntreNos';\nimport { TaskFileiraDeFatos } from './components/TaskFileiraDeFatos';\nimport { TaskGaleriaDeSonhos } from './components/TaskGaleriaDeSonhos';\nimport { TaskMenteColetiva } from './components/TaskMenteColetiva';\nimport { TaskNamoroOuAmizade } from './components/TaskNamoroOuAmizade';\nimport { TaskNaRuaDoMedo } from './components/TaskNaRuaDoMedo';\nimport { TaskOndaTelepatica } from './components/TaskOndaTelepatica';\nimport { TaskPalhetaDeCores } from './components/TaskPalhetaDeFores';\nimport { TaskPolemicaDaVez } from './components/TaskPolemicaDaVez';\nimport { TaskPortaDosDesesperados } from './components/TaskPortaDosDesesperados';\nimport { TaskQuemNaoMata } from './components/TaskQuemNaoMata';\nimport { TaskRetratoFalado } from './components/TaskRetratoFalado';\nimport { TaskSuperCampeonato } from './components/TaskSuperCampeonato';\nimport { TaskTestemunhaOcular } from './components/TaskTestemunhaOcular';\nimport { TaskUeSoIsso } from './components/TaskUeSoIsso';\nimport { TaskVamosAoCinema } from './components/TaskVamosAoCinema';\n\ntype StepTaskProps = {\n  round: GameRound;\n  task: Task;\n  players: GamePlayers;\n  user: GamePlayer;\n  onSubmitTask: GenericFunction;\n} & AnnouncementProps;\n\nexport const StepTask = ({ announcement, ...rest }: StepTaskProps) => {\n  let Component = FallbackComponent;\n\n  switch (rest.task.game) {\n    case 'arte-ruim':\n      Component = TaskArteRuim;\n      break;\n    case 'caminhos-magicos':\n      Component = TaskCaminhosMagicos;\n      break;\n    case 'contadores-historias':\n      Component = TaskContadoresHistorias;\n      break;\n    case 'crimes-hediondos':\n      Component = TaskCrimesHediondos;\n      break;\n    case 'cruza-palavras':\n      Component = TaskCruzaPalavras;\n      break;\n    case 'dilema-dos-esquiadores':\n      Component = TaskDilemaDosEsquiadores;\n      break;\n    case 'detetives-imaginativos':\n      Component = TaskDetetivesImaginativos;\n      break;\n    case 'espiao-entre-nos':\n      Component = TaskEspiaoEntreNos;\n      break;\n    case 'fileira-de-fatos':\n      Component = TaskFileiraDeFatos;\n      break;\n    case 'galeria-de-sonhos':\n      Component = TaskGaleriaDeSonhos;\n      break;\n    case 'mente-coletiva':\n      Component = TaskMenteColetiva;\n      break;\n    case 'namoro-ou-amizade':\n      Component = TaskNamoroOuAmizade;\n      break;\n    case 'na-rua-do-medo':\n      Component = TaskNaRuaDoMedo;\n      break;\n    case 'onda-telepatica':\n      Component = TaskOndaTelepatica;\n      break;\n    case 'palheta-de-cores':\n      Component = TaskPalhetaDeCores;\n      break;\n    case 'polemica-da-vez':\n      Component = TaskPolemicaDaVez;\n      break;\n    case 'porta-dos-desesperados':\n      Component = TaskPortaDosDesesperados;\n      break;\n    case 'quem-nao-mata':\n      Component = TaskQuemNaoMata;\n      break;\n    case 'retrato-falado':\n      Component = TaskRetratoFalado;\n      break;\n    case 'super-campeonato':\n      Component = TaskSuperCampeonato;\n      break;\n    case 'testemunha-ocular':\n      Component = TaskTestemunhaOcular;\n      break;\n    case 'ue-so-isso':\n      Component = TaskUeSoIsso;\n      break;\n    case 'vamos-ao-cinema':\n      Component = TaskVamosAoCinema;\n      break;\n    default:\n      Component = FallbackComponent;\n  }\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Component {...rest} />\n      <ClubLine players={rest.players} currentRound={rest.round.current} />\n    </Step>\n  );\n};\n\nconst FallbackComponent = (_: TaskProps) => {\n  return <div>Something wrong is not right</div>;\n};\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { TITLES } from '../utils/constants';\n\ntype TaskTitleProps = {\n  task: Task;\n};\n\nexport const TaskTitle = ({ task }: TaskTitleProps) => {\n  const { dualTranslate } = useLanguage();\n\n  const instruction: DualLanguageValue = TITLES?.[task.game] ?? {\n    pt: 'Nome do Jogo',\n    en: 'Game Title',\n  };\n\n  return <>{dualTranslate(instruction)}</>;\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { Instruction } from 'components/text';\n\nexport function DJInstructions({ round }: { round: GameRound }): JSX.Element {\n  if (round.current <= 1) {\n    return (\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Fala galera! Eu sou o DJ PruPruPru!\n              <br />O objetivo desse jogo é <strong>entrar</strong> e <strong>permanecer</strong> na área VIP!\n              <br />\n              Você consegue isso se você sempre responder com a maioria! Não importa se está certo ou errado.\n              <br />\n              Ao responder com a maioria, você ganha <PointsHighlight type=\"positive\">1</PointsHighlight>{' '}\n              ponto por entrar na área VIP ou <PointsHighlight type=\"positive\">2</PointsHighlight> points se\n              você estiver lá.\n              <br /> Vamos aos hits!\n            </>\n          }\n          en={\n            <>\n              Yo my party people! I'm DJ PruPruPru!\n              <br />\n              The goal of the game is to <strong>join</strong> and <strong>stay</strong> in the VIP area!\n              <br />\n              You achieve this by always answering the tasks with the majority. It doesn't matter if it's\n              wrong or right.\n              <br />\n              When answering with the majority, you gain <PointsHighlight type=\"positive\">\n                1\n              </PointsHighlight>{' '}\n              point for joining the VIP area or <PointsHighlight type=\"positive\">2</PointsHighlight> points if\n              you're already there.\n              <br />\n              Let's play those hits!\n            </>\n          }\n        />\n      </Instruction>\n    );\n  }\n\n  if (round.current === Math.round(round.total / 2)) {\n    return (\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              DJ PruPruPru está de volta!\n              <br />\n              Estamos no meio da noite! Você está conseguindo ficar na área VIP?\n            </>\n          }\n          en={\n            <>\n              DJ PruPruPru back here!\n              <br />\n              We're halfway. Are you able to stay in the VIP area?\n            </>\n          }\n        />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Última rodada! Ganha quem estiver na área VIP com mais pontos!\n            <br />\n            Será que será você?\n          </>\n        }\n        en={\n          <>\n            It's the last round! The player with the most points in the VIP area will win!\n            <br />\n            Will that be you?\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { useGlobalState } from 'hooks/useGlobalState';\nimport { useEffect } from 'react';\nimport { useAudio } from 'react-use';\n// Sound\nconst airHorn = require('assets/sounds/airhorn.mp3');\n\nexport function DJPruPruPruSound() {\n  const [volume] = useGlobalState('volume');\n  const [audio, , controls] = useAudio({\n    src: airHorn,\n    autoPlay: true,\n  });\n\n  // Updated volume\n  useEffect(() => {\n    controls.volume(volume);\n  }, [volume]); // eslint-disable-line\n\n  return <>{audio}</>;\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitTaskAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { showDJPruPruPruStep } from './utils/helpers';\n// Icons\nimport { DJIcon } from 'icons/DJIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { TaskIcon } from './components/TaskIcon';\nimport { TaskInstructions } from './components/TaskInstructions';\nimport { StepTask } from './StepTask';\nimport { TaskTitle } from './components/TaskTitle';\nimport { DJInstructions } from './components/RulesBlobs';\nimport { Translate } from 'components/language';\nimport { DJPruPruPruSound } from 'components/audio/DJPruPruPruSound';\n\nfunction PhaseTask({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep, goToNextStep } = useStep(showDJPruPruPruStep(state.round));\n\n  const onSubmitTask = useOnSubmitTaskAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<TaskIcon task={state.task} />}\n      title={<TaskTitle task={state.task} />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <TaskInstructions task={state.task} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MEGAMIX.TASK}>\n      <StepSwitcher step={step} conditions={[!user.isReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DJIcon />}\n          title={<DJAnnouncementTitle round={state.round} />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 2 ? 20 : 7}\n          unskippable\n          type=\"block\"\n        >\n          <DJPruPruPruSound />\n          <DJInstructions round={state.round} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepTask\n          task={state.task}\n          round={state.round}\n          players={players}\n          announcement={announcement}\n          onSubmitTask={onSubmitTask}\n          user={user}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTask;\n\nfunction DJAnnouncementTitle({ round }: { round: GameRound }) {\n  if (round.current < 2) return <Translate pt=\"A Balada\" en=\"The Club\" />;\n  if (round.current === Math.round(round.total / 2))\n    return <Translate pt=\"E tamo só esquentando\" en=\"We're halfway!\" />;\n  return <Translate pt=\"Última música\" en=\"The last song\" />;\n}\n","import { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { MEGAMIX_API } from 'services/adapters';\n\nexport function useOnSubmitSeedAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MEGAMIX_API.submitAction,\n    actionName: 'submit-seed',\n    onSuccess: () => setStep(3),\n    successMessage: translate('Dados enviados com sucesso', 'Data submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus dados',\n      'Oops, the application found an error while trying to submit your data'\n    ),\n  });\n\n  return (payload: SubmitTaskPayload) => {\n    request({\n      action: 'SUBMIT_SEEDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitTaskAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: MEGAMIX_API.submitAction,\n    actionName: 'submit-task',\n    onSuccess: () => setStep(3),\n    successMessage: translate('Tarefa enviada com sucesso', 'Task submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua tarefa',\n      'Oops, the application found an error while trying to submit your task'\n    ),\n  });\n\n  return (payload: SubmitTaskPayload) => {\n    request({\n      action: 'SUBMIT_TASK',\n      ...payload,\n    });\n  };\n}\n","import { useEffect, useState } from 'react';\n// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { NOOP } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { Card } from 'components/cards';\nimport { DrawingCanvas } from 'components/canvas';\nimport { PanicIcon } from 'icons/PanicIcon';\nimport { ArteRuimTimerSound } from 'components/audio/ArteRuimTimerSound';\nimport { TimeHighlight } from 'components/metrics/TimeHighlight';\n\ntype SeedArteRuimProps = {\n  seed: SeedEntryArteRuim;\n  updateData: GenericComponent;\n};\n\nexport function SeedArteRuim({ seed, updateData }: SeedArteRuimProps) {\n  const { translate } = useLanguage();\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { seconds, start, isRunning } = useCountdown({\n    duration: 13,\n    autoStart: false,\n    onExpire: () => {\n      updateData(\n        {\n          [seed.card.id]: JSON.stringify(lines),\n        },\n        true\n      );\n    },\n  });\n\n  useEffect(() => {\n    if (seconds === 2) {\n      setTimesUp(true);\n    }\n  }, [seconds]);\n\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"Para ajudar aliviar o estresse de ser sensual na balada, você resolveu se expressar artisticamente\"\n          en=\"To help relieve the stress of being incredibly hot in the club, you decided to express yourself through art\"\n        />\n      </Title>\n\n      <Space direction=\"vertical\">\n        <Instruction className=\"seed-instruction\">\n          <Translate\n            pt={\n              <>\n                Você tem <TimeHighlight>10 segundos</TimeHighlight> para desenhar a carta abaixo. Quando\n                estiver pronto, aperte o botão, o texto irá aparecer, então desenhe rápido!\n              </>\n            }\n            en={\n              <>\n                You have <TimeHighlight>10 seconds</TimeHighlight> to draw the card below. When you're ready,\n                press the button so the text will show up and then draw fast!\n              </>\n            }\n          />\n        </Instruction>\n        <Button onClick={start} type=\"primary\" disabled={isRunning}>\n          <Translate pt=\"Começar\" en=\"Start\" />\n        </Button>\n\n        <Card size=\"large\" header={translate('Desenhe', 'Draw')} className=\"a-draw__card\" color=\"yellow\">\n          {isRunning ? (\n            <>\n              {seed.card.text}\n              <span className=\"a-draw__timer\">{seconds > 1 ? seconds - 2 : 0}</span>\n            </>\n          ) : (\n            '?'\n          )}\n        </Card>\n        {isRunning && <ArteRuimTimerSound />}\n        {isTimesUp ? (\n          <PanicIcon style={{ background: 'white', width: '500px', padding: '2em' }} />\n        ) : isRunning ? (\n          <DrawingCanvas lines={lines} setLines={setLines} />\n        ) : (\n          <DrawingCanvas lines={[]} setLines={NOOP} />\n        )}\n      </Space>\n    </div>\n  );\n}\n","import { capitalize } from 'lodash';\n// AntDesign Resources\nimport { Button, Space } from 'antd';\nimport { HeartOutlined, MessageOutlined, SendOutlined } from '@ant-design/icons';\n// Components\nimport { BikiniModelIcon } from 'icons/BikiniModelIcon';\nimport { Translate } from 'components/language';\nimport { Instruction, TextHighlight, Title } from 'components/text';\nimport { SocialProfile } from './SocialProfile';\n\ntype SeedCaminhosMagicosProps = {\n  seed: SeedEntryCaminhosMagicos;\n  updateData: GenericComponent;\n  user: GamePlayer;\n};\n\nexport function SeedCaminhosMagicos({ seed, updateData, user }: SeedCaminhosMagicosProps) {\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"Você decidiu postar uma foto piranhuda no Instagram antes de se arrumar...\"\n          en=\"You decided to post a thirst trap on Instagram before getting ready...\"\n        />\n      </Title>\n\n      <Space direction=\"vertical\">\n        <Instruction className=\"seed-instruction\">\n          <Translate\n            pt={\n              <>\n                Para não pensarem mal de você, você escolheu <TextHighlight>{seed.portal.text}</TextHighlight>{' '}\n                como a legenda de impacto da sua postagem. Agora escolha o melhor adjetivo que vai bem com\n                ela.\n              </>\n            }\n            en={\n              <>\n                Thinking about the haters, you chose <TextHighlight>{seed.portal.text}</TextHighlight> as a\n                caption. Now select the best adjective to go with it.\n              </>\n            }\n          />\n        </Instruction>\n\n        <div className=\"cm-instagram\">\n          <SocialProfile\n            avatarId={user.avatarId}\n            name={user.name}\n            handle={<Translate pt=\"Logo ali, Brasil\" en=\"Somewhere\" />}\n            className=\"cm-instagram__user\"\n          />\n          <div className=\"cm-instagram__picture\">\n            <BikiniModelIcon />\n          </div>\n          <div className=\"cm-instagram__buttons\">\n            <HeartOutlined /> <MessageOutlined /> <SendOutlined />\n          </div>\n          <div className=\"cm-instagram__post\">\n            <strong>{user.name.toLowerCase()}</strong> {capitalize(seed.portal.text)}...\n          </div>\n        </div>\n\n        <Space>\n          {seed.cards.map((card) => (\n            <Button\n              key={card.id}\n              onClick={() => updateData({ [seed.portal.id]: card.id }, true)}\n              type=\"primary\"\n            >\n              {card.text}\n            </Button>\n          ))}\n        </Space>\n      </Space>\n    </div>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n// AntDesign Resources\nimport { Button, Segmented, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { ClubberAvatar } from './ClubberAvatar';\n\ntype SeedClubberProps = {\n  seed: SeedEntryClubberOutfit;\n  updateData: GenericComponent;\n  user: GamePlayer;\n  onSubmitData: GenericFunction;\n  data: PlainObject;\n};\n\nexport function SeedClubber({ seed, updateData, user, data, onSubmitData }: SeedClubberProps) {\n  const { isLoading } = useLoading();\n\n  useEffectOnce(() => {\n    updateData({ clubberId: seed.outfits[0] });\n  });\n\n  const clubbers = (seed.outfits ?? []).map((cId: string, index: number) => ({\n    label: (\n      <div className=\"clubber-selection\">\n        <ClubberAvatar id={user.avatarId} clubberId={cId} />\n        <div>{LETTERS[index]}</div>\n      </div>\n    ),\n    value: cId,\n  }));\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"Escolha o que você vai usar pra balada\"\n          en=\"Choose what you want to wear for this party\"\n        />\n      </Title>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <Segmented\n          options={clubbers}\n          value={data.clubberId}\n          onChange={(clubberId) => updateData({ clubberId })}\n        />\n\n        <Button onClick={() => onSubmitData({ data })} disabled={isLoading || user.ready}>\n          <Translate pt=\"Confirmar roupa\" en=\"Confirm outfit\" />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import moment from 'moment';\nimport { useState } from 'react';\n// AntDesign Resources\nimport { Button, InputNumber, Slider, Space } from 'antd';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n\ntype SeedFileiraDeFatosProps = {\n  seed: SeedEntryFileiraDeFatos;\n  updateData: GenericComponent;\n};\n\nconst now = moment().format('MMMM YYYY, h:mm');\n\nexport function SeedFileiraDeFatos({ seed, updateData }: SeedFileiraDeFatosProps) {\n  const [value, setValue] = useState(0);\n\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"Você recebeu o torpedo de um amigo e precisa responder antes de se arrumar\"\n          en=\"You received the following text message from a friend and you must answer it before leaving\"\n        />\n      </Title>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <div className=\"ff-phone\">\n          <div className=\"ff-phone__contact\">\n            <Avatar id=\"B\" />\n            <div className=\"ff-phone__name\">Bob {'>'}</div>\n          </div>\n          <div className=\"ff-phone__thread\">\n            <div className=\"ff-phone__message\">\n              <Translate pt=\"Ow\" en=\"Dude\" />\n            </div>\n            <div className=\"ff-phone__message\">\n              <Translate pt=\"fala aí\" en=\"Answer this\" />\n            </div>\n            <div className=\"ff-phone__message\">\n              <Translate pt=\"De 0 a 100...\" en=\"From 0 to 100\" />\n            </div>\n            <div className=\"ff-phone__timestamp\">\n              <Translate pt=\"Recebido\" en=\"Received\" /> {now}\n            </div>\n            <div className=\"ff-phone__message\">{seed.card.question}</div>\n          </div>\n        </div>\n\n        <Space className=\"space-container\">\n          <Slider min={0} max={100} onChange={(e) => setValue(e)} className=\"ff-slider\" value={value} />\n          <InputNumber\n            min={0}\n            max={100}\n            style={{ margin: '0 16px' }}\n            value={value}\n            onChange={(e) => setValue(e ?? 0)}\n          />\n        </Space>\n\n        <Button block onClick={() => updateData({ fact: value }, true)}>\n          <Translate pt=\"Enviar\" en=\"Submit\" /> ({value})\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\n\ntype SeedOndaTelepaticaProps = {\n  seed: SeedEntryOndaTelepatica;\n  updateData: GenericComponent;\n};\n\nconst leftSide = Math.random() > 0.5;\n\nexport function SeedOndaTelepatica({ seed, updateData }: SeedOndaTelepaticaProps) {\n  const [value, setValue] = useState('');\n  const { translate } = useLanguage();\n  const theme = leftSide ? seed.card.left : seed.card.right;\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"Você ainda estuda e precisa terminar sua tarefa de casa...\"\n          en=\"You're still in school and needs to finish your homework...\"\n        />\n      </Title>\n\n      <Space className=\"space-container\" direction=\"vertical\">\n        <Instruction className=\"seed-instruction\">\n          <Translate\n            pt={\n              <>\n                Escreva algo simples que combine com o tema abaixo, pode ser uma palavra, duas, uma expressão.\n              </>\n            }\n            en={\n              <>Write something simple that matches the theme below. It could be a word, two, or a phrase.</>\n            }\n          />\n        </Instruction>\n\n        <Card header={translate('Tarefa', 'Homework')} color=\"purple\">\n          {theme}\n        </Card>\n\n        <Input\n          onChange={(e) => setValue(e.target.value)}\n          size=\"large\"\n          placeholder={translate('Escreva aqui', 'Write here')}\n          onPressEnter={() => updateData({ wave: value }, true)}\n        />\n\n        <Space>\n          <Button\n            disabled={value.length < 2}\n            onClick={() => updateData({ wave: value }, true)}\n            type=\"primary\"\n          >\n            <Translate pt=\"Enviar dever de casa\" en=\"Submit homework\" />\n          </Button>\n        </Space>\n      </Space>\n    </div>\n  );\n}\n","// AntDesign Resources\nimport { Button } from 'antd';\nimport { DislikeFilled, LikeFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { SocialProfile } from './SocialProfile';\n\ntype SeedPolemicaDaVezProps = {\n  seed: SeedEntryPolemicaDaVez;\n  updateData: GenericComponent;\n};\n\nexport function SeedPolemicaDaVez({ seed, updateData }: SeedPolemicaDaVezProps) {\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt={\n            <>\n              Vamos procrastinar:\n              <br />\n              Você abre o Twitter e vê esse tópico. Curte ou não curte?\n            </>\n          }\n          en={\n            <>\n              Let's procrastinate:\n              <br />\n              You open twitter and see this topic. Like or Dislike?\n            </>\n          }\n        />\n      </Title>\n\n      <div className=\"tweet\">\n        <SocialProfile avatarId=\"A\" name=\"Bob\" handle=\"@bob\" verified />\n        <span className=\"tweet__text\">{seed.card.text}</span>\n        <div className=\"tweet__buttons\">\n          <Button block icon={<LikeFilled />} onClick={() => updateData({ likeTopic: true }, true)}>\n            <Translate pt=\"Curtir\" en=\"Like\" />\n          </Button>\n          <Button block icon={<DislikeFilled />} onClick={() => updateData({ likeTopic: false }, true)}>\n            <Translate pt=\"Não curto\" en=\"Dislike\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useAudio } from 'react-use';\n// AntDesign Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { NOOP } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { DrawingCanvas } from 'components/canvas';\nimport { PanicIcon } from 'icons/PanicIcon';\nimport { MonsterCard } from 'components/cards/MonsterCard';\nimport { ImageCardPreloadHand } from 'components/cards';\n// Sound\nconst arteRuimTimer = require('assets/sounds/arte-ruim-timer.mp3');\n\ntype SeedRetratoFaladoProps = {\n  seed: SeedEntryRetratoFalado;\n  updateData: GenericComponent;\n};\n\nexport function SeedRetratoFalado({ seed, updateData }: SeedRetratoFaladoProps) {\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n  const [volume] = useGlobalState('volume');\n  const [audio, , controls] = useAudio({\n    src: arteRuimTimer,\n  });\n\n  // Updated volume\n  useEffect(() => {\n    controls.volume(volume);\n  }, [volume]); // eslint-disable-line\n\n  const { seconds, start, isRunning } = useCountdown({\n    duration: 33,\n    autoStart: false,\n    onExpire: () => {\n      updateData(\n        {\n          [seed.card.id]: JSON.stringify(lines),\n        },\n        true\n      );\n    },\n  });\n\n  useEffect(() => {\n    if (seconds === 2) {\n      setTimesUp(true);\n    }\n  }, [seconds]);\n\n  return (\n    <div className=\"seed-container\">\n      <Title size=\"xx-small\">\n        <Translate\n          pt=\"De repente, você se lembra de um evento muito traumático na sua vida, uma monstro te atacou uma vez...\"\n          en=\"Suddenly you have a glimpse of memory from the day a monster attacked you...\"\n        />\n      </Title>\n\n      <Space direction=\"vertical\">\n        <Instruction className=\"seed-instruction\">\n          <Translate\n            pt={\n              <>\n                Você tem <strong>30 segundos</strong> para desenhar a carta abaixo.\n                <br />\n                Desenhá-lo é a única coisa que te acalma. Quando estiver pronto, aperte o botão!\n              </>\n            }\n            en={\n              <>\n                You have <strong>30 seconds</strong> to draw the card below.\n                <br />\n                Drawing it is the only thing that calms you down. When you're ready, press the button!\n              </>\n            }\n          />\n        </Instruction>\n        <Button onClick={start} type=\"primary\" disabled={isRunning}>\n          <Translate pt=\"Começar\" en=\"Start\" />\n        </Button>\n\n        {isRunning && audio}\n        <div className=\"monster-container\">\n          {isRunning && <span className=\"a-draw__timer\">{seconds > 1 ? seconds - 2 : 0}</span>}\n\n          <MonsterCard\n            currentMonster={isRunning ? seed.card : { id: 'md-bs-000', orientation: seed.card.orientation }}\n            showControls\n            cardWidth={250}\n          />\n\n          {isTimesUp ? (\n            <PanicIcon style={{ background: 'white', width: '500px', padding: '2em' }} />\n          ) : isRunning ? (\n            <DrawingCanvas lines={lines} setLines={setLines} />\n          ) : (\n            <DrawingCanvas lines={[]} setLines={NOOP} />\n          )}\n        </div>\n      </Space>\n\n      <ImageCardPreloadHand hand={[seed.card.id]} />\n    </div>\n  );\n}\n","import { useState } from 'react';\n// AntDesign Resources\nimport { Steps } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\nimport { useStep } from 'hooks/useStep';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { buildSeedingSteps } from './utils/helpers';\nimport { mockSeeding } from './utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { SeedArteRuim } from './components/SeedArteRuim';\nimport { SeedCaminhosMagicos } from './components/SeedCaminhosMagicos';\nimport { SeedClubber } from './components/SeedClubber';\nimport { SeedFileiraDeFatos } from './components/SeedFileiraDeFatos';\nimport { SeedOndaTelepatica } from './components/SeedOndaTelepatica';\nimport { SeedPolemicaDaVez } from './components/SeedPolemicaDaVez';\nimport { SeedRetratoFalado } from './components/SeedRetratoFalado';\n\ntype StepSeedingProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  onSubmitData: GenericFunction;\n} & AnnouncementProps;\n\nexport const StepSeeding = ({ announcement, user, onSubmitData }: StepSeedingProps) => {\n  const { step: currentStep, goToNextStep } = useStep(0);\n\n  const [data, setData] = useState<PlainObject>({});\n  const { translate } = useLanguage();\n\n  const updateData = (objValue: PlainObject, next = false) => {\n    setData((v) => ({ ...v, ...objValue }));\n    if (next) {\n      goToNextStep();\n    }\n  };\n\n  const seeds = user.seeds ?? [];\n  const items = buildSeedingSteps(seeds, translate);\n  const currentSeed: SeedEntry = seeds[currentStep];\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"x-small\">\n        <Translate pt=\"Termine todas suas obrigações\" en=\"Finish all your chores\" />\n      </Title>\n      <div className=\"full-width container center\">\n        <Steps current={currentStep} items={items} />\n        {/* DEV only */}\n        {Boolean(currentSeed?.type) && <DevMock seeds={seeds} onSubmitData={onSubmitData} />}\n\n        {currentSeed?.type === 'arte-ruim' && <SeedArteRuim seed={currentSeed} updateData={updateData} />}\n\n        {currentSeed?.type === 'caminhos-magicos' && (\n          <SeedCaminhosMagicos seed={currentSeed} updateData={updateData} user={user} />\n        )}\n\n        {currentSeed?.type === 'onda-telepatica' && (\n          <SeedOndaTelepatica seed={currentSeed} updateData={updateData} />\n        )}\n\n        {currentSeed?.type === 'polemica-da-vez' && (\n          <SeedPolemicaDaVez seed={currentSeed} updateData={updateData} />\n        )}\n\n        {currentSeed?.type === 'retrato-falado' && (\n          <SeedRetratoFalado seed={currentSeed} updateData={updateData} />\n        )}\n\n        {currentSeed?.type === 'fileira-de-fatos' && (\n          <SeedFileiraDeFatos seed={currentSeed} updateData={updateData} />\n        )}\n\n        {currentSeed?.type === 'clubber' && (\n          <SeedClubber\n            seed={currentSeed}\n            updateData={updateData}\n            user={user}\n            onSubmitData={onSubmitData}\n            data={data}\n          />\n        )}\n      </div>\n    </Step>\n  );\n};\n\ntype DevMockProps = {\n  onSubmitData: GenericFunction;\n  seeds: SeedEntry[];\n};\n\nfunction DevMock({ onSubmitData, seeds }: DevMockProps) {\n  // DEV\n  useMock(() => {\n    onSubmitData({ data: mockSeeding(seeds) });\n  });\n\n  return <></>;\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitSeedAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { ExperimentIcon } from 'icons/ExperimentIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSeeding } from './StepSeeding';\n\nexport function PhaseSeeding({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitData = useOnSubmitSeedAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<ExperimentIcon />}\n      title={\n        <Translate pt=\"Seus amigos te chamaram para a balada!\" en=\"Your friend invited to to the club!\" />\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt=\"Mas antes de ir, você tem que fazer suas obrigações...\"\n          en=\"But before that, you need to finish your chores...\"\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MEGAMIX.SEEDING}>\n      <StepSwitcher step={step} conditions={[!user.isReady]} players={players}>\n        {/* Step 0 */}\n        <StepSeeding players={players} announcement={announcement} onSubmitData={onSubmitData} user={user} />\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// AntDesign Resources\nimport { Space } from 'antd';\n// Components\nimport { PlayersHighlight } from 'components/metrics/PlayersHighlight';\n\nexport function WinningCount({ children }: { children: ReactNode }) {\n  return (\n    <Space className=\"space-container\">\n      <PlayersHighlight>{children}</PlayersHighlight>\n    </Space>\n  );\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultArteRuim({ task, winningValues, winningTeam }: ResultComponentProps) {\n  const width = useCardWidth(winningValues.length + 1, 9, 80, 200, 0, 'results-values');\n\n  if (task.variant === 'drawings') {\n    const winningArtworks: PlainObject[] = task.data.options.filter((option: PlainObject) => {\n      return winningValues.includes(option.playerId);\n    });\n\n    return (\n      <>\n        <WinningCount>{winningTeam.length}</WinningCount>\n        <Instruction>\n          <Translate pt=\"A arte mais votada foi\" en=\"The most popular art was\" />:\n        </Instruction>\n        <div className=\"task-result-values__cards\">\n          {winningArtworks.map((value) => (\n            <div key={value.playerId} className=\"task-result-values__text-value\">\n              <CanvasSVG drawing={value.drawing} width={width} className=\"a-drawing\" />\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  const winningCards: PlainObject[] = task.data.cards.filter((option: PlainObject) => {\n    return winningValues.includes(option.id);\n  });\n\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"O mais votado foi\" en=\"The most popular was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningCards.map((value) => (\n          <div key={value.id} className=\"task-result-values__text-value\">\n            {value.text}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","import { Fragment } from 'react';\n// AntDesign Resources\nimport { RightSquareOutlined } from '@ant-design/icons';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { MapIcon } from 'icons/MapIcon';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultCaminhosMagicos({ task, winningValues, winningTeam }: ResultComponentProps) {\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"O caminho mais votado foi\" en=\"The most popular path was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningValues.map((value) => {\n          const index = Number(value);\n          const entry = task.data?.options?.[index] ?? {};\n          return (\n            <div key={index} className=\"cm-clues__clue\">\n              {LETTERS[Number(value)]}\n              <IconAvatar icon={<MapIcon />} size={48} />\n              {Object.values<PlainObject>(entry).map((option, index, arr) => {\n                return (\n                  <Fragment key={`${option.playerId}-${index}`}>\n                    <span className=\"cm-clues__clue-text\">{option.text}</span>\n                    {arr.length - 1 > index && <RightSquareOutlined />}\n                  </Fragment>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultCruzaPalavras({ task, winningValues, winningTeam }: ResultComponentProps) {\n  const cheatSheet: PlainObject = {\n    0: [task.data.cards[0].text, task.data.cards[2].text],\n    1: [task.data.cards[0].text, task.data.cards[3].text],\n    2: [task.data.cards[1].text, task.data.cards[2].text],\n    3: [task.data.cards[1].text, task.data.cards[3].text],\n  };\n\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"O mais votado foi\" en=\"The most popular was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningValues.map((value) => (\n          <div key={value} className=\"task-result-values__text-value\">\n            {cheatSheet[value][0]} {'+'} {cheatSheet[value][1]}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { Candidate } from './TaskNamoroOuAmizade';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultNamoroOuAmizade({ task, winningValues, winningTeam }: ResultComponentProps) {\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"O melhor partido foi\" en=\"The best match was\" />:{' '}\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningValues.map((value) => {\n          const index = task.data.heads.findIndex((head: PlainObject) => head.id === value);\n          return (\n            <Candidate\n              key={value}\n              head={task.data.heads[index]}\n              body={task.data.bodies[index]}\n              interest={task.data.interests[index]}\n              need={task.data.needs[index]}\n              funFact={task.data.funFacts[index]}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { HouseCard } from 'games/na-rua-do-medo/components/HouseCard';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultNaRuaDoMedo({ task, winningValues, winningTeam }: ResultComponentProps) {\n  if (task.variant === 'house') {\n    const winningCards: NCard[] = task.data.options.filter((option: PlainObject) => {\n      return winningValues.includes(option.id);\n    });\n\n    return (\n      <>\n        <WinningCount>{winningTeam.length}</WinningCount>\n        <Instruction>\n          <Translate pt=\"A escolha mais popular foi\" en=\"The most popular choice was\" />:\n        </Instruction>\n        <div className=\"task-result-values__cards\">\n          {winningCards.map((card) => (\n            <div key={card.id} className=\"task-result-values__text-value\">\n              <HouseCard card={card} candyLeftover={0} preview={false} />\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"A rua mais votada foi\" en=\"The most voted street was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningValues.map((value) => (\n          <div key={value} className=\"task-result-values__text-value\">\n            {LETTERS[Number(value)]}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","// AntDesign Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultRetratoFalado({ task, winningValues, winningTeam }: ResultComponentProps) {\n  const width = useCardWidth(winningValues.length + 1, 9, 80, 200, 0, 'results-values');\n\n  const winningArtworks: PlainObject[] = task.data.options.filter((option: PlainObject) => {\n    return winningValues.includes(option.playerId);\n  });\n\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"O monstro escolhido foi\" en=\"The best monster was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningArtworks.map((value) => (\n          <Badge key={value.playerId} count={winningTeam.length} color=\"#faad14\">\n            <div className=\"task-result-values__text-value\">\n              <CanvasSVG drawing={value.drawing} width={width} className=\"a-drawing\" />\n            </div>\n          </Badge>\n        ))}\n      </div>\n    </>\n  );\n}\n","// Utils\nimport { getMovieTitles } from '../utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { WinningCount } from './WinningCount';\n\nexport function ResultVamosAoCinema({ task, winningValues, winningTeam }: ResultComponentProps) {\n  const movies: StringDictionary = getMovieTitles(task.data.movies);\n\n  return (\n    <>\n      <WinningCount>{winningTeam.length}</WinningCount>\n      <Instruction>\n        <Translate pt=\"A filme mais votado foi\" en=\"The most popular movie was\" />:\n      </Instruction>\n      <div className=\"task-result-values__cards\">\n        {winningValues.map((value) => {\n          return (\n            <div key={`winning-${value}`} className=\"task-result-values__text-value\">\n              {movies[value]}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { TDIcon } from 'icons/TDIcon';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { DoorFrame } from 'games/porta-dos-desesperados/components/DoorFrame';\nimport { ResultArteRuim } from './ResultArteRuim';\nimport { ResultCaminhosMagicos } from './ResultCaminhosMagicos';\nimport { ResultCruzaPalavras } from './ResultCruzaPalavras';\nimport { ResultNamoroOuAmizade } from './ResultNamoroOuAmizade';\nimport { ResultNaRuaDoMedo } from './ResultNaRuaDoMedo';\nimport { ResultRetratoFalado } from './ResultRetratoFalado';\nimport { ResultVamosAoCinema } from './ResultVamosNoCinema';\nimport { SplatterSVG } from './TaskPalhetaDeFores';\nimport { ContenderCard } from './TaskSuperCampeonato';\nimport { WinningCount } from './WinningCount';\n\nexport const ResultValueDelegator = (props: Omit<ResultComponentProps, 'playersList'>) => {\n  const width = useCardWidth(props.winningValues.length + 1, 9, 80, 200, 0, 'results-values');\n\n  switch (props.task.game) {\n    case 'arte-ruim':\n      return <ResultArteRuim {...props} />;\n    case 'caminhos-magicos':\n      return <ResultCaminhosMagicos {...props} />;\n    case 'contadores-historias':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A história mais popular foi\" en=\"The most popular story was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'crimes-hediondos':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O item mais votado foi\" en=\"The most voted item was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((cardId) => (\n              <ImageBlurButtonContainer cardId={cardId} key={`table-focus-${cardId}`}>\n                <ImageCard imageId={cardId} cardWidth={width} className=\"d-table__image-card\" />\n              </ImageBlurButtonContainer>\n            ))}\n          </div>\n        </>\n      );\n    case 'cruza-palavras':\n      return <ResultCruzaPalavras {...props} />;\n    case 'detetives-imaginativos':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O impostor mais votado foi\" en=\"The most voted impostor was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((cardId) => (\n              <ImageBlurButtonContainer cardId={cardId} key={`table-focus-${cardId}`}>\n                <ImageCard imageId={cardId} cardWidth={width} className=\"d-table__image-card\" />\n              </ImageBlurButtonContainer>\n            ))}\n          </div>\n        </>\n      );\n    case 'dilema-dos-esquiadores':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O lado mais popular foi\" en=\"The most popular side was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'espiao-entre-nos':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"Respostas mais dadas\" en=\"Best answers\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'fileira-de-fatos':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A melhor resposta foi\" en=\"The best answer was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                <Translate pt={value === 'before' ? 'Antes' : 'Depois'} en={value} />\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'galeria-de-sonhos':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A sonho mais visitado foi\" en=\"The most visited dream was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                <ImageBlurButtonContainer cardId={value}>\n                  <ImageCard\n                    key={`table-focus-${value}`}\n                    imageId={value}\n                    cardWidth={width}\n                    className=\"d-table__image-card\"\n                  />\n                </ImageBlurButtonContainer>\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'mente-coletiva':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A resposta mais comum foi\" en=\"The most common answer was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n\n    case 'namoro-ou-amizade':\n      return <ResultNamoroOuAmizade {...props} />;\n    case 'na-rua-do-medo':\n      return <ResultNaRuaDoMedo {...props} />;\n    case 'onda-telepatica':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A mais votado foi\" en=\"The most voted was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value === 'center' && <Translate pt=\"Centro\" en=\"Center\" />}\n                {value === 'left' && <Translate pt=\"Esquerda\" en=\"Left\" />}\n                {value === 'right' && <Translate pt=\"Direita\" en=\"Right\" />}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'palheta-de-cores':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A amostra mais selecionada foi\" en=\"The most selected swatch was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                <SplatterSVG color={value} style={{ color: value }} width={48} />\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'polemica-da-vez':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A quantidade de curtidas foi\" en=\"The number of likes was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n\n    case 'porta-dos-desesperados':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A saída era na porta\" en=\"The Exit was on this door\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((cardId) => (\n              <ImageBlurButtonContainer cardId={cardId} key={cardId}>\n                <DoorFrame width={width}>\n                  <ImageCard imageId={cardId} cardWidth={150} />\n                </DoorFrame>\n              </ImageBlurButtonContainer>\n            ))}\n          </div>\n        </>\n      );\n    case 'quem-nao-mata':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O mais morto foi\" en=\"The most killed was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                <AvatarName player={props.players[value]} />\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'retrato-falado':\n      return <ResultRetratoFalado {...props} />;\n    case 'super-campeonato':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O campeão é\" en=\"And the champion is\" />:\n          </Instruction>\n          {props.winningValues.map((cardId) => (\n            <ImageBlurButtonContainer cardId={cardId} key={cardId}>\n              <ContenderCard\n                size={width}\n                overlayColor={'yellow'}\n                contender={{\n                  id: cardId,\n                  name: { pt: '', en: '' },\n                }}\n              />\n            </ImageBlurButtonContainer>\n          ))}\n        </>\n      );\n    case 'testemunha-ocular':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"O criminoso mais votado foi\" en=\"The perpetrator with most votes was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                <ImageCard\n                  key={`table-focus-${value}`}\n                  imageId={value}\n                  cardWidth={width}\n                  className=\"d-table__image-card\"\n                />\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'ue-so-isso':\n      return (\n        <>\n          <WinningCount>{props.winningTeam.length}</WinningCount>\n          <Instruction>\n            <Translate pt=\"A dica eliminada foi\" en=\"The eliminated clue was\" />:\n          </Instruction>\n          <div className=\"task-result-values__cards\">\n            {props.winningValues.map((value) => (\n              <div key={value} className=\"task-result-values__text-value\">\n                {value}\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    case 'vamos-ao-cinema':\n      return <ResultVamosAoCinema {...props} />;\n\n    default:\n      return <TDIcon />;\n  }\n};\n","import { has } from 'lodash';\nimport { ReactNode } from 'react';\n// AntDesign Resources\nimport { Space } from 'antd';\n\ntype SpacePlayerCheckWrapperProps = {\n  playersList: GamePlayer[];\n  paths: string[];\n  children: ReactNode;\n};\nexport function SpacePlayerCheckWrapper({ playersList, paths, children }: SpacePlayerCheckWrapperProps) {\n  const okToProceed = playersList.every((player) => {\n    return paths.every((path) => {\n      return has(player, path);\n    });\n  });\n\n  if (okToProceed) {\n    return (\n      <Space className=\"space-container\" align=\"center\" wrap>\n        {children}\n      </Space>\n    );\n  }\n\n  return <></>;\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\n\nexport function VoteArteRuim({ task, players, playersList }: VoteComponentProps) {\n  const width = useCardWidth(playersList.length + 1, 9, 80, 200, 0, 'results-values');\n\n  if (task.variant === 'drawings') {\n    return (\n      <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n        {playersList.map((player) => {\n          const drawing = task.data.options.find(\n            (entry: PlainObject) => entry.playerId === player.data.value\n          );\n          return (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div>{player.name}</div>\n              {Boolean(drawing) && (\n                <CanvasSVG drawing={drawing.drawing} width={width} className=\"a-drawing\" />\n              )}\n            </div>\n          );\n        })}\n      </SpacePlayerCheckWrapper>\n    );\n  }\n\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => {\n        const card = task.data.cards.find((entry: PlainObject) => entry.id === player.data.value);\n        return (\n          <div key={`vote-${player.id}`} className=\"player-vote\">\n            <Avatar id={player.avatarId} />\n            <div className=\"player-vote__name\">{player.name}</div>\n            <div className=\"player-vote__value\">{Boolean(card) && card.text}</div>\n          </div>\n        );\n      })}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","// Components\nimport { Avatar } from 'components/avatars';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\n\nexport function VoteCruzaPalavras({ task, players, playersList }: VoteComponentProps) {\n  const cheatSheet: PlainObject = {\n    0: [task.data.cards[0].text, task.data.cards[2].text],\n    1: [task.data.cards[0].text, task.data.cards[3].text],\n    2: [task.data.cards[1].text, task.data.cards[2].text],\n    3: [task.data.cards[1].text, task.data.cards[3].text],\n  };\n\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => (\n        <div key={`vote-${player.id}`} className=\"player-vote\">\n          <Avatar id={player.avatarId} />\n          <div>{player.name}</div>\n          <div key={player.data.value} className=\"task-result-values__text-value\">\n            {cheatSheet[player.data.value][0]} {'+'} {cheatSheet[player.data.value][1]}\n          </div>\n        </div>\n      ))}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","// Components\nimport { Avatar } from 'components/avatars';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\nimport { Candidate } from './TaskNamoroOuAmizade';\n\nexport function VoteNamoroOuAmizade({ task, players, playersList }: VoteComponentProps) {\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => {\n        const index = task.data.heads.findIndex((head: PlainObject) => head.id === player.data.value);\n        return (\n          <div key={`vote-${player.id}`} className=\"player-vote\">\n            <Avatar id={player.avatarId} />\n            <div>{player.name}</div>\n            {index > -1 && (\n              <Candidate\n                key={`date-${player.id}`}\n                head={task.data.heads[index]}\n                body={task.data.bodies[index]}\n                interest={task.data.interests[index]}\n                need={task.data.needs[index]}\n                funFact={task.data.funFacts[index]}\n              />\n            )}\n          </div>\n        );\n      })}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { HouseCard } from 'games/na-rua-do-medo/components/HouseCard';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\n\nexport function VoteNaRuaDoMedo({ task, players, playersList }: VoteComponentProps) {\n  if (task.variant === 'house') {\n    return (\n      <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n        {playersList.map((player) => {\n          const house = task.data.options.find((entry: PlainObject) => entry.id === player.data.value);\n          return (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div>{player.name}</div>\n              <HouseCard card={house} candyLeftover={0} preview={false} />\n            </div>\n          );\n        })}\n      </SpacePlayerCheckWrapper>\n    );\n  }\n\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => {\n        return (\n          <div key={`vote-${player.id}`} className=\"player-vote\">\n            <Avatar id={player.avatarId} />\n            <div className=\"player-vote__name\">{player.name}</div>\n            <div className=\"player-vote__value\">{LETTERS[player.data.value]}</div>\n          </div>\n        );\n      })}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\n\nexport function VoteRetratoFalado({ task, players, playersList }: VoteComponentProps) {\n  const width = useCardWidth(playersList.length + 1, 9, 80, 200, 0, 'results-values');\n\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => {\n        const drawing = task.data.options.find((entry: PlainObject) => entry.playerId === player.data.value);\n        return (\n          <div key={`vote-${player.id}`} className=\"player-vote\">\n            <Avatar id={player.avatarId} />\n            <div>{player.name}</div>\n            {Boolean(drawing) && <CanvasSVG drawing={drawing.drawing} width={width} className=\"a-drawing\" />}\n          </div>\n        );\n      })}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","// Utils\nimport { getMovieTitles } from '../utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\n\nexport function VoteVamosAoCinema({ task, playersList }: VoteComponentProps) {\n  const movies: StringDictionary = getMovieTitles(task.data.movies);\n\n  return (\n    <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n      {playersList.map((player) => {\n        return (\n          <div key={`vote-${player.id}`} className=\"player-vote\">\n            <Avatar id={player.avatarId} />\n            <div>{player.name}</div>\n            <div className=\"player-vote__value\">{movies[player.data.value]}</div>\n          </div>\n        );\n      })}\n    </SpacePlayerCheckWrapper>\n  );\n}\n","import { has, orderBy } from 'lodash';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { ImageBlurButtonContainer, ImageCard } from 'components/cards';\nimport { TDIcon } from 'icons/TDIcon';\nimport { Translate } from 'components/language';\nimport { SpacePlayerCheckWrapper } from './SpacePlayerCheckWrapper';\nimport { SplatterSVG } from './TaskPalhetaDeFores';\nimport { ContenderCard } from './TaskSuperCampeonato';\nimport { VoteArteRuim } from './VoteArteRuim';\nimport { VoteCruzaPalavras } from './VoteCruzaPalavras';\nimport { VoteNamoroOuAmizade } from './VoteNamoroOuAmizade';\nimport { VoteNaRuaDoMedo } from './VoteNaRuaDoMedo';\nimport { VoteRetratoFalado } from './VoteRetratoFalado';\nimport { VoteVamosAoCinema } from './VoteVamosAoCinema';\n\nexport const VotesDelegator = (props: Omit<VoteComponentProps, 'playersList'>) => {\n  const playersList = orderBy(Object.values(props.players), ['data.value', 'name'], ['asc', 'asc']);\n\n  const width = useCardWidth(playersList.length + 3, 9, 50, 120, 8);\n\n  if (!playersList.every((player) => has(player, 'data.value'))) {\n    return <></>;\n  }\n\n  switch (props.task.game) {\n    case 'cruza-palavras':\n      return <VoteCruzaPalavras {...props} playersList={playersList} />;\n    case 'onda-telepatica':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <div className=\"player-vote__value\">\n                {player.data?.value === 'center' && <Translate pt=\"Centro\" en=\"Center\" />}\n                {player.data?.value === 'left' && <Translate pt=\"Esquerda\" en=\"Left\" />}\n                {player.data?.value === 'right' && <Translate pt=\"Direita\" en=\"Right\" />}\n              </div>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'super-campeonato':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <ImageBlurButtonContainer cardId={player.data.value}>\n                <ContenderCard\n                  size={width}\n                  overlayColor={'yellow'}\n                  contender={{\n                    id: player.data.value,\n                    name: { pt: '', en: '' },\n                  }}\n                />\n              </ImageBlurButtonContainer>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'crimes-hediondos':\n    case 'detetives-imaginativos':\n    case 'galeria-de-sonhos':\n    case 'porta-dos-desesperados':\n    case 'testemunha-ocular':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <ImageBlurButtonContainer cardId={player.data.value}>\n                <ImageCard\n                  key={`table-focus-${player.data.value}`}\n                  imageId={player.data.value}\n                  cardWidth={width}\n                  className=\"d-table__image-card\"\n                />\n              </ImageBlurButtonContainer>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'palheta-de-cores':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <SplatterSVG color={player.data.value} style={{ color: player.data.value }} width={48} />\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'fileira-de-fatos':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <div className=\"player-vote__value\">\n                <Translate pt={player.data.value === 'before' ? 'Antes' : 'Depois'} en={player.data.value} />\n              </div>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'namoro-ou-amizade':\n      return <VoteNamoroOuAmizade {...props} playersList={playersList} />;\n    case 'arte-ruim':\n      return <VoteArteRuim {...props} playersList={playersList} />;\n    case 'caminhos-magicos':\n    case 'na-rua-do-medo':\n      return <VoteNaRuaDoMedo {...props} playersList={playersList} />;\n    case 'retrato-falado':\n      return <VoteRetratoFalado {...props} playersList={playersList} />;\n    case 'quem-nao-mata':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <div className=\"player-vote__value\">{props.players[player.data?.value]?.name}</div>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n    case 'vamos-ao-cinema':\n      return <VoteVamosAoCinema {...props} playersList={playersList} />;\n    case 'contadores-historias':\n    case 'dilema-dos-esquiadores':\n    case 'espiao-entre-nos':\n    case 'mente-coletiva':\n    case 'polemica-da-vez':\n    case 'ue-so-isso':\n      return (\n        <SpacePlayerCheckWrapper playersList={playersList} paths={['data.value']}>\n          {playersList.map((player) => (\n            <div key={`vote-${player.id}`} className=\"player-vote\">\n              <Avatar id={player.avatarId} />\n              <div className=\"player-vote__name\">{player.name}</div>\n              <div className=\"player-vote__value\">{player.data?.value}</div>\n            </div>\n          ))}\n        </SpacePlayerCheckWrapper>\n      );\n\n    default:\n      return <TDIcon />;\n  }\n};\n","import { useMemo } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { TrophyOutlined } from '@ant-design/icons';\n// Utils\nimport { sortPlayers } from 'utils/helpers';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDimensions } from 'hooks/useDimensions';\n// Icons\nimport { DJIcon } from 'icons/DJIcon';\nimport { GarbageIcon } from 'icons/GarbageIcon';\nimport { VIPLineIcon } from 'icons/VIPLineIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TimedButton } from 'components/buttons';\nimport { ClubberAvatar } from './components/ClubberAvatar';\nimport { IconAvatar } from 'components/avatars';\nimport { ResultValueDelegator } from './components/ResultValueDelegator';\nimport { TaskTitle } from './components/TaskTitle';\nimport { VotesDelegator } from './components/VotesDelegator';\n\ntype StepResultProps = {\n  user: GamePlayer;\n  players: GamePlayers;\n  onSeeRanking: GenericFunction;\n  round: GameRound;\n  isFirstRunThrough: boolean;\n  task: Task;\n  winningValues: string[];\n  winningTeam: PlayerId[];\n  scoringType: string;\n} & AnnouncementProps;\n\nexport function StepResult({\n  user,\n  players,\n  onSeeRanking,\n  round,\n  isFirstRunThrough,\n  announcement,\n  task,\n  winningValues,\n  winningTeam,\n  scoringType,\n}: StepResultProps) {\n  useTemporarilyHidePlayersBar();\n  const [width, height] = useDimensions('results');\n\n  const time = useCountdown({ duration: 20 });\n\n  const playersList = useMemo(() => sortPlayers(players), [players]);\n\n  const currentIndex = time.timeLeft > 14 ? round.current - 1 : round.current;\n\n  return (\n    <Step announcement={announcement}>\n      <Title size=\"small\">\n        <Translate pt=\"Resultado\" en=\"Results\" />: <TaskTitle task={task} />\n      </Title>\n\n      <Instruction contained>\n        <IconAvatar icon={<DJIcon />} size=\"large\" />\n        {scoringType === 'NORMAL' && (\n          <Translate\n            pt={<>Jogadores que votaram com a maioria entram ou continuam na Área VIP.</>}\n            en={<>Players who voted with the majority join or stay in the VIP area.</>}\n          />\n        )}\n        {scoringType === 'TIE' && (\n          <Translate\n            pt={<>Empate entre 2 ou mais respostas. Quem já estava na Área VIP fica e ganha ponto.</>}\n            en={\n              <>\n                It's a tie for 2 or more answers. Whoever was already in the VIP Area stays there and get\n                points.\n              </>\n            }\n          />\n        )}\n        {scoringType === 'DRAW' && (\n          <Translate\n            pt={<>Cada um escolheu uma coisa diferente? Todo mundo fora da Área VIP!</>}\n            en={<>Did everybody just choose something different? Everybody out!</>}\n          />\n        )}\n      </Instruction>\n\n      <div className=\"results\" id=\"results\">\n        <div className=\"results__vip\">\n          <span className=\"results__icon\">\n            <IconAvatar icon={<VIPLineIcon />} size=\"large\" />\n          </span>\n          <span className=\"results__label\">\n            <Translate pt=\"Área VIP\" en=\"VIP Lounge\" />\n          </span>\n        </div>\n        <div className=\"results__values\" id=\"results-values\">\n          <ResultValueDelegator\n            task={task}\n            winningValues={winningValues}\n            players={players}\n            winningTeam={winningTeam}\n          />\n        </div>\n        <div className=\"results__gutter\">\n          <span className=\"results__icon\">\n            <IconAvatar icon={<GarbageIcon />} size=\"large\" />\n          </span>\n          <span className=\"results__label\">\n            <Translate pt=\"Pista (Sarjeta)\" en=\"GA (Scum)\" />\n          </span>\n        </div>\n\n        {playersList.map((player, index) => (\n          <div\n            className=\"results__player\"\n            key={`${player.id}-${player.clubberId}`}\n            style={getPosition(index, player.team[currentIndex] === 'W' ? 0 : 1, width, height)}\n          >\n            <ClubberAvatar\n              id={player.avatarId}\n              clubberId={player.clubberId}\n              width={45}\n              animate={player.team[currentIndex] === 'W'}\n            />\n            <span className=\"results__player-name\">{player.name}</span>\n          </div>\n        ))}\n      </div>\n\n      <Space className=\"space-container\" align=\"center\">\n        {isFirstRunThrough ? (\n          <TimedButton onClick={onSeeRanking} onExpire={onSeeRanking} duration={20} icon={<TrophyOutlined />}>\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </TimedButton>\n        ) : (\n          <Button onClick={onSeeRanking} icon={<TrophyOutlined />}>\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        )}\n      </Space>\n\n      <VotesDelegator task={task} winningValues={winningValues} players={players} winningTeam={winningTeam} />\n    </Step>\n  );\n}\n\nconst getPosition = (index: number, side: number, width: number, height: number) => {\n  const area = width / 3;\n  const buffer = side * area * 2;\n\n  const top =\n    {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 50,\n      4: 50,\n      5: 100,\n      6: 100,\n      7: 100,\n      8: 150,\n      9: 150,\n    }[index] || 10;\n\n  const left = [0.2, 0.5, 0.8, 0.33, 0.66][index % 5];\n\n  return {\n    top: `${75 + top}px`,\n    left: `${area * left + buffer}px`,\n  };\n};\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Components\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction } from 'components/text';\n\ntype StepRankingProps = {\n  ranking: GameRanking;\n  players: GamePlayers;\n  goToPreviousStep: GenericFunction;\n  round: GameRound;\n};\n\nexport function StepRanking({ ranking, players, goToPreviousStep, round }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate\n          pt={<>Pontos por já estar no Time Vencedor.</>}\n          en={<>Points for already being on the Winning Team.</>}\n        />,\n        <Translate\n          pt={<>Pontos por entrar no Time Vencedor.</>}\n          en={<>Points for joining the Winning Team.</>}\n        />,\n      ]}\n    >\n      <Instruction contained>\n        <Translate\n          pt=\"Somente jogadores na área VIP são ranqueados, porque você não pode ganhar se não estiver lá!\"\n          en=\"Only players in the VIP area can be ranked since you can't win if you're not there\"\n        />\n      </Instruction>\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <AdminNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","import { useEffect, useState } from 'react';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { BouncerIcon } from 'icons/BouncerIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepResult } from './StepResult';\nimport { StepRanking } from './StepRanking';\n\nexport function PhaseResult({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const [isFirstRunThrough, setIsFirstRunThrough] = useState(true);\n\n  // Changes isFirstGalleryRunThrough property which disables controls, after the first gallery run through\n  useEffect(() => {\n    if (isFirstRunThrough && step > 0) {\n      setIsFirstRunThrough(false);\n    }\n  }, [step, isFirstRunThrough]);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<BouncerIcon />}\n      title={<Translate pt=\"Resultado\" en=\"Results\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={4}\n    >\n      <Instruction>\n        <Translate pt=\"Quem vai pra área VIP?\" en=\"So who goes to the VIP area?\" />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.MEGAMIX.RESULT}>\n      <StepSwitcher step={step} conditions={[!user.isReady]} players={players}>\n        {/* Step 0 */}\n        <StepResult\n          players={players}\n          announcement={announcement}\n          onSeeRanking={goToNextStep}\n          user={user}\n          round={state.round}\n          isFirstRunThrough={isFirstRunThrough}\n          task={state.task}\n          winningValues={state.winningValues}\n          winningTeam={state.winningTeam}\n          scoringType={state.scoringType}\n        />\n\n        {/* Step 1 */}\n        <StepRanking\n          ranking={state.ranking}\n          players={players}\n          goToPreviousStep={goToPreviousStep}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { isEqual } from 'lodash';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Icons\nimport { CrownIcon } from 'icons/CrownIcon';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { GameOverWrapper } from 'components/game-over';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\n\nexport function PhaseGameOver({ state, info, players }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon={<CrownIcon />}>\n      {!isEqual(state.winners, state.fairWinners) && (\n        <>\n          <Title size=\"xx-small\">\n            <Translate\n              pt=\"Se a vida fosse justa, quem teria ganhado, com mais pontos, seria:\"\n              en=\"If life was fair, the winner with the most points would've been:\"\n            />\n          </Title>\n          <Instruction contained>\n            <ul className=\"game-over__winners\">\n              {state.fairWinners.map((winner: GamePlayer) => {\n                return (\n                  <li className=\"game-over__winner\" key={`winner-${winner.name}`}>\n                    <Avatar className=\"game-over__avatar\" id={winner.avatarId ?? 25} />\n                    <div className=\"game-over__winner-name\">\n                      <strong>{winner.name ?? '?'}</strong>,{' '}\n                      <DualTranslate>{AVATARS[winner.avatarId].description}</DualTranslate>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </Instruction>\n        </>\n      )}\n    </GameOverWrapper>\n  );\n}\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseTask from './PhaseTask';\n// Sass\nimport './megamix.scss';\nimport { PhaseSeeding } from './PhaseSeeding';\nimport { PhaseResult } from './PhaseResult';\nimport { PhaseGameOver } from './PhaseGameOver';\n\nfunction getActiveComponent(phase: string) {\n  switch (phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.MEGAMIX.SEEDING:\n      return PhaseSeeding;\n    case PHASES.MEGAMIX.TASK:\n      return PhaseTask;\n    case PHASES.MEGAMIX.RESULT:\n      return PhaseResult;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionMegamix({ gameId }: SessionProps) {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.PLUMP_PURPLE,\n        },\n      }}\n    >\n      <Session\n        gameId={gameId}\n        gameCollection={GAME_COLLECTION.MEGAMIX}\n        getActiveComponent={getActiveComponent}\n        backgroundClassName=\"z-background\"\n      />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionMegamix;\n","// Ant Design Resources\nimport { Avatar } from 'antd';\n// Icons\nimport { CandyIcon } from 'icons/CandyIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\n\ntype CandyCountProps = {\n  candyCount: number;\n  size?: 'small' | 'default' | 'large';\n};\n\nexport function CandyCount({ candyCount, size = 'small' }: CandyCountProps) {\n  return (\n    <>\n      <IconAvatar icon={<CandyIcon />} size={size} />\n      <Avatar size={size} style={{ backgroundColor: 'hotPink' }}>\n        {candyCount}\n      </Avatar>\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { CandyCount } from './CandyCount';\n\ntype HouseCardProps = {\n  /**\n   * The candy, monster, jackpot card\n   */\n  card: NCard;\n  /**\n   * The quantity of candy left in the sidewalk\n   */\n  candyLeftover: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Unique id\n   */\n  id?: string;\n  /**\n   * If the house is the last one\n   */\n  active?: boolean;\n  /**\n   * Enables or disables preview\n   */\n  preview?: boolean;\n};\n\nexport function HouseCard({\n  card,\n  candyLeftover,\n  id,\n  className = '',\n  active = false,\n  preview,\n}: HouseCardProps) {\n  const { dualTranslate } = useLanguage();\n\n  const baseClass = 'n-house-card';\n  const cardBaseClass = 'n-house-card__card';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${card.type}`, active && `${baseClass}--active`, className)}\n      id={id}\n    >\n      <div className=\"n-house-card__sidewalk\">\n        {card.type === 'candy' && candyLeftover > 0 && (\n          <Tooltip\n            color=\"hotPink\"\n            title={\n              <Translate\n                pt=\"Doces que não foram divididos entre os jogadores\"\n                en=\"Candy that wasn't shared between players\"\n              />\n            }\n          >\n            <CandyCount candyCount={candyLeftover} />\n          </Tooltip>\n        )}\n      </div>\n      <ImageCard imageId={card.key} cardWidth={80} className={clsx(cardBaseClass)} preview={preview} />\n\n      <h3 className={`${baseClass}__name`}>{dualTranslate(card.name)}</h3>\n\n      {active && (\n        <span\n          className={clsx(`${baseClass}__active`, getAnimationClass('heartBeat', undefined, 'slow', true))}\n        />\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { LETTERS } from 'utils/constants';\n\nexport const getColorModifier = (letter: string) => {\n  const index = LETTERS.indexOf(letter);\n  return Math.abs(index) % 4;\n};\n\nexport const getBracketClass = (\n  num: number,\n  showNeedle: boolean,\n  needle: number,\n  showTarget: boolean,\n  target: number\n): string => {\n  const baseBracketClass = 'o-dial-numbers';\n  const modifier = num % 2 === 0 ? 'even' : 'odd';\n  return clsx(\n    baseBracketClass,\n    `${baseBracketClass}--${modifier}`,\n    showNeedle && needle === num && `${baseBracketClass}--active`,\n    showTarget && target === num && `${baseBracketClass}--target`\n  );\n};\n\nexport const getTargetSide = (target: number, card: any, language: Language): string => {\n  if (!card) {\n    return '';\n  }\n  if (target === 0) {\n    return language === 'pt' ? 'exatamente entre os dois' : 'exactly in between both ideas';\n  }\n\n  const side = target < 0 ? card.left : card.right;\n\n  return language === 'pt' ? `do lado \"${side}\"` : `on the \"${side}\" side`;\n};\n\nexport const getGuessResultClass = (guess: number, target: number): string => {\n  const base = 'o-player-guess__guess';\n  if (target - guess === 0) return `${base}--blue`;\n  if (Math.abs(target - guess) === 1) return `${base}--orange`;\n  if (Math.abs(target - guess) === 2) return `${base}--yellow`;\n  return '';\n};\n\nexport const getPoints = (guess: number, target: number): number => {\n  if (target - guess === 0) return 4;\n  if (Math.abs(target - guess) === 1) return 3;\n  if (Math.abs(target - guess) === 2) return 2;\n  return 0;\n};\n\n/**\n * Counts how many difference guesses are there\n */\nexport const countDifferentGuesses = (regularPlayers: GamePlayer[]): number => {\n  const dict: Record<string, number> = {};\n\n  regularPlayers.forEach((player) => {\n    if (dict[String(player.guess)] === undefined) {\n      dict[String(player.guess)] = 0;\n    }\n    dict[String(player.guess)] += 1;\n  });\n\n  return Object.keys(dict).length;\n};\n","import { ReactNode } from 'react';\n\ntype BookProps = {\n  children?: [ReactNode] | [ReactNode, ReactNode] | [ReactNode, ReactNode, ReactNode];\n};\n\nexport function Book({ children }: BookProps) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      viewBox=\"0 0 725.95 328.66\"\n      style={{ width: '50vw', maxWidth: '500px' }}\n    >\n      <defs>\n        <linearGradient id=\"a\" x1=\"171.8\" x2=\"354.26\" y1=\"170.82\" y2=\"170.82\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#d9d9d9\"></stop>\n          <stop offset=\"1\" stopColor=\"#fff\"></stop>\n        </linearGradient>\n        <linearGradient\n          id=\"b\"\n          x1=\"371.69\"\n          x2=\"554.14\"\n          y1=\"171.43\"\n          y2=\"171.43\"\n          xlinkHref=\"#a\"\n        ></linearGradient>\n        <linearGradient\n          id=\"c\"\n          x1=\"554.14\"\n          x2=\"725.95\"\n          y1=\"178.59\"\n          y2=\"178.59\"\n          xlinkHref=\"#a\"\n        ></linearGradient>\n      </defs>\n      <path\n        fill=\"#6770b3\"\n        d=\"M363 40.45S313.41-5.8 263.85 25.89 158.73 44.64 158.73 44.64v284L363 314.34z\"\n      ></path>\n      <path\n        fill=\"#6770b3\"\n        d=\"M363 40.45S313.41-5.8 263.85 25.89 158.73 44.64 158.73 44.64v284L363 314.34z\"\n      ></path>\n      <path\n        fill=\"#b3b3b3\"\n        d=\"M222.05 310.18c-4.7.87-9 1.56-13 2.11l-1.9.3 147.09-10.1s-51.52-4.77-132.19 7.69z\"\n      ></path>\n      <path\n        fill=\"#ccc\"\n        d=\"M245.56 305.05a407.52 407.52 0 01-23.48 5.12c80.67-12.46 132.21-7.69 132.21-7.69s-51.24-10.58-108.73 2.57z\"\n      ></path>\n      <path\n        fill=\"#e6e6e6\"\n        d=\"M327.62 295a134.29 134.29 0 00-59.08 3.85q-12.45 3.65-23 6.24c57.49-13.15 108.7-2.56 108.7-2.56s-10.07-4.92-26.62-7.53z\"\n      ></path>\n      <path\n        fill=\"#fff\"\n        d=\"M260.85 39.84C226.27 59.2 171.8 61.07 171.8 61.07v251.75s6.95 2.31 25.52.78c2.74-.22 5.74-.53 9-1l2.77-.36q6.6-1.14 13-2.11c6.95-1.29 14.75-3 23.48-5.12q10.58-2.61 23-6.24a134.29 134.29 0 0159.05-3.77c16.55 2.64 26.64 7.52 26.64 7.52V49.84c-38.67-25.84-58.82-29.37-93.41-10z\"\n      ></path>\n      <path\n        fill=\"#6770b3\"\n        d=\"M363 40.45s47.59-38.77 99.1-18.56c54.76 21.48 105.12 22.75 105.12 22.75v284L363 314.34z\"\n      ></path>\n      <path\n        fill=\"#6770b3\"\n        d=\"M363 40.45s47.59-38.77 99.1-18.56c54.76 21.48 105.12 22.75 105.12 22.75v284L363 314.34z\"\n      ></path>\n      <path\n        fill=\"#b3b3b3\"\n        d=\"M503.9 310.18c4.7.87 9 1.56 13 2.11l1.9.3-147.09-10.1s51.52-4.77 132.19 7.69z\"\n      ></path>\n      <path\n        fill=\"#ccc\"\n        d=\"M480.39 305.05a407.52 407.52 0 0023.48 5.12c-80.67-12.46-132.21-7.69-132.21-7.69s51.24-10.58 108.73 2.57z\"\n      ></path>\n      <path\n        fill=\"#e6e6e6\"\n        d=\"M398.33 295a134.3 134.3 0 0159.08 3.85q12.45 3.65 23 6.24c-57.49-13.15-108.7-2.56-108.7-2.56s10.06-4.92 26.62-7.53z\"\n      ></path>\n      <path\n        fill=\"#fff\"\n        d=\"M465.1 37.84c37.28 13.46 89 23.23 89 23.23v251.75s-6.94 2.31-25.51.78c-2.74-.22-5.74-.53-9-1l-2.77-.36q-6.6-1.14-13-2.11a444.4 444.4 0 01-23.48-5.12q-10.57-2.61-23-6.24a134.3 134.3 0 00-59.01-3.77c-16.56 2.64-26.64 7.52-26.64 7.52V49.84c38.67-25.84 55.86-25.56 93.41-12z\"\n      ></path>\n\n      <foreignObject x=\"185\" y=\"63\" width=\"150\" height=\"225\">\n        {Boolean(children && children[0]) && children![0]}\n      </foreignObject>\n\n      <foreignObject x=\"387\" y=\"63\" width=\"150\" height=\"225\">\n        {Boolean(children && children[1]) && children![1]}\n      </foreignObject>\n\n      {Boolean(children && children[2]) && (\n        <path fill=\"#fff\" d=\"M554.14 61.53s69.5-28 171.81-12v251.06s-117-6.94-171.81 12z\"></path>\n      )}\n\n      <foreignObject x=\"566\" y=\"63\" width=\"150\" height=\"225\">\n        {Boolean(children && children[2]) && children![2]}\n      </foreignObject>\n    </svg>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype DoorFrameProps = {\n  children?: ReactNode;\n  className?: string;\n  width?: number;\n  index?: number;\n};\n\nexport function DoorFrame({ children, width, index, className = '' }: DoorFrameProps) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      viewBox=\"0 0 257.1 318.8\"\n      style={Boolean(width) ? { width: `${width}px` } : {}}\n      className={className}\n    >\n      <defs>\n        <linearGradient id=\"d\" x1=\"130.72\" x2=\"130.72\" y1=\"318.8\" y2=\"34.78\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0.03\" stopColor=\"#fdd3b6\"></stop>\n          <stop offset=\"0.31\" stopColor=\"#fbcdaa\"></stop>\n          <stop offset=\"0.81\" stopColor=\"#f5bd89\"></stop>\n          <stop offset=\"1\" stopColor=\"#f3b67b\"></stop>\n        </linearGradient>\n        <linearGradient id=\"a\" x1=\"130.72\" x2=\"130.72\" y1=\"65.32\" y2=\"14.51\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#fdd5b9\"></stop>\n          <stop offset=\"0.32\" stopColor=\"#fdd0b1\"></stop>\n          <stop offset=\"0.97\" stopColor=\"#fcc9a5\"></stop>\n        </linearGradient>\n        <linearGradient id=\"e\" x1=\"130.72\" x2=\"130.72\" y1=\"23.84\" y2=\"4.14\" xlinkHref=\"#a\"></linearGradient>\n        <linearGradient id=\"f\" x1=\"27.14\" x2=\"234.29\" y1=\"46.01\" y2=\"46.01\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#a16261\"></stop>\n          <stop offset=\"0.56\" stopColor=\"#b37572\"></stop>\n          <stop offset=\"1\" stopColor=\"#c48783\"></stop>\n        </linearGradient>\n        <linearGradient id=\"g\" x1=\"128.55\" x2=\"128.55\" y1=\"6.73\" y2=\"0\" xlinkHref=\"#a\"></linearGradient>\n        <linearGradient id=\"h\" x1=\"130.72\" x2=\"130.72\" y1=\"313.13\" y2=\"78.41\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#c48783\"></stop>\n          <stop offset=\"0.44\" stopColor=\"#b37572\"></stop>\n          <stop offset=\"1\" stopColor=\"#a16261\"></stop>\n        </linearGradient>\n        <linearGradient id=\"b\" x1=\"223.42\" x2=\"223.42\" y1=\"230.96\" y2=\"171.86\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#f3b67b\"></stop>\n          <stop offset=\"0.07\" stopColor=\"#f5bb86\"></stop>\n          <stop offset=\"0.24\" stopColor=\"#f8c69b\"></stop>\n          <stop offset=\"0.42\" stopColor=\"#fbcdaa\"></stop>\n          <stop offset=\"0.64\" stopColor=\"#fdd2b3\"></stop>\n          <stop offset=\"0.97\" stopColor=\"#fdd3b6\"></stop>\n        </linearGradient>\n        <linearGradient id=\"i\" x1=\"38\" x2=\"38\" y1=\"230.96\" y2=\"171.86\" xlinkHref=\"#b\"></linearGradient>\n        <linearGradient id=\"c\" x1=\"37.84\" x2=\"226.06\" y1=\"47.43\" y2=\"47.43\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#fcb645\"></stop>\n          <stop offset=\"1\" stopColor=\"#e3a129\"></stop>\n        </linearGradient>\n        <linearGradient id=\"j\" x1=\"38.38\" x2=\"38.38\" y1=\"198.04\" y2=\"193.37\" xlinkHref=\"#c\"></linearGradient>\n        <linearGradient\n          id=\"k\"\n          x1=\"223.04\"\n          x2=\"223.04\"\n          y1=\"198.04\"\n          y2=\"193.37\"\n          xlinkHref=\"#c\"\n        ></linearGradient>\n        <linearGradient id=\"l\" x1=\"43.98\" x2=\"217.44\" y1=\"313.74\" y2=\"313.74\" gradientUnits=\"userSpaceOnUse\">\n          <stop offset=\"0\" stopColor=\"#623c57\"></stop>\n          <stop offset=\"1\" stopColor=\"#3d1931\"></stop>\n        </linearGradient>\n      </defs>\n      <g style={{ isolation: 'isolate' }}>\n        <path\n          fill=\"url(#d)\"\n          d=\"M236.27 34.78l-.6 30.02-.22 11.41-2.95 150.6-.2 10.11-1.6 81.88H30.74L25.99 76.21l-.23-11.41-.59-30.02h211.1z\"\n        ></path>\n        <path\n          d=\"M235.67 64.8l-.22 11.41H25.99l-.23-11.41h209.91z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.7\"\n        ></path>\n        <path fill=\"url(#a)\" d=\"M16.7 14.51h228.02v50.81H16.7z\"></path>\n        <path\n          d=\"M16.7 14.51h228.02V31.1H16.7z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.55\"\n        ></path>\n        <path\n          fill=\"url(#e)\"\n          d=\"M252.77 4.14l-.09.53-1.28 6.73-2.34 12.44H12.38L10.04 11.4 8.76 4.67l-.1-.53h244.11z\"\n        ></path>\n        <path fill=\"url(#f)\" d=\"M27.14 35.51h207.15v21H27.14z\"></path>\n        <path\n          d=\"M31.78 39.01h202.51v-3.5H27.14v21h4.64v-17.5z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.85\"\n        ></path>\n        <path fill=\"#f3b67b\" d=\"M220.07 79.83l-1.84 228.64h5.06l4.16-228.64h-7.38z\"></path>\n        <path\n          d=\"M220.7 307.95l1.84-228.12h-2.47l-1.84 228.64h5.06l.02-.52h-2.61z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.5\"\n        ></path>\n        <path fill=\"#fee0cc\" d=\"M226.05 79.83l-4.15 228.25h-3.67v.39h5.06l4.16-228.64h-1.4z\"></path>\n        <path fill=\"#f3b67b\" d=\"M34.25 79.6l4.4 228.6 5.06-.23-2.08-228.65-7.38.28z\"></path>\n        <path\n          d=\"M41.11 307.64L36.72 79.55l-2.47.05 4.4 228.6 5.06-.23v-.52l-2.6.19z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.5\"\n        ></path>\n        <path fill=\"#fee0cc\" d=\"M40.23 79.35l2.08 228.26-3.67.21.01.38 5.06-.23-2.08-228.65-1.4.03z\"></path>\n        <path fill=\"#f3b67b\" d=\"M53.68 23.84h-12.3L40 7.77l-1.15-3.64h14.38l-.44 2.6z\"></path>\n        <path\n          fill=\"#f3b67b\"\n          d=\"M147.26.9l-.32 3.24-1.93 19.7h-26.86l.33-19.7.02-1.29L147.26.9z\"\n          opacity=\"0.5\"\n        ></path>\n        <path\n          d=\"M252.68 4.67l-1.28 6.73H10.04L8.76 4.67h243.92z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.55\"\n        ></path>\n        <path fill=\"url(#g)\" d=\"M0 0h257.1v6.73H0z\"></path>\n        <path\n          d=\"M188.24 0l-.5 6.74h-22.52l.24-6.74h22.78zM98.41 0l-.06 6.74h-39.4L58 0h40.41z\"\n          style={{ mixBlendMode: 'lighten' }}\n          fill=\"#fff\"\n          opacity=\"0.35\"\n        ></path>\n        <path\n          fill=\"url(#h)\"\n          d=\"M213.58 78.41l-.43 24.81-.17 9.44-3.49 200.47H51.95l-3.5-200.47-.16-9.44-.44-24.81h165.73z\"\n        ></path>\n        <path\n          d=\"M232.5 226.81l-.2 10.11h-21.48l.17-10.11h21.51z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path\n          fill=\"url(#b)\"\n          d=\"M237.27 173.42l-.26 5.44-.11 2.26-.11 2.66-.45 9.59-.22 4.67-.11 2.15-1.39 29.47h-25.04l.14-29.47.02-2.15.02-2.33v-2.34l.06-9.59.02-2.66v-2.26l.03-5.44h27.4z\"\n        ></path>\n        <path\n          d=\"M237.01 178.86l-.22 4.92h-26.97l.02-4.92h27.17z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path fill=\"#fddbc5\" d=\"M240.6 181.13h-31.03v-8.04h32.27l-1.24 8.04z\"></path>\n        <path\n          d=\"M50.62 236.92h-21.5l-.2-10.11h21.53l.17 10.11z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path\n          fill=\"url(#i)\"\n          d=\"M51.84 229.66H26.8l-1.39-29.47-.11-2.15-.22-4.67-.45-9.59-.11-2.66-.11-2.26-.26-5.44h27.4l.03 5.44v2.27l.02 2.65.06 9.59v2.34l.01 2.33.02 2.15.15 29.47z\"\n        ></path>\n        <path\n          d=\"M24.4 178.86l.23 4.92h26.96l-.01-4.92H24.4z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path fill=\"#fddbc5\" d=\"M20.81 181.13h31.03v-8.04H19.57l1.24 8.04z\"></path>\n        <path fill=\"#bb7d2a\" d=\"M36.91 42.51h190.08v9.85H36.91z\"></path>\n        <path fill=\"url(#c)\" d=\"M37.84 43.28h188.22v8.29H37.84z\"></path>\n        <path\n          d=\"M99.34 52.35H64.85l-6.77-9.84h34.47l6.79 9.84zm27.03 0H113.4l-6.79-9.84h12.99l6.77 9.84z\"\n          style={{ mixBlendMode: 'overlay' }}\n          fill=\"#fff\"\n          opacity=\"0.35\"\n        ></path>\n        <path\n          d=\"M51.69 200.19H25.41l-.11-2.15-.11-2.33h26.47l.01 2.33.02 2.15z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path fill=\"url(#j)\" d=\"M51.67 198.04H25.3l-.22-4.67h26.58v2.34l.01 2.33z\"></path>\n        <path\n          d=\"M37.24 198.04h-3.48l-5.57-4.67h10.49l-1.44 4.67z\"\n          style={{ mixBlendMode: 'overlay' }}\n          fill=\"#fff\"\n          opacity=\"0.35\"\n        ></path>\n        <path\n          d=\"M236.23 195.71l-.11 2.33-.11 2.15h-26.29l.02-2.15.02-2.33h26.47z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#c48783\"\n          opacity=\"0.65\"\n        ></path>\n        <path fill=\"url(#k)\" d=\"M236.34 193.37l-.22 4.67h-26.38l.02-2.33v-2.34h26.58z\"></path>\n        <path\n          d=\"M222.26 198.04h-3.48l-5.57-4.67h10.48l-1.43 4.67z\"\n          style={{ mixBlendMode: 'overlay' }}\n          fill=\"#fff\"\n          opacity=\"0.35\"\n        ></path>\n        <path fill=\"url(#l)\" d=\"M43.98 308.69h173.47v10.11H43.98z\"></path>\n        <path\n          d=\"M75.98 308.69L74.9 318.8H56.5l-.65-10.11h20.13z\"\n          style={{ mixBlendMode: 'lighten' }}\n          fill=\"#fff\"\n          opacity=\"0.35\"\n        ></path>\n        <path\n          d=\"M138.19 308.68c-.21 3.47-.39 6.93-.56 10.11h-18.92l-1.08-10.11z\"\n          style={{ mixBlendMode: 'lighten' }}\n          fill=\"#fff\"\n          opacity=\"0.15\"\n        ></path>\n        <path\n          d=\"M199.58 308.68l-.6 10.11h-9l-1-10.11zM87.41 308.69l-.56 10.11h-5.97l-1.69-10.11h8.22z\"\n          style={{ mixBlendMode: 'multiply' }}\n          fill=\"#98616c\"\n          opacity=\"0.45\"\n        ></path>\n        <path\n          fill=\"#fff67e\"\n          stroke=\"#231f20\"\n          strokeMiterlimit=\"10\"\n          d=\"M54.95 84.1h150v225h-150z\"\n          opacity=\"0.59\"\n        ></path>\n\n        <foreignObject x=\"53\" y=\"82\" width=\"150\" height=\"225\">\n          {children}\n        </foreignObject>\n      </g>\n\n      {index === 0 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M143.46 61.65l-3.94-8.88h-18.29l-4 8.88h-3.89l15.32-33.84h3.55l15.31 33.84zm-20.74-12.29H138l-7.6-17.14z\"\n        ></path>\n      )}\n      {index === 1 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M143.12 36.45a8.12 8.12 0 01-5.32 7.82c4 1.2 7.2 3.51 7.2 8.16 0 5.81-4.85 9.22-12.2 9.22h-14.93v-33.6h14.31c6.62 0 10.94 3.26 10.94 8.4zm-3.84.52c0-3.36-2.64-5.52-7.44-5.52h-10.22V43h9.93c4.57 0 7.73-2 7.73-6zm1.88 15.22c0-3.7-3.08-5.81-8.93-5.81h-10.61v11.86h11.28c5.1 0 8.26-2.24 8.26-6.05z\"\n        ></path>\n      )}\n      {index === 2 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M132.85 62.22c-9.7 0-16.85-7.63-16.85-17.33s7.11-17.42 17-17.42a17.48 17.48 0 0113.1 5.33l-2.59 2.78c-2.83-2.69-6-4.61-10.56-4.61-7.44 0-13 6-13 13.83s5.61 13.92 13 13.92c4.61 0 7.63-1.78 10.85-4.85l2.49 2.45c-3.5 3.55-7.29 5.9-13.44 5.9z\"\n        ></path>\n      )}\n      {index === 3 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M128.1 61.65h-11.67v-33.6h11.67c10.56 0 17.86 7.24 17.86 16.75s-7.3 16.85-17.86 16.85zm0-30.1h-7.87v26.59h7.87c8.49 0 13.92-5.76 13.92-13.25s-5.43-13.34-13.92-13.34z\"\n        ></path>\n      )}\n      {index === 4 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M122.91 31.5V43h18.34v3.46h-18.34v11.73h20.74v3.46h-24.53v-33.6h24.29v3.45z\"\n        ></path>\n      )}\n      {index === 5 && (\n        <path fill=\"#3d1931\" d=\"M123.25 31.55v12h18.19V47h-18.19v14.65h-3.79v-33.6h24.14v3.5z\"></path>\n      )}\n      {index === 6 && (\n        <path\n          fill=\"#3d1931\"\n          d=\"M132 62.22c-10.56 0-17.09-7.68-17.09-17.33 0-9.26 6.77-17.42 16.85-17.42a17.72 17.72 0 0112.53 4.46l-2.45 2.88A14.32 14.32 0 00131.6 31c-7.44 0-12.77 6.29-12.77 13.83 0 8.06 5.14 14 13.3 14a15.86 15.86 0 009.7-3.36V47.1H131.6v-3.41h13.88v13.4A20.39 20.39 0 01132 62.22z\"\n        ></path>\n      )}\n    </svg>\n  );\n}\n","export function GuessIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ff7b79\"\n        d=\"M440.447 428.072c16.619-20.939 26.55-47.426 26.55-76.235 0-10.548-1.332-20.784-3.835-30.552C486.593 305.468 502 278.671 502 248.273c0-46.528-36.106-84.599-81.824-87.786 8.812-12.864 13.976-28.424 13.976-45.194 0-44.226-35.853-80.079-80.079-80.079-16.63 0-32.075 5.072-44.876 13.75C291.326 25.298 262.961 10 231.021 10c-52.976 0-96.118 42.078-97.843 94.635a90.44 90.44 0 00-20.196-2.297c-49.845 0-90.252 40.407-90.252 90.252 0 23.113 8.698 44.187 22.987 60.153C24.019 269.226 10 295.294 10 324.644c0 49.845 40.407 90.252 90.252 90.252a89.959 89.959 0 0034.438-6.82c7.846 41.85 44.552 73.528 88.68 73.528 23.152 0 44.26-8.727 60.236-23.059 17.893 10.194 38.596 16.021 60.662 16.021 13.373 0 26.243-2.147 38.293-6.101C397.207 488.77 421.051 502 448 502a80.272 80.272 0 0036.406-8.691c-24.354-12.346-41.598-36.675-43.959-65.237z\"\n      ></path>\n      <path\n        fill=\"#80b4ff\"\n        d=\"M256 321.511c-12.15 0-22-9.85-22-22v-29.93c0-20.685 13.741-39.232 33.416-45.103 17.141-5.115 28.817-21.21 28.395-39.14-.492-20.923-17.915-38.346-38.837-38.838-10.842-.264-21.061 3.765-28.795 11.319-7.739 7.559-12.001 17.677-12.001 28.491 0 12.15-9.85 22-22 22s-22-9.85-22-22c0-22.763 8.969-44.061 25.256-59.968 16.282-15.904 37.795-24.35 60.575-23.831 21.541.507 41.857 9.239 57.205 24.586 15.347 15.347 24.079 35.663 24.586 57.205.888 37.708-23.704 71.567-59.802 82.339-1.157.345-1.997 1.582-1.997 2.94v29.93c-.001 12.15-9.851 22-22.001 22z\"\n      ></path>\n      <circle cx=\"256\" cy=\"387.511\" r=\"22\" fill=\"#80b6ff\"></circle>\n      <path d=\"M448 512c-26.624 0-51.955-11.846-69.1-32.008a132.764 132.764 0 01-34.632 4.574c-20.67 0-41.073-4.833-59.431-14.027a100.05 100.05 0 01-61.467 21.065c-44.32 0-82.912-29.039-95.741-70.502a99.87 99.87 0 01-27.377 3.794c-14.572 0-28.629-3.061-41.78-9.097-5.02-2.304-7.221-8.241-4.917-13.26 2.304-5.02 8.239-7.223 13.26-4.917 10.515 4.826 21.765 7.273 33.437 7.273 10.584 0 20.886-2.04 30.619-6.061a9.997 9.997 0 0113.648 7.399c7.1 37.878 40.262 65.371 78.851 65.371a80.093 80.093 0 0053.559-20.503 10.002 10.002 0 0111.628-1.245c16.892 9.624 36.156 14.71 55.711 14.71 12.011 0 23.846-1.885 35.175-5.603a10 10 0 0111.228 3.651C403.942 481.015 425.374 492 448 492a70.69 70.69 0 0014.335-1.451c-18.115-15.394-29.869-37.631-31.854-61.653a9.998 9.998 0 012.133-7.04c15.951-20.097 24.382-44.309 24.382-70.019 0-9.505-1.185-18.949-3.522-28.07a10 10 0 014.092-10.77C479.128 298.442 492 274.247 492 248.273c0-40.797-31.854-74.976-72.519-77.811a10 10 0 01-7.555-15.627c7.998-11.676 12.226-25.349 12.226-39.542 0-38.642-31.437-70.079-70.079-70.079-14.081 0-27.659 4.159-39.265 12.027a10 10 0 01-13.592-2.251C284.425 32.753 258.84 20 231.021 20c-47.698 0-86.285 37.32-87.849 84.963a10 10 0 01-12.224 9.421 80.714 80.714 0 00-17.966-2.045c-44.251 0-80.252 36-80.252 80.251a80.105 80.105 0 0020.438 53.485 10 10 0 01-1.403 14.631C31.578 276.042 20 299.346 20 324.644c0 3.576.237 7.171.704 10.684.728 5.475-3.12 10.503-8.595 11.23-5.479.732-10.503-3.12-11.231-8.595A101.374 101.374 0 010 324.644c0-28.153 11.475-54.328 31.801-73.246a100.049 100.049 0 01-19.071-58.809c0-55.279 44.973-100.251 100.252-100.251 3.716 0 7.446.211 11.165.631 3.278-23.739 14.329-45.625 31.771-62.539C176.155 10.807 202.827 0 231.021 0c31.109 0 59.94 12.989 80.405 35.933 13.057-7.035 27.633-10.718 42.647-10.718 49.67 0 90.079 40.409 90.079 90.079 0 13.063-2.789 25.788-8.148 37.475C479.656 162.844 512 202.2 512 248.273a97.95 97.95 0 01-37.623 77.212 133.55 133.55 0 012.62 26.352c0 28.874-9.034 56.146-26.172 79.144 3.133 22.718 17.472 42.95 38.104 53.409a10 10 0 010 17.838C476.138 508.712 462.368 512 448 512z\"></path>\n      <path d=\"M256 331.511c-17.645 0-32-14.355-32-32v-29.93c0-25.072 16.677-47.56 40.557-54.686 12.832-3.829 21.573-15.887 21.257-29.322-.369-15.664-13.412-28.707-29.076-29.076-8.09-.192-15.773 2.812-21.572 8.476-5.796 5.661-8.988 13.239-8.988 21.337 0 17.645-14.355 32-32 32s-32-14.355-32-32c0-25.479 10.04-49.317 28.269-67.121 18.205-17.782 42.281-27.246 67.79-26.675 24.131.568 46.875 10.339 64.048 27.512s26.944 39.917 27.512 64.04c.951 40.387-24.216 76.83-61.796 90.458v24.985C288 317.156 273.645 331.511 256 331.511zm-.035-195.023c.417 0 .833.005 1.252.015 26.173.616 47.975 22.417 48.591 48.6.528 22.425-14.083 42.558-35.532 48.958-15.471 4.616-26.276 19.223-26.276 35.52v29.93c0 6.617 5.383 12 12 12s12-5.383 12-12v-29.93c0-5.768 3.758-10.917 9.139-12.522 31.789-9.486 53.445-39.308 52.663-72.521-.447-18.96-8.139-36.848-21.66-50.369s-31.409-21.213-50.369-21.66c-20.078-.452-39.028 6.997-53.352 20.988-14.344 14.01-22.243 32.766-22.243 52.814 0 6.617 5.383 12 12 12s12-5.383 12-12c0-13.53 5.332-26.189 15.013-35.645 9.389-9.171 21.695-14.178 34.774-14.178zM256 419.511c-17.645 0-32-14.355-32-32s14.355-32 32-32 32 14.355 32 32-14.355 32-32 32zm0-44c-6.617 0-12 5.383-12 12s5.383 12 12 12 12-5.383 12-12-5.383-12-12-12zM27.71 388.35c-2.63 0-5.21-1.07-7.07-2.93a10.093 10.093 0 01-2.93-7.07c0-2.64 1.07-5.211 2.93-7.08a10.068 10.068 0 017.07-2.92c2.63 0 5.21 1.06 7.07 2.92s2.93 4.44 2.93 7.08c0 2.63-1.07 5.21-2.93 7.07s-4.44 2.93-7.07 2.93z\"></path>\n    </svg>\n  );\n}\n","export function ImageCardsIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M319.463 421.666H82.093c-10.698 0-19.37-8.672-19.37-19.37V26.87c0-10.698 8.672-19.37 19.37-19.37h237.371c10.698 0 19.37 8.672 19.37 19.37v375.426c-.001 10.698-8.673 19.37-19.371 19.37z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M319.463 7.5h-20.63v310.431c0 46.246-37.49 83.735-83.735 83.735H62.722v.63c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V26.87c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#da387d\"\n        d=\"M301.142 247.455l-9.036 54.215c-4.902 29.412-30.349 50.969-60.166 50.969a41.902 41.902 0 01-29.629-12.273 2.167 2.167 0 00-3.066 0 41.902 41.902 0 01-29.629 12.273c-29.817 0-55.264-21.557-60.166-50.969l-9.036-54.215c-5.277-31.661 19.139-60.483 51.237-60.483a51.947 51.947 0 0136.73 15.214c6.847 6.847 17.948 6.847 24.794 0a51.944 51.944 0 0136.73-15.214c32.098 0 56.514 28.822 51.237 60.483z\"\n      ></path>\n      <path fill=\"#d80a61\" d=\"M298.833 261.305l2.308-13.85c1.521-9.123.576-18.011-2.308-26.041z\"></path>\n      <path\n        fill=\"#8078bc\"\n        d=\"M151.651 186.972a51.947 51.947 0 0136.73 15.214c6.847 6.847 17.948 6.847 24.794 0a51.944 51.944 0 0136.73-15.214c21.47 0 39.503 12.896 47.512 30.911V122.53a4.586 4.586 0 00-4.586-4.586H108.725a4.586 4.586 0 00-4.586 4.586v95.353c8.009-18.015 26.042-30.911 47.512-30.911zM292.106 301.67c-4.902 29.412-30.349 50.969-60.166 50.969a41.902 41.902 0 01-29.629-12.273 2.167 2.167 0 00-3.066 0 41.902 41.902 0 01-29.629 12.273c-29.817 0-55.264-21.557-60.166-50.969l-5.311-31.865v105.859a4.586 4.586 0 004.586 4.586h184.107a4.586 4.586 0 004.586-4.586V269.805z\"\n      ></path>\n      <path\n        fill=\"#6b61b1\"\n        d=\"M297.417 375.664v-42.315c-3.44 18.484-12.953 34.834-26.389 46.901h21.804a4.586 4.586 0 004.585-4.586z\"\n      ></path>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M429.908 90.333h-91.074v311.963c0 10.698-8.672 19.37-19.37 19.37H173.167v63.463c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V109.703c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M429.908 90.333h-20.63v310.431c0 46.246-37.49 83.735-83.735 83.735H173.167v.63c0 10.698 8.672 19.37 19.37 19.37h237.371c10.698 0 19.37-8.672 19.37-19.37V109.703c0-10.698-8.672-19.37-19.37-19.37z\"\n      ></path>\n      <path\n        fill=\"#f4dd45\"\n        d=\"M338.834 232.111v170.185c0 10.698-8.672 19.37-19.37 19.37h-59.93c15.211 8.781 32.864 13.806 51.69 13.806 57.185 0 103.542-46.357 103.542-103.542-.002-47.622-32.153-87.736-75.932-99.819z\"\n      ></path>\n      <path\n        fill=\"#f1d333\"\n        d=\"M409.278 365.273c3.557-10.463 5.486-21.677 5.486-33.343s-1.929-22.88-5.486-33.343z\"\n      ></path>\n      <path\n        fill=\"#86f1a7\"\n        d=\"M338.834 278.693v106.474c43.78-6.444 75.931-27.838 75.931-53.237-.001-25.398-32.152-46.792-75.931-53.237z\"\n      ></path>\n      <path\n        fill=\"#80e29d\"\n        d=\"M409.278 349.713c3.557-5.58 5.486-11.561 5.486-17.783s-1.929-12.203-5.486-17.783z\"\n      ></path>\n      <path\n        fill=\"#7ad0df\"\n        d=\"M407.861 294.681v-89.318a4.586 4.586 0 00-4.586-4.586h-64.442v31.334c31.709 8.752 57.317 32.207 69.028 62.57zm-96.639 140.791c-18.826 0-36.478-5.025-51.69-13.806h-44.949v36.831a4.586 4.586 0 004.586 4.586h184.107a4.586 4.586 0 004.586-4.586V369.18c-14.958 38.78-52.586 66.292-96.64 66.292z\"\n      ></path>\n      <path\n        fill=\"#70c6da\"\n        d=\"M407.861 458.497v-42.315c-3.44 18.484-12.953 34.834-26.389 46.901h21.804a4.586 4.586 0 004.585-4.586z\"\n      ></path>\n      <path d=\"M145.556 97.833a7.5 7.5 0 007.5-7.5V55.819c0-15.554-12.654-28.208-28.208-28.208S96.64 40.265 96.64 55.819v34.514a7.5 7.5 0 0015 0V70.222h26.417v20.111a7.499 7.499 0 007.499 7.5zm-20.709-55.222c7.083 0 12.882 5.604 13.195 12.611h-26.389c.313-7.007 6.112-12.611 13.194-12.611z\"></path>\n      <path d=\"M449.278 180.356a7.5 7.5 0 007.5-7.5v-63.153c0-14.816-12.054-26.871-26.87-26.871h-83.574V26.87c0-14.816-12.054-26.87-26.87-26.87H199.592a7.5 7.5 0 000 15h119.872c6.545 0 11.87 5.325 11.87 11.87v375.426c0 6.545-5.325 11.87-11.87 11.87H82.093c-6.545 0-11.871-5.325-11.871-11.87V26.87c0-6.545 5.325-11.87 11.871-11.87h82.499a7.5 7.5 0 000-15H82.093C67.276 0 55.222 12.054 55.222 26.87v375.426c0 14.816 12.054 26.87 26.871 26.87h83.574v55.963c0 14.816 12.054 26.871 26.87 26.871h237.371c14.816 0 26.87-12.054 26.87-26.871V207.856a7.5 7.5 0 00-15 0v277.273c0 6.545-5.325 11.871-11.87 11.871H192.537c-6.545 0-11.87-5.325-11.87-11.871v-55.963h26.417v29.331c0 6.664 5.421 12.085 12.085 12.085h29.282a7.5 7.5 0 000-15h-26.367v-26.417h35.479c41.673 23.035 95.759 17.569 132.129-18.833a112.935 112.935 0 0010.67-12.339v57.588H283.451a7.5 7.5 0 000 15h119.825c6.664 0 12.085-5.421 12.085-12.085v-88.043c9.28-24.951 9.133-52.488 0-77.169v-87.923c0-6.664-5.421-12.086-12.085-12.086h-56.942V97.833h83.574c6.545 0 11.87 5.325 11.87 11.871v63.153a7.5 7.5 0 007.5 7.499zM346.333 287.611c35.72 7.224 60.841 25.134 60.93 44.217v.265c-.143 19.06-25.249 36.939-60.93 44.155zm0-15.282v-29.832c23.977 9.374 42.714 27.79 52.77 50.6-13.123-9.529-31.229-16.832-52.77-20.768zm-13.342 153.177c7.974-4.666 13.342-13.322 13.342-23.21v-10.765c21.554-3.938 39.669-11.248 52.794-20.786-12.046 27.308-36.432 47.905-66.136 54.761zm67.37-217.229v57.339a110.629 110.629 0 00-54.028-39.062v-18.277z\"></path>\n      <path d=\"M292.831 110.444H108.725c-6.664 0-12.085 5.421-12.085 12.085v93.839a59.35 59.35 0 00-3.623 32.319l3.623 21.739v105.237c0 6.664 5.421 12.086 12.085 12.086h184.106c6.664 0 12.086-5.422 12.086-12.086V270.426l3.623-21.738a59.35 59.35 0 00-3.623-32.319v-93.84c0-6.663-5.422-12.085-12.086-12.085zM111.556 268.689a6.306 6.306 0 00-.041-.246l-3.703-22.22a44.362 44.362 0 019.928-36.034c16.727-19.746 46.877-21.159 65.338-2.699 9.759 9.759 25.641 9.76 35.401 0 8.395-8.394 19.555-13.017 31.426-13.017 13.09 0 25.451 5.729 33.912 15.717s12.08 23.122 9.928 36.033c-5.109 30.643-3.41 20.247-3.743 22.459l-5.293 31.756c-4.317 25.901-26.509 44.701-52.769 44.701-9.189 0-17.828-3.578-24.325-10.076-1.826-1.826-4.254-2.832-6.836-2.832s-5.01 1.005-6.836 2.832c-6.498 6.498-15.137 10.076-24.326 10.076-26.259 0-48.452-18.8-52.769-44.701zm178.361-143.245v69.506c-22.997-20.957-58.86-20.827-81.639 1.53v-19.626c0-7.932 4.407-15.062 11.501-18.61a7.499 7.499 0 003.354-10.062 7.499 7.499 0 00-10.062-3.354c-12.209 6.104-19.793 18.376-19.793 32.026v19.626c-11.18-10.973-25.939-17.009-41.627-17.009a59.324 59.324 0 00-40.012 15.478v-69.506h178.278zM111.639 372.75v-44.537c12.201 19.413 33.736 31.926 57.977 31.926 11.489 0 22.379-3.895 31.162-11.061 8.783 7.166 19.672 11.061 31.162 11.061 24.242 0 45.776-12.513 57.977-31.926v44.538H111.639z\"></path>\n    </svg>\n  );\n}\n"],"names":["MonsterCard","currentMonster","showControls","cardWidth","props","useGlobalState","monsterOrientation","setMonsterOrientation","defaultCardWidth","useCardWidth","useEffectOnce","orientation","baseClass","direction","align","imageId","id","className","clsx","onClick","RotateRightOutlined","RotateLeftOutlined","pt","en","MovieCard","movie","disableSuffix","disablePrefix","prefixColor","suffixColor","style","backgroundColor","suffix","prefix","MovieReviewCard","type","text","highlights","highlightClassName","searchWords","autoEscape","textToHighlight","CardHighlight","children","iconSize","icon","MetricHighlight","iconPlacement","size","PlayersHighlight","PointsHighlight","GainedPoint","gainedPoint","order","description","isPositive","isNegative","title","color","GainedPoints","gainedPoints","playerId","gainedPointsDescriptions","points","Array","isArray","map","index","RankingBoard","players","ranking","hideGainedPoints","delay","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useDimensions","height","maxPoints","useMemo","Math","max","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","position","previousScore","useEffect","length","hPosition","top","CrownFilled","avatarId","name","undefined","StepRankingWrapper","subtitle","useTemporarilyHidePlayersBar","CaretUpOutlined","BookPages","leftPage","rightPage","viewBox","d","fill","x","y","width","getMovieTitles","movies","A","B","C","D","TaskIcon","task","game","PictureIcon","PathIcon","FairyTaleIcon","CrimeSceneIcon","CrossWordsIcon","DetectiveIcon","SkiingIcon","PassportIcon","QueueIcon","DreamIcon","SheepIcon","LoveIcon","TrickOrTreatIcon","WavelengthDeviceIcon","ColorWheelIcon","TrendingIcon","MagicDoorIcon","RevolverIcon","MonsterIcon","BoxingGlovesIcon","CriminalIcon","GuessIcon","MovieTheaterIcon","TDIcon","TITLES","INSTRUCTIONS","TaskInstructions","dualTranslate","useLanguage","instruction","ClubLine","currentRound","playersList","sortPlayers","winners","filter","player","team","losers","ClubberAvatar","clubberId","animate","VIPLineIcon","clues","mockSeeding","seeds","data","forEach","seed","card","JSON","stringify","mockDrawing","ids","cards","portal","getRandomItem","fact","round","random","wave","likeTopic","outfits","mockSelection","options","propertyName","mockText","MinigameTitle","current","TaskArteRuim","onSubmitTask","user","isLoading","useLoading","onSelect","value","useMock","variant","contained","drawing","option","disabled","ready","header","LETTERS","getColorFromIndex","shape","loading","TaskCaminhosMagicos","String","portals","IconAvatar","TreeOneIcon","TreeTwoIcon","TreeThreeIcon","MapIcon","Object","values","arr","Fragment","RightSquareOutlined","TaskContadoresHistorias","clue","setClue","onSubmitClue","cardId","onChange","e","target","onPressEnter","TaskCrimesHediondos","Boolean","scenes","causeOfDeath","SceneTile","tile","crimeIndexes","reasonForEvidence","location","sceneA","sceneB","sceneC","content","toUpperCase","maxWidth","i","isActive","CheckCircleFilled","SpreadsheetGrid","columns","rows","topLeftCorner","gridTemplateColumns","gridTemplateRows","role","SpreadsheetCell","TaskCruzaPalavras","translate","CellPlusButton","rest","PlusCircleFilled","TaskDetetivesImaginativos","language","table","bot","BOTS_LIST","AVATARS","TaskDilemaDosEsquiadores","dilemma","left","right","prompt","SnowHillIcon","TaskEspiaoEntreNos","answer","setAnswer","onSubmitAnswer","roles","roleIndex","question","placeholder","TaskFileiraDeFatos","revealedIndex","findIndex","getRevealedEntry","Chevron","reveal","getAvatarColorById","ChevronImage","xmlns","opacity","TaskGaleriaDeSonhos","theme","TaskMenteColetiva","TaskNamoroOuAmizade","heads","head","Candidate","body","bodies","interest","interests","need","needs","funFact","funFacts","TaskNaRuaDoMedo","h","house","HouseCard","candyLeftover","preview","TaskOndaTelepatica","setPosition","cardSideClass","onMouseEnter","getColorModifier","ArrowLeftOutlined","MinusOutlined","ArrowRightOutlined","TaskPalhetaDeCores","palette","wrap","read","SplatterSVG","SocialProfile","handle","verified","TaskPolemicaDaVez","TaskPortaDosDesesperados","doorWidth","doors","DoorFrame","Book","book","TaskQuemNaoMata","keys","ShooterIcon","TaskRetratoFalado","TaskSuperCampeonato","contenders","challenge","contender","ContenderCard","overlayColor","hideName","isBlurred","shouldBeBlurred","useBlurCards","imageURL","replace","src","PUBLIC_URL","alt","process","fallback","TaskTestemunhaOcular","suspects","SpeechBubbleAcceptedIcon","SpeechBubbleDeclinedIcon","suspect","TaskUeSoIsso","toLowerCase","SuggestionEasel","onChangeInput","overflow","bordered","autoComplete","TaskVamosAoCinema","reviews","good","bad","background","StepTask","announcement","Component","FallbackComponent","fullWidth","_","TaskTitle","DJInstructions","total","airHorn","require","DJPruPruPruSound","volume","useAudio","autoPlay","audio","controls","state","info","useUser","useStep","step","setStep","goToNextStep","request","useAPICall","apiFunction","MEGAMIX_API","actionName","onSuccess","successMessage","errorMessage","payload","action","useOnSubmitTaskAPIRequest","phase","allowedPhase","PHASES","conditions","isReady","DJIcon","DJAnnouncementTitle","onClose","unskippable","SeedArteRuim","updateData","lines","setLines","isTimesUp","setTimesUp","start","isRunning","TimeHighlight","ArteRuimTimerSound","PanicIcon","padding","NOOP","SeedCaminhosMagicos","BikiniModelIcon","HeartOutlined","MessageOutlined","SendOutlined","capitalize","SeedClubber","onSubmitData","clubbers","cId","label","now","moment","format","SeedFileiraDeFatos","setValue","min","margin","block","leftSide","SeedOndaTelepatica","SeedPolemicaDaVez","LikeFilled","DislikeFilled","arteRuimTimer","SeedRetratoFalado","hand","StepSeeding","currentStep","setData","objValue","next","v","items","buildSeedingSteps","currentSeed","DevMock","PhaseSeeding","useOnSubmitSeedAPIRequest","ExperimentIcon","WinningCount","ResultArteRuim","winningValues","winningTeam","winningArtworks","includes","winningCards","ResultCaminhosMagicos","Number","ResultCruzaPalavras","cheatSheet","ResultNamoroOuAmizade","ResultNaRuaDoMedo","ResultRetratoFalado","count","ResultVamosAoCinema","ResultValueDelegator","SpacePlayerCheckWrapper","paths","every","path","has","VoteArteRuim","find","VoteCruzaPalavras","VoteNamoroOuAmizade","VoteNaRuaDoMedo","VoteRetratoFalado","VoteVamosAoCinema","VotesDelegator","StepResult","onSeeRanking","isFirstRunThrough","scoringType","time","currentIndex","timeLeft","GarbageIcon","getPosition","TrophyOutlined","side","area","buffer","StepRanking","goToPreviousStep","PhaseResult","setIsFirstRunThrough","BouncerIcon","PhaseGameOver","announcementIcon","CrownIcon","isEqual","fairWinners","winner","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseTask","PageError","gameId","token","colorPrimary","THEME_COLORS","gameCollection","GAME_COLLECTION","backgroundClassName","CandyCount","candyCount","active","key","getAnimationClass","letter","abs","getBracketClass","num","showNeedle","needle","showTarget","baseBracketClass","modifier","getTargetSide","getGuessResultClass","guess","base","getPoints","countDifferentGuesses","regularPlayers","dict","xmlnsXlink","x1","x2","y1","y2","gradientUnits","offset","stopColor","xlinkHref","isolation","mixBlendMode","stroke","strokeMiterlimit","cx","cy","r","ImageCardsIcon"],"sourceRoot":""}