{"version":3,"sources":["reportWebVitals.js","services/firebase.js","hooks/useGamePlayers.js","hooks/useGameState.js","hooks/useGlobalState.js","hooks/useLoading.js","images/tarde-divertida-logo.svg","components/Home.jsx","utils/constants.js","adapters/index.js","components/loaders/Loading.jsx","components/shared/Instruction.jsx","components/shared/Title.jsx","components/modals/CreateGameModal.jsx","components/rules/RulesCarousel.jsx","components/modals/RulesModal.jsx","components/Admin.jsx","adapters/auth.js","components/Login.jsx","utils/index.js","components/loaders/LoadingPage.jsx","components/errors/PageError.jsx","components/shared/PhaseContainer.jsx","images/avatars.svg","components/avatars/Avatar.jsx","components/avatars/AvatarEntry.jsx","services/localStorage.js","components/lobby/Join.jsx","components/shared/AdminOnly.jsx","components/lobby/Waiting.jsx","components/lobby/CloudBackground.jsx","components/lobby/Lobby.jsx","components/shared/ReadyPlayersBar.jsx","components/rules/Rules.jsx","sounds/arte-ruim-timer.mp3","components/games/arte-ruim/DrawingCanvas.jsx","components/cards/Card.jsx","components/games/arte-ruim/DrawPhaseDrawStep.jsx","components/shared/WaitingRoom.jsx","images/rodada-title.svg","components/shared/RoundAnnouncement.jsx","components/shared/StepSwitcher.jsx","components/games/arte-ruim/DrawPhase.jsx","components/games/arte-ruim/CanvasSVG.jsx","components/games/arte-ruim/Ribbon.jsx","components/games/arte-ruim/EvaluationAllDrawings.jsx","components/cards/ArteRuimCard.jsx","components/games/arte-ruim/EvaluationAllCards.jsx","components/games/arte-ruim/CanvasResizer.jsx","components/games/arte-ruim/EvaluationPhase.jsx","components/games/arte-ruim/GalleryWindowCredits.jsx","components/games/arte-ruim/GalleryWindowGuesses.jsx","components/games/arte-ruim/GalleryWindowControls.jsx","components/shared/StarPoints.jsx","components/games/arte-ruim/GalleryWindowResult.jsx","components/games/arte-ruim/GalleryWindow.jsx","components/shared/RankingBoard.jsx","components/games/arte-ruim/GalleryPhase.jsx","components/shared/GameInfoDrawer.jsx","images/game-over-title.svg","components/shared/GameOver.jsx","components/games/arte-ruim/SessionArteRuim.jsx","components/games/um-so/WordSelectionStep.jsx","components/games/um-so/WordSelectionPhase.jsx","components/cards/UmSoCard.jsx","components/games/um-so/SuggestionStep.jsx","components/games/um-so/SuggestPhase.jsx","components/games/um-so/SuggestionCard.jsx","components/games/um-so/CompareSuggestionsStep.jsx","components/games/um-so/ComparePhase.jsx","components/games/um-so/GuessPhase.jsx","components/games/um-so/SessionUmSo.jsx","components/games/index.js","components/Game.jsx","hooks/useIsGameStale.js","components/TestingZone.jsx","components/loaders/LoadingBar.jsx","components/App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","functions","window","location","hostname","includes","useEmulator","useGamePlayers","gameId","gameName","useDocument","doc","snapshotListenOptions","includeMetadataChanges","snapshot","loading","error","notification","message","description","JSON","stringify","placement","console","log","data","useGameState","initialState","isLoading","loaders","isAuthenticated","appStartedAt","Date","now","gameMeta","me","myAvatar","isAdmin","canvasSize","createGlobalState","useGlobalState","setGlobalState","getGlobalState","useLoading","setLoading","setLoaders","useEffect","Object","values","some","v","key","value","Home","className","src","logo","preview","alt","PUBLIC_URL","BANNERS","RULES","TAG_DICT","competitive","label","color","cooperative","traitor","timed","drawing","guessing","writing","images","discussion","AVATAR_IDS","Array","fill","map","i","index","LETTERS","AVATAR_DESCRIPTIONS_BR","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","GAME_COLLECTION","PHASES","LOBBY","DRAW","EVALUATION","GALLERY","GAME_OVER","WORD_SELECTION","SUGGEST","COMPARE","GUESS","GAME_API","helloWorld","httpsCallable","initializeGame","loadGame","addPlayer","lockGame","ARTE_RUIM_API","makeMeReady","submitDrawing","submitVoting","submitRating","goToNextPhase","UM_SO_API","submitWordSelectionVotes","submitSuggestions","submitValidation","confirmGuess","getAPI","Error","Loading","margin","clsx","Boolean","Text","defaultProps","Instruction","children","white","contained","baseClass","memo","Title","icon","CreateGameModal","gameInfo","history","useHistory","setLoader","useState","isVisible","setVisibility","setGameId","onCloseModal","useCallback","a","gameCode","response","createGame","type","onClick","title","visible","onCancel","onOk","push","info","fallback","RulesCarousel","ruleClass","autoplay","autoplaySpeed","rules","rule","Paragraph","RulesModal","footer","Admin","Content","size","wrap","align","gameList","game","hoverable","style","width","cover","Meta","summary","min","max","recommended","tags","tag","available","signIn","email","password","signInWithEmailAndPassword","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","setIsAuthenticated","setError","setEmail","setPassword","onHandleSubmit","user","uid","showIcon","name","onValuesChange","trim","autoComplete","Item","isValidGameId","length","getRandomItem","list","Math","floor","random","inNSeconds","seconds","getColorFromLetter","letter","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","X","getColorFromIndex","LoadingPage","PageError","PhaseContainer","phase","allowedPhase","fullScreen","Avatar","id","shape","viewBox","href","avatars","AvatarEntry","animate","propTypes","PropTypes","number","string","bool","this","store","notLoaded","appName","init","load","get","localStorage","parse","getItem","entries","forEach","item","undefined","save","setItem","Join","players","setMe","setMyAvatar","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempMe","setTempMe","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","reduce","acc","p","avatarId","newAvailableAvatars","filter","lsAvatarId","lsMe","lsGameId","onPreviousAvatar","indexOf","newIndex","onNextAvatar","onAddPlayer","playerName","playerAvatarId","set","CaretLeftOutlined","CaretRightOutlined","onChange","e","target","placeholder","maxLength","suffix","InfoCircleOutlined","disabled","AdminOnly","Waiting","onLockGameAndStart","isLocked","success","numPlayers","keys","danger","CloudBackground","class","Lobby","player","ReadyPlayersBar","readyPlayers","ready","Group","LikeFilled","Rules","amIReady","setImReady","onBeReady","onBeReadyQue","warning","CheckCircleFilled","SmileFilled","MehFilled","RobotFilled","DrawingCanvas","lines","setLines","isDrawing","useRef","height","onMouseDown","current","pos","getStage","getPointerPosition","x","y","onMousemove","point","lastLine","concat","splice","onMouseup","line","points","stroke","strokeWidth","tension","lineCap","globalCompositeOperation","Card","header","DrawPhaseDrawStep","secretCard","onSubmitDrawing","useTimer","expiryTimestamp","autoStart","onExpire","level","join","text","WaitingRoom","instruction","RoundAnnouncement","round","onPressButton","buttonText","time","rodadaTitle","StepSwitcher","step","conditions","DrawPhase","state","setStep","setSecretCard","useSound","arteRuimTimer","volume","play","myCardId","cards","allCards","cardId","CanvasSVG","konvaLines","paths","lineArr","path","xmlns","overflow","d","strokeLinecap","strokeLinejoin","strokeMiterlimit","Ribbon","cardEntryId","split","EvaluationAllDrawings","drawings","activeItem","onActivateItem","votes","liButtonBaseClass","drawingEntry","canvasEntryId","isActive","ArteRuimCard","card","WarningOutlined","EvaluationAllCards","cardEntry","isUsed","role","CanvasResizer","setCanvasSize","defaultValue","EvaluationPhase","setVotes","setActiveItem","entryId","startsWith","prevVotes","onSubmitVoting","preparedVotes","drawingEntryId","drawingId","CloudUploadOutlined","GalleryWindowCredits","artist","artistAvatarId","GalleryWindowGuesses","playersSay","playersNames","MessageFilled","GalleryWindowControls","galleryLength","activeIndex","setActiveIndex","isRunning","pause","resume","s","abs","StepBackwardOutlined","PauseOutlined","PlayCircleOutlined","StepForwardOutlined","TrophyOutlined","StarPoints","quantity","keyPrefix","starsArray","from","_","StarFilled","GalleryWindowResult","correctAnswer","playersPoints","correctGuesses","CrownFilled","DeleteFilled","GalleryWindow","RankingBoard","ranking","displayStep","setDisplayStep","sortedRanking","setSortedRanking","positions","setPositions","maxPoints","newScore","sort","b","previousScore","property","lastPosition","lastPoints","entry","gainedPoints","GalleryPhase","cachedCanvasSize","setCachedCanvasSize","onGoToNextRound","gallery","pointsToVictory","PictureOutlined","RocketFilled","GameInfoDrawer","setVisible","completeMe","rankedPlayers","score","offsetTop","closable","onClose","count","teamScore","GameOver","gameOverTitle","winner","team","strokeColor","percent","victory","SessionArteRuim","setInfo","ActiveComponent","getActiveComponent","WordSelectionStep","words","onSendSelectedWords","selectedWords","setSelectedWords","selectedWordsArray","wordId","newState","onSelectWord","allWords","WordSelectionPhase","guesser","setGuesser","amItheGuesser","setAmITheGuesser","previousSecretWordId","nextGuesser","status","UmSoCard","word","SuggestionStep","onSendSuggestions","secretWordId","suggestionsNumber","suggestions","setSuggestions","onChangeInput","indexStr","Number","toUpperCase","suggestionsValues","SuggestPhase","amITheGuesser","SuggestionCard","suggestion","invalid","CloseOutlined","CompareSuggestionsStep","onValidateSuggestions","myRecommendation","setMyRecommendation","amITheNextGuesser","ExclamationCircleOutlined","suggestionEntry","notAllowed","arr","newArr","onSetValidation","FireFilled","ComparePhase","validationArray","validSuggestions","GuessPhase","setAmITheNextGuesser","onSubmitGuess","result","guess","CheckOutlined","backgroundColor","MinusOutlined","SessionUmSo","games","Game","setGameName","setGameMeta","isPageLoading","setPageLoading","isGameStale","gameCreatedAt","setGameStale","useIsGameStale","createdAt","urlGameId","pathname","substring","getGameIdFromURL","listen","getGameIdFromLocation","meta","loadGameSession","warn","TestingZone","Flaviane","updatedAt","Kavis","Stephanie","playerOrder","table","LoadingBar","PrivateRoute","Component","component","authenticated","rest","render","props","to","PublicRoute","fromPath","App","setIsLoading","setIsAdmin","onAuthStateChanged","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73b43d8a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/functions';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_API_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const functions = firebase.functions();\n\nif (window.location.hostname.includes('localhost')) {\n  firestore.useEmulator('localhost', 8091);\n  functions.useEmulator('localhost', 5001);\n}\n\nexport default firebase;\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\n// Services\nimport { firestore } from '../services/firebase';\n\nexport function useGamePlayers(gameId, gameName) {\n  const [snapshot, loading, error] = useDocument(firestore.doc(`${gameName}/${gameId}/session/players`), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'Applicativo encontrou um erro ao tentar atualizar os jogadores',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.log('%cRefreshing players...', 'color:orange');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\n// Services\nimport { firestore } from '../services/firebase';\n\nexport function useGameState(gameId, gameName) {\n  const [snapshot, loading, error] = useDocument(firestore.doc(`${gameName}/${gameId}/session/state`), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'Aplicativo encontrou um erro ao tentar atualizar o estado do jogo',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.log('%cRefreshing state...', 'color:tomato');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { createGlobalState } from 'react-hooks-global-state';\n\nconst initialState = {\n  isLoading: false,\n  loaders: false,\n  isAuthenticated: false,\n  appStartedAt: Date.now(),\n  // Meta\n  gameId: null,\n  gameName: null,\n  gameMeta: {},\n  me: '',\n  myAvatar: '',\n  isAdmin: false,\n  // Arte-Ruim\n  canvasSize: 250,\n};\n\nconst { useGlobalState, setGlobalState, getGlobalState } = createGlobalState(initialState);\n\nexport { setGlobalState, getGlobalState, useGlobalState };\n\nexport default useGlobalState;\n","import { useEffect } from 'react';\n\nimport { useGlobalState } from './index';\n\n/**\n * Aggregate loading states into a single object, and single isLoading state\n * @returns [boolean, function, object]\n */\nexport function useLoading() {\n  const [isLoading, setLoading] = useGlobalState('isLoading');\n  const [loaders, setLoaders] = useGlobalState('loaders');\n\n  useEffect(() => {\n    setLoading(Object.values(loaders).some((v) => v));\n  }, [loaders, setLoading]);\n\n  const setLoader = (key, value) => {\n    setLoaders((values) => ({\n      ...values,\n      [key]: value,\n    }));\n  };\n\n  return [isLoading, setLoader, loaders];\n}\n","export default __webpack_public_path__ + \"static/media/tarde-divertida-logo.7e15410c.svg\";","import React from 'react';\nimport { Image, Layout } from 'antd';\n\nimport logo from '../images/tarde-divertida-logo.svg';\n\nfunction Home() {\n  return (\n    <Layout className=\"home\">\n      <div className=\"home__logo-container\">\n        <Image src={logo} className=\"home__logo\" preview={false} alt=\"Tarde Divertida logo\" />\n      </div>\n      <div className=\"home__background\">\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n      </div>\n    </Layout>\n  );\n}\n\nexport default Home;\n","/**\n * List of urls residing in the public folder\n */\nexport const PUBLIC_URL = {\n  BANNERS: `${process.env.PUBLIC_URL}/images/banners/`,\n  RULES: `${process.env.PUBLIC_URL}/images/rules/`,\n};\n\n/**\n * List of tags translation and color\n */\nexport const TAG_DICT = {\n  competitive: {\n    label: 'competitivo',\n    color: 'red',\n  },\n  cooperative: {\n    label: 'cooperativo',\n    color: 'green',\n  },\n  traitor: {\n    label: 'inimigo',\n    color: 'volcano',\n  },\n  'real-time': {\n    label: 'juntos',\n    color: 'volcano',\n  },\n  'turn-based': {\n    label: 'vez',\n    color: 'volcano',\n  },\n  timed: {\n    label: 'tempo',\n    color: 'orange',\n  },\n  drawing: {\n    label: 'desenho',\n    color: 'gold',\n  },\n  guessing: {\n    label: 'adivinhar',\n    color: 'cyan',\n  },\n  writing: {\n    label: 'escrever',\n    color: 'blue',\n  },\n  images: {\n    label: 'imagens',\n    color: 'purple',\n  },\n  discussion: {\n    label: 'discussão/fala',\n    color: 'geekblue',\n  },\n};\n\n/**\n * List of avatar ids\n */\nexport const AVATAR_IDS = new Array(25).fill(0).map((i, index) => i + index);\n\nexport const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const AVATAR_DESCRIPTIONS_BR = {\n  0: 'o axolote',\n  1: 'a tartaruga',\n  2: 'a raposa',\n  3: 'o sapo',\n  4: 'a salamandra',\n  5: 'a toupeira',\n  6: 'o esquilo',\n  7: 'o corvo',\n  8: 'a lontra',\n  9: 'o camundongo',\n  10: 'o sabiá',\n  11: 'a cojura',\n  12: 'o porco-espinho',\n  13: 'o ornitorrinco',\n  14: 'o rato',\n  15: 'a rã',\n  16: 'o caramujo',\n  17: 'a abelha',\n  18: 'o morcego',\n  19: 'o gato',\n  20: 'o coelho',\n  21: 'a aranha',\n  22: 'a borboleta',\n  23: 'o arminho',\n  24: 'o porco',\n};\n\n/**\n * Enum of available games\n */\nexport const GAME_COLLECTION = {\n  ARTE_RUIM: 'arte-ruim',\n  UM_SO: 'um-so',\n};\n\n/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  ARTE_RUIM: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n    GAME_OVER: 'GAME_OVER',\n  },\n  UM_SO: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n    GAME_OVER: 'GAME_OVER',\n  },\n};\n","import { functions } from '../services/firebase';\nimport { GAME_COLLECTION } from '../utils/constants';\n\nexport const GAME_API = {\n  helloWorld: functions.httpsCallable('helloWorld'),\n  initializeGame: functions.httpsCallable('initializeGame'),\n  loadGame: functions.httpsCallable('loadGame'),\n  addPlayer: functions.httpsCallable('addPlayer'),\n  lockGame: functions.httpsCallable('lockGame'),\n};\n\nexport const ARTE_RUIM_API = {\n  makeMeReady: functions.httpsCallable('arteRuimMakeMeReady'),\n  submitDrawing: functions.httpsCallable('arteRuimSubmitDrawing'),\n  submitVoting: functions.httpsCallable('arteRuimSubmitVoting'),\n  submitRating: functions.httpsCallable('arteRuimSubmitRating'),\n  goToNextPhase: functions.httpsCallable('arteRuimGoToNextPhase'),\n};\n\nexport const UM_SO_API = {\n  makeMeReady: functions.httpsCallable('umSoMakeMeReady'),\n  submitWordSelectionVotes: functions.httpsCallable('umSoSubmitWordSelectionVotes'),\n  submitSuggestions: functions.httpsCallable('umSoSubmitSuggestions'),\n  submitValidation: functions.httpsCallable('umSoSubmitValidation'),\n  confirmGuess: functions.httpsCallable('umSoConfirmGuess'),\n};\n\n/**\n * Gets the game specific API http functions\n * @param {string} gameName\n * @returns\n */\nexport const getAPI = (gameName) => {\n  switch (gameName) {\n    case GAME_COLLECTION.ARTE_RUIM:\n      return ARTE_RUIM_API;\n    case GAME_COLLECTION.UM_SO:\n      return UM_SO_API;\n    default:\n      throw Error(`Adapter for ${gameName} does not exist`);\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Design Resources\nimport { Space, Spin, Typography } from 'antd';\n\nfunction Loading({ message, margin }) {\n  return (\n    <Space className={clsx('loading', margin && 'loading--margin')}>\n      <Spin />\n      {Boolean(message) && <Typography.Text>{message}</Typography.Text>}\n    </Space>\n  );\n}\n\nLoading.propTypes = {\n  message: PropTypes.string,\n  margin: PropTypes.bool,\n};\n\nLoading.defaultProps = {\n  margin: false,\n};\n\nexport default Loading;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Typography } from 'antd';\nimport clsx from 'clsx';\n\nfunction Instruction({ children, white, className, contained }) {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        className\n      )}\n    >\n      {children}\n    </Typography.Text>\n  );\n}\n\nInstruction.propTypes = {\n  children: PropTypes.any.isRequired,\n  white: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nexport default memo(Instruction);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Typography } from 'antd';\nimport clsx from 'clsx';\n\nfunction Title({ children, white, icon, className }) {\n  return (\n    <Typography.Title className={clsx('title', white && 'title--white', className)}>\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.any.isRequired,\n  white: PropTypes.bool,\n  icon: PropTypes.element,\n  className: PropTypes.string,\n};\n\nexport default memo(Title);\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Image, Modal, message, Button, notification } from 'antd';\n// Adapters\nimport { GAME_API } from '../../adapters';\n// Hooks\nimport { useLoading } from '../../hooks';\n// Constants\nimport { PUBLIC_URL } from '../../utils/constants';\n// Components\nimport Loading from '../loaders/Loading';\nimport Instruction from '../shared/Instruction';\nimport Title from '../shared/Title';\n\nfunction CreateGameModal({ gameInfo }) {\n  const history = useHistory();\n  const [, setLoader] = useLoading();\n  const [isVisible, setVisibility] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [gameId, setGameId] = useState(null);\n\n  const onCloseModal = useCallback(() => {\n    setVisibility(false);\n  }, []);\n\n  useEffect(() => {\n    async function createGame() {\n      try {\n        setLoader('create', true);\n        const response = await GAME_API.initializeGame({ gameCode: gameInfo.gameCode });\n        if (response.data.gameId) {\n          setGameId(response.data.gameId);\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Applicativo encontrou um erro ao tentar criar o jogo',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setVisibility(false);\n      } finally {\n        setLoading(false);\n        setLoader('create', false);\n      }\n    }\n\n    if (isVisible) {\n      createGame();\n    }\n  }, [isVisible]); // eslint-disable-line\n\n  const onConfirmGame = () => {\n    if (gameId) {\n      history.push(`/${gameId}`);\n    } else {\n      message.info('Péra! O jogo ainda não foi inicializado.');\n    }\n  };\n\n  return (\n    <Fragment>\n      <Button type=\"primary\" onClick={() => setVisibility(true)}>\n        Criar Jogo\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`Criando jogo: ${gameInfo.title}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          onOk={onConfirmGame}\n        >\n          <Fragment>\n            <Image\n              alt={gameInfo.title}\n              src={`${PUBLIC_URL.BANNERS}game-image-${gameInfo.gameName}.jpg`}\n              fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n            />\n\n            {isLoading ? (\n              <Fragment>\n                <Instruction>O jogo está sendo criado...</Instruction>\n                <Loading message=\"Gerando...\" margin />\n              </Fragment>\n            ) : (\n              <div>\n                <Title className=\"center\">Jogo inicializado: {gameId}</Title>\n                <Instruction>Pressione OK para ser redirecionadx à página do jogo.</Instruction>\n              </div>\n            )}\n          </Fragment>\n        </Modal>\n      )}\n    </Fragment>\n  );\n}\n\nCreateGameModal.propTypes = {\n  gameInfo: PropTypes.shape({\n    gameCode: PropTypes.string.isRequired,\n    gameName: PropTypes.string,\n    title: PropTypes.string,\n  }),\n};\n\nexport default CreateGameModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Design Resources\nimport { Typography, Image, Carousel } from 'antd';\n// Constants\nimport { PUBLIC_URL } from '../../utils/constants';\n\nfunction RulesCarousel({ info, className, ruleClass }) {\n  return (\n    <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={10000}>\n      {info.rules.map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <Image\n            className=\"rules-carousel__image\"\n            src={`${PUBLIC_URL.RULES}${info.gameName}-${index}.jpg`}\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n\nRulesCarousel.propTypes = {\n  info: PropTypes.shape({\n    gameName: PropTypes.string,\n    rules: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string,\n  }),\n  className: PropTypes.string,\n  ruleClass: PropTypes.string,\n};\n\nRulesCarousel.defaultProps = {\n  className: '',\n  ruleClass: '',\n};\n\nexport default RulesCarousel;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Design Resources\nimport { Button, Modal } from 'antd';\n// Components\nimport RulesCarousel from '../rules/RulesCarousel';\n\nfunction RulesModal({ gameInfo }) {\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <Fragment>\n      <Button type=\"default\" onClick={() => setVisibility(true)}>\n        Regras\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`Rules: ${gameInfo.title}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              Fechar\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </Fragment>\n  );\n}\n\nRulesModal.propTypes = {\n  gameInfo: PropTypes.shape({\n    gameName: PropTypes.string,\n    rules: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string,\n  }),\n};\n\nexport default RulesModal;\n","import React from 'react';\n\n// Design Resources\nimport { Typography, Layout, Space, Card, Image, Divider, Tag } from 'antd';\n// Utils\nimport gameList from '../resources/games.json';\nimport { PUBLIC_URL, TAG_DICT } from '../utils/constants';\n// Components\nimport CreateGameModal from './modals/CreateGameModal';\nimport RulesModal from './modals/RulesModal';\n\nfunction Admin() {\n  return (\n    <Layout.Content className=\"container\">\n      <Typography.Title>Admin Hub</Typography.Title>\n      <Typography.Paragraph>Select the game you want to start</Typography.Paragraph>\n\n      <Space size={[8, 16]} wrap align=\"start\">\n        {Object.values(gameList).map((game) => (\n          <Card\n            key={game.gameName}\n            hoverable\n            style={{ width: 240 }}\n            cover={\n              <Image\n                alt={game.title}\n                src={`${PUBLIC_URL.BANNERS}game-image-${game.gameName}.jpg`}\n                fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n              />\n            }\n          >\n            <Card.Meta title={game.title} description={game.summary} />\n            <Divider />\n            <Card.Meta description={`Para ${game.min}-${game.max} jogadores`} />\n            <Card.Meta description={`Recomendado jogar com ${game.recommended}`} />\n            <Divider />\n            <Space wrap size={[1, 6]}>\n              {game.tags.map((tag) => (\n                <Tag key={`${game.gameCode}-${tag}`} color={TAG_DICT[tag]?.color}>\n                  {TAG_DICT[tag]?.label}\n                </Tag>\n              ))}\n            </Space>\n            <Divider />\n            <Space>\n              <RulesModal gameInfo={game} />\n              {Boolean(game.available) && <CreateGameModal gameInfo={game} />}\n            </Space>\n          </Card>\n        ))}\n      </Space>\n    </Layout.Content>\n  );\n}\n\nexport default Admin;\n","import { auth } from '../services/firebase';\n\n/**\n * Sign up user via email through firebase auth\n * @param {string} email\n * @param {string} password\n * @returns {Promise}\n */\nexport function signUp(email, password) {\n  return auth.createUserWithEmailAndPassword(email, password);\n}\n\n/**\n * Sign in user via email through firebase auth\n * @param {string} email\n * @param {string} password\n * @returns {Promise}\n */\nexport function signIn(email, password) {\n  return auth.signInWithEmailAndPassword(email, password);\n}\n\n/**\n * Sign out current user\n * @returns {Promise}\n */\nexport async function signOut() {\n  return auth.signOut().then(() => {\n    alert(`You've been signed out`);\n  });\n}\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n// Design Resources\nimport { Layout, Button, Form, Input, Alert, Image } from 'antd';\n// API\nimport { signIn } from '../adapters/auth';\n// State\nimport { useGlobalState } from '../hooks';\n// Image\nimport logo from '../images/tarde-divertida-logo.svg';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 0, span: 8 },\n};\n\nfunction Login() {\n  const history = useHistory();\n  const [, setIsAuthenticated] = useGlobalState('isAuthenticated');\n\n  const [error, setError] = useState(null);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const onValuesChange = (data) => {\n    if (data.email) {\n      setEmail(data.email.trim());\n    }\n    if (data.password) {\n      setPassword(data.password.trim());\n    }\n  };\n\n  const onHandleSubmit = async () => {\n    setError('');\n    try {\n      const response = await signIn(email, password);\n      if (response?.user?.uid) {\n        setIsAuthenticated(true);\n        history.push('/admin');\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <Layout.Content className=\"login\">\n      <div className=\"login__content\">\n        <div className=\"login__logo\">\n          <Image src={logo} preview={false} />\n        </div>\n\n        {Boolean(error) && (\n          <Alert message=\"Error\" description={error} type=\"error\" showIcon className=\"login__error-alert\" />\n        )}\n        <Form\n          {...layout}\n          layout=\"horizontal\"\n          name=\"sign-in\"\n          onValuesChange={onValuesChange}\n          className=\"login__form\"\n          autoComplete=\"off\"\n        >\n          <Form.Item {...tailLayout} label=\"E-mail\" name=\"email\" className=\"login__form-item\">\n            <Input type=\"email\" />\n          </Form.Item>\n          <Form.Item {...tailLayout} label=\"Password\" name=\"password\" className=\"login__form-item\">\n            <Input type=\"password\" />\n          </Form.Item>\n          <div className=\"login__form-action\">\n            <Button type=\"primary\" onClick={onHandleSubmit}>\n              Login\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </Layout.Content>\n  );\n}\n\nexport default Login;\n","/**\n * Extract the gameId from react history\n * @param {object} history\n * @returns {string}\n */\nexport const getGameIdFromURL = (history) => {\n  const { pathname = '/' } = history?.location ?? {};\n  return pathname.substring(1);\n};\n\n/**\n * Extract the gameId from react history.location\n * @param {object} history\n * @returns {string}\n */\nexport const getGameIdFromLocation = (location) => {\n  const { pathname = '/' } = location ?? {};\n  return pathname.substring(1);\n};\n\n/**\n * Verify if the game id exists and has the correct length\n * @param {string} gameId\n * @returns\n */\nexport const isValidGameId = (gameId) => {\n  return gameId && gameId.length === 4;\n};\n\n/**\n * Get random element/item from a list\n * @param {array} list\n * @returns one random item\n */\nexport const getRandomItem = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get date from now within the given seconds\n * @param {number} seconds\n * @returns\n */\nexport const inNSeconds = (seconds) => {\n  return Date.now() + seconds * 1000;\n};\n\n/**\n * Get color name from letter\n * @param {string} letter\n * @returns\n */\nexport const getColorFromLetter = (letter) => {\n  return (\n    {\n      A: 'red',\n      B: 'blue',\n      C: 'green',\n      D: 'yellow',\n      E: 'pink',\n      F: 'purple',\n      G: 'teal',\n      H: 'orange',\n      I: 'coffee',\n      J: 'navy',\n      K: 'light-green',\n      L: 'brown',\n      M: 'hot-pink',\n      N: 'violet',\n      O: 'forest',\n      P: 'cream',\n\n      X: 'none',\n    }[letter] ?? 'none'\n  );\n};\n\n/**\n * Gets color name from index\n * @param {number} letter\n * @returns\n */\nexport const getColorFromIndex = (letter) => {\n  return (\n    [\n      'red',\n      'blue',\n      'green',\n      'yellow',\n      'pink',\n      'purple',\n      'teal',\n      'orange',\n      'coffee',\n      'navy',\n      'light-green',\n      'brown',\n      'hot-pink',\n      'violet',\n      'forest',\n      'cream',\n    ][letter] ?? 'none'\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Layout, Spin, Typography } from 'antd';\n\nfunction LoadingPage({ message }) {\n  return (\n    <Layout.Content className=\"loading-page\">\n      <Spin size=\"large\" />\n      <Typography.Text>{message}</Typography.Text>\n    </Layout.Content>\n  );\n}\n\nLoadingPage.propTypes = {\n  message: PropTypes.string,\n};\n\nLoadingPage.defaultProps = {\n  message: 'Carregando...',\n};\n\nexport default LoadingPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Alert } from 'antd';\n\nfunction PageError({ message, description }) {\n  return (\n    <div className=\"container container--center\">\n      <Alert message={message} description={description} type=\"error\" showIcon />\n    </div>\n  );\n}\n\nPageError.propTypes = {\n  message: PropTypes.string,\n  description: PropTypes.string,\n};\n\nPageError.defaultProps = {\n  message: 'Algo errado não está certo',\n  description: 'Não era pra você estar vendo esta mensagem.',\n};\n\nexport default PageError;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Layout } from 'antd';\n// Components\nimport LoadingPage from '../loaders/LoadingPage';\n\n/**\n * Wrapping container around a game screen\n * @param {*} props\n * @returns\n */\nfunction PhaseContainer({ info, phase, allowedPhase, children, className, fullScreen, white }) {\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <Layout.Content\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n    >\n      {children}\n    </Layout.Content>\n  );\n}\n\nPhaseContainer.propTypes = {\n  children: PropTypes.any.isRequired,\n  allowedPhase: PropTypes.string,\n  className: PropTypes.string,\n  fullScreen: PropTypes.bool,\n  info: PropTypes.object,\n  phase: PropTypes.string,\n  white: PropTypes.bool,\n};\n\nPhaseContainer.defaultProps = {\n  allowedPhase: '',\n  className: '',\n  fullScreen: false,\n  phase: '',\n  white: false,\n};\n\nexport default memo(PhaseContainer);\n","export default __webpack_public_path__ + \"static/media/avatars.a2364409.svg\";","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Images\nimport avatars from '../../images/avatars.svg';\n\nfunction Avatar({ id = 25, size = 'large', shape = 'circle', alt = 'Fulano', className = '' }) {\n  return (\n    <AntAvatar\n      className={clsx('avatar', className)}\n      size={size}\n      shape={shape}\n      alt={alt}\n      src={\n        <svg viewBox=\"0 0 100 100\">\n          <use href={avatars + `#avatar-${id}`}></use>\n        </svg>\n      }\n    />\n  );\n}\n\nAvatar.propTypes = {\n  id: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.string,\n  shape: PropTypes.string,\n  alt: PropTypes.string,\n};\n\nexport default memo(Avatar);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Components\nimport Avatar from './Avatar';\n\nfunction AvatarEntry({ id = 25, name = 'Fulano', animate = false, className = '' }) {\n  return (\n    <div className={clsx('avatar-entry', animate && 'avatar-entry--floating', className)}>\n      <Avatar id={id} className=\"avatar-entry__avatar\" />\n      <div className=\"avatar-entry__name\">{name}</div>\n    </div>\n  );\n}\n\nAvatar.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  animate: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nexport default memo(AvatarEntry);\n","class LocalStorage {\n  constructor() {\n    this.store = {};\n    this.notLoaded = true;\n    this.appName = 'tarde-divertida';\n\n    this.init();\n  }\n\n  init() {\n    this.load();\n    return this.get();\n  }\n\n  get(key) {\n    if (this.notLoaded) {\n      this.load();\n    }\n\n    if (key) {\n      return this.store[key] || null;\n    }\n    return this.store;\n  }\n\n  load() {\n    const localStorage = JSON.parse(window.localStorage.getItem(this.appName));\n    if (localStorage) {\n      this.store = localStorage;\n      this.notLoaded = false;\n    }\n  }\n\n  // To Remove a property, you can use the set method, but passing an object with the key and value\n  // null, the property will be removed from local storage\n  set(value) {\n    if (this.notLoaded) {\n      this.load();\n    }\n\n    const type = typeof value;\n    if (type !== 'string' && type !== 'object') {\n      console.error('localStorage set value must be a string or a key-value object');\n      return;\n    }\n\n    // When value is a string, use as a property toggle\n    if (typeof value === 'string') {\n      this.store[value] = !this.store[value];\n    } else {\n      // Remove any null or undefined property\n      Object.entries(value).forEach(([key, item]) => {\n        if (item === null || item === undefined) {\n          delete value[key];\n        }\n      });\n\n      this.store = {\n        ...this.store,\n        ...value,\n      };\n    }\n\n    this.save();\n  }\n\n  save() {\n    if (this.notLoaded) {\n      this.load();\n    }\n\n    window.localStorage.setItem(this.appName, JSON.stringify(this.store));\n    this.load();\n  }\n}\n\nexport default new LocalStorage();\n","import React, { useCallback, useEffect, useState } from 'react';\n// Design Resources\nimport { Alert, Button, Image, Input, notification, Spin, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from '../../adapters';\nimport { useLoading } from '../../hooks';\nimport useGlobalState from '../../hooks/useGlobalState';\n// Images\nimport avatars from '../../images/avatars.svg';\n// Services\nimport localStorage from '../../services/localStorage';\n// Utils\nimport { AVATAR_IDS, PUBLIC_URL } from '../../utils/constants';\nimport { getRandomItem } from '../../utils/index';\n\nfunction Join({ players, info }) {\n  const [isLoading, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setMe] = useGlobalState('me');\n  const [, setMyAvatar] = useGlobalState('myAvatar');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVATAR_IDS));\n  const [tempMe, setTempMe] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc, p) => {\n      acc[p.avatarId] = true;\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVATAR_IDS.filter((avatarId) => usedAvatars[avatarId] === undefined);\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffect(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsMe = localStorage.get('me');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsMe) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempMe(localStorage.get('me') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  }, []); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(async () => {\n    try {\n      setLoader('add-player', true);\n      const response = await GAME_API.addPlayer({\n        gameId,\n        gameName,\n        playerName: tempMe,\n        playerAvatarId: tempAvatar,\n      });\n\n      setMe(response.data.name);\n      setMyAvatar(response.data.avatarId);\n      localStorage.set({\n        me: response.data.name,\n        avatarId: response.data.avatarId,\n        gameId,\n      });\n    } catch (e) {\n      notification.error({\n        message: 'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n        description: JSON.stringify(e),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('add-player', false);\n    }\n  }, [gameId, gameName, tempMe, tempAvatar]); // eslint-disable-line\n\n  return (\n    <div className=\"lobby-join\">\n      <Image\n        alt={info?.title}\n        src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n        className=\"lobby-join__game-image\"\n      />\n      <h1 className=\"lobby-join__title\">\n        {Boolean(localStorageAvatar) ? 'Bem-vindo de volta!' : 'Selecione seu avatar'}\n      </h1>\n      <div className=\"lobby-join__avatar-selection\">\n        <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n          <CaretLeftOutlined />\n        </Button>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n          <use href={avatars + `#avatar-${tempAvatar}`}></use>\n        </svg>\n        <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n          <CaretRightOutlined />\n        </Button>\n      </div>\n\n      {Boolean(localStorageAvatar) ? (\n        <Alert\n          className=\"lobby-join__avatar-alert\"\n          type=\"success\"\n          message=\"Você está de volta! Lembramos seu nome e avatar!\"\n        />\n      ) : (\n        <Alert\n          className=\"lobby-join__avatar-alert\"\n          type=\"warning\"\n          message=\"Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuido à você.\"\n        />\n      )}\n\n      {Boolean(sameGameId) && (\n        <Alert\n          className=\"lobby-join__avatar-alert\"\n          type=\"error\"\n          message=\"Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.\"\n        />\n      )}\n\n      <Input\n        className=\"lobby-join__name-input\"\n        onChange={(e) => setTempMe(e.target.value)}\n        placeholder=\"Insira seu nome\"\n        value={tempMe}\n        maxLength={10}\n        suffix={\n          <Tooltip title=\"Máximo de 10 characteres\">\n            <InfoCircleOutlined />\n          </Tooltip>\n        }\n      />\n      <Button\n        className=\"lobby-join__join-button\"\n        type=\"primary\"\n        disabled={!Boolean(tempMe) || isLoading}\n        onClick={onAddPlayer}\n      >\n        {isLoading ? <Spin size=\"small\" /> : 'Entrar no jogo'}\n      </Button>\n    </div>\n  );\n}\n\nexport default Join;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Space } from 'antd';\n// State\nimport useGlobalState from '../../hooks/useGlobalState';\n\nfunction AdminOnly({ children, className = '' }) {\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (!isAdmin) return <span></span>;\n\n  return <Space className={clsx('admin-only-container', className)}>{children}</Space>;\n}\n\nAdminOnly.propTypes = {\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n};\n\nexport default AdminOnly;\n","import React, { useCallback } from 'react';\n// Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { GAME_API } from '../../adapters';\nimport useGlobalState from '../../hooks/useGlobalState';\nimport { useLoading } from '../../hooks';\n// Images\nimport avatars from '../../images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from '../../utils/constants';\n// Components\nimport AdminOnly from '../shared/AdminOnly';\n\nfunction Waiting({ info, players }) {\n  const [isLoading, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [me] = useGlobalState('me');\n  const [myAvatar] = useGlobalState('myAvatar');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response = await GAME_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success('Jogo trancado e iniciado com sucesso!');\n      }\n    } catch (e) {\n      notification.error({\n        message: 'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n        description: JSON.stringify(e),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader]);\n\n  const numPlayers = Object.keys(players).length;\n\n  return (\n    <div className=\"lobby-waiting\">\n      <Image\n        alt={info?.title}\n        src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n      />\n\n      <h1 className=\"center\">{me || 'Fulano'},</h1>\n      <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n        <use href={avatars + `#avatar-${myAvatar}`}></use>\n      </svg>\n      <h3 className=\"center\">Aguarde os outros jogadores entrarem.</h3>\n      <AdminOnly className=\"lobby-waiting__lock-button\">\n        <Typography.Text className=\"center padding\">\n          Jogadores necessários: {numPlayers}/{gameMeta.min}\n        </Typography.Text>\n        <Button\n          type=\"primary\"\n          danger\n          onClick={onLockGameAndStart}\n          disabled={isLoading || numPlayers < gameMeta.min}\n        >\n          Trancar e Iniciar Jogo\n        </Button>\n      </AdminOnly>\n    </div>\n  );\n}\n\nexport default Waiting;\n","import React from 'react';\n\nfunction CloudBackground() {\n  return (\n    <div class=\"cloud-background\">\n      <div class=\"cloud-background__animation-1\">\n        <div class=\"cloud-background__cloud\"></div>\n      </div>\n\n      <div class=\"cloud-background__animation-2\">\n        <div class=\"cloud-background__cloud\"></div>\n      </div>\n\n      <div class=\"cloud-background__animation-3\">\n        <div class=\"cloud-background__cloud\"></div>\n      </div>\n\n      <div class=\"cloud-background__animation-4\">\n        <div class=\"cloud-background__cloud\"></div>\n      </div>\n\n      <div class=\"cloud-background__animation-5\">\n        <div class=\"cloud-background__cloud\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default CloudBackground;\n","import React from 'react';\n// Hooks\nimport useGlobalState from '../../hooks/useGlobalState';\n// Components\nimport PhaseContainer from '../shared/PhaseContainer';\nimport AvatarEntry from '../avatars/AvatarEntry';\nimport Join from './Join';\nimport Waiting from './Waiting';\nimport CloudBackground from './CloudBackground';\n\nfunction Lobby({ players, info }) {\n  const [me] = useGlobalState('me');\n  const [myAvatar] = useGlobalState('myAvatar');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase=\"LOBBY\" info={info}>\n      <div className=\"lobby__room\">\n        {Object.values(players).map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {me && myAvatar ? <Waiting players={players} info={info} /> : <Join players={players} info={info} />}\n      </div>\n\n      <CloudBackground />\n    </PhaseContainer>\n  );\n}\n\nexport default Lobby;\n","import React from 'react';\n// Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport Avatar from '../avatars/Avatar';\n\nfunction ReadyPlayersBar({ players }) {\n  const readyPlayers = Object.values(players).filter((player) => player.ready);\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <AntAvatar.Group size=\"small\">\n        {readyPlayers.map((player) => (\n          <Avatar key={player.name} id={player.avatarId} />\n        ))}\n      </AntAvatar.Group>\n      <span className=\"ready-player-bar__speech-bubble\">\n        <Typography.Text>{readyPlayers.length > 1 ? 'Estamos prontos!' : 'Estou pronto!'}</Typography.Text>\n        <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n      </span>\n    </div>\n  );\n}\n\nexport default ReadyPlayersBar;\n","import React, { useCallback, useEffect, useState } from 'react';\n// Design Resources\nimport { Button, Layout, message, notification, Space, Typography } from 'antd';\n// State\nimport useGlobalState from '../../hooks/useGlobalState';\n// Components\nimport RulesCarousel from './RulesCarousel';\nimport LoadingPage from '../loaders/LoadingPage';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\nimport { useLoading } from '../../hooks';\nimport { getAPI } from '../../adapters';\nimport ReadyPlayersBar from '../shared/ReadyPlayersBar';\n\nfunction Rules({ players, info }) {\n  const [isLoading, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [amIReady, setImReady] = useState(false);\n\n  useEffect(() => {\n    if (!amIReady) {\n      const ready = players?.[me]?.ready;\n      setImReady(ready);\n      if (ready) {\n        message.success('Pronto! Aguarde os outros jogadores estarem prontos');\n      }\n    }\n  }, [players, me]); // eslint-disable-line\n\n  const onBeReady = useCallback(async () => {\n    try {\n      setLoader('be-ready', true);\n      const response = await getAPI(gameName).makeMeReady({\n        gameId,\n        gameName,\n        playerName: me,\n      });\n      if (response.data) {\n        setImReady(true);\n        message.success('Pronto! Aguarde os outros jogadores estarem prontos');\n      }\n    } catch (e) {\n      notification.error({\n        message: 'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n        description: JSON.stringify(e),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('be-ready', false);\n    }\n  }, [gameId, gameName, setLoader, me]);\n\n  const onBeReadyQue = useCallback(() => {\n    message.warning('Vixi, se fudeu então, pq o jogo vai começar!');\n    onBeReady();\n  }, [onBeReady]);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"rules\">\n      <Typography.Title className=\"center\">Regras do Jogo</Typography.Title>\n\n      <RulesCarousel info={info} className=\"rules__carousel\" ruleClass=\"rules__rule\" />\n\n      <Space className=\"rules__actions\">\n        <Button\n          type=\"primary\"\n          icon={amIReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || amIReady}\n          onClick={onBeReady}\n        >\n          Entendi tudo e estou pronto para jogar!\n        </Button>\n        <Button\n          icon={amIReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || amIReady}\n          onClick={onBeReady}\n        >\n          Não entendi nada, mas vamos lá\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={amIReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || amIReady}\n          onClick={onBeReadyQue}\n        >\n          Que?\n        </Button>\n      </Space>\n      <ReadyPlayersBar players={players} />\n    </Layout.Content>\n  );\n}\n\nexport default Rules;\n","export default __webpack_public_path__ + \"static/media/arte-ruim-timer.1f16745a.mp3\";","import React, { useRef } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n\nconst DrawingCanvas = ({ lines, setLines, className = '' }) => {\n  const isDrawing = useRef(false);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [pos.x, pos.y]]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine = lastLine.concat([point.x, point.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <Stage\n      width={500}\n      height={500}\n      onMouseDown={handleMouseDown}\n      onMousemove={handleMouseMove}\n      onMouseup={handleMouseUp}\n      className={clsx('a-drawing-canvas', className)}\n    >\n      <Layer>\n        {lines.map((line, i) => (\n          <Line\n            key={i}\n            points={line}\n            stroke=\"#222222\"\n            strokeWidth={5}\n            tension={0.5}\n            lineCap=\"round\"\n            globalCompositeOperation=\"source-over\"\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nDrawingCanvas.propTypes = {\n  lines: PropTypes.array.isRequired,\n  setLines: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default DrawingCanvas;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nfunction Card({ children, header, footer, color, size, className }) {\n  const baseClass = 'card';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span className={`${baseClass}__header color-background--${color}`}>{header}</span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={`${baseClass}__footer`}>{footer}</span>}\n    </div>\n  );\n}\n\nCard.propTypes = {\n  children: PropTypes.any.isRequired,\n  header: PropTypes.string,\n  footer: PropTypes.string,\n  color: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  className: PropTypes.string,\n};\n\nCard.defaultProps = {\n  header: 'Carta',\n  color: 'none',\n  size: 'medium',\n  className: '',\n};\n\nexport default memo(Card);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { inNSeconds } from '../../../utils';\n// Components\nimport DrawingCanvas from './DrawingCanvas';\nimport Card from '../../cards/Card';\n\nfunction DrawPhaseDrawStep({ secretCard, onSubmitDrawing }) {\n  const [lines, setLines] = useState([]);\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(11),\n    autoStart: true,\n    onExpire: () => onSubmitDrawing(lines),\n  });\n\n  return (\n    <div className=\"a-draw-phase-draw-step\">\n      <Card\n        size=\"large\"\n        header=\"Desenhe\"\n        footer={Array(secretCard?.level).fill('•').join('')}\n        className=\"a-draw-phase-draw-step__card\"\n        color=\"yellow\"\n      >\n        {secretCard?.text}\n        <span className=\"a-draw-phase-draw-step__timer\">{seconds - 1}</span>\n      </Card>\n      <DrawingCanvas lines={lines} setLines={setLines} />\n    </div>\n  );\n}\n\nDrawPhaseDrawStep.propTypes = {\n  secretCard: PropTypes.shape({\n    text: PropTypes.string,\n    level: PropTypes.number,\n  }).isRequired,\n  onSubmitDrawing: PropTypes.func.isRequired,\n};\n\nexport default DrawPhaseDrawStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Spin } from 'antd';\n// Components\nimport ReadyPlayersBar from './ReadyPlayersBar';\nimport Title from './Title';\nimport Instruction from './Instruction';\n\nconst WaitingRoom = ({ players, title, instruction }) => {\n  return (\n    <div className=\"waiting-room\">\n      <Title>{title}</Title>\n      <Spin />\n      <Instruction>{instruction}</Instruction>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n};\n\nWaitingRoom.propTypes = {\n  players: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  instruction: PropTypes.string.isRequired,\n};\n\nexport default WaitingRoom;\n","export default __webpack_public_path__ + \"static/media/rodada-title.2e3f9c1d.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimer } from 'react-timer-hook';\n// Design Resources\nimport { Button } from 'antd';\n// Images\nimport rodadaTitle from '../../images/rodada-title.svg';\n// Utils\nimport { inNSeconds } from '../../utils';\n\nfunction RoundAnnouncement({ round, onPressButton, buttonText, time, children }) {\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(time),\n    autoStart: true,\n    onExpire: Boolean(time) ? onPressButton : undefined,\n  });\n\n  return (\n    <div className=\"round-announcement\">\n      <div className=\"round-announcement__title\">\n        <img src={rodadaTitle} alt=\"Rodada\" />\n      </div>\n      <div className=\"round-announcement__round-wrapper\">\n        <div className=\"round-announcement__circle\"></div>\n        <div className=\"round-announcement__number\">{round ?? 0}</div>\n      </div>\n\n      {children}\n\n      {Boolean(onPressButton) && (\n        <Button type=\"primary\" onClick={onPressButton} className=\"round-announcement__go-button\">\n          {buttonText} {Boolean(time) && <span className=\"round-announcement__in-timed\">{seconds}</span>}\n        </Button>\n      )}\n    </div>\n  );\n}\n\nRoundAnnouncement.propTypes = {\n  round: PropTypes.number,\n  onPressButton: PropTypes.func,\n  buttonText: PropTypes.string,\n  time: PropTypes.number,\n};\n\nRoundAnnouncement.defaultProps = {\n  buttonText: 'Prosseguir',\n  time: 0,\n};\n\nexport default RoundAnnouncement;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from '../loaders/Loading';\n\nfunction StepSwitcher({ children, step, conditions }) {\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  return (conditions?.[step] ?? true) && <Fragment>{children[step]}</Fragment>;\n}\n\nStepSwitcher.propTypes = {\n  children: PropTypes.any.isRequired,\n  step: PropTypes.number.isRequired,\n  conditions: PropTypes.arrayOf(PropTypes.bool),\n};\n\nexport default StepSwitcher;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport useSound from 'use-sound';\n// Design Resources\nimport { message, notification } from 'antd';\n// State & Hooks\nimport useGlobalState from '../../../hooks/useGlobalState';\nimport { useLoading } from '../../../hooks';\n// Resources & Utils\nimport { ARTE_RUIM_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\nimport allCards from '../../../resources/arte-ruim-cards.json';\nimport arteRuimTimer from '../../../sounds/arte-ruim-timer.mp3';\n// Components\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport DrawPhaseDrawStep from './DrawPhaseDrawStep';\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport RoundAnnouncement from '../../shared/RoundAnnouncement';\nimport Instruction from '../../shared/Instruction';\nimport StepSwitcher from '../../shared/StepSwitcher';\n\nfunction DrawPhase({ players, state, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [amIReady, setImReady] = useState(false);\n  const [step, setStep] = useState(0);\n  const [secretCard, setSecretCard] = useState({});\n  const [play] = useSound(arteRuimTimer, { volume: 0.4 });\n\n  useEffect(() => {\n    const myCardId = state?.cards?.[me];\n    setSecretCard(allCards?.[myCardId] ?? {});\n  }, [state?.cards, me]);\n\n  const onSubmitDrawing = useCallback(\n    async (lines) => {\n      try {\n        setLoader('submit-drawing', true);\n        setStep(2);\n        const response = await ARTE_RUIM_API.submitDrawing({\n          gameId,\n          gameName,\n          playerName: me,\n          drawing: JSON.stringify(lines),\n          cardId: secretCard.id,\n        });\n        if (response.data) {\n          setImReady(true);\n          message.success('Acabou o tempo! Aguarde enquanto os outros participantes desenham');\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setStep(0);\n      } finally {\n        setLoader('submit-drawing', false);\n      }\n    },\n    [gameId, gameName, setLoader, me, secretCard.id]\n  );\n\n  const onStartDrawing = () => {\n    play();\n    setStep(1);\n  };\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.DRAW}\n      className=\"draw-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!amIReady, !amIReady]}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={onStartDrawing}\n          buttonText=\"Um dó, lá, si... vamos ir... JÁ!\"\n        >\n          <Instruction white>\n            Você terá 10 segundos para ler a sua carta e desenhá-la. Aperte o botão quando estiver pronto!\n            <br />\n            Fique esperto porque começa assim que você apertar. Não 'seje' lerdo.\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <DrawPhaseDrawStep secretCard={secretCard} onSubmitDrawing={onSubmitDrawing} />\n\n        {/* Step 2 */}\n        <WaitingRoom\n          players={players}\n          title=\"Pronto!\"\n          instruction=\"Vamos aguardar enquanto os outros jogadores terminam seus desenhos!\"\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default DrawPhase;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst getPathFromKonvaLines = (lines) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\nfunction CanvasSVG({ drawing = '', className = '', size = 250 }) {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 500 500\"\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${size}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n}\n\nCanvasSVG.propTypes = {\n  drawing: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nexport default memo(CanvasSVG);\n","import React from 'react';\nimport { getColorFromLetter } from '../../../utils';\n\nfunction Ribbon({ cardEntryId }) {\n  const [, , letter] = cardEntryId.split('-');\n  return (\n    <div className=\"a-ribbon\">\n      <div\n        className={`a-ribbon__content a-ribbon__content--${letter} color-background--${getColorFromLetter(\n          letter\n        )}`}\n      >\n        {letter}\n      </div>\n    </div>\n  );\n}\n\nexport default Ribbon;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n// Components\nimport CanvasSVG from './CanvasSVG';\nimport Ribbon from './Ribbon';\n\nfunction EvaluationAllDrawings({ drawings, activeItem, onActivateItem, votes, canvasSize }) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = `drawing-${drawingEntry.cardId}`;\n        const isActive = activeItem === canvasEntryId;\n        return (\n          <li\n            key={canvasEntryId}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon cardEntryId={votes[canvasEntryId]} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              size={canvasSize}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nEvaluationAllDrawings.propTypes = {\n  activeItem: PropTypes.string,\n  drawings: PropTypes.arrayOf(\n    PropTypes.shape({\n      cardId: PropTypes.string,\n      drawing: PropTypes.string,\n    })\n  ),\n  onActiveItem: PropTypes.func,\n  votes: PropTypes.object,\n  canvasSize: PropTypes.number,\n};\n\nexport default EvaluationAllDrawings;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Resources and Utils\nimport allCards from '../../resources/arte-ruim-cards.json';\nimport { getColorFromLetter } from '../../utils';\n// Components\nimport Card from './Card';\n\nfunction ArteRuimCard({ id, header = 'X' }) {\n  const card = allCards[id];\n\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(card?.level).fill('•').join('')}\n    >\n      {card?.text ?? <WarningOutlined />}\n    </Card>\n  );\n}\n\nArteRuimCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  header: PropTypes.string,\n  level: PropTypes.number,\n};\n\nexport default memo(ArteRuimCard);\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n// Utils\nimport { LETTERS } from '../../../utils/constants';\n// Components\nimport Card from '../../cards/ArteRuimCard';\n\nfunction EvaluationAllCards({ cards, activeItem, onActivateItem, votes }) {\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = `card-${cardEntry.id}-${letter}`;\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card id={cardEntry.id} header={letter} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nEvaluationAllCards.propTypes = {\n  activeItem: PropTypes.string,\n  cards: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n    })\n  ),\n  onActiveItem: PropTypes.func,\n  votes: PropTypes.object,\n};\n\nexport default EvaluationAllCards;\n","import React, { memo } from 'react';\n// Design Resources\nimport { Slider } from 'antd';\n// State & Hooks\nimport { useGlobalState } from '../../../hooks';\n\nconst CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <div className=\"a-canvas-resizer\">\n      <div className=\"a-canvas-resizer__label\">Tamanho das Images</div>\n      <Slider\n        className=\"a-canvas-resizer__slider\"\n        defaultValue={canvasSize}\n        min={100}\n        max={500}\n        step={50}\n        onChange={setCanvasSize}\n      />\n    </div>\n  );\n};\n\nexport default memo(CanvasResizer);\n","import React, { useCallback, useState } from 'react';\n// Design Resources\nimport { Button, message, notification, Space } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\n// State\nimport useGlobalState from '../../../hooks/useGlobalState';\n// Hooks\nimport { useLoading } from '../../../hooks';\n// Utils\nimport { ARTE_RUIM_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Components\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport EvaluationAllDrawings from './EvaluationAllDrawings';\nimport EvaluationAllCards from './EvaluationAllCards';\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport CanvasResizer from './CanvasResizer';\nimport Title from '../../shared/Title';\nimport Instruction from '../../shared/Instruction';\nimport StepSwitcher from '../../shared/StepSwitcher';\n\nfunction EvaluationPhase({ players, state, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [canvasSize] = useGlobalState('canvasSize');\n  const [amIReady, setImReady] = useState(false);\n  const [step, setStep] = useState(0);\n  const [votes, setVotes] = useState({});\n  const [activeItem, setActiveItem] = useState(null);\n\n  const onActivateItem = useCallback(\n    (entryId) => {\n      const [type] = entryId.split('-');\n      if (!activeItem || activeItem.startsWith(type)) {\n        setActiveItem(entryId);\n      } else {\n        if (type === 'card') {\n          setVotes((prevVotes) => {\n            return {\n              ...prevVotes,\n              [activeItem]: entryId,\n            };\n          });\n        } else {\n          setVotes((prevVotes) => {\n            return {\n              ...prevVotes,\n              [entryId]: activeItem,\n            };\n          });\n        }\n        setActiveItem(null);\n      }\n    },\n    [activeItem]\n  );\n\n  const onSubmitVoting = useCallback(async () => {\n    try {\n      setLoader('submit-drawing', true);\n      const preparedVotes = Object.entries(votes).reduce((acc, [drawingEntryId, cardEntryId]) => {\n        const [, drawingId] = drawingEntryId.split('-');\n        const [, cardId] = cardEntryId.split('-');\n        acc[drawingId] = cardId;\n        return acc;\n      }, {});\n\n      setStep(1);\n\n      const response = await ARTE_RUIM_API.submitVoting({\n        gameId,\n        gameName,\n        playerName: me,\n        votes: preparedVotes,\n      });\n      if (response.data) {\n        setImReady(true);\n        message.success('Avaliação enviada! Agora aguarde os outros jogadores');\n      }\n    } catch (e) {\n      notification.error({\n        message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n        description: JSON.stringify(e),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('submit-drawing', false);\n    }\n  }, [gameId, gameName, setLoader, me, votes]);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.EVALUATION}\n      className=\"a-evaluation-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!amIReady]}>\n        {/*Step 0 */}\n        <div className=\"a-evaluation-phase__step-one\">\n          <CanvasResizer />\n          <Title>Adivinhação</Title>\n          <Instruction>\n            Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n            par. Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você\n            selecionou. Quando encontrar todos os pares, envie sua avaliação!\n          </Instruction>\n\n          <EvaluationAllDrawings\n            drawings={state?.drawings ?? []}\n            activeItem={activeItem}\n            onActivateItem={onActivateItem}\n            votes={votes}\n            canvasSize={canvasSize}\n          />\n\n          <EvaluationAllCards\n            cards={state?.cards ?? []}\n            activeItem={activeItem}\n            onActivateItem={onActivateItem}\n            votes={votes}\n          />\n\n          <Space className=\"a-evaluation-phase__action-button\">\n            <Button\n              type=\"primary\"\n              onClick={onSubmitVoting}\n              disabled={Object.values(votes).length < state.drawings.length}\n              icon={<CloudUploadOutlined />}\n            >\n              Enviar sua avaliação\n            </Button>\n          </Space>\n        </div>\n\n        {/*Step 1 */}\n        <WaitingRoom\n          players={players}\n          title=\"Pronto!\"\n          instruction=\"Vamos aguardar enquanto os outros jogadores terminam de avaliar!\"\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Components\nimport AvatarEntry from '../../avatars/AvatarEntry';\n\nfunction GalleryWindowCredits({ artist, artistAvatarId }) {\n  return (\n    <div className=\"a-gallery-window__credits\">\n      <div className=\"a-gallery-window__label\">Artista</div>\n      <span className=\"a-gallery-window__artist-name\">\n        <AvatarEntry id={artistAvatarId} name={artist} />\n      </span>\n    </div>\n  );\n}\n\nGalleryWindowCredits.propTypes = {\n  artist: PropTypes.string,\n  artistAvatarId: PropTypes.number,\n};\n\nexport default memo(GalleryWindowCredits);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { MessageFilled } from '@ant-design/icons';\n// Resources\nimport allCards from '../../../resources/arte-ruim-cards.json';\n// Components\nimport Avatar from '../../avatars/Avatar';\n\nfunction GalleryWindowGuesses({ playersSay, players }) {\n  return (\n    <div className=\"a-gallery-window__guesses\">\n      <div className=\"a-gallery-window__label\">Participantes votaram</div>\n      {Object.entries(playersSay).map(([cardId, playersNames], index) => {\n        return (\n          <div key={`guess-${cardId}-${index}`} className=\"a-gallery-window__guess\">\n            <div className=\"a-gallery-window__speech-bubble\">\n              <MessageFilled className=\"a-gallery-window__speech-bubble-icon\" /> {allCards[cardId]?.text}\n            </div>\n            <div className=\"a-gallery-window__players\">\n              <AntAvatar.Group>\n                {playersNames.map((playerName) => (\n                  <Avatar\n                    id={players[playerName].avatarId}\n                    key={`guess-avatar-${players[playerName].avatarId}`}\n                  />\n                ))}\n              </AntAvatar.Group>\n              <span className=\"a-gallery-window__players-names\">{playersNames.join(', ')}</span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nGalleryWindowGuesses.propTypes = {\n  playersSay: PropTypes.object,\n  players: PropTypes.object,\n};\n\nexport default memo(GalleryWindowGuesses);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimer } from 'react-timer-hook';\n// Design Resources\nimport { Button } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Utils\nimport { inNSeconds } from '../../../utils';\n\nfunction GalleryWindowControls({ galleryLength, activeIndex, setActiveIndex, setStep }) {\n  const { seconds, isRunning, pause, resume } = useTimer({\n    expiryTimestamp: inNSeconds(10 * galleryLength),\n    autoStart: true,\n    onExpire: () => setStep(1),\n  });\n\n  // Automatically go to the next window every 10 seconds\n  useEffect(() => {\n    if (seconds < 10 * galleryLength && seconds > 0 && seconds % 10 === 0) {\n      setActiveIndex((s) => Math.min(s + 1, galleryLength - 1));\n    }\n  }, [seconds, setActiveIndex, galleryLength]);\n\n  const previousStep = () => {\n    setActiveIndex((s) => Math.max(s - 1, 0));\n  };\n\n  const nextStep = () => {\n    setActiveIndex((s) => Math.min(s + 1, galleryLength - 1));\n  };\n\n  return (\n    <div className=\"a-gallery-window__controls\">\n      <div className=\"a-gallery-window__timer-bar\">\n        <span style={{ width: `${Math.abs((10 * seconds) / galleryLength - 100)}%` }}></span>\n      </div>\n      <Button\n        size=\"large\"\n        icon={<StepBackwardOutlined />}\n        onClick={previousStep}\n        disabled={activeIndex === 0}\n      >\n        Desenho Anterior\n      </Button>\n      <Button\n        size=\"large\"\n        icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n        onClick={isRunning ? pause : resume}\n      />\n      <Button size=\"large\" onClick={nextStep} disabled={activeIndex === galleryLength - 1}>\n        Próximo Desenho <StepForwardOutlined />\n      </Button>\n      <Button size=\"large\" onClick={() => setStep(1)} icon={<TrophyOutlined />}>\n        Ver Ranking\n      </Button>\n    </div>\n  );\n}\n\nGalleryWindowControls.propTypes = {\n  galleryLength: PropTypes.number,\n  activeIndex: PropTypes.number,\n  setActiveIndex: PropTypes.func,\n  setStep: PropTypes.func,\n};\n\nexport default GalleryWindowControls;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Design Resources\nimport { StarFilled } from '@ant-design/icons';\n\nfunction StarPoints({ quantity, keyPrefix, className = '' }) {\n  if (!quantity || quantity < 1) {\n    return <span></span>;\n  }\n  const starsArray = Array.from({ length: quantity }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n  return (\n    <span className={clsx('star-points', className)}>\n      + <span className=\"star-points__stars\">{starsArray}</span> point{quantity > 1 ? 's' : ''}\n    </span>\n  );\n}\n\nStarPoints.propTypes = {\n  quantity: PropTypes.number,\n  className: PropTypes.string,\n  keyPrefix: PropTypes.string.isRequired,\n};\n\nexport default memo(StarPoints);\n","import React, { Fragment, memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { CrownFilled, DeleteFilled } from '@ant-design/icons';\n// Resources\nimport allCards from '../../../resources/arte-ruim-cards.json';\n// Components\nimport Avatar from '../../avatars/Avatar';\nimport StarPoints from '../../shared/StarPoints';\n\nfunction GalleryWindowResult({ artist, correctAnswer, playersPoints, playersSay, players }) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswer] ?? {});\n\n  return (\n    <div className=\"a-gallery-window__result\">\n      <div className=\"a-gallery-window__label\">E a carta correta é</div>\n      <div className=\"a-gallery-window__speech-bubble\">\n        <CrownFilled className=\"a-gallery-window__speech-bubble-icon\" />\n        {allCards[correctAnswer].text}\n      </div>\n      {correctGuesses.length ? (\n        <Fragment>\n          <div className=\"a-gallery-window__players\">\n            <AntAvatar.Group>\n              {correctGuesses.map((playerName) => {\n                return (\n                  <Avatar key={`correct-guess-avatar-${playerName}`} id={players[playerName].avatarId} />\n                );\n              })}\n            </AntAvatar.Group>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${artist}`} />\n            <span className=\"a-gallery-window__players-names\">{correctGuesses.join(', ')}</span>\n          </div>\n          <div className=\"a-gallery-window__artist-points\">\n            <Avatar id={players[artist].avatarId} />{' '}\n            <StarPoints quantity={playersPoints?.[artist]} keyPrefix={`artist-points-${artist}`} />{' '}\n            <span className=\"a-gallery-window__players-names\">{artist}</span>\n          </div>\n        </Fragment>\n      ) : (\n        <Typography.Text className=\"a-gallery-window__no-wins\">\n          <DeleteFilled /> Nossa, ninguém acertou. Esse desenho deve ter sido muito ruim.\n        </Typography.Text>\n      )}\n    </div>\n  );\n}\n\nGalleryWindowResult.propTypes = {\n  artist: PropTypes.string,\n  correctAnswer: PropTypes.string,\n  playersPoints: PropTypes.object,\n  playersSay: PropTypes.object,\n  players: PropTypes.object,\n};\n\nexport default memo(GalleryWindowResult);\n","import React, { memo } from 'react';\n\n// Hooks\nimport { useGlobalState } from '../../../hooks';\n// Components\nimport CanvasSVG from './CanvasSVG';\nimport GalleryWindowCredits from './GalleryWindowCredits';\nimport GalleryWindowGuesses from './GalleryWindowGuesses';\nimport GalleryWindowControls from './GalleryWindowControls';\nimport GalleryWindowResult from './GalleryWindowResult';\nimport CanvasResizer from './CanvasResizer';\n\nfunction GalleryWindow({ window, galleryLength, players, activeIndex, setActiveIndex, setStep }) {\n  const [canvasSize] = useGlobalState('canvasSize');\n\n  const { drawing, artist, correctAnswer, playersPoints, playersSay } = window;\n\n  return (\n    <div className=\"a-gallery-window\">\n      <CanvasResizer />\n      <div className=\"a-gallery-window__drawing-container\">\n        <CanvasSVG\n          key={window.correctAnswer}\n          drawing={drawing}\n          size={canvasSize}\n          className=\"a-gallery-window__drawing\"\n        />\n      </div>\n\n      <GalleryWindowCredits artist={artist} artistAvatarId={players[artist].avatarId} />\n\n      <GalleryWindowGuesses players={players} playersSay={playersSay} />\n\n      <GalleryWindowResult\n        artist={artist}\n        correctAnswer={correctAnswer}\n        playersPoints={playersPoints}\n        playersSay={playersSay}\n        players={players}\n      />\n\n      <GalleryWindowControls\n        galleryLength={galleryLength}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n      />\n    </div>\n  );\n}\n\nexport default memo(GalleryWindow);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimer } from 'react-timer-hook';\n// Design Resources\nimport { CrownFilled } from '@ant-design/icons';\n// Utils\nimport { inNSeconds } from '../../utils';\n// Components\nimport Avatar from '../avatars/Avatar';\n\nfunction RankingBoard({ players, ranking }) {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState([]);\n  const [positions, setPositions] = useState([]);\n\n  const maxPoints = ranking[0].newScore;\n\n  const rankByFinalScore = () => {\n    setSortedRanking(ranking.sort((a, b) => (a.newScore < b.newScore ? 1 : -1)));\n    setDisplayStep(3);\n  };\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(4),\n    autoStart: true,\n    onExpire: () => rankByFinalScore(),\n  });\n\n  // Rank by previousScore\n  useEffect(() => {\n    setSortedRanking(ranking.sort((a, b) => (a.previousScore < b.previousScore ? 1 : -1)));\n  }, []); // eslint-disable-line\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 3) {\n      setDisplayStep(1);\n    } else if (seconds === 2) {\n      setDisplayStep(2);\n    }\n  }, [seconds]);\n\n  // Determine position number in rank\n  useEffect(() => {\n    const property = displayStep < 3 ? 'previousScore' : 'newScore';\n\n    let lastPosition = 1;\n    let lastPoints = sortedRanking?.[0]?.[property] ?? 0;\n    setPositions(\n      sortedRanking.map((entry) => {\n        if (entry[property] < lastPoints) {\n          lastPoints = entry[property];\n          lastPosition += 1;\n        }\n\n        return lastPosition;\n      })\n    );\n  }, [sortedRanking, displayStep]);\n\n  return (\n    <div className=\"ranking-board\">\n      {sortedRanking.map((entry, index) => {\n        const { playerName, newScore, previousScore, gainedPoints } = entry;\n        return (\n          <div className={`ranking-board__row ranking-board__row--${index}`} key={`ranking-${playerName}`}>\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{positions?.[index] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerName].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{playerName}</div>\n            </div>\n            <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            {displayStep >= 1 && <div className=\"ranking-board__cell-points-plus\">+{gainedPoints}</div>}\n            {displayStep >= 2 && <div className=\"ranking-board__cell-points-total\">{newScore}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nRankingBoard.propTypes = {\n  players: PropTypes.object,\n  ranking: PropTypes.arrayOf(\n    PropTypes.shape({\n      playerName: PropTypes.string,\n      previousScore: PropTypes.number,\n      gainedPoints: PropTypes.number,\n      newScore: PropTypes.number,\n    })\n  ),\n};\n\nexport default RankingBoard;\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\n// Design Resources\nimport { Button, message, notification } from 'antd';\nimport { PictureOutlined, RocketFilled } from '@ant-design/icons';\n// State & Hooks\nimport useGlobalState from '../../../hooks/useGlobalState';\nimport { useLoading } from '../../../hooks';\n// Resources and Utils\nimport { ARTE_RUIM_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Components\nimport GalleryWindow from './GalleryWindow';\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport AdminOnly from '../../shared/AdminOnly';\nimport RankingBoard from '../../shared/RankingBoard';\nimport Title from '../../shared/Title';\nimport Instruction from '../../shared/Instruction';\nimport StepSwitcher from '../../shared/StepSwitcher';\n\nfunction GalleryPhase({ players, state, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [step, setStep] = useState(0);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n  const [cachedCanvasSize, setCachedCanvasSize] = useState(canvasSize);\n\n  // The gallery needs a bigger image, its annoying that we are changing the users settings but whatever\n  useEffect(() => {\n    if (step === 0) {\n      setCachedCanvasSize(canvasSize);\n      setCanvasSize(500);\n    } else {\n      setCanvasSize(cachedCanvasSize);\n    }\n  }, [step]); // eslint-disable-line\n\n  const onGoToNextRound = useCallback(async () => {\n    try {\n      setLoader('go-to-next-round', true);\n\n      const response = await ARTE_RUIM_API.goToNextPhase({\n        gameId,\n        gameName,\n        playerName: me,\n      });\n      if (response.data) {\n        message.success('Ranking!');\n      }\n    } catch (e) {\n      notification.error({\n        message: 'Vixi, o aplicativo encontrou um erro ao tentar ir para a proxima rodada',\n        description: JSON.stringify(e),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('go-to-next-round', false);\n    }\n  }, [gameId, gameName, me, setLoader]);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.GALLERY}\n      className=\"a-gallery-phase\"\n    >\n      <StepSwitcher step={step}>\n        {/* Step 0 */}\n        <div className=\"a-gallery-phase__windows\">\n          <Title>Galeria de Arte</Title>\n          {state?.gallery && (\n            <GalleryWindow\n              window={state.gallery[activeIndex]}\n              galleryLength={state.gallery.length}\n              players={players}\n              activeIndex={activeIndex}\n              setActiveIndex={setActiveIndex}\n              setStep={setStep}\n            />\n          )}\n        </div>\n\n        {/* Step 1 */}\n        <Fragment>\n          <Title>{state.pointsToVictory >= 0 ? 'Ranking' : 'Game Over'}</Title>\n          <RankingBoard players={players} ranking={state.ranking} />\n          {state.pointsToVictory >= 0 && (\n            <Instruction contained>\n              Faltam <strong>{state.pointsToVictory}</strong> pontos para{' '}\n              <strong>{state?.ranking?.[0]?.playerName ?? 'alguém'}</strong> ganhar...\n            </Instruction>\n          )}\n\n          <Button size=\"large\" onClick={() => setStep(0)} icon={<PictureOutlined />}>\n            Ver Galeria\n          </Button>\n          <AdminOnly>\n            <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onGoToNextRound}>\n              Ir para próxima rodada ou game over\n            </Button>\n          </AdminOnly>\n        </Fragment>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default GalleryPhase;\n","import React, { Fragment, useState } from 'react';\n// Design Resources\nimport { Affix, Avatar as AntAvatar, Badge, Button, Divider, Drawer } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Utils\nimport { AVATAR_DESCRIPTIONS_BR } from '../../utils/constants';\n// Components\nimport Avatar from '../avatars/Avatar';\nimport RulesModal from '../modals/RulesModal';\n\nfunction GameInfoDrawer({ players, state, info, me }) {\n  const [visible, setVisible] = useState(false);\n\n  if (state.phase === 'LOBBY') {\n    return <span></span>;\n  }\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const completeMe = players?.[me];\n  const rankedPlayers = Object.values(players).sort((a, b) => (a.score < b.score ? 1 : -1));\n\n  return (\n    <Fragment>\n      <Affix offsetTop={10} className=\"game-info-drawer__affix-button\">\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          size=\"large\"\n          className=\"game-info-drawer__button\"\n          onClick={showDrawer}\n          icon={<InfoCircleOutlined />}\n        />\n      </Affix>\n      <Drawer title={info.title} placement=\"right\" closable={false} onClose={onClose} visible={visible}>\n        {completeMe && (\n          <Fragment>\n            <div className=\"game-info-drawer__label\">Você é</div>\n            <div className=\"game-info-drawer__me\">\n              <Badge count={completeMe.score} className=\"game-info-drawer__avatar-with-badge\">\n                <Avatar id={completeMe.avatarId} shape=\"square\" />\n              </Badge>\n              {completeMe.name}, {AVATAR_DESCRIPTIONS_BR[completeMe.avatarId]}\n            </div>\n          </Fragment>\n        )}\n        <Divider />\n        <RulesModal gameInfo={info} />\n        <Divider />\n        <div>\n          <div className=\"game-info-drawer__label-inline\">Rodada:</div>\n          <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n            {state?.round ?? '?'}\n          </AntAvatar>\n        </div>\n        {Boolean(state?.teamScore) && (\n          <div>\n            <div className=\"game-info-drawer__label-inline\">Pontos:</div>\n            <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n              {state?.teamScore ?? '?'}\n            </AntAvatar>\n          </div>\n        )}\n\n        {Boolean(state?.pointsToVictory) && (\n          <div>\n            <div className=\"game-info-drawer__label-inline\">Pontos restantes para alguém ganhar:</div>\n            <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n              {state?.pointsToVictory ?? '?'}\n            </AntAvatar>\n          </div>\n        )}\n\n        <Divider />\n        <ul>\n          {rankedPlayers.map((player, index) => {\n            return (\n              <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n                {index + 1}.{' '}\n                <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n                  <Avatar id={player.avatarId} shape=\"square\" />\n                </Badge>\n                {player.name}, {AVATAR_DESCRIPTIONS_BR[player.avatarId]}\n              </div>\n            );\n          })}\n        </ul>\n      </Drawer>\n    </Fragment>\n  );\n}\n\nexport default GameInfoDrawer;\n","export default __webpack_public_path__ + \"static/media/game-over-title.7073f1c0.svg\";","import React from 'react';\n// Images\nimport gameOverTitle from '../../images/game-over-title.svg';\n// Components\nimport PhaseContainer from './PhaseContainer';\nimport Avatar from '../avatars/Avatar';\nimport { AVATAR_DESCRIPTIONS_BR } from '../../utils/constants';\nimport { Progress } from 'antd';\n\nfunction GameOver({ info, state }) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase=\"GAME_OVER\" className=\"game-over\">\n      <div className=\"game-over__container\">\n        <div className=\"game-over__title\">\n          <img src={gameOverTitle} alt=\"Game Over\" />\n        </div>\n\n        {Boolean(state.winner) && (\n          <div className=\"game-over__winner\">\n            <div className=\"game-over__text\">Jogo concluido e o vencedor é:</div>\n            <Avatar className=\"game-over__avatar\" id={state.winner?.avatarId ?? 25} />\n            <div className=\"game-over__winner-name\">\n              <strong>{state.winner?.name ?? '?'}</strong>, {AVATAR_DESCRIPTIONS_BR[state.winner?.avatarId]}\n            </div>\n          </div>\n        )}\n\n        {Boolean(state.team) && (\n          <div className=\"game-over__winner\">\n            <div className=\"game-over__text\">Jogo concluido.</div>\n            <Progress\n              type=\"circle\"\n              strokeColor={{\n                '0%': '#ff0000',\n                '70%': '#ff0000',\n                '100%': '#87d068',\n              }}\n              percent={state.team.score ?? 0}\n            />\n            <div className=\"game-over__text\">\n              {state.team.victory ? 'Parabéns, vocês ganharam!' : 'Não foi dessa vez, que vergonha heim!'}\n            </div>\n          </div>\n        )}\n\n        {!Boolean(state.winner) && !Boolean(state.team) && (\n          <div className=\"game-over__text\">Jogo concluido.</div>\n        )}\n      </div>\n    </PhaseContainer>\n  );\n}\n\nexport default GameOver;\n","import React, { Fragment, useEffect, useState } from 'react';\n// Hooks\nimport { useGameState, useGlobalState } from '../../../hooks';\nimport { GAME_COLLECTION, PHASES } from '../../../utils/constants';\n// Hooks\nimport { useGamePlayers } from '../../../hooks/useGamePlayers';\n// Utils\nimport gameList from '../../../resources/games.json';\n// Components\nimport Lobby from '../../lobby/Lobby';\nimport Rules from '../../rules/Rules';\nimport PageError from '../../errors/PageError';\nimport DrawPhase from './DrawPhase';\nimport EvaluationPhase from './EvaluationPhase';\nimport GalleryPhase from './GalleryPhase';\nimport GameInfoDrawer from '../../shared/GameInfoDrawer';\nimport GameOver from '../../shared/GameOver';\n\nfunction getActiveComponent(phase) {\n  switch (phase) {\n    case PHASES.ARTE_RUIM.LOBBY:\n      return Lobby;\n    case PHASES.ARTE_RUIM.RULES:\n      return Rules;\n    case PHASES.ARTE_RUIM.DRAW:\n      return DrawPhase;\n    case PHASES.ARTE_RUIM.EVALUATION:\n      return EvaluationPhase;\n    case PHASES.ARTE_RUIM.GALLERY:\n      return GalleryPhase;\n    case PHASES.ARTE_RUIM.GAME_OVER:\n      return GameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionArteRuim({ gameId }) {\n  const players = useGamePlayers(gameId, GAME_COLLECTION.ARTE_RUIM);\n  const state = useGameState(gameId, GAME_COLLECTION.ARTE_RUIM);\n  const [me] = useGlobalState('me');\n  const [info, setInfo] = useState({});\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? gameList[gameId[0]] : {});\n  }, [gameId]);\n\n  if (process.env.NODE_ENV === 'development') {\n    console.table(players);\n    console.log({ state });\n  }\n\n  if (!me) {\n    return <Lobby players={players} state={state} info={info} />;\n  }\n\n  const ActiveComponent = getActiveComponent(state.phase);\n\n  return (\n    <Fragment>\n      <GameInfoDrawer players={players} state={state} info={info} me={me} />\n      <ActiveComponent players={players} state={state} info={info} />\n    </Fragment>\n  );\n}\n\nexport default SessionArteRuim;\n","import React, { useState } from 'react';\n// Design Resources\nimport { Button } from 'antd';\nimport { CheckCircleFilled, CloudUploadOutlined } from '@ant-design/icons';\n// Resources\nimport allWords from '../../../resources/um-so-words.json';\n// Components\nimport Title from '../../shared/Title';\nimport Instruction from '../../shared/Instruction';\n\nfunction WordSelectionStep({ words = [], onSendSelectedWords }) {\n  const [selectedWords, setSelectedWords] = useState({});\n\n  const onSelectWord = (wordId) => {\n    setSelectedWords((s) => {\n      const newState = { ...s };\n      if (newState[wordId]) {\n        delete newState[wordId];\n      } else {\n        newState[wordId] = true;\n      }\n      return newState;\n    });\n  };\n\n  const selectedWordsArray = Object.keys(selectedWords);\n\n  return (\n    <div className=\"u-word-selection-step\">\n      <Title white>Selecione a Palavra-Secreta</Title>\n\n      <Instruction white>\n        A palavra secreta com mais votos será escolhida para essa rodada. Você pode selecionar quantas quiser!\n      </Instruction>\n\n      <ul className=\"u-word-card\">\n        {words.map((wordId) => {\n          return (\n            <li className=\"u-word-card__word\" key={wordId}>\n              <button className=\"u-word-card__button\" onClick={() => onSelectWord(wordId)}>\n                <span className=\"u-word-card__text\">{allWords[wordId]}</span>\n                <span className=\"u-word-card__icon\">{selectedWords[wordId] && <CheckCircleFilled />}</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      <Button\n        icon={<CloudUploadOutlined />}\n        type=\"primary\"\n        onClick={() => onSendSelectedWords(selectedWordsArray)}\n        disabled={selectedWordsArray.length === 0}\n      >\n        Enviar votos\n      </Button>\n    </div>\n  );\n}\n\nexport default WordSelectionStep;\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { message, notification, Progress } from 'antd';\n// Hooks\nimport { useGlobalState } from '../../../hooks';\nimport { useLoading } from '../../../hooks';\n// Resources & Utils\nimport { UM_SO_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Resources\nimport allWords from '../../../resources/um-so-words.json';\n// Components\nimport Avatar from '../../avatars/Avatar';\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport RoundAnnouncement from '../../shared/RoundAnnouncement';\nimport Instruction from '../../shared/Instruction';\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport StepSwitcher from '../../shared/StepSwitcher';\nimport WordSelectionStep from './WordSelectionStep';\n\nfunction WordSelectionPhase({ state, players, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [step, setStep] = useState(0);\n  const [amIReady, setImReady] = useState(false);\n  const [guesser, setGuesser] = useState(players[state.guesser]);\n  const [amItheGuesser, setAmITheGuesser] = useState(false);\n\n  // Determine if user is the guesser\n  useEffect(() => {\n    setGuesser(players[state.guesser]);\n    setAmITheGuesser(state.guesser === me);\n  }, [state.guesser, me, players]);\n\n  useEffect(() => {\n    if (step === 0 && state.previousSecretWordId) {\n      message.info(`A palavra secreta anterior era: ${allWords[state.previousSecretWordId]}`);\n    }\n  }, [step, state?.previousSecretWordId]);\n\n  const onSendSelectedWords = useCallback(\n    async (selectedWords) => {\n      try {\n        setLoader('submit-votes', true);\n        setStep(2);\n        const response = await UM_SO_API.submitWordSelectionVotes({\n          gameId,\n          gameName,\n          playerName: me,\n          votes: selectedWords,\n        });\n        if (response.data) {\n          setImReady(true);\n          message.success('Acabou o tempo! Aguarde enquanto os outros participantes decidem');\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar seus votos',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setStep(0);\n      } finally {\n        setLoader('submit-votes', false);\n      }\n    },\n    [gameId, gameName, me, setLoader]\n  );\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UM_SO.WORD_SELECTION}\n      className=\"u-word-selection-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!amIReady]}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={() => setStep(1)} time={7}>\n          <Instruction contained>\n            Para essa rodada,\n            <span className=\"u-word-selection-phase__guesser-name-announcement\">\n              {amItheGuesser ? (\n                'VOCÊ'\n              ) : (\n                <>\n                  <Avatar id={guesser.avatarId} /> {guesser.name}\n                </>\n              )}\n            </span>\n            será o(a) adivinhador(a) <br />\n            {state?.nextGuesser ? `Próximo adivinhador(a): ${state.nextGuesser}` : 'Essa é a última rodada'}\n          </Instruction>\n          <div className=\"u-word-selection-phase__team-points\">\n            Pontos do Grupo:\n            <br />\n            <Progress\n              percent={state.teamScore ?? 0}\n              status=\"active\"\n              strokeColor={{\n                '0%': '#ff0000',\n                '70%': '#ff0000',\n                '100%': '#87d068',\n              }}\n            />\n          </div>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <Fragment>\n          {amItheGuesser ? (\n            <WaitingRoom\n              players={players}\n              title=\"Você é o(a) adivinhador(a)\"\n              instruction=\"Aguarde os outros jogadores decidirem a palavra secreta.\"\n            />\n          ) : (\n            <WordSelectionStep words={state?.words} onSendSelectedWords={onSendSelectedWords} />\n          )}\n        </Fragment>\n\n        {/* Step 2 */}\n        <WaitingRoom players={players} title=\"Pronto!\" instruction=\"Vamos aguardar os outros joadores.\" />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nWordSelectionPhase.propTypes = {\n  info: PropTypes.object,\n  players: PropTypes.object,\n  state: PropTypes.object,\n};\n\nexport default WordSelectionPhase;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Resources\nimport allWords from '../../resources/um-so-words.json';\n// Components\nimport Card from './Card';\n\nfunction UmSoCard({ id, header = 'Palavra Secreta' }) {\n  const word = allWords[id];\n\n  return (\n    <Card color=\"purple\" header={header} size=\"large\">\n      {word ?? <WarningOutlined />}\n    </Card>\n  );\n}\n\nUmSoCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string,\n};\n\nexport default memo(UmSoCard);\n","import React, { useState } from 'react';\n// Design Resources\nimport { Button, Input, Space } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\n// Components\nimport Title from '../../shared/Title';\nimport Instruction from '../../shared/Instruction';\nimport Card from '../../cards/UmSoCard';\n\nfunction SuggestionStep({ onSendSuggestions, secretWordId, suggestionsNumber = 1 }) {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onChangeInput = (e) => {\n    const { id, value } = e.target;\n    if (id && value?.length > 1) {\n      const indexStr = id.split('-')[1];\n      const index = Number(indexStr) - 1;\n      setSuggestions((s) => {\n        const newState = { ...s };\n        newState[index] = value.toUpperCase().trim();\n        return newState;\n      });\n    }\n  };\n\n  const suggestionsValues = Object.values(suggestions);\n\n  return (\n    <div className=\"u-word-suggestion-step\">\n      <Title>Escreva uma dica</Title>\n\n      <Instruction contained>\n        A dica tem que ser uma palavra única que ajude o adivinhador... adivinhar.\n        <br />\n        É proibido usar derivados, partes da palavra ou traduções em outras linguas.\n        <br />\n        E não seja tão óbvio, já que dicas similares são eliminadas.\n        <br />\n      </Instruction>\n\n      <Card id={secretWordId} header=\"Palavra Secreta\" />\n\n      {suggestionsNumber > 1 && (\n        <Instruction contained>\n          Já que esse jogo tem menos jogadores, você tem que escrever {suggestionsNumber} sugestões\n        </Instruction>\n      )}\n\n      <Space className=\"u-word-suggestion-step__inputs\">\n        {Array(suggestionsNumber)\n          .fill(1)\n          .map((entry, index) => {\n            const id = `suggestion-${entry + index}`;\n            return (\n              <Input\n                placeholder=\"Escreva dica\"\n                key={id}\n                id={id}\n                onChange={onChangeInput}\n                className=\"u-word-suggestion-step__input\"\n              />\n            );\n          })}\n      </Space>\n\n      <Space className=\"u-word-suggestion-step__submit\">\n        <Button\n          icon={<CloudUploadOutlined />}\n          type=\"primary\"\n          onClick={() => onSendSuggestions(suggestionsValues)}\n          disabled={suggestionsValues.length < suggestionsNumber}\n        >\n          {suggestionsNumber > 1 ? 'Enviar sugestões' : 'Enviar sugestão'}\n        </Button>\n      </Space>\n    </div>\n  );\n}\n\nexport default SuggestionStep;\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { message, notification } from 'antd';\n// Hooks\nimport { useGlobalState } from '../../../hooks';\nimport { useLoading } from '../../../hooks';\n// Resources & Utils\nimport { UM_SO_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Components\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport StepSwitcher from '../../shared/StepSwitcher';\nimport SuggestionStep from './SuggestionStep';\n\nfunction SuggestPhase({ state, players, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [step, setStep] = useState(0);\n  const [amIReady, setImReady] = useState(false);\n  const [guesser, setGuesser] = useState(players[state.guesser]);\n  const [amITheGuesser, setAmITheGuesser] = useState(false);\n\n  // Determine if user is the guesser\n  useEffect(() => {\n    setGuesser(players[state.guesser]);\n    setAmITheGuesser(state.guesser === me);\n  }, [state.guesser, me, players]);\n\n  const onSendSuggestions = useCallback(\n    async (suggestions) => {\n      try {\n        setLoader('submit-suggestion', true);\n        setStep(1);\n        const response = await UM_SO_API.submitSuggestions({\n          gameId,\n          gameName,\n          playerName: me,\n          suggestions,\n        });\n\n        if (response.data) {\n          setImReady(true);\n          message.success(\n            'Sugestão enviada com successo! Aguarde enquanto os outros participantes escrevem suas dicas'\n          );\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar sua(s) dica(s)',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setStep(0);\n      } finally {\n        setLoader('submit-suggestion', false);\n      }\n    },\n    [gameId, gameName, me, setLoader]\n  );\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UM_SO.SUGGEST}\n      className=\"word-selection-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!amIReady]}>\n        {/* Step 0 */}\n        <Fragment>\n          {amITheGuesser ? (\n            <WaitingRoom\n              players={players}\n              title=\"Você é o(a) adivinhador(a)\"\n              instruction=\"Aguarde os outros jogadores decidirem a palavra secreta.\"\n            />\n          ) : (\n            <SuggestionStep\n              guesser={guesser}\n              onSendSuggestions={onSendSuggestions}\n              secretWordId={state.secretWordId}\n              suggestionsNumber={state.suggestionsNumber}\n            />\n          )}\n        </Fragment>\n\n        {/* Step 1 */}\n        <WaitingRoom players={players} title=\"Pronto!\" instruction=\"Vamos aguardar os outros joadores.\" />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nSuggestPhase.propTypes = {\n  info: PropTypes.object,\n  players: PropTypes.object,\n  state: PropTypes.object,\n};\n\nexport default SuggestPhase;\n","import React, { memo } from 'react';\n// Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CloseOutlined } from '@ant-design/icons';\n// Components\nimport BasicCard from '../../cards/Card';\nimport clsx from 'clsx';\nimport Avatar from '../../avatars/Avatar';\nimport { getColorFromIndex } from '../../../utils';\nimport { LETTERS } from '../../../utils/constants';\n\nfunction SuggestionCard({ suggestion, invalid, avatarId, index }) {\n  return (\n    <BasicCard\n      size=\"medium\"\n      color={getColorFromIndex(index)}\n      className={clsx(invalid && 'u-suggestion-card__invalid')}\n      header={LETTERS[index]}\n    >\n      {invalid ? (\n        <AntAvatar size=\"small\" className=\"u-suggestion-card__suggestion-avatar\">\n          <CloseOutlined />\n        </AntAvatar>\n      ) : (\n        <Avatar id={avatarId} size=\"small\" className=\"u-suggestion-card__suggestion-avatar\" />\n      )}\n      {suggestion}\n    </BasicCard>\n  );\n}\n\nexport default memo(SuggestionCard);\n","import React, { useState } from 'react';\n// Design Resources\nimport { Button, Space } from 'antd';\nimport { CloudUploadOutlined, ExclamationCircleOutlined, FireFilled } from '@ant-design/icons';\n// State\nimport { useGlobalState } from '../../../hooks';\n// Components\nimport Title from '../../shared/Title';\nimport Instruction from '../../shared/Instruction';\nimport AdminOnly from '../../shared/AdminOnly';\nimport Card from '../../cards/UmSoCard';\nimport SuggestionCard from './SuggestionCard';\n\nfunction CompareSuggestionsStep({\n  nextGuesser,\n  me,\n  secretWordId,\n  suggestions,\n  onValidateSuggestions,\n  players,\n}) {\n  const [myRecommendation, setMyRecommendation] = useState(suggestions);\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  const onSetValidation = (index, suggestionEntry, notAllowed) => {\n    if (notAllowed) return;\n\n    setMyRecommendation((arr) => {\n      const newArr = [...arr];\n      if (newArr[index]) {\n        newArr[index].invalid = !newArr[index].invalid;\n      } else {\n        newArr[index] = {\n          ...suggestionEntry,\n          invalid: true,\n        };\n      }\n      return newArr;\n    });\n  };\n\n  const suggestionsValues = Object.values(myRecommendation);\n  const amITheNextGuesser = nextGuesser === me;\n\n  return (\n    <div className=\"u-word-compare-suggestions-step\">\n      <Title white>Comparem as sugestões</Title>\n      <Card id={secretWordId} header=\"Palavra Secreta\" />\n      <Instruction contained>\n        Já eliminamos todas as palavras iguais, agora, elimine palavras inválidas ou similares.\n        <br />\n        Lembre-se que são consideradas dicas iguais palavras derividadas, conjugações: piloto = pilotar =\n        pilotando. Variações como pluralidade, gênero e erros ortograficos também devem ser\n        eliminadas: príncipe = princesa = principes = pryncip.\n        <br />\n        <ExclamationCircleOutlined /> Para não virar bagunça, somente{' '}\n        <strong>\n          <u>{nextGuesser}</u>\n        </strong>{' '}\n        pode clicar nas palavras para eliminá-las ou ativá-las, mas todos podem discutir. <br /> Refiram às\n        palavras por número, o Adivinhador pode estar ouvindo!\n      </Instruction>\n\n      <Space className=\"u-word-compare-suggestions-step__suggestions\">\n        {suggestions.map((suggestionEntry, index) => {\n          if (!amITheNextGuesser && !isAdmin) {\n            return (\n              <div key={`${suggestionEntry.suggestion}-${index}`}>\n                <SuggestionCard\n                  suggestion={suggestionEntry.suggestion}\n                  invalid={suggestionEntry.invalid}\n                  avatarId={players[suggestionEntry.playerName].avatarId}\n                  index={index}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <button\n              key={`${suggestionEntry.suggestion}-${index}`}\n              className=\"u-word-compare-suggestions-step__suggestion-button\"\n              onClick={() => onSetValidation(index, suggestionEntry, suggestionEntry.invalid)}\n            >\n              <SuggestionCard\n                suggestion={suggestionEntry.suggestion}\n                invalid={myRecommendation?.[index]?.invalid ?? suggestionEntry.invalid}\n                avatarId={players[suggestionEntry.playerName].avatarId}\n                index={index}\n              />\n            </button>\n          );\n        })}\n      </Space>\n\n      {amITheNextGuesser && (\n        <Space className=\"u-word-compare-suggestions-step__submit\">\n          <Button\n            icon={<CloudUploadOutlined />}\n            type=\"primary\"\n            onClick={() => onValidateSuggestions(suggestionsValues)}\n            disabled={false}\n          >\n            Confirmar dicas válidas\n          </Button>\n        </Space>\n      )}\n\n      <AdminOnly>\n        <Button\n          icon={<FireFilled />}\n          type=\"primary\"\n          danger\n          onClick={() => onValidateSuggestions(suggestionsValues)}\n          disabled={false}\n        >\n          Confirmar dicas válidas como Admin\n        </Button>\n      </AdminOnly>\n    </div>\n  );\n}\n\nexport default CompareSuggestionsStep;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { message, notification } from 'antd';\n// Hooks\nimport { useGlobalState } from '../../../hooks';\nimport { useLoading } from '../../../hooks';\n// Resources & Utils\nimport { UM_SO_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Components\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport StepSwitcher from '../../shared/StepSwitcher';\nimport CompareSuggestionsStep from './CompareSuggestionsStep';\n\nfunction ComparePhase({ state, players, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [step, setStep] = useState(0);\n  const [amITheGuesser, setAmITheGuesser] = useState(false);\n\n  // Determine if user is the guesser\n  useEffect(() => {\n    setAmITheGuesser(state.guesser === me);\n  }, [state.guesser, me, players]);\n\n  const onValidateSuggestions = useCallback(\n    async (validationArray) => {\n      try {\n        setLoader('validate-suggestions', true);\n        setStep(1);\n        const response = await UM_SO_API.submitValidation({\n          gameId,\n          gameName,\n          playerName: me,\n          validSuggestions: validationArray.filter((suggestion) => !suggestion.invalid),\n        });\n\n        if (response.data) {\n          message.success('Validação enviada com sucesso!');\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar a confirmação das sugestões',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setStep(0);\n      } finally {\n        setLoader('validate-suggestions', false);\n      }\n    },\n    [gameId, gameName, me, setLoader]\n  );\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UM_SO.COMPARE}\n      className=\"u-compare-phase\"\n    >\n      <StepSwitcher step={step}>\n        {/* Step 0 */}\n        <div className=\"u-compare-phase__step\">\n          {amITheGuesser ? (\n            <WaitingRoom\n              players={players}\n              title=\"Você é o(a) adivinhador(a)\"\n              instruction=\"Aguarde os outros jogadores selecionarem as dicas válidas.\"\n            />\n          ) : (\n            <CompareSuggestionsStep\n              nextGuesser={state.nextGuesser}\n              secretWordId={state.secretWordId}\n              suggestions={state.suggestions}\n              me={me}\n              players={players}\n              onValidateSuggestions={onValidateSuggestions}\n            />\n          )}\n        </div>\n\n        {/* Step 1 */}\n        <WaitingRoom players={players} title=\"Enviando a confirmação de sugestões\" instruction=\"Aguarde...\" />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nComparePhase.propTypes = {\n  info: PropTypes.object,\n  players: PropTypes.object,\n  state: PropTypes.object,\n};\n\nexport default ComparePhase;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// Design Resources\nimport { Button, message, notification, Space } from 'antd';\nimport { CheckOutlined, CloseOutlined, MinusOutlined } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState } from '../../../hooks';\nimport { useLoading } from '../../../hooks';\n// Resources & Utils\nimport { UM_SO_API } from '../../../adapters';\nimport { PHASES } from '../../../utils/constants';\n// Components\nimport PhaseContainer from '../../shared/PhaseContainer';\nimport WaitingRoom from '../../shared/WaitingRoom';\nimport StepSwitcher from '../../shared/StepSwitcher';\nimport Title from '../../shared/Title';\nimport Avatar from '../../avatars/Avatar';\nimport Instruction from '../../shared/Instruction';\nimport UmSoCard from '../../cards/UmSoCard';\nimport SuggestionCard from './SuggestionCard';\n\nfunction GuessPhase({ state, players, info }) {\n  const [, setLoader] = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [me] = useGlobalState('me');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [step, setStep] = useState(0);\n  const [guesser, setGuesser] = useState(players[state.guesser]);\n  const [amITheNextGuesser, setAmITheNextGuesser] = useState(false);\n\n  // Determine if user is the guesser\n  useEffect(() => {\n    setGuesser(players[state.guesser]);\n  }, [state.guesser, me, players]);\n\n  useEffect(() => {\n    setAmITheNextGuesser(state.nextGuesser === me);\n  }, [state.nextGuesser, me]);\n\n  const onSubmitGuess = useCallback(\n    async (result) => {\n      try {\n        setLoader('guess', true);\n        setStep(1);\n        const response = await UM_SO_API.confirmGuess({\n          gameId,\n          gameName,\n          playerName: me,\n          guess: result,\n        });\n\n        if (response.data) {\n          message.success('Resultado enviado com sucesso!');\n        }\n      } catch (e) {\n        notification.error({\n          message: 'Vixi, o aplicativo encontrou um erro ao tentar enviar o resultado',\n          description: JSON.stringify(e),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n        setStep(0);\n      } finally {\n        setLoader('guess', false);\n      }\n    },\n    [gameId, gameName, me, setLoader]\n  );\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UM_SO.GUESS}\n      className=\"u-word-guess-phase\"\n    >\n      <StepSwitcher step={step}>\n        {/* Step 0 */}\n        <div className=\"u-word-guess-phase__step\">\n          <Title>\n            Hora de brilhar <Avatar id={guesser.avatarId} /> {guesser.name}!\n          </Title>\n          <Instruction contained>Você tem uma única change de adivinhar a palavra secreta!</Instruction>\n          <UmSoCard id={''} />\n          <Instruction contained>\n            {state.nextGuesser} está encarregado(a) de apertar os botões se você acertou ou não. <br />\n            São 3 pontos se você acertar, -1 se errar, mas você pode passar e não tentar, covarde!.. <br />\n            As dicas são:\n          </Instruction>\n\n          <Space className=\"u-word-guess-phase__suggestions\">\n            {state.validSuggestions.map((suggestionEntry, index) => {\n              return (\n                <div key={`${suggestionEntry.suggestion}-${index}`}>\n                  <SuggestionCard\n                    suggestion={suggestionEntry.suggestion}\n                    invalid={false}\n                    avatarId={players[suggestionEntry.playerName].avatarId}\n                    index={index}\n                  />\n                </div>\n              );\n            })}\n          </Space>\n\n          {(amITheNextGuesser || isAdmin) && (\n            <Space className=\"u-word-guess-phase__guess-submit\">\n              <Button\n                icon={<CheckOutlined />}\n                type=\"primary\"\n                style={{ backgroundColor: 'green' }}\n                onClick={() => onSubmitGuess('CORRECT')}\n                disabled={false}\n              >\n                Acertou\n              </Button>\n              <Button\n                icon={<CloseOutlined />}\n                type=\"primary\"\n                danger\n                onClick={() => onSubmitGuess('WRONG')}\n                disabled={false}\n              >\n                Errou\n              </Button>\n              <Button\n                icon={<MinusOutlined />}\n                type=\"default\"\n                onClick={() => onSubmitGuess('PASS')}\n                disabled={false}\n              >\n                Passou a vez\n              </Button>\n            </Space>\n          )}\n        </div>\n\n        {/* Step 1 */}\n        <WaitingRoom players={players} title=\"Enviando a confirmação de sugestões\" instruction=\"Aguarde...\" />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nGuessPhase.propTypes = {\n  info: PropTypes.object,\n  players: PropTypes.object,\n  state: PropTypes.object,\n};\n\nexport default GuessPhase;\n","import React, { Fragment, useEffect, useState } from 'react';\n// Hooks\nimport { useGameState, useGlobalState } from '../../../hooks';\nimport { GAME_COLLECTION, PHASES } from '../../../utils/constants';\n// Hooks\nimport { useGamePlayers } from '../../../hooks/useGamePlayers';\n// Utils\nimport gameList from '../../../resources/games.json';\n// Components\nimport Lobby from '../../lobby/Lobby';\nimport Rules from '../../rules/Rules';\nimport PageError from '../../errors/PageError';\nimport WordSelectionPhase from './WordSelectionPhase';\nimport SuggestPhase from './SuggestPhase';\nimport ComparePhase from './ComparePhase';\nimport GuessPhase from './GuessPhase';\nimport GameOver from '../../shared/GameOver';\nimport GameInfoDrawer from '../../shared/GameInfoDrawer';\n\nfunction getActiveComponent(phase) {\n  switch (phase) {\n    case PHASES.UM_SO.LOBBY:\n      return Lobby;\n    case PHASES.UM_SO.RULES:\n      return Rules;\n    case PHASES.UM_SO.WORD_SELECTION:\n      return WordSelectionPhase;\n    case PHASES.UM_SO.SUGGEST:\n      return SuggestPhase;\n    case PHASES.UM_SO.COMPARE:\n      return ComparePhase;\n    case PHASES.UM_SO.GUESS:\n      return GuessPhase;\n    case PHASES.UM_SO.GAME_OVER:\n      return GameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionUmSo({ gameId }) {\n  const players = useGamePlayers(gameId, GAME_COLLECTION.UM_SO);\n  const state = useGameState(gameId, GAME_COLLECTION.UM_SO);\n  const [me] = useGlobalState('me');\n  const [info, setInfo] = useState({});\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? gameList[gameId[0]] : {});\n  }, [gameId]);\n\n  if (process.env.NODE_ENV === 'development') {\n    console.table(players);\n    console.log({ state });\n  }\n\n  if (!me) {\n    return <Lobby players={players} state={state} info={info} />;\n  }\n\n  const ActiveComponent = getActiveComponent(state.phase);\n\n  return (\n    <Fragment>\n      <GameInfoDrawer players={players} state={state} info={info} me={me} />\n      <ActiveComponent players={players} state={state} info={info} />\n    </Fragment>\n  );\n}\n\nexport default SessionUmSo;\n","import SessionArteRuim from './arte-ruim/SessionArteRuim';\nimport SessionUmSo from './um-so/SessionUmSo';\n\nconst games = {\n  SessionArteRuim,\n  SessionUmSo,\n};\n\nexport default games;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n// Design Resources\nimport { message, notification } from 'antd';\n// Adapters\nimport { GAME_API } from '../adapters';\n// Hooks\nimport { useIsGameStale, useLoading, useGlobalState } from '../hooks';\n// Utils\nimport { getGameIdFromURL, getGameIdFromLocation, isValidGameId } from '../utils';\nimport { GAME_COLLECTION } from '../utils/constants';\n// Components\nimport LoadingPage from './loaders/LoadingPage';\nimport PageError from './errors/PageError';\nimport GameSessions from './games';\n\nfunction Game() {\n  const history = useHistory();\n  const [, setLoader] = useLoading();\n  const [gameId, setGameId] = useGlobalState('gameId');\n  const [gameName, setGameName] = useGlobalState('gameName');\n  const [gameMeta, setGameMeta] = useGlobalState('gameMeta');\n\n  const [isPageLoading, setPageLoading] = useState(true);\n  const isGameStale = useIsGameStale(gameMeta?.createdAt);\n\n  // Verify url game code\n  useEffect(() => {\n    const urlGameId = getGameIdFromURL(history);\n    if (isValidGameId(urlGameId)) {\n      setGameId(urlGameId);\n    } else {\n      message.error('Vixi, a id do jogo na barra de endereços tá errada');\n      history.push('/');\n    }\n  }, [history, setGameId]);\n\n  // Keeps track of url changes\n  useEffect(() => {\n    return history.listen((location) => {\n      const urlGameId = getGameIdFromLocation(location);\n      console.log({ urlGameId });\n      if (isValidGameId(urlGameId)) {\n        setGameId(urlGameId);\n        message.info('Uma nova id de jogo foi provida');\n      } else {\n        message.error('Vixi, a id do jogo na barra de endereços tá errada');\n        history.push('/');\n      }\n    });\n  }, [history, setGameId]);\n\n  // Load game\n  useEffect(() => {\n    setPageLoading(true);\n    async function loadGameSession() {\n      try {\n        setLoader('load', true);\n        const meta = await GAME_API.loadGame({ gameId });\n        setGameName(meta.data.gameName);\n        setGameMeta(meta.data);\n      } catch (e) {\n        console.error(e);\n        notification.error({\n          message: 'Erro ao carregar o jogo',\n          description: JSON.stringify(e),\n        });\n        console.error(e);\n      } finally {\n        setPageLoading(false);\n        setLoader('load', false);\n      }\n    }\n\n    if (gameId) {\n      loadGameSession();\n    }\n  }, [gameId]); // eslint-disable-line\n\n  // Deffer to load screen if any major API call is running\n  if (isPageLoading) {\n    return <LoadingPage />;\n  }\n\n  if (isGameStale) {\n    return (\n      <PageError message=\"Jogo expirado\" description=\"Esse jogo é muito antigo e não pode ser usado mais\" />\n    );\n  }\n\n  if (gameId && gameName) {\n    switch (gameName) {\n      case GAME_COLLECTION.ARTE_RUIM:\n        return <GameSessions.SessionArteRuim gameId={gameId} />;\n      case GAME_COLLECTION.UM_SO:\n        return <GameSessions.SessionUmSo gameId={gameId} />;\n      default:\n        console.warn('Wrong game library provided');\n    }\n  }\n\n  // If switch fails, it's an error\n  return <PageError />;\n}\n\nexport default Game;\n","import { useEffect, useState } from 'react';\n\nexport function useIsGameStale(gameCreatedAt) {\n  const [isGameStale, setGameStale] = useState(false);\n\n  useEffect(() => {\n    setGameStale(Date.now() - 24 * 60 * 60 * 1000 > gameCreatedAt);\n  }, [gameCreatedAt, setGameStale]);\n\n  return isGameStale;\n}\n","import React from 'react';\n// import { Image, Layout } from 'antd';\nimport gameList from '../resources/games.json';\nimport Avatar from './avatars/Avatar';\nimport AvatarEntry from './avatars/AvatarEntry';\nimport GameOver from './shared/GameOver';\nimport Instruction from './shared/Instruction';\nimport PhaseContainer from './shared/PhaseContainer';\nimport RoundAnnouncement from './shared/RoundAnnouncement';\n// Resources\nimport allWords from '../resources/um-so-words.json';\nimport { CheckCircleFilled, CheckCircleOutlined } from '@ant-design/icons';\nimport { Button, Input } from 'antd';\nimport Title from './shared/Title';\nimport { LETTERS } from '../utils/constants';\nimport Card from './cards/Card';\nimport { getColorFromLetter } from '../utils';\n\nfunction TestingZone() {\n  const info = gameList['U'];\n\n  const players = {\n    Flaviane: {\n      avatarId: 10,\n      name: 'Flaviane',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n    Kavis: {\n      avatarId: 11,\n      name: 'Kavis',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n    Stephanie: {\n      avatarId: 12,\n      name: 'Stephanie',\n      ready: false,\n      score: 0,\n      updatedAt: Date.now(),\n    },\n  };\n\n  // Mock State\n  const state = {\n    phase: 'WORD_SELECTION',\n    guesser: 'Kavis',\n    playerOrder: ['Flaviane', 'Stephanie', 'Kavis', 'Flaviane', 'Stephanie', 'Kavis'],\n    round: 3,\n    words: [1, 2, 3, 4, 5],\n    // phase: 'GAME_OVER',\n    // winner: {\n    //   name: 'Flaviane',\n    //   avatarId: 15,\n    //   score: 35,\n    // },\n  };\n\n  console.log('==========');\n  console.log({ info });\n  console.table(players);\n  console.log({ state });\n  console.log('==========');\n\n  const guesser = players[state.guesser];\n  console.log(guesser);\n\n  // return <GameOver info={info} state={state} players={players} />;\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state.phase}\n      allowedPhase=\"WORD_SELECTION\"\n      className=\"\"\n      fullScreen\n      white\n    >\n      <div className=\"u-word-selection\">\n        {/* <Title white>Selecione a Palavra-Secreta</Title>\n\n        <Instruction white>\n          A palavra secreta com mais votos será escolhida para essa rodada. Você pode selecionar quantas\n          quiser!\n        </Instruction>\n        {LETTERS.split('').map((letter) => {\n          return (\n            <Card color={getColorFromLetter(letter)} header={letter}>\n              LETTER {letter}\n            </Card>\n          );\n        })}\n        <ul className=\"u-word-card\">\n          {state.words.map((word) => {\n            return (\n              <li className=\"u-word-card__word\">\n                <button className=\"u-word-card__button\">\n                  <span className=\"u-word-card__text\">{allWords[word]}</span>\n                  <span className=\"u-word-card__icon\">\n                    <CheckCircleFilled />\n                  </span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        <Button type=\"primary\">Enviar votos</Button> */}\n      </div>\n    </PhaseContainer>\n  );\n}\n\nexport default TestingZone;\n","import React from 'react';\n// Hooks\nimport { useLoading } from '../../hooks';\n\nfunction LoadingBar() {\n  const [isLoading] = useLoading();\n\n  return isLoading ? <div className=\"loading-bar\"></div> : <></>;\n}\n\nexport default LoadingBar;\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\n\n// Design Resources\nimport { Layout, message } from 'antd';\n// Firebase\nimport { auth } from '../services/firebase';\n// State\nimport { useGlobalState } from '../hooks';\n// Pages\nimport Home from './Home';\nimport Admin from './Admin';\nimport Login from './Login';\nimport Game from './Game';\nimport TestingZone from './TestingZone';\nimport LoadingPage from './loaders/LoadingPage';\nimport LoadingBar from './loaders/LoadingBar';\n\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        authenticated === true ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        )\n      }\n    />\n  );\n}\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  const fromPath = rest?.location?.state?.from?.pathname ?? '/';\n  return (\n    <Route\n      {...rest}\n      render={(props) => (authenticated === false ? <Component {...props} /> : <Redirect to={fromPath} />)}\n    />\n  );\n}\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useGlobalState('isAuthenticated');\n  const [, setIsAdmin] = useGlobalState('isAdmin');\n\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoading(false);\n        setIsAuthenticated(true);\n        setIsAdmin(true);\n        message.info('Você foi logado de volta automaticamente.');\n      } else {\n        setIsLoading(false);\n        setIsAuthenticated(false);\n        setIsAdmin(false);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  return (\n    <Layout className=\"app\">\n      <LoadingBar />\n      <Router>\n        {isLoading ? (\n          <LoadingPage />\n        ) : (\n          <Switch>\n            <Route exact path=\"/\" component={Home}></Route>\n            <PrivateRoute path=\"/admin\" authenticated={isAuthenticated} component={Admin} />\n            <PublicRoute path=\"/login\" authenticated={isAuthenticated} component={Login} />\n            <PrivateRoute path=\"/testing-zone\" authenticated={isAuthenticated} component={TestingZone} />\n            <Route path=\"*\" component={Game} />\n          </Switch>\n        )}\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport './styles/index.css';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}