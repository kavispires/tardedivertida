{"version":3,"file":"static/js/polemica-da-vez.9e5eb882.chunk.js","mappings":"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","sources":["components/points/StarPoints.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/polemica-da-vez/StepTopicSelection.tsx","games/polemica-da-vez/PhaseTopicSelection.tsx","games/polemica-da-vez/utils/api-requests.ts","games/polemica-da-vez/utils/mock.ts","games/polemica-da-vez/components/Topic.tsx","games/polemica-da-vez/StepLiking.tsx","games/polemica-da-vez/PhaseReact.tsx","games/polemica-da-vez/components/CommentText.tsx","games/polemica-da-vez/components/TweetComment.tsx","games/polemica-da-vez/StepResolution.tsx","games/polemica-da-vez/PhaseResolution.tsx","games/polemica-da-vez/PhaseGameOver.tsx","games/polemica-da-vez/SessionPolemicaDaVez.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Ant Design Resources\nimport { StarFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype StarPointsProps = {\n  keyPrefix: string;\n  quantity?: number;\n  className?: string;\n  hideText?: boolean;\n};\n\nexport const StarPoints = ({ keyPrefix, quantity, className, hideText }: StarPointsProps) => {\n  if (!quantity) {\n    return <span />;\n  }\n\n  const isNegative = quantity < 0;\n  const num = Math.abs(quantity);\n\n  const StarsArray = Array.from({ length: num }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n\n  return (\n    <span className={clsx('star-points', isNegative && 'star-points--negative', className)}>\n      {isNegative ? '-' : '+'} <span className=\"star-points__stars\">{StarsArray}</span>\n      {!hideText && (\n        <>\n          <Translate pt=\"ponto\" en=\"point\" />\n          {num > 1 ? 's' : ''}\n        </>\n      )}\n    </span>\n  );\n};\n","type ViewProps = {\n  children: any;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","type ViewIfProps = {\n  children: any;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { useState } from 'react';\n//Design Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\n// Components\n\ntype StepTopicSelectionProps = {\n  currentTopics: Topic[];\n  currentCustomTopic: Topic;\n  onSubmitTopic: GenericFunction;\n};\n\nexport function StepTopicSelection({\n  currentTopics,\n  currentCustomTopic,\n  onSubmitTopic,\n}: StepTopicSelectionProps) {\n  const { translate } = useLanguage();\n\n  const [customTopic, setCustomTopic] = useState('');\n\n  const onSubmitCustomTopic = () => {\n    if (customTopic) {\n      onSubmitTopic({ topicId: currentCustomTopic.id, customTopic });\n    }\n  };\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione uma assunto\" en=\"Select one topic\" />\n      </Title>\n\n      <ul className=\"p-topics-card\">\n        {currentTopics.map((topic) => (\n          <li className=\"p-topics-card__item\" key={topic.id}>\n            <button onClick={() => onSubmitTopic({ topicId: topic.id })} className=\"p-topic p-topic--button\">\n              {topic.text}\n            </button>\n          </li>\n        ))}\n        <li className=\"p-topics-card__item p-topics-card__item--or\">\n          <Translate pt=\"ou\" en=\"or\" />\n        </li>\n        <li className=\"p-topics-card__item p-topics-card__item--custom\">\n          <div className=\"p-topic\">{currentCustomTopic.text}</div>\n          <Input\n            className=\"p-custom-topic__input\"\n            placeholder={translate('Escreva aqui', 'Write here')}\n            onChange={(e) => setCustomTopic(e.target.value)}\n            onPressEnter={onSubmitCustomTopic}\n          />\n          {Boolean(customTopic) && (\n            <Button type=\"primary\" onClick={onSubmitCustomTopic} className=\"p-custom-topic__button\">\n              <Translate pt=\"Enviar sugestão\" en=\"Send suggestion\" />\n            </Button>\n          )}\n        </li>\n      </ul>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useMock, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitTopicAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { mockTopicSelection } from './utils/mock';\n// Components\n\nimport { StepTopicSelection } from './StepTopicSelection';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Step, StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { ViewOr } from 'components/views';\nimport { TurnOrder, WaitingRoom } from 'components/players';\n\nfunction PhaseTopicSelection({ state, players, info, meta }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [activePlayer, isUserTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitTopic = useOnSubmitTopicAPIRequest(setStep);\n  const isFixedRounds = Boolean(meta?.options?.fixedRounds);\n\n  useMock(() => {\n    if (step === 1 && isUserTheActivePlayer) {\n      onSubmitTopic(mockTopicSelection(state.currentTopics));\n    }\n  }, [step]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.TOPIC_SELECTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={4} circleColor=\"blue\">\n          <Instruction contained>\n            <Translate\n              pt=\"Cada rodada um novo assunto, a sua opinião e a opinião dos outros.\"\n              en=\"Every round a new topic, your opinion and everybody else's.\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"trending\"\n          title={translate('Você sabe qual a polêmica da vez?', \"Do you know what's trending now?\")}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 3 ? 30 : undefined}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Todos vão curtir ou descurtir a polêmica da vez e então devem tentar adivinhar quantas\n                  curtidas o assunto vai ganhar. Se você adivinhar corretamente, você ganha 3 pontos.\n                  <br />\n                  Se você escolheu um número a menos ou a mais, você ganha 1 ponto.\n                  <br />\n                  {isFixedRounds ? (\n                    <>O jogo tem {state.round.total} rodadas.</>\n                  ) : (\n                    <>\n                      O primeiro jogador a receber 10 pontos ganha o jogo (ou no máximo {state.round.total}{' '}\n                      rodadas)\n                    </>\n                  )}\n                  <br />\n                  <Instruction contained>\n                    <AvatarName player={activePlayer} addressUser /> escolherá o assunto para essa rodada.\n                  </Instruction>\n                </>\n              }\n              en={\n                <>\n                  All players must like or dislike a topic then must vote how trendy it is (how many players\n                  liked the topic). If you guess correctly you get 3 points.\n                  <br />\n                  If you got 1 number off (more or less), you get 1 point.\n                  <br />\n                  {isFixedRounds ? (\n                    <>\n                      The game will have\n                      {state.round.total} rounds.\n                    </>\n                  ) : (\n                    <>\n                      The first players to get 10 points wins the game (or a maximum of {state.round.total}{' '}\n                      rounds)\n                    </>\n                  )}\n                  <br />\n                  <Instruction contained>\n                    <AvatarName player={activePlayer} addressUser /> will choose the topic for this round.\n                  </Instruction>\n                </>\n              }\n            />\n            <TurnOrder order={state.gameOrder} players={players} activePlayerId={state.activePlayerId} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheActivePlayer}>\n          <StepTopicSelection\n            currentTopics={state.currentTopics}\n            currentCustomTopic={state.currentCustomTopic}\n            onSubmitTopic={onSubmitTopic}\n          />\n\n          <Step fullWidth>\n            <WaitingRoom\n              title={translate('Aguarde...', 'Please wait...')}\n              instruction={\n                <>\n                  <AvatarName player={activePlayer} addressUser />{' '}\n                  <Translate\n                    pt=\"está escolhendo a polêmica da rodada.\"\n                    en=\"is choosing the topic for the round.\"\n                  />\n                  <TurnOrder\n                    order={state.gameOrder}\n                    players={players}\n                    activePlayerId={state.activePlayerId}\n                  />\n                </>\n              }\n              players={players}\n            />\n          </Step>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTopicSelection;\n","import { POLEMICA_DA_VEZ_API } from 'services/adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitTopicAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: POLEMICA_DA_VEZ_API.submitAction,\n    actionName: 'submit-topic',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Assunto enviada com sucesso!', 'Topic send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu assunto',\n      'Oops, the application failed to submit the topic'\n    ),\n  });\n\n  return (payload: SubmitTopicPayload) => {\n    request({\n      action: 'SUBMIT_TOPIC',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitReactionAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: POLEMICA_DA_VEZ_API.submitAction,\n    actionName: 'submit-reaction',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Reação enviada com sucesso!', 'Reaction send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua reação',\n      'Oops, the application failed to submit your reaction'\n    ),\n  });\n\n  return (payload: SubmitReactionPayload) => {\n    request({\n      action: 'SUBMIT_REACTION',\n      ...payload,\n    });\n  };\n}\n","import { getRandomItem } from 'utils/helpers';\n\nexport function mockTopicSelection(currentTopics: Topic[]) {\n  return {\n    topicId: getRandomItem(currentTopics).id,\n  };\n}\n\nexport function mockGuess(playerCount: number) {\n  return {\n    reaction: getRandomItem([true, false]),\n    likesGuess: getRandomItem(\n      Array(playerCount + 1)\n        .fill(0)\n        .map((e, i) => e + i)\n    ),\n  };\n}\n","// Ant Design Resources\nimport { Avatar } from 'antd';\nimport { RiseOutlined, TwitterOutlined } from '@ant-design/icons';\n// Components\nimport { Icons } from 'components/icons';\nimport clsx from 'clsx';\n\ntype TopicProps = {\n  topic: string;\n  likes?: number;\n  className?: string;\n};\n\nexport function Topic({ topic, likes, className = '' }: TopicProps) {\n  return (\n    <div className={clsx('p-trending-topic', className)}>\n      <TwitterOutlined /> {topic} <RiseOutlined />{' '}\n      {Boolean(likes) && (\n        <span className=\"p-trending-topic__likes\">\n          <Avatar\n            src={<Icons.SpeechBubbleThumbsUp />}\n            shape=\"square\"\n            size=\"large\"\n            className=\"p-trending-topic__icon-like\"\n          />{' '}\n          {likes}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport clsx from 'clsx';\n//Design Resources\nimport { Button, Divider } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks';\n// Components\n\nimport { Topic } from './components/Topic';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { AvatarIcon } from 'components/avatars';\nimport { ReadyPlayersBar } from 'components/players';\n\ntype StepLikingProps = {\n  currentTopic: Topic;\n  customTopic: string;\n  onSubmitReaction: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepLiking({ currentTopic, customTopic, onSubmitReaction, players }: StepLikingProps) {\n  const { isLoading } = useLoading();\n  const [like, setLike] = useState<boolean | null>(null);\n\n  const onSubmitReactions = (likes: number) => {\n    onSubmitReaction({ reaction: like, likesGuess: likes });\n  };\n\n  const countOptions = useMemo(\n    () =>\n      Array(Object.keys(players).length + 1)\n        .fill(0)\n        .map((e, i) => e + i),\n    [players]\n  );\n\n  return (\n    <Step fullWidth className=\"p-step\">\n      <Title>\n        <Translate pt=\"O que você acha da polêmica da vez?\" en=\"What do you think of this trending topic?\" />\n      </Title>\n\n      <div className=\"p-reaction-buttons\">\n        <Topic topic={customTopic ?? currentTopic?.text} className=\"p-reaction-buttons__topic\" />\n        <TransparentButton\n          className={clsx(\n            'p-reaction-button',\n            'p-reaction-button--like',\n            like === true && 'p-reaction-button--active'\n          )}\n          onClick={() => setLike(true)}\n        >\n          <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" />\n          <Translate pt=\"Curtir\" en=\"Like\" />\n        </TransparentButton>\n        <TransparentButton\n          className={clsx(\n            'p-reaction-button',\n            'p-reaction-button--dislike',\n            like === false && 'p-reaction-button--active'\n          )}\n          onClick={() => setLike(false)}\n        >\n          <AvatarIcon type=\"speech-bubble-thumbs-down\" shape=\"square\" className=\"p-like-icon\" />\n          <Translate pt=\"Não curto\" en=\"Dislike\" />\n        </TransparentButton>\n      </div>\n\n      {like !== null && (\n        <>\n          <Instruction contained>\n            <Translate\n              pt=\"Quantas curtidas esse assunto vai receber?\"\n              en=\"How many likes will this topic get?\"\n            />\n          </Instruction>\n\n          <ul className=\"p-votes\">\n            {countOptions.map((option) => {\n              const key = `quantity-${option}`;\n              return (\n                <li key={key}>\n                  <Button\n                    type=\"primary\"\n                    disabled={isLoading || like === null}\n                    onClick={() => onSubmitReactions(option)}\n                    size=\"large\"\n                    shape=\"circle\"\n                  >\n                    {option}\n                  </Button>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n      <Divider />\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useMock, useStep } from 'hooks';\nimport { useOnSubmitReactionAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { mockGuess } from './utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepLiking } from './StepLiking';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseReact({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const onSubmitReaction = useOnSubmitReactionAPIRequest(setStep);\n\n  useMock(() => {\n    onSubmitReaction(mockGuess(Object.keys(players).length));\n  }, []);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.REACT}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"feedback\"\n          title={translate('O que você acha?', 'What do you think?')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Um assunto polêmico está abalando as redes sociais!\n                  <br />\n                  Curta (ou não) e tente descobrir quantas curtidas ele vai receber.\n                </>\n              }\n              en={\n                <>\n                  A topic is trending in all social media!\n                  <br />\n                  Like (or not) and try to guess how many likes it will get!\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepLiking\n          currentTopic={state.currentTopic}\n          customTopic={state.customTopic}\n          onSubmitReaction={onSubmitReaction}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReact;\n","import clsx from 'clsx';\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\n// Components\n\ntype CommentTextProps = {\n  reaction: boolean;\n  likes: boolean;\n  playerId: PlayerId;\n  points: number;\n};\n\nexport function CommentText({ reaction, likes, playerId, points }: CommentTextProps) {\n  return (\n    <span>\n      {reaction ? (\n        <>\n          <Translate pt=\"Curto\" en=\"I like it\" />{' '}\n          <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" size={20} />{' '}\n          <Translate pt=\" e \" en=\" and \" />\n        </>\n      ) : (\n        <>\n          <Translate pt=\"Não curto\" en=\"I dislike it\" />{' '}\n          <AvatarIcon type=\"speech-bubble-thumbs-down\" shape=\"square\" className=\"p-like-icon\" size={20} />{' '}\n          <Translate pt=\", mas \" en=\" but \" />\n        </>\n      )}\n\n      <Translate pt={<>eu acho que </>} en={<>I think </>} />\n\n      <span\n        className={clsx(\n          points === 3 && 'p-tweet-comment__correct',\n          points === 1 && 'p-tweet-comment__almost',\n          points === 0 && 'p-tweet-comment__incorrect'\n        )}\n      >\n        <Translate pt={<>{likes} jogadores</>} en={<>{likes} players</>} />\n      </span>\n\n      <Translate pt={<> curtem.</>} en={<> do like it.</>} />\n      <br />\n      <span className=\"p-tweet-comment__points\">\n        <StarPoints keyPrefix={playerId} quantity={points} />\n      </span>\n    </span>\n  );\n}\n","import moment from 'moment';\n// Ant Design Resources\nimport { Comment } from 'antd';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { CommentText } from './CommentText';\n\ntype TweetCommentProps = {\n  player: GamePlayer;\n  totalLikes: number;\n};\n\nexport function TweetComment({ player, totalLikes }: TweetCommentProps) {\n  const isCorrect = player.likesGuess === totalLikes;\n  const isAlmost = [totalLikes - 1, totalLikes + 1].includes(player.likesGuess);\n  const points = isCorrect ? 3 : isAlmost ? 1 : 0;\n\n  return (\n    <Comment\n      author={player.name}\n      avatar={<Avatar id={player.avatarId} />}\n      content={\n        <CommentText\n          reaction={player.reaction}\n          likes={player.likesGuess}\n          points={points}\n          playerId={player.id}\n        />\n      }\n      datetime={moment(player.updatedAt).fromNow()}\n      className=\"p-tweet-comment\"\n    />\n  );\n}\n","// Ant Design Resources\nimport { CommentOutlined, LikeFilled, ShareAltOutlined } from '@ant-design/icons';\nimport { Space } from 'antd';\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { orderBy } from 'lodash';\n// Components\nimport { Topic } from './components/Topic';\nimport { TweetComment } from './components/TweetComment';\n\ntype StepResolutionProps = {\n  players: GamePlayers;\n  totalLikes: number;\n  customTopic: string;\n  currentTopic: Topic;\n  goToNextStep: GenericFunction;\n};\nexport function StepResolution({\n  players,\n  totalLikes,\n  customTopic,\n  currentTopic,\n  goToNextStep,\n}: StepResolutionProps) {\n  return (\n    <Step fullWidth className=\"p-step\">\n      <Title level={1}>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <div className=\"p-tweet-container\">\n        <div className=\"p-tweet\">\n          <div className=\"p-tweet__topic\">\n            <Topic topic={customTopic ?? currentTopic?.text} />\n          </div>\n          <div className=\"p-tweet__actions\">\n            <div className=\"p-tweet__action\" style={{ color: totalLikes > 0 ? 'DodgerBlue' : 'gray' }}>\n              <LikeFilled className=\"p-tweet__icon\" />\n              {totalLikes}\n            </div>\n            <div className=\"p-tweet__action p-tweet__action-active\">\n              <CommentOutlined className=\"p-tweet__icon\" /> <Translate pt=\"Comentários\" en=\"Comments\" />\n            </div>\n            <div className=\"p-tweet__action\">\n              <ShareAltOutlined className=\"p-tweet__icon\" /> <Translate pt=\"Compartilhar\" en=\"Share\" />\n            </div>\n          </div>\n        </div>\n\n        <ul className=\"p-tweet-comments\">\n          {orderBy(Object.values(players), 'name').map((player) => {\n            const key = `player-result-${player.id}`;\n\n            return (\n              <li className=\"p-player-reaction\" key={key}>\n                <TweetComment player={player} totalLikes={totalLikes} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <Space className=\"space-container\" align=\"center\">\n        <TimedButton duration={25} showTimer onExpire={goToNextStep} onClick={goToNextStep}>\n          <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n        </TimedButton>\n      </Space>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\n\nimport { StepResolution } from './StepResolution';\nimport { Button, Space } from 'antd';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Step, StepSwitcher } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { RankingBoard } from 'components/ranking';\nimport { AdminNextRoundButton } from 'components/admin';\n\nfunction PhaseReact({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.POLEMICA_DA_VEZ.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"review\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  E aí? Será que o assunto bombou?\n                  <br />\n                  Se você acertou a quantidade de curtidas, você ganha 3 pontos.\n                  <br />\n                  Se você quase acertou, você ganha 1 ponto.\n                </>\n              }\n              en={\n                <>\n                  So... did the topic trend?\n                  <br />\n                  If you guessed the correct number of likes, you get 3 points.\n                  <br />\n                  If you were 1 off, you get 1 point.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n\n        <StepResolution\n          players={players}\n          customTopic={state.customTopic}\n          currentTopic={state.currentTopic}\n          totalLikes={state.totalLikes}\n          goToNextStep={goToNextStep}\n        />\n\n        <Step fullWidth>\n          <Title>Ranking</Title>\n          <RankingBoard ranking={state.ranking} players={players} />\n          <Space className=\"space-container\" align=\"center\">\n            <Button onClick={goToPreviousStep} ghost>\n              <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n            </Button>\n          </Space>\n          <AdminNextRoundButton round={state.round} />\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReact;\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { FallOutlined, RiseOutlined } from '@ant-design/icons';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <GameOverWrapper announcementIcon=\"trophy\" info={info} state={state}>\n      <ul\n        className=\"p-all-topics\"\n        style={{ gridTemplateColumns: `repeat(${playerCount % 3 === 0 ? 3 : 5}, 1fr)` }}\n      >\n        {orderBy(state.allTopics, ['likes', 'text'], ['desc', 'asc']).map((topic: PastTopic) => {\n          const trended = topic.likes > playerCount / 2;\n\n          return (\n            <li className=\"p-all-topics__topic\" key={topic.id}>\n              <h3>\n                {trended ? <RiseOutlined /> : <FallOutlined />} {topic.text}\n              </h3>\n              <div className=\"p-all-topics__comment\">\n                <AvatarIcon type=\"speech-bubble-thumbs-up\" shape=\"square\" className=\"p-like-icon\" />{' '}\n                {topic.likes} <Translate pt=\"curtidas\" en=\"likes\" />\n              </div>\n              {}\n            </li>\n          );\n        })}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseTopicSelection from './PhaseTopicSelection';\nimport PhaseReact from './PhaseReact';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionPolemicaDaVez({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.POLEMICA_DA_VEZ.TOPIC_SELECTION:\n        return PhaseTopicSelection;\n      case PHASES.POLEMICA_DA_VEZ.REACT:\n        return PhaseReact;\n      case PHASES.POLEMICA_DA_VEZ.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.POLEMICA_DA_VEZ}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionPolemicaDaVez;\n"],"names":["StarPoints","keyPrefix","quantity","className","hideText","isNegative","num","Math","abs","StarsArray","Array","from","length","_","i","StarFilled","clsx","pt","en","View","children","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","StepTopicSelection","currentTopics","currentCustomTopic","onSubmitTopic","translate","useLanguage","useState","customTopic","setCustomTopic","onSubmitCustomTopic","topicId","id","fullWidth","map","topic","onClick","text","placeholder","onChange","e","target","value","onPressEnter","Boolean","type","state","players","info","meta","useStep","step","goToNextStep","setStep","useWhichPlayerIsThe","activePlayer","isUserTheActivePlayer","request","useAPICall","apiFunction","POLEMICA_DA_VEZ_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitTopicAPIRequest","isFixedRounds","options","fixedRounds","useMock","getRandomItem","phase","allowedPhase","PHASES","round","onPressButton","time","circleColor","contained","title","onClose","currentRound","current","duration","undefined","total","player","addressUser","order","gameOrder","activePlayerId","instruction","Topic","likes","TwitterOutlined","RiseOutlined","src","shape","size","StepLiking","currentTopic","onSubmitReaction","isLoading","useLoading","like","setLike","countOptions","useMemo","Object","keys","fill","option","key","disabled","reaction","likesGuess","useOnSubmitReactionAPIRequest","playerCount","CommentText","playerId","points","TweetComment","totalLikes","isCorrect","isAlmost","includes","author","name","avatar","avatarId","content","datetime","moment","updatedAt","fromNow","StepResolution","level","style","color","LikeFilled","CommentOutlined","ShareAltOutlined","orderBy","values","align","showTimer","onExpire","goToPreviousStep","ranking","ghost","announcementIcon","gridTemplateColumns","allTopics","trended","FallOutlined","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseTopicSelection","PhaseReact","PhaseResolution","PhaseGameOver","PageError"],"sourceRoot":""}