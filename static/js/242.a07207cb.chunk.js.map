{"version":3,"file":"static/js/242.a07207cb.chunk.js","mappings":"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","sources":["games/sonhos-pesadelos/api-requests.ts","games/sonhos-pesadelos/helpers.ts","games/sonhos-pesadelos/NightmareButton.tsx","games/sonhos-pesadelos/DreamCard.tsx","games/sonhos-pesadelos/DreamBoardWrite.tsx","games/sonhos-pesadelos/StepTellDream.tsx","games/sonhos-pesadelos/DreamButton.tsx","games/sonhos-pesadelos/DreamBoard.tsx","games/sonhos-pesadelos/PhaseTellDream.tsx","games/sonhos-pesadelos/Card.tsx","games/sonhos-pesadelos/AllClues.tsx","games/sonhos-pesadelos/DreamBoardVote.tsx","games/sonhos-pesadelos/StepMatchDreams.tsx","games/sonhos-pesadelos/PhaseMatch.tsx","games/sonhos-pesadelos/StepResults.tsx","games/sonhos-pesadelos/PhaseResolution.tsx","games/sonhos-pesadelos/PhaseGameOver.tsx","games/sonhos-pesadelos/PhaseLastChance.tsx","games/sonhos-pesadelos/SessionSonhosPesadelos.tsx"],"sourcesContent":["import { SONHOS_PESADELOS_API } from 'adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitDreamsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SONHOS_PESADELOS_API.submitAction,\n    actionName: 'submit-dreams',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('Sonhos submetidos com sucesso', 'Dreams submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus sonhos',\n      'Oops, the application found an error while trying to submit your dreams'\n    ),\n  });\n\n  return (payload: SubmitDreamsPayload) => {\n    request({\n      action: 'SUBMIT_DREAMS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SONHOS_PESADELOS_API.submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Votos submetidos com sucesso', 'Votes submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus votos',\n      'Oops, the application found an error while trying to submit your votes'\n    ),\n  });\n\n  return (payload: SubmitVotesPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","export const getClueId = (votes: PlainObject, cardEntryId: string) => {\n  return Object.keys(votes).find((key) => votes[key] === cardEntryId);\n};\n\nexport const shouldDisplayCard = (currentRound: number, entry: STableEntry, userId: PlayerId): boolean => {\n  return currentRound > 1 || entry.dreamer === userId || entry.nightmares.includes(userId);\n};\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components';\n\nexport function NightmareButton() {\n  return (\n    <Button disabled className=\"s-dream-board-entry-nightmare\">\n      <CaretUpOutlined />\n      <Translate pt=\"Pesadelo\" en=\"Nightmare\" />\n      <CaretUpOutlined />\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { ImageCard, ImageBlurButton, ImageCardBack } from 'components';\n\ntype DreamCardProps = {\n  cardId: string;\n  cardWidth: number;\n  isDream?: boolean;\n  isNightmare?: boolean;\n  flipped?: boolean;\n  hideBlurButton?: boolean;\n};\n\nexport function DreamCard({\n  cardId,\n  cardWidth,\n  isDream = false,\n  isNightmare = false,\n  flipped = false,\n  hideBlurButton = false,\n}: DreamCardProps) {\n  const baseClass = 's-dream-board-card';\n\n  if (flipped) {\n    return <ImageCardBack className={baseClass} cardWidth={cardWidth} />;\n  }\n\n  return (\n    <>\n      <ImageCard\n        imageId={cardId}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          isDream && `${baseClass}--dream`,\n          isNightmare && `${baseClass}--nightmare`\n        )}\n      />\n      {!hideBlurButton && <ImageBlurButton cardId={cardId} />}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Button, Input, Popover } from 'antd';\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Utils\nimport { shouldDisplayCard } from './helpers';\n// Components\nimport { Translate } from 'components';\nimport { NightmareButton } from './NightmareButton';\nimport { DreamCard } from './DreamCard';\n\ntype DreamButtonProps = {\n  cardId: string;\n  clue: string;\n  previousClues: string[];\n  onClueChange: GenericFunction;\n};\n\nfunction DreamButton({ cardId, clue, previousClues, onClueChange }: DreamButtonProps) {\n  const { translate } = useLanguage();\n\n  const title = `${translate('Sonho', 'Dream')}`;\n\n  return (\n    <Popover\n      trigger=\"click\"\n      title={title}\n      content={\n        <DreamCluePopover\n          cardId={cardId}\n          clue={clue}\n          previousClues={previousClues}\n          onClueChange={onClueChange}\n        />\n      }\n    >\n      <Button block className=\"s-dream-board-entry-dream\">\n        {clue ? (\n          clue\n        ) : (\n          <>\n            <CaretUpOutlined />\n            {title}\n            <CaretUpOutlined />\n          </>\n        )}\n      </Button>\n    </Popover>\n  );\n}\n\ntype DreamCluePopoverProps = {\n  cardId: string;\n  clue: string;\n  previousClues: string[];\n  onClueChange: GenericFunction;\n};\n\nfunction DreamCluePopover({ cardId, clue, previousClues, onClueChange }: DreamCluePopoverProps) {\n  return (\n    <div className=\"s-dream-clue-popover\">\n      <Input defaultValue={clue} onChange={onClueChange} data-card={cardId} />\n\n      {Boolean(previousClues.length) && (\n        <div className=\"s-dream-clue-popover__previous-clues\">\n          <Translate pt=\"Dicas anteriores\" en=\"Previous Clues\" />\n          <ol>\n            {previousClues.map((pClue, index) => (\n              <li className=\"s-dream-clue-popover__previous-clue\" key={`pClue-${cardId}-${index}`}>\n                {pClue}\n              </li>\n            ))}\n          </ol>\n        </div>\n      )}\n    </div>\n  );\n}\n\ntype DreamBoardWriteProps = {\n  table: STable;\n  user: GamePlayer;\n  localClues: PlainObject;\n  setLocalClues: GenericFunction;\n  currentRound: number;\n};\n\nexport function DreamBoardWrite({\n  table,\n  user,\n  localClues,\n  setLocalClues,\n  currentRound,\n}: DreamBoardWriteProps) {\n  const cardWidth = useCardWidth(table.length / 2, 40);\n\n  const onClueChange = ({ target }: any) => {\n    const { value, dataset } = target;\n\n    setLocalClues((s: any) => {\n      const newState = { ...(s ?? {}) };\n      newState[dataset.card] = value;\n\n      return newState;\n    });\n  };\n\n  return (\n    <ul className=\"s-dream-board\">\n      {table.map((entry) => {\n        const isDream = Boolean(user.dreams[entry.cardId]);\n        const isNightmare = user.nightmares.includes(entry.cardId);\n\n        return (\n          <li\n            className=\"s-dream-board-entry\"\n            key={`board-${entry.cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <DreamCard\n              cardId={entry.cardId}\n              cardWidth={cardWidth}\n              flipped={!shouldDisplayCard(currentRound, entry, user.id)}\n              isDream={isDream}\n              isNightmare={isNightmare}\n            />\n\n            {isNightmare && <NightmareButton />}\n\n            {isDream && (\n              <DreamButton\n                cardId={entry.cardId}\n                clue={localClues?.[entry.cardId] ?? ''}\n                previousClues={user.dreams[entry.cardId]}\n                onClueChange={onClueChange}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState, useEffect } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useLanguage, useLoading, useMock } from 'hooks';\n// Utils\nimport { shuffle } from 'utils/helpers';\n// Components\nimport { Card, ButtonContainer, Instruction, ReadyPlayersBar, Step, Title, Translate } from 'components';\nimport { DreamBoardWrite } from './DreamBoardWrite';\n\nconst mockedClues = [\n  'água',\n  'bola',\n  'calderão do huck',\n  'dedo',\n  'esmalte',\n  'fatídico',\n  'ganhar',\n  'hereditário',\n  'simpático',\n  'abismo',\n  'rola',\n  'a branca de neve',\n  'oops i did it again',\n  'pesquisa',\n  'saborosa',\n  'amargo',\n];\n\ntype StepTellDreamProps = {\n  currentRound: number;\n  dreamsCount: Number;\n  onSubmitDreams: GenericFunction;\n  players: GamePlayers;\n  table: STable;\n  theme: STheme;\n  user: GamePlayer;\n};\n\nexport function StepTellDream({\n  players,\n  theme,\n  user,\n  table,\n  onSubmitDreams,\n  dreamsCount,\n  currentRound,\n}: StepTellDreamProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const [localClues, setLocalClues] = useState<PlainObject>({});\n  const [hasClues, setHasClues] = useState(false);\n\n  // Verify if player has completed all his clues\n  useEffect(() => {\n    setHasClues(\n      Object.keys(localClues).length === dreamsCount &&\n        Object.values(localClues).every((e) => Boolean(e.trim()))\n    );\n  }, [localClues, dreamsCount]);\n\n  // DEV: mocks clues\n  useMock(() => {\n    const shuffledMockedClues = shuffle(mockedClues);\n    setLocalClues(\n      Object.keys(user.dreams).reduce((acc: PlainObject, cardId, index) => {\n        acc[cardId] = shuffledMockedClues[index];\n        return acc;\n      }, {})\n    );\n  }, []);\n\n  const onSubmitDreamsClick = () => {\n    onSubmitDreams({\n      dreams: localClues,\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>\n        <Card\n          header={translate('Tema', 'Theme')}\n          className=\"s-theme-card\"\n          randomColor\n          footer={theme.description}\n          footerClassName=\"s-theme-card__description\"\n        >\n          {theme.text}\n        </Card>\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Clique nos botões amarelos para escrever sua(s) dica(s). Quando terminar, aperte Enviar\"\n          en=\"Click the yellow buttons to write your clue(s).When you're done, press Submit\"\n        />\n      </Instruction>\n\n      <ButtonContainer>\n        <Button type=\"primary\" disabled={isLoading || !hasClues} onClick={onSubmitDreamsClick}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </ButtonContainer>\n\n      <DreamBoardWrite\n        user={user}\n        table={table}\n        localClues={localClues}\n        setLocalClues={setLocalClues}\n        currentRound={currentRound}\n      />\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components';\n\nexport function DreamButton() {\n  return (\n    <Button disabled className=\"s-dream-board-entry-dream\">\n      <CaretUpOutlined />\n      <Translate pt=\"Sonho\" en=\"Dream\" />\n      <CaretUpOutlined />\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { NightmareButton } from './NightmareButton';\nimport { DreamButton } from './DreamButton';\nimport { DreamCard } from './DreamCard';\n\ntype DreamBoardProps = {\n  table: any[];\n  user: GamePlayer;\n  className?: string;\n};\n\nexport function DreamBoard({ table, user, className }: DreamBoardProps) {\n  const cardWidth = useCardWidth(table.length / 2, 40);\n\n  return (\n    <ul className={clsx('s-dream-board', className)}>\n      {table.map((entry) => {\n        const isDream = Boolean(user.dreams[entry.cardId]);\n        const isNightmare = user.nightmares.includes(entry.cardId);\n\n        return (\n          <li\n            className=\"s-dream-board-entry\"\n            key={`board-${entry.cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <DreamCard\n              cardId={entry.cardId}\n              cardWidth={cardWidth}\n              isDream={isDream}\n              isNightmare={isNightmare}\n            />\n\n            {isNightmare && <NightmareButton />}\n\n            {isDream && <DreamButton />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitDreamsAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  ImageCardPreloadHand,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepTellDream } from './StepTellDream';\nimport { DreamBoard } from './DreamBoard';\n\nfunction PhaseTellDream({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, nextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitDreams = useOnSubmitDreamsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.TELL_DREAM}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady]}\n        players={players}\n        waitingRoomContent={<DreamBoard user={user} table={state.table} />}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} buttonText=\"\" onPressButton={nextStep} time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos paranormais tentando adivinhar os sonhos dos outros...\"\n              en=\"We're psychics trying to guess each others dreams...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"dream\"\n          title={translate('Conte-nos sobre seu sonho', 'Tell us about your dream...')}\n          onClose={nextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Escreva uma dica para cada um dos seus sonhos (cartas com bordas amarelas).\n                  <br />\n                  Preste atenção em seus pesadelos (cartas com bordas pretas), se alguém achar que alguma de\n                  suas dicas é relacionada a um pesadelo, você não pode ganhar nessa rodada.\n                  <br />\n                  Você tem {state.dreamsCount} sonho(s) e {state.nightmaresCount} pesadelo(s).\n                </>\n              }\n              en={\n                <>\n                  Write a clue for each of your dreams (yellow bordered cards.\n                  <br />\n                  Pay attention to your nightmares (black bordered cards). If a player thinks any of your\n                  clues is related to a nightmare, you can not win this round.\n                  <br />\n                  You have {state.dreamsCount} dream(s) e {state.nightmaresCount} nightmare(s).\n                </>\n              }\n            />\n          </Instruction>\n          <ImageCardPreloadHand hand={state.table.map((e: SClue) => e.cardId)} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTellDream\n          players={players}\n          theme={state.theme}\n          user={user}\n          table={state.table}\n          onSubmitDreams={onSubmitDreams}\n          dreamsCount={state.dreamsCount}\n          currentRound={state.round.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTellDream;\n","// Utils\nimport { getColorFromLetter } from 'utils/helpers';\nimport { Card } from 'components';\n// Components\n\ntype SonhosPesadelosCardProps = {\n  clue: string;\n  footer: string;\n  header: string;\n  previousClues: string[];\n};\n\nexport function SonhosPesadelosCard({\n  clue,\n  footer,\n  header = 'X',\n  previousClues = ['bola'],\n}: SonhosPesadelosCardProps) {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={footer}\n      className=\"s-clue-card\"\n      footerClassName=\"s-clue-card__footer\"\n    >\n      {clue}\n      <ul>\n        {previousClues.map((pClue) => (\n          <li className=\"s-clue-card__previous--clue\">{pClue}</li>\n        ))}\n      </ul>\n    </Card>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { SonhosPesadelosCard as Card } from './Card';\n\ntype AllCluesProps = {\n  clues: SClue[];\n  activeItem: any;\n  onActivateItem: GenericFunction;\n  votes: any;\n  players: GamePlayers;\n  currentRound: number;\n};\n\nexport function AllClues({ clues, activeItem, onActivateItem, votes, players, currentRound }: AllCluesProps) {\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {clues.map(({ cardId, clue, playerId }, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['clue', cardId, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.keys(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              clue={clue[0]}\n              header={letter}\n              footer={players[playerId].name}\n              previousClues={currentRound > 3 ? [clue.slice(1)] : []}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Utils\nimport { getEntryId } from 'utils/helpers';\nimport { getClueId } from './helpers';\n// Components\nimport { Translate, Ribbon } from 'components';\nimport { DreamButton } from './DreamButton';\nimport { DreamCard } from './DreamCard';\n\ntype SelectButtonProps = {\n  onActivateItem: GenericFunction;\n  cardEntryId: string;\n};\n\nfunction SelectButton({ onActivateItem, cardEntryId }: SelectButtonProps) {\n  return (\n    <Button ghost block size=\"small\" onClick={() => onActivateItem(cardEntryId)}>\n      <CaretUpOutlined />\n      <Translate pt=\"Selecionar\" en=\"Select\" />\n      <CaretUpOutlined />\n    </Button>\n  );\n}\n\ntype DreamBoardVoteProps = {\n  table: STable;\n  user: GamePlayer;\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function DreamBoardVote({ table, user, activeItem, onActivateItem, votes }: DreamBoardVoteProps) {\n  const cardWidth = useCardWidth(table.length / 2, 40);\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"s-dream-board\">\n      {table.map((entry) => {\n        const isDream = Boolean(user.dreams[entry.cardId]);\n        const isNightmare = user.nightmares.includes(entry.cardId);\n        const cardEntryId = getEntryId(['card', entry.cardId]);\n        const isActive = activeItem === cardEntryId;\n        const ribbonId = getClueId(votes, cardEntryId);\n\n        return (\n          <li\n            className={clsx(\n              's-dream-board-entry',\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`\n            )}\n            key={`board-${entry.cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            {ribbonId && <Ribbon label={ribbonId.charAt(ribbonId.length - 1)} />}\n            <DreamCard\n              cardId={entry.cardId}\n              cardWidth={cardWidth}\n              isDream={isDream}\n              isNightmare={isNightmare}\n            />\n\n            {isDream ? (\n              <DreamButton />\n            ) : (\n              <SelectButton cardEntryId={cardEntryId} onActivateItem={onActivateItem} />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useLanguage, useLoading, useMock, useVotingMatch } from 'hooks';\n// Utils\nimport { getEntryId, shuffle } from 'utils/helpers';\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { ButtonContainer, Instruction, ReadyPlayersBar, Step, Title, Translate } from 'components';\nimport { AllClues } from './AllClues';\nimport { DreamBoardVote } from './DreamBoardVote';\n\ntype StepMatchDreamsProps = {\n  clues: SClue[];\n  currentRound: number;\n  dreamsCount: Number;\n  onSubmitVotes: GenericFunction;\n  players: GamePlayers;\n  table: STable;\n  user: GamePlayer;\n};\n\nexport function StepMatchDreams({\n  players,\n  user,\n  table,\n  onSubmitVotes,\n  clues,\n  currentRound,\n}: StepMatchDreamsProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const { votes, setVotes, activeItem, activateItem, isVotingComplete } = useVotingMatch(\n    'clue',\n    false,\n    clues.length\n  );\n\n  // Auto-select own clues\n  useEffect(() => {\n    const userClues = clues.reduce((acc: PlainObject, entry, index) => {\n      if (entry.playerId === user.id) {\n        const clueEntryId = getEntryId(['clue', entry.cardId, LETTERS[index]]);\n        const cardEntryId = getEntryId(['card', entry.cardId]);\n        acc[clueEntryId] = cardEntryId;\n      }\n      return acc;\n    }, {});\n    if (userClues) {\n      setVotes((s: PlainObject) => ({ ...s, ...userClues }));\n    }\n  }, []); //eslint-disable-line\n\n  // DEV: Random vote\n  useMock(() => {\n    const devCards = table\n      .filter((entry) => entry.dreamer && entry.dreamer !== user.id)\n      .map((entry) => getEntryId(['card', entry.cardId]));\n    const devClues = shuffle(\n      clues\n        .map((entry, index) => getEntryId(['clue', entry.cardId, LETTERS[index]]))\n        .filter((entryId) => !Object.keys(votes).includes(entryId))\n    );\n\n    const devRes = devClues.reduce((acc, clueEntryId, index) => {\n      acc[clueEntryId] = devCards[index];\n      return acc;\n    }, {});\n\n    if (devRes) {\n      setVotes((s: PlainObject) => ({ ...s, ...devRes }));\n    }\n  }, []);\n\n  const onSubmitDreams = () => {\n    onSubmitVotes({\n      votes,\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>{translate('Adivinhação', 'Match the Pairs')}</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Clique em uma carta e então uma botão da imagem correspondente ou vice e versa. Aperte enviar quando terminar te combinar todas as dicas.\"\n          en=\"Click on a clue then on an image button or vice versa. When you're done matching all clues, press Submit.\"\n        />\n      </Instruction>\n\n      <ButtonContainer>\n        <Button type=\"primary\" disabled={isLoading || !isVotingComplete} onClick={onSubmitDreams}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </ButtonContainer>\n\n      <AllClues\n        clues={clues}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        players={players}\n        currentRound={currentRound}\n      />\n\n      <DreamBoardVote\n        user={user}\n        table={table}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVotesAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { DreamBoard } from './DreamBoard';\nimport { StepMatchDreams } from './StepMatchDreams';\n\nfunction PhaseMatch({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, nextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.MATCH}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady]}\n        players={players}\n        waitingRoomContent={<DreamBoard user={user} table={state.table} />}\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"evaluate\"\n          title={translate('Selecione os pares', 'Match the dreams')}\n          onClose={nextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Selecione os pares de dica e carta.\n                  <br />\n                  Se você acertas todas, você ganha o jogo.\n                  <br />\n                  Dica: Seus pesadelos podem ser o sonho de outra pessoa.\n                </>\n              }\n              en={\n                <>\n                  Match the pairs of cards and clues.\n                  <br />\n                  If you match all of them correctly, you win the game.\n                  <br />\n                  Hint: Your nightmares may be the dream of another player.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepMatchDreams\n          players={players}\n          user={user}\n          table={state.table}\n          onSubmitVotes={onSubmitVotes}\n          dreamsCount={state.dreamsCount}\n          clues={state.clues}\n          currentRound={state?.round?.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseMatch;\n","// Ant Design Resources\nimport { Alert } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { LETTERS, SEPARATOR } from 'utils/constants';\n// Components\nimport { AdminNextRoundButton, Instruction, Step, Title, Translate } from 'components';\nimport { DreamBoard } from './DreamBoard';\nimport { DreamCard } from './DreamCard';\n\ntype StepResultsProps = {\n  results: SResults;\n  user: GamePlayer;\n  clues: SClue[];\n  table: STable;\n  round: GameRound;\n};\nexport function StepResults({ results, user, clues, table, round }: StepResultsProps) {\n  const { translate } = useLanguage();\n  const playerResults = results[user.id];\n\n  const currentVotes = Object.entries<PlainObject>(user?.votes ?? {}).reduce(\n    (acc: PlainObject[], [clueEntryId, cardEntryId]) => {\n      const cardId = cardEntryId.split(SEPARATOR)[1];\n      if (Boolean(user.dreams[cardId])) return acc;\n\n      const letter = clueEntryId.split(SEPARATOR)[2];\n      acc.push({\n        cardId,\n        clue: clues[LETTERS.indexOf(letter)].clue,\n      });\n\n      return acc;\n    },\n    []\n  );\n\n  return (\n    <Step fullWidth className=\"s-results-step\">\n      <Title>{translate('Resultado', 'Results')}</Title>\n      <Instruction contained>\n        <div className=\"s-result-correct\">{playerResults.correct}</div>\n        <div>\n          <Translate pt=\"pares corretos\" en=\"correct pairs\" />\n        </div>\n        <ul className=\"s-results-current-votes\">\n          {currentVotes.map((entry) => {\n            return (\n              <li key={`current-votes-${entry.cardId}`} className=\"s-results-current-vote\">\n                <DreamCard cardId={entry.cardId} cardWidth={80} hideBlurButton />\n                <ul className=\"s-results-clues\">\n                  {entry.clue.map((clueText: string, index: number) => {\n                    return (\n                      <>\n                        {index === 1 && (\n                          <li key={`label-${index}`} className=\"s-results-clues-label\">\n                            <Translate pt=\"Dicas no mesmo grupo:\" en=\"Clues on the same group:\" />\n                          </li>\n                        )}\n                        <li key={clueText} className=\"s-results-clues-item\">\n                          {clueText}\n                        </li>\n                      </>\n                    );\n                  })}\n                </ul>\n              </li>\n            );\n          })}\n        </ul>\n        {Boolean(playerResults.nightmareHits.length) && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message={translate(\n              `Seus pesadelos foram selecionados ${playerResults.nightmareHits.length} veze(s) por um ou mais jogadores achando que eles eram seus sonhos. Você não pode ganhar nessa rodada quando isso acontece.`,\n              `You dreams were selected ${playerResults.nightmareHits.length} time(s) by one or more players thinking they match one of your clues. You can't win this round when this happens.`\n            )}\n          />\n        )}\n      </Instruction>\n\n      <DreamBoard table={table} user={user} className=\"s-dream-board-results\" />\n\n      <AdminNextRoundButton round={round} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { DreamBoard } from './DreamBoard';\nimport { StepResults } from './StepResults';\n\nfunction PhaseResolution({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, nextStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.RESOLUTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady]}\n        players={players}\n        waitingRoomContent={<DreamBoard user={user} table={state.table} />}\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"countdown\"\n          title={translate('Resultado', 'Results')}\n          onClose={nextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  E aí, como você se saiu?\n                  <br />\n                  Você ganha o jogo se tiver acertado todos os pares...\n                  <br />E se ninguém achou que alguma de seus pesadelos eram relacionados com sua dica.\n                </>\n              }\n              en={\n                <>\n                  So how did you do?\n                  <br />\n                  You win the game if you have found the most pairs...\n                  <br />\n                  And nobody thought one of your nightmares were related to one of your clues.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          user={user}\n          results={state.results}\n          clues={state.clues}\n          table={state.table}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Components\nimport { GameOverWrapper } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVotesAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { DreamBoard } from './DreamBoard';\nimport { StepMatchDreams } from './StepMatchDreams';\n\nfunction PhaseLastChance({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const { step, nextStep, setStep } = useStep(0);\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.LAST_CHANCE}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady]}\n        players={players}\n        waitingRoomContent={<DreamBoard user={user} table={state.table} />}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} buttonText=\"\" onPressButton={nextStep} time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"E não era pra ter somente 5 rodadas?\"\n              en=\"Weren't we supposed to have only 5 rounds?\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"knowledge\"\n          title={translate('Última Chance!', 'Last Chance')}\n          onClose={() => setStep(2)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Já que ninguém ganhou até agora, você tem uma última chance de marcar os pares corretos.\n                  <br />\n                  Dessa vez, quem acertar o maior número de pares ganha.\n                </>\n              }\n              en={\n                <>\n                  Since nobody won so far, you have a last chance to match the pairs correctly.\n                  <br />\n                  This time, whoever gets the most matches win.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepMatchDreams\n          players={players}\n          user={user}\n          table={state.table}\n          onSubmitVotes={onSubmitVotes}\n          dreamsCount={state.dreamsCount}\n          clues={state.clues}\n          currentRound={state?.round?.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseLastChance;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseTellDream from './PhaseTellDream';\nimport PhaseMatch from './PhaseMatch';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\nimport PhaseLastChance from './PhaseLastChance';\n\nfunction SessionSonhosPesadelos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.SONHOS_PESADELOS.TELL_DREAM:\n        return PhaseTellDream;\n      case PHASES.SONHOS_PESADELOS.MATCH:\n        return PhaseMatch;\n      case PHASES.SONHOS_PESADELOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.SONHOS_PESADELOS.LAST_CHANCE:\n        return PhaseLastChance;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.SONHOS_PESADELOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionSonhosPesadelos;\n"],"names":["useOnSubmitVotesAPIRequest","setStep","translate","useLanguage","request","useAPICall","apiFunction","SONHOS_PESADELOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","shouldDisplayCard","currentRound","entry","userId","dreamer","nightmares","includes","NightmareButton","disabled","className","CaretUpOutlined","pt","en","DreamCard","cardId","cardWidth","isDream","isNightmare","flipped","hideBlurButton","baseClass","imageId","clsx","DreamButton","clue","previousClues","onClueChange","title","trigger","content","DreamCluePopover","block","defaultValue","onChange","Boolean","length","map","pClue","index","DreamBoardWrite","table","user","localClues","setLocalClues","useCardWidth","target","value","dataset","s","newState","card","dreams","style","maxWidth","id","mockedClues","StepTellDream","players","theme","onSubmitDreams","dreamsCount","isLoading","useLoading","useState","hasClues","setHasClues","useEffect","Object","keys","values","every","e","trim","useMock","shuffledMockedClues","shuffle","reduce","acc","fullWidth","header","randomColor","footer","description","footerClassName","text","contained","type","onClick","DreamBoard","state","info","useStep","step","nextStep","useUser","isUserReady","useIsUserReady","useOnSubmitDreamsAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomContent","round","buttonText","onPressButton","time","onClose","current","nightmaresCount","hand","SonhosPesadelosCard","color","getColorFromLetter","size","AllClues","clues","activeItem","onActivateItem","votes","liButtonBaseClass","playerId","letter","LETTERS","cardEntryId","getEntryId","isActive","isUsed","role","name","slice","SelectButton","ghost","DreamBoardVote","ribbonId","find","key","getClueId","label","charAt","StepMatchDreams","onSubmitVotes","useVotingMatch","setVotes","activateItem","isVotingComplete","userClues","clueEntryId","devCards","filter","devRes","entryId","StepResults","results","playerResults","currentVotes","entries","split","SEPARATOR","push","correct","clueText","nightmareHits","showIcon","message","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseTellDream","PhaseMatch","PhaseResolution","PhaseLastChance","PhaseGameOver","PageError"],"sourceRoot":""}