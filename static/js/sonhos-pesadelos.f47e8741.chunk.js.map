{"version":3,"file":"static/js/sonhos-pesadelos.f47e8741.chunk.js","mappings":"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","sources":["components/cards/Card.tsx","components/image-cards/ImageBlurButton.tsx","components/image-cards/ImageBlurButtonContainer.tsx","components/image-cards/ImageCard.tsx","components/image-cards/ImageCardBack.tsx","components/image-cards/ImageCardButton.tsx","components/image-cards/ImageCardHand.tsx","components/image-cards/ImageCardPreloadHand.tsx","components/image-cards/ImageCardSelectButton.tsx","games/sonhos-pesadelos/PhaseGameOver.tsx","games/sonhos-pesadelos/utils/api-requests.ts","games/sonhos-pesadelos/utils/mock.ts","games/sonhos-pesadelos/components/DreamCard.tsx","games/sonhos-pesadelos/components/DreamBoard.tsx","games/sonhos-pesadelos/StepTellDream.tsx","games/sonhos-pesadelos/components/RulesBlobs.tsx","games/sonhos-pesadelos/PhaseDreamTelling.tsx","games/sonhos-pesadelos/utils/helpers.ts","games/sonhos-pesadelos/components/AllDreamsClues.tsx","games/sonhos-pesadelos/components/DreamBoardVote.tsx","games/sonhos-pesadelos/StepMatchDreams.tsx","games/sonhos-pesadelos/PhaseMatching.tsx","games/sonhos-pesadelos/components/GalleryDreamDisplay.tsx","games/sonhos-pesadelos/components/GalleryGuesses.tsx","games/sonhos-pesadelos/StepResults.tsx","games/sonhos-pesadelos/StepRanking.tsx","games/sonhos-pesadelos/PhaseResolution.tsx","games/sonhos-pesadelos/SessionSonhosPesadelos.tsx","icons/CountdownIcon.tsx","icons/DreamIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/DownCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/DownCircleOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  hideHeader?: boolean;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n  hideHeader = false,\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      {!hideHeader && (\n        <span\n          className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n          style={color.startsWith('#') ? { backgroundColor: color } : {}}\n        >\n          {header}\n        </span>\n      )}\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n};\n\nexport function ImageBlurButton({ cardId, ghost = true }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost={ghost} onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Focus\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer.scss';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The position of the button (default: bottom)\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * Determines if the button is ghost or not (default: true)\n   */\n  ghost?: boolean;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  position = 'bottom',\n  ghost = true,\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {position === 'top' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n      {children}\n      {position === 'bottom' && <ImageBlurButton cardId={cardId} ghost={ghost} />}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Sass\nimport './ImageCard.scss';\n\nexport type ImageCardProps = {\n  /**\n   * The id of the image\n   */\n  imageId: string;\n  /**\n   * The width of the card (Default: 200px)\n   */\n  cardWidth?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Enables or disables the preview (default: true)\n   */\n  preview?: ImageProps['preview'];\n  /**\n   * Replacement image when the preview is open\n   */\n  previewImageId?: string;\n  /**\n   * The file extension for the image (default: jpg)\n   */\n  fileExtension?: 'jpg' | 'png' | 'gif';\n  /**\n   * Forces height to be the same as the width\n   */\n  square?: boolean;\n};\n\n/**\n * Renders an Image Card on tdi\n */\nexport const ImageCard = ({\n  imageId,\n  cardWidth = 200,\n  className = '',\n  preview = true,\n  previewImageId = '',\n  fileExtension = 'jpg',\n  square = false,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl('tdi');\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(imageId);\n\n  const previewConfig = typeof preview === 'boolean' ? {} : preview;\n\n  return (\n    <div\n      className={clsx(\n        baseClass,\n        isBlurred && `${baseClass}--blur`,\n        square && `${baseClass}--square`,\n        className\n      )}\n      style={{ height: square ? `${cardWidth}px` : undefined }}\n    >\n      <Image\n        width={cardWidth}\n        src={`${baseUrl}/${imageURL}.${fileExtension}`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          isBlurred || !preview\n            ? false\n            : {\n                ...previewConfig,\n                maskClassName: clsx(`${baseClass}__preview-mask`, previewConfig?.maskClassName),\n                src: Boolean(previewImageId)\n                  ? `${baseUrl}/${previewImageId.replace(/-/g, '/')}.${fileExtension}`\n                  : previewConfig?.src,\n              }\n        }\n      />\n    </div>\n  );\n};\n","import { ImageCard, ImageCardProps } from './ImageCard';\n\ntype ImageCardBackProps = Omit<ImageCardProps, 'imageId'> & { imageId?: ImageCardId };\n\nexport const ImageCardBack = ({ imageId = 'back-default', ...rest }: ImageCardBackProps) => {\n  return <ImageCard imageId={imageId} {...rest} />;\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { DownCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\n//  Components\nimport { Translate } from 'components/language';\nimport { DebugOnly } from 'components/debug';\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './ImageCardButton.scss';\n\ntype ImageCardButtonProps = {\n  /**\n   * The id of the image\n   */\n  imageId: string;\n  /**\n   * The content, usually a ImageCard component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name for the container\n   */\n  className?: string;\n  /**\n   * The position of the button (default: top)\n   */\n  buttonPosition?: 'top' | 'bottom';\n  /**\n   * The button is over the image (default: false)\n   */\n  over?: boolean;\n  /**\n   * Button icon replacement\n   */\n  icon?: ReactNode;\n  /**\n   * The function to be called when the button is clicked\n   */\n  onClick?: (...args: any) => void;\n  /**\n   * Disables the button (default: false)\n   */\n  disabled?: boolean;\n  /**\n   * The text for the button\n   */\n  buttonText?: ReactNode;\n  /**\n   * The props for the button\n   */\n  buttonProps?: Omit<ButtonProps, 'onClick' | 'disabled'>;\n};\n\nexport function ImageCardButton({\n  imageId,\n  children,\n  className = '',\n  buttonPosition = 'top',\n  over = false,\n  icon,\n  onClick,\n  disabled = false,\n  buttonText,\n  buttonProps = {},\n}: ImageCardButtonProps) {\n  const isTop = buttonPosition === 'top';\n\n  const iconComponent = icon ?? (isTop ? <DownCircleOutlined /> : <UpCircleOutlined />);\n\n  const { className: buttonClassName, ...restButtonProps } = buttonProps;\n\n  const button = onClick ? (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={over}\n      className={clsx(\n        'image-card-button__button',\n        over && 'image-card-button__button--over',\n        over && `image-card-button__button--over-${buttonPosition}`,\n        buttonClassName\n      )}\n      onClick={() => onClick(imageId)}\n      disabled={disabled}\n      {...restButtonProps}\n    >\n      {iconComponent}\n      {buttonText ?? <Translate pt=\"Selecionar\" en=\"Select\" />}\n      {iconComponent}\n    </Button>\n  ) : (\n    <></>\n  );\n\n  return (\n    <div className={clsx('image-card-button', className)}>\n      <ImageBlurButtonContainer cardId={imageId} position={buttonPosition === 'bottom' ? 'top' : 'bottom'}>\n        <DebugOnly>{imageId}</DebugOnly>\n        <div className=\"image-card-button__container\">\n          {isTop && button}\n          {children}\n          {!isTop && button}\n        </div>\n      </ImageBlurButtonContainer>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Image, ImageProps } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard, ImageCardButton } from '.';\n// Sass\nimport './ImageCardHand.scss';\n\ntype ImageCardHandProps = {\n  /**\n   * The list of card ids\n   */\n  hand: ImageCardId[];\n  /**\n   * Function to trigger when clicking on the select button\n   */\n  onSelectCard?: GenericFunction;\n  /**\n   * Select button custom label\n   */\n  selectButtonText?: ReactNode;\n  /**\n   * Select button custom icon\n   */\n  selectButtonIcon?: ReactNode;\n  /**\n   * Select button custom class\n   */\n  selectButtonClass?: string;\n  /**\n   * Disable select button\n   */\n  disabledSelectButton?: boolean;\n  /**\n   * Optional custom class name for the hand container\n   */\n  className?: string;\n  /**\n   * The size of the card\n   */\n  cardSize?: number;\n  /**\n   * If no card size is provided, the ratio is used instead to determine card size (default 8)\n   */\n  sizeRatio?: number;\n  /**\n   * Minimum width of a card (default 80)\n   */\n  minCardSize?: number;\n  /**\n   * Cache showing which cards have been selected and should be highlighted\n   */\n  selectedCards?: BooleanDictionary;\n  /**\n   * Custom card class\n   */\n  cardClassName?: string;\n  /**\n   * Enable preview (default: true)\n   */\n  preview?: boolean;\n  /**\n   *\n   */\n  imageGroupPreview?: ImageProps['preview'];\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonText,\n  selectButtonIcon,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n  selectedCards = {},\n  cardClassName = '',\n  preview = true,\n  imageGroupPreview,\n}: ImageCardHandProps) {\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(Math.max(sizeRatio, 6), { minWidth: minCardSize });\n\n  return (\n    <Image.PreviewGroup preview={imageGroupPreview}>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId, index) => {\n          return (\n            <div\n              key={`hand-${cardId}`}\n              className={clsx(\n                'image-card-hand__card-container',\n                getAnimationClass('slideInUp', {\n                  delay: index,\n                })\n              )}\n            >\n              <ImageCardButton\n                onClick={onSelectCard}\n                imageId={cardId}\n                buttonProps={{ className: selectButtonClass }}\n                icon={selectButtonIcon}\n                buttonText={selectButtonText}\n                disabled={disabledSelectButton}\n              >\n                <ImageCard\n                  imageId={cardId}\n                  cardWidth={cardSize || cardWidth}\n                  className={clsx(selectedCards[cardId] && 'image-card-hand__selected', cardClassName)}\n                  preview={preview}\n                />\n              </ImageCardButton>\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","// Components\nimport { ImageCard } from './ImageCard';\n// Sass\nimport './ImageCardPreloadHand.scss';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","// Icons\nimport { TrophyIcon } from 'icons/TrophyIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} players={players} announcementIcon={<TrophyIcon />} />;\n}\n\nexport default PhaseGameOver;\n","import { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'sonhosPesadelosSubmitAction');\n\nexport function useOnSubmitDreamAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-dream',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('Sonho submetido com sucesso', 'Dream submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu sonho',\n      'Oops, the application found an error while trying to submit your dream'\n    ),\n  });\n\n  return (payload: SubmitDreamPayload) => {\n    request({\n      action: 'SUBMIT_DREAM',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Votos submetidos com sucesso', 'Votes submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus votos',\n      'Oops, the application found an error while trying to submit your votes'\n    ),\n  });\n\n  return (payload: SubmitVotesPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import { shuffle } from 'utils/helpers';\n\nconst mockedDreamClues = [\n  'água',\n  'bola',\n  'calderão do huck',\n  'dedo',\n  'esmalte',\n  'fatídico',\n  'ganhar',\n  'hereditário',\n  'simpático',\n  'abismo',\n  'rola',\n  'a branca de neve',\n  'oops i did it again',\n  'pesquisa',\n  'saborosa',\n  'amargo',\n];\n\nexport const mockDream = (): string => shuffle(mockedDreamClues)[0];\n\nexport const mockVotes = (dreams: SDream[], table: ImageCard[], user: GamePlayer): StringDictionary => {\n  const playersIds = shuffle(dreams.map((dream) => dream.id).filter((playerId) => playerId !== user.id));\n  const shuffledTable = shuffle(table);\n\n  return playersIds.reduce((acc: StringDictionary, playerId, index) => {\n    acc[playerId] = shuffledTable[index];\n    return acc;\n  }, {});\n};\n","import clsx from 'clsx';\nimport { ImageBlurButton, ImageCard } from 'components/image-cards';\n// Components\n\ntype DreamCardProps = {\n  cardId: string;\n  cardWidth: number;\n  isDream?: boolean;\n  isNightmare?: boolean;\n  flipped?: boolean;\n  hideBlurButton?: boolean;\n};\n\nexport function DreamCard({\n  cardId,\n  cardWidth,\n  isDream = false,\n  isNightmare = false,\n  hideBlurButton = false,\n}: DreamCardProps) {\n  const baseClass = 's-dream-board-card';\n\n  return (\n    <>\n      <ImageCard\n        imageId={cardId}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          isDream && `${baseClass}--dream`,\n          isNightmare && `${baseClass}--nightmare`\n        )}\n      />\n      {!hideBlurButton && <ImageBlurButton cardId={cardId} />}\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { Translate } from 'components/language';\nimport { DreamCard } from './DreamCard';\n\ntype DreamBoardProps = {\n  table: ImageCard[];\n  user: GamePlayer;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function DreamBoard({ table, user, className = '' }: DreamBoardProps) {\n  const cardWidth = useCardWidth(table.length + 1, { gap: 20 });\n\n  return (\n    <ul className={clsx('s-dream-board', className)}>\n      {table.map((cardId) => {\n        const isDream = user.dreamId === cardId;\n        const isNightmare = user.nightmareId === cardId;\n\n        return (\n          <li\n            className=\"s-dream-board__entry\"\n            key={`board-${cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <DreamCard cardId={cardId} cardWidth={cardWidth} isDream={isDream} isNightmare={isNightmare} />\n            {isDream && (\n              <div className=\"s-dream-board__dream-label\" style={{ maxWidth: `${cardWidth}px` }}>\n                <Translate pt=\"Sonho\" en=\"Dream\" />\n              </div>\n            )}\n            {isNightmare && (\n              <div className=\"s-dream-board__nightmare-label\" style={{ maxWidth: `${cardWidth}px` }}>\n                <Translate pt=\"Pesadelo\" en=\"Nightmare\" />\n              </div>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockDream } from './utils/mock';\n// Components\nimport { DreamBoard } from './components/DreamBoard';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\n\ntype StepTellDreamProps = {\n  players: GamePlayers;\n  table: ImageCard[];\n  user: GamePlayer;\n  onSubmitDream: GenericFunction;\n};\n\nexport function StepTellDream({ players, table, user, onSubmitDream }: StepTellDreamProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const [dream, setDream] = useState('');\n\n  // DEV: mocks clues\n  useMock(() => {\n    onSubmitDream({ dream: mockDream() });\n  }, []);\n\n  const onSubmitDreamsClick = () => {\n    onSubmitDream({\n      dream,\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>\n        <Card\n          header={translate('Tema do Sonho', 'Dream Theme')}\n          className=\"s-theme-card\"\n          randomColor\n          footer={Array(user.theme.level).fill('•').join('')}\n          footerClassName=\"s-theme-card__description\"\n        >\n          {user.theme.text}\n        </Card>\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Dentro do tema acima, escreva sua dica no campo abaixo. Lembre-se que seu sonho é a carta de borda amarela e seu pesadelo é a carta de borda roxa.\"\n          en=\"Write a clue in the field below within the given theme. Remember that your dream is the card with the yellow border and your nightmare is the card with the purple border.\"\n        />\n      </Instruction>\n\n      <DreamBoard table={table} user={user} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Input\n          size=\"large\"\n          onPressEnter={onSubmitDreamsClick}\n          onChange={(e) => setDream(e.target.value)}\n          placeholder={translate('Escreva aqui', 'Write here')}\n        />\n      </Space>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" disabled={isLoading || !Boolean(dream)} onClick={onSubmitDreamsClick}>\n          <Translate pt=\"Enviar Sonho\" en=\"Submit Dream\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","import { Translate } from 'components/language';\n\nexport const DreamTellingRules = () => (\n  <Translate\n    pt={\n      <>\n        Escreva uma dica dentro do tema dado para o seu sonho (carta com borda amarela).\n        <br />\n        Preste atenção em seu pesadelo (carta com borda roxa), se alguém achar que sua dica é relacionada a\n        seu pesadelo, você perde pontos.\n      </>\n    }\n    en={\n      <>\n        Write a clue for your dream (yellow bordered card).\n        <br />\n        Pay attention to your nightmare (purple bordered card) because if any player thinks that your clue is\n        related to that card, you lose points.\n      </>\n    }\n  />\n);\n","// Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDreamAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { DreamIcon } from 'icons/DreamIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { ImageCardPreloadHand } from 'components/image-cards';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepTellDream } from './StepTellDream';\nimport { DreamTellingRules } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseDreamTelling({ state, players, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitDream = useOnSubmitDreamAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.DREAM_TELLING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state.round}\n          buttonText=\"\"\n          onPressButton={goToNextStep}\n          time={5}\n          circleColor={info?.appearance?.color}\n        >\n          <Instruction contained>\n            <Translate\n              pt=\"Sabe quando você sonha com uma coisa, mas não consegue explicar? Então...\"\n              en=\"You know when you dream about something but you can't quite explain? So...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<DreamIcon />}\n          title={<Translate pt=\"Conte-nos sobre seu sonho\" en=\"Tell us about your dream...\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <Instruction>\n            <DreamTellingRules />\n          </Instruction>\n          <ImageCardPreloadHand hand={state.table} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTellDream players={players} table={state.table} onSubmitDream={onSubmitDream} user={user} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamTelling;\n","import { LETTERS, SEPARATOR } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\n\nexport const getClueId = (votes: StringDictionary, cardEntryId: string): string[] => {\n  return Object.keys(votes).filter((key) => votes[key] === cardEntryId);\n};\n\nexport const cleanupVotes = (votes: StringDictionary, user: GamePlayer): StringDictionary => {\n  return Object.entries(votes).reduce((acc: StringDictionary, [dreamEntryKey, cardEntryKey]) => {\n    const playerId = dreamEntryKey.split(SEPARATOR)[1];\n    const cardId = cardEntryKey.split(SEPARATOR)[1];\n\n    if (playerId !== user.id) {\n      acc[playerId] = cardId;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const selectOwnVote = (dreams: SDream[], user: GamePlayer) =>\n  dreams.reduce((acc: StringDictionary, entry, index) => {\n    if (entry.id === user.id) {\n      const clueEntryId = getEntryId(['dream', entry.id, LETTERS[index]]);\n      const cardEntryId = getEntryId(['card', user.dreamId]);\n      acc[clueEntryId] = cardEntryId;\n    }\n    return acc;\n  }, {});\n\nexport const voteRandomly = (votes: StringDictionary, dreams: SDream[], table: ImageCard[]) => {\n  const randomVotes = dreams.reduce((acc: StringDictionary, entry, index) => {\n    const randomTable = shuffle(table);\n    const clueEntryId = getEntryId(['dream', entry.id, LETTERS[index]]);\n    const cardEntryId = getEntryId(['card', randomTable[0]]);\n    acc[clueEntryId] = cardEntryId;\n\n    return acc;\n  }, {});\n\n  return {\n    ...randomVotes,\n    ...votes,\n  };\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Constants\nimport { LETTERS } from 'utils/constants';\n// Utils\nimport { getColorFromLetter, getEntryId } from 'utils/helpers';\n// Components\nimport { Card } from 'components/cards';\nimport { TransparentButton } from 'components/buttons';\n\ntype AllDreamsCluesProps = {\n  dreams: SDream[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: StringDictionary;\n  players: GamePlayers;\n};\n\nexport function AllDreamsClues({ dreams, activeItem, onActivateItem, votes, players }: AllDreamsCluesProps) {\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <Space className=\"space-container\">\n      {dreams.map(({ id, dream }, index) => {\n        const player = players[id];\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['dream', id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.keys(votes).includes(cardEntryId);\n\n        return (\n          <TransparentButton\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              color={getColorFromLetter(letter)}\n              header={letter}\n              size=\"medium\"\n              footer={player.name}\n              className=\"s-clue-card\"\n              footerClassName=\"s-clue-card__footer\"\n            >\n              {dream}\n            </Card>\n          </TransparentButton>\n        );\n      })}\n    </Space>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { getEntryId } from 'utils/helpers';\nimport { getClueId } from '../utils/helpers';\n// Components\n\nimport { DreamCard } from './DreamCard';\nimport { RibbonGroup } from 'components/ribbons';\nimport { ImageBlurButton, ImageCardSelectButton } from 'components/image-cards';\n\ntype DreamBoardVoteProps = {\n  table: ImageCard[];\n  user: GamePlayer;\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function DreamBoardVote({ table, activeItem, onActivateItem, votes }: DreamBoardVoteProps) {\n  const cardWidth = useCardWidth(table.length + 1, { gap: 20, margin: 50 });\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"s-dream-board\">\n      {table.map((cardId) => {\n        const cardEntryId = getEntryId(['card', cardId]);\n        const isActive = activeItem === cardEntryId;\n        const ribbonIds = getClueId(votes, cardEntryId);\n\n        return (\n          <li\n            className={clsx(\n              's-dream-board__entry',\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`\n            )}\n            key={`board-${cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <div className=\"s-dream-board__card-container\">\n              <RibbonGroup labels={ribbonIds} />\n              <DreamCard cardId={cardId} cardWidth={cardWidth} hideBlurButton />\n              <ImageCardSelectButton cardId={cardEntryId} onClick={onActivateItem} />\n            </div>\n            <ImageBlurButton cardId={cardId} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import clsx from 'clsx';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { cleanupVotes, selectOwnVote, voteRandomly } from './utils/helpers';\nimport { mockVotes } from './utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { AllDreamsClues } from './components/AllDreamsClues';\nimport { DreamBoardVote } from './components/DreamBoardVote';\n\ntype StepMatchDreamsProps = {\n  onSubmitVotes: GenericFunction;\n  players: GamePlayers;\n  table: ImageCard[];\n  user: GamePlayer;\n  dreams: SDream[];\n};\n\nexport function StepMatchDreams({ players, user, table, onSubmitVotes, dreams }: StepMatchDreamsProps) {\n  const { isLoading } = useLoading();\n\n  const { votes, setVotes, activeItem, activateItem, isVotingComplete } = useVotingMatch(\n    'dream',\n    true,\n    dreams.length\n  );\n\n  // Auto-select own clue\n  useEffectOnce(() => {\n    const userClues = selectOwnVote(dreams, user);\n    if (userClues) {\n      setVotes((s: StringDictionary) => ({ ...s, ...userClues }));\n    }\n  });\n\n  // DEV: Random vote\n  useMock(() => {\n    onSubmitVotes({\n      votes: mockVotes(dreams, table, user),\n    });\n  }, []);\n\n  const onSubmitDreams = () => {\n    onSubmitVotes({\n      votes: cleanupVotes(votes, user),\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Clique em uma carta e então uma botão da imagem correspondente ou vice e versa. Aperte enviar quando terminar te combinar todas as dicas.\"\n          en=\"Click on a clue then on an image button or vice versa. When you're done matching all clues, press Submit.\"\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          type=\"default\"\n          disabled={isLoading}\n          onClick={() => setVotes(voteRandomly(votes, dreams, table))}\n          className={clsx(isVotingComplete && getAnimationClass('tada'))}\n          size=\"large\"\n        >\n          <Translate pt=\"Vote pra mim\" en=\"Vote for me\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          disabled={isLoading || !isVotingComplete}\n          onClick={onSubmitDreams}\n          className={clsx(isVotingComplete && getAnimationClass('tada'))}\n          size=\"large\"\n        >\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Space>\n\n      <DreamBoardVote\n        user={user}\n        table={table}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n\n      <AllDreamsClues\n        dreams={dreams}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        players={players}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitVotesAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepMatchDreams } from './StepMatchDreams';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseMatching({ state, players, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.MATCHING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<EvaluateIcon />}\n          title={<Translate pt=\"Combine os sonhos\" en=\"Match the dreams\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Selecione os pares de dica e carta.\n                  <br />\n                  Mais de um jogador pode ter o mesmo sonho.\n                </>\n              }\n              en={\n                <>\n                  Match the pairs of cards and clues.\n                  <br />\n                  More than one player may have the same card.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepMatchDreams\n          players={players}\n          user={user}\n          table={state.table}\n          onSubmitVotes={onSubmitVotes}\n          dreams={state.dreams}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseMatching;\n","import { AvatarName } from 'components/avatars';\nimport { ImageCard } from 'components/image-cards';\nimport { useCardWidth } from 'hooks/useCardWidth';\n\ntype GalleryDreamDisplayProps = {\n  entry: SGalleryEntry;\n  activePlayer: GamePlayer;\n};\n\nexport function GalleryDreamDisplay({ entry, activePlayer }: GalleryDreamDisplayProps) {\n  const cardWidth = useCardWidth(5, { gap: 40 });\n  return (\n    <div className=\"s-gallery-dream-display\">\n      <div className=\"s-gallery-dream-display__player\">\n        <AvatarName player={activePlayer} />\n      </div>\n      <div className=\"s-gallery-dream-display__theme-container\">\n        <div className=\"s-gallery-dream-display__theme\">{activePlayer.theme.text}:</div>\n        <div className=\"s-gallery-dream-display__dream\">{entry.dream}</div>\n      </div>\n      <div className=\"s-gallery-dream-display__dream-image-container\">\n        <ImageCard\n          imageId={entry.dreamId}\n          cardWidth={cardWidth}\n          className=\"s-gallery-dream-display__dream-image\"\n        />\n      </div>\n    </div>\n  );\n}\n","import { Avatar as AntAvatar } from 'antd';\nimport { Avatar } from 'components/avatars';\nimport { StarPoints } from 'components/points';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { DreamCard } from './DreamCard';\n\ntype GalleryGuessesProps = {\n  entry: SGalleryEntry;\n  players: GamePlayers;\n  correctGuessPoints: number;\n};\n\nexport function GalleryGuesses({ entry, players, correctGuessPoints }: GalleryGuessesProps) {\n  const cardWidth = useCardWidth(8, { gap: 20 });\n  return (\n    <ul className=\"s-gallery-guesses\">\n      {entry.cards.map((cardEntry) => {\n        return (\n          <li\n            key={`gallery-guess-${cardEntry.cardId}`}\n            className=\"s-gallery-guesses__votes-container\"\n            style={{ width: `${cardWidth + 16}px` }}\n          >\n            <div>\n              <DreamCard\n                cardId={cardEntry.cardId}\n                cardWidth={cardWidth}\n                isDream={cardEntry.isDream}\n                isNightmare={cardEntry.isNightmare}\n                hideBlurButton\n              />\n            </div>\n            <div className=\"s-gallery-guesses__votes\">\n              <AntAvatar.Group>\n                {cardEntry.votes.map((playerId) => {\n                  const player = players[playerId];\n                  return <Avatar id={player.avatarId} alt={player.name} size=\"small\" />;\n                })}\n              </AntAvatar.Group>\n              {cardEntry.votes.length > 0 && cardEntry.isDream && (\n                <StarPoints quantity={correctGuessPoints} keyPrefix={'dream-correct'} hideText />\n              )}\n\n              {cardEntry.votes.length > 0 && cardEntry.isNightmare && (\n                <StarPoints quantity={-1} keyPrefix={'dream-incorrect'} hideText />\n              )}\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { GalleryDreamDisplay } from './components/GalleryDreamDisplay';\nimport { GalleryGuesses } from './components/GalleryGuesses';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { SlideShow } from 'components/slide-show';\nimport { Translate } from 'components/language';\n\ntype StepResultsProps = {\n  players: GamePlayers;\n  gallery: SGalleryEntry[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n  correctGuessPoints: number;\n};\n\nexport function StepResults({\n  players,\n  gallery,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n  correctGuessPoints,\n}: StepResultsProps) {\n  useTemporarilyHidePlayersBar();\n\n  const galleryEntry = gallery[activeIndex];\n  const activePlayer = players[galleryEntry.playerId];\n\n  return (\n    <Step fullWidth className=\"s-results-step\">\n      <Title>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <SlideShow\n        players={players}\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={getAvatarColorById(activePlayer.avatarId)}\n        windowDuration={10}\n      >\n        <GalleryDreamDisplay entry={galleryEntry} activePlayer={activePlayer} />\n        <GalleryGuesses entry={galleryEntry} players={players} correctGuessPoints={correctGuessPoints} />\n      </SlideShow>\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Components\nimport { Step } from 'components/steps';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Translate } from 'components/language';\nimport { RoundsLeftInstruction } from 'components/text';\nimport { VIPNextPhaseButton } from 'components/vip';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  round: GameRound;\n  goToPreviousStep: GenericFunction;\n  setActiveIndex: GenericFunction;\n  isLastRound?: boolean;\n  correctGuessPoints: number;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  round,\n  goToPreviousStep,\n  setActiveIndex,\n  correctGuessPoints,\n}: StepRankingProps) {\n  return (\n    <Step>\n      <StepRankingWrapper\n        players={players}\n        ranking={ranking}\n        gainedPointsDescriptions={[\n          <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n          <Translate\n            pt=\"Votos corretos em seu sonho por outros jogadores\"\n            en=\"Correct guesses on your dream by other players\"\n          />,\n          <Translate pt=\"Votos em pesadelos\" en=\"Nightmares selected\" />,\n        ]}\n      />\n\n      {/* <PopoverRule content={<ScoringRules />} /> */}\n\n      {round.current < round.total && <RoundsLeftInstruction round={round} />}\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria De Novo\" en=\"See Gallery Again\" />\n      </Button>\n\n      <VIPNextPhaseButton round={round} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { CountdownIcon } from 'icons/CountdownIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepResults } from './StepResults';\nimport { StepRanking } from './StepRanking';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\nfunction PhaseResolution({ state, players, info }: PhaseProps) {\n  const { step, goToNextStep, goToPreviousStep, setStep } = useStep(0);\n\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(state.gallery.length);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<CountdownIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Acertos ganham <PointsHighlight>{state.correctGuessPoints}</PointsHighlight> pontos nessa\n                  rodada.\n                </>\n              }\n              en={\n                <>\n                  Correct guesses get <PointsHighlight>{state.correctGuessPoints}</PointsHighlight> points\n                  this round.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          players={players}\n          gallery={state.gallery}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          correctGuessPoints={state.correctGuessPoints}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n          correctGuessPoints={state.correctGuessPoints}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport PhaseGameOver from './PhaseGameOver';\nimport PhaseDreamTelling from './PhaseDreamTelling';\nimport PhaseMatching from './PhaseMatching';\nimport PhaseResolution from './PhaseResolution';\n// Fonts\nimport 'assets/fonts/architects-daughter.scss';\n// Sass\nimport './sonhos-pesadelos.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.SONHOS_PESADELOS.DREAM_TELLING:\n      return PhaseDreamTelling;\n    case PHASES.SONHOS_PESADELOS.MATCHING:\n      return PhaseMatching;\n    case PHASES.SONHOS_PESADELOS.RESOLUTION:\n      return PhaseResolution;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionSonhosPesadelos() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.DEFAULT,\n          colorLink: THEME_COLORS.DEFAULT,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.SONHOS_PESADELOS} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionSonhosPesadelos;\n","export function CountdownIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#FF637B\"\n        d=\"M421.8 465.9C443 444.2 456 411.6 456 379c0-66.3-53.7-123-120-123-14.1 0-27.6 2.4-40.2 6.9l-79.7 108.9.1.3c-.1 2.3-.2 4.6-.2 6.9 0 66.3 53.7 123 120 123h140l-54.2-36.1z\"\n      ></path>\n      <path\n        fill=\"#FFE469\"\n        d=\"M296.3 248l-80.1-108.1c-12.6-4.5-26.1-6.9-40.2-6.9-66.3 0-120 56.7-120 123 0 32.6 13 65.2 34.2 86.9L36 379h140c68.5 0 123.5-60.3 119.8-129.9l.5-1.1z\"\n      ></path>\n      <path\n        fill=\"#61D7A8\"\n        d=\"M421.8 216.9C443 195.2 456 165.6 456 133c0-70.2-57.8-123-117.6-123C272.3 8.4 216 65 216 133c0 66.4 57.8 123 120 123h140l-54.2-39.1z\"\n      ></path>\n      <path d=\"M236 183c-2.9 0-5.6 1.3-7.4 3.3-1.6 1.8-2.6 4.1-2.6 6.7 0 5.5 4.5 10 10 10 .9 0 1.7-.1 2.5-.3 4.3-1.1 7.5-5 7.5-9.7 0-5.5-4.5-10-10-10z\"></path>\n      <path d=\"M485.5 259.1c1.3-4.1-.1-8.6-3.7-11.2l-45.2-32.6c19-23.2 29.3-52 29.3-82.3C466 63.3 409.7 0 336 0c-69.9 0-126.5 57.8-129.8 126.5-9.8-2.3-19.9-3.5-30.2-3.5-72.4 0-130 61.8-130 133 0 30.9 10.7 61.8 29.1 84.9l-44.7 29.8c-3.7 2.4-5.3 7-4 11.2 1.3 4.2 5.2 7.1 9.6 7.1h140c10.2 0 20.3-1.2 30.2-3.7 3.2 69 60.1 126.7 129.8 126.7h140c4.4 0 8.3-2.9 9.6-7.1 1.3-4.2-.4-8.8-4-11.2l-44.7-29.8c18.4-23.1 29.1-54 29.1-84.9 0-47.5-25.2-89.4-62-113h72c4.3 0 8.2-2.8 9.5-6.9zM446 379c0 29.9-11.7 59.8-31.3 79.9-2.1 2.1-3.1 5.1-2.8 8 .3 3 1.9 5.6 4.4 7.3L443 492H336c-59.6 0-110-51.7-110-113v-.4c43.1-18.7 74-60.4 79.2-108.2 10-2.9 20.3-4.4 30.8-4.4 59.6 0 110 51.7 110 113zM336 246c-29.8 0-54.6-15.4-70.2-28.3-4.2-3.5-10.6-2.9-14.1 1.3s-2.9 10.6 1.3 14.1c8.6 7.2 19.8 15 32.9 21.2v1.7c0 2.1-.1 4.2-.2 6.3C282.6 319.7 235 369 176 369H69l26.7-17.8c5.2-3.5 6-10.8 1.6-15.3C77.7 315.8 66 285.9 66 256c0-61.3 50.4-113 110-113 10.5 0 20.9 1.5 30.8 4.4.4 3.9 1 7.9 1.8 11.7 1.1 5.4 6.4 8.9 11.8 7.8 5.4-1.1 8.9-6.4 7.8-11.8-1.5-7.2-2.2-14.8-2.2-22.1 0-61.3 50.4-113 110-113s110 51.7 110 113c0 28.9-11.1 56.2-31.3 76.9-2 2.1-3.1 4.9-2.8 7.8.2 2.9 1.7 5.5 4.1 7.2l29.1 21H336z\"></path>\n      <path d=\"M376 103c0-22.1-17.9-40-40-40s-40 17.9-40 40c0 5.5 4.5 10 10 10s10-4.5 10-10c0-11 9-20 20-20s20 9 20 20-9 20-20 20c-5.5 0-10 4.5-10 10s4.5 10 10 10c11 0 20 9 20 20s-9 20-20 20-20-9-20-20c0-5.5-4.5-10-10-10s-10 4.5-10 10c0 22.1 17.9 40 40 40s40-17.9 40-40c0-11.9-5.3-22.7-13.6-30 8.3-7.3 13.6-18.1 13.6-30zm-196.3 80.7c-3.8-1.5-8.2-.5-11 2.5l-40 43c-3.8 4-3.5 10.4.5 14.1s10.4 3.5 14.1-.5l22.7-24.4V319c0 5.5 4.5 10 10 10s10-4.5 10-10V193c0-4.1-2.5-7.8-6.3-9.3zM296 349c0 5.5 4.5 10 10 10s10-4.5 10-10c0-11.5 9.8-21.1 22-19.9 13.2 1.2 20.5 16.4 16.5 29.3-1.7 5.4-6.8 21.9-55.9 77-2.6 2.9-3.3 7.1-1.7 10.7 1.6 3.6 5.2 5.9 9.1 5.9h60c5.5 0 10-4.5 10-10s-4.5-10-10-10h-38c33.8-39.6 42.2-56.9 45.5-67.6 7.7-24.7-7.3-52.7-33.7-55.2-23.7-2.3-43.8 16.4-43.8 39.8z\"></path>\n    </svg>\n  );\n}\n","export function DreamIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        d=\"M505 151.9c0-35.8-29-64.8-64.8-64.8-2.2 0-4.5.1-6.7.3C412 41.1 340.7 7 256 7S100 41 78.5 87.4c-2.2-.2-4.4-.3-6.7-.3C36 87 7 116 7 151.8c0 23.3 12.5 44.8 32.8 56.4-21.3 28.8-15.2 69.3 13.6 90.6 18.7 13.8 43.3 16.6 64.5 7.3 21.4 27.7 57.4 40 91.3 31.1 22.7 25.9 62 28.6 87.9 5.9 2.1-1.8 4.1-3.8 5.9-5.9 33.9 8.9 69.8-3.4 91.3-31.1 32.8 14.4 71-.5 85.3-33.3 9.3-21.3 6.6-45.9-7.3-64.6 20.2-11.5 32.7-33 32.7-56.3z\"\n        fill=\"#DF8EEF\"\n      ></path>\n      <circle cx=\"38.8\" cy=\"473.2\" r=\"31.8\" fill=\"#DF8EEF\"></circle>\n      <circle cx=\"113.6\" cy=\"398.4\" r=\"44\" fill=\"#DF8EEF\"></circle>\n      <path\n        d=\"M281.1 215.4c-51.7 0-93.5-41.9-93.5-93.5 0-9.2 1.3-18.3 4-27-39.9 32.8-45.6 91.8-12.7 131.6s91.8 45.6 131.6 12.7c14.2-11.7 24.7-27.4 30.1-45.1-16.8 13.8-37.8 21.4-59.5 21.3z\"\n        fill=\"#FFE72C\"\n      ></path>\n      <path\n        d=\"M284.8 160.3l-27.7 9.8.8-29.4-17.9-23.2 28.2-8.3L284.8 85l16.6 24.2 28.2 8.3-17.9 23.3.8 29.4-27.7-9.9z\"\n        fill=\"#FFE72C\"\n      ></path>\n      <path d=\"M353.8 31.2c6 2.3 11.9 4.9 17.4 7.7 3.4 1.9 7.6.7 9.5-2.6 1.9-3.4.7-7.6-2.6-9.5l-.6-.3c-5.9-2.9-12.1-5.7-18.6-8.2-3.6-1.4-7.7.4-9.1 4s.4 7.5 4 8.9z\"></path>\n      <path d=\"M512 151.9c0-39.7-32.3-71.9-72-71.8h-2.3c-3.9-7.2-8.7-14-14.3-20.1-2.6-2.9-7-3.1-9.9-.5-2.9 2.6-3.1 7-.5 9.9 5.7 6.2 10.5 13.3 14.1 20.9 1.3 2.7 4.1 4.3 7.1 4 2-.2 4-.3 6-.3 31.9 0 57.8 25.8 57.9 57.7 0 20.8-11.1 40.1-29.2 50.3-3.4 1.9-4.5 6.2-2.6 9.6.1.2.3.5.4.7 19 25.7 13.5 61.8-12.1 80.8-16.6 12.3-38.6 14.8-57.5 6.5-2.9-1.3-6.4-.4-8.3 2.1-19.7 25.5-52.8 36.8-84 28.7-2.6-.7-5.3.2-7 2.2-20.1 23-55.1 25.4-78.1 5.3-1.9-1.6-3.6-3.4-5.3-5.3-1.7-2-4.5-2.8-7-2.2-31.2 8.2-64.3-3.1-84-28.6-2-2.6-5.4-3.4-8.3-2.2-29.2 12.8-63.3-.5-76.1-29.7-8.3-19-5.9-40.9 6.5-57.6 2.3-3.1 1.6-7.5-1.5-9.8-.2-.2-.4-.3-.7-.4-27.8-15.8-37.5-51.1-21.7-78.8C31.8 105.2 51 94.1 71.8 94.1c2 0 4 .1 6 .3 3 .3 5.8-1.3 7.1-4C105.7 45.4 176.1 14 256 14c15 0 30 1.1 44.8 3.3 3.8.6 7.4-2 8-5.9.6-3.8-2-7.4-5.9-8C287.4 1.2 271.7 0 256 0 173.3 0 99.7 32.7 74.3 80.1 34.7 78.7 1.4 109.7 0 149.3c-.8 24 10.4 46.9 29.9 60.9-6.6 11-10 23.6-10 36.4 0 39.7 32.1 71.8 71.8 71.8 8.1 0 16.2-1.4 23.9-4.1 22.5 26 57.5 37.7 91.1 30.5 26.9 27.2 70.8 27.4 98 .5l.5-.5c33.7 7.2 68.6-4.5 91.1-30.5 37.4 13.2 78.4-6.5 91.5-43.9 7-20 4.9-42.1-5.9-60.3 18.9-13.4 30-35.1 30.1-58.2zM38.8 434.3C17.4 434.3 0 451.7 0 473.2S17.4 512 38.8 512s38.8-17.4 38.8-38.8c0-21.5-17.3-38.8-38.8-38.9zm0 63.7C25.1 498 14 486.9 14 473.2s11.1-24.8 24.8-24.8 24.8 11.1 24.8 24.8c.1 13.7-11.1 24.8-24.8 24.8zm74.8-150.5c-28.2 0-51 22.8-51 51 0 10.7 3.4 21.1 9.6 29.8 2.3 3.1 6.6 3.8 9.8 1.6s3.8-6.6 1.6-9.8c-11.9-16.6-8.1-39.7 8.5-51.6s39.7-8.1 51.6 8.5 8.1 39.7-8.5 51.6c-6.3 4.5-13.8 6.9-21.6 6.9-3.9 0-7 3.1-7 7s3.1 7 7 7c28.2-.2 50.8-23.3 50.5-51.4-.3-27.9-22.7-50.4-50.5-50.6z\"></path>\n      <path d=\"M281.1 208.4c-47.8 0-86.5-38.8-86.5-86.5 0-8.5 1.2-16.9 3.7-25 1.1-3.7-1-7.6-4.7-8.7-2.2-.7-4.7-.2-6.5 1.3-42.8 35.3-49 98.6-13.7 141.5s98.6 49 141.5 13.7c15.3-12.6 26.6-29.5 32.3-48.5 1.1-3.7-1-7.6-4.7-8.7-2.2-.7-4.7-.2-6.5 1.3-15.4 12.7-34.8 19.6-54.9 19.6zM251 253.5c-47.8 0-86.5-38.7-86.5-86.5 0-18.1 5.7-35.7 16.2-50.4-.1 1.8-.1 3.6-.1 5.3 0 55.5 45 100.5 100.5 100.5 15 0 29.9-3.4 43.5-9.9-15.9 25.4-43.7 40.9-73.6 41z\"></path>\n      <path d=\"M290.5 81c-2.4-3.2-7-3.8-10.2-1.4-.5.4-1 .9-1.4 1.4l-15.2 22.2-25.8 7.6c-3.7 1.1-5.8 5-4.7 8.7.2.8.6 1.6 1.2 2.3l16.4 21.3-.7 26.9c-.1 3.9 2.9 7.1 6.8 7.2.9 0 1.8-.1 2.6-.4l25.3-9 25.3 9c3.6 1.3 7.6-.6 8.9-4.2.3-.8.4-1.7.4-2.6l-.7-26.9 16.4-21.3c2.4-3.1 1.8-7.5-1.3-9.8-.7-.5-1.5-.9-2.3-1.2l-25.8-7.6L290.5 81zm15.6 55.5c-1 1.3-1.5 2.9-1.5 4.5l.5 19.2-18.1-6.4c-1.5-.5-3.2-.5-4.7 0l-18.1 6.4.5-19.2c0-1.6-.5-3.2-1.5-4.5l-11.7-15.2 18.4-5.4c1.5-.5 2.9-1.4 3.8-2.8l10.8-15.8 10.8 15.8c.9 1.3 2.3 2.3 3.8 2.8l18.4 5.4-11.4 15.2z\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar DownCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"down-circle\", \"theme\": \"outlined\" };\nexport default DownCircleOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport DownCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownCircleOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar DownCircleOutlined = function DownCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: DownCircleOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  DownCircleOutlined.displayName = 'DownCircleOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(DownCircleOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  UpCircleOutlined.displayName = 'UpCircleOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","hideHeader","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","ImageBlurButton","cardId","ghost","useBlurCards","blurCard","isBlurEnabled","shouldBeBlurred","placement","title","pt","en","onClick","EyeOutlined","EyeInvisibleOutlined","ImageBlurButtonContainer","position","rest","ImageCard","imageId","cardWidth","preview","previewImageId","fileExtension","square","baseUrl","useTDBaseUrl","fallbackName","length","imageURL","replace","isBlurred","previewConfig","height","undefined","width","src","placeholder","fallback","PUBLIC_URL","maskClassName","Boolean","ImageCardBack","ImageCardButton","buttonPosition","over","icon","disabled","buttonText","buttonProps","isTop","iconComponent","DownCircleOutlined","UpCircleOutlined","buttonClassName","restButtonProps","button","shape","ImageCardHand","hand","onSelectCard","selectButtonText","selectButtonIcon","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","selectedCards","cardClassName","imageGroupPreview","useCardWidth","Math","max","minWidth","map","index","getAnimationClass","delay","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","custom","state","info","players","announcementIcon","TrophyIcon","submitAction","httpsCallable","functions","mockedDreamClues","mockVotes","dreams","table","user","playersIds","shuffle","dream","id","filter","playerId","shuffledTable","reduce","acc","DreamCard","isDream","isNightmare","hideBlurButton","DreamBoard","gap","dreamId","nightmareId","maxWidth","StepTellDream","onSubmitDream","isLoading","useLoading","translate","useLanguage","useState","setDream","useMock","onSubmitDreamsClick","fullWidth","Array","theme","level","fill","join","text","contained","align","onPressEnter","onChange","e","target","value","type","DreamTellingRules","useStep","step","goToNextStep","setStep","useUser","request","useAPICall","apiFunction","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDreamAPIRequest","phase","allowedPhase","PHASES","round","onPressButton","time","circleColor","appearance","DreamIcon","onClose","currentRound","current","cleanupVotes","votes","Object","entries","dreamEntryKey","cardEntryKey","split","SEPARATOR","AllDreamsClues","activeItem","onActivateItem","liButtonBaseClass","player","letter","LETTERS","cardEntryId","getEntryId","isActive","isUsed","keys","includes","name","DreamBoardVote","margin","ribbonIds","key","getClueId","labels","StepMatchDreams","onSubmitVotes","useVotingMatch","setVotes","activateItem","isVotingComplete","useEffectOnce","userClues","entry","clueEntryId","selectOwnVote","s","randomVotes","randomTable","voteRandomly","useOnSubmitVotesAPIRequest","EvaluateIcon","GalleryDreamDisplay","activePlayer","GalleryGuesses","correctGuessPoints","cards","cardEntry","avatarId","alt","quantity","keyPrefix","hideText","StepResults","gallery","activeIndex","setActiveIndex","isFirstGalleryRunThrough","useTemporarilyHidePlayersBar","galleryEntry","disableControls","barColor","getAvatarColorById","windowDuration","StepRanking","ranking","goToPreviousStep","gainedPointsDescriptions","total","PictureOutlined","useSlideShow","CountdownIcon","PointsHighlight","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PhaseDreamTelling","PhaseMatching","PhaseResolution","PhaseGameOver","PageError","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","props","xmlns","viewBox","d","cx","cy","r","ref","React","AntdIcon","_extends","DownCircleOutlinedSvg","UpCircleOutlinedSvg"],"sourceRoot":""}