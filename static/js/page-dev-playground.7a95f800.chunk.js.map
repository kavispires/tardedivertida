{"version":3,"file":"static/js/page-dev-playground.7a95f800.chunk.js","mappings":"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","sources":["mock/players.ts","pages/Dev/Playground.tsx"],"sourcesContent":["import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Tim'.split(',');\n// const DEV_NAMES: string[] =\n//   'Abigail,Bartolomeu,Cameron,Daniella,Evelyn,Frederick,Gordon,Hector,Isaac,Jacklyn,Madonna,Nathaniel'.split(\n//     ','\n//   );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem)) {\n    randomItem = getRandomItem(source);\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties?: PlainObject\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length > 1) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...properties,\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n\n// import { Image, Layout } from 'antd';\nimport GAME_LIST from 'utils/info';\nimport { Avatar, AvatarEntry } from 'components/avatars';\nimport { AdminOnlyContainer } from 'components/admin';\n// Resources\nimport { CheckCircleFilled, CheckCircleOutlined } from '@ant-design/icons';\nimport { Button, Image, Input, Space, Tag } from 'antd';\nimport { LETTERS } from 'utils/constants';\n\nimport { getColorFromLetter } from 'utils/helpers';\nimport { DevHeader } from './DevHeader';\nimport { useTitle } from 'react-use';\nimport { TimedTimerBar } from 'components/timers';\nimport { mockPlayers } from 'mock/players';\nimport { TurnOrder } from 'components/players';\nimport { TableOrder } from 'components/players/TableOrder';\nimport { CSSProperties, useMemo } from 'react';\nimport { ImageCard } from 'components/cards';\nimport { GlyphCard } from 'components/cards/GlyphCard';\n\nfunction Playground() {\n  useTitle('Playground | Dev | Tarde Divertida');\n  const info = GAME_LIST['U'];\n\n  const players = useMemo(() => mockPlayers({}, 12, {}), []);\n\n  // Mock State\n  const state = {\n    phase: 'WORD_SELECTION',\n    guesser: 'Kavis',\n    playerOrder: ['Flaviane', 'Stephanie', 'Kavis', 'Flaviane', 'Stephanie', 'Kavis'],\n    round: {\n      current: 1,\n      total: 4,\n    },\n  };\n  const onRun = () => console.log('RUN');\n\n  // const questionObj = questions.reduce((acc, question) => {\n  //   const id = `m-${question.id}-pt`;\n  //   acc[id] = {\n  //     ...question,\n  //     id,\n  //   };\n  //   return acc;\n  // }, {});\n  // console.log({ questionObj });\n\n  const splitQuestions = questions.reduce((acc: any, question, index) => {\n    const id = `m-${index + 1}-en`;\n\n    const [prefix, answers, suffix] = question.suffix.split(/([0-9])+/g);\n    // console.log({ prefix, answers, suffix });\n\n    if (!prefix || !answers || !suffix) {\n      console.log(question.suffix);\n    }\n    acc[id] = {\n      id,\n      prefix: prefix.trim(),\n      answers: Number(answers),\n      suffix: suffix.trim(),\n    };\n\n    return acc;\n  }, {});\n\n  console.log({ splitQuestions });\n\n  const styles: CSSProperties = {\n    // display: 'grid',\n    // gridTemplateColumns: 'repeat(5, 1fr)',\n\n    // gap: '1rem',\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n  const stylesLi: CSSProperties = {\n    border: '1px solid black',\n    margin: '4px',\n    padding: '8px',\n    // width: '132px',\n    // display: 'flex',\n    // flexDirection: 'column',\n    background: 'white',\n    // alignItems: 'center',\n    // justifyContent: 'space-between',\n  };\n\n  return (\n    <div>\n      <DevHeader title=\"Playground\" />\n      {/* <AdminOnlyContainer>Hello</AdminOnlyContainer> */}\n      {/* <TimedTimerBar duration={30} onExpire={() => console.log('done')} /> */}\n      {/* <TurnOrder players={players} order={Object.keys(players)} activePlayerId={Object.keys(players)[3]} /> */}\n\n      <Space wrap>\n        {/*\n        <TableOrder\n          players={players}\n          order={Object.keys(players)}\n          activePlayerId={Object.keys(players)[3]}\n          reorderByUser={Object.keys(players)[3]}\n        />\n\n        <TableOrder\n          players={players}\n          order={Object.keys(players)}\n          activePlayerId={Object.keys(players)[3]}\n          reorderByUser={Object.keys(players)[3]}\n          size=\"small\"\n        />\n\n\n      */}\n\n        {Array(185)\n          .fill(1)\n          .map((e, i) => (\n            <div>\n              <GlyphCard key={e + i} id={String(e + i)} />\n              {String(e + i)}\n            </div>\n          ))}\n      </Space>\n      <ul style={styles}>\n        {/* {allNames.map((name: string) => {\n          return (\n            <li key={name}>\n              <Tag>{name}</Tag>\n            </li>\n          );\n        })} */}\n      </ul>\n    </div>\n  );\n}\n\nexport default Playground;\n\nconst questions = [\n  {\n    suffix: 'Cite 3 coisas que podem ser encontradas em um bolso',\n    FIELD2: '',\n    FIELD3: '',\n  },\n  {\n    suffix: 'Cite 3 atrizes excelentes',\n    FIELD2: '',\n    FIELD3: '',\n  },\n];\n\nconst timestamps = [\n  {\n    id: 'CGQH',\n    start: 1631473289901,\n    end: 1631475624884,\n    numPlayers: 4,\n  },\n  {\n    id: 'CJLF',\n    start: 1644105185680,\n    end: 1644108977487,\n    numPlayers: 4,\n  },\n  {\n    id: 'CVOV',\n    start: 1661714340575,\n    end: 1661715735468,\n    numPlayers: 6,\n  },\n  {\n    id: '',\n    start: 0,\n    end: 0,\n    numPlayers: 0,\n  },\n];\n\nconst baseTime = 5;\n\nconst average = () => {\n  const durations = timestamps.map((entry) => {\n    const duration = entry.end - entry.start;\n    return Math.round(duration / (60 * 1000));\n  });\n\n  console.log({ durations });\n\n  const averages = timestamps.map((entry, index) => {\n    return Math.round((durations[index] - baseTime) / entry.numPlayers);\n  });\n\n  console.log({ averages });\n};\n\naverage();\n\n// function moreUS() {\n//   return new Array(114).fill(1).reduce((acc, e, i) => {\n//     const num: string = e + i < 10 ? `0${e + i}` : e + i;\n//     const id = `us-${num}`;\n//     const initial = LETTERS[i % LETTERS.length];\n\n//     acc[id] = {\n//       id: id,\n//       name: {\n//         pt: `XXX ${initial}`,\n//         en: `XXX ${initial}`,\n//       },\n//       gender: 'female',\n//     };\n//     return acc;\n//   }, {});\n// }\n\n// console.log(allUS)\nconst rawData: any[] = [];\n\nconst parseQuantitativeQuestions = () =>\n  rawData.reduce((acc: any, entry, index) => {\n    const id = `mr-${index + 1}-pt`;\n    const e: any = {\n      id,\n      text: entry.text,\n      type: entry.type,\n    };\n\n    acc[id] = e;\n    return acc;\n  }, {});\n\nconst result = parseQuantitativeQuestions();\nconsole.log({ result });\n\nconst svg = ``;\n\nconst ignoreIds: number[] = [];\n\nfunction parseSVGIds() {\n  const parts = svg.split(`id=\"`);\n  const res: string[] = [parts[0]];\n  let elementIndex = 1;\n  parts.forEach((part, index) => {\n    const lastCharIndex = part.indexOf(`\"`);\n    if (ignoreIds.includes(index)) {\n      res.push(`${part.substring(lastCharIndex + 1)}`);\n\n      return;\n    }\n    if (index > 0) {\n      res.push(`id=\"glyph-${elementIndex}${part.substring(lastCharIndex)}`);\n      elementIndex += 1;\n    }\n  });\n  console.log({ elementIndex });\n  return res.join('');\n}\n\nconsole.log(parseSVGIds());\n"],"names":["DEV_NAMES","split","cacheNames","cacheAvatars","cacheMockedPlayers","getRandomUniqueItemFromList","source","used","cache","randomItem","includes","getRandomItem","mockPlayerName","mockPlayers","players","quantity","properties","Object","keys","length","usedNames","usedAvatars","values","forEach","player","name","avatarId","neededQuantity","mockedPlayers","Array","fill","map","e","i","id","toLowerCase","AVAILABLE_AVATAR_IDS","updatedAt","Date","now","ready","newMockedPlayers","reduce","acc","useTitle","GAME_LIST","useMemo","splitQuestions","questions","question","index","suffix","prefix","answers","console","log","trim","Number","title","wrap","String","style","display","flexWrap","FIELD2","FIELD3","timestamps","start","end","numPlayers","durations","entry","duration","Math","round","averages","average","result","text","type","ignoreIds","parts","res","elementIndex","part","lastCharIndex","indexOf","push","substring","join","parseSVGIds"],"sourceRoot":""}