{"version":3,"file":"static/js/2114.ea2d1b79.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextPhaseButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/debug/DebugOnly.tsx","components/debug/DevButton.tsx","components/general/GameBanner.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","hooks/useAPICall.ts","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","mock/players.ts","utils/phases.ts"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Sass\nimport './AdminOnlyContainer.scss';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\n// Utils\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [usingEmulators] = useGlobalState('usingEmulators');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const [meta] = useGlobalState('gameMeta');\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'primary',\n            danger: true,\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.round.forceLastRound ||\n                    isLoading ||\n                    ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.round.forceLastRound\n                      ? 'This is already set as the last round'\n                      : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button target=\"_blank\" href={getFirebaseUrl(usingEmulators, meta.gameName, meta.gameId)}>\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round }: { round?: GameRound }) {\n  return !round || round.current === round.total || round.forceLastRound ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Time to auto trigger the button in seconds\n   */\n  autoTriggerTime?: number;\n};\n\n/**\n * Button only available to the admin to go to the next phase.\n * It can be auto-triggered by using the autoTriggerTime\n * @param props\n * @returns\n */\nexport function AdminNextPhaseButton({\n  className = '',\n  round,\n  autoTriggerTime = 0,\n  children,\n}: AdminNextPhaseButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE });\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <TimedButton\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        disabled={isLoading}\n        onClick={handleClick}\n        onExpire={handleClick}\n        duration={autoTriggerTime}\n        hideTimer={!Boolean(autoTriggerTime)}\n      >\n        {children ?? <ButtonLabel round={round} />}\n      </TimedButton>\n    </AdminOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n\ninterface AdminButtonProps extends ButtonProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Action triggered when the button is clicked\n   */\n  onClick: GenericFunction;\n}\n\nexport function AdminButton({ onClick, children, ...rest }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...rest}>\n      {children}\n    </Button>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  label: ReactNode;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { BugFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { DebugOnly } from './DebugOnly';\n\n/**\n * Button only available during dev only\n * @returns\n */\nexport function DevButton({ children, type, ...rest }: ButtonProps) {\n  return (\n    <DebugOnly devOnly>\n      <Button icon={<BugFilled />} type={type ?? 'primary'} {...rest}>\n        {children}\n      </Button>\n    </DebugOnly>\n  );\n}\n","import { Image } from 'antd';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <Image\n      alt={title?.[language]}\n      src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n      fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n      className={className}\n      preview={preview}\n    />\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport clsx from 'clsx';\nimport { useKeyPressEvent } from 'react-use';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n// Sass\nimport './PhaseAnnouncement.scss';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut')\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive\n              ? getAnimationClass(animationType, undefined, 'fast')\n              : getAnimationClass('bounceOut', undefined),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef.current?.offsetHeight, screenRef.current?.offsetWidth, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Divider, Input, notification, Popconfirm, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, FireFilled, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\nimport { GameBanner } from '../../general/GameBanner';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnter = () => {\n    setVolume(0.5);\n    onAddPlayer(null, 0.5);\n  };\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      setVolume(0.5);\n      onAddPlayer(null, 0.5);\n    }\n  };\n\n  const onEnterAsViewer = () => {\n    setUserId(VIEWER_ID);\n    setUsername(translate('Espectador', 'Viewer'));\n    setUserAvatarId('N');\n    setIsAdminEnabled(false);\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-banner\" />\n\n        <h1 className=\"lobby-heading\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnter}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n\n        {isAdmin && info.tags.includes('audience-mode') && (\n          <>\n            <Divider className=\"game-card__divider\" />\n            <Popconfirm\n              title={\n                <Translate\n                  pt=\"Tem certeza que quer entrar como espectador?\"\n                  en=\"Are you sure you want to join as viewer?\"\n                />\n              }\n              onConfirm={onEnterAsViewer}\n            >\n              <Button\n                className=\"lobby-join__join-button-link\"\n                type=\"primary\"\n                disabled={!Boolean(tempUsername) || isLoading}\n                loading={isLoading}\n                size=\"small\"\n                danger\n                icon={<FireFilled />}\n              >\n                <Translate pt=\"Entrar como espectador\" en=\"Join as viewer\" />\n              </Button>\n            </Popconfirm>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { GameBanner } from '../../general/GameBanner';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-banner\" />\n\n        <h1 className=\"lobby-heading\">{username || 'Fulano'}</h1>\n\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n\n        <h3 className=\"lobby-heading\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type }: { type: string; index?: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        backgroundPositionX: '0',\n      }}\n    ></div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\ntype SplitPlayers = {\n  left: GamePlayer[];\n  right: GamePlayer[];\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const { left, right } = orderBy(Object.values(players), 'updatedAt').reduce(\n    (acc: SplitPlayers, player, index) => {\n      if (index % 2 === 0) {\n        acc.left.push(player);\n      } else {\n        acc.right.push(player);\n      }\n\n      return acc;\n    },\n    {\n      left: [],\n      right: [],\n    }\n  );\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby\">\n        <div className=\"lobby__seating-area-left\">\n          {left.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                left: `${60 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"lobby__seating-area-right\">\n          {right.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                right: `${80 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <AdminMenuDrawer\n        state={{ phase: 'LOBBY', round: { current: 0, total: 0, forceLastRound: false } }}\n        players={players}\n      />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedGearIcon } from 'icons/AnimatedGearIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { Fragment, ReactNode, useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\nimport { reorder } from './reorder';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { WaitingRoomIcon } from 'icons/WaitingRoomIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n// Sass\nimport './WaitingRoom.scss';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <div className=\"waiting-room__content\">\n        <Instruction>\n          {Boolean(instruction) ? (\n            instruction\n          ) : (\n            <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n          )}\n        </Instruction>\n        {children}\n      </div>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse } from 'antd';\n// Components\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={<Translate pt=\"Regras\" en=\"Rules\" custom={title} />} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button, Space } from 'antd';\nimport { CarouselRef } from 'antd/es/carousel';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { createRef } from 'react';\nimport { Translate } from 'components/language';\nimport { useKeyPressEvent } from 'react-use';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <Space className={clsx('space-container', actionsClassName)}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <div className=\"rules-modal-content\">\n            <RulesCarousel info={gameInfo} />\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n// Ant Design Resource\nimport { Alert, Button, Checkbox, message, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { blurCard } = useBlurCards();\n\n  const {\n    loading,\n    error,\n    value: data,\n  } = useAsync(async () => {\n    const response = await fetch(`${process.env.REACT_APP_TDI_DATA_URL}/credo.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur all selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n  onClick: GenericFunction;\n};\n\nexport function PlayersStatusBar({ players, onClick }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <button onClick={onClick} className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Badge dot color={player.ready ? 'green' : 'gray'}>\n                <Avatar\n                  id={player.avatarId}\n                  alt={player.name}\n                  size=\"small\"\n                  className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                />\n              </Badge>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </button>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from '../players/PlayersStatusBar';\nimport { useNavigate } from 'react-router-dom';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { GameBanner } from 'components/general/GameBanner';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <PlayersStatusBar players={players} onClick={toggleDrawer} />\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          <GameBanner\n            title={info?.title}\n            gameName={info.gameName}\n            preview={false}\n            className=\"round-corners\"\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  /**\n   * The id of the game\n   */\n  gameId: GameId;\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n  /**\n   * The class to replace the background gradient\n   */\n  backgroundClassName?: string;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent, backgroundClassName }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  // Colorize background\n  useEffect(() => {\n    if (backgroundClassName) {\n      const appElement = document.getElementById('app');\n      if (appElement) {\n        appElement.classList.add(backgroundClassName);\n      }\n    }\n    return () => {\n      const appElement = document.getElementById('app');\n      appElement?.classList.remove(backgroundClassName ?? '');\n    };\n  }, [backgroundClassName]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): Players | {} {\n  const docPath = `games/${gameName}/${gameId}/players`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing players...');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `games/${gameName}/${gameId}/state`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing state...');\n  }\n\n  return snapshot?.data() as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport function Step({\n  children,\n  announcement,\n  fullWidth = false,\n  fullHeight = false,\n  className = '',\n}: StepProps) {\n  return (\n    <div\n      className={clsx('step', fullWidth && 'step--full-width', fullHeight && 'step--full-height', className)}\n    >\n      {announcement}\n      {children}\n    </div>\n  );\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) console.warn('SetSwitcher is being used without `players`, please add it.');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || round.forceLastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong>{' '}\n            {pluralize(left, 'rodada', 'rodadas')} para o jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round', 'rounds')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level (default: 2)\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title (default: medium)\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 2, size = 'medium' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import { useCallback } from 'react';\nimport { message, notification } from 'antd';\nimport { HttpsCallable } from 'firebase/functions';\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\ntype useAPICallArgs = {\n  apiFunction: HttpsCallable<unknown, unknown>;\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\n/**\n * Wrapper around common firebase http call\n * @param data\n * @param data.apiFunction\n * @param [data.onBeforeCall] what to run before the api call\n * @param [data.onAfterCall] what to run after the api call\n * @param [data.onError] what to run if an error occurs\n * @param [data.onSuccess] what to run if success occurs\n * @param [data.actionName] the name used in the loader hook\n * @param [data.successMessage]\n * @param [data.errorMessage]\n * @returns\n */\n\n/**\n * Wrapper around common firebase http call\n * @param options\n * @returns\n */\nexport function useAPICall({\n  apiFunction,\n  actionName = 'api-action',\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: useAPICallArgs): (...args: any[]) => any {\n  const { setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [userId] = useGlobalState('userId');\n\n  const onAPICall = debounce(\n    useCallback(\n      async (payload: {}) => {\n        try {\n          setLoader(actionName, true);\n          await onBeforeCall();\n          const response = await apiFunction({\n            gameId,\n            gameName,\n            playerId: userId,\n            ...payload,\n          });\n\n          if (response.data) {\n            onSuccess();\n            message.success(successMessage);\n          }\n        } catch (e: any) {\n          notification.error({\n            message: errorMessage,\n            description: JSON.stringify(e.message),\n            placement: 'bottomLeft',\n          });\n          console.error(e);\n          onError();\n        } finally {\n          await onAfterCall();\n          setLoader(actionName, false);\n        }\n      },\n      [\n        actionName,\n        apiFunction,\n        errorMessage,\n        gameId,\n        gameName,\n        userId,\n        setLoader,\n        successMessage,\n        onBeforeCall,\n        onAfterCall,\n        onError,\n        onSuccess,\n      ]\n    )\n  );\n\n  return onAPICall;\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { isDevEnv } from 'utils/helpers';\nimport { useCountdown } from './useCountdown';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param requirements\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = [], requirements: any[] = []) {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n\n  useEffect(() => {\n    if (!runOnce && isDevEnv && !isAdmin && userId !== VIEWER_ID && requirements.every(Boolean)) {\n      setRunOnce(true);\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n\n/**\n * Runs mock function tht performs whatever after 3 seconds\n * @param whatToDo\n * @param requirements\n * @param delay (default 4)\n * @returns\n */\nexport function useDelayedMock(whatToDo: GenericFunction, requirements: any[] = [], delay = 4) {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n\n  return useCountdown({\n    duration: delay,\n    onExpire: () => {\n      if (!runOnce && isDevEnv && !isAdmin && userId !== VIEWER_ID && requirements.every(Boolean)) {\n        whatToDo();\n        setRunOnce(true);\n      }\n    },\n    disabled: runOnce,\n  });\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","import { useEffect } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: Players, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Sam,Tim,Una,Vic,Will,Xavier,Yara,Zoe'.split(\n    ','\n  );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  let tries = 0;\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem) || tries < 50) {\n    randomItem = getRandomItem(source);\n    tries += 1;\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties?: PlainObject\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length === quantity) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name: `${name}`,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...properties,\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CAMINHOS_MAGICOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  COMUNICACAO_ALIENIGENA: {\n    ALIEN_SELECTION: 'ALIEN_SELECTION',\n    HUMAN_ASK: 'HUMAN_ASK',\n    ALIEN_ANSWER: 'ALIEN_ANSWER',\n    ALIEN_REQUEST: 'ALIEN_REQUEST',\n    OFFERINGS: 'OFFERINGS',\n    REVEAL: 'REVEAL',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TASK: 'TASK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    CHARACTER_FILTERING: 'CHARACTER_FILTERING',\n    CHARACTER_DESCRIPTION: 'CHARACTER_DESCRIPTION',\n    GUESSING: 'GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VAMOS_AO_CINEMA: {\n    MOVIE_SELECTION: 'MOVIE_SELECTION',\n    MOVIE_ELIMINATION: 'MOVIE_ELIMINATION',\n    REVEAL: 'REVEAL',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","usingEmulators","visible","setVisible","meta","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","phase","round","forceLastRound","target","href","getFirebaseUrl","gameName","gameId","ButtonLabel","current","total","AdminNextPhaseButton","autoTriggerTime","translate","useLanguage","onGoToNextPhase","handleClick","onExpire","duration","hideTimer","Boolean","AdminButton","rest","RocketFilled","AdminOnlyButton","DebugOnly","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","DevButton","BugFilled","GameBanner","preview","language","alt","src","PUBLIC_URL","fallback","PhaseAnnouncement","buttonText","currentRound","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","useCountdown","autoStart","getAnimationClass","autoFocus","custom","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","setScreenSize","useEffect","height","offsetHeight","width","offsetWidth","description","baseClass","id","ref","speak","text","volume","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis","getRandomWelcomeMessage","getRandomItem","randomName","mockPlayerName","Join","setLoader","setUserId","setUsername","setUserAvatarId","setVolume","setIsAdminEnabled","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","avatarId","newAvailableAvatars","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerAvatarId","response","data","username","notification","console","error","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","isComplete","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","loading","ghost","size","tags","VIEWER_ID","Waiting","gameMeta","userAvatarId","onLockGameAndStart","isLocked","numPlayers","direction","min","block","SingleCloud","backgroundImage","backgroundPositionX","cloudData","MultiCloud","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","PhaseLobby","userId","orderBy","left","right","PHASES","transform","top","animate","appearance","clouds","PhasePlaceholder","PhaseRules","user","useUser","onBeReady","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","useMemo","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","startWith","starterIndex","slice","CollapsibleRule","contained","header","PopoverRule","content","showLabel","ReadOutlined","RulesCarousel","createRef","prev","autoplay","autoplaySpeed","rule","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","onCancel","footer","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","count","score","shape","BlurOptions","blurCard","useBlurCards","useAsync","fetch","process","json","result","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","checked","selectedGroups","forEach","flat","SectionSettings","blurEnabled","setBlurEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","s","PlayersStatusBar","sortPlayers","dot","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","FireOutlined","Session","gameCollection","getActiveComponent","backgroundClassName","docPath","useDocument","doc","firestore","snapshotListenOptions","includeMetadataChanges","snapshot","useGamePlayers","useGameState","setInfo","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","appElement","document","getElementById","classList","add","remove","ActiveComponent","Step","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","step","conditions","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","warn","Instruction","RoundsLeftInstruction","pluralize","TextHighlight","Title","level","onBeforeCall","onError","onAPICall","func","timer","timeout","args","clearTimeout","apply","debounce","blurredCards","setBlurredCards","getLocalStorage","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","whatToDo","requirements","runOnce","setRunOnce","every","useDelayedMock","delay","useStep","startingStep","setStep","goToPreviousStep","ignore","setShowPlayersBar","setUser","setIsReady","updatedAt","online","Date","now","DEV_NAMES","cacheNames","cacheAvatars","cacheMockedPlayers","getRandomUniqueItemFromList","source","used","cache","randomItem","tries","mockPlayers","quantity","properties","usedNames","neededQuantity","mockedPlayers","Array","fill","i","toLowerCase","newMockedPlayers","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CAMINHOS_MAGICOS","UNKNOWN","CINEGRAFISTAS_AMADORES","COMUNICACAO_ALIENIGENA","ALIEN_SELECTION","HUMAN_ASK","ALIEN_ANSWER","ALIEN_REQUEST","OFFERINGS","REVEAL","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","CLUE_WRITING","GUESSING","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TASK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","CHARACTER_FILTERING","CHARACTER_DESCRIPTION","RESULTS","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","TESTEMUNHA_OCULAR","WITNESS_SELECTION","QUESTIONING","TRIAL","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VAMOS_AO_CINEMA","MOVIE_SELECTION","MOVIE_ELIMINATION","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","TEMPLATE"],"sourceRoot":""}