{"version":3,"file":"static/js/874.011bffe1.chunk.js","mappings":"sRAsBO,SAASA,EAAT,GAA+E,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,eAClCC,GAAcC,EAAAA,EAAAA,MAAdD,UAEFE,EAAiB,WACrBH,EAAe,CAAEI,UAAUC,EAAAA,EAAAA,IAAQN,EAAQO,KAAI,SAACC,GAAD,OAAYA,EAAOC,OAAK,MAMzE,OAFAC,EAAAA,EAAAA,IAAQN,EAAgB,KAGtB,UAAC,KAAD,CAAMO,WAAS,EAAf,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWC,GAAG,yBAAmBC,GAAG,sBAEtC,SAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,SAAC,KAAD,CACEF,GAAG,sDACHC,GAAG,4DAIP,gBAAKE,UAAU,UAAf,SACGf,EAAQO,KAAI,SAACC,GACZ,OACE,SAAC,KAAD,CAEEQ,QAAS,kBAAMf,EAAe,CAAEI,SAAUG,EAAOC,MACjDQ,SAAUf,EAHZ,UAKE,SAAC,KAAD,UAAOM,EAAOU,QAJTV,EAAOC,UAUpB,SAAC,KAAD,WACE,SAAC,IAAD,CAAQO,QAASZ,EAAgBa,SAAUf,EAA3C,UACE,SAAC,KAAD,CAAWU,GAAG,kBAAkBC,GAAG,yBCE7C,MApDA,YAAqE,IAAD,EAApCM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACxCC,GAAcC,EAAAA,EAAAA,IAAeJ,EAASC,GACpCI,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,GAAOC,EAAAA,EAAAA,IAAQR,GACrB,GAAwBS,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEM7B,ECZD,SAAqC6B,GAC1C,IAAQN,GAAcC,EAAAA,EAAAA,MAAdD,UAEFO,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZC,aAAc,kBAAMN,EAAQ,IAC5BO,QAAS,kBAAMP,EAAQ,IACvBQ,eAAgBd,EAAU,6BAA8B,2BACxDe,aAAcf,EACZ,kEACA,qDAIJ,OAAO,SAACgB,GACNT,GAAQ,QACNU,OAAQ,iBACLD,KDNgBE,CAA4BZ,GAEnD,OACE,SAAC,KAAD,CAAgBT,KAAMA,EAAMsB,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAOuB,MAAOC,aAAcC,EAAAA,EAAAA,gBAAAA,iBAA/D,UACE,UAAC,KAAD,CAAchB,KAAMA,EAAMiB,WAAY,EAAExB,GAAcA,GAAcA,GAAcH,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE4B,KAAK,OACLC,MAAOxB,EAAU,yBAAoB,kBACrCyB,QAAS,kBAAMnB,EAAQ,IACvBoB,aAAY,OAAE9B,QAAF,IAAEA,GAAF,UAAEA,EAAO+B,aAAT,aAAE,EAAcC,QAC5BC,SAAU,GALZ,UAOE,SAAC,KAAD,WACE,SAAC,KAAD,CACEzC,IACE,+PAIE,kBAJF,uGASFC,IACE,wPAIE,kBAJF,+GAcR,SAACd,EAAD,CAAkBC,QAAS0B,EAAK1B,QAASC,eAAgBA,UExDpDqD,EAA0B,I,SCiBhC,SAASC,EAAT,GAA+F,IAAnEC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,gBAAiBtC,EAAkC,EAAlCA,QACjE,GAA0BS,EAAAA,EAAAA,UAAc,IAAxC,eAAO8B,EAAP,KAAcC,EAAd,KACA,GAAgC/B,EAAAA,EAAAA,WAAS,GAAzC,eAAOgC,EAAP,KAAkBC,EAAlB,KAEA,GAA6BC,EAAAA,EAAAA,UAAS,CACpCC,iBAAiBC,EAAAA,EAAAA,IAAWV,GAC5BW,WAAW,EACXC,SAAU,WACRL,GAAW,GACXM,OALIC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QASXF,EAAW,kBACfV,EAAgB,CACda,QAASC,KAAKC,UAAUd,MAGtBe,EAAkB,GAAVL,EAAeC,EAEvBK,EAASvD,EAAQqC,EAAckB,QAErC,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAMC,KAAK,QAAQC,OAAQF,EAAOG,KAAMC,MAAOC,EAAAA,GAAQL,EAAOM,UAAUF,MAAxE,SACGtB,EAAcyB,WAEjB,SAAC,KAAD,CAAUC,MAAO,GAAIC,MAAOV,EAAOW,MAAO9B,EAAyBP,KAAK,WACvEa,GACC,SAAC,oBAAD,CAAsByB,MAAO,CAAEC,WAAY,QAASC,MAAO,QAASC,QAAS,YAE7E,SAAC,KAAD,CAAe9B,MAAOA,EAAOC,SAAUA,EAAU8B,cAAY,KAE/D,SAAC,KAAD,WACE,SAAC,IAAD,CAAQ1C,KAAK,UAAU/B,QAAS,kBAAMmD,KAAYQ,KAAK,QAAvD,UACE,SAAC,KAAD,CAAW/D,GAAG,iBAAiBC,GAAG,0BCyB5C,MA3DA,YAA6D,IAAD,IAApCM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAChCC,GAAcC,EAAAA,EAAAA,IAAeJ,EAASC,GACpCI,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,GAAOC,EAAAA,EAAAA,IAAQR,GACrB,GAAwBS,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEM2B,EHGD,SAAsC3B,GAC3C,IAAQN,GAAcC,EAAAA,EAAAA,MAAdD,UAEFO,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,iBACZC,aAAc,kBAAMN,EAAQ,IAC5BO,QAAS,kBAAMP,EAAQ,IACvBQ,eAAgBd,EACd,oEACA,6DAEFe,aAAcf,EACZ,kEACA,mDAIJ,OAAO,SAACgB,GACNT,GAAQ,QACNU,OAAQ,kBACLD,KGxBiBkD,CAA6B5D,GAErD,OACE,SAAC,KAAD,CAAgBT,KAAMA,EAAMsB,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAOuB,MAAOC,aAAcC,EAAAA,EAAAA,gBAAAA,QAA/D,UACE,UAAC,KAAD,CAAchB,KAAMA,EAAMiB,WAAY,EAAExB,GAAcA,GAAcA,GAAcH,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE4B,KAAK,UACLC,MAAOxB,EAAU,UAAW,QAC5ByB,QAAS,kBAAMnB,EAAQ,IACvBoB,aAAY,OAAE9B,QAAF,IAAEA,GAAF,UAAEA,EAAO+B,aAAT,aAAE,EAAcC,QAC5BuC,WAAYnE,EAAU,4CAAoC,mBAC1DoE,cAAY,EANd,UAQE,UAAC,KAAD,YACE,SAAC,KAAD,CACEhF,IACE,yEAEE,kBAFF,wDAGkD0C,EAHlD,gBAMFzC,IACE,mEAEE,kBAFF,2CAG2CyC,EAH3C,kBAQJ,SAAC,KAAD,CACEnC,QAASA,EACT0E,MAAOzE,EAAM0E,UACb/E,UAAU,eACVgF,eAAc,UAAErE,EAAK8B,qBAAP,aAAE,EAAoB/C,GACpCuF,cAAetE,EAAKjB,WAM1B,SAAC8C,EAAD,CACEC,cAAe9B,EAAK8B,cACpBC,gBAAiBA,EACjBtC,QAASA,U,UC7CZ,SAAS8E,EAAT,GAMmB,IALxBzC,EAKuB,EALvBA,cACA0C,EAIuB,EAJvBA,cACA/E,EAGuB,EAHvBA,QACAO,EAEuB,EAFvBA,KACAyB,EACuB,EADvBA,MAEQ3B,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA0BI,EAAAA,EAAAA,UAAiB,IAA3C,eAAOoB,EAAP,KAAcmD,EAAd,KAEMzB,EAASvD,EAAQqC,EAAckB,QAI/B0B,EAAgB,kBAAMF,EAAc,CAAEG,MAAOrD,KAKnD,OAFAtC,EAAAA,EAAAA,KAAQ,kBAAMwF,EAAc,CAAEG,MAAM,GAAD,OAAKlD,EAAMC,SAAX,OAAqB1B,EAAKjB,QAAS,KAGpE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWG,GAAG,mBAAgBC,GAAG,qBAEnC,SAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,SAAC,KAAD,CACEF,IACE,iCACE,SAAC,KAAD,CAAY0F,OAAQ5B,IADtB,iCAIF7D,IACE,iCACE,SAAC,KAAD,CAAYyF,OAAQ5B,IADtB,qCAON,SAAC,KAAD,CAAWJ,QAASd,EAAcyB,QAASlE,UAAU,YAAY4D,KAAM,OAEvE,SAAC,IAAD,CACE4B,SA9BgB,SAACC,GAAD,OAAYL,EAASK,EAAEC,OAAOtB,QA+B9CR,KAAK,QACL+B,YAAalF,EAAU,yBAA0B,yBACjDT,UAAU,wBACV4F,aAAcP,KAGhB,SAAC,KAAD,WACE,SAAC,IAAD,CAAQrD,KAAK,UAAU/B,QAASoF,EAAezB,KAAK,QAAQ1D,UAAW+B,EAAvE,UACE,SAAC,KAAD,CAAWpC,GAAG,SAASC,GAAG,uBCfpC,MA5CA,YAA4D,IAAD,IAApCM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAC/BC,GAAcC,EAAAA,EAAAA,IAAeJ,EAASC,GACpCI,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,GAAOC,EAAAA,EAAAA,IAAQR,GACrB,GAAwBS,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMoE,EL8BD,SAAoCpE,GACzC,IAAQN,GAAcC,EAAAA,EAAAA,MAAdD,UAEFO,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,eACZC,aAAc,kBAAMN,EAAQ,IAC5BO,QAAS,kBAAMP,EAAQ,IACvBQ,eAAgBd,EAAU,gCAAiC,iCAC3De,aAAcf,EACZ,qEACA,uDAIJ,OAAO,SAACgB,GACNT,GAAQ,QACNU,OAAQ,gBACLD,KKhDeoE,CAA2B9E,GAEjD,OACE,SAAC,KAAD,CAAgBT,KAAMA,EAAMsB,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAOuB,MAAOC,aAAcC,EAAAA,EAAAA,gBAAAA,OAA/D,UACE,UAAC,KAAD,CAAchB,KAAMA,EAAMiB,WAAY,EAAExB,GAAcA,GAAcA,GAAcH,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE4B,KAAK,aACLC,MAAOxB,EAAU,mBAAiB,eAClCyB,QAAS,kBAAMnB,EAAQ,IACvBoB,aAAY,OAAE9B,QAAF,IAAEA,GAAF,UAAEA,EAAO+B,aAAT,aAAE,EAAcC,QAJ9B,UAME,UAAC,KAAD,YACE,SAAC,KAAD,CAAWxC,GAAG,oCAAiCC,GAAG,sCAElD,SAAC,KAAD,CACEM,QAASA,EACT0E,MAAOzE,EAAM0E,UACb/E,UAAU,eACVgF,eAAc,UAAErE,EAAK8B,qBAAP,aAAE,EAAoB/C,GACpCuF,cAAetE,EAAKjB,WAM1B,SAACwF,EAAD,CACEzC,cAAe9B,EAAK8B,cACpB0C,cAAeA,EACf/E,QAASA,EACTO,KAAMA,EACNyB,MAAO/B,EAAM+B,c,oBCrChB,SAAS0D,EAAT,GAAoF,IAApEC,EAAmE,EAAnEA,MAAO3F,EAA4D,EAA5DA,QAAS4F,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,YACxDvC,EAASvD,EAAQ2F,EAAMpC,QACvBwC,GAAiBC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,IAAkB,aAAY,IAEnE,OACE,iBAAKrG,UAAU,SAASsE,MAAO,CAAEC,WAA2B,UAAfwB,EAAM/D,KAAmBgE,EAAa,GAAnF,WACE,iBAAKhG,UAAU,qBAAf,WACE,SAAC,IAAD,CAAWsE,MAAO,CAAEgC,gBAAiBN,GAArC,SAAoDC,EAAc,KAClE,iBAAMjG,UAAU,wBAAhB,UACE,SAAC,KAAD,CAAWH,GAAG,KAAKC,GAAG,UAExB,SAAC,IAAD,CAAWwE,MAAO,CAAEgC,gBAAiBN,GAArC,SAAoDE,OAGtC,UAAfH,EAAM/D,OACL,gBAAKhC,WAAWuG,EAAAA,EAAAA,GAAK,oBAAqBJ,GAAiB7B,MAAO,CAAEgC,gBAAiBN,GAArF,UACE,SAAC,KAAD,CAAQtG,GAAIiE,EAAOM,SAAUL,KAAM,OAIvB,UAAfmC,EAAM/D,OACY,IAAhBiE,GACC,gBAAKjG,WAAWuG,EAAAA,EAAAA,GAAK,oBAAqBJ,GAA1C,UACE,SAAC,KAAD,UAAOJ,EAAM7B,aAGf,gBAAKlE,WAAWuG,EAAAA,EAAAA,GAAK,iCAAkCJ,GAAvD,SAAyEJ,EAAM7B,WAGnE,YAAf6B,EAAM/D,OACL,SAAC,KAAD,CACEuB,QAASwC,EAAM7B,QACflE,WAAWuG,EAAAA,EAAAA,GAAK,8BAA+BJ,GAC/CvC,KAAM,MAIM,UAAfmC,EAAM/D,OACL,iBAAKhC,UAAU,iBAAf,WACE,SAAC,KAAD,CAAWH,GAAG,OAAOC,GAAG,SACxB,SAAC,KAAD,CAAYyF,OAAQ5B,EAAQ6C,aAAW,UC7C1C,SAASC,EAAT,GAAkE,IAAjDC,EAAgD,EAAhDA,WAAYT,EAAoC,EAApCA,YAAa7F,EAAuB,EAAvBA,QACzCuG,EAAavG,EAAQsG,EAAWhH,IAChCsG,GAAaY,EAAAA,EAAAA,IAAmBD,EAAW1C,UAEjD,OACE,iBAAKjE,UAAU,UAAf,WACE,gBAAIA,UAAU,iBAAiBsE,MAAO,CAAEgC,gBAAiBN,GAAzD,WACE,SAAC,KAAD,CAAQtG,GAAIiH,EAAW1C,SAAUL,KAAK,UAAW,KACjD,SAAC,KAAD,CAAW/D,IAAI,+CAAY8G,EAAW7C,QAAUhE,IAAI,gCAAG6G,EAAW7C,KAAd,oBAGtD,SAACgC,EAAD,CACEC,MAAOW,EAAWG,OAAOZ,GACzB7F,QAASA,EACT4F,WAAYA,EACZC,YAAaA,EACbC,YAAaQ,EAAWG,OAAOC,YCfhC,SAASC,EAAT,GAAwD,IAAD,EAAlC3G,EAAkC,EAAlCA,QAAS4G,EAAyB,EAAzBA,MACnC,GAAkDnG,EAAAA,EAAAA,WAAS,GAA3D,eAAOoG,EAAP,KAA0BC,EAA1B,KACA,GAAwCrG,EAAAA,EAAAA,UAAS,GAAjD,eAAOsG,EAAP,KAAqBC,EAArB,KACA,GAAsCvG,EAAAA,EAAAA,UAAS,GAA/C,eAAOoF,EAAP,KAAoBoB,EAApB,KACA,GAA8BxG,EAAAA,EAAAA,UAAS,GAAvC,eAAOyG,EAAP,KAAgBC,EAAhB,KAEMC,GAAapB,EAAAA,EAAAA,UAAQ,WACzB,OAAOY,EAAMS,QAAO,SAACpD,EAAOqC,GAAR,OAAuBrC,EAAQqC,EAAWG,OAAOC,SAAQ,KAC5E,CAACE,IAEEU,EPrBqB,EOqBOF,EAElC,GAAwCzE,EAAAA,EAAAA,UAAS,CAC/CC,iBAAiBC,EAAAA,EAAAA,IPxBQ,EOwBmBuE,GAC5CtE,WAAW,EACXC,SAAU,kBAAM+D,GAAqB,MAH/B7D,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASqE,EAA1B,EAA0BA,UAMpBC,EAAoBZ,EAAMG,GAC1BU,IAA8C,OAAjBD,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBf,cAAnB,eAA2BC,SAAU,GAAK,EACvEgB,GAAeC,QAAQf,EAAMG,EAAe,IAE5Ca,EAAiB,GAAV3E,EAAeC,EAWtB2E,GAAaC,EAAAA,EAAAA,cAAY,WAC7Bb,GAAe,SAACc,GAAD,OAAOA,EAAI,KACtBlB,GACFM,GAAW,SAACa,GAAD,OAAOA,EAAI,OAEvB,CAACnB,IACEoB,GAAcH,EAAAA,EAAAA,cAAY,WAC9Bd,GAAgB,SAACe,GAAD,OAAOA,EAAI,KAC3Bd,EAAe,GACXJ,GACFM,GAAW,SAACa,GAAD,OAAOA,EAAI,OAEvB,CAACnB,IAaJ,OAXAqB,EAAAA,EAAAA,YAAU,WACJX,GAAaK,EAAON,GAAaM,EP3DZ,IO2DqC,IAExD/B,EAAc4B,EAChBI,IACUH,GACVO,OAGH,CAACL,EAAML,EAAWE,KAGnB,UAAC,KAAD,CAAM7H,UAAU,eAAhB,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWH,GAAG,oBAAiBC,GAAG,kBAEnCmG,EAAc,IAAM2B,GACnB,gBAAK5H,UAAU,IAAf,gBAEA,SAACyG,EAAD,CAAOC,WAAYkB,EAAmB3B,YAAaA,EAAa7F,QAASA,KAE3E,gBAAKJ,UAAU,cAAf,UACE,iBACEA,UAAU,oBACVsE,MAAO,CACLE,MAAM,GAAD,OAAK+D,KAAKC,IAAK,IAAMlB,EAAWE,GAAhC,KACLlB,gBAAiB,aAIvB,UAAC,KAAD,YACE,SAAC,IAAD,CAAQpG,SAAU+G,GAAsC,IAAjBE,EAAoBlH,QArD7C,WAClBmH,EAAgBD,EAAe,GAC/BE,EAAe,GACXJ,GACFM,GAAW,SAACa,GAAD,OAAOA,EAAI,MAiDpB,yBAGA,SAAC,IAAD,CAAQlI,SAAU+G,GAAqC,IAAhBhB,EAAmBhG,QAjD7C,kBAAMoH,GAAe,SAACc,GAAD,OAAOA,EAAI,MAiD7C,wBAGA,SAAC,IAAD,CACEjI,SAAU+G,GAAqBhB,IAAgB4B,EAC/C5H,QAASgI,EAFX,wBAMA,SAAC,IAAD,CAAQ/H,SAAU+G,GAAqBa,EAAa7H,QAASoI,EAA7D,4BAIF,SAAC,KAAD,OC7DN,MA9BA,YAAkE,IAAD,EAApCjI,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACrCC,GAAcC,EAAAA,EAAAA,IAAeJ,EAASC,GACpCI,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAwBI,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,SAAC,KAAD,CAAgBT,KAAMA,EAAMsB,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAOuB,MAAOC,aAAcC,EAAAA,EAAAA,gBAAAA,aAA/D,UACE,UAAC,KAAD,CAAchB,KAAMA,EAAMiB,WAAY,EAAExB,GAAcA,GAAcA,GAAcH,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE4B,KAAK,cACLC,MAAOxB,EAAU,oBAAkB,kBACnCyB,QAAS,kBAAMnB,EAAQ,IACvBoB,aAAY,OAAE9B,QAAF,IAAEA,GAAF,UAAEA,EAAO+B,aAAT,aAAE,EAAcC,QAC5BoG,aAAW,EACXnG,SAAU,EANZ,UAQE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWzC,GAAG,8BAA2BC,GAAG,gCAC5C,SAAC,KAAD,CAAWM,QAASA,EAAS0E,MAAOzE,EAAM0E,kBAK9C,SAACgC,EAAD,CAAW3G,QAASA,EAAS4G,MAAO3G,EAAM2G,cCjClD,MAJA,YAAqD,IAA5B3G,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAC9B,OAAO,SAAC,KAAD,CAAiBA,KAAMA,EAAMD,MAAOA,EAAOqI,iBAAiB,YCwCrE,MAjCA,YAAmE,IAAzBC,EAAwB,EAAxBA,OAwBxC,OACE,SAAC,KAAD,CACEA,OAAQA,EACRC,eAAgBC,EAAAA,GAAAA,gBAChBC,mBA3BJ,SAA4BlH,GAC1B,OAAQA,GACN,KAAKE,EAAAA,EAAAA,QAAAA,MACH,OAAOiH,EAAAA,GACT,KAAKjH,EAAAA,EAAAA,QAAAA,MACH,OAAOkH,EAAAA,GACT,KAAKlH,EAAAA,EAAAA,QAAAA,MACH,OAAOmH,EAAAA,GACT,KAAKnH,EAAAA,EAAAA,gBAAAA,iBACH,OAAOoH,EACT,KAAKpH,EAAAA,EAAAA,gBAAAA,QACH,OAAOqH,EACT,KAAKrH,EAAAA,EAAAA,gBAAAA,OACH,OAAOsH,EACT,KAAKtH,EAAAA,EAAAA,gBAAAA,aACH,OAAOuH,EACT,KAAKvH,EAAAA,EAAAA,QAAAA,UACH,OAAOwH,EACT,QACE,OAAOC,EAAAA","sources":["games/linhas-cruzadas/StepSelectPrompt.tsx","games/linhas-cruzadas/PhasePromptSelection.tsx","games/linhas-cruzadas/api-requests.ts","games/linhas-cruzadas/constants.ts","games/linhas-cruzadas/StepTimedDrawing.tsx","games/linhas-cruzadas/PhaseDrawing.tsx","games/linhas-cruzadas/StepNameDrawing.tsx","games/linhas-cruzadas/PhaseNaming.tsx","games/linhas-cruzadas/Page.tsx","games/linhas-cruzadas/Album.tsx","games/linhas-cruzadas/StepAlbum.tsx","games/linhas-cruzadas/PhasePresentation.tsx","games/linhas-cruzadas/PhaseGameOver.tsx","games/linhas-cruzadas/SessionLinhasCruzadas.tsx"],"sourcesContent":["// Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useLoading, useMock } from '../../hooks';\n// Utils\nimport { shuffle } from '../../utils/helpers';\n// Components\nimport {\n  ButtonContainer,\n  Card,\n  Instruction,\n  Step,\n  Title,\n  Translate,\n  TransparentButton,\n} from '../../components';\n\ntype StepSelectPromptProps = {\n  prompts: PromptCard[];\n  onSubmitPrompt: GenericFunction;\n};\n\nexport function StepSelectPrompt({ prompts, onSubmitPrompt }: StepSelectPromptProps) {\n  const { isLoading } = useLoading();\n\n  const onRandomSelect = () => {\n    onSubmitPrompt({ promptId: shuffle(prompts.map((prompt) => prompt.id))[0] });\n  };\n\n  // DEV: Auto auto-select\n  useMock(onRandomSelect, []);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Seleção de Carta\" en=\"Card Selection\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione uma das cartas abaixo a ser usada no jogo\"\n          en=\"Select one of the cards below to be used in the game\"\n        />\n      </Instruction>\n\n      <div className=\"l-cards\">\n        {prompts.map((prompt) => {\n          return (\n            <TransparentButton\n              key={prompt.id}\n              onClick={() => onSubmitPrompt({ promptId: prompt.id })}\n              disabled={isLoading}\n            >\n              <Card>{prompt.text}</Card>\n            </TransparentButton>\n          );\n        })}\n      </div>\n\n      <ButtonContainer>\n        <Button onClick={onRandomSelect} disabled={isLoading}>\n          <Translate pt=\"Escolha pra mim\" en=\"Select for me\" />\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\nimport { useOnSubmitPromptAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from '../../components';\nimport { StepSelectPrompt } from './StepSelectPrompt';\n\nfunction PhasePromptSelection({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitPrompt = useOnSubmitPromptAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"list\"\n          title={translate('Seleção da Carta', 'Card Selection')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          duration={20}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Neste jogo, você recebe uma carta e a desenha, daí o próximo jogador tentar adivinhar o que\n                  é, daí o próximo jogador desenha a adivinhação, e por ai vai até sua carta voltar pra você\n                  mesmo.\n                  <br />\n                  Selecione a palavra a ser desenhada, talvez seja para você, talvez seja para um outro\n                  jogador.\n                </>\n              }\n              en={\n                <>\n                  In this game, you receive a prompt and will have to draw it, then the next player will\n                  attempt to guess your drawing, then the next player will draw the guess attempt, and so on\n                  until your card comes back to you.\n                  <br />\n                  Select a card to be drawn this round, it might be for you to draw or the next player... who\n                  knows?\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectPrompt prompts={user.prompts} onSubmitPrompt={onSubmitPrompt} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePromptSelection;\n","import { LINHAS_CRUZADAS_API } from '../../adapters';\n\nimport { useAPICall, useLanguage } from '../../hooks';\n\nexport function useOnSubmitPromptAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-prompt',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Carta enviada com sucesso!', 'Card send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to submit the card'\n    ),\n  });\n\n  return (payload: SubmitPromptPayload) => {\n    request({\n      action: 'SUBMIT_PROMPT',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: LINHAS_CRUZADAS_API.submitAction,\n    actionName: 'submit-guess',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Resposta enviado com sucesso!', 'Guess submitted successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua resposta',\n      'Oops, the application failed to submit your guess'\n    ),\n  });\n\n  return (payload: SubmitGuessPayload) => {\n    request({\n      action: 'SUBMIT_GUESS',\n      ...payload,\n    });\n  };\n}\n","export const DRAWING_TIME_IN_SECONDS = 120;\n\nexport const PAGE_DURATION = 7;\n","import { useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Design Resources\nimport { Button } from 'antd';\n// Utils\nimport { AVATARS } from '../../utils/constants';\nimport { DRAWING_TIME_IN_SECONDS } from './constants';\nimport { inNSeconds } from '../../utils/helpers';\n// Components\nimport { ButtonContainer, Card, DrawingCanvas, Icons, Step, TimerBar, Translate } from '../../components';\n\ntype StepTimedDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitDrawing: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepTimedDrawing({ currentPrompt, onSubmitDrawing, players }: StepTimedDrawingProps) {\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(DRAWING_TIME_IN_SECONDS),\n    autoStart: true,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmit();\n    },\n  });\n\n  const onSubmit = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(lines),\n    });\n\n  const timer = minutes * 60 + seconds;\n\n  const author = players[currentPrompt.author];\n\n  return (\n    <Step>\n      <Card size=\"large\" header={author.name} color={AVATARS[author.avatarId].color}>\n        {currentPrompt.content}\n      </Card>\n      <TimerBar steps={90} value={timer} total={DRAWING_TIME_IN_SECONDS} type=\"circle\" />\n      {isTimesUp ? (\n        <Icons.AnimatedLoader style={{ background: 'white', width: '250px', padding: '125px' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} showControls />\n      )}\n      <ButtonContainer>\n        <Button type=\"primary\" onClick={() => onSubmit()} size=\"large\">\n          <Translate pt=\"Enviar desenho\" en=\"Submit drawing\" />\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\nimport { useOnSubmitDrawingAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\nimport { DRAWING_TIME_IN_SECONDS } from './constants';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n  TurnOrder,\n} from '../../components';\nimport { StepTimedDrawing } from './StepTimedDrawing';\n\nfunction PhaseDrawing({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.DRAWING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"drawing\"\n          title={translate('Desenhe', 'Draw')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          buttonText={translate('Um dó, lá, si... vamos ir... já!', 'Ready! Set! Go!')}\n          withoutTimer\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você receberá uma expressão.\n                  <br />\n                  Desenhe-a da melhor maneira possível, você tem {DRAWING_TIME_IN_SECONDS} segundos.\n                </>\n              }\n              en={\n                <>\n                  You will receive an expression.\n                  <br />\n                  Draw it the best way possible, you have {DRAWING_TIME_IN_SECONDS} seconds.\n                </>\n              }\n            />\n\n            <TurnOrder\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepTimedDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitDrawing={onSubmitDrawing}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDrawing;\n","import { useState } from 'react';\n// Design Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLanguage, useMock } from '../../hooks';\n// Components\nimport {\n  AvatarName,\n  ButtonContainer,\n  CanvasSVG,\n  Instruction,\n  Step,\n  Title,\n  Translate,\n} from '../../components';\n\ntype StepNameDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitGuess: GenericFunction;\n  players: GamePlayers;\n  // for mock\n  user: GamePlayer;\n  round: GameRound;\n};\n\nexport function StepNameDrawing({\n  currentPrompt,\n  onSubmitGuess,\n  players,\n  user,\n  round,\n}: StepNameDrawingProps) {\n  const { translate } = useLanguage();\n  const [title, setTitle] = useState<string>('');\n\n  const author = players[currentPrompt.author];\n\n  const onTitleChange = (e: any) => setTitle(e.target.value);\n\n  const onSubmitTitle = () => onSubmitGuess({ guess: title });\n\n  // DEV: Auto write\n  useMock(() => onSubmitGuess({ guess: `${round.current}${user.id}` }), []);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"O que é isso?\" en=\"What is this?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={author} /> desenhou isso, o que é?\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={author} /> draw this, so what is it?\n            </>\n          }\n        />\n      </Instruction>\n\n      <CanvasSVG drawing={currentPrompt.content} className=\"l-drawing\" size={300} />\n\n      <Input\n        onChange={onTitleChange}\n        size=\"large\"\n        placeholder={translate('Escreva seu chute aqui', 'Write your guess here')}\n        className=\"l-drawing-guess-input\"\n        onPressEnter={onSubmitTitle}\n      />\n\n      <ButtonContainer>\n        <Button type=\"primary\" onClick={onSubmitTitle} size=\"large\" disabled={!title}>\n          <Translate pt=\"Enviar\" en=\"Submit name\" />\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\nimport { useOnSubmitGuessAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n  TurnOrder,\n} from '../../components';\nimport { StepNameDrawing } from './StepNameDrawing';\n\nfunction PhaseNaming({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitGuess = useOnSubmitGuessAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.NAMING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"write-idea\"\n          title={translate('O que é isso?', 'What is it?')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate pt=\"Tente adivinhar o que é a obra\" en=\"Try to guess what the artwork is\" />\n\n            <TurnOrder\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepNameDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitGuess={onSubmitGuess}\n          players={players}\n          user={user}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseNaming;\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Utils\nimport { getAnimationClass } from '../../utils/helpers';\n// Componentes\nimport { Avatar, AvatarName, CanvasSVG, Card, Translate } from '../../components';\n\ntype PageProps = {\n  slide: LSlide;\n  players: GamePlayers;\n  albumColor: string;\n  currentPage: number;\n  totalSlides: number;\n};\n\nexport function Page({ slide, players, albumColor, currentPage, totalSlides }: PageProps) {\n  const author = players[slide.author];\n  const animationClass = useMemo(() => getAnimationClass('flipInY'), []);\n\n  return (\n    <div className=\"l-page\" style={{ background: slide.type === 'cover' ? albumColor : 0 }}>\n      <div className=\"l-page__pagination\">\n        <AntAvatar style={{ backgroundColor: albumColor }}>{currentPage + 1}</AntAvatar>\n        <span className=\"l-page__pagination-of\">\n          <Translate pt=\"de\" en=\"of\" />\n        </span>\n        <AntAvatar style={{ backgroundColor: albumColor }}>{totalSlides}</AntAvatar>\n      </div>\n\n      {slide.type === 'cover' && (\n        <div className={clsx('l-page__container', animationClass)} style={{ backgroundColor: albumColor }}>\n          <Avatar id={author.avatarId} size={96} />\n        </div>\n      )}\n\n      {slide.type === 'title' &&\n        (currentPage === 0 ? (\n          <div className={clsx('l-page__container', animationClass)}>\n            <Card>{slide.content}</Card>\n          </div>\n        ) : (\n          <div className={clsx('l-page__container l-page__text', animationClass)}>{slide.content}</div>\n        ))}\n\n      {slide.type === 'drawing' && (\n        <CanvasSVG\n          drawing={slide.content}\n          className={clsx('l-page__container l-artwork', animationClass)}\n          size={350}\n        />\n      )}\n\n      {slide.type !== 'cover' && (\n        <div className=\"l-page__author\">\n          <Translate pt=\"por \" en=\"by \" />\n          <AvatarName player={author} addressUser />\n        </div>\n      )}\n    </div>\n  );\n}\n","// Helpers\nimport { getAvatarColorById } from '../../utils/helpers';\n// Components\nimport { Avatar, Translate } from '../../components';\nimport { Page } from './Page';\n\ntype AlbumProps = {\n  albumEntry: LAlbumEntry;\n  currentPage: number;\n  players: GamePlayers;\n};\n\nexport function Album({ albumEntry, currentPage, players }: AlbumProps) {\n  const albumOwner = players[albumEntry.id];\n  const albumColor = getAvatarColorById(albumOwner.avatarId);\n\n  return (\n    <div className=\"l-album\">\n      <h2 className=\"l-album__owner\" style={{ backgroundColor: albumColor }}>\n        <Avatar id={albumOwner.avatarId} size=\"large\" />{' '}\n        <Translate pt={<>Álbum de {albumOwner.name}</>} en={<>{albumOwner.name}'s Album</>} />\n      </h2>\n\n      <Page\n        slide={albumEntry.slides[currentPage]}\n        players={players}\n        albumColor={albumColor}\n        currentPage={currentPage}\n        totalSlides={albumEntry.slides.length}\n      />\n    </div>\n  );\n}\n","import { Button } from 'antd';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { AdminNextRoundButton, ButtonContainer, Step, Title, Translate } from '../../components';\nimport { inNSeconds } from '../../utils/helpers';\nimport { Album } from './Album';\nimport { PAGE_DURATION } from './constants';\n\ntype StepAlbumProps = {\n  players: GamePlayers;\n  album: LAlbumEntry[];\n};\n\nexport function StepAlbum({ players, album }: StepAlbumProps) {\n  const [areControlsLocked, setAreControlsLocked] = useState(true);\n  const [currentEntry, setCurrentEntry] = useState(0);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [barSize, setBarSize] = useState(1);\n\n  const totalPages = useMemo(() => {\n    return album.reduce((total, albumEntry) => total + albumEntry.slides.length, 0);\n  }, [album]);\n\n  const totalTime = PAGE_DURATION * totalPages;\n\n  const { minutes, seconds, isRunning } = useTimer({\n    expiryTimestamp: inNSeconds(PAGE_DURATION * totalPages),\n    autoStart: true,\n    onExpire: () => setAreControlsLocked(false),\n  });\n\n  const currentAlbumEntry = album[currentEntry];\n  const currentAlbumLastPageIndex = (currentAlbumEntry?.slides?.length || 0) - 1;\n  const isLastAlbum = !Boolean(album[currentEntry + 1]);\n\n  const time = minutes * 60 + seconds;\n\n  // Control Functions\n  const onPrevAlbum = () => {\n    setCurrentEntry(currentEntry - 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  };\n  const onPrevPage = () => setCurrentPage((c) => c - 1);\n  const onNextPage = useCallback(() => {\n    setCurrentPage((c) => c + 1);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n  const onNextAlbum = useCallback(() => {\n    setCurrentEntry((c) => c + 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n\n  useEffect(() => {\n    if (isRunning && time < totalTime && time % PAGE_DURATION === 0) {\n      // If next page exists, go for it, otherwise, next album\n      if (currentPage < currentAlbumLastPageIndex) {\n        onNextPage();\n      } else if (!isLastAlbum) {\n        onNextAlbum();\n      }\n    }\n  }, [time, isRunning, currentAlbumLastPageIndex]); // eslint-disable-line\n\n  return (\n    <Step className=\"l-step-album\">\n      <Title>\n        <Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />\n      </Title>\n      {currentPage < 0 || !currentAlbumEntry ? (\n        <div className=\"a\">?</div>\n      ) : (\n        <Album albumEntry={currentAlbumEntry} currentPage={currentPage} players={players} />\n      )}\n      <div className=\"l-timer-bar\">\n        <span\n          className=\"l-timer-bar__pill\"\n          style={{\n            width: `${Math.abs((100 * barSize) / totalPages)}%`,\n            backgroundColor: 'gray',\n          }}\n        />\n      </div>\n      <ButtonContainer>\n        <Button disabled={areControlsLocked || currentEntry === 0} onClick={onPrevAlbum}>\n          Prev Album\n        </Button>\n        <Button disabled={areControlsLocked || currentPage === 0} onClick={onPrevPage}>\n          Prev Page\n        </Button>\n        <Button\n          disabled={areControlsLocked || currentPage === currentAlbumLastPageIndex}\n          onClick={onNextPage}\n        >\n          Next Page\n        </Button>\n        <Button disabled={areControlsLocked || isLastAlbum} onClick={onNextAlbum}>\n          Next Album\n        </Button>\n      </ButtonContainer>\n      <AdminNextRoundButton />\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useLanguage } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n  TurnOrder,\n} from '../../components';\nimport { StepAlbum } from './StepAlbum';\n\nfunction PhasePresentation({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const [step, setStep] = useState(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PRESENTATION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"photo-album\"\n          title={translate('Álbum de Fotos', 'Album de Fotos')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          unskippable\n          duration={7}\n        >\n          <Instruction>\n            <Translate pt=\"A ordem dos albums será:\" en=\"The albums' order will be:\" />\n            <TurnOrder players={players} order={state.gameOrder} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepAlbum players={players} album={state.album} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhasePresentation;\n","// Components\nimport { GameOverWrapper } from '../../components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from '../../utils/constants';\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from '../../components';\nimport PhasePromptSelection from './PhasePromptSelection';\nimport PhaseDrawing from './PhaseDrawing';\nimport PhaseNaming from './PhaseNaming';\nimport PhasePresentation from './PhasePresentation';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionInstrumentosCodificados({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION:\n        return PhasePromptSelection;\n      case PHASES.LINHAS_CRUZADAS.DRAWING:\n        return PhaseDrawing;\n      case PHASES.LINHAS_CRUZADAS.NAMING:\n        return PhaseNaming;\n      case PHASES.LINHAS_CRUZADAS.PRESENTATION:\n        return PhasePresentation;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.LINHAS_CRUZADAS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionInstrumentosCodificados;\n"],"names":["StepSelectPrompt","prompts","onSubmitPrompt","isLoading","useLoading","onRandomSelect","promptId","shuffle","map","prompt","id","useMock","fullWidth","pt","en","contained","className","onClick","disabled","text","players","state","info","isUserReady","useIsUserReady","translate","useLanguage","user","useUser","useState","step","setStep","request","useAPICall","apiFunction","LINHAS_CRUZADAS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitPromptAPIRequest","phase","allowedPhase","PHASES","conditions","type","title","onClose","currentRound","round","current","duration","DRAWING_TIME_IN_SECONDS","StepTimedDrawing","currentPrompt","onSubmitDrawing","lines","setLines","isTimesUp","setTimesUp","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","onSubmit","minutes","seconds","drawing","JSON","stringify","timer","author","size","header","name","color","AVATARS","avatarId","content","steps","value","total","style","background","width","padding","showControls","useOnSubmitDrawingAPIRequest","buttonText","withoutTimer","order","gameOrder","activePlayerId","reorderByUser","StepNameDrawing","onSubmitGuess","setTitle","onSubmitTitle","guess","player","onChange","e","target","placeholder","onPressEnter","useOnSubmitGuessAPIRequest","Page","slide","albumColor","currentPage","totalSlides","animationClass","useMemo","getAnimationClass","backgroundColor","clsx","addressUser","Album","albumEntry","albumOwner","getAvatarColorById","slides","length","StepAlbum","album","areControlsLocked","setAreControlsLocked","currentEntry","setCurrentEntry","setCurrentPage","barSize","setBarSize","totalPages","reduce","totalTime","isRunning","currentAlbumEntry","currentAlbumLastPageIndex","isLastAlbum","Boolean","time","onNextPage","useCallback","c","s","onNextAlbum","useEffect","Math","abs","unskippable","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhasePromptSelection","PhaseDrawing","PhaseNaming","PhasePresentation","PhaseGameOver","PageError"],"sourceRoot":""}