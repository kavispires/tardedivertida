{"version":3,"file":"static/js/5495.ed598e3d.chunk.js","mappings":"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","sources":["components/debug/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useIsUserReady.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useUser.ts","utils/phases.ts"],"sourcesContent":["import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n};\n\n/**\n * Screen displayed before any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose,\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar();\n  const durationPerRound = [15, 10, 5]?.[currentRound] ?? 5;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n\n      <span className=\"phase-announcement__icon\">{icon}</span>\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef.current?.offsetHeight, screenRef.current?.offsetWidth, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(text: DualLanguageValue, language: Language, volume: number): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Image, Input, notification, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { PUBLIC_URL } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnter = () => {\n    setVolume(0.5);\n    onAddPlayer(null, 0.5);\n  };\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      setVolume(0.5);\n      onAddPlayer(null, 0.5);\n    }\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnter}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  switch (type) {\n    case 'eye-cloud':\n    case 'monster-eye-cloud':\n    case 'phone-cloud':\n    case 'retro-cloud':\n    case 'sheep-cloud':\n    case 'speech-cloud':\n    case 'clover-cloud':\n      return SingleCloud;\n    case 'artsy-clouds':\n    case 'book-clouds':\n    case 'crime-clouds':\n    case 'halloween-clouds':\n    case 'letter-clouds':\n    case 'one-clouds':\n    case 'sky-clouds':\n      return MultiCloud;\n    default:\n      return SingleCloud;\n  }\n}\n\nfunction getCloudFileName(gameCode: string) {\n  return (\n    {\n      A: 'artsy-clouds',\n      C: 'book-clouds',\n      D: 'crime-clouds',\n      E: 'cyber-cloud',\n      G: 'sky-clouds',\n      H: 'crime-clouds',\n      L: 'phone-cloud',\n      M: 'sheep-cloud',\n      N: 'halloween-clouds',\n      O: 'retro-cloud',\n      P: 'speech-cloud',\n      R: 'monster-eye-cloud',\n      S: 'sky-clouds',\n      T: 'eye-cloud',\n      U: 'one-clouds',\n      X: 'letter-clouds',\n      Y: 'clover-cloud',\n    }[gameCode] ?? 'cloud'\n  );\n}\n\ntype CloudBackgroundProps = {\n  gameCode?: string;\n};\n\nexport function CloudBackground({ gameCode = 'Z' }: CloudBackgroundProps) {\n  const cloudType = getCloudFileName(gameCode);\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${cloudType}`)}>\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <AdminMenuDrawer state={{ phase: 'LOBBY', round: { current: 0, total: 0 } }} players={players} />\n      <CloudBackground gameCode={info.gameCode} />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\nimport { GearsIcon } from 'components/icons/GearsIcon';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <GearsIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Instruction } from 'components/text';\nimport { ReactNode } from 'react';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n// Ant Design Resource\nimport { Alert, Button, Checkbox, message, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { blurCard } = useBlurCards();\n\n  const {\n    loading,\n    error,\n    value: data,\n  } = useAsync(async () => {\n    const response = await fetch(`${process.env.REACT_APP_TDI_DATA_URL}/credo.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur all selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n  onClick: GenericFunction;\n};\n\nexport function PlayersStatusBar({ players, onClick }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <button onClick={onClick} className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Badge dot color={player.ready ? 'green' : 'gray'}>\n                <Avatar\n                  id={player.avatarId}\n                  alt={player.name}\n                  size=\"small\"\n                  className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                />\n              </Badge>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </button>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from '../players/PlayersStatusBar';\nimport { useNavigate } from 'react-router-dom';\nimport { useGlobalState } from 'hooks/useGlobalState';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <PlayersStatusBar players={players} onClick={toggleDrawer} />\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  /**\n   * The id of the game\n   */\n  gameId: GameId;\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n  /**\n   * The class to replace the background gradient\n   */\n  backgroundClassName?: string;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent, backgroundClassName }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? GAME_LIST[gameId[0]] : {});\n  }, [gameId]);\n\n  // Colorize background\n  useEffect(() => {\n    if (backgroundClassName) {\n      const appElement = document.getElementById('app');\n      if (appElement) {\n        appElement.classList.add(backgroundClassName);\n      }\n    }\n    return () => {\n      const appElement = document.getElementById('app');\n      appElement?.classList.remove(backgroundClassName ?? '');\n    };\n  }, [backgroundClassName]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): Players | {} {\n  const docPath = `${gameName}/${gameId}/session/players`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing players...');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `${gameName}/${gameId}/session/state`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing state...');\n  }\n\n  return snapshot?.data() as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  fullWidth?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function Step({ children, fullWidth = false, className }: StepProps) {\n  return <div className={clsx('step', fullWidth && 'step--full-width', className)}>{children}</div>;\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) console.warn('SetSwitcher is being used without `players`, please add it.');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n// Check if user is ready\nexport function useIsUserReady(players: Players, state?: GameState) {\n  const [userId] = useGlobalState('userId');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && players?.[userId].ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && players?.[userId]?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, players, state?.updatedAt]);\n\n  return isReady;\n}\n","import { useEffect } from 'react';\nimport { isDevEnv } from 'utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = []) {\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  useEffect(() => {\n    if (isDevEnv && !isAdmin) {\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: Players): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    if (userId) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId]);\n\n  return user;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES: ObjectDictionary = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DESENHO_RAPIDAO: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    HINT_GIVING: 'HINT_GIVING',\n    HINT_RECEIVING: 'HINT_RECEIVING',\n    GUESS_THE_CODE: 'GUESS_THE_CODE',\n    DISCUSSION: 'DISCUSSION',\n    SOLUTION: 'SOLUTION',\n  },\n  PALHETA_DE_CORES: {\n    '': '',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TE_CONHECO: {\n    WRITE: 'WRITE',\n    TRUTHS_AND_LIES: 'TRUTHS_AND_LIES',\n    RESULT: 'RESULT',\n    MATCH_PLAYERS: 'MATCH_PLAYERS',\n    REVEAL: 'REVEAL',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n};\n"],"names":["DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","PhaseAnnouncement","buttonText","icon","title","currentRound","onClose","className","duration","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","clsx","getAnimationClass","type","onClick","pt","en","custom","onExpire","disabled","PhaseContainer","info","phase","allowedPhase","fullScreen","white","translate","useLanguage","screenRef","useRef","useGlobalState","setScreenSize","useEffect","current","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","speak","text","language","volume","utterance","SpeechSynthesisUtterance","lang","window","speechSynthesis","getRandomWelcomeMessage","name","options","getRandomItem","randomName","mockPlayerName","undefined","Join","players","meta","useLoading","isLoading","setLoader","gameId","setUserId","setUsername","setUserAvatarId","setVolume","useState","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","Object","values","reduce","acc","avatarId","newAvailableAvatars","includes","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerName","playerAvatarId","response","data","username","notification","message","JSON","stringify","placement","console","error","alt","src","PUBLIC_URL","fallback","Boolean","CaretLeftOutlined","viewBox","href","avatars","AVATARS","CaretRightOutlined","isComplete","onChange","e","target","value","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","key","loading","ghost","size","Waiting","gameMeta","userAvatarId","onLockGameAndStart","ADMIN_API","isLocked","numPlayers","keys","direction","min","danger","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","style","backgroundImage","CloudBackground","gameCode","cloudType","A","C","D","E","G","H","L","M","N","O","P","R","S","T","U","X","Y","getCloudFileName","CloudTypeComponent","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","map","player","animate","state","round","total","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","user","useUser","errorMessage","onBeReady","useAPICall","apiFunction","actionName","successMessage","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClass","wrap","CheckCircleFilled","SmileFilled","MehFilled","RobotFilled","PhaseSetup","GearsIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","CollapsibleRule","contained","header","PopoverRule","content","label","showLabel","position","ReadOutlined","buttonProps","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rules","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","open","onCancel","footer","SectionMeta","groupScore","backgroundColor","color","SectionRankedPlayers","rankedPlayers","useMemo","count","score","shape","BlurOptions","blurCard","useBlurCards","useAsync","fetch","process","json","result","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","checked","selectedGroups","forEach","push","flat","SectionSettings","blurEnabled","setBlurEnabled","isAdmin","isAdminEnabled","setIsAdminEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","checkedChildren","unCheckedChildren","s","PlayersStatusBar","sortPlayers","dot","ready","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","closable","preview","FireOutlined","Session","gameCollection","getActiveComponent","backgroundClassName","docPath","useDocument","doc","firestore","snapshotListenOptions","includeMetadataChanges","snapshot","useGamePlayers","useGameState","setInfo","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","appElement","document","getElementById","classList","add","remove","ActiveComponent","Step","fullWidth","getWaitingRoomInstruction","kind","StepSwitcher","step","conditions","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","warn","instruction","blurredCards","setBlurredCards","getLocalStorage","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","isReady","setIsReady","updatedAt","whatToDo","useStep","startingStep","setStep","goToPreviousStep","setUser","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","REVEAL","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","DESENHO_RAPIDAO","PROMPT_SELECTION","DRAWING","GUESSING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","HINT_GIVING","HINT_RECEIVING","GUESS_THE_CODE","DISCUSSION","SOLUTION","PALHETA_DE_CORES","LINHAS_CRUZADAS","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","ONDA_TELEPATICA","DIAL_CLUE","GUESS","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","RESULTS","CRUZA_PALAVRAS","CLUE_WRITING","TE_CONHECO","WRITE","TRUTHS_AND_LIES","MATCH_PLAYERS","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING"],"sourceRoot":""}