{"version":3,"file":"static/js/495.1a7e27b1.chunk.js","mappings":"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","sources":["games/arte-ruim/StepDraw.tsx","games/arte-ruim/PhaseDraw.tsx","games/arte-ruim/api-requests.ts","games/arte-ruim/EvaluationAllDrawings.tsx","games/arte-ruim/Card.tsx","games/arte-ruim/EvaluationAllCards.tsx","games/arte-ruim/TextBlobs.tsx","games/arte-ruim/StepEvaluation.tsx","games/arte-ruim/PhaseEvaluation.tsx","games/arte-ruim/GalleryWindowCredits.tsx","games/arte-ruim/GalleryWindowGuesses.tsx","games/arte-ruim/GalleryWindowControls.tsx","games/arte-ruim/GalleryWindowResult.tsx","games/arte-ruim/GalleryWindow.tsx","games/arte-ruim/PhaseGallery.tsx","games/arte-ruim/DrawingGrade.tsx","games/arte-ruim/PhaseGameOver.tsx","games/arte-ruim/SessionArteRuim.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { useLanguage } from '../../hooks';\nimport { inNSeconds } from '../../utils/helpers';\n// Components\nimport { Card, Step } from '../../components';\nimport { DrawingCanvas } from '../../components/canvas';\nimport { Panic } from '../../components/icons';\n\ntype StepDrawProps = {\n  secretCard: ArteRuimCard | PlainObject;\n  onSubmitDrawing: GenericFunction;\n};\n\nexport function StepDraw({ secretCard, onSubmitDrawing }: StepDrawProps) {\n  const { translate } = useLanguage();\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(11),\n    autoStart: true,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmitDrawing({\n        drawing: JSON.stringify(lines),\n        cardId: secretCard.id,\n      });\n    },\n  });\n\n  return (\n    <Step>\n      <Card\n        size=\"large\"\n        header={translate('Desenhe', 'Draw')}\n        footer={Array(secretCard?.level).fill('•').join('')}\n        className=\"a-draw-step__card\"\n        color=\"yellow\"\n      >\n        {secretCard?.text}\n        <span className=\"a-draw-step__timer\">{seconds > 0 ? seconds - 1 : 0}</span>\n      </Card>\n      {isTimesUp ? (\n        <Panic style={{ background: 'white', width: '500px', padding: '2em' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} />\n      )}\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport useSound from 'use-sound';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage } from '../../hooks';\nimport { useOnSubmitDrawingAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from '../../components';\nimport { StepDraw } from './StepDraw';\n\n// Sound\nconst arteRuimTimer = require('../../sounds/arte-ruim-timer.mp3');\n\nfunction PhaseDraw({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const [step, setStep] = useState(0);\n  const [secretCard, setSecretCard] = useState({});\n  const [play] = useSound(arteRuimTimer, { volume: 0.4 });\n\n  useEffect(() => {\n    setSecretCard(players[user?.id]?.currentCard ?? {});\n  }, [players, user?.id]);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  const onStartDrawing = () => {\n    play();\n    setStep(2);\n  };\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.DRAW}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam seus desenhos!',\n          'Please wait while other players finish their artwork!'\n        )}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={() => setStep(1)} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt={`Essa rodada usará cartas de nível ${state?.level || '?'}`}\n              en={`This round uses cards of level ${state?.level || '?'}`}\n            />\n          </Instruction>\n        </RoundAnnouncement>\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"painting\"\n          title={translate('Desenhe!', 'Draw!')}\n          buttonText={translate('Um dó, lá, si... vamos ir... já!', 'Ready! Set! Go!')}\n          onClose={onStartDrawing}\n          currentRound={state?.round?.current}\n          withoutTimer\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você terá 10 segundos para ler a sua carta e desenhá-la.\n                  <br />\n                  Aperte o botão quando estiver pronto!\n                  <br />\n                  Não vale usar números e letras.\n                  <br />\n                  Fique esperto porque o tempo começa assim que você apertar.\n                </>\n              }\n              en={\n                <>\n                  You'll have 10 seconds to read and draw your card.\n                  <br />\n                  Press the button when you're ready!\n                  <br />\n                  You can NOT use numbers or letters.\n                  <br />\n                  Be aware of the timer! It starts as soon as you press the button.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n        {/* Step 2 */}\n        <StepDraw secretCard={secretCard} onSubmitDrawing={onSubmitDrawing} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDraw;\n","import { ARTE_RUIM_API } from '../../adapters';\nimport { useAPICall, useLanguage } from '../../hooks';\n\nexport function useOnSubmitDrawingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotingAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: ARTE_RUIM_API.submitAction,\n    actionName: 'submit-voting',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate(\n      'Avaliação enviada! Agora aguarde os outros jogadores',\n      'Evaluation sent successfully! Wait for the other players'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n      'Oops, the application failed to send your evaluation'\n    ),\n  });\n\n  return (payload: SubmitVotingPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Utils\nimport { getEntryId } from '../../utils/helpers';\n// Components\nimport { CanvasSVG, Ribbon } from '../../components';\n\ntype EvaluationAllDrawingsProps = {\n  drawings: ArteRuimDrawing[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  canvasSize: number;\n  players: GamePlayers;\n};\n\nexport function EvaluationAllDrawings({\n  drawings,\n  activeItem,\n  onActivateItem,\n  votes,\n  canvasSize,\n  players,\n}: EvaluationAllDrawingsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = getEntryId(['drawing', drawingEntry.id]);\n        const isActive = activeItem === canvasEntryId;\n        const vote = votes[canvasEntryId];\n        return (\n          <li\n            key={canvasEntryId}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon label={vote.charAt(vote.length - 1)} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              size={canvasSize}\n            />\n            <span className=\"a-evaluation-all-drawings__artist\">{players[drawingEntry.playerId].name}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\nimport { getColorFromLetter } from '../../utils/helpers';\n// Components\nimport { Card } from '../../components';\n\ntype ArteRuimCardProps = {\n  text?: any;\n  level: number;\n  header?: string;\n};\n\nexport const ArteRuimCard = ({ text, level, header = 'X' }: ArteRuimCardProps) => {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(level).fill('•').join('')}\n    >\n      {text ?? <WarningOutlined />}\n    </Card>\n  );\n};\n","import clsx from 'clsx';\n// Utils\nimport { LETTERS } from '../../utils/constants';\nimport { getEntryId } from '../../utils/helpers';\n// Components\nimport { ArteRuimCard as Card } from './Card';\n\ntype EvaluationAllCardsProps = {\n  cards: ArteRuimCard[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function EvaluationAllCards({ cards, activeItem, onActivateItem, votes }: EvaluationAllCardsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['card', cardEntry.id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card text={cardEntry.text} level={cardEntry.level} header={letter} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { Instruction, Translate } from '../../components';\n\nexport const EvaluationRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n          par.\n          <br />\n          Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você selecionou.\n          <br />\n          Quando encontrar todos os pares, envie sua avaliação!\n        </>\n      }\n      en={\n        <>\n          Find the pairs of artwork and card by clicking on a card or artwork then on its match.\n          <br />\n          A ribbon will show up on the artwork with the color and letter of the matching card.\n          <br />\n          When you're done, click the button to send your evaluation!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const GalleryRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Agora, mostraremos cada arte, o que os jogadores votaram e a resposta final.\n          <br />\n          Se você votou na expressão correta, você ganha 2 pontos.\n          <br />\n          Quando for a sua arte, você ganha 1 ponto para cada pessoa que votou corretamente.\n        </>\n      }\n      en={\n        <>\n          Now we show each art, what players voted, and the final answer.\n          <br />\n          You get 2 points if you selected the right card.\n          <br />\n          When players selected the correct card for your artwork, you get 1 point for each match!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const ScoringRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você ganha 2 pontos para cada ligação correta entre arte e expressão.\n          <br />\n          Para cada ligação correta que sua arte ganha, você recebe 1 ponto.\n        </>\n      }\n      en={\n        <>\n          You get 2 points if you matched the right card with artwork.\n          <br />\n          For you own artwork, you get 1 point for each correct match the other players done.\n        </>\n      }\n    />\n  </Instruction>\n);\n","import { useCallback, useEffect } from 'react';\n// Design Resources\nimport { Button } from 'antd';\nimport { CloudUploadOutlined, ThunderboltOutlined } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState, useLanguage, useUser, useLoading, useVotingMatch, useCardWidth } from '../../hooks';\n// Utils\nimport { LETTERS, SEPARATOR } from '../../utils/constants';\nimport { getEntryId, shuffle } from '../../utils/helpers';\n// Components\nimport {\n  ButtonContainer,\n  CanvasResizer,\n  Step,\n  Title,\n  ReadyPlayersBar,\n  Translate,\n  PopoverRule,\n} from '../../components';\nimport { EvaluationAllDrawings } from './EvaluationAllDrawings';\nimport { EvaluationAllCards } from './EvaluationAllCards';\nimport { EvaluationRules } from './TextBlobs';\n\nfunction prepareVotes(votes: PlainObject) {\n  return Object.entries(votes).reduce((acc: PlainObject, [drawingEntryId, cardEntryId]) => {\n    const [, drawingId] = drawingEntryId.split(SEPARATOR);\n    const [, cardId] = cardEntryId.split(SEPARATOR);\n    acc[drawingId] = cardId;\n    return acc;\n  }, {});\n}\n\ntype StepEvaluationProps = {\n  drawings: ArteRuimDrawing[];\n  cards: ArteRuimCard[];\n  players: GamePlayers;\n  onSubmitVoting: GenericFunction;\n};\n\nexport function StepEvaluation({ drawings, cards, players, onSubmitVoting }: StepEvaluationProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n  const { votes, setVotes, activeItem, activateItem, resetVoting } = useVotingMatch(\n    'drawing',\n    true,\n    drawings.length || 2\n  );\n\n  const onGuessForMe = useCallback(() => {\n    const usedDrawings = Object.keys(votes);\n    const usedCards = Object.values(votes);\n    const drawingsKeys = drawings\n      .map((e: ArteRuimDrawing) => getEntryId(['drawing', e.id]))\n      .filter((key: string) => !usedDrawings.includes(key));\n    const cardsKeys = shuffle(\n      cards\n        .map((e: ArteRuimCard, index: number) => getEntryId(['card', e.id, LETTERS[index]]))\n        .filter((key: string) => !usedCards.includes(key))\n    );\n    const newVotes = { ...votes };\n    drawingsKeys.forEach((drawingKey: string, index: number) => {\n      if (!newVotes[drawingKey]) {\n        newVotes[drawingKey] = cardsKeys[index];\n      }\n    });\n    setVotes(newVotes);\n  }, [cards, drawings, votes, setVotes]);\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  const selectOwnDrawing = useCallback(() => {\n    const playersDrawing = (drawings ?? []).find((drawing: ArteRuimDrawing) => drawing.playerId === user.id);\n    if (playersDrawing) {\n      const drawingKey = getEntryId(['drawing', playersDrawing.id]);\n      const cardIndex = (cards ?? []).findIndex((card: ArteRuimCard) => card.playerId === user.id);\n      const cardKey = getEntryId(['card', playersDrawing.id, LETTERS[cardIndex]]);\n      const vote = { [drawingKey]: cardKey };\n      return vote;\n    }\n    return {};\n  }, [user, drawings, cards]);\n\n  // Auto-select the players own drawing and word\n  useEffect(() => {\n    const selection = selectOwnDrawing();\n    if (selection) {\n      setVotes((s: any) => ({ ...s, ...selection }));\n    }\n  }, [selectOwnDrawing, setVotes]);\n\n  return (\n    <Step className=\"a-evaluation-step\">\n      <PopoverRule content={<EvaluationRules />} />\n      <CanvasResizer />\n      <Title>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </Title>\n\n      <ButtonContainer>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={() => resetVoting(selectOwnDrawing())}\n          disabled={isLoading}\n        >\n          <Translate pt=\"Limpar seleções\" en=\"Clear selections\" />\n        </Button>\n        <Button\n          type=\"default\"\n          icon={<ThunderboltOutlined />}\n          onClick={onGuessForMe}\n          disabled={isLoading || Object.values(votes).length === drawings.length}\n        >\n          <Translate pt=\"Chutar restantes\" en=\"Guess for me\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => onSubmitVoting({ votes: prepareVotes(votes) })}\n          disabled={isLoading || Object.values(votes).length < drawings.length}\n          icon={<CloudUploadOutlined />}\n        >\n          <Translate pt=\"Enviar sua avaliação\" en=\"Send evaluation\" />\n        </Button>\n      </ButtonContainer>\n\n      <EvaluationAllDrawings\n        drawings={drawings ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        canvasSize={canvasSize}\n        players={players}\n      />\n\n      <EvaluationAllCards\n        cards={cards ?? []}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n\n      <ReadyPlayersBar\n        players={players}\n        readyText={translate('Já acabei, anda logo!', \"I'm done, hurry up!\")}\n        readyTextPlural={translate('Já acabamos, anda logo!', \"We're done, hurry up!\")}\n      />\n    </Step>\n  );\n}\n","import { useState } from 'react';\n// Hooks\nimport { useIsUserReady, useLanguage } from '../../hooks';\nimport { useOnSubmitVotingAPIRequest } from './api-requests';\n// Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { PhaseContainer, StepSwitcher, PhaseAnnouncement } from '../../components';\nimport { StepEvaluation } from './StepEvaluation';\nimport { EvaluationRules } from './TextBlobs';\n\nfunction EvaluationPhase({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const isUserReady = useIsUserReady(players, state);\n  const [step, setStep] = useState(0);\n  const onSubmitVoting = useOnSubmitVotingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.EVALUATION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstruction={translate(\n          'Vamos aguardar enquanto os outros jogadores terminam de avaliar!',\n          'Please wait while other players finish their evaluations!'\n        )}\n      >\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          type=\"evaluate\"\n          title={translate('Adivinhação', 'Match the Pairs')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <EvaluationRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepEvaluation\n          drawings={state.drawings}\n          cards={state.cards}\n          players={players}\n          onSubmitVoting={onSubmitVoting}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","// Components\nimport { AvatarEntry, Translate } from '../../components';\n\ntype GalleryWindowCreditsProps = {\n  artistName: string;\n  artistAvatarId: string;\n};\n\nexport function GalleryWindowCredits({ artistName, artistAvatarId }: GalleryWindowCreditsProps) {\n  return (\n    <div className=\"a-gallery-window__credits\">\n      <div className=\"a-gallery-window__label\">\n        <Translate pt=\"Artista\" en=\"Artist\" />\n      </div>\n      <span className=\"a-gallery-window__artist-name\">\n        <AvatarEntry id={artistAvatarId} name={artistName} />\n      </span>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from '../../utils/helpers';\n// Components\nimport { Avatar, Translate } from '../../components';\n\ntype GalleryWindowGuessesProps = {\n  playersSay: PlayersSay;\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  windowCardId: string;\n  artistColor: string;\n};\n\nexport function GalleryWindowGuesses({\n  playersSay,\n  players,\n  cards,\n  windowCardId,\n  artistColor,\n}: GalleryWindowGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        card: cards.find((i) => i.id === cardId),\n        playersIds,\n        count: playersIds.length,\n        isCorrect: windowCardId === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc']\n  );\n\n  return (\n    <div className=\"a-gallery-window__guesses\">\n      <div className=\"a-gallery-window__label\">\n        <Translate pt=\"Participantes votaram\" en=\"Players voted\" />\n      </div>\n      {entries.map((entry, index) => {\n        return (\n          <div key={`guess-${entry.cardId}-${index}`} className=\"a-gallery-window__guess\">\n            <div\n              className=\"a-gallery-window__speech-bubble\"\n              style={entry.isCorrect ? { backgroundColor: artistColor, color: 'white' } : {}}\n            >\n              {entry.isCorrect ? (\n                <CrownFilled className=\"a-gallery-window__speech-bubble-icon\" style={{ color: 'white' }} />\n              ) : (\n                <MessageFilled className=\"a-gallery-window__speech-bubble-icon\" />\n              )}\n              {entry.card?.text}\n            </div>\n            <div className=\"a-gallery-window__players\">\n              <AntAvatar.Group>\n                {entry.playersIds.map((playerId) => (\n                  <Avatar\n                    id={players[playerId].avatarId}\n                    key={`guess-avatar-${players[playerId].avatarId}`}\n                  />\n                ))}\n              </AntAvatar.Group>\n              <span className=\"a-gallery-window__players-names\">\n                {getPlayersFromIds(entry.playersIds, players, true).join(', ')}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Design Resources\nimport { Button, Space } from 'antd';\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\n// Utils\nimport { inNSeconds } from '../../utils/helpers';\n// Components\nimport { Translate } from '../../components';\n\nconst WINDOW_DURATION = 10;\n\ntype GalleryWindowControlsProps = {\n  galleryLength: number;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  disableControls: boolean;\n  barColor: string;\n};\n\nexport function GalleryWindowControls({\n  galleryLength,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  disableControls,\n  barColor,\n}: GalleryWindowControlsProps) {\n  const { minutes, seconds, isRunning, pause, resume } = useTimer({\n    expiryTimestamp: inNSeconds(WINDOW_DURATION * galleryLength),\n    autoStart: true,\n    onExpire: () => setStep(2),\n  });\n\n  const time = minutes * 60 + seconds;\n\n  // Automatically go to the next window every 10 seconds\n  useEffect(() => {\n    if (time < WINDOW_DURATION * galleryLength && time > 0 && time % WINDOW_DURATION === 0) {\n      setActiveIndex((s: number) => Math.min(s + 1, galleryLength - 1));\n    }\n  }, [time, setActiveIndex, galleryLength]);\n\n  const previousStep = () => {\n    setActiveIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const nextStep = () => {\n    setActiveIndex((s: number) => Math.min(s + 1, galleryLength - 1));\n  };\n\n  return (\n    <div className=\"a-gallery-window__controls\">\n      <div className=\"a-gallery-window__timer-bar\">\n        <span\n          className=\"a-gallery-window__timer-bar-pill\"\n          style={{\n            width: `${Math.abs((WINDOW_DURATION * time) / galleryLength - 100)}%`,\n            backgroundColor: barColor ?? 'gray',\n          }}\n        ></span>\n      </div>\n\n      {!disableControls && (\n        <Space>\n          <Button\n            size=\"large\"\n            icon={<StepBackwardOutlined />}\n            onClick={previousStep}\n            disabled={disableControls || activeIndex === 0}\n          >\n            <Translate pt=\"Desenho Anterior\" en=\"Previous Art\" />\n          </Button>\n          <Button\n            size=\"large\"\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n          />\n          <Button\n            size=\"large\"\n            onClick={nextStep}\n            disabled={disableControls || activeIndex === galleryLength - 1}\n          >\n            <Translate pt=\"Próximo Desenho\" en=\"Next Art\" /> <StepForwardOutlined />\n          </Button>\n          <Button\n            size=\"large\"\n            onClick={() => setStep(2)}\n            icon={<TrophyOutlined />}\n            disabled={disableControls}\n          >\n            <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n          </Button>\n        </Space>\n      )}\n    </div>\n  );\n}\n","// Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { CrownFilled, DeleteFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from '../../utils/helpers';\n// Components\nimport { Avatar, StarPoints, Translate } from '../../components';\n\ntype GalleryWindowResultProps = {\n  playerArtist: any;\n  correctAnswerId: any;\n  correctAnswerText: any;\n  playersPoints: any;\n  playersSay: PlayersSay;\n  players: Players;\n};\n\nexport function GalleryWindowResult({\n  playerArtist,\n  correctAnswerId,\n  correctAnswerText,\n  playersPoints,\n  playersSay,\n  players,\n}: GalleryWindowResultProps) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswerId] ?? {});\n\n  return (\n    <div className=\"a-gallery-window__result\">\n      <div className=\"a-gallery-window__label\">\n        <Translate pt=\"E o título correto da obra é\" en=\"And the masterpiece title is\" />\n      </div>\n      <div className=\"a-gallery-window__speech-bubble\">\n        <CrownFilled className=\"a-gallery-window__speech-bubble-icon\" />\n        {correctAnswerText}\n      </div>\n      {correctGuesses.length ? (\n        <>\n          <div className=\"a-gallery-window__players\">\n            <AntAvatar.Group>\n              {correctGuesses.map((playerId) => {\n                return <Avatar key={`correct-guess-avatar-${playerId}`} id={players[playerId].avatarId} />;\n              })}\n            </AntAvatar.Group>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${playerArtist.id}`} />\n            <span className=\"a-gallery-window__players-names\">\n              {getPlayersFromIds(correctGuesses, players, true).join(', ')}\n            </span>\n          </div>\n          <div className=\"a-gallery-window__artist-points\">\n            <Avatar id={playerArtist.avatarId} />{' '}\n            <StarPoints\n              quantity={playersPoints?.[playerArtist.id]}\n              keyPrefix={`artist-points-${playerArtist.id}`}\n            />{' '}\n            <span className=\"a-gallery-window__players-names\">{playerArtist.name}</span>\n          </div>\n        </>\n      ) : (\n        <Typography.Text className=\"a-gallery-window__no-wins\">\n          <DeleteFilled />{' '}\n          <Translate\n            pt=\"Nossa, ninguém acertou. Esse desenho deve ter sido muito ruim.\"\n            en=\"Wow, nobody got it. It must have been a very crappy drawing. Shame...\"\n          />\n        </Typography.Text>\n      )}\n    </div>\n  );\n}\n","// Hooks\nimport { useCardWidth } from '../../hooks';\n// Constants\nimport { AVATARS } from '../../utils/constants';\n// Components\nimport { CanvasSVG } from '../../components/canvas';\nimport { GalleryWindowCredits } from './GalleryWindowCredits';\nimport { GalleryWindowGuesses } from './GalleryWindowGuesses';\nimport { GalleryWindowControls } from './GalleryWindowControls';\nimport { GalleryWindowResult } from './GalleryWindowResult';\n\ntype GalleryWindowProps = {\n  window: ArteRuimWindow;\n  galleryLength: number;\n  players: GamePlayers;\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  cards: ArteRuimCard[];\n  disableControls: boolean;\n};\n\nexport function GalleryWindow({\n  window,\n  galleryLength,\n  players,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  cards,\n  disableControls,\n}: GalleryWindowProps) {\n  const canvasWidth = useCardWidth(2, 16, 200, 500);\n\n  const { drawing, artistId, id, text, playersPoints, playersSay } = window;\n\n  const playerArtist = players[artistId];\n  const currentColor = AVATARS[playerArtist.avatarId].color;\n\n  return (\n    <div className=\"a-gallery-window\">\n      <div className=\"a-gallery-window__drawing-container\">\n        <CanvasSVG drawing={drawing} size={canvasWidth} className=\"a-gallery-window__drawing\" />\n      </div>\n\n      <GalleryWindowCredits artistName={playerArtist.name} artistAvatarId={playerArtist.avatarId} />\n\n      <GalleryWindowGuesses\n        players={players}\n        playersSay={playersSay}\n        cards={cards}\n        windowCardId={window.id}\n        artistColor={currentColor}\n      />\n\n      <GalleryWindowResult\n        playerArtist={playerArtist}\n        correctAnswerId={id}\n        correctAnswerText={text}\n        playersPoints={playersPoints}\n        playersSay={playersSay}\n        players={players}\n      />\n\n      <GalleryWindowControls\n        galleryLength={galleryLength}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={disableControls}\n        barColor={currentColor}\n      />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// State & Hooks\nimport { useLanguage } from '../../hooks';\n// Resources and Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  AdminNextRoundButton,\n  PhaseContainer,\n  RankingBoard,\n  StepSwitcher,\n  Step,\n  Title,\n  PhaseAnnouncement,\n  Translate,\n  RoundsLeftInstruction,\n  PopoverRule,\n} from '../../components';\nimport { GalleryWindow } from './GalleryWindow';\nimport { GalleryRules, ScoringRules } from './TextBlobs';\n\nfunction PhaseGallery({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [step, setStep] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  // Changes isFirstGalleryRunThrough property which disables controls, after the first gallery run through\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && step > 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [step, isFirstGalleryRunThrough]);\n\n  const isGameOver = Object.values(players).some((player) => player.score > 50);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.GALLERY}\n      className=\"a-gallery-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          type=\"picture\"\n          title={translate('Galeria de Arte', 'Art Gallery')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          unskippable\n        >\n          <GalleryRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <Step className=\"a-gallery-phase__windows\">\n          <Title>\n            <Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />\n          </Title>\n\n          <PopoverRule content={<ScoringRules />} />\n\n          {state?.gallery && (\n            <GalleryWindow\n              window={state.gallery[activeIndex]}\n              galleryLength={state.gallery.length}\n              cards={state.cards}\n              players={players}\n              activeIndex={activeIndex}\n              setActiveIndex={setActiveIndex}\n              setStep={setStep}\n              disableControls={isFirstGalleryRunThrough}\n            />\n          )}\n        </Step>\n\n        {/* Step 2 */}\n        <Step>\n          <Title>Ranking</Title>\n          <RankingBoard players={players} ranking={state.ranking} />\n\n          <PopoverRule content={<ScoringRules />} />\n\n          {!isGameOver && <RoundsLeftInstruction round={state?.round} />}\n\n          <Button\n            size=\"large\"\n            onClick={() => {\n              setStep(1);\n              setActiveIndex(0);\n            }}\n            icon={<PictureOutlined />}\n          >\n            <Translate pt=\"Ver Galeria De Novo\" en=\"See Gallery Again\" />\n          </Button>\n\n          <AdminNextRoundButton round={state.round} lastRound={state?.lastRound} />\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGallery;\n","import clsx from 'clsx';\n// Design Resources\nimport { Avatar, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from '../../hooks';\n\nconst GRADES = ['F', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\ntype DrawingGradeProps = {\n  value: number;\n};\n\nexport const DrawingGrade = ({ value }: DrawingGradeProps) => {\n  const { translate } = useLanguage();\n  const grade = GRADES[Math.floor(value / 0.084)];\n\n  const baseClass = 'a-drawing-grade';\n\n  return (\n    <Tooltip\n      title={translate(\n        `Nota baseada em quantos acertos o desenho teve: ${value * 100}%`,\n        `Grade based on the number of correct guesses the artwork got: ${value * 100}%`\n      )}\n    >\n      <Avatar className={clsx(baseClass, `${baseClass}--${grade[0]}`)}>{grade}</Avatar>\n    </Tooltip>\n  );\n};\n","// Components\nimport { CanvasSVG, GameOverWrapper, Translate } from '../../components';\nimport { DrawingGrade } from './DrawingGrade';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\">\n      <ul className=\"a-game-over__gallery\">\n        {state.drawings.map((entry: ArteRuimDrawing) => {\n          return (\n            <li className=\"a-game-over__gallery-item\" key={entry.drawing} style={{ width: '200px' }}>\n              <CanvasSVG drawing={entry.drawing} size={200} className=\"a-game-over__gallery-canvas\" />\n              <span className=\"a-game-over__credits\">\n                \"{entry.text}\" <Translate pt=\"por\" en=\"by\" /> {players[entry.playerId].name}\n              </span>\n              <DrawingGrade value={entry.successRate ?? 0} />\n            </li>\n          );\n        })}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from '../../utils/constants';\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from '../../components';\nimport PhaseDraw from './PhaseDraw';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseGallery from './PhaseGallery';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionArteRuim({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.ARTE_RUIM.DRAW:\n        return PhaseDraw;\n      case PHASES.ARTE_RUIM.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.ARTE_RUIM.GALLERY:\n        return PhaseGallery;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.ARTE_RUIM}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionArteRuim;\n"],"names":["StepDraw","secretCard","onSubmitDrawing","translate","useLanguage","useState","lines","setLines","isTimesUp","setTimesUp","seconds","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","drawing","JSON","stringify","cardId","id","size","header","footer","Array","level","fill","join","className","color","text","Panic","style","background","width","padding","arteRuimTimer","require","players","state","info","isUserReady","useIsUserReady","user","useUser","step","setStep","setSecretCard","useSound","volume","play","useEffect","currentCard","request","useAPICall","apiFunction","ARTE_RUIM_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDrawingAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstruction","round","onPressButton","buttonText","time","contained","pt","en","type","title","onClose","currentRound","current","withoutTimer","EvaluationAllDrawings","drawings","activeItem","onActivateItem","votes","canvasSize","liButtonBaseClass","map","drawingEntry","canvasEntryId","getEntryId","isActive","vote","clsx","onClick","label","charAt","length","playerId","name","ArteRuimCard","getColorFromLetter","WarningOutlined","EvaluationAllCards","cards","cardEntry","index","letter","LETTERS","cardEntryId","isUsed","Object","values","includes","role","EvaluationRules","GalleryRules","ScoringRules","prepareVotes","entries","reduce","acc","drawingEntryId","split","SEPARATOR","drawingId","StepEvaluation","onSubmitVoting","isLoading","useLoading","canvasWidth","useCardWidth","Math","min","keys","useGlobalState","setCanvasSize","useVotingMatch","setVotes","activateItem","resetVoting","onGuessForMe","useCallback","usedDrawings","usedCards","drawingsKeys","e","filter","key","cardsKeys","shuffle","newVotes","forEach","drawingKey","floor","selectOwnDrawing","playersDrawing","find","cardIndex","findIndex","card","cardKey","selection","s","content","icon","ThunderboltOutlined","disabled","CloudUploadOutlined","readyText","readyTextPlural","useOnSubmitVotingAPIRequest","GalleryWindowCredits","artistName","artistAvatarId","GalleryWindowGuesses","playersSay","windowCardId","artistColor","orderBy","playersIds","i","count","isCorrect","entry","backgroundColor","CrownFilled","MessageFilled","avatarId","getPlayersFromIds","GalleryWindowControls","galleryLength","activeIndex","setActiveIndex","disableControls","barColor","minutes","isRunning","pause","resume","abs","StepBackwardOutlined","max","PauseOutlined","PlayCircleOutlined","StepForwardOutlined","TrophyOutlined","GalleryWindowResult","playerArtist","correctAnswerId","correctAnswerText","playersPoints","correctGuesses","quantity","keyPrefix","DeleteFilled","GalleryWindow","window","artistId","currentColor","AVATARS","isFirstGalleryRunThrough","setIsFirstGalleryRunThrough","isGameOver","some","player","score","unskippable","gallery","ranking","PictureOutlined","lastRound","GRADES","DrawingGrade","value","grade","baseClass","announcementIcon","successRate","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseDraw","PhaseEvaluation","PhaseGallery","PhaseGameOver","PageError"],"sourceRoot":""}