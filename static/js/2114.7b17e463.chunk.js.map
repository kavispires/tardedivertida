{"version":3,"file":"static/js/2114.7b17e463.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextPhaseButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/debug/DebugOnly.tsx","components/general/GameBanner.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","hooks/useAPICall.ts","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","mock/players.ts","utils/phases.ts"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Sass\nimport './AdminOnlyContainer.scss';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\n// Utils\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [usingEmulators] = useGlobalState('usingEmulators');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const [meta] = useGlobalState('gameMeta');\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'primary',\n            danger: true,\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.lastRound ? 'This is already set as the last round' : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button target=\"_blank\" href={getFirebaseUrl(usingEmulators, meta.gameName, meta.gameId)}>\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Flag indicating if the current round should be considered the final round\n   */\n  lastRound?: boolean;\n  /**\n   * Time to auto trigger the button in seconds\n   */\n  autoTriggerTime?: number;\n};\n\n/**\n * Button only available to the admin to go to the next phase.\n * It can be auto-triggered by using the autoTriggerTime\n * @param props\n * @returns\n */\nexport function AdminNextPhaseButton({\n  className = '',\n  round,\n  lastRound = false,\n  autoTriggerTime = 0,\n  children,\n}: AdminNextPhaseButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE });\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <TimedButton\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        disabled={isLoading}\n        onClick={handleClick}\n        onExpire={handleClick}\n        duration={autoTriggerTime}\n        hideTimer={!Boolean(autoTriggerTime)}\n      >\n        {children ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </TimedButton>\n    </AdminOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n\ninterface AdminButtonProps extends ButtonProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Action triggered when the button is clicked\n   */\n  onClick: GenericFunction;\n}\n\nexport function AdminButton({ onClick, children, ...rest }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...rest}>\n      {children}\n    </Button>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  label: ReactNode;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  if (!isAdminEnabled) return <span></span>;\n\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { Image } from 'antd';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <Image\n      alt={title?.[language]}\n      src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n      fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n      className={className}\n      preview={preview}\n    />\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\nimport { useKeyPressEvent } from 'react-use';\nimport { useCountdown } from 'hooks/useCountdown';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut')\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive\n              ? getAnimationClass(animationType, undefined, 'fast')\n              : getAnimationClass('bounceOut', undefined),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef.current?.offsetHeight, screenRef.current?.offsetWidth, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Divider, Input, notification, Popconfirm, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, FireFilled, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\nimport { GameBanner } from '../../general/GameBanner';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnter = () => {\n    setVolume(0.5);\n    onAddPlayer(null, 0.5);\n  };\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      setVolume(0.5);\n      onAddPlayer(null, 0.5);\n    }\n  };\n\n  const onEnterAsViewer = () => {\n    setUserId(VIEWER_ID);\n    setUsername(translate('Espectador', 'Viewer'));\n    setUserAvatarId('N');\n    setIsAdminEnabled(false);\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-banner\" />\n\n        <h1 className=\"lobby-heading\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnter}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n\n        {isAdmin && info.tags.includes('audience-mode') && (\n          <>\n            <Divider className=\"game-card__divider\" />\n            <Popconfirm\n              title={\n                <Translate\n                  pt=\"Tem certeza que quer entrar como espectador?\"\n                  en=\"Are you sure you want to join as viewer?\"\n                />\n              }\n              onConfirm={onEnterAsViewer}\n            >\n              <Button\n                className=\"lobby-join__join-button-link\"\n                type=\"primary\"\n                disabled={!Boolean(tempUsername) || isLoading}\n                loading={isLoading}\n                size=\"small\"\n                danger\n                icon={<FireFilled />}\n              >\n                <Translate pt=\"Entrar como espectador\" en=\"Join as viewer\" />\n              </Button>\n            </Popconfirm>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { GameBanner } from '../../general/GameBanner';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-banner\" />\n\n        <h1 className=\"lobby-heading\">{username || 'Fulano'}</h1>\n\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n\n        <h3 className=\"lobby-heading\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            player={player}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <AdminMenuDrawer state={{ phase: 'LOBBY', round: { current: 0, total: 0 } }} players={players} />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { AnimatedGearIcon } from 'components/icons/AnimatedGearIcon';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { Fragment, ReactNode, useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\nimport { reorder } from './reorder';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\nimport { WaitingRoomIcon } from 'components/icons/WaitingRoomIcon';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <Instruction>\n        {Boolean(instruction) ? (\n          instruction\n        ) : (\n          <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n        )}\n      </Instruction>\n      {children}\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse } from 'antd';\n// Components\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={<Translate pt=\"Regras\" en=\"Rules\" custom={title} />} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button, Space } from 'antd';\nimport { CarouselRef } from 'antd/es/carousel';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { createRef } from 'react';\nimport { Translate } from 'components/language';\nimport { useKeyPressEvent } from 'react-use';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <Space className={clsx('space-container', actionsClassName)}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n// Ant Design Resource\nimport { Alert, Button, Checkbox, message, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { blurCard } = useBlurCards();\n\n  const {\n    loading,\n    error,\n    value: data,\n  } = useAsync(async () => {\n    const response = await fetch(`${process.env.REACT_APP_TDI_DATA_URL}/credo.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur all selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n  onClick: GenericFunction;\n};\n\nexport function PlayersStatusBar({ players, onClick }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <button onClick={onClick} className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Badge dot color={player.ready ? 'green' : 'gray'}>\n                <Avatar\n                  id={player.avatarId}\n                  alt={player.name}\n                  size=\"small\"\n                  className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                />\n              </Badge>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </button>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from '../players/PlayersStatusBar';\nimport { useNavigate } from 'react-router-dom';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { GameBanner } from 'components/general/GameBanner';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <PlayersStatusBar players={players} onClick={toggleDrawer} />\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          <GameBanner\n            title={info?.title}\n            gameName={info.gameName}\n            preview={false}\n            className=\"round-corners\"\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  /**\n   * The id of the game\n   */\n  gameId: GameId;\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n  /**\n   * The class to replace the background gradient\n   */\n  backgroundClassName?: string;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent, backgroundClassName }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  // Colorize background\n  useEffect(() => {\n    if (backgroundClassName) {\n      const appElement = document.getElementById('app');\n      if (appElement) {\n        appElement.classList.add(backgroundClassName);\n      }\n    }\n    return () => {\n      const appElement = document.getElementById('app');\n      appElement?.classList.remove(backgroundClassName ?? '');\n    };\n  }, [backgroundClassName]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): Players | {} {\n  const docPath = `games/${gameName}/${gameId}/players`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing players...');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `games/${gameName}/${gameId}/state`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing state...');\n  }\n\n  return snapshot?.data() as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport function Step({\n  children,\n  announcement,\n  fullWidth = false,\n  fullHeight = false,\n  className = '',\n}: StepProps) {\n  return (\n    <div\n      className={clsx('step', fullWidth && 'step--full-width', fullHeight && 'step--full-height', className)}\n    >\n      {announcement}\n      {children}\n    </div>\n  );\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) console.warn('SetSwitcher is being used without `players`, please add it.');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n  /**\n   * Flag indicating if it is the last round\n   */\n  lastRound?: boolean;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round, lastRound }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || lastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong>{' '}\n            {pluralize(left, 'rodada', 'rodadas')} para o jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round', 'rounds')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 2, size = 'medium' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import { useCallback } from 'react';\nimport { message, notification } from 'antd';\nimport { HttpsCallable } from 'firebase/functions';\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\ntype useAPICallArgs = {\n  apiFunction: HttpsCallable<unknown, unknown>;\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\n/**\n * Wrapper around common firebase http call\n * @param data\n * @param data.apiFunction\n * @param [data.onBeforeCall] what to run before the api call\n * @param [data.onAfterCall] what to run after the api call\n * @param [data.onError] what to run if an error occurs\n * @param [data.onSuccess] what to run if success occurs\n * @param [data.actionName] the name used in the loader hook\n * @param [data.successMessage]\n * @param [data.errorMessage]\n * @returns\n */\n\n/**\n * Wrapper around common firebase http call\n * @param options\n * @returns\n */\nexport function useAPICall({\n  apiFunction,\n  actionName = 'api-action',\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: useAPICallArgs): (...args: any[]) => any {\n  const { setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [userId] = useGlobalState('userId');\n\n  const onAPICall = debounce(\n    useCallback(\n      async (payload: {}) => {\n        try {\n          setLoader(actionName, true);\n          await onBeforeCall();\n          const response = await apiFunction({\n            gameId,\n            gameName,\n            playerId: userId,\n            ...payload,\n          });\n\n          if (response.data) {\n            onSuccess();\n            message.success(successMessage);\n          }\n        } catch (e: any) {\n          notification.error({\n            message: errorMessage,\n            description: JSON.stringify(e.message),\n            placement: 'bottomLeft',\n          });\n          console.error(e);\n          onError();\n        } finally {\n          await onAfterCall();\n          setLoader(actionName, false);\n        }\n      },\n      [\n        actionName,\n        apiFunction,\n        errorMessage,\n        gameId,\n        gameName,\n        userId,\n        setLoader,\n        successMessage,\n        onBeforeCall,\n        onAfterCall,\n        onError,\n        onSuccess,\n      ]\n    )\n  );\n\n  return onAPICall;\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { isDevEnv } from 'utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = [], requirements: any[] = []) {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n\n  useEffect(() => {\n    if (!runOnce && isDevEnv && !isAdmin && userId !== VIEWER_ID && requirements.every(Boolean)) {\n      setRunOnce(true);\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","import { useEffect } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: Players, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Tim'.split(',');\n// const DEV_NAMES: string[] =\n//   'Abigail,Bartolomeu,Cameron,Daniella,Evelyn,Frederick,Gordon,Hector,Isaac,Jacklyn,Madonna,Nathaniel'.split(\n//     ','\n//   );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem)) {\n    randomItem = getRandomItem(source);\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties?: PlainObject\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length > 1) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...properties,\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CAMINHOS_MAGICOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TASK: 'TASK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","isAdmin","isAdminEnabled","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","usingEmulators","visible","setVisible","meta","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","phase","lastRound","target","href","getFirebaseUrl","gameName","gameId","ButtonLabel","round","current","total","AdminNextPhaseButton","autoTriggerTime","translate","useLanguage","onGoToNextPhase","handleClick","onExpire","duration","hideTimer","Boolean","AdminButton","rest","RocketFilled","AdminOnlyButton","DebugOnly","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","GameBanner","preview","language","alt","src","PUBLIC_URL","fallback","PhaseAnnouncement","buttonText","currentRound","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","useCountdown","autoStart","getAnimationClass","autoFocus","custom","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","setScreenSize","useEffect","height","offsetHeight","width","offsetWidth","description","baseClass","id","ref","speak","text","volume","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis","getRandomWelcomeMessage","getRandomItem","randomName","mockPlayerName","Join","setLoader","setUserId","setUsername","setUserAvatarId","setVolume","setIsAdminEnabled","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","avatarId","newAvailableAvatars","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerAvatarId","response","data","username","notification","console","error","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","isComplete","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","loading","ghost","size","tags","VIEWER_ID","Waiting","gameMeta","userAvatarId","onLockGameAndStart","isLocked","numPlayers","direction","min","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","backgroundImage","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","animate","appearance","clouds","PhasePlaceholder","PhaseRules","user","useUser","onBeReady","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","useMemo","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","startWith","starterIndex","slice","CollapsibleRule","contained","header","PopoverRule","content","showLabel","ReadOutlined","RulesCarousel","createRef","prev","autoplay","autoplaySpeed","rule","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","onCancel","footer","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","count","score","shape","BlurOptions","blurCard","useBlurCards","useAsync","fetch","process","json","result","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","checked","selectedGroups","forEach","flat","SectionSettings","blurEnabled","setBlurEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","s","PlayersStatusBar","sortPlayers","dot","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","FireOutlined","Session","gameCollection","getActiveComponent","backgroundClassName","docPath","useDocument","doc","firestore","snapshotListenOptions","includeMetadataChanges","snapshot","useGamePlayers","useGameState","setInfo","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","appElement","document","getElementById","classList","add","remove","ActiveComponent","Step","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","step","conditions","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","warn","Instruction","RoundsLeftInstruction","left","pluralize","TextHighlight","Title","level","onBeforeCall","onError","onAPICall","func","timer","timeout","args","clearTimeout","apply","debounce","blurredCards","setBlurredCards","getLocalStorage","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","whatToDo","requirements","runOnce","setRunOnce","every","useStep","startingStep","setStep","goToPreviousStep","ignore","setShowPlayersBar","setUser","setIsReady","updatedAt","online","Date","now","DEV_NAMES","cacheNames","cacheAvatars","cacheMockedPlayers","getRandomUniqueItemFromList","source","used","cache","randomItem","mockPlayers","quantity","properties","usedNames","neededQuantity","mockedPlayers","Array","fill","i","toLowerCase","newMockedPlayers","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CAMINHOS_MAGICOS","UNKNOWN","CINEGRAFISTAS_AMADORES","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","CLUE_WRITING","GUESSING","REVEAL","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TASK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","RESULTS","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","TEMPLATE"],"sourceRoot":""}