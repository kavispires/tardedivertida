{"version":3,"file":"static/js/retrato-falado.9525b88e.chunk.js","mappings":"qQAWaA,EAAgB,WAC3B,OAAoCC,EAAAA,EAAAA,IAAe,cAAnD,eAAOC,EAAP,KAAmBC,EAAnB,KAEA,OACE,iBAAKC,UAAU,iBAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAAC,IAAD,CAAWC,GAAG,qBAAqBC,GAAG,kBAExC,SAAC,IAAD,CACEF,UAAU,yBACVG,MAAK,OAAEL,QAAF,IAAEA,EAAAA,EAAc,IACrBM,IAAK,IACLC,IAAK,IACLC,KAAM,GACNC,SAAUR,QCCLS,EAAY,SAAC,GAAkE,IAAD,IAA/DC,QAAAA,OAA+D,MAArD,GAAqD,MAAjDT,UAAAA,OAAiD,MAArC,GAAqC,MAAjCU,KAAAA,OAAiC,MAA1B,IAA0B,EACnFC,EAAaC,KAAKC,MAAMJ,GACxBK,EAA8BH,EAtBfI,KAAI,SAACC,GAExB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGC,EAAI,EAAGA,EAAIH,EAAQI,OAAQF,GAAK,EAAGC,GAAK,EAClDH,EAAQE,EAAI,IAAMF,EAAQG,EAAI,KAChCF,GAAI,WAAQD,EAAQE,GAAhB,YAAsBF,EAAQG,GAA9B,aAAqCH,EAAQE,EAAI,GAAjD,YAAuDF,EAAQG,EAAI,KAI3E,OAAOF,KAgBT,OACE,iBACEI,MAAM,6BACNC,QAAQ,cACRC,SAAS,SACTvB,UAAWA,EACXwB,MAAO,CAAEC,MAAM,GAAD,OAAKf,EAAL,OALhB,WAOE,oBACCI,EAAMC,KAAI,SAACE,EAAMS,GAAP,OACT,iBAEEC,EAAGV,EACHW,KAAK,OACLC,OAAO,OACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACfC,iBAAiB,MARnB,UACUxB,EADV,YACqBiB,W,sECnBhBQ,EAAgB,SAAC,GAMH,IAAD,IALxBC,EAKwB,EALxBA,MACAC,EAIwB,EAJxBA,SAIwB,IAHxBpC,UAAAA,OAGwB,MAHZ,GAGY,MAFxBqC,aAAAA,OAEwB,aADxBP,YAAAA,OACwB,MADV,SACU,EACxB,GAA4CQ,EAAAA,EAAAA,UAAuB,IAAnE,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAYC,EAAAA,EAAAA,SAAO,GAEnBC,EAAkB,SAACC,GACvBH,EAAUI,SAAU,EACpB,IAAMC,EAAMF,EAAEG,OAAOC,WAAWC,qBAChCb,EAAS,GAAD,eAAKD,GAAL,CAAY,CAACe,KAAKC,MAAML,EAAI5B,GAAIgC,KAAKC,MAAML,EAAI3B,QAGnDiC,EAAkB,SAACR,GAEvB,GAAKH,EAAUI,QAAf,CAGA,IACMQ,EADQT,EAAEG,OAAOC,WACHC,qBAChBK,EAAWnB,EAAMA,EAAMf,OAAS,GAEpCkC,EAAWA,EAASC,OAAO,CAACL,KAAKC,MAAME,EAAMnC,GAAIgC,KAAKC,MAAME,EAAMlC,KAGlEgB,EAAMqB,OAAOrB,EAAMf,OAAS,EAAG,EAAGkC,GAClClB,EAASD,EAAMoB,YAGXE,EAAgB,SAACb,GACrBH,EAAUI,SAAU,EACpBL,EAAkB,IAGlB,IACMa,EADQT,EAAEG,OAAOC,WACHC,qBACd/B,EAAIgC,KAAKC,MAAME,EAAMnC,GACrBC,EAAI+B,KAAKC,MAAME,EAAMlC,GAEvBuC,EAAgBvB,EAAMA,EAAMf,OAAS,GACrCsC,EAAc,KAAOxC,GAAKwC,EAAc,KAAOvC,IAEjDuC,EAAgBA,EAAcH,OAAO,CAACrC,EAAI,GAAKC,EAAI,KAGnDgB,EAAMqB,OAAOrB,EAAMf,OAAS,EAAG,EAAGsC,GAClCtB,EAASD,EAAMoB,YA4BbI,EAAiB,oBACrB,CACEC,MAAO,EACPC,OAAQ,EACRC,MAAO,UAJY,aACrB,EAIIhC,UALiB,QAKD,EAEtB,OACE,UAAC,IAAD,CAAOiC,UAAU,WAAWC,MAAM,SAAlC,WACE,SAAC,KAAD,CACEvC,MAAO,IACPwC,OAAQ,IACRC,YAAavB,EACbwB,YAAaf,EACbgB,UAAWX,EACXY,aAAc1B,EACd2B,YAAalB,EACbmB,WAAYd,EACZzD,WAAWwE,EAAAA,EAAAA,GAAK,iBAAkBxE,GATpC,UAWE,SAAC,KAAD,UACGmC,EAAMpB,KAAI,SAAC0D,EAAMC,GAAP,OACT,SAAC,KAAD,CAEEC,OAAQF,EACR5C,OAAO,UACPC,YAAa6B,EACbiB,QAAS,GACTC,QAAQ,QACRC,yBAAyB,eANpBJ,UAWZrC,IACC,UAAC,IAAD,YACE,UAAC,IAAD,CAAQ0C,QA1DD,WACb,IAAMC,GAAS,OAAO7C,GAChB8C,GAAkB,OAAO1C,GACzBe,EAAmC0B,EAAUE,MAC/C5B,IACF2B,EAAmBE,KAAK7B,GACxBlB,EAAS4C,GACTxC,EAAkByC,KAmDWG,SAA2B,IAAjBjD,EAAMf,OAAzC,WACE,SAACiE,EAAA,EAAD,KACA,SAAC,IAAD,CAAWpF,GAAG,WAAWC,GAAG,aAE9B,UAAC,IAAD,CAAQ6E,QAnDD,WACb,IAAMC,GAAS,OAAO7C,GAChB8C,GAAkB,OAAO1C,GACzB+C,EAAeL,EAAmBC,MACpCI,IACFN,EAAUG,KAAKG,GACflD,EAAS4C,GACTxC,EAAkByC,KA4CWG,SAAoC,IAA1B7C,EAAenB,OAAlD,WACE,SAACiE,EAAA,EAAD,KACA,SAAC,IAAD,CAAWpF,GAAG,UAAUC,GAAG,aAE7B,UAAC,IAAD,CAAQ6E,QApEA,kBAAM3C,EAAS,KAoEGgD,SAA2B,IAAjBjD,EAAMf,OAA1C,WACE,SAACmE,EAAA,EAAD,KACA,SAAC,IAAD,CAAWtF,GAAG,SAASC,GAAG,qB,uRClIzBsF,EAAO,SAAC,GAUH,IAThBC,EASe,EATfA,SASe,IARfC,OAAAA,OAQe,MARN,QAQM,EAPfC,EAOe,EAPfA,OAOe,IANfC,MAAAA,OAMe,MANP,OAMO,MALflF,KAAAA,OAKe,MALR,SAKQ,MAJfmF,YAAAA,OAIe,aAHf7F,UAAAA,OAGe,MAHH,GAGG,MAFf8F,gBAAAA,OAEe,MAFG,GAEH,MADfC,gBAAAA,OACe,MADG,GACH,EACTC,EAAY,OAEZC,EAAUJ,GACZK,EAAAA,EAAAA,IACsB,kBAAbT,EACHA,EAAS,GAAGU,cACD,UAAXT,EACAA,EAAO,GAAGS,cACV,KAENP,EAEJ,OACE,iBAAK5F,WAAWwE,EAAAA,EAAAA,GAAKwB,EAAD,UAAeA,EAAf,aAA6BtF,GAAQV,GAAzD,WACE,iBACEA,WAAWwE,EAAAA,EAAAA,GAAK,GAAD,OAAIwB,EAAJ,wCAA8CC,GAAWH,GACxEtE,MAAOoE,EAAMQ,WAAW,KAAO,CAAEC,gBAAiBT,GAAU,GAF9D,SAIGF,KAEH,iBAAM1F,UAAS,UAAKgG,EAAL,UAAf,SAAwCP,IACvCE,IAAU,iBAAM3F,WAAWwE,EAAAA,EAAAA,GAAK,GAAD,OAAIwB,EAAJ,YAAyBD,GAA9C,SAAiEJ,Q,kDCjC3E,SAASW,EAAT,GAAsF,IAA9Db,EAA6D,EAA7DA,SAA6D,IAAnDc,SAAAA,OAAmD,MAAxC,GAAwC,MAApCC,KAAAA,OAAoC,MAA7B,OAA6B,EAC1F,GAAoClE,EAAAA,EAAAA,WAAS,GAA7C,eAAOmE,EAAP,KAAmBC,EAAnB,KACQC,GAAcC,EAAAA,EAAAA,MAAdD,UAER,OACE,iCACE,gBAAK3G,UAAU,qCACf,iBACEA,WAAWwE,EAAAA,EAAAA,GAAK,gBAAiBiC,GAAc,2BAC/CI,YAAa,kBAAMH,GAAc,IACjCI,aAAc,kBAAMJ,GAAc,IAHpC,WAKE,kBAAM1G,UAAU,uBAAhB,WACE,SAAC,KAAD,CACEwG,KAAe,SAATA,EAAkB,gBAAkB,aAC1C9F,KAAM+F,EAAa,GAAK,GACxBzG,UAAU,sBACV+G,IAAKJ,EAAU,mBAAiB,oBAElC,SAAC,IAAD,CAAW1G,GAAG,+BAA+BC,GAAG,qBAC/CqG,KAEFd,Q,0FCvBF,SAASuB,EAAT,GAA4D,IAAjCC,EAAgC,EAAhCA,OAChC,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,SAER,OAFA,EAAkBC,eAGhB,SAAC,IAAD,CACEC,UAAU,MACVC,OACE,SAAC,IAAD,CACErH,GAAG,2EACHC,GAAG,4DALT,UASE,UAAC,IAAD,CAAQqH,OAAK,EAACxC,QAAS,kBAAMoC,EAASF,IAASvG,KAAK,QAAQV,UAAU,oBAAtE,WACE,SAACwH,EAAA,EAAD,IADF,KAC2B,SAAC,IAAD,CAAWvH,GAAG,QAAQC,GAAG,eAItD,wBAWG,SAASuH,EAAT,GAK4B,IAJjCR,EAIgC,EAJhCA,OACAjH,EAGgC,EAHhCA,UACAyF,EAEgC,EAFhCA,SACGiC,GAC6B,YAChC,OACE,iCAAK1H,WAAWwE,EAAAA,EAAAA,GAAK,8BAA+BxE,IAAgB0H,GAApE,cACGjC,GACD,SAACuB,EAAD,CAAiBC,OAAQA,Q,kCClClBU,EAAY,SAAC,GAMH,IALrBC,EAKoB,EALpBA,QAKoB,IAJpBlH,KAAAA,OAIoB,MAJb,SAIa,MAHpBmH,UAAAA,OAGoB,MAHR,IAGQ,MAFpB7H,UAAAA,OAEoB,MAFR,GAEQ,MADpB8H,QAAAA,OACoB,SACZC,GAAoBb,EAAAA,EAAAA,MAApBa,gBAEF/B,EAAY,aAEZgC,EAAY,sBAAkBJ,EAAQA,EAAQxG,OAAS,IAEvD6G,EAAWL,EAAQM,QAAQ,KAAM,KAEjCC,EAAYJ,EAAgBH,GAElC,OACE,gBAAK5H,WAAWwE,EAAAA,EAAAA,GAAKwB,EAAD,UAAeA,EAAf,aAA6BtF,GAAQyH,GAAS,UAAOnC,EAAP,UAA0BhG,GAA5F,UACE,SAAC,IAAD,CACEyB,MAAOoG,EACPO,IAAG,UAAKC,0CAAL,OAA2CJ,EAA3C,QACHK,aAAa,SAAC,IAAD,CAAOR,SAAS,EAAOM,IAAKE,EAAa7G,MAAOoG,IAC7DU,SAAQ,UAAKC,EAAAA,GAAAA,OAAL,OAAwBR,EAAxB,QACRF,WACEA,GAAYK,IACR,CACEM,cAAc,GAAD,OAAKzC,EAAL,wB,SCvBtB,SAAS0C,EAAT,GAUiB,IAAD,IATrBC,KAAAA,OASqB,MATd,GASc,EARrBC,EAQqB,EARrBA,aACAC,EAOqB,EAPrBA,kBAOqB,IANrB7I,UAAAA,OAMqB,MANT,GAMS,MALrB8I,kBAAAA,OAKqB,MALD,GAKC,MAJrBC,UAAAA,OAIqB,MAJT,EAIS,EAHrBC,EAGqB,EAHrBA,SAGqB,IAFrBC,YAAAA,OAEqB,MAFP,GAEO,MADrBC,qBAAAA,OACqB,SACbvC,GAAcC,EAAAA,EAAAA,MAAdD,UAEFkB,GAAYsB,EAAAA,EAAAA,IAAaJ,EAAW,GAAIE,GAE9C,OACE,SAAC,iBAAD,WACE,gBAAKjJ,WAAWwE,EAAAA,EAAAA,GAAK,kBAAmBxE,GAAxC,SACG2I,EAAK5H,KAAI,SAACkG,GACT,OACE,iBAA4BjH,UAAU,kCAAtC,UACGoJ,QAAQR,KACP,SAAC,IAAD,CACES,MAAM,SAACC,EAAA,EAAD,IACNtJ,UAAW8I,EACX/D,QAAS,kBAAM6D,EAAc3B,IAC7BvG,KAAK,QACL0E,SAAU8D,EALZ,SAOGvC,EAAU,aAAc,SAAUkC,MAGvC,SAAClB,EAAD,CAAWC,QAASX,EAAQY,UAAWmB,GAAYnB,KACnD,SAACb,EAAD,CAAiBC,OAAQA,MAb3B,eAAkBA,WC3BvB,IAAMsC,EAAgB,SAAC,GAKH,IAAD,IAJxB7I,KAAAA,OAIwB,MAJjB,SAIiB,MAHxBmH,UAAAA,OAGwB,MAHZ,IAGY,MAFxB7H,UAAAA,OAEwB,MAFZ,GAEY,EADxBwJ,EACwB,EADxBA,eAEMxD,EAAY,kBAEZmC,GAAYJ,GADUb,EAAAA,EAAAA,MAApBa,iBAC0ByB,GAC5BvB,GAAW,OAACuB,QAAD,IAACA,EAAAA,EAAkB,IAAItB,QAAQ,KAAM,KAEtD,OACE,gBAAKlI,WAAWwE,EAAAA,EAAAA,GAAKwB,EAAD,UAAeA,EAAf,aAA6BtF,GAAQV,GAAzD,UACE,SAAC,IAAD,CACEyB,MAAOoG,EACPO,IAAKE,EACLR,UACEsB,QAAQI,MACHrB,GACC,CACEM,cAAe,2BACfL,IAAI,GAAD,OAAKC,0CAAL,OAA2CJ,EAA3C,eC7Bd,SAASwB,EAAT,GAAoE,IAApCd,EAAmC,EAAnCA,KACrC,OAAKA,GAEH,gBAAK3I,UAAU,0BAAf,SACG2I,EAAK5H,KAAI,SAACkG,GAAD,OACR,SAACU,EAAD,CAAWC,QAASX,EAAQY,UAAW,EAA8BC,SAAS,GAA9E,mBAA2Db,UAJ/C,oB,cCQb,SAASyC,EAAT,GAMyB,IAL9B3E,EAK6B,EAL7BA,QACAkC,EAI6B,EAJ7BA,OACA0C,EAG6B,EAH7BA,YACAC,EAE6B,EAF7BA,cAE6B,IAD7BC,WAAAA,OAC6B,SAC7B,OACE,UAAC,IAAD,CACEC,MAAM,QACNpJ,KAAK,QACL6G,OAAQsC,EACR7J,UAAU,2BACV+E,QAAS,kBAAMA,EAAQkC,IALzB,WAOE,SAAC8C,EAAA,EAAD,IACCF,GACC,SAAC,IAAD,CAAW5J,GAAG,YAAYC,GAAG,WAAW8J,OAAQJ,KAEhD,SAAC,IAAD,CAAW3J,GAAG,aAAaC,GAAG,SAAS8J,OAAQL,KAEjD,SAACI,EAAA,EAAD,S,4JCvBC,SAASE,EAAT,GAQY,IAPjBC,EAOgB,EAPhBA,MAEAC,GAKgB,EANhBpI,cAMgB,EALhBoI,OAEAhK,GAGgB,EAJhBqG,KAIgB,EAHhBrG,OAEGuH,GACa,EAFhB0C,QAEgB,aACVC,EAAa,IAAe,IAARlK,EAAegK,EACzC,OACE,SAAC,KAAD,QACEG,QAASD,EACTH,MAAOA,EACPK,UAAU,EACV/I,MAAO,CAAEgJ,aAAc,QACvB9J,KAAMwJ,GAASA,EAAQ,GAAK,aAAUO,GAClC/C,M,2IC1BH,SAASgD,EAAT,GAAwC,IAAxBjF,EAAuB,EAAvBA,SACrB,OAAO,8BAAGA,ICAL,SAASkF,EAAT,GAA+D,IAAD,IAA5CC,UAAAA,OAA4C,SAAzBnF,EAAyB,EAAzBA,SAC1C,OAAOmF,GAAY,8BAAGnF,KAAe,wBCDhC,SAASoF,EAAT,GAAiE,IAAD,IAA9CC,YAAAA,OAA8C,SAAzBrF,EAAyB,EAAzBA,SAC5C,OAAOqF,GAAc,8BAAGrF,EAAS,MAAS,8BAAGA,EAAS,KCDjD,SAASsF,EAAT,GAA2D,IAArCC,EAAoC,EAApCA,MAAOvF,EAA6B,EAA7BA,SAClC,GAAIuF,EAAM5J,OAAS,EACjB,MAAM6J,MAAM,0CAGd,OAAID,EAAM,IAAMvF,EAAS,GAChBA,EAAS,GAGduF,EAAM,IAAMvF,EAAS,GAChBA,EAAS,GAGduF,EAAM,IAAMvF,EAAS,GAChBA,EAAS,GAGduF,EAAM,IAAMvF,EAAS,GAChBA,EAAS,GAGduF,EAAM,IAAMvF,EAAS,GAChBA,EAAS,IAElByF,QAAQC,KAAK,4CACN1F,K,gKC9BF,IAAM2F,EACC,aADDA,EAEG,eAFHA,EAGA,YAHAA,EAIA,YAKPC,EAAc,IAGPC,EAAQ,CACnBC,OANkB,GAOlBC,aANwB,EAOxBC,OAAQJ,EACRK,MANiB,EAOjBC,MAAOC,IACPC,YAAaC,IACbC,kBAAmBV,IACnBW,YAViB,G,0DCHZ,SAASC,EAAT,GAAwE,IAA5CC,EAA2C,EAA3CA,iBACjC,OACE,SAAC,KAAD,CACE5E,MACE4E,GACE,SAAC,IAAD,CAAWjM,GAAG,YAAYC,GAAG,eAE7B,SAAC,IAAD,CAAWD,GAAG,oBAAoBC,GAAG,kBAGzCiM,aAAW,EACXC,SAAU,EACV5F,KAAM0F,EAAmB,QAAU,SACnCG,QAAS,e,kCCJR,SAASC,EAAT,GAAoG,IAAzEJ,EAAwE,EAAxEA,iBAAkBK,EAAsD,EAAtDA,cAAepK,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SACxE,OACE,UAAC,KAAD,CAAQ0I,YAAaoB,EAArB,WACE,iBAAKlM,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,UAAUC,GAAG,cAE7B,SAAC,IAAD,CAAUgK,MAAOoB,EAAMI,MAAOvL,MAAOoM,EAAepC,MAAOmB,EAAMI,MAAOc,YAAY,SACpF,SAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,SAAC,IAAD,CACExM,GAAG,mEACHC,GAAG,wEAKT,iBAAKF,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,WAAWC,GAAG,kBAE9B,SAAC,KAAD,CAAauM,WAAS,EAAtB,UACE,SAAC,IAAD,CAAWxM,GAAG,8CAA2CC,GAAG,oCAE9D,SAAC,IAAD,CAAUgK,MAAOoB,EAAMI,MAAOvL,MAAOoM,EAAepC,MAAOmB,EAAMI,MAAOc,YAAY,SACpF,SAAC,KAAD,CAAerK,MAAOA,EAAOC,SAAUA,EAAUC,cAAY,EAACP,YAAY,gB,8GCxB3E,SAAS4K,EAAT,GAA2F,IAApEC,EAAmE,EAAnEA,eAAmE,IAAnDtK,aAAAA,OAAmD,SAA3BqF,GAA2B,YAC/F,GAAoD7H,EAAAA,EAAAA,IAAe,sBAAnE,eAAO+M,EAAP,KAA2BC,EAA3B,KACMhF,GAAYsB,EAAAA,EAAAA,IAAa,EAAG,GAAI,IAAK,MAE3C2D,EAAAA,EAAAA,YAAU,WAC2B,eAA/BH,EAAeI,aACjBF,EAAsBF,EAAeI,eAEtC,IAEH,IAKM/G,EAAY,iBAClB,OACE,UAAC,KAAD,gBAAOjC,UAAU,WAAWC,MAAM,UAAa0D,GAA/C,eACE,SAAC,KAAD,CACEE,QAAS+E,EAAeK,GACxBnF,UAAWA,EACX7H,WAAWwE,EAAAA,EAAAA,GACTwB,EACA,UAAuCA,EAAhB,aAAvB4G,EAAA,gCAGHvK,IACC,UAAC,IAAD,CAAQ0C,QAjBc,WAE1B8H,EAD8C,aAAvBD,EAAoC,aAAe,aAgBtE,UAC0B,aAAvBA,GAAoC,SAACK,EAAA,EAAD,KAA0B,SAACC,EAAA,EAAD,KAC/D,SAAC,IAAD,CAAWjN,GAAG,QAAQC,GAAG,kBC3B5B,SAASiN,EAAT,GAKiB,IAJtBjB,EAIqB,EAJrBA,iBACAkB,EAGqB,EAHrBA,uBACAjL,EAEqB,EAFrBA,MACAC,EACqB,EADrBA,SAEA,OACE,UAAC,KAAD,CAAQ0I,YAAaoB,EAArB,WACE,iBAAKlM,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,sBAAsBC,GAAG,6BAEzC,SAAC,IAAD,CAAUgK,MAAOoB,EAAMG,OAAQtL,MAAOiN,EAAwBjD,MAAOmB,EAAMG,UAC3E,SAACiB,EAAD,CAAaC,eAAgB,CAAEK,GAAI,YAAaD,YAAa,YAAc1K,cAAc,KACzF,SAAC,KAAD,CAAaoK,WAAS,EAAtB,UACE,SAAC,IAAD,CACExM,GAAG,8FACHC,GAAG,uFAKT,iBAAKF,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,WAAWC,GAAG,kBAE9B,SAAC,KAAD,CAAauM,WAAS,EAAtB,SACGW,EAAyB,GACxB,SAAC,IAAD,CACEnN,GAAG,0DACHC,GAAG,4CAGL,SAAC,IAAD,CAAWD,GAAG,8CAA2CC,GAAG,oCAGhE,SAAC,IAAD,CAAUgK,MAAOoB,EAAMG,OAAQtL,MAAOiN,EAAwBjD,MAAOmB,EAAMG,UAC3E,SAAC,KAAD,CAAetJ,MAAOA,EAAOC,SAAUA,EAAUC,cAAY,EAACP,YAAY,gBCrC3E,SAASuL,EAAT,GAMkB,IALvBnB,EAKsB,EALtBA,iBACAS,EAIsB,EAJtBA,eACAW,EAGsB,EAHtBA,wBACAnL,EAEsB,EAFtBA,MACAC,EACsB,EADtBA,SAEA,OACE,UAAC,KAAD,CAAQ0I,YAAaoB,EAArB,WACE,iBAAKlM,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,YAAYC,GAAG,iBAE/B,SAAC,IAAD,CAAUgK,MAAOoB,EAAMC,OAAQpL,MAAOmN,EAAyBnD,MAAOmB,EAAMC,UAC5E,SAACmB,EAAD,CAAaC,eAAgBA,QAG/B,iBAAK3M,UAAU,SAAf,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWC,GAAG,aAAaC,GAAG,sBAEhC,SAAC,KAAD,CAAauM,WAAS,EAAtB,UACE,SAAC,IAAD,CACExM,GAAG,sDACHC,GAAG,mEAGP,SAAC,IAAD,CAAUgK,MAAOoB,EAAMC,OAAQpL,MAAOmN,EAAyBnD,MAAOmB,EAAMC,UAC5E,SAAC,KAAD,CAAepJ,MAAOA,EAAOC,SAAUA,EAAUC,cAAY,EAACP,YAAY,gBC1B3E,SAASyL,EAAT,GAKmB,IAJxBrB,EAIuB,EAJvBA,iBACAS,EAGuB,EAHvBA,eACAa,EAEuB,EAFvBA,eACAC,EACuB,EADvBA,oBAEA,GAA6B5N,EAAAA,EAAAA,IAAe,sBAArC+M,GAAP,eACA,GAAwBtK,EAAAA,EAAAA,UAAS8I,GAAjC,eAAOsC,EAAP,KAAaC,EAAb,KACA,GAA0BrL,EAAAA,EAAAA,UAAc,IAAxC,eAAOH,EAAP,KAAcC,EAAd,KAUA,GAA6BwL,EAAAA,EAAAA,UAAS,CACpCC,iBAAiBC,EAAAA,EAAAA,IAAWxC,EAAMK,OAClCoC,WAAW,EACXC,SAXY,WACR9B,GAA2C,eAAvBU,GAEtBa,EAAoB,CAAEV,YAAaH,IAErCY,EAAe,CAAES,OAAQrN,KAAKsN,UAAU/L,QASpCgM,EAAkB,GANxB,EAAQC,QAAR,EAAiBC,QAmBjB,OAXAvB,EAAAA,EAAAA,YAAU,WAEJqB,IAAU7C,EAAMO,YAClB8B,EAAQvC,GACC+C,IAAU7C,EAAMS,kBACzB4B,EAAQvC,GACC+C,IAAU7C,EAAMU,aACzB2B,EAAQvC,KAET,CAAC+C,KAGF,UAAC,KAAD,CACEnD,MAAO,CACL0C,IAAStC,EACTsC,IAAStC,EACTsC,IAAStC,EACTsC,IAAStC,GALb,WAQE,SAACiC,EAAD,CACEnB,iBAAkBA,EAClBS,eAAgBA,EAChBW,wBAAyBa,EAAQ7C,EAAMO,YACvC1J,MAAOA,EACPC,SAAUA,KAEZ,SAAC6J,EAAD,CAAkBC,iBAAkBA,KACpC,SAACiB,EAAD,CACEjB,iBAAkBA,EAClBkB,uBAAwBe,EAAQ7C,EAAMU,YACtC7J,MAAOA,EACPC,SAAUA,KAEZ,SAACkK,EAAD,CACEJ,iBAAkBA,EAClBK,cAAe4B,EACfhM,MAAOA,EACPC,SAAUA,O,iCC+ClB,MAnHA,YAAqE,IAAD,IAApCkM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACtC7H,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAwC8H,EAAAA,EAAAA,IAAQ,GAAxCnO,EAAR,EAAQA,KAAMoO,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,QACtBC,GAAcC,EAAAA,EAAAA,IAAeP,EAASC,GAC5C,GAAoCO,EAAAA,EAAAA,IAAoB,YAAaP,EAAOD,GAA5E,eAAOS,EAAP,KAAgB7C,EAAhB,KAEMsB,ECHD,SAAqCmB,GAC1C,IAAQhI,GAAcC,EAAAA,EAAAA,MAAdD,UAEFqI,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZC,aAAc,kBAAMV,EAAQ,IAC5BW,QAAS,kBAAMX,EAAQ,IACvBY,eAAgB5I,EACd,8CACA,4CAEF6I,aAAc7I,EACZ,kEACA,sDAIJ,OAAO,SAAC8I,GACNT,GAAQ,QACNU,OAAQ,iBACLD,KDlBgBE,CAA4BhB,GAC7ClB,ECnBD,SAA0CkB,GAC/C,IAAMK,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZC,aAAc,kBAAMV,EAAQ,MAG9B,OAAO,SAACc,GACNT,GAAQ,QACNU,OAAQ,sBACLD,KDSqBG,CAAiCjB,GAE7D,OACE,SAAC,KAAD,CAAgBH,KAAMA,EAAMqB,MAAK,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAOsB,MAAOC,aAAcC,EAAAA,EAAAA,eAAAA,iBAA/D,UACE,UAAC,IAAD,CAAczP,KAAMA,EAAM0P,WAAY,EAAEpB,GAAcA,GAAcA,GAAcN,QAASA,EAA3F,WAEE,SAAC,IAAD,CACEnL,MAAK,OAAEoL,QAAF,IAAEA,OAAF,EAAEA,EAAOpL,MACd8M,cAAevB,EACfwB,WAAW,IACXC,KAAM,EACNhE,aAAW,EACXiE,YAAY,QANd,UAQE,SAAC,KAAD,CAAa3D,WAAS,EAAtB,UACE,SAAC,IAAD,CACExM,IACE,2EAEE,kBAFF,iBAGe,SAAC,KAAD,CAAYoQ,OAAQtB,IAHnC,wCAMF7O,IACE,0EAEE,kBAFF,gBAGc,SAAC,KAAD,CAAYmQ,OAAQtB,IAHlC,8CAWR,SAAC,KAAD,CACEvI,KAAK,UACLc,MAAOX,EAAU,+BAAgC,+BACjD0F,QAASqC,EACT4B,aAAY,OAAE/B,QAAF,IAAEA,GAAF,UAAEA,EAAOpL,aAAT,aAAE,EAAcN,QAC5BuJ,UAAe,OAALmC,QAAK,IAALA,GAAA,UAAAA,EAAOpL,aAAP,eAAcN,SAAU,EAAI,GAAK,EAC3CsJ,aAAW,EANb,UAQE,SAAC,KAAD,UACGD,GACC,SAAC,IAAD,CACEjM,IACE,mDACaqL,EAAMC,OADnB,8DAEE,kBAFF,gDAG0CD,EAAMG,OAAS,GAHzD,0DAKE,kBALF,gBASFvL,IACE,+CACeoL,EAAMC,OADrB,gDAEE,kBAFF,sCAGsCD,EAAMG,OAAS,GAHrD,iDAKE,kBALF,mBAWJ,SAAC,IAAD,CACExL,IACE,iDACe,SAAC,KAAD,CAAYoQ,OAAQtB,IADnC,YACqDzD,EAAMC,OAD3D,8DAGE,kBAHF,gDAI0CD,EAAMG,OAAS,GAJzD,iEAME,kBANF,gBAUFvL,IACE,gDACc,SAAC,KAAD,CAAYmQ,OAAQtB,IADlC,cACyDzD,EAAMC,OAD/D,gDAGE,kBAHF,sCAIsCD,EAAMG,OAAS,GAJrD,gEAME,kBANF,uBAgBV,SAAC8B,EAAD,CACErB,iBAAkBA,EAClBS,eAAgB4B,EAAM5B,eACtBa,eAAgBA,EAChBC,oBAAqBA,UErGxB,SAAS8C,EAAT,GAOY,IANjBrE,EAMgB,EANhBA,iBACAS,EAKgB,EALhBA,eACA6D,EAIgB,EAJhBA,SACAC,EAGgB,EAHhBA,aACAC,EAEgB,EAFhBA,KACApC,EACgB,EADhBA,QAEMqC,GAAcxH,EAAAA,EAAAA,IAAajG,KAAK9C,IAAIwQ,OAAOC,KAAKvC,GAASlN,OAAQ,GAAI,GAAI,IAAK,KACpF,GAAoCvB,EAAAA,EAAAA,IAAe,cAAnD,eAAOC,EAAP,KAAmBC,EAAnB,KASA,OAPA+M,EAAAA,EAAAA,YAAU,WACHhN,GAEHC,EAA6C,GAA/BmD,KAAK4N,MAAMH,EAAc,OAExC,CAAC7Q,EAAY6Q,KAGd,4BACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAW1Q,GAAG,QAAQC,GAAG,aAE3B,SAAC,KAAD,CAAauM,WAAS,EAAtB,UACE,UAAC,KAAD,CAAQ3B,YAAaoB,EAArB,WACE,SAAC,IAAD,CACEjM,IACE,wGAEE,kBAFF,8FAMFC,IACE,+GAEE,kBAFF,uEAQJ,SAAC,IAAD,CACED,IACE,oFAEE,kBAFF,0CAIE,kBAJF,8DAOFC,IACE,yFAEE,kBAFF,iCAIE,kBAJF,wEAYR,SAAC,KAAD,KAEA,SAAC,IAAD,CAAOF,UAAU,kBAAkBgE,MAAM,SAAzC,SACGwM,EAASzP,KAAI,SAACgQ,GACb,IAAMV,EAAS/B,EAAQyC,EAAUC,UACjC,OACE,UAAC,IAAD,CAAOjN,UAAU,WAAWC,MAAM,SAAlC,WACE,SAAC,KAAD,CAEEtD,KAAMZ,GAAc6Q,EACpBlQ,QAASsQ,EAAU9C,OACnBjO,UAAU,YAJZ,iBACiB+Q,EAAUC,YAK3B,UAAC,IAAD,CACExK,KAAK,UACLzB,QAAS,kBAAM0L,EAAa,CAAEQ,KAAMZ,EAAOrD,MAC3C5H,SAAU2L,EAAUC,WAAaN,EAAK1D,GAHxC,WAKE,SAAC,KAAD,CAAQA,GAAIqD,EAAOa,SAAUxQ,KAAK,UALpC,IAKgD2P,EAAOc,UAZzD,4BAAqEJ,EAAUC,iBAmBrF,SAAC,IAAD,CAAOhR,UAAU,kBAAkBgE,MAAM,SAAzC,UACE,SAAC0I,EAAD,CAAaC,eAAgBA,SC3DrC,MA1CA,YAAgE,IAAD,EAApC2B,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACjC7H,GAAcC,EAAAA,EAAAA,MAAdD,UACF+J,GAAOU,EAAAA,EAAAA,IAAQ9C,GAEfM,GAAcC,EAAAA,EAAAA,IAAeP,EAASC,GAC5C,GAAwCE,EAAAA,EAAAA,IAAQ,GAAxCnO,EAAR,EAAQA,KAAMoO,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,QAC5B,GAA6BG,EAAAA,EAAAA,IAAoB,YAAaP,EAAOD,GAA5DpC,GAAT,eAEMuE,EFyBD,SAAmC9B,GACxC,IAAQhI,GAAcC,EAAAA,EAAAA,MAAdD,UAEFqI,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,cACZC,aAAc,kBAAMV,EAAQ,IAC5BW,QAAS,kBAAMX,EAAQ,IACvBY,eAAgB5I,EAAU,2BAA4B,+BACtD6I,aAAc7I,EACZ,iEACA,oDAIJ,OAAO,SAAC8I,GACNT,GAAQ,QACNU,OAAQ,eACLD,KE3Cc4B,CAA0B1C,GAE/C,OACE,SAAC,KAAD,CAAgBH,KAAMA,EAAMqB,MAAK,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAOsB,MAAOC,aAAcC,EAAAA,EAAAA,eAAAA,WAA/D,UACE,UAAC,IAAD,CAAczP,KAAMA,EAAM0P,WAAY,EAAEpB,GAAcA,GAAcA,GAAcN,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE9H,KAAK,SACLc,MAAOX,EAAU,QAAS,SAC1B0F,QAASqC,EACT4B,aAAY,OAAE/B,QAAF,IAAEA,GAAF,UAAEA,EAAOpL,aAAT,aAAE,EAAcN,QAJ9B,UAME,SAAC,KAAD,WACE,SAAC,IAAD,CACE5C,IAAI,2GACJC,IAAI,+FAMV,SAACqQ,EAAD,CACErE,iBAAkBA,EAClBS,eAAgB4B,EAAM5B,eACtB6D,SAAUjC,EAAMiC,SAChBC,aAAcA,EACdC,KAAMA,EACNpC,QAASA,UClCZ,SAASgD,EAAT,GAAgG,IAArEd,EAAoE,EAApEA,SAAUlC,EAA0D,EAA1DA,QAASxO,EAAiD,EAAjDA,WAAY6Q,EAAqC,EAArCA,YAC/D,OACE,8BACGH,EAASzP,KAAI,SAACgQ,GACb,IAAMV,EAAS/B,EAAQyC,EAAUC,UACjC,OACE,UAAC,IAAD,CAEEjN,UAAU,WACVC,MAAM,SACNhE,UAAU,mBAJZ,WAME,SAAC,KAAD,CAEEU,KAAMZ,GAAc6Q,EACpBlQ,QAASsQ,EAAU9C,OACnBjO,UAAU,YAJZ,iBACiB+Q,EAAUC,YAK3B,4BACE,SAAC,KAAD,CAAQhE,GAAIqD,EAAOa,SAAUxQ,KAAK,UADpC,IACgD2P,EAAOc,UAbzD,8BAC8BJ,EAAUC,gB,cCS3C,SAASO,EAAT,GAQe,IAPpBf,EAOmB,EAPnBA,SACAlC,EAMmB,EANnBA,QACA3B,EAKmB,EALnBA,eACA+B,EAImB,EAJnBA,aACA8C,EAGmB,EAHnBA,UACAC,EAEmB,EAFnBA,YACA1C,EACmB,EADnBA,QAEM4B,GAAcxH,EAAAA,EAAAA,IAAajG,KAAK9C,IAAIwQ,OAAOC,KAAKvC,GAASlN,OAAQ,GAAI,GAAI,IAAK,KACpF,GAAqBvB,EAAAA,EAAAA,IAAe,cAA7BC,GAAP,eAEA,EAA6C0Q,EAASkB,QACpD,SAACC,EAAe1D,GAMd,OALIuD,EAAUI,SAAS3D,EAAO+C,UAC5BW,EAAIE,kBAAkB1M,KAAK8I,GAE3B0D,EAAIG,cAAc3M,KAAK8I,GAElB0D,IAET,CACEE,kBAAmB,GACnBC,cAAe,KAXXD,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,cAe3B,OACE,UAAC,IAAD,CAAMC,WAAS,EAAf,WACE,SAAC,KAAD,UACGP,EAAUpQ,OAAS,GAClB,SAAC,IAAD,CACEnB,GAAG,oCACHC,GAAG,iDAGL,SAAC,IAAD,CAAWD,GAAG,+BAA+BC,GAAG,iDAIpD,SAAC,KAAD,CAAauM,WAAS,EAAtB,SACG+E,EAAUpQ,OAAS,GAClB,SAAC,IAAD,CAAWnB,GAAG,0CAA0CC,GAAG,sCAE3D,SAAC,IAAD,CAAWD,GAAG,+BAA+BC,GAAG,kCAIpD,iBAAKF,UAAU,iBAAf,WACE,SAAC0M,EAAD,CAAaC,eAAgBA,EAAgBnL,MAAO,CAAEC,MAAM,GAAD,OAAmB,IAAdkP,EAAL,UAC3D,SAACW,EAAD,CACEd,SAAUqB,EACVvD,QAASA,EACTxO,WAAYA,EACZ6Q,YAAaA,QAIjB,SAAC,KAAD,CAAalE,WAAS,EAAtB,SACG+E,EAAUI,SAASH,IAClB,SAAC,IAAD,CACExR,IACE,iDACe,SAAC,KAAD,CAAYoQ,OAAQtB,IADnC,+FAKF7O,IACE,gDACc,SAAC,KAAD,CAAYmQ,OAAQtB,IADlC,iGAOJ,SAAC,IAAD,CACE9O,IACE,wEACsC,SAAC,KAAD,CAAYoQ,OAAQ/B,EAAQmD,KADlE,gDAKFvR,IACE,6DAC2B,SAAC,KAAD,CAAYmQ,OAAQ/B,EAAQmD,KADvD,yDASR,SAAC,IAAD,CAAarF,SAAU,GAAI4B,SAAUU,EAAc3J,QAAS2J,EAA5D,UACE,SAAC,IAAD,CAAWzO,GAAG,cAAcC,GAAG,mBAGjC,SAAC,KAAD,CAAO8R,MAAO,EAAGhS,UAAU,yBAA3B,UACE,SAAC,IAAD,CAAWC,GAAG,kBAAkBC,GAAG,sBAGrC,SAAC,IAAD,CAAOF,UAAU,kBAAkBgE,MAAM,SAAzC,UACE,SAACsN,EAAD,CACEd,SAAUsB,EACVxD,QAASA,EACTxO,WAAYA,EAAa,IACzB6Q,YAAaA,EAAc,W,wBC1H9B,SAASsB,EAAT,GAAqE,IAA9CC,EAA6C,EAA7CA,QAAS5D,EAAoC,EAApCA,QAASnL,EAA2B,EAA3BA,MAC9C,OACE,UAAC,IAAD,CAAM4O,WAAS,EAAf,WACE,SAAC,KAAD,uBACA,SAAC,KAAD,CAAatF,WAAS,EAAtB,UACE,SAAC,IAAD,CACExM,GAAG,yFACHC,GAAG,qFAIP,SAAC,IAAD,CAAcgS,QAASA,EAAS5D,QAASA,KACzC,SAAC,KAAD,CAAsBnL,MAAOA,OC+BnC,MA3CA,YAA4D,IAAD,EAApCmL,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAC7B7H,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA+B8H,EAAAA,EAAAA,IAAQ,GAA/BnO,EAAR,EAAQA,KAAMoO,EAAd,EAAcA,aACRgC,GAAOU,EAAAA,EAAAA,IAAQ9C,GAEfM,GAAcC,EAAAA,EAAAA,IAAeP,EAASC,GAC5C,GAAkBO,EAAAA,EAAAA,IAAoB,YAAaP,EAAOD,GAAnDS,GAAP,eAEA,OACE,SAAC,KAAD,CAAgBP,KAAMA,EAAMqB,MAAK,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAOsB,MAAOC,aAAcC,EAAAA,EAAAA,eAAAA,OAA/D,UACE,UAAC,IAAD,CAAczP,KAAMA,EAAM0P,WAAY,EAAEpB,GAAcA,GAAcA,GAAcN,QAASA,EAA3F,WAEE,SAAC,KAAD,CACE9H,KAAK,eACLc,MAAOX,EAAU,YAAa,WAC9B0F,QAASqC,EACT4B,aAAY,OAAE/B,QAAF,IAAEA,GAAF,UAAEA,EAAOpL,aAAT,aAAE,EAAcN,QAC5BuJ,SAAU,EALZ,UAOE,SAAC,KAAD,WACE,SAAC,IAAD,CAAWnM,IAAI,0DAA2BC,IAAI,kFAKlD,SAACqR,EAAD,CACExC,QAASA,EACTpC,eAAgB4B,EAAM5B,eACtB6D,SAAUjC,EAAMiC,SAChBgB,UAAWjD,EAAMiD,UACjBC,YAAalD,EAAMkD,YACnBf,KAAMA,EACNpC,QAASA,EACTI,aAAcA,KAIhB,SAACuD,EAAD,CAAaC,QAAS3D,EAAM2D,QAAS5D,QAASA,EAASnL,MAAOoL,EAAMpL,c,WCnB5E,OAtBA,YAA8D,IAArCoL,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMF,EAAuB,EAAvBA,QAC9BqC,GAAcxH,EAAAA,EAAAA,IAAa,EAAG,GAAI,IAAK,KAE7C,OACE,SAAC,KAAD,CAAiBqF,KAAMA,EAAMD,MAAOA,EAAO4D,iBAAiB,SAA5D,UACE,4BACE,SAAC,KAAD,CAAOH,MAAO,EAAd,UACE,SAAC,IAAD,CAAW/R,GAAG,WAAWC,GAAG,gBAE9B,gBAAKF,UAAU,YAAf,UACE,SAACsR,EAAD,CACEd,SAAUjC,EAAM6D,QAChB9D,QAASA,EACTxO,WAAY6Q,EACZA,YAAaA,YCqBzB,OA/BA,YAAyD,IAAzB0B,EAAwB,EAAxBA,OAsB9B,OACE,SAAC,IAAD,CACEA,OAAQA,EACRC,eAAgBC,EAAAA,GAAAA,eAChBC,mBAzBJ,SAA4B3C,GAC1B,OAAQA,GACN,KAAKE,EAAAA,EAAAA,QAAAA,MACH,OAAO0C,EAAAA,GACT,KAAK1C,EAAAA,EAAAA,QAAAA,MACH,OAAO2C,EAAAA,GACT,KAAK3C,EAAAA,EAAAA,QAAAA,MACH,OAAO4C,EAAAA,GACT,KAAK5C,EAAAA,EAAAA,eAAAA,iBACH,OAAO6C,EACT,KAAK7C,EAAAA,EAAAA,eAAAA,WACH,OAAO8C,EACT,KAAK9C,EAAAA,EAAAA,eAAAA,OACH,OAAO+C,EACT,KAAK/C,EAAAA,EAAAA,QAAAA,UACH,OAAOgD,GACT,QACE,OAAOC,EAAAA,Q,6EC5Bf,EADkB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,qaAAya,KAAQ,QAAS,MAAS,U,UCMxlBC,EAAc,SAAqBvL,EAAOwL,GAC5C,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,GAAI3L,GAAQ,GAAI,CAC5FwL,IAAKA,EACL7J,KAAMiK,MAIVL,EAAYM,YAAc,cAC1B,MAA4BJ,EAAAA,WAAiBF,I","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/cards/Card.tsx","components/cards/FloatingHand.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageCard.tsx","components/cards/ImageCardHand.tsx","components/cards/ImageCardBack.tsx","components/cards/ImageCardPreloadHand.tsx","components/cards/ImageCardSelectButton.tsx","components/timers/TimerBar.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/retrato-falado/utils/constants.ts","games/retrato-falado/components/ViewAnnouncement.tsx","games/retrato-falado/components/ViewLastSeconds.tsx","games/retrato-falado/components/MonsterCard.tsx","games/retrato-falado/components/ViewSketching.tsx","games/retrato-falado/components/ViewWitnessing.tsx","games/retrato-falado/StepTestimonial.tsx","games/retrato-falado/PhaseCompositeSketch.tsx","games/retrato-falado/utils/api-requests.ts","games/retrato-falado/StepVote.tsx","games/retrato-falado/PhaseEvaluation.tsx","games/retrato-falado/components/MonsterSketches.tsx","games/retrato-falado/StepResults.tsx","games/retrato-falado/StepRanking.tsx","games/retrato-falado/PhaseReveal.tsx","games/retrato-falado/PhaseGameOver.tsx","games/retrato-falado/SessionRetratoFalado.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\n// State & Hooks\nimport { useGlobalState } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\n/**\n * Floating canvas resizer bar positioned on the top-left of the page\n * @returns\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <div className=\"canvas-resizer\">\n      <div className=\"canvas-resizer__label\">\n        <Translate pt=\"Tamanho das Images\" en=\"Image Size\" />\n      </div>\n      <Slider\n        className=\"canvas-resizer__slider\"\n        value={canvasSize ?? 100}\n        min={150}\n        max={500}\n        step={50}\n        onChange={setCanvasSize}\n      />\n    </div>\n  );\n};\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  drawing: string;\n  className?: string;\n  size?: number;\n};\n\nexport const CanvasSVG = ({ drawing = '', className = '', size = 250 }: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 500 500\"\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${size}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth=\"4\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n  className?: string;\n  showControls?: boolean;\n  strokeWidth?: 'small' | 'medium' | 'large';\n};\n\n/**\n * Canvas drawing board using react-konva\n * @param props\n * @returns\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  const handleMouseDown = (e: any) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    if (lastLineEntry[0] === x && lastLineEntry[1] === y) {\n      // add end point\n      lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLineEntry);\n      setLines(lines.concat());\n    }\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={500}\n        height={500}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        className={clsx('drawing-canvas', className)}\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","import clsx from 'clsx';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n\ntype CardProps = {\n  children: any;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype FloatingHandProps = {\n  children: any;\n  type?: 'hand' | 'stats';\n  subtitle?: any;\n};\n\nexport function FloatingHand({ children, subtitle = '', type = 'hand' }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n      >\n        <span className=\"floating-hand__label\">\n          <AvatarIcon\n            type={type === 'hand' ? 'hand-of-cards' : 'user-stats'}\n            size={isExpanded ? 40 : 60}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <Translate pt=\"Passe o mouse para expandir \" en=\"Hover to expand \" />\n          {subtitle}\n        </span>\n        {children}\n      </div>\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageBlurButtonProps = {\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n\ntype ImageBlurButtonContainerProps = {\n  cardId: string;\n  className?: string;\n  children: any;\n  [key: string]: any;\n};\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  className,\n  children,\n  ...props\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...props}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardProps = {\n  imageId: string;\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number;\n  className?: string;\n  preview?: Boolean;\n};\nexport const ImageCard = ({\n  imageId,\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  preview = true,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(imageId);\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          preview && !isBlurred\n            ? {\n                maskClassName: `${baseClass}__preview-mask`,\n              }\n            : false\n        }\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Components\nimport { ImageBlurButton, ImageCard } from '.';\n\ntype ImageCardHandProps = {\n  hand: string[];\n  onSelectCard?: GenericFunction;\n  selectButtonLabel?: string;\n  className?: string;\n  selectButtonClass?: string;\n  sizeRatio?: number;\n  cardSize?: number;\n  minCardSize?: number;\n  disabledSelectButton?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonLabel,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n}: ImageCardHandProps) {\n  const { translate } = useLanguage();\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(sizeRatio, 32, minCardSize);\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div key={`hand-${cardId}`} className=\"image-card-hand__card-container\">\n              {Boolean(onSelectCard) && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  className={selectButtonClass}\n                  onClick={() => onSelectCard!(cardId)}\n                  size=\"small\"\n                  disabled={disabledSelectButton}\n                >\n                  {translate('Selecionar', 'Select', selectButtonLabel)}\n                </Button>\n              )}\n              <ImageCard imageId={cardId} cardWidth={cardSize || cardWidth} />\n              <ImageBlurButton cardId={cardId} />\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Resources\nimport placeholder from 'assets/images/placeholder.jpg';\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardBackProps = {\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number | string;\n  className?: string;\n  previewImageId?: string;\n};\n\nexport const ImageCardBack = ({\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  previewImageId,\n}: ImageCardBackProps) => {\n  const baseClass = 'image-card-back';\n  const { shouldBeBlurred } = useBlurCards();\n  const isBlurred = shouldBeBlurred(previewImageId);\n  const imageURL = (previewImageId ?? '').replace(/-/g, '/');\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <Image\n        width={cardWidth}\n        src={placeholder}\n        preview={\n          Boolean(previewImageId)\n            ? !isBlurred\n              ? {\n                  maskClassName: 'image-card__preview-mask',\n                  src: `${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`,\n                }\n              : false\n            : false\n        }\n      />\n    </div>\n  );\n};\n","// Components\nimport { ImageCard } from './ImageCard';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import { Progress, ProgressProps } from 'antd';\n\ninterface TimerBarProps extends ProgressProps {\n  steps?: number;\n  value: number;\n  total: number;\n}\n\n/**\n * Time Bar presentational component used in timed operations\n * @param props\n * @returns\n */\nexport function TimerBar({\n  steps,\n  strokeLinecap,\n  total,\n  type = 'line',\n  value,\n  status = 'active',\n  ...props\n}: TimerBarProps) {\n  const percentage = 100 - (value * 100) / total;\n  return (\n    <Progress\n      percent={percentage}\n      steps={steps}\n      showInfo={false}\n      style={{ marginBottom: '1rem' }}\n      size={steps && steps > 30 ? 'small' : undefined}\n      {...props}\n    />\n  );\n}\n","type ViewProps = {\n  children: any;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","type ViewIfProps = {\n  children: any;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","export const VIEWS = {\n  WITNESSING: 'WITNESSING',\n  ANNOUNCEMENT: 'ANNOUNCEMENT',\n  SKETCHING: 'SKETCHING',\n  FINISHING: 'FINISHING',\n};\n\nconst MEMORY_TIME = 20;\nconst ANNOUNCEMENT_TIME = 5;\nconst SKETCH_TIME = 120;\nconst EXTRA_TIME = 5;\n\nexport const TIMES = {\n  MEMORY: MEMORY_TIME,\n  ANNOUNCEMENT: ANNOUNCEMENT_TIME,\n  SKETCH: SKETCH_TIME,\n  EXTRA: EXTRA_TIME,\n  TOTAL: MEMORY_TIME + ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  MEMORY_MARK: ANNOUNCEMENT_TIME + SKETCH_TIME + EXTRA_TIME,\n  ANNOUNCEMENT_MARK: SKETCH_TIME + EXTRA_TIME,\n  SKETCH_MARK: EXTRA_TIME,\n};\n","import { Translate } from 'components/language';\nimport { PhaseAnnouncement } from 'components/phases';\n\ntype ViewAnnouncementProps = {\n  isUserTheWitness: boolean;\n};\n\nexport function ViewAnnouncement({ isUserTheWitness }: ViewAnnouncementProps) {\n  return (\n    <PhaseAnnouncement\n      title={\n        isUserTheWitness ? (\n          <Translate pt=\"Descreva!\" en=\"Describe!\" />\n        ) : (\n          <Translate pt=\"Hora de desenhar!\" en=\"Time to draw!\" />\n        )\n      }\n      unskippable\n      duration={5}\n      type={isUserTheWitness ? 'timer' : 'sketch'}\n      onClose={() => {}}\n    ></PhaseAnnouncement>\n  );\n}\n","// Utils\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { TimerBar } from 'components/timers';\nimport { ViewOr } from 'components/views';\nimport { TIMES } from '../utils/constants';\n// Components\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nexport function ViewLastSeconds({ isUserTheWitness, remainingTime, lines, setLines }: ViewSketchingProps) {\n  return (\n    <ViewOr orCondition={isUserTheWitness}>\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Pronto!\" en=\"Done! \" />\n        </Title>\n        <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n        <Instruction contained>\n          <Translate\n            pt=\"Boca fechada! Aguarde os jogadores darem os últimos retoques.\"\n            en=\"Shut up! Wait for the other players to finish their drawings.\"\n          />\n        </Instruction>\n      </div>\n\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Termine!\" en=\"Finish it!\" />\n        </Title>\n        <Instruction contained>\n          <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n        </Instruction>\n        <TimerBar steps={TIMES.EXTRA} value={remainingTime} total={TIMES.EXTRA} strokeColor=\"red\" />\n        <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n      </div>\n    </ViewOr>\n  );\n}\n","import { useEffect } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space, SpaceProps } from 'antd';\nimport { RotateLeftOutlined, RotateRightOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\n\ninterface MonsterCardProps extends SpaceProps {\n  currentMonster: Monster;\n  showControls?: boolean;\n}\n\nexport function MonsterCard({ currentMonster, showControls = true, ...props }: MonsterCardProps) {\n  const [monsterOrientation, setMonsterOrientation] = useGlobalState('monsterOrientation');\n  const cardWidth = useCardWidth(5, 16, 120, 360);\n\n  useEffect(() => {\n    if (currentMonster.orientation === 'horizontal') {\n      setMonsterOrientation(currentMonster.orientation);\n    }\n  }, []); // eslint-disable-line\n\n  const onChangeOrientation = () => {\n    const newOrientation = monsterOrientation === 'vertical' ? 'horizontal' : 'vertical';\n    setMonsterOrientation(newOrientation);\n  };\n\n  const baseClass = 'r-monster-card';\n  return (\n    <Space direction=\"vertical\" align=\"center\" {...props}>\n      <ImageCard\n        imageId={currentMonster.id}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          monsterOrientation === 'vertical' ? `${baseClass}--vertical` : `${baseClass}--horizontal`\n        )}\n      />\n      {showControls && (\n        <Button onClick={onChangeOrientation}>\n          {monsterOrientation === 'vertical' ? <RotateRightOutlined /> : <RotateLeftOutlined />}\n          <Translate pt=\"Girar\" en=\"Rotate\" />\n        </Button>\n      )}\n    </Space>\n  );\n}\n","// Utils\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { TimerBar } from 'components/timers';\nimport { ViewOr } from 'components/views';\nimport { TIMES } from '../utils/constants';\n// Components\n\nimport { MonsterCard } from './MonsterCard';\n\ntype ViewSketchingProps = {\n  isUserTheWitness: boolean;\n  remainingSketchingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n};\n\nexport function ViewSketching({\n  isUserTheWitness,\n  remainingSketchingTime,\n  lines,\n  setLines,\n}: ViewSketchingProps) {\n  return (\n    <ViewOr orCondition={isUserTheWitness}>\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Descreva o monstro!\" en=\"Describe the monstro!\" />\n        </Title>\n        <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n        <MonsterCard currentMonster={{ id: 'md-bs-000', orientation: 'vertical' }} showControls={false} />\n        <Instruction contained>\n          <Translate\n            pt=\"Tente dar o maior número de detalhes possível. Os jogadores podem te fazer perguntas.\"\n            en=\"Try to give the largest number of details. Player may ask you questions too.\"\n          />\n        </Instruction>\n      </div>\n\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Desenhe!\" en=\"Sketch it!\" />\n        </Title>\n        <Instruction contained>\n          {remainingSketchingTime > 0 ? (\n            <Translate\n              pt=\"Você pode também fazer perguntas à testemunha.\"\n              en=\"You may also ask the witness questions\"\n            />\n          ) : (\n            <Translate pt=\"Últimos segundos para os retoques finais\" en=\"A few seconds more to finish\" />\n          )}\n        </Instruction>\n        <TimerBar steps={TIMES.SKETCH} value={remainingSketchingTime} total={TIMES.SKETCH} />\n        <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n      </div>\n    </ViewOr>\n  );\n}\n","// Utils\nimport { TIMES } from '../utils/constants';\n// Components\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { TimerBar } from 'components/timers';\nimport { ViewOr } from 'components/views';\nimport { MonsterCard } from './MonsterCard';\n\ntype ViewWitnessingProps = {\n  isUserTheWitness: boolean;\n  remainingWitnessingTime: number;\n  lines: CanvasLine[];\n  setLines: CanvasSetLine;\n  currentMonster: Monster;\n};\n\nexport function ViewWitnessing({\n  isUserTheWitness,\n  currentMonster,\n  remainingWitnessingTime,\n  lines,\n  setLines,\n}: ViewWitnessingProps) {\n  return (\n    <ViewOr orCondition={isUserTheWitness}>\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Memorize!\" en=\"Memorize!\" />\n        </Title>\n        <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n        <MonsterCard currentMonster={currentMonster} />\n      </div>\n\n      <div className=\"r-view\">\n        <Title>\n          <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n        </Title>\n        <Instruction contained>\n          <Translate\n            pt=\"A testemunha está tendo um flashback do monstro.\"\n            en=\"The witness is having a flashback of the monster event now.\"\n          />\n        </Instruction>\n        <TimerBar steps={TIMES.MEMORY} value={remainingWitnessingTime} total={TIMES.MEMORY} />\n        <DrawingCanvas lines={lines} setLines={setLines} showControls strokeWidth=\"small\" />\n      </div>\n    </ViewOr>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTimer } from 'react-timer-hook';\n// Utils\nimport { TIMES, VIEWS } from './utils/constants';\nimport { inNSeconds } from 'utils/helpers';\n// Components\nimport { ViewSwitch } from 'components/views';\nimport { ViewAnnouncement } from './components/ViewAnnouncement';\nimport { ViewLastSeconds } from './components/ViewLastSeconds';\nimport { ViewSketching } from './components/ViewSketching';\nimport { ViewWitnessing } from './components/ViewWitnessing';\nimport { useGlobalState } from 'hooks';\n\ntype StepTestimonialProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitSketch: GenericFunction;\n  onSubmitOrientation: GenericFunction;\n};\n\nexport function StepTestimonial({\n  isUserTheWitness,\n  currentMonster,\n  onSubmitSketch,\n  onSubmitOrientation,\n}: StepTestimonialProps) {\n  const [monsterOrientation] = useGlobalState('monsterOrientation');\n  const [view, setView] = useState(VIEWS.WITNESSING);\n  const [lines, setLines] = useState<any>([]);\n\n  const onEnd = () => {\n    if (isUserTheWitness && monsterOrientation === 'horizontal') {\n      // Submit orientation change if any\n      onSubmitOrientation({ orientation: monsterOrientation });\n    }\n    onSubmitSketch({ sketch: JSON.stringify(lines) });\n  };\n\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(TIMES.TOTAL),\n    autoStart: true,\n    onExpire: onEnd,\n  });\n\n  const timer = minutes * 60 + seconds;\n\n  useEffect(() => {\n    // When time is done for memorizing\n    if (timer === TIMES.MEMORY_MARK) {\n      setView(VIEWS.ANNOUNCEMENT);\n    } else if (timer === TIMES.ANNOUNCEMENT_MARK) {\n      setView(VIEWS.SKETCHING);\n    } else if (timer === TIMES.SKETCH_MARK) {\n      setView(VIEWS.FINISHING);\n    }\n  }, [timer]);\n\n  return (\n    <ViewSwitch\n      cases={[\n        view === VIEWS.WITNESSING,\n        view === VIEWS.ANNOUNCEMENT,\n        view === VIEWS.SKETCHING,\n        view === VIEWS.FINISHING,\n      ]}\n    >\n      <ViewWitnessing\n        isUserTheWitness={isUserTheWitness}\n        currentMonster={currentMonster}\n        remainingWitnessingTime={timer - TIMES.MEMORY_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewAnnouncement isUserTheWitness={isUserTheWitness} />\n      <ViewSketching\n        isUserTheWitness={isUserTheWitness}\n        remainingSketchingTime={timer - TIMES.SKETCH_MARK}\n        lines={lines}\n        setLines={setLines}\n      />\n      <ViewLastSeconds\n        isUserTheWitness={isUserTheWitness}\n        remainingTime={timer}\n        lines={lines}\n        setLines={setLines}\n      />\n    </ViewSwitch>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitOrientationAPIRequest, useOnSubmitSketchAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { TIMES } from './utils/constants';\n// Components\n\nimport { StepTestimonial } from './StepTestimonial';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\nfunction PhaseCompositeSketch({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const isUserReady = useIsUserReady(players, state);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitSketch = useOnSubmitSketchAPIRequest(setStep);\n  const onSubmitOrientation = useOnSubmitOrientationAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.COMPOSITE_SKETCH}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={7}\n          unskippable\n          circleColor=\"green\"\n        >\n          <Instruction contained>\n            <Translate\n              pt={\n                <>\n                  Um meliante monstruoso está a solta!\n                  <br />\n                  A testemunha <AvatarName player={witness} /> tentará relembrar o incidente!\n                </>\n              }\n              en={\n                <>\n                  A monstrous miscreant is on the loose!\n                  <br />\n                  The witness <AvatarName player={witness} /> must recall all of its features!\n                </>\n              }\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"monster\"\n          title={translate('Memorize! Descreva! Desenhe!', 'Memorize! Describe! Sketch!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={state?.round?.current < 2 ? 20 : 5}\n          unskippable\n        >\n          <Instruction>\n            {isUserTheWitness ? (\n              <Translate\n                pt={\n                  <>\n                    Você terá {TIMES.MEMORY} segundos para memorizar as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para descrevê-lo para\n                    os outros jogadores.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    You'll have {TIMES.MEMORY} seconds to memorize the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to describe it to the other\n                    players.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            ) : (\n              <Translate\n                pt={\n                  <>\n                    A testemunha <AvatarName player={witness} /> terá {TIMES.MEMORY} segundos para memorizar\n                    as características do monstro.\n                    <br />\n                    Assim que esse tempo acabar, você terá {TIMES.SKETCH / 60} minutos para desenhá-lo\n                    enquanto a testemunha o descreve.\n                    <br />\n                    Boa sorte!\n                  </>\n                }\n                en={\n                  <>\n                    The witness <AvatarName player={witness} /> will have {TIMES.MEMORY} seconds to memorize\n                    the monster's features.\n                    <br />\n                    When the time is up, you will have {TIMES.SKETCH / 60} minutes to draw the monster while\n                    the witness describes it.\n                    <br />\n                    Good luck!\n                  </>\n                }\n              />\n            )}\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTestimonial\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          onSubmitSketch={onSubmitSketch}\n          onSubmitOrientation={onSubmitOrientation}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCompositeSketch;\n","import { RETRATO_FALADO_API } from 'services/adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitOrientationAPIRequest(setStep: GenericFunction) {\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n  });\n\n  return (payload: SubmitOrientationPayload) => {\n    request({\n      action: 'SUBMIT_ORIENTATION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitSketchAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-sketch',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Desenho enviado com sucesso',\n      \"Time's up! Sketch submitted successfully\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your sketch'\n    ),\n  });\n\n  return (payload: SubmitSketchPayload) => {\n    request({\n      action: 'SUBMIT_SKETCH',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVoteAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: RETRATO_FALADO_API.submitAction,\n    actionName: 'submit-vote',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Voto enviado com sucesso', 'Vote submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu voto',\n      'Oops, the application failed to send your vote'\n    ),\n  });\n\n  return (payload: SubmitVotePayload) => {\n    request({\n      action: 'SUBMIT_VOTE',\n      ...payload,\n    });\n  };\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Utils\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\n\nimport { MonsterCard } from './components/MonsterCard';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ViewOr } from 'components/views';\nimport { CanvasResizer, CanvasSVG } from 'components/canvas';\nimport { Avatar } from 'components/avatars';\n\ntype StepVoteProps = {\n  isUserTheWitness: boolean;\n  currentMonster: Monster;\n  onSubmitVote: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n};\n\nexport function StepVote({\n  isUserTheWitness,\n  currentMonster,\n  sketches,\n  onSubmitVote,\n  user,\n  players,\n}: StepVoteProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  return (\n    <div>\n      <Title>\n        <Translate pt=\"Vote!\" en=\"Vote!\" />\n      </Title>\n      <Instruction contained>\n        <ViewOr orCondition={isUserTheWitness}>\n          <Translate\n            pt={\n              <>\n                Você só ganha ponto se você escolher o desenho mais votado.\n                <br />\n                Caso você não escolha o mais votado, o jogador que você escolher ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                You only score if you choose the best sketch (the one with the most votes).\n                <br />\n                If you didn't pick the one, the player you chose gets 1 point.\n              </>\n            }\n          />\n\n          <Translate\n            pt={\n              <>\n                Vote no desenho que mais se aproxima do monstro.\n                <br />\n                Você não pode votar em si mesmo.\n                <br />O desenho (ou desenhos) mais votado receberá 1 ponto!\n              </>\n            }\n            en={\n              <>\n                Vote for the sketch that best represents the monster.\n                <br />\n                You cannot vote for yourself.\n                <br />\n                The sketch (or sketches) with the most votes gets 1 point.\n              </>\n            }\n          />\n        </ViewOr>\n      </Instruction>\n\n      <CanvasResizer />\n\n      <Space className=\"space-container\" align=\"center\">\n        {sketches.map((sketchObj) => {\n          const player = players[sketchObj.playerId];\n          return (\n            <Space direction=\"vertical\" align=\"center\" key={`sketch-for-player-${sketchObj.playerId}`}>\n              <CanvasSVG\n                key={`sketch-${sketchObj.playerId}`}\n                size={canvasSize || canvasWidth}\n                drawing={sketchObj.sketch}\n                className=\"r-sketch\"\n              />\n              <Button\n                type=\"primary\"\n                onClick={() => onSubmitVote({ vote: player.id })}\n                disabled={sketchObj.playerId === user.id}\n              >\n                <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n              </Button>\n            </Space>\n          );\n        })}\n      </Space>\n\n      <Space className=\"space-container\" align=\"center\">\n        <MonsterCard currentMonster={currentMonster} />\n      </Space>\n    </div>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser, useStep } from 'hooks';\nimport { useOnSubmitVoteAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepVote } from './StepVote';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseEvaluation({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onSubmitVote = useOnSubmitVoteAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.EVALUATION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"choice\"\n          title={translate('Vote!', 'Vote!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={<>Vote no desenho que você acha que mais parece com o monstro meliante.</>}\n              en={<>Vote for the sketch that best represents the monster.</>}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepVote\n          isUserTheWitness={isUserTheWitness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          onSubmitVote={onSubmitVote}\n          user={user}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseEvaluation;\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\n\ntype MonsterSketchesProps = {\n  sketches: Sketch[];\n  players: Players;\n  canvasSize: number;\n  canvasWidth: number;\n};\n\nexport function MonsterSketches({ sketches, players, canvasSize, canvasWidth }: MonsterSketchesProps) {\n  return (\n    <>\n      {sketches.map((sketchObj) => {\n        const player = players[sketchObj.playerId];\n        return (\n          <Space\n            key={`monster-sketch-item-${sketchObj.playerId}`}\n            direction=\"vertical\"\n            align=\"center\"\n            className=\"r-monster-sketch\"\n          >\n            <CanvasSVG\n              key={`sketch-${sketchObj.playerId}`}\n              size={canvasSize || canvasWidth}\n              drawing={sketchObj.sketch}\n              className=\"r-sketch\"\n            />\n            <div>\n              <Avatar id={player.avatarId} size=\"small\" /> {player.name}\n            </div>\n          </Space>\n        );\n      })}\n    </>\n  );\n}\n","// Utils\nimport { useCardWidth, useGlobalState } from 'hooks';\n// Components\n\nimport { MonsterCard } from './components/MonsterCard';\nimport { MonsterSketches } from './components/MonsterSketches';\nimport { Space } from 'antd';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { AvatarName } from 'components/avatars';\nimport { TimedButton } from 'components/buttons';\n\ntype StepResultsProps = {\n  currentMonster: Monster;\n  goToNextStep: GenericFunction;\n  sketches: Sketch[];\n  user: Player | PlainObject;\n  players: Players;\n  mostVotes: PlayerId[];\n  witnessVote: any;\n  witness: Player | PlainObject;\n};\n\ntype Sketches = {\n  mostVotedSketches: Sketch[];\n  otherSketches: Sketch[];\n};\n\nexport function StepResults({\n  sketches,\n  players,\n  currentMonster,\n  goToNextStep,\n  mostVotes,\n  witnessVote,\n  witness,\n}: StepResultsProps) {\n  const canvasWidth = useCardWidth(Math.min(Object.keys(players).length, 6), 16, 150, 500);\n  const [canvasSize] = useGlobalState('canvasSize');\n\n  const { mostVotedSketches, otherSketches } = sketches.reduce(\n    (acc: Sketches, sketch) => {\n      if (mostVotes.includes(sketch.playerId)) {\n        acc.mostVotedSketches.push(sketch);\n      } else {\n        acc.otherSketches.push(sketch);\n      }\n      return acc;\n    },\n    {\n      mostVotedSketches: [],\n      otherSketches: [],\n    }\n  );\n\n  return (\n    <Step fullWidth>\n      <Title>\n        {mostVotes.length > 1 ? (\n          <Translate\n            pt=\"Os monstros mais votados foram...\"\n            en=\"The monsters who got the most votes were...\"\n          />\n        ) : (\n          <Translate pt=\"O monstro mais votado foi...\" en=\"The monster who got the most votes was...\" />\n        )}\n      </Title>\n\n      <Instruction contained>\n        {mostVotes.length > 1 ? (\n          <Translate pt=\"Esses jogadores ganharam 3 pontos cada.\" en=\"These players get 3 points each.\" />\n        ) : (\n          <Translate pt=\"Esse jogador ganha 3 pontos.\" en=\"This player gets 3 points.\" />\n        )}\n      </Instruction>\n\n      <div className=\"r-monster-list\">\n        <MonsterCard currentMonster={currentMonster} style={{ width: `${canvasWidth * 1.5}px` }} />\n        <MonsterSketches\n          sketches={mostVotedSketches}\n          players={players}\n          canvasSize={canvasSize}\n          canvasWidth={canvasWidth}\n        />\n      </div>\n\n      <Instruction contained>\n        {mostVotes.includes(witnessVote) ? (\n          <Translate\n            pt={\n              <>\n                A testemunha <AvatarName player={witness} /> votou no mais votado, logo, é uma testemunha\n                confiável e ganha 3 pontos também.\n              </>\n            }\n            en={\n              <>\n                The witness <AvatarName player={witness} /> voted with the group which means s(he) is a\n                credible witness and gets 3 points as well.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                A testemunha achou que o desenho de <AvatarName player={players[witnessVote]} /> foi o melhor,\n                esse jogador ganha 1 ponto.\n              </>\n            }\n            en={\n              <>\n                The witness thought that <AvatarName player={players[witnessVote]} />\n                's sketch was the best, so s(he) gets 1 point.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <TimedButton duration={30} onExpire={goToNextStep} onClick={goToNextStep}>\n        <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n      </TimedButton>\n\n      <Title level={3} className=\"r-other-sketches-title\">\n        <Translate pt=\"Outros desenhos\" en=\"Other sketches\" />\n      </Title>\n\n      <Space className=\"space-container\" align=\"center\">\n        <MonsterSketches\n          sketches={otherSketches}\n          players={players}\n          canvasSize={canvasSize / 1.5}\n          canvasWidth={canvasWidth / 1.5}\n        />\n      </Space>\n    </Step>\n  );\n}\n","import { AdminNextRoundButton } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { RankingBoard } from 'components/ranking';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\n\ntype StepRankingProps = {\n  ranking: any;\n  players: Players;\n  round: GameRound;\n};\n\nexport function StepRanking({ ranking, players, round }: StepRankingProps) {\n  return (\n    <Step fullWidth>\n      <Title>Ranking</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Distribuição de pontos: Mais votado | Votou com o grupo | Votado pela testemunha\"\n          en=\"Points Distribution: Most votes | Voted with the group | Voted by the witness\"\n        />\n      </Instruction>\n\n      <RankingBoard ranking={ranking} players={players} />\n      <AdminNextRoundButton round={round} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useWhichPlayerIsThe, useUser, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepResults } from './StepResults';\nimport { StepRanking } from './StepRanking';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n  const user = useUser(players);\n\n  const isUserReady = useIsUserReady(players, state);\n  const [witness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.RETRATO_FALADO.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"quality-seal\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt={<>E o mais votado é...</>} en={<>And the one who got the most votes is...</>} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          witness={witness}\n          currentMonster={state.currentMonster}\n          sketches={state.sketches}\n          mostVotes={state.mostVotes}\n          witnessVote={state.witnessVote}\n          user={user}\n          players={players}\n          goToNextStep={goToNextStep}\n        />\n\n        {/* Step 2 */}\n        <StepRanking ranking={state.ranking} players={players} round={state.round} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Hooks\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { useCardWidth } from 'hooks';\n// Components\nimport { MonsterSketches } from './components/MonsterSketches';\n\nfunction PhaseGameOver({ state, info, players }: PhaseProps) {\n  const canvasWidth = useCardWidth(6, 16, 150, 500);\n\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\">\n      <div>\n        <Title level={2}>\n          <Translate pt=\"Desenhos\" en=\"Sketches\" />\n        </Title>\n        <div className=\"r-gallery\">\n          <MonsterSketches\n            sketches={state.gallery}\n            players={players}\n            canvasSize={canvasWidth}\n            canvasWidth={canvasWidth}\n          />\n        </div>\n      </div>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseCompositeSketch from './PhaseCompositeSketch';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionRetratoFalado({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.RETRATO_FALADO.COMPOSITE_SKETCH:\n        return PhaseCompositeSketch;\n      case PHASES.RETRATO_FALADO.EVALUATION:\n        return PhaseEvaluation;\n      case PHASES.RETRATO_FALADO.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.RETRATO_FALADO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionRetratoFalado;\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\n\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","className","pt","en","value","min","max","step","onChange","CanvasSVG","drawing","size","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","xmlns","viewBox","overflow","style","width","index","d","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","handleMouseDown","e","current","pos","target","getStage","getPointerPosition","Math","round","handleMouseMove","point","lastLine","concat","splice","handleMouseUp","lastLineEntry","strokeWidthBySize","small","medium","large","direction","align","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","clsx","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","Card","children","header","footer","color","randomColor","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","startsWith","backgroundColor","FloatingHand","subtitle","type","isExpanded","setIsExpanded","translate","useLanguage","onMouseOver","onMouseLeave","alt","ImageBlurButton","cardId","useBlurCards","blurCard","isBlurEnabled","placement","title","ghost","EyeInvisibleOutlined","ImageBlurButtonContainer","props","ImageCard","imageId","cardWidth","preview","shouldBeBlurred","fallbackName","imageURL","replace","isBlurred","src","process","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardHand","hand","onSelectCard","selectButtonLabel","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","useCardWidth","Boolean","icon","DownSquareOutlined","ImageCardBack","previewImageId","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","shape","UpCircleOutlined","custom","TimerBar","steps","total","status","percentage","percent","showInfo","marginBottom","undefined","View","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","VIEWS","SKETCH_TIME","TIMES","MEMORY","ANNOUNCEMENT","SKETCH","EXTRA","TOTAL","MEMORY_TIME","MEMORY_MARK","ANNOUNCEMENT_TIME","ANNOUNCEMENT_MARK","SKETCH_MARK","ViewAnnouncement","isUserTheWitness","unskippable","duration","onClose","ViewLastSeconds","remainingTime","strokeColor","contained","MonsterCard","currentMonster","monsterOrientation","setMonsterOrientation","useEffect","orientation","id","RotateRightOutlined","RotateLeftOutlined","ViewSketching","remainingSketchingTime","ViewWitnessing","remainingWitnessingTime","StepTestimonial","onSubmitSketch","onSubmitOrientation","view","setView","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","sketch","stringify","timer","minutes","seconds","players","state","info","useStep","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","witness","request","useAPICall","apiFunction","RETRATO_FALADO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitSketchAPIRequest","useOnSubmitOrientationAPIRequest","phase","allowedPhase","PHASES","conditions","onPressButton","buttonText","time","circleColor","player","currentRound","StepVote","sketches","onSubmitVote","user","canvasWidth","Object","keys","floor","sketchObj","playerId","vote","avatarId","name","useUser","useOnSubmitVoteAPIRequest","MonsterSketches","StepResults","mostVotes","witnessVote","reduce","acc","includes","mostVotedSketches","otherSketches","fullWidth","level","StepRanking","ranking","announcementIcon","gallery","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseCompositeSketch","PhaseEvaluation","PhaseReveal","PhaseGameOver","PageError","CrownFilled","ref","React","AntdIcon","_objectSpread","CrownFilledSvg","displayName"],"sourceRoot":""}