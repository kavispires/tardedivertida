{"version":3,"file":"static/js/page-hub.6fec7433.chunk.js","mappings":"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","sources":["components/auth/LogoutButton.tsx","components/general/GameTags.tsx","hooks/useDevFeatures.ts","pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx","pages/Hub/components/GameCustomizations.tsx","pages/Hub/components/CreateGameModal.tsx","hooks/useRedirectToNewGame.ts","pages/Hub/components/GameCard.tsx","pages/Hub/components/DevEmulatorAlert.tsx","pages/Hub/components/Filters.tsx","pages/Hub/Hub.tsx"],"sourcesContent":["import { useMutation } from '@tanstack/react-query';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { App, Button, ButtonProps, Popconfirm } from 'antd';\n// Services\nimport { signOut } from 'services/firebase';\n// Components\nimport { Translate } from 'components/language';\n// Services\n\nexport function LogoutButton(props: ButtonProps) {\n  const navigate = useNavigate();\n  const { message } = App.useApp();\n\n  const { isPending, mutate } = useMutation({\n    mutationKey: ['sign-out'],\n    mutationFn: async () => await signOut(),\n    onSuccess: () => {\n      navigate('/');\n    },\n    onError: (error: any) => {\n      message.error(`Something went wrong: ${JSON.stringify(error, null, 2)}`);\n    },\n  });\n\n  return (\n    <Popconfirm\n      title={<Translate pt=\"Tem certeza que quer deslogar?\" en=\"Are you sure you want to log out?\" />}\n      onConfirm={() => mutate()}\n      key=\"logout-button\"\n    >\n      <Button danger ghost {...props} loading={isPending}>\n        Logout\n      </Button>\n    </Popconfirm>\n  );\n}\n","// Ant Design Resources\nimport { Space, SpaceProps, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { TAG_DICT } from 'utils/constants';\n\nconst sortTags = (tags: string[]) => {\n  const sortedTags: string[] = [];\n\n  tags.forEach((tag) => {\n    if (TAG_DICT?.[tag]?.index !== undefined) {\n      sortedTags[TAG_DICT[tag].index] = tag;\n    } else if (sortedTags.length < 18) {\n      sortedTags[18] = tag;\n    } else {\n      sortedTags.push(tag);\n    }\n  });\n\n  return sortedTags.filter((v) => Boolean(v));\n};\n\ntype GameTagsProps = {\n  tags: string[];\n  gameCode: GameCode;\n} & SpaceProps;\n\nexport function GameTags({ tags, gameCode, ...rest }: GameTagsProps) {\n  const { language } = useLanguage();\n  const sortedTags = sortTags(tags);\n\n  return (\n    <Space wrap {...rest}>\n      {sortedTags.map((tag) => (\n        <Tag key={`${gameCode}-${tag}`} color={TAG_DICT[tag]?.color}>\n          {TAG_DICT[tag]?.label[language]}\n        </Tag>\n      ))}\n    </Space>\n  );\n}\n","// Internal\nimport { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useLocation, useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Segmented } from 'antd';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Internal\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\" wrap>\n            {extra}\n          </Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Switch, Radio, Checkbox } from 'antd';\n// Types\nimport type { GameInfo, GameInfoOption } from 'types/game-info';\n// Components\nimport { Translate } from 'components/language';\n// Adapters\n// Hooks\n// Constants\n\ntype GameCustomizationsProps = {\n  options?: GameInfo['options'];\n  disabled: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\n\nexport function GameCustomizations({\n  options = [],\n  disabled,\n  onChangeOptions,\n  selectedOptions,\n}: GameCustomizationsProps) {\n  if (!options) {\n    return (\n      <div className=\"create-game-modal-options create-game-modal-options__no-options\">\n        <Typography.Text>\n          <Translate pt=\"Este jogo não possui customizações\" en=\"This game does not support customizations\" />\n        </Typography.Text>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"create-game-modal-options\">\n      <Typography.Title level={5} className=\"create-game-modal-options__title\">\n        <Translate pt=\"Opções:\" en=\"Options:\" />\n      </Typography.Title>\n      <div className=\"create-game-modal-options__list\">\n        {(options ?? []).map((option) => (\n          <Typography.Paragraph\n            key={`option-${option.label}`}\n            className={clsx(\n              'create-game-modal-options__option',\n              option.disabled && 'create-game-modal-options__option--disabled'\n            )}\n          >\n            <div className=\"create-game-modal-options__label\">\n              <span>{option.label}</span>\n              {option.kind !== 'switch' && Boolean(option.description) && (\n                <div className=\"create-game-modal-options__option-description\">{option.description}</div>\n              )}\n            </div>\n\n            {option.kind === 'switch' && (\n              <SwitchOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n            {option.kind === 'radio' && (\n              <RadioOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n            {option.kind === 'checkbox' && (\n              <CheckboxOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n\n            {option.kind === 'switch' && Boolean(option.description) && (\n              <span className=\"create-game-modal-options__option-description\">{option.description}</span>\n            )}\n          </Typography.Paragraph>\n        ))}\n      </div>\n    </div>\n  );\n}\n\ntype OptionProps = {\n  option: GameInfoOption;\n  disabled?: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\n\nfunction SwitchOptions({ option, disabled, onChangeOptions, selectedOptions }: OptionProps) {\n  return (\n    <>\n      <span\n        className={clsx(\n          'create-game-modal-options__off',\n          !selectedOptions[option.key] && 'create-game-modal-options--selected'\n        )}\n      >\n        {option?.values[0].label ?? ''}\n      </span>\n      <Switch disabled={disabled || option.disabled} onChange={(e) => onChangeOptions(option.key, e)} />\n      <span\n        className={clsx(\n          'create-game-modal-options__on',\n          selectedOptions[option.key] && 'create-game-modal-options--selected'\n        )}\n      >\n        {option?.values[1].label ?? ''}\n      </span>\n    </>\n  );\n}\n\nfunction RadioOptions({ option, disabled, onChangeOptions }: OptionProps) {\n  return (\n    <Radio.Group\n      disabled={disabled || option.disabled}\n      onChange={(e) => onChangeOptions(option.key, e.target.value)}\n      defaultValue={option.values[0].value}\n      className=\"create-game-modal-options__selections\"\n    >\n      {option.values.map((value) => (\n        <Radio key={String(value.value)} value={value.value}>\n          {value.label}\n        </Radio>\n      ))}\n    </Radio.Group>\n  );\n}\n\nfunction CheckboxOptions({ option, disabled, onChangeOptions }: OptionProps) {\n  return (\n    <Checkbox.Group\n      disabled={disabled || option.disabled}\n      onChange={(v) => onChangeOptions(option.key, v)}\n      className=\"create-game-modal-options__selections\"\n      options={option.values}\n    />\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useCopyToClipboard } from 'react-use';\n// Ant Design Resources\nimport { Image, Modal, Button, Divider, Space, Alert, App } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useRedirectToNewGame } from 'hooks/useRedirectToNewGame';\n// Services\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { Loading } from 'components/loaders';\nimport { Instruction, Title } from 'components/text';\n// Internal\nimport { GameCustomizations } from './GameCustomizations';\n// Adapters\n\nconst updateLocal24hGameIds = (latestGameIds: NumberDictionary, newId: GameId) => {\n  const now = Date.now();\n  const past24Hours = now - 1000 * 60 * 60 * 24;\n  const cleanedUpIds = Object.entries(latestGameIds ?? {}).reduce((acc: PlainObject, [key, timestamp]) => {\n    if (timestamp > past24Hours) {\n      acc[key] = timestamp;\n    }\n    return acc;\n  }, {});\n  return {\n    ...cleanedUpIds,\n    [newId]: now,\n  };\n};\n\nconst latestGameBeforeNewOne = (latestGameIds: NumberDictionary) => {\n  const idsObjectList = Object.entries(latestGameIds).map(([gameId, createdAt]) => ({ gameId, createdAt }));\n  if (idsObjectList.length < 2) {\n    return null;\n  }\n\n  const orderedList = orderBy(idsObjectList, 'createdAt', 'desc');\n  const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n  const currentMilliseconds = Date.now();\n\n  // Check if game is too old\n  if (orderedList[1].createdAt - currentMilliseconds > twoHoursInMilliseconds) {\n    return null;\n  }\n\n  return orderedList[1].gameId;\n};\n\nconst getOptionsDefaultValues = (\n  options: GameInfo['options']\n): Record<string, boolean | string | string[]> => {\n  return (\n    options?.reduce((acc: Record<string, boolean | string | string[]>, option) => {\n      if (option.kind === 'switch') {\n        acc[option.key] = false;\n      }\n      if (option.kind === 'radio') {\n        acc[option.key] = option.values[0].value;\n      }\n      if (option.kind === 'checkbox') {\n        acc[option.key] = [];\n      }\n      return acc;\n    }, {}) ?? {}\n  );\n};\n\ntype CreateGameFlowProps = {\n  gameInfo: GameInfo;\n};\n\nexport function CreateGameFlow({ gameInfo }: CreateGameFlowProps) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => setOpen(true)} block>\n        <Translate pt=\"Criar\" en=\"Create\" />\n      </Button>\n      {open && <CreateGameModal gameInfo={gameInfo} open={open} setOpen={setOpen} />}\n    </>\n  );\n}\n\ntype CreateGameModalProps = {\n  gameInfo: GameInfo;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n};\n\nfunction CreateGameModal({ gameInfo, open, setOpen }: CreateGameModalProps): JSX.Element {\n  const { message, notification } = App.useApp();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  const { language, translate } = useLanguage();\n  const { setLoader } = useLoading();\n\n  const [isLoading, setLoading] = useState(false);\n  const [gameId, setGameId] = useState(null);\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUserName] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [options, setOptions] = useState(getOptionsDefaultValues(gameInfo.options));\n  const [latestGameIds, setLatestGameIds] = useGlobalLocalStorage('latestGameIds');\n  const previousGameId = latestGameBeforeNewOne(latestGameIds);\n\n  const { startRedirect, isSettingRedirect, wasRedirectSuccessful } = useRedirectToNewGame();\n\n  useEffect(() => {\n    if (state.value && gameId) {\n      message.info(`Copied to clipboard: ${state.value}`);\n    }\n  }, [state, gameId, message]);\n\n  const onChangeOptions = (key: string, value: boolean | string | string[]) => {\n    setOptions((s) => ({\n      ...s,\n      [key]: value,\n    }));\n  };\n\n  const createGame = async () => {\n    try {\n      setLoader('create', true);\n      setLoading(true);\n\n      const response: PlainObject = await HOST_API.run({\n        action: HOST_API_ACTIONS.CREATE_GAME,\n        gameName: gameInfo.gameName,\n        language,\n        options,\n        version: gameInfo.version,\n      });\n      if (response.data.gameId) {\n        setGameId(response.data.gameId);\n        setUserId(null);\n        setUserName('');\n        setUserAvatarId('');\n        setLatestGameIds(updateLocal24hGameIds(latestGameIds, response.data.gameId));\n        const baseUrl = window.location.href.split(pathname)[0];\n        copyToClipboard(`${baseUrl}/${response.data.gameId}`);\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Aplicativo encontrou um erro ao tentar criar o jogo',\n          'The application found an error while trying to create a game',\n          language\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      setOpen(false);\n    } finally {\n      setLoading(false);\n      setLoader('create', false);\n    }\n  };\n\n  const onConfirmGame = async () => {\n    if (gameId) {\n      navigate(`/${gameId}`);\n    } else {\n      message.info(\n        translate('Péra! O jogo ainda não foi inicializado.', 'Wait! The game has not been created')\n      );\n    }\n  };\n\n  return (\n    <Modal\n      title={`${translate('Criando novo jogo', 'Creating new game')}: ${gameInfo.title[language]}`}\n      open={open}\n      onCancel={() => setOpen(false)}\n      onOk={onConfirmGame}\n      okButtonProps={{ disabled: Boolean(!gameId) || isSettingRedirect }}\n      maskClosable={false}\n    >\n      <>\n        <Image\n          alt={gameInfo.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          className=\"round-corners\"\n        />\n\n        {!gameId && (\n          <Instruction>\n            <Translate pt=\"Você está criando um jogo em:\" en=\"You are creating a game in:\" />{' '}\n            <LanguageSwitch />\n          </Instruction>\n        )}\n\n        <GameCustomizations\n          options={gameInfo.options}\n          disabled={isLoading || Boolean(gameId)}\n          onChangeOptions={onChangeOptions}\n          selectedOptions={options}\n        />\n\n        <Divider />\n\n        {isLoading && (\n          <>\n            <Instruction>\n              <Translate pt=\"O jogo está sendo criado...\" en=\"The game session is being created\" />\n            </Instruction>\n            <Loading message={translate('Gerando...', 'Generating...')} margin />\n          </>\n        )}\n\n        {gameInfo.version.startsWith('alpha') && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message={\n              <Translate\n                pt=\"Este jogo está em alpha, não o jogue\"\n                en=\"This game is still in alpha and shouldn't be played\"\n              />\n            }\n          />\n        )}\n\n        {gameInfo.version.startsWith('beta') && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message={\n              <Translate\n                pt=\"Este jogo está em beta, prossiga com cuidado\"\n                en=\"This game is in beta and bugs might be everywhere\"\n              />\n            }\n          />\n        )}\n\n        {Boolean(gameId) ? (\n          <div>\n            <Title className=\"center\">\n              <Translate pt=\"Jogo inicializado\" en=\"Game Initialized\" />: {gameId}\n            </Title>\n            <Instruction>\n              {previousGameId && !wasRedirectSuccessful && (\n                <Alert\n                  type=\"info\"\n                  showIcon\n                  message={\n                    <>\n                      <Translate\n                        pt={<>Você quer redirecionar jogadores em {previousGameId} para essa nova partida?</>}\n                        en={<>Redirect players in {previousGameId} to this new play?</>}\n                      />\n                      <Button\n                        size=\"large\"\n                        onClick={() => {\n                          startRedirect(previousGameId ?? '', gameId ?? '', gameInfo.gameName);\n                        }}\n                        disabled={!gameId || !previousGameId}\n                        loading={isSettingRedirect}\n                      >\n                        <Translate pt=\"Redirecione-os\" en=\"Redirect them\" />\n                      </Button>\n                    </>\n                  }\n                />\n              )}\n              {wasRedirectSuccessful && (\n                <Alert\n                  type=\"info\"\n                  showIcon\n                  message={\n                    <Translate\n                      pt={\n                        <>\n                          Jogadores em {previousGameId} foram convidados para o jogo {gameId}\n                        </>\n                      }\n                      en={\n                        <>\n                          Players in {previousGameId} have been invited to {gameId}\n                        </>\n                      }\n                    />\n                  }\n                />\n              )}\n            </Instruction>\n          </div>\n        ) : (\n          <Space className=\"space-container\" align=\"center\">\n            <Button type=\"primary\" size=\"large\" disabled={isLoading} onClick={createGame}>\n              <Translate pt=\"Criar Jogo\" en=\"Create Game\" />\n            </Button>\n          </Space>\n        )}\n      </>\n    </Modal>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Types\nimport type { GameMeta } from 'types/game';\n// Services\nimport { GAME_API, GAME_API_COMMON_ACTIONS, HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Internal\nimport { useCurrentUserContext } from './useCurrentUserContext';\n\ntype GameMetaResponse = {\n  data: GameMeta;\n};\n\nexport function useRedirectToNewGame() {\n  const { notification } = App.useApp();\n  const { currentUser } = useCurrentUserContext();\n  const [happenedOnce, setHappenedOnce] = useState(false);\n  const [newGame, setNewGame] = useState({\n    gameId: '',\n    gameName: '',\n  });\n\n  const mutation = useMutation<unknown, Error, PlainObject, unknown>({\n    mutationKey: ['oldState', newGame.gameId],\n    mutationFn: async ({ prevGameId, payload }) => {\n      const metaResponse = (await GAME_API.run({\n        action: GAME_API_COMMON_ACTIONS.LOAD_GAME,\n        gameId: prevGameId,\n      })) as GameMetaResponse;\n\n      const meta = metaResponse.data;\n\n      return await HOST_API.run({\n        gameId: prevGameId,\n        gameName: meta?.gameName ?? '',\n        playerId: currentUser.id,\n        action: HOST_API_ACTIONS.FORCE_STATE_PROPERTY,\n        state: payload,\n      });\n    },\n    onSuccess: async () => {\n      notification.success({\n        message: 'Redirect successfully triggered',\n      });\n    },\n    onError: (e: any) => {\n      console.error(e);\n      notification.error({\n        message: 'Failed to load previous game to continue the redirect',\n        description: JSON.stringify(e.message),\n      });\n    },\n  });\n\n  const startRedirect = async (prevGameId: GameId, newGameId: GameId, newGameName: GameName) => {\n    if (happenedOnce) {\n      notification.error({\n        message: 'Redirect has failed to trigger',\n      });\n      return;\n    }\n    setNewGame({\n      gameId: newGameId,\n      gameName: newGameName,\n    });\n\n    await mutation.mutateAsync({\n      prevGameId,\n      gameName: newGameName,\n      payload: {\n        redirect: {\n          redirectAt: Date.now(),\n          gameId: newGameId,\n          gameName: newGameName,\n        },\n      },\n    });\n    setHappenedOnce(true);\n  };\n\n  return {\n    isSettingRedirect: mutation.isPending,\n    startRedirect,\n    wasRedirectSuccessful: mutation.isSuccess,\n  };\n}\n","// Ant Design Resources\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport { Card, Image, Divider, Badge, Space } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv, truncateRecommended } from 'utils/helpers';\n// Components\nimport { GameTags } from 'components/general/GameTags';\nimport { RulesModal } from 'components/rules';\n// Internal\nimport { CreateGameFlow } from './CreateGameModal';\n\nconst getVersionColor = (version: string) => {\n  if (version.includes('dev')) {\n    return '#6cb3f6';\n  }\n\n  if (version.includes('alpha')) {\n    return '#F97659';\n  }\n\n  if (version.includes('beta')) {\n    return '#F9D859';\n  }\n\n  const major = Number(version.split('.')[0]);\n\n  if (isNaN(major)) {\n    return '#96A0A3';\n  }\n\n  if (major === 0) {\n    return '#F9D859';\n  }\n\n  if (major === 1) {\n    return '#72D984';\n  }\n\n  if (major === 2) {\n    return '#7CBD51';\n  }\n\n  if (major >= 3) {\n    return '#7CBD51';\n  }\n\n  return '#96A0A3';\n};\n\ntype GameCardProps = {\n  game: GameInfo;\n  isAdmin?: boolean;\n};\n\nexport function GameCard({ game, isAdmin = true }: GameCardProps) {\n  const { language, translate } = useLanguage();\n\n  const duration = calculateGameAverageDuration(game);\n\n  return (\n    <Card\n      key={game.gameName}\n      className=\"game-card\"\n      cover={\n        <Badge.Ribbon text={game.version} color={getVersionColor(game.version)}>\n          <Image\n            alt={game.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${game.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          />\n        </Badge.Ribbon>\n      }\n    >\n      <div className=\"game-card__contents\">\n        <Space direction=\"vertical\">\n          <Card.Meta\n            title={\n              <span className=\"game-card__title\" title={game.title[language]}>\n                {isDevEnv && `[${game.gameCode}]`} {game.title[language]}\n              </span>\n            }\n            description={`${translate('Baseado em', 'Based on')} ${game.basedOn\n              .split('')\n              .reverse()\n              .join('')}`}\n          />\n\n          <Card.Meta className=\"game-card__description\" description={game.summary[language]} />\n\n          {Boolean(game.rules?.[language]?.length > 1) && (\n            <RulesModal\n              gameInfo={game}\n              buttonProps={{ size: 'small', className: 'game-card__margin-bottom' }}\n            />\n          )}\n\n          <GameTags\n            wrap\n            size={[1, 6]}\n            style={{ display: 'flex' }}\n            gameCode={game.gameCode}\n            tags={game.tags}\n          />\n        </Space>\n      </div>\n\n      <div className=\"game-card__actions\">\n        {game.duration && (\n          <Card.Meta\n            description={\n              <>\n                <ClockCircleOutlined /> {duration.min} min - {duration.max} min (Avg: {duration.ideal} min)\n              </>\n            }\n          />\n        )}\n\n        <Divider className=\"game-card__divider\" />\n\n        <Space direction=\"vertical\">\n          <Card.Meta\n            description={translate(\n              `Para ${game.playerCount.min}-${game.playerCount.max} jogadores`,\n              `For ${game.playerCount.min}-${game.playerCount.max} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count\"\n            description={translate(\n              `Melhor com ${game.playerCount.best || '?'} jogadores`,\n              `Best wih ${game.playerCount.best || '?'} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count game-card__margin-bottom\"\n            description={translate(\n              `Recomendado jogar com ${truncateRecommended(game.playerCount.recommended)}`,\n              `Recommended with ${truncateRecommended(game.playerCount.recommended)}`\n            )}\n          />\n        </Space>\n\n        {isAdmin && (\n          <div style={{ marginTop: '1rem' }}>\n            {['dev', 'beta', 'stable'].includes(game.release) && <CreateGameFlow gameInfo={game} />}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","import { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Alert, Button, Modal } from 'antd';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\n\n/**\n * The emulator only properly works if using the local ip, to allow multi device testing\n * including mobile, this component will display an alert in case the current port is localhost\n */\nexport function DevEmulatorAlert() {\n  const { isDevEnv } = useDevFeatures();\n  const [stay, setStay] = useState(false);\n  const [usingFirestoreEmulator] = useGlobalState('usingFirestoreEmulator');\n  const [usingFunctionsEmulator] = useGlobalState('usingFunctionsEmulator');\n\n  const ip = process.env.REACT_APP_LOCAL_IP;\n  const displayDevWarningMessage = isDevEnv && window.location.hostname !== usingFirestoreEmulator;\n  const displayDevWarningMessageFunctions = isDevEnv && window.location.hostname !== usingFunctionsEmulator;\n  const { port, pathname, hash, protocol } = window.location;\n  const newPath = `${ip}:${port}${pathname}/${hash}`.replace('//', '/');\n  const emulatorUrl = `${protocol}//${newPath}`;\n\n  useEffectOnce(() => {\n    if (!stay && isDevEnv && displayDevWarningMessage) {\n      Modal.confirm({\n        title: 'Wrong Dev Environment',\n        icon: <ExclamationCircleOutlined />,\n        content: 'You are in a development environment and not using the Firestore emulator.',\n        okText: 'Switch Routes',\n        cancelText: 'Stay in Localhost',\n        onOk: () => {\n          setStay(true);\n          window.location.href = emulatorUrl;\n        },\n      });\n    }\n  });\n\n  if (!isDevEnv) return <></>;\n\n  return (\n    <>\n      {displayDevWarningMessage && (\n        <Alert\n          message={\n            <>\n              You are in a development environment and not using the Firestore emulator.{' '}\n              <Button href={emulatorUrl} type=\"link\">\n                Switch Routes\n              </Button>\n            </>\n          }\n          type=\"error\"\n          showIcon\n          banner\n        />\n      )}\n      {displayDevWarningMessageFunctions && (\n        <Alert\n          message={\n            <>\n              You are in a development environment and not using the Functions emulator.{' '}\n              <Button href={emulatorUrl} type=\"link\">\n                Switch Routes\n              </Button>\n            </>\n          }\n          type=\"warning\"\n          showIcon\n          banner\n        />\n      )}\n      {!displayDevWarningMessageFunctions && !displayDevWarningMessage && (\n        <Alert message={<>You are running emulators safely.</>} type=\"success\" showIcon banner />\n      )}\n    </>\n  );\n}\n","import { DefaultOptionType } from 'antd/lib/select';\nimport { capitalize } from 'lodash';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { FilterOutlined } from '@ant-design/icons';\nimport { InputNumber, Select, Space, TreeSelect } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { SEPARATOR, TAG_DICT } from 'utils/constants';\n\nconst { SHOW_PARENT } = TreeSelect;\n\ntype FiltersProps = {\n  setTagFilters: GenericFunction;\n  setNumberFilters: GenericFunction;\n  availabilityCount: number;\n};\nexport function Filters({ availabilityCount, setTagFilters, setNumberFilters }: FiltersProps) {\n  const onNumberFiltersUpdate = (key: string, value: number) => {\n    setNumberFilters((prevState: NumberDictionary) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onPlayingSelectChange = (value: string) => {\n    onNumberFiltersUpdate('recommendedWith', Number(value === 'recommended'));\n    onNumberFiltersUpdate('bestWith', Number(value === 'best'));\n  };\n\n  return (\n    <Space className=\"hub-filters\" wrap size=\"middle\">\n      <span>\n        <FilterOutlined /> ({availabilityCount})\n      </span>\n      <Select defaultValue=\"\" style={{ minWidth: '20ch' }} size=\"small\" onChange={onPlayingSelectChange}>\n        <Select.Option value=\"\">Playing with</Select.Option>\n        <Select.Option value=\"recommended\">Recommended with</Select.Option>\n        <Select.Option value=\"best\">Best with</Select.Option>\n      </Select>\n      <div className=\"hub-filters__entry\">\n        <label>Players</label>\n        <InputNumber\n          min={2}\n          max={12}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('players', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Duration</label>\n        <InputNumber\n          min={15}\n          step={15}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('duration', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Tags</label>\n        <TagTreeSelect value={undefined} onTreeSelectChange={setTagFilters} />\n      </div>\n    </Space>\n  );\n}\n\nfunction TagTreeSelect({ value, onTreeSelectChange }: any) {\n  const { dualTranslate } = useLanguage();\n\n  const onChange = (tags: string[]) => {\n    onTreeSelectChange(\n      tags\n      // .map((tag) => {\n      //   if (tag.includes(SEPARATOR)) {\n      //     return tag.split(SEPARATOR);\n      //   }\n      //   return tag;\n      // })\n      // .flat()\n    );\n  };\n\n  const treeData: DefaultOptionType[] = useMemo(\n    () =>\n      Object.values(\n        Object.keys(TAG_DICT).reduce((acc: any, tagKey: string) => {\n          const tagObj = TAG_DICT[tagKey];\n          if (acc[tagObj.group] === undefined) {\n            acc[tagObj.group] = {\n              title: capitalize(tagObj.group),\n              value: tagObj.group,\n              children: [],\n            };\n          }\n\n          acc[tagObj.group].children.push({\n            title: capitalize(dualTranslate(tagObj.label)),\n            value: `${tagObj.group}${SEPARATOR}${tagKey}`,\n          });\n\n          return acc;\n        }, {})\n      ),\n    [dualTranslate]\n  );\n\n  return (\n    <TreeSelect\n      treeData={treeData}\n      value={value}\n      onChange={onChange}\n      treeCheckable={true}\n      showCheckedStrategy={SHOW_PARENT}\n      placeholder=\"Select Game Tags\"\n      size=\"small\"\n      style={{\n        width: '100%',\n        minWidth: '400px',\n      }}\n    />\n  );\n}\n","import { orderBy } from 'lodash';\nimport { DevHeader } from 'pages/Dev/DevHeader';\nimport { useMemo, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Ant Design Resources\nimport { DatabaseFilled } from '@ant-design/icons';\nimport { Typography, Layout, Divider, Row, Col } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { SEPARATOR, TAG_RULES } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv } from 'utils/helpers';\nimport GAME_LIST from 'utils/info';\n// Components\nimport { LogoutButton } from 'components/auth/LogoutButton';\nimport { LanguageSwitch, Translate } from 'components/language';\n// Internal\nimport { GameCard } from './components/GameCard';\nimport { DevEmulatorAlert } from './components/DevEmulatorAlert';\nimport { Filters } from './components/Filters';\n\nfunction Hub() {\n  useTitle('Hub - Tarde Divertida');\n  const { language } = useLanguage();\n  const [tagFilters, setTagFilters] = useState<string[]>([]);\n  const [numberFilters, setNumberFilters] = useState<NumberDictionary>({});\n\n  const gameList = useMemo(\n    () =>\n      Object.values(GAME_LIST).filter((game) => {\n        let result = [];\n\n        // Check player count\n        if (numberFilters.players) {\n          result.push(\n            game.playerCount.min <= numberFilters.players && game.playerCount.max >= numberFilters.players\n          );\n\n          if (numberFilters.bestWith) {\n            result.push(numberFilters.players === game.playerCount.best);\n          }\n\n          if (numberFilters.recommendedWith) {\n            result.push(game.playerCount.recommended.includes(numberFilters.players));\n          }\n        }\n\n        // Check tags\n        // TODO: this does not account for tagGroups and concurrent tags\n        tagFilters.forEach((tagKey) => {\n          const [tagGroup, tag] = tagKey.split(SEPARATOR);\n\n          if (tagGroup && tag && TAG_RULES?.[tagGroup] === 'exclusive') {\n            result.push(game.tags.includes(tag));\n          } else if (tag) {\n            result.push(game.tags.includes(tag));\n          }\n        });\n\n        // Check time\n        if (numberFilters.duration) {\n          const duration = calculateGameAverageDuration(game, numberFilters.players ?? 0);\n\n          if (numberFilters.players) {\n            result.push(\n              numberFilters.duration >= duration.customTime - 10 &&\n                numberFilters.duration <= duration.customTime + 10\n            );\n          } else {\n            result.push(numberFilters.duration >= duration.min && numberFilters.duration <= duration.max);\n          }\n        }\n\n        return result.every(Boolean);\n      }),\n    [tagFilters, numberFilters]\n  );\n\n  const { availableGames, comingSoonGames, devGames } = useMemo(() => {\n    const sortedGameList = orderBy(gameList, [`title.[${language}]`], ['asc']);\n\n    return sortedGameList.reduce(\n      (\n        acc: {\n          availableGames: GameInfo[];\n          devGames: GameInfo[];\n          comingSoonGames: GameInfo[];\n        },\n        game\n      ) => {\n        if (['stable'].includes(game.release)) {\n          acc.availableGames.push(game);\n        } else if (['dev', 'beta'].includes(game.release)) {\n          acc.devGames.push(game);\n        } else {\n          acc.comingSoonGames.push(game);\n        }\n        return acc;\n      },\n      {\n        availableGames: [],\n        devGames: [],\n        comingSoonGames: [],\n      }\n    );\n  }, [gameList, language]);\n  return (\n    <Layout className=\"dev-layout\">\n      <DevHeader\n        title={\n          <>\n            <DatabaseFilled /> Hub\n          </>\n        }\n        subTitle={<Translate pt=\"Selecione um jogo para começar\" en=\"Select a game to start\" />}\n        extra={[\n          <LanguageSwitch key=\"language-switch\" />,\n          <LogoutButton key=\"logout-button\" danger ghost size=\"small\" />,\n        ]}\n      />\n\n      <DevEmulatorAlert />\n\n      <Filters\n        setTagFilters={setTagFilters}\n        setNumberFilters={setNumberFilters}\n        availabilityCount={availableGames.length}\n      />\n\n      <Layout.Content className=\"container\" id=\"main-container\">\n        {isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <RowOfGames games={devGames} />\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Disponíveis\" en=\"Available\" />\n        </Typography.Title>\n        <RowOfGames games={availableGames} />\n\n        <Divider />\n        {!isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <RowOfGames games={devGames} />\n\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Em Breve\" en=\"Coming Soon\" />\n        </Typography.Title>\n        <RowOfGames games={comingSoonGames} />\n      </Layout.Content>\n    </Layout>\n  );\n}\n\ntype RowOfGamesProps = {\n  games: GameInfo[];\n};\n\nfunction RowOfGames({ games }: RowOfGamesProps) {\n  if (games.length === 0) {\n    return (\n      <Typography.Text type=\"secondary\">\n        <Translate pt=\"Nenhum jogo encontrado nessa categoria\" en=\"No games found in this category\" />\n      </Typography.Text>\n    );\n  }\n\n  return (\n    <Row gutter={[8, 16]}>\n      {games.map((game: GameInfo) => (\n        <Col key={game.gameName} xs={24} sm={12} md={8} lg={8} xl={6} xxl={4}>\n          <GameCard game={game} isAdmin={['dev', 'beta', 'stable'].includes(game.release)} />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nexport default Hub;\n"],"names":["LogoutButton","props","navigate","useNavigate","message","App","useApp","useMutation","mutationKey","mutationFn","signOut","onSuccess","onError","error","JSON","stringify","isPending","mutate","title","pt","en","onConfirm","danger","ghost","loading","GameTags","tags","gameCode","rest","language","useLanguage","sortedTags","forEach","tag","undefined","TAG_DICT","index","length","push","filter","v","Boolean","sortTags","wrap","map","color","label","useDevFeatures","useGlobalState","isDebugEnabled","setIsDebugEnabled","isDevEnv","toggleDevFeatures","s","DevMenu","pathname","useLocation","options","value","disabled","defaultValue","onChange","path","DevHeader","subTitle","extra","className","GameCustomizations","onChangeOptions","selectedOptions","Title","level","option","Paragraph","clsx","kind","description","SwitchOptions","RadioOptions","CheckboxOptions","Text","key","values","e","target","String","Group","updateLocal24hGameIds","latestGameIds","newId","now","Date","past24Hours","cleanedUpIds","Object","entries","reduce","acc","timestamp","CreateGameFlow","gameInfo","useState","open","setOpen","type","onClick","block","CreateGameModal","notification","useCopyToClipboard","state","copyToClipboard","translate","setLoader","useLoading","isLoading","setLoading","gameId","setGameId","setUserId","setUserName","setUserAvatarId","getOptionsDefaultValues","setOptions","useGlobalLocalStorage","setLatestGameIds","previousGameId","idsObjectList","createdAt","orderedList","orderBy","currentMilliseconds","latestGameBeforeNewOne","currentUser","useCurrentUserContext","happenedOnce","setHappenedOnce","gameName","newGame","setNewGame","mutation","prevGameId","payload","GAME_API","run","action","GAME_API_COMMON_ACTIONS","LOAD_GAME","metaResponse","meta","data","HOST_API","playerId","id","HOST_API_ACTIONS","FORCE_STATE_PROPERTY","success","console","startRedirect","newGameId","newGameName","mutateAsync","redirect","redirectAt","isSettingRedirect","wasRedirectSuccessful","isSuccess","useRedirectToNewGame","useEffect","info","createGame","CREATE_GAME","version","response","baseUrl","window","location","href","split","placement","onConfirmGame","onCancel","onOk","okButtonProps","maskClosable","alt","src","PUBLIC_URL","BANNERS","fallback","margin","startsWith","A","showIcon","size","align","getVersionColor","includes","major","Number","isNaN","GameCard","game","isAdmin","duration","calculateGameAverageDuration","cover","Ribbon","text","direction","Meta","basedOn","reverse","join","summary","rules","buttonProps","style","display","ClockCircleOutlined","min","max","ideal","playerCount","best","truncateRecommended","recommended","marginTop","release","DevEmulatorAlert","stay","setStay","usingFirestoreEmulator","usingFunctionsEmulator","displayDevWarningMessage","hostname","displayDevWarningMessageFunctions","port","hash","protocol","newPath","process","replace","emulatorUrl","useEffectOnce","Modal","confirm","icon","ExclamationCircleOutlined","content","okText","cancelText","banner","SHOW_PARENT","TreeSelect","Filters","availabilityCount","setTagFilters","setNumberFilters","onNumberFiltersUpdate","prevState","FilterOutlined","minWidth","Option","step","TagTreeSelect","onTreeSelectChange","dualTranslate","treeData","useMemo","keys","tagKey","tagObj","group","capitalize","children","SEPARATOR","treeCheckable","showCheckedStrategy","placeholder","width","RowOfGames","games","gutter","xs","sm","md","lg","xl","xxl","useTitle","tagFilters","numberFilters","gameList","GAME_LIST","result","players","bestWith","recommendedWith","tagGroup","TAG_RULES","customTime","every","availableGames","devGames","comingSoonGames","DatabaseFilled","Content"],"sourceRoot":""}