{"version":3,"file":"static/js/page-dev-playground.7b8765bb.chunk.js","mappings":"uMAGO,SAASA,IACd,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAU,CACd,CAAEC,MAAO,OAAQC,MAAO,IAAKC,SAAuB,MAAbP,GACvC,CAAEK,MAAO,MAAOC,MAAO,OAAQC,SAAuB,SAAbP,GACzC,CAAEK,MAAO,QAASC,MAAO,aAAcC,SAAuB,eAAbP,GACjD,CAAEK,MAAO,SAAUC,MAAO,cAAeC,SAAuB,gBAAbP,GACnD,CAAEK,MAAO,UAAWC,MAAO,eAAgBC,SAAuB,iBAAbP,GACrD,CAAEK,MAAO,YAAaC,MAAO,iBAAkBC,SAAuB,mBAAbP,GACzD,CAAEK,MAAO,aAAcC,MAAO,kBAAmBC,SAAuB,oBAAbP,GAC3D,CAAEK,MAAO,WAAYC,MAAO,YAAaC,SAAuB,cAAbP,IAOrD,OAAO,SAAC,IAAD,CAAWI,QAASA,EAASI,aAAcR,EAAUS,SAJzC,SAACC,GAClBR,EAASQ,EACV,GAGF,CCXM,SAASC,EAAT,GAAgE,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAC3C,OACE,mBAAQC,UAAU,aAAlB,UACE,iBAAKA,UAAU,sBAAf,WACE,iBAAKA,UAAU,mBAAf,WACE,kBAAMA,UAAU,oBAAhB,UAAqCH,EAArC,QACA,iBAAMG,UAAU,uBAAhB,SAAwCF,QAE1C,iBAAKE,UAAU,oBAAf,WACE,SAAC,IAAD,CAAOA,UAAU,0BAAjB,SAA4CD,KAC5C,SAACf,EAAD,WAKT,C,gHCsBD,SAASiB,EAAmBC,EAAkBC,GAC5C,IAEMC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/CC,EAAa,EAHD,EAGc,EAHd,GAG6B,GAEzCV,EAAiB,GAEjBW,EAAqB,SAACC,GAC1B,IADmD,EAC7CC,EAAqB,GADwB,UAE3BH,GAF2B,IAEnD,2BAAoC,CAAC,IAA1BI,EAAyB,QAC5BC,EAAeH,EAAOE,EACxBC,GAAgB,GAAKA,EAAeC,KAA2BhB,EAAKiB,SAASF,IAC/EF,EAAmBK,KAAKJ,EAE3B,CAPkD,+BAQnD,OAAkC,IAA9BD,EAAmBM,OAAqB,EACrCN,EAAmBO,KAAKC,MAAMD,KAAKE,SAAWT,EAAmBM,QACzE,EAEGI,EAAW,OAAGf,QAAH,IAAGA,EAAAA,EAAcC,EAAYW,KAAKC,MAAMD,KAAKE,SAAWb,EAAYU,SAGnF,IAFAnB,EAAKkB,KAAKK,GAEHvB,EAAKmB,OAASZ,GAAU,CAC7B,IAAMO,EAAYH,EAAmBY,GACrC,GAAkB,OAAdT,EAAoB,MACxBS,GAAeT,EACfd,EAAKkB,KAAKK,EACX,CAED,OAAOvB,CACR,CAjCD,UAlCA,YACEwB,EAAAA,EAAAA,GAAS,sCAET,IAoBA,GAA0BC,EAAAA,EAAAA,UAAc,IAAxC,eAEA,OAFA,WAGE,4BACE,SAAC,IAAD,CAAWvB,MAAM,gBAEjB,SAAC,IAAD,MAGL,EAsCDwB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,EAAGrB,EAAmB,IAClCoB,QAAQC,IAAI,GAAIrB,EAAmB,KACnCoB,QAAQC,IAAI,GAAIrB,EAAmB,I","sources":["pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx","pages/Dev/Playground.tsx"],"sourcesContent":["import { Segmented } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Resources', value: '/dev/resources', disabled: pathname === '/dev/resources' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\">{extra}</Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n","/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n\n// import { Image, Layout } from 'antd';\n// Resources\nimport { Button, Space } from 'antd';\n\nimport { DevHeader } from './DevHeader';\nimport { useTitle } from 'react-use';\nimport { CSSProperties, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\nfunction Playground() {\n  useTitle('Playground | Dev | Tarde Divertida');\n\n  const styles: CSSProperties = {\n    // display: 'grid',\n    // gridTemplateColumns: 'repeat(5, 1fr)',\n\n    // gap: '1rem',\n    display: 'flex',\n    flexWrap: 'wrap',\n  };\n  const stylesLi: CSSProperties = {\n    border: '1px solid black',\n    margin: '4px',\n    padding: '8px',\n    // width: '132px',\n    // display: 'flex',\n    // flexDirection: 'column',\n    background: 'white',\n    // alignItems: 'center',\n    // justifyContent: 'space-between',\n  };\n\n  const [lines, setLines] = useState<any>([]);\n\n  return (\n    <div>\n      <DevHeader title=\"Playground\" />\n\n      <Space>{}</Space>\n    </div>\n  );\n}\n\nexport default Playground;\n\nfunction generateRandomPath(distance: number, entryPoint?: number): number[] {\n  const gridWidth = 7;\n  const gridHeight = 5;\n  const entryPoints = [1, 3, 5, 7, 13, 21, 27, 29, 31, 33];\n  const directions = [-gridWidth, 1, gridWidth, -1]; // Up, Right, Down, Left\n\n  const path: number[] = [];\n\n  const getRandomDirection = (cell: number): number => {\n    const possibleDirections = [];\n    for (const direction of directions) {\n      const neighborCell = cell + direction;\n      if (neighborCell >= 0 && neighborCell < gridWidth * gridHeight && !path.includes(neighborCell)) {\n        possibleDirections.push(direction);\n      }\n    }\n    if (possibleDirections.length === 0) return 0;\n    return possibleDirections[Math.floor(Math.random() * possibleDirections.length)];\n  };\n\n  let currentCell = entryPoint ?? entryPoints[Math.floor(Math.random() * entryPoints.length)];\n  path.push(currentCell);\n\n  while (path.length < distance) {\n    const direction = getRandomDirection(currentCell);\n    if (direction === null) break;\n    currentCell += direction;\n    path.push(currentCell);\n  }\n\n  return path;\n}\n\n// Usage:\nconsole.log(2, generateRandomPath(2));\nconsole.log(2, generateRandomPath(2));\nconsole.log(3, generateRandomPath(3));\nconsole.log(3, generateRandomPath(3));\nconsole.log(4, generateRandomPath(4));\nconsole.log(4, generateRandomPath(4));\nconsole.log(5, generateRandomPath(5));\nconsole.log(5, generateRandomPath(5));\nconsole.log(10, generateRandomPath(10));\nconsole.log(10, generateRandomPath(10));\n"],"names":["DevMenu","pathname","useLocation","navigate","useNavigate","options","label","value","disabled","defaultValue","onChange","path","DevHeader","title","subTitle","extra","className","generateRandomPath","distance","entryPoint","entryPoints","directions","getRandomDirection","cell","possibleDirections","direction","neighborCell","gridWidth","includes","push","length","Math","floor","random","currentCell","useTitle","useState","console","log"],"sourceRoot":""}