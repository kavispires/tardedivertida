{"version":3,"file":"static/js/arte-ruim.dae38a77.chunk.js","mappings":"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","sources":["components/audio/ArteRuimTimerSound.tsx","games/arte-ruim/utils/api-requests.ts","games/arte-ruim/StepDraw.tsx","games/arte-ruim/components/TextBlobs.tsx","games/arte-ruim/components/LevelInstruction.tsx","games/arte-ruim/PhaseDraw.tsx","games/arte-ruim/utils/helpers.ts","games/arte-ruim/components/EvaluationAllDrawings.tsx","games/arte-ruim/components/Card.tsx","games/arte-ruim/components/EvaluationAllCards.tsx","games/arte-ruim/StepEvaluation.tsx","games/arte-ruim/components/EvaluatedDrawings.tsx","games/arte-ruim/PhaseEvaluation.tsx","games/arte-ruim/components/GalleryWindowCredits.tsx","games/arte-ruim/components/GalleryWindowGuesses.tsx","games/arte-ruim/components/GalleryWindowResult.tsx","games/arte-ruim/StepGallery.tsx","games/arte-ruim/utils/constants.ts","games/arte-ruim/StepRanking.tsx","games/arte-ruim/PhaseGallery.tsx","games/arte-ruim/components/DrawingGrade.tsx","games/arte-ruim/components/FinalGallery.tsx","games/arte-ruim/PhaseGameOver.tsx","games/arte-ruim/SessionArteRuim.tsx","games/arte-ruim/utils/achievements.ts","icons/PaintingIcon.tsx","icons/PictureIcon.tsx"],"sourcesContent":["import { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useEffect } from 'react';\nimport { useAudio } from 'react-use';\n// Sound\nconst arteRuimTimer = require('assets/sounds/arte-ruim-timer-remix.mp3');\n\nexport function ArteRuimTimerSound() {\n  const [volume] = useGlobalLocalStorage('volume');\n  const [audio, , controls] = useAudio({\n    src: arteRuimTimer,\n    autoPlay: true,\n    loop: false,\n  });\n\n  // Updated volume\n  useEffect(() => {\n    controls.volume(volume);\n  }, [volume]); // eslint-disable-line\n\n  return <>{audio}</>;\n}\n","import type { SubmitDrawingPayload, SubmitVotingPayload } from './types';\nimport type { UseStep } from 'hooks/useStep';\nimport { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'arteRuimSubmitAction');\n\nexport function useOnSubmitDrawingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-voting',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate(\n      'Avaliação enviada! Agora aguarde os outros jogadores',\n      'Evaluation sent successfully! Wait for the other players'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua avaliação',\n      'Oops, the application failed to send your evaluation'\n    ),\n  });\n\n  return (payload: SubmitVotingPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import { useEffect, useState } from 'react';\n// Types\nimport type { ArteRuimCard } from './utils/types';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockDrawing } from 'mock/drawing';\n// Icons\nimport { PanicIcon } from 'icons/PanicIcon';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { DrawingCanvas } from 'components/canvas';\nimport { ArteRuimTimerSound } from 'components/audio/ArteRuimTimerSound';\nimport { DevButton } from 'components/debug';\n\ntype StepDrawProps = {\n  secretCard: ArteRuimCard | PlainObject;\n  onSubmitDrawing: GenericFunction;\n  startDrawingTimer: boolean;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepDraw({ secretCard, onSubmitDrawing, startDrawingTimer, announcement }: StepDrawProps) {\n  const { translate } = useLanguage();\n  const { isDebugEnabled } = useDevFeatures();\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const { seconds, start, isRunning } = useCountdown({\n    duration: 12,\n    autoStart: false,\n    onExpire: () => {\n      setTimesUp(true);\n      onSubmitDrawing({\n        drawing: JSON.stringify(lines),\n        cardId: secretCard.id,\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isRunning && startDrawingTimer) {\n      start();\n    }\n  }, [startDrawingTimer, isRunning, start]);\n\n  const onMockDrawing = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(mockDrawing()),\n      cardId: secretCard.id,\n    });\n\n  useMock(() => {\n    onSubmitDrawing({\n      drawing: JSON.stringify(mockDrawing()),\n      cardId: secretCard.id,\n    });\n  });\n\n  return (\n    <Step announcement={announcement}>\n      <Card\n        size=\"large\"\n        header={translate('Desenhe', 'Draw', isDebugEnabled ? secretCard?.id : undefined)}\n        footer={Array(secretCard?.level)\n          .fill('•')\n          .join('')}\n        className=\"a-draw-step__card\"\n        color=\"yellow\"\n      >\n        {isRunning && (\n          <>\n            {secretCard?.text}\n            <span className=\"a-draw-step__timer\">{seconds > 1 ? seconds - 2 : 0}</span>\n          </>\n        )}\n      </Card>\n      {isRunning && <ArteRuimTimerSound />}\n\n      <DevButton onClick={onMockDrawing}>Mock Drawing</DevButton>\n\n      {isTimesUp ? (\n        <PanicIcon style={{ background: 'white', width: '500px', padding: '2em' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} />\n      )}\n    </Step>\n  );\n}\n","import clsx from 'clsx';\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { TimeHighlight } from 'components/metrics/TimeHighlight';\nimport { Instruction } from 'components/text';\nimport { getAnimationClass } from 'utils/helpers';\n\nexport const DrawInstruction = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você terá <TimeHighlight>10</TimeHighlight> segundos para ler a sua carta e desenhá-la.\n          <br />\n          Aperte o botão quando estiver pronto!\n          <br />\n          <span className={clsx(getAnimationClass('tada'))}>\n            <strong>Não vale usar números e letras.</strong>\n          </span>\n          <br />\n          Fique esperto porque o tempo começa assim que você apertar.\n        </>\n      }\n      en={\n        <>\n          You'll have <TimeHighlight>10</TimeHighlight> seconds to read and draw your card.\n          <br />\n          Press the button when you're ready!\n          <br />\n          <span className={clsx(getAnimationClass('tada'))}>\n            <strong>You can NOT use numbers or letters.</strong>\n          </span>\n          <br />\n          Be aware of the timer! It starts as soon as you press the button.\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const EvaluationRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Encontre os pares de desenho e carta clicando em uma carta ou desenho e em seguida clicando em seu\n          par.\n          <br />\n          Uma bandeirinha aparecerá no topo de cada desenho com a cor e letra da carta que você selecionou.\n          <br />\n          Quando encontrar todos os pares, envie sua avaliação!\n        </>\n      }\n      en={\n        <>\n          Find the pairs of artwork and card by clicking on a card or artwork then on its match.\n          <br />\n          A ribbon will show up on the artwork with the color and letter of the matching card.\n          <br />\n          When you're done, click the button to send your evaluation!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const GalleryRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Agora, mostraremos cada arte, o que os jogadores votaram e a resposta final.\n          <br />\n          Se você votou na expressão correta, você ganha <PointsHighlight type=\"positive\">\n            2\n          </PointsHighlight>{' '}\n          pontos.\n          <br />\n          Quando for a sua arte, você ganha <PointsHighlight type=\"positive\">1</PointsHighlight> ponto para\n          cada pessoa que votou corretamente.\n        </>\n      }\n      en={\n        <>\n          Now we show each art, what players voted, and the final answer.\n          <br />\n          You get <PointsHighlight type=\"positive\">2</PointsHighlight> points if you selected the right card.\n          <br />\n          When players selected the correct card for your artwork, you get{' '}\n          <PointsHighlight type=\"positive\">1</PointsHighlight> point for each match!\n        </>\n      }\n    />\n  </Instruction>\n);\n\nexport const ScoringRules = () => (\n  <Instruction>\n    <Translate\n      pt={\n        <>\n          Você ganha <PointsHighlight type=\"positive\">2</PointsHighlight> pontos para cada ligação correta\n          entre arte e expressão.\n          <br />\n          Para cada ligação correta que sua arte ganha, você recebe{' '}\n          <PointsHighlight type=\"positive\">1</PointsHighlight> ponto.\n        </>\n      }\n      en={\n        <>\n          You get <PointsHighlight type=\"positive\">2</PointsHighlight> points if you matched the right card\n          with artwork.\n          <br />\n          For you own artwork, you get <PointsHighlight type=\"positive\">1</PointsHighlight> point for each\n          correct match the other players done.\n        </>\n      }\n    />\n  </Instruction>\n);\n","import { DualTranslate, Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype LevelInstructionProps = {\n  level: number;\n  levelType: string;\n};\n\nexport function LevelInstruction({ level, levelType }: LevelInstructionProps) {\n  if (level < 4) {\n    return <></>;\n  }\n\n  if (level === 4) {\n    return (\n      <Instruction contained>\n        <Translate\n          pt=\"No nível 4, as cartas tem um ou dois temas comuns, então preste atenção nos detalhes\"\n          en=\"On level 4, the cards have one or two common themes, so pay attention to details\"\n        />\n      </Instruction>\n    );\n  }\n\n  if (levelType === 'pairs') {\n    return (\n      <Instruction contained>\n        <Translate\n          pt=\"No nível 5, só existem duas cartas para todos\"\n          en=\"On level 5, players draw one of two things only\"\n        />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Rodada Especial:{' '}\n            <DualTranslate>{getLevelText[levelType] ?? { pt: 'Surpresa', en: 'Surprise' }}</DualTranslate>\n          </>\n        }\n        en={<>Special Round: {}</>}\n      />\n    </Instruction>\n  );\n}\n\nconst getLevelText: Record<string, DualLanguageValue> = {\n  contenders: {\n    pt: 'Personagens e Personalidades',\n    en: 'Characters and Celebrities',\n  },\n  movies: {\n    pt: 'Filmes',\n    en: 'Movies',\n  },\n  adjectives: {\n    pt: 'Adjetivos',\n    en: 'Adjectives',\n  },\n};\n","import { useState } from 'react';\n// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PaintingIcon } from 'icons/PaintingIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepDraw } from './StepDraw';\nimport { DrawInstruction } from './components/TextBlobs';\nimport { LevelInstruction } from './components/LevelInstruction';\n\nfunction PhaseDraw({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n  const [startDrawingTimer, setStartDrawingTimer] = useState(false);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<PaintingIcon />}\n      title={<Translate pt=\"Desenhe!\" en=\"Draw!\" />}\n      buttonText={<Translate pt=\"Um dó, lá, si... vamos e... já!\" en=\"Ready! Set! Go!\" />}\n      onClose={() => setStartDrawingTimer(true)}\n      currentRound={state?.round?.current}\n      withoutTimer\n      type=\"overlay\"\n    >\n      <DrawInstruction />\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.DRAW}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          instruction: (\n            <Translate\n              pt=\"Vamos aguardar enquanto os outros jogadores terminam seus desenhos!\"\n              en=\"Please wait while other players finish their artwork!\"\n            />\n          ),\n        }}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          circleColor={info?.appearance?.color}\n          unskippable\n        >\n          <Instruction contained>\n            <Translate\n              pt={`Essa rodada usará cartas de nível ${state?.level || '?'}`}\n              en={`This round uses cards of level ${state?.level || '?'}`}\n            />\n            <LevelInstruction level={state.level} levelType={state.levelType} />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <StepDraw\n          secretCard={user.currentCard ?? {}}\n          onSubmitDrawing={onSubmitDrawing}\n          announcement={announcement}\n          startDrawingTimer={startDrawingTimer}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDraw;\n","import { SEPARATOR } from 'utils/constants';\n\nexport function prepareVotes(votes: StringDictionary) {\n  return Object.entries(votes).reduce((acc: StringDictionary, [drawingEntryId, cardEntryId]) => {\n    const [, drawingId] = drawingEntryId.split(SEPARATOR);\n    const [, cardId] = cardEntryId.split(SEPARATOR);\n    acc[drawingId] = cardId;\n    return acc;\n  }, {});\n}\n","import clsx from 'clsx';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { ArteRuimDrawing } from '../utils/types';\n// Utils\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Ribbon } from 'components/ribbons';\nimport { AvatarName } from 'components/avatars';\n\ntype EvaluationAllDrawingsProps = {\n  drawings: ArteRuimDrawing[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  canvasSize: number;\n  players: GamePlayers;\n};\n\nexport function EvaluationAllDrawings({\n  drawings,\n  activeItem,\n  onActivateItem,\n  votes,\n  canvasSize,\n  players,\n}: EvaluationAllDrawingsProps) {\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"a-evaluation-all-drawings\">\n      {drawings?.map((drawingEntry) => {\n        const canvasEntryId = getEntryId(['drawing', drawingEntry.id]);\n        const isActive = activeItem === canvasEntryId;\n        const vote = votes[canvasEntryId];\n\n        return (\n          <li\n            key={`${canvasEntryId}-${drawingEntry.playerId}`}\n            className={clsx(liButtonBaseClass, isActive && `${liButtonBaseClass}--active`)}\n            onClick={() => onActivateItem(canvasEntryId)}\n          >\n            {votes?.[canvasEntryId] && <Ribbon label={vote.charAt(vote.length - 1)} />}\n            <CanvasSVG\n              drawing={drawingEntry.drawing}\n              className=\"a-evaluation-all-drawings__drawing\"\n              width={canvasSize}\n            />\n\n            <span className=\"a-evaluation-all-drawings__artist\">\n              <AvatarName player={players[drawingEntry.playerId]} />\n            </span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Helpers\nimport { getColorFromLetter } from 'utils/helpers';\n// Components\nimport { Card } from 'components/cards';\nimport { ReactNode } from 'react';\n\ntype ArteRuimCardProps = {\n  /**\n   * The text of the card\n   */\n  text?: ReactNode;\n  /**\n   * The level of the card displayed as dots in the footer\n   */\n  level: number;\n  /**\n   * The header of the card. Default: X\n   */\n  header?: string;\n};\n\n/**\n * This is the Card component\n * @param props {object}\n * @returns\n */\nexport const ArteRuimCard = ({ text, level, header = 'X' }: ArteRuimCardProps) => {\n  return (\n    <Card\n      color={getColorFromLetter(header)}\n      header={header}\n      size=\"medium\"\n      footer={Array(level).fill('•').join('')}\n    >\n      {text ?? <WarningOutlined />}\n    </Card>\n  );\n};\n","import clsx from 'clsx';\n// Types\nimport type { ArteRuimCard } from '../utils/types';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId } from 'utils/helpers';\n// Components\nimport { ArteRuimCard as Card } from './Card';\n\ntype EvaluationAllCardsProps = {\n  cards: ArteRuimCard[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n  levelType: string;\n};\n\nexport function EvaluationAllCards({\n  cards,\n  activeItem,\n  onActivateItem,\n  votes,\n  levelType,\n}: EvaluationAllCardsProps) {\n  const { isDebugEnabled } = useDevFeatures();\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {cards.map((cardEntry, index) => {\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['card', cardEntry.id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.values(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && levelType !== 'pairs' && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              text={cardEntry.text}\n              level={cardEntry.level}\n              header={isDebugEnabled ? cardEntry.id : letter}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { CloudUploadOutlined, ThunderboltOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\nimport type { ArteRuimCard, ArteRuimDrawing } from './utils/types';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\nimport { prepareVotes } from './utils/helpers';\n// Components\nimport { Step, type StepProps } from 'components/steps';\nimport { PopoverRule } from 'components/rules';\nimport { CanvasResizer } from 'components/canvas';\nimport { RuleInstruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { EvaluationAllDrawings } from './components/EvaluationAllDrawings';\nimport { EvaluationAllCards } from './components/EvaluationAllCards';\nimport { EvaluationRules } from './components/TextBlobs';\n\ntype StepEvaluationProps = {\n  drawings: ArteRuimDrawing[];\n  cards: ArteRuimCard[];\n  players: GamePlayers;\n  onSubmitVoting: GenericFunction;\n  levelType: string;\n  user: GamePlayer;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepEvaluation({\n  drawings,\n  cards,\n  players,\n  onSubmitVoting,\n  levelType,\n  announcement,\n  user,\n}: StepEvaluationProps) {\n  const { isLoading } = useLoading();\n\n  const canvasWidth = useCardWidth(5, { gap: 16, minWidth: 150, maxWidth: 500 });\n  const [canvasSize, setCanvasSize] = useGlobalLocalStorage('canvasSize');\n  const { votes, setVotes, activeItem, activateItem, resetVoting, isVotingComplete } = useVotingMatch(\n    'drawing',\n    true,\n    drawings.length || 2\n  );\n  const [choseRandomly, setChoseRandomly] = useState(false);\n\n  const onGuessForMe = useCallback(() => {\n    setChoseRandomly(true);\n    const usedDrawings = Object.keys(votes);\n    const usedCards = Object.values(votes);\n    const drawingsKeys = drawings\n      .map((e: ArteRuimDrawing) => getEntryId(['drawing', e.id]))\n      .filter((key: string) => !usedDrawings.includes(key));\n    let cardsKeys = shuffle(\n      cards\n        .map((e: ArteRuimCard, index: number) => getEntryId(['card', e.id, LETTERS[index]]))\n        .filter((key: string) => !usedCards.includes(key))\n    );\n    // For level 5 specifically, if there are less cards than drawings\n    cardsKeys =\n      cardsKeys.length < drawingsKeys.length\n        ? Array(Math.ceil(drawingsKeys.length / cardsKeys.length))\n            .fill(cardsKeys)\n            .flat()\n        : cardsKeys;\n\n    const newVotes = { ...votes };\n    drawingsKeys.forEach((drawingKey: string, index: number) => {\n      if (!newVotes[drawingKey]) {\n        newVotes[drawingKey] = cardsKeys[index];\n      }\n    });\n    setVotes(newVotes);\n  }, [cards, drawings, votes, setVotes]);\n\n  useEffect(() => {\n    if (!canvasSize) {\n      // Round to increments of 50\n      setCanvasSize(Math.floor(canvasWidth / 50) * 50);\n    }\n  }, [canvasSize, canvasWidth]); // eslint-disable-line\n\n  const selectOwnDrawing = useCallback(() => {\n    const playersDrawing = (drawings ?? []).find((drawing: ArteRuimDrawing) => drawing.playerId === user.id);\n    if (playersDrawing && playersDrawing.level !== 5) {\n      const drawingKey = getEntryId(['drawing', playersDrawing.id]);\n      const cardIndex = (cards ?? []).findIndex((card: ArteRuimCard) => card.playerId === user.id);\n      const cardKey = getEntryId(['card', playersDrawing.id, LETTERS[cardIndex]]);\n      const vote = { [drawingKey]: cardKey };\n      return vote;\n    }\n    return {};\n  }, [user, drawings, cards]);\n\n  // Auto-select the players own drawing and word\n  useEffectOnce(() => {\n    const selection = selectOwnDrawing();\n    if (selection) {\n      setVotes((s: any) => ({ ...s, ...selection }));\n    }\n  });\n\n  useMock(() => {\n    onGuessForMe();\n  }, []);\n\n  return (\n    <Step announcement={announcement} fullWidth>\n      <PopoverRule content={<EvaluationRules />} />\n      <CanvasResizer />\n      <Title>\n        <Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />\n      </Title>\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              Faça pares com as cartas e os desenhos.\n              <br />\n              Basta clicar em um desenho e depois em sua carta correspondente, ou vice-versa.\n              <br />\n              Para refazer, basta reselecionar o desenho ou carta normalmente.\n              <br />\n              Quando estiver pronto, clique em <b>Enviar sua avaliação</b>.\n            </>\n          }\n          en={\n            <>\n              Match the cards and drawings.\n              <br />\n              Just click on a drawing and then on its corresponding card, or vice versa.\n              <br />\n              To redo, just reselect the drawing or card normally.\n              <br />\n              When you're ready, click <b>Send evaluation</b>.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <Space direction=\"vertical\" className=\"a-evaluation-step\">\n        <Space className=\"space-container\" align=\"center\" wrap>\n          <Button\n            type=\"default\"\n            icon={<ThunderboltOutlined />}\n            onClick={() => resetVoting(selectOwnDrawing())}\n            disabled={isLoading}\n          >\n            <Translate pt=\"Limpar seleções\" en=\"Clear selections\" />\n          </Button>\n          <Button\n            type=\"default\"\n            icon={<ThunderboltOutlined />}\n            onClick={onGuessForMe}\n            disabled={isLoading || Object.values(votes).length === drawings.length}\n          >\n            <Translate pt=\"Chutar restantes\" en=\"Guess for me\" />\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={() => onSubmitVoting({ votes: prepareVotes(votes), choseRandomly })}\n            disabled={isLoading || !isVotingComplete}\n            icon={<CloudUploadOutlined />}\n            loading={isLoading}\n          >\n            <Translate pt=\"Enviar sua avaliação\" en=\"Send evaluation\" />\n          </Button>\n        </Space>\n\n        <EvaluationAllDrawings\n          drawings={drawings ?? []}\n          activeItem={activeItem}\n          onActivateItem={activateItem}\n          votes={votes}\n          canvasSize={canvasSize}\n          players={players}\n        />\n\n        <EvaluationAllCards\n          cards={cards ?? []}\n          activeItem={activeItem}\n          onActivateItem={activateItem}\n          votes={votes}\n          levelType={levelType}\n        />\n      </Space>\n    </Step>\n  );\n}\n","import { useMemo } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { ArteRuimCard, ArteRuimDrawing } from '../utils/types';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\nimport { AnimatedLoaderIcon } from 'icons/AnimatedLoaderIcon';\nimport { AvatarName } from 'components/avatars';\n\ntype EvaluatedDrawingsProps = {\n  votes?: StringDictionary;\n  cards: ArteRuimCard[];\n  drawings: ArteRuimDrawing[];\n  players: GamePlayers;\n};\n\n/**\n * Displays drawings in the waiting room after evaluation\n * @param props\n * @returns\n */\nexport function EvaluatedDrawings({ votes, cards, drawings, players }: EvaluatedDrawingsProps) {\n  const [canvasSize] = useGlobalLocalStorage('canvasSize');\n\n  const cardsDict = useMemo(\n    () =>\n      cards.reduce((acc: Record<string, ArteRuimCard>, card) => {\n        acc[card.id] = card;\n        return acc;\n      }, {}),\n    [cards]\n  );\n\n  const drawingsDict = useMemo(\n    () =>\n      drawings.reduce((acc: Record<string, ArteRuimDrawing>, drawing) => {\n        acc[drawing.id] = drawing;\n        return acc;\n      }, {}),\n    [drawings]\n  );\n\n  if (!votes) {\n    return (\n      <div className=\"a-evaluated-drawings\">\n        <IconAvatar icon={<AnimatedLoaderIcon />} />\n      </div>\n    );\n  }\n  const cSize = Math.min(canvasSize * 0.6, 2000);\n\n  return (\n    <ul className=\"a-evaluated-drawings\">\n      {Object.keys(votes)\n        .sort()\n        .map((drawingKey: string) => {\n          const drawing = drawingsDict[drawingKey] as ArteRuimDrawing;\n          const card = cardsDict[votes[drawingKey]] as ArteRuimCard;\n\n          return (\n            <li className=\"a-evaluated-drawings__item\" key={`${drawing.id}-${card.id}-${card.playerId}`}>\n              <div className=\"a-evaluated-drawings__card\" style={{ maxWidth: `${cSize}px` }}>\n                <AvatarName player={players[drawing.playerId]} size=\"small\" />\n              </div>\n              <CanvasSVG\n                drawing={drawing.drawing}\n                width={cSize}\n                className=\"a-evaluation-all-drawings__drawing\"\n              />\n              <div className=\"a-evaluated-drawings__card\" style={{ maxWidth: `${cSize}px` }}>\n                {card.text}\n              </div>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitVotingAPIRequest } from './utils/api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { StepEvaluation } from './StepEvaluation';\nimport { EvaluationRules } from './components/TextBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { EvaluatedDrawings } from './components/EvaluatedDrawings';\nimport { Translate } from 'components/language';\nimport { ViewIf } from 'components/views';\n\nfunction EvaluationPhase({ players, state, info }: PhaseProps) {\n  const { step, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitVoting = useOnSubmitVotingAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<EvaluateIcon />}\n      title={<Translate pt=\"Adivinhação\" en=\"Match the Pairs\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <EvaluationRules />\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.ARTE_RUIM.EVALUATION}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          instruction: (\n            <Translate\n              pt=\"Vamos aguardar enquanto os outros jogadores terminam de avaliar!\"\n              en=\"Please wait while other players finish their evaluations!\"\n            />\n          ),\n          content: (\n            <EvaluatedDrawings\n              cards={state.cards}\n              drawings={state.drawings}\n              votes={user?.votes}\n              players={players}\n            />\n          ),\n        }}\n      >\n        {/*Step 0 */}\n        <ViewIf condition={state.drawings && user.id}>\n          <StepEvaluation\n            drawings={state.drawings}\n            cards={state.cards}\n            players={players}\n            onSubmitVoting={onSubmitVoting}\n            levelType={state.levelType}\n            announcement={announcement}\n            user={user}\n          />\n        </ViewIf>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default EvaluationPhase;\n","// Types\nimport type { GamePlayer } from 'types/player';\n// Components\nimport { AvatarEntry } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowCreditsProps = {\n  artist: GamePlayer;\n};\n\nexport function GalleryWindowCredits({ artist }: GalleryWindowCreditsProps) {\n  return (\n    <div className=\"a-gallery__credits\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Artista\" en=\"Artist\" />\n      </div>\n      <span className=\"a-gallery__artist-name\">\n        <AvatarEntry player={artist} />\n      </span>\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { ArteRuimCard } from '../utils/types';\nimport type { PlayersSay } from '../utils/types';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype GalleryWindowGuessesProps = {\n  playersSay: PlayersSay;\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  windowCardId: string;\n  artistColor: string;\n};\n\nexport function GalleryWindowGuesses({\n  playersSay,\n  players,\n  cards,\n  windowCardId,\n  artistColor,\n}: GalleryWindowGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        card: cards.find((i) => i.id === cardId),\n        playersIds,\n        count: playersIds.length,\n        isCorrect: windowCardId === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc']\n  );\n\n  return (\n    <div className=\"a-gallery__guesses\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"Participantes votaram\" en=\"Players voted\" />\n      </div>\n      {entries.map((entry, index) => {\n        return (\n          <div key={`guess-${entry.cardId}-${index}`} className=\"a-gallery__guess\">\n            <div\n              className=\"a-gallery__speech-bubble\"\n              style={entry.isCorrect ? { backgroundColor: artistColor, color: 'white' } : {}}\n            >\n              {entry.isCorrect ? (\n                <CrownFilled className=\"a-gallery__speech-bubble-icon\" style={{ color: 'white' }} />\n              ) : (\n                <MessageFilled className=\"a-gallery__speech-bubble-icon\" />\n              )}\n              {entry.card?.text}\n            </div>\n            <div className=\"a-gallery__players\">\n              <AntAvatar.Group>\n                {entry.playersIds.map((playerId) => (\n                  <Avatar\n                    id={players[playerId].avatarId}\n                    key={`guess-avatar-${players[playerId].avatarId}`}\n                  />\n                ))}\n              </AntAvatar.Group>\n              <span className=\"a-gallery__players-names\">\n                {getPlayersFromIds(entry.playersIds, players, true).join(', ')}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { PlayersSay } from '../utils/types';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\nimport { StarPoints } from 'components/points';\nimport { GarbageIcon } from 'icons/GarbageIcon';\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\ntype GalleryWindowResultProps = {\n  playerArtist: GamePlayer;\n  correctAnswerId: string;\n  correctAnswerText: string;\n  playersPoints?: NumberDictionary;\n  playersSay: PlayersSay;\n  players: GamePlayers;\n};\n\nexport function GalleryWindowResult({\n  playerArtist,\n  correctAnswerId,\n  correctAnswerText,\n  playersPoints,\n  playersSay,\n  players,\n}: GalleryWindowResultProps) {\n  const correctGuesses = Object.values(playersSay?.[correctAnswerId] ?? {});\n\n  return (\n    <div className=\"a-gallery__result\">\n      <div className=\"a-gallery__label\">\n        <Translate pt=\"E o título correto da obra é\" en=\"And the masterpiece title is\" />\n      </div>\n      <div className=\"a-gallery__speech-bubble\">\n        <CrownFilled className=\"a-gallery__speech-bubble-icon\" />\n        {correctAnswerText}\n      </div>\n      {correctGuesses.length ? (\n        <>\n          <div className=\"a-gallery__players\">\n            <AntAvatar.Group>\n              {correctGuesses.map((playerId) => {\n                return <Avatar key={`correct-guess-avatar-${playerId}`} id={players[playerId].avatarId} />;\n              })}\n            </AntAvatar.Group>\n            <StarPoints quantity={2} keyPrefix={`guessers-points-${playerArtist.id}`} />\n            <span className=\"a-gallery__players-names\">\n              {getPlayersFromIds(correctGuesses, players, true).join(', ')}\n            </span>\n          </div>\n          <div className=\"a-gallery__artist-points\">\n            <Avatar id={playerArtist.avatarId} />{' '}\n            <StarPoints\n              quantity={playersPoints?.[playerArtist.id]}\n              keyPrefix={`artist-points-${playerArtist.id}`}\n            />{' '}\n            <span className=\"a-gallery__players-names\">{playerArtist.name}</span>\n          </div>\n        </>\n      ) : (\n        <Typography.Text className=\"a-gallery__no-wins\">\n          <IconAvatar icon={<GarbageIcon />} size=\"large\" shape=\"square\" />\n          <Translate\n            pt=\"Nossa, ninguém acertou. Esse desenho deve ter sido muito ruim.\"\n            en=\"Wow, nobody got it. It must have been a very crappy drawing. Shame...\"\n          />\n        </Typography.Text>\n      )}\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayers } from 'types/player';\nimport type { ArteRuimCard } from './utils/types';\nimport type { ArteRuimWindow } from './utils/types';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport type { UseStep } from 'hooks/useStep';\n// Utils\nimport { WINDOW_DURATION } from './utils/constants';\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { GalleryWindowCredits } from './components/GalleryWindowCredits';\nimport { GalleryWindowGuesses } from './components/GalleryWindowGuesses';\nimport { GalleryWindowResult } from './components/GalleryWindowResult';\nimport { ScoringRules } from './components/TextBlobs';\n\ntype StepGalleryProps = {\n  gallery: ArteRuimWindow[];\n  players: GamePlayers;\n  cards: ArteRuimCard[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: UseStep['setStep'];\n  isFirstGalleryRunThrough: boolean;\n};\n\nexport function StepGallery({\n  gallery,\n  players,\n  cards,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n}: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n\n  const canvasWidth = useCardWidth(2, { gap: 16, minWidth: 200, maxWidth: 500 });\n\n  const { drawing, artistId, id, text, playersPoints, playersSay } = gallery[activeIndex];\n\n  const playerArtist = players[artistId];\n  const currentColor = getAvatarColorById(playerArtist.avatarId);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"small\">\n        <Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRules />} />\n\n      <SlideShow\n        players={players}\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={currentColor}\n        windowDuration={WINDOW_DURATION}\n        leftClassName=\"a-gallery__canvas\"\n        rightClassName=\"a-gallery__info\"\n      >\n        <CanvasSVG drawing={drawing} width={canvasWidth} className=\"a-gallery__drawing\" />\n\n        <>\n          <GalleryWindowCredits artist={playerArtist} />\n\n          <GalleryWindowGuesses\n            players={players}\n            playersSay={playersSay}\n            cards={cards}\n            windowCardId={id}\n            artistColor={currentColor}\n          />\n\n          <GalleryWindowResult\n            playerArtist={playerArtist}\n            correctAnswerId={id}\n            correctAnswerText={text}\n            playersPoints={playersPoints}\n            playersSay={playersSay}\n            players={players}\n          />\n        </>\n      </SlideShow>\n    </Step>\n  );\n}\n","export const WINDOW_DURATION = 10;\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { GameRanking, GameRound } from 'types/game';\nimport type { UseStep } from 'hooks/useStep';\n// Components\nimport { Instruction, RoundsLeftInstruction } from 'components/text';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { HostNextPhaseButton } from 'components/host';\nimport { ScoringRules } from './components/TextBlobs';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  goToPreviousStep: UseStep['goToPreviousStep'];\n  setActiveIndex: GenericFunction;\n  threshold: number;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  isGameOver,\n  round,\n  goToPreviousStep,\n  setActiveIndex,\n  threshold,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          pt=\"Votos corretos em seu desenho por outros jogadores\"\n          en=\"Correct guesses on your drawing by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules />} />\n\n      {threshold > 0 && (\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                O jogo termina quando alguém passa os <PointsHighlight>{threshold} pontos</PointsHighlight> ou{' '}\n                {round.total} rodadas.\n              </>\n            }\n            en={\n              <>\n                The game ends when someones passes <PointsHighlight>{threshold} points</PointsHighlight> or{' '}\n                {round.total} rounds.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      {!isGameOver && <RoundsLeftInstruction round={round} />}\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria Novamente\" en=\"See Gallery Again\" />\n      </Button>\n\n      <HostNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\n// Resources and Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PictureIcon } from 'icons/PictureIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { GalleryRules } from './components/TextBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\nimport { Translate } from 'components/language';\n\nfunction PhaseGallery({ players, state, info, meta }: PhaseProps) {\n  const { step, goToNextStep, goToPreviousStep, setStep } = useStep(0);\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(state.gallery.length);\n\n  const isGameOver = meta.options?.shortGame\n    ? state.round.current === 5\n    : Object.values(players).some((player) => player.score > 50);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.ARTE_RUIM.GALLERY}\n      className=\"a-gallery-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/*Step 0 */}\n        <PhaseAnnouncement\n          icon={<PictureIcon />}\n          title={<Translate pt=\"Galeria de Arte\" en=\"Art Gallery\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          type=\"block\"\n        >\n          <GalleryRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          gallery={state.gallery}\n          players={players}\n          cards={state.cards}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={isGameOver}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n          threshold={state.threshold}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGallery;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Avatar, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst GRADES = ['F', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\ntype DrawingGradeProps = {\n  value: number;\n};\n\nexport const DrawingGrade = ({ value }: DrawingGradeProps) => {\n  const { translate } = useLanguage();\n  const grade = GRADES[Math.floor(value / 0.084)];\n\n  const baseClass = 'a-drawing-grade';\n\n  return (\n    <Tooltip\n      title={translate(\n        `Nota baseada em quantos acertos o desenho teve: ${value * 100}%`,\n        `Grade based on the number of correct guesses the artwork got: ${value * 100}%`\n      )}\n    >\n      <Avatar className={clsx(baseClass, `${baseClass}--${grade[0]}`)}>{grade}</Avatar>\n    </Tooltip>\n  );\n};\n","// Types\nimport type { GamePlayers } from 'types/player';\nimport type { ArteRuimDrawing } from '../utils/types';\n// Components\nimport { CanvasSVG } from 'components/canvas';\nimport { Translate } from 'components/language';\nimport { DrawingGrade } from './DrawingGrade';\n\ntype FinalGalleryProps = {\n  drawings: ArteRuimDrawing[];\n  players: GamePlayers;\n};\n\nexport function FinalGallery({ drawings, players }: FinalGalleryProps) {\n  return (\n    <ul className=\"a-game-over__gallery\">\n      {drawings.map((entry: ArteRuimDrawing) => {\n        const successRate = entry.successRate ?? 0;\n\n        return (\n          <li className=\"a-game-over__gallery-item\" key={entry.drawing} style={{ width: '200px' }}>\n            <CanvasSVG drawing={entry.drawing} width={200} className=\"a-game-over__gallery-canvas\" />\n            <span className=\"a-game-over__credits\">\n              \"{entry.text}\" <Translate pt=\"por\" en=\"by\" /> {players[entry.playerId].name}\n            </span>\n            <DrawingGrade value={successRate > 1 ? successRate / 100 : successRate} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Utils\nimport { achievementsReference } from './utils/achievements';\n// Icons\nimport { TrophyIcon } from 'icons/TrophyIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\nimport { Translate } from 'components/language';\nimport { FinalGallery } from './components/FinalGallery';\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      players={players}\n      announcementIcon={<TrophyIcon />}\n      rateWidgetCustomText={<Translate pt=\"Alguma sugestão de carta?\" en=\"Any card suggestions?\" />}\n    >\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <FinalGallery players={players} drawings={state.drawings} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport PhaseDraw from './PhaseDraw';\nimport PhaseEvaluation from './PhaseEvaluation';\nimport PhaseGallery from './PhaseGallery';\nimport PhaseGameOver from './PhaseGameOver';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.ARTE_RUIM.DRAW:\n      return PhaseDraw;\n    case PHASES.ARTE_RUIM.EVALUATION:\n      return PhaseEvaluation;\n    case PHASES.ARTE_RUIM.GALLERY:\n      return PhaseGallery;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionArteRuim() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.WOOD,\n          colorLink: THEME_COLORS.WOOD,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.ARTE_RUIM} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionArteRuim;\n","import { AchievementReference } from 'types/achievements';\n\nconst ACHIEVEMENTS = {\n  SOLITARY_LOSER: 'SOLITARY_LOSER',\n  SOLITARY_WINNER: 'SOLITARY_WINNER',\n  BEST_ARTIST: 'BEST_ARTIST',\n  WORST_ARTIST: 'WORST_ARTIST',\n  TABLE_VOTES: 'TABLE_VOTES',\n  CHOOSE_FOR_ME: 'CHOOSE_FOR_ME',\n};\n\nexport const achievementsReference: AchievementReference = {\n  [ACHIEVEMENTS.BEST_ARTIST]: {\n    icon: 'paint-brush',\n    title: {\n      pt: 'Melhor Artista',\n      en: 'Best Artist',\n    },\n    description: {\n      pt: 'Todos os jogadores acertaram unanimemente seu desenho mais vezes',\n      en: 'Got players to guess your drawing unanimously the most',\n    },\n  },\n  [ACHIEVEMENTS.WORST_ARTIST]: {\n    icon: 'broken-pencil',\n    title: {\n      pt: 'Artista Mais Não Convencional',\n      en: 'Most Unconventional Artist',\n    },\n    description: {\n      pt: 'Todos os jogadores NÃO acertaram unanimemente seu desenho mais vezes',\n      en: 'Got players to miss your drawing unanimously the most',\n    },\n  },\n  [ACHIEVEMENTS.SOLITARY_WINNER]: {\n    icon: 'person',\n    title: {\n      pt: 'Adivinhador Solitário',\n      en: 'Best Solitary Guesser',\n    },\n    description: {\n      pt: 'Foi o único que acertou o desenho mais vezes',\n      en: 'Was the only one to get the drawings correctly the most',\n    },\n  },\n  [ACHIEVEMENTS.SOLITARY_LOSER]: {\n    icon: 'difference',\n    title: {\n      pt: 'Mais Diferentão',\n      en: 'Most Unique Guesser',\n    },\n    description: {\n      pt: 'Foi o único que errou o desenho mais vezes',\n      en: 'Was the only one to NOT get the drawings the most',\n    },\n  },\n  [ACHIEVEMENTS.TABLE_VOTES]: {\n    icon: 'table',\n    title: {\n      pt: 'Melhor Votador Pra Mesa',\n      en: 'Best Table Voter',\n    },\n    description: {\n      pt: 'Votou nas cartas extras que não eram de nenhum jogador mais vezes',\n      en: \"Voted for extra cards that didn't belong to any player the most\",\n    },\n  },\n  [ACHIEVEMENTS.CHOOSE_FOR_ME]: {\n    icon: 'dice',\n    title: {\n      pt: 'Menos Brasileiro',\n      en: 'The Shirker',\n    },\n    description: {\n      pt: 'Apertou o botão Chutar Restantes mais vezes',\n      en: \"Pressed 'Guess for me' the most\",\n    },\n  },\n};\n\nexport default achievementsReference;\n","export function PaintingIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#d19a6e\"\n        d=\"M255.517 48.881h-47.52V19.77c0-6.777 5.493-12.27 12.27-12.27h22.98c6.777 0 12.27 5.493 12.27 12.27z\"\n      ></path>\n      <path\n        fill=\"#bc845e\"\n        d=\"M234.907 7.5h-14.64c-6.777 0-12.27 5.493-12.27 12.27v29.111h14.64V19.77c0-6.777 5.494-12.27 12.27-12.27z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M306.997 87.601h-150.48v-25.58c0-7.257 5.883-13.14 13.14-13.14h124.2c7.257 0 13.14 5.883 13.14 13.14z\"\n      ></path>\n      <path\n        fill=\"#ffa95f\"\n        d=\"M188.377 48.881h-18.72c-7.257 0-13.14 5.883-13.14 13.14v25.58h18.72v-25.58c0-7.257 5.883-13.14 13.14-13.14z\"\n      ></path>\n      <path\n        fill=\"#d19a6e\"\n        d=\"M175.536 492.233l25.619-71.973h-49.68l-24.066 67.611c-2.886 8.108 3.126 16.629 11.732 16.629h19.009a18.455 18.455 0 0017.386-12.267zM288.138 492.233l-25.619-71.973h49.68l24.066 67.611c2.886 8.108-3.126 16.629-11.732 16.629h-19.009a18.455 18.455 0 01-17.386-12.267z\"\n      ></path>\n      <path\n        fill=\"#bc845e\"\n        d=\"M166.538 446.66h25.22l9.397-26.4h-49.68l-24.066 67.611c-2.886 8.108 3.126 16.629 11.732 16.629h18.24c-8.606 0-14.618-8.521-11.732-16.629l12.583-35.352a8.817 8.817 0 018.306-5.859zM306.378 492.233l-13.836-38.871c-1.163-3.268 1.26-6.703 4.729-6.703h24.325l-9.397-26.4h-49.68l25.619 71.973a18.455 18.455 0 0017.387 12.267h18.24a18.453 18.453 0 01-17.387-12.266z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M398.405 429.244H65.27c-6.742 0-12.208-5.466-12.208-12.208v-24.889c0-6.742 5.466-12.208 12.208-12.208h37.194l39.512-21.24 34.244 21.24h222.185c6.742 0 12.208 5.466 12.208 12.208v24.889c-.001 6.742-5.466 12.208-12.208 12.208z\"\n      ></path>\n      <path\n        fill=\"#ffa95f\"\n        d=\"M71.062 417.036v-24.889c0-6.742 5.466-12.208 12.208-12.208h-18c-6.742 0-12.208 5.466-12.208 12.208v24.889c0 6.742 5.466 12.208 12.208 12.208h18c-6.742 0-12.208-5.466-12.208-12.208z\"\n      ></path>\n      <path\n        fill=\"#f4f4f4\"\n        d=\"M376.742 379.94H86.932V112.753c0-13.891 11.261-25.152 25.152-25.152H351.59c13.891 0 25.152 11.261 25.152 25.152z\"\n      ></path>\n      <path\n        fill=\"#e5e5e5\"\n        d=\"M376.742 145.146a67.752 67.752 0 00-3.022-3.232c-12.437-12.437-28.972-19.421-46.558-19.667l-3.622-.047c-9.196 0-17.817 3.607-24.276 10.157-6.458 6.548-9.944 15.22-9.815 24.418l.044 3.142c.246 17.587 7.23 34.122 19.667 46.559a67.3 67.3 0 0029.421 17.196l34.692 34.691a236.08 236.08 0 003.469 3.383zM134.201 87.601h-22.116c-13.891 0-25.152 11.261-25.152 25.152V379.94h22.116V112.753c0-13.891 11.261-25.152 25.152-25.152z\"\n      ></path>\n      <path\n        fill=\"#69d6f4\"\n        d=\"M132.664 161.295v158.191c0 9.055 7.34 16.395 16.395 16.395s16.395-7.34 16.395-16.395V212.909c0-8.83 7.158-15.989 15.989-15.989 8.83 0 15.989 7.158 15.989 15.989v12.45c0 9.189 7.52 16.994 16.708 16.822 8.91-.167 16.082-7.442 16.082-16.392V212.91c0-8.83 7.158-15.989 15.989-15.989h36.024c8.83 0 15.989 7.158 15.989 15.989v74.467c0 9.189 7.52 16.994 16.708 16.822 8.91-.167 16.082-7.442 16.082-16.392V152.51c0-5.694-4.616-10.31-10.31-10.31H151.759c-10.546 0-19.095 8.549-19.095 19.095z\"\n      ></path>\n      <path\n        fill=\"#69d6f4\"\n        d=\"M230.22 286.12c0-8.881-7.199-16.08-16.08-16.08h-.63c-8.881 0-16.08 7.199-16.08 16.08 0 8.881 7.199 16.08 16.08 16.08h.63c8.881 0 16.08-7.199 16.08-16.08z\"\n      ></path>\n      <path\n        fill=\"#51c1ed\"\n        d=\"M320.701 142.2h-28.223a33.96 33.96 0 00-3.029 14.574l.044 3.142c.246 17.587 7.23 34.122 19.667 46.558a67.264 67.264 0 0021.852 14.578V152.51c-.002-5.694-4.617-10.31-10.311-10.31z\"\n      ></path>\n      <path\n        fill=\"#aab2bd\"\n        d=\"M371.204 228.009l16.211 16.211a210.226 210.226 0 0015.636 14.141l37.697 30.801a11.129 11.129 0 0014.911-.749 11.129 11.129 0 00.749-14.911l-30.801-37.697a210.226 210.226 0 00-14.141-15.636l-16.211-16.211z\"\n      ></path>\n      <path\n        fill=\"#969faa\"\n        d=\"M449.658 280.253l-37.697-30.801a210.226 210.226 0 01-15.636-14.141L380.114 219.1l-8.91 8.91 16.211 16.211a210.226 210.226 0 0015.636 14.141l37.697 30.801a11.129 11.129 0 0014.911-.749 11.078 11.078 0 003.063-5.847 11.103 11.103 0 01-9.064-2.314z\"\n      ></path>\n      <path\n        fill=\"#ffc269\"\n        d=\"M355.109 189.154h34.013v31.433h-34.013z\"\n        transform=\"rotate(-45 372.107 204.954)\"\n      ></path>\n      <path\n        fill=\"#fc8d94\"\n        d=\"M309.447 156.495l.044 3.142a47.168 47.168 0 0034.704 44.836l4.783 1.31 24.051-24.051-1.31-4.783a47.172 47.172 0 00-44.836-34.704l-3.142-.044c-7.94-.11-14.405 6.354-14.294 14.294z\"\n      ></path>\n      <path fill=\"#ffa95f\" d=\"M373.028 181.732l-24.051 24.051 22.227 22.226 8.91-8.91-22.227-22.226z\"></path>\n      <path\n        fill=\"#fa6f7c\"\n        d=\"M353.105 195.563a47.172 47.172 0 01-34.704-44.836l-.044-3.142a14.047 14.047 0 01.732-4.652c-5.658 1.886-9.73 7.252-9.642 13.562l.044 3.142a47.168 47.168 0 0034.704 44.836l4.783 1.31 24.051-24.051-15.141 15.141z\"\n      ></path>\n      <g>\n        <path d=\"M398.405 372.44h-14.163V268.92a7.5 7.5 0 00-15 0v103.52H159.071a7.5 7.5 0 000 15h239.334a4.713 4.713 0 014.708 4.708v24.889a4.713 4.713 0 01-4.708 4.708H65.27a4.713 4.713 0 01-4.708-4.708v-24.889a4.713 4.713 0 014.708-4.708h61.408a7.5 7.5 0 000-15H94.432V112.753c0-9.733 7.919-17.652 17.652-17.652H351.59c9.733 0 17.652 7.919 17.652 17.652v25.126a7.5 7.5 0 0015 0v-25.126c0-18.004-14.648-32.652-32.652-32.652h-37.092v-18.08c0-11.381-9.259-20.64-20.64-20.64h-30.84V19.77c0-10.901-8.869-19.77-19.77-19.77h-22.98c-10.901 0-19.77 8.869-19.77 19.77v21.611h-30.84c-11.381 0-20.64 9.259-20.64 20.64v18.08h-36.933c-18.004 0-32.652 14.648-32.652 32.652V372.44H65.27c-10.867 0-19.708 8.841-19.708 19.708v24.889c0 10.867 8.841 19.708 19.708 19.708h72.376l-17.303 48.613c-2.171 6.101-1.239 12.902 2.494 18.193s9.828 8.45 16.304 8.45h19.009c10.953 0 20.78-6.933 24.453-17.251l20.646-58.005h57.177l20.647 58.005c3.673 10.319 13.5 17.251 24.452 17.251h19.009a19.98 19.98 0 0016.304-8.45 19.978 19.978 0 002.494-18.194l-17.303-48.612h72.376c10.867 0 19.708-8.841 19.708-19.708v-24.889c0-10.867-8.841-19.708-19.708-19.708zM215.497 19.77c0-2.63 2.14-4.77 4.77-4.77h22.98c2.63 0 4.77 2.14 4.77 4.77v21.611h-32.52zm-51.48 42.251c0-3.11 2.53-5.64 5.64-5.64h124.2c3.11 0 5.64 2.53 5.64 5.64v18.08h-135.48zm4.453 427.697A10.977 10.977 0 01158.149 497H139.14c-2.317 0-3.602-1.467-4.047-2.098s-1.396-2.333-.619-4.516l19.094-53.643h33.758zm160.729.668c.777 2.183-.174 3.886-.619 4.517s-1.73 2.098-4.047 2.098h-19.009a10.976 10.976 0 01-10.321-7.282l-18.856-52.975h33.758z\"></path>\n        <path d=\"M214.14 262.54h-.629c-13.002 0-23.58 10.578-23.58 23.58s10.578 23.58 23.58 23.58h.629c13.002 0 23.58-10.578 23.58-23.58s-10.578-23.58-23.58-23.58zm0 32.16h-.629c-4.731 0-8.58-3.849-8.58-8.58s3.849-8.58 8.58-8.58h.629c4.731 0 8.58 3.849 8.58 8.58s-3.849 8.58-8.58 8.58z\"></path>\n        <path d=\"M282.232 189.42h-36.023c-12.952 0-23.489 10.537-23.489 23.489v12.879c0 4.813-3.913 8.803-8.722 8.893-2.268.05-4.48-.861-6.195-2.544-1.826-1.792-2.873-4.263-2.873-6.779v-12.45c0-12.952-10.537-23.489-23.488-23.489s-23.489 10.537-23.489 23.489v106.577c0 4.904-3.99 8.895-8.895 8.895-4.904 0-8.895-3.99-8.895-8.895v-158.19c0-6.394 5.201-11.595 11.595-11.595H282.19a7.5 7.5 0 000-15H151.759c-14.665 0-26.595 11.93-26.595 26.595v158.19c0 13.175 10.719 23.895 23.895 23.895 13.175 0 23.895-10.719 23.895-23.895V212.909c0-4.681 3.808-8.489 8.489-8.489s8.488 3.808 8.488 8.489v12.45c0 6.517 2.685 12.89 7.366 17.484 4.613 4.526 10.632 6.954 16.983 6.835 12.925-.242 23.441-10.959 23.441-23.89v-12.879c0-4.681 3.808-8.489 8.489-8.489h36.023c4.681 0 8.489 3.808 8.489 8.489v74.467c0 6.518 2.685 12.89 7.366 17.485 4.612 4.526 10.634 6.959 16.982 6.835 12.925-.242 23.441-10.959 23.441-23.891v-59.796a7.5 7.5 0 00-15 0v59.796c0 4.814-3.913 8.803-8.722 8.894-2.287.039-4.48-.861-6.195-2.544-1.826-1.792-2.873-4.263-2.873-6.779v-74.467c0-12.952-10.537-23.489-23.489-23.489z\"></path>\n        <path d=\"M462.216 268.757l-30.801-37.697a218.436 218.436 0 00-14.646-16.194l-37.032-37.032-.785-2.866a54.76 54.76 0 00-14.07-24.215c-10.123-10.123-23.58-15.807-37.894-16.007l-3.144-.044c-5.86-.066-11.414 2.164-15.573 6.325-4.16 4.16-6.406 9.69-6.323 15.573l.043 3.142c.2 14.314 5.885 27.772 16.007 37.894a54.764 54.764 0 0024.215 14.07l2.866.785 37.032 37.032a218.5 218.5 0 0016.194 14.646l37.697 30.802a18.589 18.589 0 0011.791 4.222 18.58 18.58 0 0013.17-5.476 18.574 18.574 0 001.253-24.96zM316.99 159.532l-.044-3.142a6.548 6.548 0 011.931-4.757c1.271-1.271 2.992-1.98 4.758-1.932l3.143.044c10.386.145 20.151 4.27 27.497 11.615a39.746 39.746 0 0110.21 17.571l.159.58-17.888 17.888-.58-.159a39.74 39.74 0 01-17.571-10.21c-7.346-7.345-11.471-17.111-11.615-27.498zm56.038 32.806l11.62 11.62-13.444 13.444-11.62-11.62zm77.328 90.773a3.619 3.619 0 01-4.862.244l-37.697-30.801a203.468 203.468 0 01-15.079-13.637l-10.908-10.908 13.444-13.444 10.908 10.908a203.67 203.67 0 0113.637 15.079l30.801 37.697a3.618 3.618 0 01-.244 4.862z\"></path>\n      </g>\n    </svg>\n  );\n}\n","export function PictureIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"#fccd7f\" d=\"M57.142 7.501h397.717v497H57.142z\"></path>\n      <path fill=\"#f0b95f\" d=\"M435.756 7.501h19.103v497h-19.103z\"></path>\n      <path fill=\"#8ce1a4\" d=\"M422.859 39.501v433H89.142v-433z\"></path>\n      <path fill=\"#78c2a4\" d=\"M399.756 39.501h23.103v433h-23.103z\"></path>\n      <path\n        fill=\"#7a6d79\"\n        d=\"M365.53 343.679H163.056V150.643c0-38.777 31.435-70.212 70.212-70.212h62.049c38.777 0 70.212 31.435 70.212 70.212v193.036z\"\n      ></path>\n      <path\n        fill=\"#685e68\"\n        d=\"M295.318 80.431h-23.103c38.777 0 70.212 31.435 70.212 70.212v193.036h23.103V150.643c0-38.777-31.435-70.212-70.212-70.212z\"\n      ></path>\n      <path\n        fill=\"#f6a96c\"\n        d=\"M315.644 282.905h-75.73c-25.941 0-46.971-21.03-46.971-46.971v-89.285a8.347 8.347 0 018.347-8.347h53.004s10.527 47.113 61.351 47.113v97.49\"\n      ></path>\n      <path\n        fill=\"#ea9b58\"\n        d=\"M254.293 138.302H231.19s10.527 47.113 61.351 47.113v97.489h23.103v-97.489c-50.823 0-61.351-47.113-61.351-47.113z\"\n      ></path>\n      <path fill=\"#7a6d79\" d=\"M192.952 345.671h122.7v126.83h-122.7z\"></path>\n      <path fill=\"#685e68\" d=\"M315.652 345.671v126.83h-42.76v-109.43c0-6.56 2.24-12.6 6-17.4z\"></path>\n      <path\n        fill=\"#f6a96c\"\n        d=\"M315.652 282.901v65.85c0 25.45-18.49 46.57-42.76 50.68-2.81.47-5.7.72-8.64.72h-19.91c-28.38 0-51.39-23.01-51.39-51.4v-13.9l25.6-6.84c14.41-3.85 24.44-16.91 24.44-31.83v-13.28z\"\n      ></path>\n      <path\n        fill=\"#ea9b58\"\n        d=\"M315.652 334.851v13.9c0 25.45-18.49 46.57-42.76 50.68v-36.36c0-15.59 12.63-28.22 28.22-28.22z\"\n      ></path>\n      <path\n        fill=\"#ea9b58\"\n        d=\"M292.544 282.901v65.85c0 27.854-22.163 50.514-49.803 51.36.532.016 1.061.04 1.597.04h19.91c28.38 0 51.4-23.01 51.4-51.4v-65.85z\"\n      ></path>\n      <path\n        fill=\"#c4a098\"\n        d=\"M192.943 472.501H89.142l35.302-110.855c5.082-15.958 19.905-26.794 36.652-26.794h31.846v137.649z\"\n      ></path>\n      <path fill=\"#a3847e\" d=\"M169.84 334.852h23.103v137.649H169.84z\"></path>\n      <path\n        fill=\"#c4a098\"\n        d=\"M422.859 472.501H295.996V363.07c0-15.584 12.634-28.218 28.218-28.218h46.072c13.283 0 24.767 9.263 27.579 22.245z\"\n      ></path>\n      <path\n        fill=\"#a3847e\"\n        d=\"M397.865 357.097c-2.812-12.982-14.296-22.245-27.579-22.245h-23.103c13.283 0 24.767 9.263 27.579 22.245l24.994 115.404h23.103z\"\n      ></path>\n      <path d=\"M461.096 508.665c.686-1.178 1.244-2.231 1.263-4.167V89.017a7.5 7.5 0 00-15 0v397.377l-17-17V42.607l17-17v27.282a7.5 7.5 0 0015 0V7.503c.063-3.554-3.005-7.563-7.5-7.502H57.142c-3.589-.037-7.537 2.973-7.5 7.502v496.995c-.046 3.557 2.976 7.557 7.5 7.503h397.717c2.337-.207 4.354-.665 6.237-3.336zm-157.6-43.664V363.07c0-11.424 9.294-20.718 20.718-20.718h46.072c9.683 0 18.199 6.869 20.249 16.333l23.026 106.316zm-103.044 0v-77.033c10.792 12.069 26.466 19.683 43.89 19.683h19.91c8.507 0 16.704-1.778 24.245-5.197v62.547zm88.044-101.931v22.283c-7.184 4.783-15.495 7.297-24.245 7.297h-19.91c-28.205.077-46.745-25.282-43.89-52.041l20.036-5.354c19.61-4.92 31.878-24.792 30.004-44.852h57.66v40.778c-11.646 5.892-19.655 17.969-19.655 31.889zm19.648-87.669h-65.152c-22.343 1.627-42.642-16.56-42.549-39.467v-89.285c0-.467.38-.847.847-.847h47.475c8.907 22.621 25.022 42.863 59.38 46.786v82.813zM201.289 130.802c-8.738 0-15.847 7.109-15.847 15.847v89.285c0 28.545 22.076 52.016 50.049 54.276 1.611 12.915-5.305 27.013-18.876 30.555l-24.652 6.587h-21.408V150.643c-.186-35.586 30.655-64.766 66.557-62.712l-28.76 42.872h-7.063zm-40.192 211.55h24.346v122.649H99.402l32.189-101.079c4.108-12.902 15.966-21.57 29.506-21.57zM419.752 32.001H92.248l-17-17h361.504zM81.642 42.607v219.597a7.5 7.5 0 0015 0V47.001h318.717V402.44l-10.164-46.93c-3.534-16.316-18.215-28.158-34.909-28.158-1.883.028-45.16-.053-47.134.027l-.008-134.464c4.288.75 10.079-1.726 10.396-7.5a7.5 7.5 0 00-7.5-7.5c-50.97 3.96-62.148-33.357-64.428-41.249a7.5 7.5 0 00-7.319-5.864h-27.877l28.76-42.872h40.141c34.58 0 62.712 28.132 62.712 62.712v148.061a7.5 7.5 0 0015 0v-148.06c0-42.851-34.862-77.712-77.712-77.712h-62.049c-42.851 0-77.712 34.861-77.712 77.712v177.039c-17.736 2.121-32.728 14.32-38.259 31.688l-20.656 64.863V297.406a7.5 7.5 0 00-15 0v171.988l-17 17V25.607zm10.606 437.394h327.504l17 17H75.248z\"></path>\n      <path d=\"M246.293 187.543h-12.396a7.5 7.5 0 00-7.5 7.5v37.686a7.5 7.5 0 0015 0v-30.186h4.896a7.5 7.5 0 000-15z\"></path>\n    </svg>\n  );\n}\n"],"names":["arteRuimTimer","require","ArteRuimTimerSound","useGlobalLocalStorage","volume","useAudio","src","autoPlay","loop","audio","controls","useEffect","submitAction","httpsCallable","functions","StepDraw","secretCard","onSubmitDrawing","startDrawingTimer","announcement","translate","useLanguage","isDebugEnabled","useDevFeatures","useState","lines","setLines","isTimesUp","setTimesUp","useCountdown","duration","autoStart","onExpire","drawing","JSON","stringify","cardId","id","seconds","start","isRunning","useMock","mockDrawing","size","header","undefined","footer","Array","level","fill","join","className","color","text","onClick","PanicIcon","style","background","width","padding","DrawInstruction","pt","TimeHighlight","clsx","getAnimationClass","en","EvaluationRules","GalleryRules","PointsHighlight","type","ScoringRules","LevelInstruction","levelType","contained","getLevelText","contenders","movies","adjectives","players","state","info","useStep","step","goToNextStep","setStep","user","useUser","setStartDrawingTimer","request","useAPICall","apiFunction","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDrawingAPIRequest","icon","PaintingIcon","title","buttonText","onClose","currentRound","round","current","withoutTimer","phase","allowedPhase","PHASES","waitingRoom","instruction","onPressButton","time","circleColor","appearance","unskippable","currentCard","prepareVotes","votes","Object","entries","reduce","acc","drawingEntryId","cardEntryId","split","SEPARATOR","drawingId","EvaluationAllDrawings","drawings","activeItem","onActivateItem","canvasSize","liButtonBaseClass","map","drawingEntry","canvasEntryId","getEntryId","isActive","vote","label","charAt","length","player","playerId","ArteRuimCard","getColorFromLetter","WarningOutlined","EvaluationAllCards","cards","cardEntry","index","letter","LETTERS","isUsed","values","includes","role","StepEvaluation","onSubmitVoting","isLoading","useLoading","canvasWidth","useCardWidth","gap","minWidth","maxWidth","setCanvasSize","useVotingMatch","setVotes","activateItem","resetVoting","isVotingComplete","choseRandomly","setChoseRandomly","onGuessForMe","useCallback","usedDrawings","keys","usedCards","drawingsKeys","e","filter","key","cardsKeys","shuffle","Math","ceil","flat","newVotes","forEach","drawingKey","floor","selectOwnDrawing","playersDrawing","find","cardIndex","findIndex","card","cardKey","useEffectOnce","selection","s","fullWidth","content","direction","align","wrap","ThunderboltOutlined","disabled","CloudUploadOutlined","loading","EvaluatedDrawings","cardsDict","useMemo","drawingsDict","IconAvatar","AnimatedLoaderIcon","cSize","min","sort","onSuccess","useOnSubmitVotingAPIRequest","EvaluateIcon","condition","GalleryWindowCredits","artist","GalleryWindowGuesses","playersSay","windowCardId","artistColor","orderBy","playersIds","i","count","isCorrect","entry","backgroundColor","CrownFilled","MessageFilled","avatarId","getPlayersFromIds","GalleryWindowResult","playerArtist","correctAnswerId","correctAnswerText","playersPoints","correctGuesses","quantity","keyPrefix","name","GarbageIcon","shape","StepGallery","gallery","activeIndex","setActiveIndex","isFirstGalleryRunThrough","useTemporarilyHidePlayersBar","artistId","currentColor","getAvatarColorById","disableControls","barColor","windowDuration","leftClassName","rightClassName","StepRanking","ranking","isGameOver","goToPreviousStep","threshold","gainedPointsDescriptions","total","PictureOutlined","meta","useSlideShow","options","shortGame","some","score","PictureIcon","GRADES","DrawingGrade","value","grade","baseClass","FinalGallery","successRate","announcementIcon","TrophyIcon","rateWidgetCustomText","Achievements","achievements","reference","achievementsReference","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PhaseDraw","PhaseEvaluation","PhaseGallery","PhaseGameOver","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","ACHIEVEMENTS","description","props","xmlns","viewBox","d","transform"],"sourceRoot":""}