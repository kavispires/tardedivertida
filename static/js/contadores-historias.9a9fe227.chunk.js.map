{"version":3,"file":"static/js/contadores-historias.9a9fe227.chunk.js","mappings":"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","sources":["components/cards/Card.tsx","components/cards/FloatingHand.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageCard.tsx","components/cards/ImageCardHand.tsx","components/cards/ImageCardBack.tsx","components/cards/ImageCardPreloadHand.tsx","components/cards/ImageCardSelectButton.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/contadores-historias/components/StoryWaiting.tsx","games/contadores-historias/utils/mock.ts","games/contadores-historias/components/BookPages.tsx","games/contadores-historias/components/StoryWriting.tsx","games/contadores-historias/PhaseStory.tsx","games/contadores-historias/utils/api-requests.ts","games/contadores-historias/components/TableFaceDown.tsx","games/contadores-historias/StepPlayCard.tsx","games/contadores-historias/PhaseCardPlay.tsx","games/contadores-historias/components/RulesBlobs.tsx","games/contadores-historias/StepVoting.tsx","games/contadores-historias/PhaseVoting.tsx","games/contadores-historias/StepResolution.tsx","games/contadores-historias/StepRanking.tsx","games/contadores-historias/PhaseResolution.tsx","games/contadores-historias/PhaseGameOver.tsx","games/contadores-historias/SessionContadoresHistorias.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/DownSquareOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n\ntype CardProps = {\n  children: any;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype FloatingHandProps = {\n  children: any;\n  type?: 'hand' | 'stats';\n  subtitle?: any;\n};\n\nexport function FloatingHand({ children, subtitle = '', type = 'hand' }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n      >\n        <span className=\"floating-hand__label\">\n          <AvatarIcon\n            type={type === 'hand' ? 'hand-of-cards' : 'user-stats'}\n            size={isExpanded ? 40 : 60}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <Translate pt=\"Passe o mouse para expandir \" en=\"Hover to expand \" />\n          {subtitle}\n        </span>\n        {children}\n      </div>\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageBlurButtonProps = {\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const [, addBlurCard, blurEnabled] = useBlurCards();\n\n  return blurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => addBlurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n\ntype ImageBlurButtonContainerProps = {\n  cardId: string;\n  className?: string;\n  children: any;\n  [key: string]: any;\n};\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  className,\n  children,\n  ...props\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...props}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardProps = {\n  imageId: string;\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number;\n  className?: string;\n  preview?: Boolean;\n};\nexport const ImageCard = ({\n  imageId,\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  preview = true,\n}: ImageCardProps) => {\n  const [blurredCards, , blurEnabled] = useBlurCards();\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = blurEnabled && blurredCards?.[imageId];\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          preview && !isBlurred\n            ? {\n                maskClassName: `${baseClass}__preview-mask`,\n              }\n            : false\n        }\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Components\nimport { ImageBlurButton, ImageCard } from '.';\n\ntype ImageCardHandProps = {\n  hand: string[];\n  onSelectCard?: GenericFunction;\n  selectButtonLabel?: string;\n  className?: string;\n  selectButtonClass?: string;\n  sizeRatio?: number;\n  cardSize?: number;\n  minCardSize?: number;\n  disabledSelectButton?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonLabel,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n}: ImageCardHandProps) {\n  const { translate } = useLanguage();\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(sizeRatio, 32, minCardSize);\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div key={`hand-${cardId}`} className=\"image-card-hand__card-container\">\n              {Boolean(onSelectCard) && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  className={selectButtonClass}\n                  onClick={() => onSelectCard!(cardId)}\n                  size=\"small\"\n                  disabled={disabledSelectButton}\n                >\n                  {translate('Selecionar', 'Select', selectButtonLabel)}\n                </Button>\n              )}\n              <ImageCard imageId={cardId} cardWidth={cardSize || cardWidth} />\n              <ImageBlurButton cardId={cardId} />\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Resources\nimport placeholder from 'assets/images/placeholder.jpg';\n\ntype ImageCardBackProps = {\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number | string;\n  className?: string;\n};\n\nexport const ImageCardBack = ({ size = 'medium', cardWidth = 200, className = '' }: ImageCardBackProps) => {\n  const baseClass = 'image-card-back';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <Image width={cardWidth} src={placeholder} preview={false} />\n    </div>\n  );\n};\n","// Components\nimport { ImageCard } from './ImageCard';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","type ViewProps = {\n  children: any;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","type ViewIfProps = {\n  children: any;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","// Components\nimport { AvatarIcon, AvatarName } from 'components/avatars';\nimport { FloatingHand, ImageCardHand } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\n\ntype StoryWaitingProps = {\n  storyteller: GamePlayer;\n  user: GamePlayer;\n  players: GamePlayers;\n  gameOrder: PlayerId[];\n};\n\nexport function StoryWaiting({ storyteller, user, players, gameOrder }: StoryWaitingProps) {\n  return (\n    <Step fullWidth className=\"c-story-waiting\">\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" /> <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n      </Title>\n      <Instruction contained>\n        <AvatarName player={storyteller} addressUser />{' '}\n        <Translate\n          pt=\"está escrevendo uma história para essa rodada.\"\n          en=\"is writing a story for this round.\"\n        />\n        <br />\n        <Translate\n          pt=\"Enquanto isso, examine suas cartas! Você as usará durante esta rodada.\"\n          en=\"In the meantime, examine your cards. You're gonna use them this round.\"\n        />\n      </Instruction>\n      <TurnOrder players={players} activePlayerId={storyteller.id} order={gameOrder} />\n      <FloatingHand>\n        <ImageCardHand hand={user.hand} sizeRatio={user.hand.length} />\n      </FloatingHand>\n    </Step>\n  );\n}\n","import { getRandomItem } from 'utils/helpers';\n\nconst randomWords = ['avocado', 'bell pepper', 'crustaceous', 'dinner'];\n\nexport function mockStory(hand: string[]) {\n  return {\n    story: getRandomItem(randomWords),\n    cardId: getRandomItem(hand),\n  };\n}\n\nexport function mockPlayCard(hand: string[]) {\n  return {\n    cardId: getRandomItem(hand),\n  };\n}\n\nexport function mockVote(table: TableEntry[], hand: string[]) {\n  return {\n    vote: getRandomItem(\n      table.map((tableEntry) => tableEntry.cardId).filter((cardId) => !hand.includes(cardId))\n    ),\n  };\n}\n","type BookPagesProps = {\n  leftPage: any;\n  rightPage: any;\n};\n\nexport function BookPages({ leftPage, rightPage }: BookPagesProps) {\n  return (\n    <svg viewBox=\"0 0 590 320\" className=\"c-book-pages\">\n      <path\n        d=\"M4 12.46s71.16 8 145.65 0S295 16 295 16s90.78-12.42 156 0S586 5.14 586 5.14v296s-43.23 24.6-158.29 8S295 314 295 314s-94.44-17.89-143.33-3.59c-29.88 8.74-147.64-4-147.64-4z\"\n        fill=\"#ffffff\"\n      ></path>\n      <foreignObject x=\"13\" y=\"23\" width=\"280\" height=\"276\">\n        <div>{leftPage}</div>\n      </foreignObject>\n\n      <foreignObject x=\"295\" y=\"23\" width=\"280\" height=\"276\">\n        <div>{rightPage}</div>\n      </foreignObject>\n      <path d=\"M294.75 23.77h.5v280.66h-.5z\" fill=\"grey\"></path>\n    </svg>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useLanguage, useLoading, useMock } from 'hooks';\n// Utils\nimport { mockStory } from '../utils/mock';\n// Components\nimport { BookPages } from './BookPages';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { FloatingHand, ImageCard, ImageCardHand } from 'components/cards';\n\ntype StoryWritingProps = {\n  user: GamePlayer;\n  onSubmitStory: GenericFunction;\n};\n\nexport function StoryWriting({ user, onSubmitStory }: StoryWritingProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [story, setStory] = useState('');\n  const [cardId, setCardId] = useState('');\n\n  const onButtonClick = () => {\n    if (cardId && story) {\n      onSubmitStory({\n        story: story.trim(),\n        cardId,\n      });\n    }\n  };\n\n  useMock(() => {\n    onSubmitStory(mockStory(user.hand));\n  }, []);\n\n  return (\n    <Step fullWidth className=\"c-story-writing\">\n      <Title>\n        <Translate pt=\"Escreva uma história\" en=\"Tell us a story\" />\n      </Title>\n      <div className=\"c-story-book\">\n        <BookPages\n          leftPage={\n            <div className=\"c-story-book__selected-card\">\n              {cardId && <ImageCard imageId={cardId} cardWidth={175} />}\n            </div>\n          }\n          rightPage={\n            <div className=\"c-story-book__instructions\">\n              <ul>\n                <li>\n                  <Translate\n                    pt=\"Selecione uma carta abaixo e escreva algo sobre ela.\"\n                    en=\"Select a card below and write something about it.\"\n                  />\n                </li>\n                <li>\n                  <Translate\n                    pt=\"Escreva o que você quiser: uma frase, uma palavra única, uma expressão, letra de música. Não há restrições.\"\n                    en=\"Write whatever you want: a sentence, a single word, an expression, a song lyric. There are no restrictions.\"\n                  />\n                </li>\n                <li>\n                  <Translate\n                    pt=\"Pense em algo que ajudará os outros jogadores a escolher a carta selecionada. Não seja óbvio, se todos escolherem a carta correta você não ganha pontos, e não seja muito vago porque se ninguém acerta, você também fica sem pontos.\"\n                    en=\"You want something that will help players to find the selected card. Don't be too obvious, because if all players guess correctly you get no points. And also don't be too vague, if nobody guesses the card you also get no points.\"\n                  />\n                </li>\n                <li>\n                  <Input\n                    className=\"c-story-writing-input\"\n                    placeholder={translate('Escreva aqui', 'Write your clue here')}\n                    onChange={(e) => setStory(e.target.value)}\n                    onPressEnter={onButtonClick}\n                  />\n                </li>\n              </ul>\n            </div>\n          }\n        />\n      </div>\n\n      <Space className=\"space-container c-input-container\" align=\"center\">\n        <Button type=\"primary\" disabled={isLoading || story.length < 1 || !cardId} onClick={onButtonClick}>\n          <Translate pt=\"Enviar pista secreta e carta\" en=\"Send secret clue and card\" />\n        </Button>\n      </Space>\n\n      <FloatingHand>\n        <ImageCardHand\n          hand={user.hand}\n          onSelectCard={setCardId}\n          disabledSelectButton={isLoading}\n          sizeRatio={user.hand.length}\n        />\n      </FloatingHand>\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useWhichPlayerIsThe, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitStoryAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\n\nimport { StoryWaiting } from './components/StoryWaiting';\nimport { StoryWriting } from './components/StoryWriting';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { TurnOrder } from 'components/players';\nimport { ImageCardPreloadHand } from 'components/cards';\nimport { ViewOr } from 'components/views';\n\nfunction PhaseStory({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const [storyteller, isUserTheStoryTeller] = useWhichPlayerIsThe('storytellerId', state, players);\n\n  const onSubmitStory = useOnSubmitStoryAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CONTADORES_HISTORIAS.STORY}>\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={5} circleColor=\"purple\" />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"fairy-tale\"\n          title={translate('Conte-nos uma história', 'Tell us a story...')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          buttonText=\"\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Para essa rodada, <AvatarName player={storyteller} addressUser size=\"small\" /> será o(a)\n                  Contador(a) de Histórias.\n                </>\n              }\n              en={\n                <>\n                  For this round, <AvatarName player={storyteller} addressUser /> will be the Storyteller.\n                </>\n              }\n            />\n            <TurnOrder players={players} order={state.gameOrder} activePlayerId={state.storytellerId} />\n            <ImageCardPreloadHand hand={user?.hand} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheStoryTeller}>\n          <StoryWriting user={user} onSubmitStory={onSubmitStory} />\n          <StoryWaiting user={user} storyteller={storyteller} players={players} gameOrder={state.gameOrder} />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseStory;\n","import { CONTADORES_HISTORIAS_API } from 'services/adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitStoryAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CONTADORES_HISTORIAS_API.submitAction,\n    actionName: 'submit-story',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('História submetida com sucesso', 'Story submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua história',\n      'Oops, the application found an error while trying to submit your story'\n    ),\n  });\n\n  return (payload: SubmitStoryPayload) => {\n    request({\n      action: 'SUBMIT_STORY',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CONTADORES_HISTORIAS_API.submitAction,\n    actionName: 'play-card',\n    onError: () => setStep(1),\n    successMessage: translate('Carta submetida com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application found an error while trying to submit your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVoteAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CONTADORES_HISTORIAS_API.submitAction,\n    actionName: 'submit-vote',\n    onError: () => setStep(1),\n    successMessage: translate('Voto submetido com sucesso', 'Vote submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu voto',\n      'Oops, the application found an error while trying to submit your vote'\n    ),\n  });\n\n  return (payload: SubmitVotePayload) => {\n    request({\n      action: 'SUBMIT_VOTE',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Components\nimport { ImageCardBack } from 'components/cards';\n\ntype TableFaceDownProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n};\n\nexport function TableFaceDown({ players, user }: TableFaceDownProps) {\n  const baseClass = 'c-table-face-down-card';\n\n  return (\n    <div className=\"c-table-face-down\">\n      {Object.values(players).map((player, index) => {\n        const isHidden = !player.cardId;\n        const hiddenClassModifier = player.id === user.id ? 'hidden-user' : 'hidden';\n\n        return (\n          <ImageCardBack\n            key={`card-back-${player.id}`}\n            cardWidth={150}\n            className={clsx(\n              baseClass,\n              `${baseClass}--${index}`,\n              isHidden && `${baseClass}--${hiddenClassModifier}`\n            )}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","// Hooks\nimport { useLoading, useMock } from 'hooks';\n// Components\nimport { TableFaceDown } from './components/TableFaceDown';\nimport { mockPlayCard } from './utils/mock';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Card, FloatingHand, ImageCardHand } from 'components/cards';\nimport { ViewOr } from 'components/views';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\n\ntype StepPlayCardProps = {\n  players: GamePlayers;\n  story: string;\n  user: GamePlayer;\n  onPlayCard: GenericFunction;\n  storyteller: GamePlayer;\n  isUserTheStoryTeller: boolean;\n};\n\nexport function StepPlayCard({\n  players,\n  story,\n  user,\n  onPlayCard,\n  storyteller,\n  isUserTheStoryTeller,\n}: StepPlayCardProps) {\n  const { isLoading } = useLoading();\n  const hasPlayedCardAlready = Boolean(user.cardId);\n\n  const onSelectCard = (cardId: string) => {\n    onPlayCard({\n      cardId,\n    });\n  };\n\n  useMock(() => {\n    if (!isUserTheStoryTeller) {\n      onPlayCard(mockPlayCard(user.hand));\n    }\n  }, []);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Card header={storyteller.name} className=\"c-story-card\" randomColor>\n          {story}\n        </Card>\n      </Title>\n\n      <Instruction contained>\n        <ViewOr orCondition={isUserTheStoryTeller}>\n          <Translate\n            pt=\"Agora, cada jogador escolherá uma carta em mão que mais combine com a história que você escreveu.\"\n            en=\"Now every other player will play a card that best matches the story you wrote.\"\n          />\n\n          <Translate\n            pt=\"Agora, escolha uma carta que mais combine com a história da rodada. Você está tentando convencer os outros jogadores a escolherem sua carta ao invés da carta correta.\"\n            en=\"Now you select a card that matches the story the best. You are trying to convince other players that your card is the correct one.\"\n          />\n        </ViewOr>\n      </Instruction>\n\n      <TableFaceDown players={players} user={user} />\n\n      <ReadyPlayersBar players={players} />\n\n      <FloatingHand>\n        <ImageCardHand\n          hand={user.hand}\n          onSelectCard={hasPlayedCardAlready ? undefined : onSelectCard}\n          disabledSelectButton={isLoading || hasPlayedCardAlready}\n          sizeRatio={user.hand.length}\n        />\n      </FloatingHand>\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnPlayCardAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepPlayCard } from './StepPlayCard';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseCardPlay({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const [storyteller, isUserTheStoryTeller] = useWhichPlayerIsThe('storytellerId', state, players);\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CONTADORES_HISTORIAS.CARD_PLAY}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"image-cards\"\n          title={translate('Selecione uma carta', 'Play a card...')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora, jogadores verão a história da rodada e selecionarão uma de suas cartas que mais se\n                  aproxime da história. Na próxima fase, se algum outro jogador selecionar sua carta, você\n                  ganha 1 ponto!\n                </>\n              }\n              en={\n                <>\n                  Now players will see the story for the round and select one of their cards that best match\n                  the story. If any other player vote for your card later, you will get 1 point.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepPlayCard\n          players={players}\n          user={user}\n          story={state.story}\n          onPlayCard={onPlayCard}\n          storyteller={storyteller}\n          isUserTheStoryTeller={isUserTheStoryTeller}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","import { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\nexport function VotingRules(): JSX.Element {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Hora de selecionar a carta correta!\n            <br />\n            Se todos acertarem ou todos errarem, cada jogador ganha 2 pontos, menos o contador de histórias.\n            <br />\n            Se somente alguns acertarem, cada acertador e contador de histórias recebe 3 pontos.\n            <br />\n            Sua carta (se você não for o contador de histórias) ganha 1 ponto se alguém selecionar.\n          </>\n        }\n        en={\n          <>\n            Time to select the correct card!\n            <br />\n            If every player gets it correct or wrong, each player but the storyteller gets 2 points.\n            <br />\n            If only some get it correct, those players (and the storyteller) get 3 points.\n            <br />\n            You get 1 point for every vote your card gets (if you are not the storyteller).\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\ntype ScoringRulesProps = {\n  storyteller: GamePlayer;\n};\n\nexport function ScoringRules({ storyteller }: ScoringRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Hora de revelar a resposta correta!\n            <br />O Contador de Histórias {<Avatar id={storyteller.avatarId} size=\"small\" />} ganha 3 pontos\n            se pelo menos uma pessoa acertar (mas não todas).\n            <br />\n            Cada jogador que votou corretamente ganha 3 pontos.\n            <br />\n            Para cada voto que sua carta recebeu (menos {<Avatar id={storyteller.avatarId} size=\"small\" />}),\n            você ganha 1 ponto.\n            <br />\n            Mas se todos jogadores votarem corretamente ou incorretamente, todos ganham 2 pontos e o Contador\n            de Histórias não ganha nada.\n          </>\n        }\n        en={\n          <>\n            Time to reveal the answer!\n            <br />\n            The Storyteller {<Avatar id={storyteller.avatarId} size=\"small\" />} gets 3 points if at least one\n            player got it correctly (but not all).\n            <br />\n            Each player who voted correctly gets 3 points.\n            <br />\n            Each vote your card receives grants you 1 points (except{' '}\n            {<Avatar id={storyteller.avatarId} size=\"small\" />}).\n            <br />\n            But if all players vote correctly or incorrectly, they get 2 points each and the Storyteller gets\n            nothing.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks & Utils\nimport { useCardWidth, useLanguage, useLoading, useMock } from 'hooks';\nimport { mockVote } from './utils/mock';\n// Components\nimport { Card, ImageBlurButton, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { VotingRules } from './components/RulesBlobs';\nimport { DebugOnly } from 'components/debug';\nimport { ReadyPlayersBar } from 'components/players';\n\ntype StepVotingProps = {\n  players: GamePlayers;\n  story: string;\n  user: GamePlayer;\n  onSubmitVote: GenericFunction;\n  storyteller: GamePlayer;\n  table: TableEntry[];\n  isUserTheStoryTeller: boolean;\n};\n\nexport function StepVoting({\n  players,\n  story,\n  user,\n  onSubmitVote,\n  storyteller,\n  table,\n  isUserTheStoryTeller,\n}: StepVotingProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const cardWidth = useCardWidth(Math.max(Object.keys(players).length, 6), 32, 150);\n\n  const hasPlayedCardAlready = Boolean(user.vote);\n\n  const onSelectCard = (vote: string) => {\n    onSubmitVote({\n      vote,\n    });\n  };\n\n  useMock(() => {\n    if (!isUserTheStoryTeller) {\n      onSubmitVote(mockVote(table, user.hand));\n    }\n  }, []);\n\n  return (\n    <Step fullWidth className=\"c-step-play-card\">\n      <Title>\n        <Translate pt=\"Qual carta é a ilustração correta?\" en=\"What card is the correct one?\" />\n        <Card header={storyteller.name} className=\"c-story-card\" color=\"yellow\">\n          {story}\n        </Card>\n      </Title>\n      <PopoverRule content={<VotingRules />} />\n\n      <div className=\"c-game-table\">\n        {table.map((cardEntry) => {\n          const isUserCard = cardEntry.playerId === user.id;\n          const isUserVote = cardEntry.cardId === user.vote;\n          return (\n            <div key={`hand-${cardEntry.cardId}`} className=\"c-game-table__card-container\">\n              {!hasPlayedCardAlready && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  onClick={() => onSelectCard(cardEntry.cardId)}\n                  size=\"small\"\n                  disabled={isLoading || isUserCard}\n                >\n                  {isUserCard ? translate('Sua', 'Yours') : translate('Votar', 'Vote')}\n                </Button>\n              )}\n              <ImageCard\n                imageId={cardEntry.cardId}\n                cardWidth={cardWidth}\n                className={clsx(isUserVote && 'c-game-table--vote')}\n              />\n              <DebugOnly div>{cardEntry.cardId}</DebugOnly>\n\n              <ImageBlurButton cardId={cardEntry.cardId} />\n            </div>\n          );\n        })}\n      </div>\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVoteAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { ImageCardPreloadHand } from 'components/cards';\nimport { StepVoting } from './StepVoting';\nimport { VotingRules } from './components/RulesBlobs';\n\nfunction PhaseVoting({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const [storyteller, isUserTheStoryTeller] = useWhichPlayerIsThe('storytellerId', state, players);\n\n  const onSubmitVote = useOnSubmitVoteAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.CONTADORES_HISTORIAS.VOTING}\n      className=\"c-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"vote\"\n          title={translate('Votação', 'Voting')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <VotingRules />\n          <ImageCardPreloadHand hand={state.table.map((entry: PlainObject) => entry.cardId)} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepVoting\n          players={players}\n          user={user}\n          story={state.story}\n          onSubmitVote={onSubmitVote}\n          storyteller={storyteller}\n          table={state.table}\n          isUserTheStoryTeller={isUserTheStoryTeller}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseVoting;\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { Avatar, AvatarName, AvatarNPC } from 'components/avatars';\nimport { TimedButton } from 'components/buttons';\nimport { ImageBlurButton, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { BookPages } from './components/BookPages';\nimport { ScoringRules } from './components/RulesBlobs';\n\ntype StepResolutionProps = {\n  players: GamePlayers;\n  story: string;\n  storyteller: GamePlayer;\n  table: TableEntry[];\n  goToNextStep: GenericFunction;\n};\n\nexport function StepResolution({ players, story, storyteller, table, goToNextStep }: StepResolutionProps) {\n  const cardWidth = useCardWidth(10, 32, 75);\n\n  const solution = table.find((entry) => entry.playerId === storyteller.id);\n  const otherCards = table.filter((entry) => entry.playerId !== storyteller.id);\n\n  return (\n    <Step fullWidth className=\"c-step-play-card\">\n      <Title>\n        <Translate pt=\"Solução\" en=\"Solution\" />\n      </Title>\n      <PopoverRule content={<ScoringRules storyteller={storyteller} />} />\n\n      <div className=\"c-story-book\">\n        <BookPages\n          leftPage={\n            <div className=\"c-story-book__selected-card\">\n              {solution && <ImageCard imageId={solution.cardId} cardWidth={175} />}\n            </div>\n          }\n          rightPage={\n            <div className=\"c-story-book__solution\">\n              <p>\n                <Translate pt=\"Era uma vez...\" en=\"Once upon a time...\" />\n              </p>\n              <p className=\"c-story-book__story\">{story}</p>\n\n              <div>\n                <Translate pt=\"Votaram corretamente:\" en=\"Voted correctly:\" />\n                <ul className=\"c-story-book__correct-players\">\n                  {solution &&\n                    solution\n                      .votes!.filter((entry) => entry !== storyteller.id)\n                      .map((playerId) => {\n                        return (\n                          <li key={`correct-vote-player-${playerId}`}>\n                            <AvatarName player={players[playerId]} size=\"small\" />\n                          </li>\n                        );\n                      })}\n                  {(solution?.votes?.length ?? 0) < 2 && (\n                    <li className=\"c-story-book__nobody\">\n                      <Translate pt=\"Vixi, ninguém acertou...\" en=\"Well, nobody got it...\" />\n                    </li>\n                  )}\n                </ul>\n              </div>\n            </div>\n          }\n        />\n      </div>\n      <ul className=\"c-other-cards\">\n        {otherCards.map((cardEntry: TableEntry, index) => {\n          return (\n            <li className=\"c-other-cards__entry\" key={`other-card-votes-${cardEntry.playerId}-${index}`}>\n              <div className=\"c-other-cards__player\">\n                {cardEntry.playerId === 'NPC' ? (\n                  <AvatarNPC size=\"small\" />\n                ) : (\n                  <AvatarName player={players[cardEntry.playerId]} size=\"small\" />\n                )}\n              </div>\n\n              <ImageCard imageId={cardEntry.cardId} cardWidth={cardWidth} className={'c-other-cards__card'} />\n              <ImageBlurButton cardId={cardEntry.cardId} />\n\n              <div className=\"c-other-cards__votes\">\n                <AntAvatar.Group size=\"small\">\n                  {(cardEntry?.votes ?? []).map((votePlayerId) => {\n                    return (\n                      <Avatar\n                        id={players[votePlayerId].avatarId}\n                        key={`incorrect-vote-player-${votePlayerId}`}\n                      />\n                    );\n                  })}\n                </AntAvatar.Group>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      <Space className=\"space-container\" align=\"center\">\n        <TimedButton onClick={goToNextStep} onExpire={goToNextStep} duration={20}>\n          <Translate pt=\"Continuar\" en=\"Continue\" />\n        </TimedButton>\n      </Space>\n    </Step>\n  );\n}\n","import { Button, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AdminNextRoundButton } from 'components/admin';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { RankingBoard } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { ScoringRules } from './components/RulesBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  storyteller: GamePlayer;\n  outcome: 'EVERYBODY_GOT' | 'NOBODY_GOT' | 'NORMAL';\n  ranking: GameRanking;\n  round: GameRound;\n  lastRound?: boolean;\n  goToPreviousStep: GenericFunction;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  outcome,\n  storyteller,\n  round,\n  lastRound = false,\n  goToPreviousStep,\n}: StepRankingProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <Step fullWidth>\n      <Title level={1}>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n      <PopoverRule content={<ScoringRules storyteller={storyteller} />} />\n\n      <Instruction contained>\n        {outcome === 'EVERYBODY_GOT' && (\n          <Translate\n            pt={\n              <>\n                Todo mundo acertou! <AvatarName player={storyteller} />, da próxima vez, seja menos óbvio(a).\n              </>\n            }\n            en={\n              <>\n                Everybody guessed it right! <AvatarName player={storyteller} />, be less obvious next time.\n              </>\n            }\n          />\n        )}\n        {outcome === 'NOBODY_GOT' && (\n          <Translate\n            pt={\n              <>\n                Ninguém acertou! <AvatarName player={storyteller} />, da próxima vez seja menos obscuro.\n              </>\n            }\n            en={\n              <>\n                Nobody guessed it right! <AvatarName player={storyteller} />, next time be less obscure.\n              </>\n            }\n          />\n        )}\n\n        {outcome === 'NORMAL' && (\n          <Translate\n            pt={\n              <>\n                Quem acertou ganha 3 pontos! Bom trabalho, <AvatarName player={storyteller} />.\n              </>\n            }\n            en={\n              <>\n                Whoever guessed it right got 3 points! Good job, <AvatarName player={storyteller} />\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <RankingBoard ranking={ranking} players={players} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>{translate('Voltar para Solução', 'Back to Solution')}</Button>\n      </Space>\n\n      <AdminNextRoundButton round={round} lastRound={lastRound} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { StepResolution } from './StepResolution';\nimport { StepRanking } from './StepRanking';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseResolution({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const [storyteller] = useWhichPlayerIsThe('storytellerId', state, players);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CONTADORES_HISTORIAS.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"seal\"\n          title={translate('Solução', 'Solution')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <ScoringRules storyteller={storyteller} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResolution\n          players={players}\n          story={state.story}\n          storyteller={storyteller}\n          table={state.table}\n          goToNextStep={goToNextStep}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          outcome={state.outcome}\n          storyteller={storyteller}\n          round={state.round}\n          lastRound={state.lastRound}\n          goToPreviousStep={goToPreviousStep}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Components\nimport { GameOverWrapper } from 'components/game-over';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseStory from './PhaseStory';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseVoting from './PhaseVoting';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionDetetivesImaginativos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.CONTADORES_HISTORIAS.STORY:\n        return PhaseStory;\n      case PHASES.CONTADORES_HISTORIAS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.CONTADORES_HISTORIAS.VOTING:\n        return PhaseVoting;\n      case PHASES.CONTADORES_HISTORIAS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.CONTADORES_HISTORIAS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionDetetivesImaginativos;\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\n\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar DownSquareOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\" } }] }, \"name\": \"down-square\", \"theme\": \"outlined\" };\nexport default DownSquareOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownSquareOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownSquareOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownSquareOutlined = function DownSquareOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownSquareOutlinedSvg\n  }));\n};\n\nDownSquareOutlined.displayName = 'DownSquareOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownSquareOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\n\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","FloatingHand","subtitle","type","useState","isExpanded","setIsExpanded","translate","useLanguage","onMouseOver","onMouseLeave","alt","pt","en","ImageBlurButton","cardId","useBlurCards","addBlurCard","placement","title","ghost","onClick","EyeInvisibleOutlined","ImageBlurButtonContainer","props","ImageCard","imageId","cardWidth","preview","blurredCards","blurEnabled","fallbackName","length","imageURL","replace","isBlurred","width","src","process","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardHand","hand","onSelectCard","selectButtonLabel","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","useCardWidth","map","Boolean","icon","DownSquareOutlined","disabled","ImageCardBack","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","shape","UpCircleOutlined","custom","View","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","StoryWaiting","storyteller","user","players","gameOrder","fullWidth","contained","player","addressUser","activePlayerId","id","order","randomWords","BookPages","leftPage","rightPage","viewBox","d","fill","x","y","height","StoryWriting","onSubmitStory","isLoading","useLoading","story","setStory","setCardId","onButtonClick","trim","useMock","getRandomItem","onChange","e","target","value","onPressEnter","align","state","info","useStep","step","goToNextStep","setStep","useUser","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheStoryTeller","request","useAPICall","apiFunction","CONTADORES_HISTORIAS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitStoryAPIRequest","phase","allowedPhase","PHASES","conditions","round","onPressButton","time","circleColor","onClose","currentRound","current","buttonText","storytellerId","TableFaceDown","Object","values","index","isHidden","hiddenClassModifier","StepPlayCard","onPlayCard","hasPlayedCardAlready","name","undefined","useOnPlayCardAPIRequest","VotingRules","ScoringRules","avatarId","StepVoting","onSubmitVote","table","Math","max","keys","vote","tableEntry","filter","includes","mockVote","content","cardEntry","isUserCard","playerId","isUserVote","div","useOnSubmitVoteAPIRequest","entry","StepResolution","solution","find","otherCards","votes","votePlayerId","onExpire","duration","StepRanking","ranking","outcome","lastRound","goToPreviousStep","level","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseStory","PhaseCardPlay","PhaseVoting","PhaseResolution","PhaseGameOver","PageError","CrownFilled","ref","React","AntdIcon","_objectSpread","CrownFilledSvg","displayName","DownSquareOutlinedSvg","UpCircleOutlinedSvg"],"sourceRoot":""}