{"version":3,"file":"static/js/956.1e1bf81b.chunk.js","mappings":"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","sources":["components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/auth/SignIn.tsx","components/debug/DebugOnly.tsx","components/debug/DevButton.tsx","components/general/AutoNextPhase.tsx","components/general/GameBanner.tsx","components/host/HostButton.tsx","components/host/HostOnlyContainer.tsx","components/host/HostNextPhaseButton.tsx","components/host/HostOnlyButton.tsx","components/metrics/MetricHighlight.tsx","components/phases/PhaseContainer.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/lobby/StepJoin.tsx","components/phases/lobby/LobbyStep.tsx","mock/players.ts","components/phases/lobby/AvatarSelection.tsx","components/phases/lobby/Settings.tsx","components/phases/lobby/UsualAvatarsSelection.tsx","components/phases/lobby/StepInfo.tsx","hooks/useAddPlayer.ts","components/phases/lobby/StepWaiting.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","hooks/useGameState.ts","hooks/useFirestoreDocument.ts","components/players/PlayersStatusBar.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/drawers/GameInfoDrawer.tsx","components/session/RedirectSession.tsx","components/session/Session.tsx","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","components/timers/TimerClock.tsx","components/timers/TimerBar.tsx","components/timers/TimedTimerBar.tsx","components/timers/TimedTimerClock.tsx","components/timers/WaitingTime.tsx","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useGameActionRequest.ts","hooks/useHost.ts","hooks/useHostActionRequest.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTDBaseUrl.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","utils/phases.ts","utils/speech.ts"],"sourcesContent":["// Ant Design Resources\nimport { FireFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, Select, App } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Services\nimport { HOST_API_ACTIONS } from 'services/adapters';\n// Internal\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: HOST_API_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { FireFilled } from '@ant-design/icons';\nimport { Button, Drawer, Popconfirm } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useHostActionRequest } from 'hooks/useHostActionRequest';\nimport { useLoading } from 'hooks/useLoading';\n// Services\nimport { HOST_API_ACTIONS } from 'services/adapters';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Internal\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const { isAdmin } = useCurrentUserContext();\n  const [usingFirestoreEmulator] = useGlobalState('usingFirestoreEmulator');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const meta = useGameMeta();\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useHostActionRequest({\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled || !state.phase) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'default',\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.round?.forceLastRound ||\n                    isLoading ||\n                    ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.round.forceLastRound\n                      ? 'This is already set as the last round'\n                      : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: HOST_API_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button\n                target=\"_blank\"\n                href={getFirebaseUrl(Boolean(usingFirestoreEmulator), meta.gameName, meta.gameId)}\n              >\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { useMutation } from '@tanstack/react-query';\nimport { UserCredential } from 'firebase/auth';\nimport { useState } from 'react';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image, App, Switch, Space, ButtonProps } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Services\nimport { resetPassword, signIn, signInWithGoogle } from 'services/firebase';\n// Icons\nimport { GoogleIcon } from 'icons/GoogleIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n// Images\nimport logo from 'assets/images/tarde-divertida-logo.svg';\n// API\n// Image\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [view, setView] = useState('google');\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Space className=\"space-container\">\n        <Switch\n          checkedChildren={<Translate pt=\"E-mail e senha\" en=\"Email and Password\" />}\n          unCheckedChildren=\"Google\"\n          onChange={(checked) => setView(checked ? 'email' : 'google')}\n        />\n      </Space>\n\n      {view === 'google' ? (\n        <SignInWithGoogle onSuccess={onSuccess} />\n      ) : (\n        <SignInWithEmail onSuccess={onSuccess} />\n      )}\n    </div>\n  );\n}\n\nexport function SignInWithGoogle({ onSuccess, ...buttonProps }: SignInProps & ButtonProps) {\n  const { isPending, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signInWithGoogle(),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Space\n      className=\"space-container\"\n      direction=\"vertical\"\n      align=\"center\"\n      classNames={{ item: 'full-width' }}\n    >\n      <>\n        {isError && (\n          <Alert\n            description={\n              <Translate pt=\"Algo deu errado, tente novamente\" en=\"Something went wrong. Please try again\" />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        )}\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={onFinish}\n          loading={isPending}\n          block\n          icon={<IconAvatar icon={<GoogleIcon />} size=\"small\" />}\n          {...buttonProps}\n        >\n          <Translate pt=\"Entrar com Google\" en=\"Sign in with Google\" />\n        </Button>\n      </>\n    </Space>\n  );\n}\n\nfunction SignInWithEmail({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n\n  const { isPending, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <>\n      <Form\n        name=\"login\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isPending}>\n            <Translate pt=\"Entrar\" en=\"Submit\" />\n          </Button>\n\n          <Button type=\"link\" onClick={() => setShowForgotPassword((v) => !v)}>\n            <Translate pt=\"Esqueci minha senha\" en=\"Forgot my password\" />\n          </Button>\n        </Form.Item>\n      </Form>\n      {showForgotPassword && (\n        <Alert\n          type=\"info\"\n          message={\n            <ResetPasswordForm\n              email={form.getFieldValue('username')}\n              onSuccess={() => setShowForgotPassword(false)}\n            />\n          }\n        />\n      )}\n    </>\n  );\n}\n\ntype ResetPasswordFormProps = {\n  email?: string;\n  onSuccess: GenericFunction;\n};\n\nfunction ResetPasswordForm({ email, onSuccess }: ResetPasswordFormProps) {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isPending, mutate, isError } = useMutation({\n    mutationFn: async () => await resetPassword(form.getFieldValue('username')),\n    onSuccess: () => {\n      onSuccess();\n      message.success(\n        translate(\n          'Verifique seu e-mail enviado para redefinir a sua senha',\n          'Verify your email to reset your password'\n        )\n      );\n    },\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Form\n      name=\"forgot-password\"\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      style={{ maxWidth: 600 }}\n      initialValues={{ username: email, remember: true }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item>\n        <Title level={4} size=\"xx-small\">\n          <Translate pt=\"Redefinir a senha\" en=\"Password Reset\" />\n        </Title>\n      </Form.Item>\n      <Form.Item\n        label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n        name=\"username\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      {isError && (\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Alert\n            description={\n              <Translate\n                pt=\"Algo deu errado, provavelmente este e-mail não existe no banco de dados da Tarde Divertida\"\n                en=\"Something went wrong. Please try again\"\n              />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        </Form.Item>\n      )}\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" loading={isPending}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","// Ant Design Resources\nimport { BugFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Internal\nimport { DebugOnly } from './DebugOnly';\n\n/**\n * Button only available during dev only\n * @returns\n */\nexport function DevButton({ children, type, ...rest }: ButtonProps) {\n  return (\n    <DebugOnly devOnly>\n      <Button icon={<BugFilled />} type={type ?? 'primary'} {...rest}>\n        {children}\n      </Button>\n    </DebugOnly>\n  );\n}\n","// Types\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { HostNextPhaseButton } from 'components/host';\nimport { Translate } from 'components/language';\n\ntype AutoNextPhaseProps = {\n  players: GamePlayers;\n};\n\n/**\n * Add this component to a game if you want the game to automatically go to the next phase when all players are ready.\n */\nexport function AutoNextPhase({ players }: AutoNextPhaseProps) {\n  const isEverybodyReady = Object.values(players).every((player) => player.ready);\n\n  if (!isEverybodyReady) return <></>;\n\n  return (\n    <HostNextPhaseButton round={{ current: -1, total: 10, forceLastRound: false }} autoTriggerTime={20}>\n      <Translate pt=\"Continuar\" en=\"Next\" />\n    </HostNextPhaseButton>\n  );\n}\n","// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <figure>\n      <Image\n        alt={title?.[language]}\n        src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        className={className}\n        preview={preview}\n      />\n    </figure>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { RocketOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Sass\nimport './HostButton.scss';\n\n/**\n * Host Button (orange with rocket icon)\n * Important: This button is NOT guarded by HostOnlyContainer, and it must be wrapped by it.\n */\nexport function HostButton({ onClick, icon, disabled, className = '', ...rest }: ButtonProps) {\n  const { isLoading } = useLoading();\n\n  return (\n    <Button\n      icon={icon ?? <RocketOutlined />}\n      ghost\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      className={clsx('host-button', className)}\n      {...rest}\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { RocketOutlined } from '@ant-design/icons';\nimport { Space, SpaceProps } from 'antd';\n// Hooks\nimport { useHost } from 'hooks/useHost';\n// Sass\nimport './HostOnlyContainer.scss';\n\ninterface HostOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Custom label\n   */\n  label?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const HostOnlyContainer = ({ children, label, className = '', ...rest }: HostOnlyContainerProps) => {\n  const isHost = useHost();\n\n  if (!isHost) return <></>;\n\n  return (\n    <fieldset className={clsx('host-only-container', className)}>\n      <legend className=\"host-only-container__legend\">\n        <RocketOutlined /> {label ?? 'Host Controls'}\n      </legend>\n      <Space {...rest}>{children}</Space>\n    </fieldset>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode, useEffect } from 'react';\n// Ant Design Resources\nimport { PauseOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport { Tooltip } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useHost } from 'hooks/useHost';\nimport { useHostActionRequest } from 'hooks/useHostActionRequest';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Services\nimport { HOST_API_ACTIONS } from 'services/adapters';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { WaitingTime } from 'components/timers';\n// Internal\nimport { HostOnlyContainer } from './HostOnlyContainer';\nimport { HostButton } from './HostButton';\n\nfunction ButtonLabel({ round }: { round?: GameRound }) {\n  if (!round || round.current === round.total || round.forceLastRound) {\n    return <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />;\n  }\n\n  return <Translate pt=\"Próxima rodada\" en=\"Next Round\" />;\n}\n\ntype HostNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Time to auto trigger the button in seconds (default: 45 seconds)\n   */\n  autoTriggerTime?: number;\n  /**\n   *\n   */\n  withWaitingTimeBar?: boolean;\n};\n\n/**\n * Button only available to the Host to go to the next phase.\n * It will be auto-triggered after 60 seconds unless value is overridden with a 0\n * It may be paused\n */\nexport function HostNextPhaseButton({\n  round,\n  autoTriggerTime = 30,\n  children,\n  withWaitingTimeBar,\n}: HostNextPhaseButtonProps) {\n  const isHost = useHost();\n  const { translate } = useLanguage();\n  const { loaders } = useLoading();\n  const isLoading = loaders['go-to-next-phase'];\n\n  const onGoToNextPhase = useHostActionRequest({\n    actionName: 'go-to-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: HOST_API_ACTIONS.GO_TO_NEXT_PHASE });\n\n  const hasTimer = Boolean(autoTriggerTime);\n\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    autoStart: autoTriggerTime > 0,\n    duration: autoTriggerTime,\n    onExpire: handleClick,\n    disabled: !isHost ?? !hasTimer,\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      pause();\n    }\n    return () => pause();\n  }, [isLoading]); // eslint-disable-line\n\n  return (\n    <>\n      {withWaitingTimeBar && <WaitingTime duration={autoTriggerTime} timeLeft={timeLeft} />}\n\n      <HostOnlyContainer\n        label=\"Host Action\"\n        className={clsx('host-only-container--float', getAnimationClass('slideInUp'))}\n      >\n        <Tooltip title=\"Pause\">\n          <HostButton\n            icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={isRunning ? pause : resume}\n            disabled={isLoading}\n          />\n        </Tooltip>\n        <HostButton\n          disabled={isLoading}\n          onClick={handleClick}\n          icon={\n            hasTimer && (\n              <span\n                className={clsx(\n                  'host-button-timer',\n                  !isRunning &&\n                    getAnimationClass('flash', {\n                      speed: 'slow',\n                      infinite: true,\n                    })\n                )}\n              >\n                {timeLeft}\n              </span>\n            )\n          }\n        >\n          {children ?? <ButtonLabel round={round} />}\n        </HostButton>\n      </HostOnlyContainer>\n    </>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ButtonProps } from 'antd';\n// Internal\nimport { HostButton, HostOnlyContainer } from './index';\n\ntype HostOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  children: ReactNode;\n} & ButtonProps;\n\nexport function HostOnlyButton({ onClick, children, ...buttonProps }: HostOnlyButtonProps) {\n  return (\n    <HostOnlyContainer>\n      <HostButton onClick={onClick} {...buttonProps}>\n        {children}\n      </HostButton>\n    </HostOnlyContainer>\n  );\n}\n","import type { AvatarSize } from 'antd/lib/avatar/AvatarContext';\nimport clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Omit<MetricHighlightProps, 'icon'>;\n","import clsx from 'clsx';\nimport { ReactNode, useRef } from 'react';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\n\ntype PhaseContainerProps = {\n  /**\n   * The game info\n   */\n  info?: GameInfo;\n  /**\n   * The current phase that must match the allowed phase\n   */\n  phase?: string;\n  /**\n   * The allowed phase\n   */\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * If the container should take the full screen\n   */\n  fullScreen?: boolean;\n  /**\n   * If the container should be white\n   */\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n  const backgroundColorOverlay = info?.appearance?.backgroundColor;\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n      style={backgroundColorOverlay ? { backgroundColor: backgroundColorOverlay } : {}}\n    >\n      {children}\n    </main>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useState } from 'react';\nimport { useKeyPressEvent } from 'react-use';\n// Ant Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { type AnimationType, getAnimationClass } from 'utils/helpers';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n// Sass\nimport './PhaseAnnouncement.scss';\n// Design Resource\n\ntype PhaseAnnouncementBasicProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The icon displayed to illustrate the phase\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\ntype PhaseAnnouncementBlock = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'block';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementOverlay = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'overlay';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementProps = PhaseAnnouncementBlock | PhaseAnnouncementOverlay;\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 3,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut', { speed: 'faster' })\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive ? getAnimationClass(animationType, { speed: 'fast' }) : getAnimationClass('bounceOut'),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type }: { type: string; index?: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        backgroundPositionX: '0',\n      }}\n    ></div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Divider, Modal } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { UseStep } from 'hooks/useStep';\n// Services\nimport { signInAsGuest } from 'services/firebase';\n// Components\nimport { SignIn, SignInWithGoogle } from 'components/auth/SignIn';\nimport { SignUp } from 'components/auth/SignUp';\nimport { DualTranslate, Translate } from 'components/language';\n\ntype StepJoinProps = {\n  info: GameInfo;\n  setStep: UseStep['setStep'];\n};\n\nexport function StepJoin({ info, setStep }: StepJoinProps) {\n  const { isAuthenticated } = useCurrentUserContext();\n\n  const { isPending, mutate, isError, error } = useMutation({\n    mutationKey: ['sign-in-anon'],\n    mutationFn: async () => signInAsGuest(),\n    onSuccess: () => setStep(1),\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setStep(1);\n    }\n  }, [isAuthenticated, setStep]);\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Bem-vindo!\" en=\"Welcome\" />\n      </h1>\n\n      {Boolean(info?.summary) && (\n        <p className=\"lobby-step__summary\">\n          <DualTranslate>{info.summary}</DualTranslate>\n        </p>\n      )}\n\n      <SignInWithGoogle onSuccess={() => setStep(1)} block size=\"middle\" />\n\n      {isError && <Alert message=\"Error\" description={JSON.stringify(error)} type=\"error\" showIcon />}\n\n      <Divider>\n        <Translate pt=\"ou\" en=\"or\" />\n      </Divider>\n\n      <Button type=\"primary\" block disabled={isAuthenticated} onClick={() => mutate()} loading={isPending}>\n        <Translate pt=\"Entrar como visitante\" en=\"Join as a Guest\" />\n      </Button>\n    </>\n  );\n}\n\ntype LoginButtonProps = {\n  disabled: boolean;\n  setStep: UseStep['setStep'];\n};\n\nexport function LoginButton({ disabled, setStep }: LoginButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignIn onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Fazer Login\" en=\"Login\" />\n      </Button>\n    </div>\n  );\n}\n\ntype SignUpButtonProps = {\n  disabled: boolean;\n  setStep: UseStep['setStep'];\n};\n\nexport function SignUpButton({ disabled, setStep }: SignUpButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Cadastro\" en=\"Sign Up Form\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignUp onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Cadastrar\" en=\"Sign up\" />\n      </Button>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Alert } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Components\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Translate } from 'components/language';\n\ntype LobbyStepProps = {\n  info: GameInfo;\n  children: ReactNode;\n  isLocked: boolean;\n};\n\nexport function LobbyStep({ info, children, isLocked }: LobbyStepProps) {\n  return (\n    <div className=\"lobby-step\">\n      <div className=\"lobby-step__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-step__banner\" />\n        <div className=\"lobby-step__content\">\n          {Boolean(isLocked) ? (\n            <>\n              <h1 className=\"lobby-step__title\">\n                <Translate pt=\"Esse jogo está trancado\" en=\"This session is locked\" />\n              </h1>\n\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"O jogo já foi iniciado e novos jogadores não podem ser adicionados\"\n                    en=\"The game has started and new players cannot be added at this time\"\n                  />\n                }\n              />\n            </>\n          ) : (\n            children\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Sam,Tim,Una,Vic,Will,Xavier,Yara,Zoe'.split(\n    ','\n  );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  let tries = 0;\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem) || tries < 50) {\n    randomItem = getRandomItem(source);\n    tries += 1;\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties: PlainObject | GenericFunction = {}\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length === quantity) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: GamePlayer[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name: `${name}`,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...(typeof properties === 'function' ? properties(i) : properties),\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","import { useCallback, useMemo } from 'react';\n// Ant Design Resources\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n// Components\nimport { DualTranslate } from 'components/language';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n\ntype AvatarSelectionProps = {\n  players: GamePlayers;\n  selectedAvatar: string;\n  setSelectedAvatar: GenericFunction;\n  userId: PlayerId;\n};\n\nexport function AvatarSelection({\n  players,\n  setSelectedAvatar,\n  selectedAvatar,\n  userId,\n}: AvatarSelectionProps) {\n  // Calculate available avatars and monitor if user chose a non-available one\n  const availableAvatars = useMemo(() => {\n    const usedAvatars = Object.values(players).reduce((acc: BooleanDictionary, { avatarId, id }) => {\n      if (id !== userId) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (!newAvailableAvatars.includes(selectedAvatar)) {\n      setSelectedAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    return newAvailableAvatars;\n  }, [players]); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  return (\n    <>\n      <div className=\"lobby-step__avatar-selection\">\n        <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretLeftOutlined />\n        </Button>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${selectedAvatar}`}></use>\n          <title>\n            <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n          </title>\n        </svg>\n        <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretRightOutlined />\n        </Button>\n      </div>\n      <div className=\"lobby-step__description\">\n        <small>\n          <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n        </small>\n      </div>\n    </>\n  );\n}\n","// Ant Design Resources\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { Button, Divider, Space, Switch, Tooltip } from 'antd';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\n// Components\nimport { Translate } from 'components/language';\n// API & Hooks\n\ntype SettingsProps = {\n  hasImages: boolean;\n};\nexport function Settings({ hasImages }: SettingsProps) {\n  const [blurEnabled, setBlurEnabled] = useGlobalLocalStorage('blurEnabled');\n  const [volume, setVolume] = useGlobalLocalStorage('volume');\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n  };\n\n  return (\n    <Space className=\"lobby-step__settings\" split={<Divider type=\"vertical\" />}>\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Alguns jogos tocam sons ou falas. Você pode mudar essa configuração durante o jogo.\"\n                en=\"A few games will play sound effects or speech. You may change this setting during the game.\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"lobby-step__settings-entry\">\n        {hasImages && (\n          <>\n            <div className=\"lobby-step__switch-label\">\n              <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n              <Tooltip\n                title={\n                  <Translate\n                    pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia. Você pode mudar essa configuração durante o jogo\"\n                    en=\"Adds a button to every Image Card to blur them in case you have any phobia. You may change this setting during the game\"\n                  />\n                }\n              >\n                <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n              </Tooltip>\n            </div>\n\n            <Switch\n              checkedChildren=\"on\"\n              unCheckedChildren=\"off\"\n              checked={blurEnabled}\n              onClick={onBlurSwitchClick}\n            />\n          </>\n        )}\n      </div>\n    </Space>\n  );\n}\n","// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { DualTranslate, Translate } from 'components/language';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n\ntype UsualAvatarsSelectionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarsIds: string[];\n};\n\nexport function UsualAvatarsSelection({ avatarsIds, setSelectedAvatar }: UsualAvatarsSelectionProps) {\n  return (\n    <div className=\"lobby-usual-avatar-selection\">\n      <div className=\"lobby-usual-avatar-selection__title\">\n        <small>\n          <Translate pt=\"Seus avatars mais usados\" en=\"Your favorite avatars\" />\n        </small>\n      </div>\n      <ul className=\"lobby-usual-avatar-selection__list\">\n        {avatarsIds.map((avatarId) => (\n          <UsualAvatarOption key={avatarId} setSelectedAvatar={setSelectedAvatar} avatarId={avatarId} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\ntype UsualAvatarOptionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarId: string;\n};\n\nexport function UsualAvatarOption({ avatarId, setSelectedAvatar }: UsualAvatarOptionProps) {\n  return (\n    <TransparentButton onClick={() => setSelectedAvatar(avatarId)}>\n      <svg viewBox=\"0 0 100 100\" className=\"lobby-usual-avatar-selection__avatar\">\n        <use href={avatars + `#avatar-${avatarId}`}></use>\n        <title>\n          <DualTranslate>{AVATARS[avatarId].description}</DualTranslate>\n        </title>\n      </svg>\n    </TransparentButton>\n  );\n}\n","import { mockPlayerName } from 'mock/players';\nimport { useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n// Ant Design Resources\nimport { Alert, AutoComplete, Button } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useAddPlayer } from 'hooks/useAddPlayer';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { UseStep } from 'hooks/useStep';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\n// Internal\nimport { AvatarSelection } from './AvatarSelection';\nimport { Settings } from './Settings';\nimport { UsualAvatarsSelection } from './UsualAvatarsSelection';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype StepInfoProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  setStep: UseStep['setStep'];\n};\n\nexport function StepInfo({ info, players, setStep }: StepInfoProps) {\n  const { currentUser, isGuest } = useCurrentUserContext();\n  const { translate } = useLanguage();\n  const [selectedAvatar, setSelectedAvatar] = useState(\n    currentUser?.avatars?.[0] ?? getRandomItem(AVAILABLE_AVATAR_IDS)\n  );\n\n  const [name, setName] = useState((currentUser?.names ?? []).at(-1) ?? '');\n  const [lsAvatarId] = useLocalStorage('username', '');\n  const [lsUsername] = useLocalStorage('avatarId', '');\n\n  // Load username and avatar from localStorage if any\n  useEffect(() => {\n    if (isGuest) {\n      if (lsAvatarId) {\n        setSelectedAvatar(lsAvatarId);\n      }\n\n      if (lsUsername) {\n        setName(lsUsername ?? '');\n      }\n    }\n  }, [isGuest]); // eslint-disable-line\n\n  const { isPending, mutate } = useAddPlayer(name, selectedAvatar, isGuest, () => setStep(2));\n\n  const hasPlayedBefore = Boolean(currentUser.games?.[info.gameName]);\n\n  const nameOptions = (currentUser?.names ?? []).map((name) => ({ value: name }));\n\n  return (\n    <>\n      <h2 className=\"lobby-step__title\">\n        <Translate pt=\"Adicione seus dados\" en=\"Add your info\" />\n      </h2>\n\n      {hasPlayedBefore && (\n        <Alert\n          type=\"info\"\n          message={<Translate pt=\"Você jogou esse jogo anteriormente\" en=\"You played this game before\" />}\n          className=\"margin\"\n        />\n      )}\n\n      <AvatarSelection\n        players={players}\n        setSelectedAvatar={setSelectedAvatar}\n        selectedAvatar={selectedAvatar}\n        userId={currentUser.id}\n      />\n\n      {currentUser && currentUser.avatars.length > 0 && (\n        <UsualAvatarsSelection avatarsIds={currentUser.avatars} setSelectedAvatar={setSelectedAvatar} />\n      )}\n\n      <AutoComplete\n        className=\"lobby-step__name-input\"\n        options={nameOptions}\n        onChange={(value) => setName(value.trim())}\n        onSelect={(value) => setName(value.trim())}\n        placeholder={translate('Digite seu nome', 'Type your name')}\n        maxLength={10}\n        value={name || randomName}\n      />\n\n      <Settings hasImages={info.tags.includes('images')} />\n\n      <Button\n        block\n        loading={isPending}\n        disabled={!name || !selectedAvatar}\n        type=\"primary\"\n        onClick={() => mutate()}\n      >\n        <Translate pt=\"Entrar\" en=\"Enter\" />\n      </Button>\n    </>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { App } from 'antd';\n// Services\nimport { GAME_API, GAME_API_COMMON_ACTIONS } from 'services/adapters';\n// Utils\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n// Internal\nimport { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\nimport { useLanguage } from './useLanguage';\nimport { getKey, useGlobalLocalStorage } from './useGlobalLocalStorage';\n\nexport function useAddPlayer(name: string, avatarId: string, isGuest: boolean, onSuccess: GenericFunction) {\n  const { gameId, gameName } = useGameMeta();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume] = useGlobalLocalStorage('volume');\n  const { language, translate } = useLanguage();\n  const { notification } = App.useApp();\n\n  const query = useMutation({\n    mutationKey: ['add-player'],\n    mutationFn: async () =>\n      await GAME_API.run({\n        action: GAME_API_COMMON_ACTIONS.JOIN_GAME,\n        gameId,\n        gameName,\n        playerName: name,\n        playerAvatarId: avatarId,\n        isGuest,\n      }),\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n      setUserId(data.id);\n      setUsername(data.name);\n      setUserAvatarId(data.avatarId);\n\n      localStorage.setItem(getKey('username'), data.name);\n      localStorage.setItem(getKey('avatarId'), data.avatarId);\n      localStorage.setItem(getKey('gameId'), gameId);\n\n      if (volume) {\n        speak(getRandomWelcomeMessage(name ?? translate('vei', 'babe')), language, volume);\n      }\n\n      onSuccess();\n    },\n    onError: (e: Error) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n  });\n\n  return query;\n}\n","import { useMutation } from '@tanstack/react-query';\nimport clsx from 'clsx';\nimport { useEffect } from 'react';\n// Ant Design Resources\nimport { App, Space, Typography } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Services\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { HostButton, HostOnlyContainer } from 'components/host';\nimport { Translate } from 'components/language';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// API & Hooks\n// Services\n\ntype StepWaitingProps = {\n  players: GamePlayers;\n};\n\nexport function StepWaiting({ players }: StepWaitingProps) {\n  const { message, notification } = App.useApp();\n  const { gameId, gameName } = useGameMeta();\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n\n  const gameMeta = useGameMeta();\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const { mutate, isPending: isLocking } = useMutation({\n    mutationKey: ['lock-game'],\n    mutationFn: async () => {\n      setLoader('lock-game', true);\n      return await HOST_API.run({\n        action: HOST_API_ACTIONS.LOCK_GAME,\n        gameId,\n        gameName,\n      });\n    },\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n\n      if (data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n    onSettled: () => {\n      setLoader('lock-game', false);\n    },\n  });\n\n  useEffect(() => {\n    setLoader('lock-game', isLocking);\n\n    return () => {\n      setLoader('lock-game', false);\n    };\n  }, [isLocking]); // eslint-disable-line\n\n  const numPlayers = Object.keys(players).length;\n\n  return (\n    <>\n      <h1 className={clsx('lobby-step__title', getAnimationClass('tada'))}>\n        {username || translate('Fulano', 'Unknown')}\n      </h1>\n\n      <Space className=\"space-container\">\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n      </Space>\n\n      <h3 className=\"lobby-heading\">\n        <Translate pt=\"Aguarde os outros jogadores entrarem.\" en=\"Please, wait while other players join...\" />\n      </h3>\n      <HostOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n        <Typography.Text className=\"center padding\">\n          <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n        </Typography.Text>\n        <HostButton\n          onClick={() => mutate()}\n          disabled={isLoading || numPlayers < gameMeta.min}\n          loading={isLoading}\n          block\n        >\n          <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n        </HostButton>\n      </HostOnlyContainer>\n    </>\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useEffect } from 'react';\nimport { useLocalStorage } from 'react-use';\n// Types\nimport type { GameMeta } from 'types/game';\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { resetGlobalState, useGlobalState } from 'hooks/useGlobalState';\nimport { useStep } from 'hooks/useStep';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { AdminMenuDrawer } from 'components/admin';\nimport { AvatarEntry } from 'components/avatars';\nimport { PhaseContainer } from 'components/phases';\n// Internal\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { StepJoin } from './lobby/StepJoin';\nimport { LobbyStep } from './lobby/LobbyStep';\nimport { StepInfo } from './lobby/StepInfo';\nimport { StepWaiting } from './lobby/StepWaiting';\n// Sass\nimport './PhaseLobby.scss';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\ntype SplitPlayers = {\n  left: GamePlayer[];\n  right: GamePlayer[];\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const { step, setStep } = useStep();\n  const { currentUser, isAuthenticated } = useCurrentUserContext();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [localUsername] = useLocalStorage('username', '');\n  const [localAvatarId] = useLocalStorage('avatarId', '');\n\n  const player = players?.[currentUser.id];\n\n  useEffect(() => {\n    if (player) {\n      setStep(2);\n      setUserId(player.id);\n      setUsername(player.name);\n      setUserAvatarId(player.avatarId);\n    } else if (isAuthenticated) {\n      setStep(1);\n      resetGlobalState();\n    } else {\n      setStep(0);\n      setUsername(localUsername ?? '');\n      setUserAvatarId(localAvatarId ?? '');\n    }\n  }, [\n    player,\n    currentUser.id,\n    setStep,\n    setUserId,\n    setUsername,\n    setUserAvatarId,\n    isAuthenticated,\n    localUsername,\n    localAvatarId,\n  ]);\n\n  const { left, right } = orderBy(Object.values(players), 'updatedAt').reduce(\n    (acc: SplitPlayers, player, index) => {\n      if (index % 2 === 0) {\n        acc.left.push(player);\n      } else {\n        acc.right.push(player);\n      }\n\n      return acc;\n    },\n    {\n      left: [],\n      right: [],\n    }\n  );\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby\">\n        <div className=\"lobby__seating-area-left\">\n          {left.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                left: `${60 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"lobby__seating-area-right\">\n          {right.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                right: `${80 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <LobbyStep info={info} isLocked={meta.isLocked}>\n          {step === 0 && <StepJoin info={info} setStep={setStep} />}\n          {step === 1 && <StepInfo info={info} players={players} setStep={setStep} />}\n          {step === 2 && <StepWaiting players={players} />}\n        </LobbyStep>\n      </div>\n\n      <AdminMenuDrawer\n        state={{ phase: 'LOBBY', round: { current: 0, total: 0, forceLastRound: false }, players: {} }}\n        players={players}\n      />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { GameState } from 'types/game';\nimport type { GameInfo } from 'types/game-info';\n// Internal\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","import { useQueryClient } from '@tanstack/react-query';\nimport { useEffect } from 'react';\n// Ant Design Resources\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\nimport { Button, Layout, Space } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useGameActionRequest } from 'hooks/useGameActionRequest';\nimport { useGameId } from 'hooks/useGameId';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\n// Services\nimport { GAME_API_COMMON_ACTIONS } from 'services/adapters';\n// Utils\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Components\nimport { Translate } from 'components/language';\nimport { LoadingPage } from 'components/loaders';\nimport { Title } from 'components/text';\n// Internal\nimport { RulesCarousel } from '../rules';\nimport { AutoNextPhase } from '../general/AutoNextPhase';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalLocalStorage('volume');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  useEffect(() => {\n    setIsAdminEnabled(true);\n  }, []); // eslint-disable-line\n\n  const gameId = useGameId();\n  // TODO: check if this is working\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: ['meta', gameId] });\n  }, [gameId]); // eslint-disable-line\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useGameActionRequest({\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY }), [], 2);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({ action: GAME_API_COMMON_ACTIONS.MAKE_ME_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n\n      <AutoNextPhase players={players} />\n    </Layout.Content>\n  );\n}\n","// Types\nimport type { GameState } from 'types/game';\nimport type { GameInfo } from 'types/game-info';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedGearIcon } from 'icons/AnimatedGearIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\n// Internal\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up...\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n// Hooks\nimport { UseStep } from 'hooks/useStep';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: UseStep['goToNextStep'];\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { LikeFilled } from '@ant-design/icons';\nimport { Avatar as AntAvatar, Typography } from 'antd';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { Fragment, ReactNode, useMemo } from 'react';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Utils\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\n// Internal\nimport { reorder } from './reorder';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n  /**\n   *\n   */\n  additionalInfoParser?: (player: GamePlayer) => ReactNode;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n  additionalInfoParser,\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n                {!!additionalInfoParser && additionalInfoParser(player)}\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { WaitingRoomIcon } from 'icons/WaitingRoomIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n// Sass\nimport './WaitingRoom.scss';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <div className=\"waiting-room__content\">\n        <Instruction>\n          {Boolean(instruction) ? (\n            instruction\n          ) : (\n            <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n          )}\n        </Instruction>\n        {children}\n      </div>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Utils\nimport { print } from 'utils/helpers';\n// Internal\nimport { useFirestoreDocument } from './useFirestoreDocument';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const { notification } = App.useApp();\n  const docPath = `games/${gameName}/${gameId}/state`;\n\n  const { isLoading, isRefetching, isError, error, data } = useFirestoreDocument(docPath, true);\n\n  if (isError) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  const state = data ?? {};\n\n  useEffect(() => {\n    if (isLoading || isRefetching) {\n      console.count('Refreshing state...');\n    } else {\n      print({ state });\n    }\n  }, [isLoading, isRefetching]); // eslint-disable-line\n\n  return state as GameState;\n}\n","import { UseQueryResult, useQuery } from '@tanstack/react-query';\nimport { doc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { useEffect } from 'react';\n// Services\nimport { firestore } from 'services/firebase';\n\n/**\n * React hook that retrieves a Firestore document and provides the result as a query object.\n * @param docPath - The path to the Firestore document.\n * @param [subscribe=false] - Whether to subscribe to real-time updates on the document.\n * @returns A React Query object containing the document data.\n */\nexport function useFirestoreDocument(docPath: string, subscribe = false): UseQueryResult {\n  const docRef = doc(firestore, docPath);\n  const query = useQuery({\n    queryKey: ['firestore', 'doc', docPath],\n    queryFn: async () => {\n      const snapshot = await getDoc(docRef);\n      return snapshot.data();\n    },\n  });\n\n  useEffect(() => {\n    if (subscribe) {\n      const unsubscribe = onSnapshot(docRef, () => {\n        query.refetch();\n      });\n\n      return () => unsubscribe();\n    }\n  }, [subscribe]); // eslint-disable-line\n\n  return query;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge, Tooltip } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n};\n\nexport function PlayersStatusBar({ players }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <div className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Tooltip title={player.name} placement=\"left\" trigger=\"hover\">\n                <Badge dot color={player.ready ? 'green' : 'gray'}>\n                  <Avatar\n                    id={player.avatarId}\n                    alt={player.name}\n                    size=\"small\"\n                    className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                  />\n                </Badge>\n              </Tooltip>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\n// Ant Design Resources\nimport { Alert, App, Button, Checkbox, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Components\nimport { Translate } from 'components/language';\n// Ant Design Resource\n\nexport function BlurOptions() {\n  const { message } = App.useApp();\n  const { blurCard } = useBlurCards();\n  const baseUrl = useTDBaseUrl('resources');\n\n  const { isLoading, isError, data } = useQuery({\n    queryKey: ['credo'],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/images-credo.json`);\n      return await response.json();\n    },\n  });\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { Button, Switch, Tooltip } from 'antd';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\n// Internal\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const { isAdmin } = useCurrentUserContext();\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [blurEnabled, setBlurEnabled] = useGlobalLocalStorage('blurEnabled');\n  const [volume, setVolume] = useGlobalLocalStorage('volume');\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useNavigate } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n// Ant Design Resources\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\nimport { Avatar as AntAvatar, Badge, Button, Divider, Drawer, Space } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\nimport type { GameInfo } from 'types/game-info';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DebugOnly } from 'components/debug';\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from 'components/players/PlayersStatusBar';\nimport { RulesModal } from 'components/rules';\n// Internal\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const { isAdmin, isAuthenticated, isGuest } = useCurrentUserContext();\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer-container\">\n        <button className=\"game-info-drawer-button\" onClick={toggleDrawer}>\n          <span className=\"game-info-drawer-button__game-title\">\n            {info.title?.[language] ?? '?'}\n            <DebugOnly devOnly>({players?.[userId]?.name})</DebugOnly>\n          </span>\n          <AntAvatar icon={<SettingOutlined />} size=\"small\" />\n          <div className=\"game-info-drawer-button__player-status-bar\">\n            <PlayersStatusBar players={players} />\n          </div>\n        </button>\n\n        <Drawer\n          title={\n            <GameBanner\n              title={info?.title}\n              gameName={info.gameName}\n              preview={false}\n              className=\"round-corners\"\n            />\n          }\n          placement=\"right\"\n          closable={false}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          {isAuthenticated && !isGuest && (\n            <p>\n              <Badge size=\"default\" dot color=\"green\">\n                <Avatar id={players?.[userId]?.avatarId} shape=\"square\" size=\"small\" />\n              </Badge>{' '}\n              <Translate pt=\"Você está logado!\" en=\"You are logged in!\" />\n            </p>\n          )}\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Image, Modal } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport GAME_LIST from 'utils/info';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n\ntype RedirectSessionProps = {\n  state: GameState;\n};\n\nexport function RedirectSession({ state }: RedirectSessionProps) {\n  const { language } = useLanguage();\n  const navigate = useNavigate();\n\n  const [open, setOpen] = useState<boolean | null>(null);\n\n  const hideModal = () => {\n    setOpen(false);\n  };\n\n  const redirect = state.redirect;\n\n  if (redirect) {\n    const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n    const currentMilliseconds = Date.now();\n\n    if (redirect.redirectAt - currentMilliseconds > twoHoursInMilliseconds) {\n      return <></>;\n    }\n\n    const gameInfo = GAME_LIST[redirect.gameName];\n    return (\n      <>\n        <Modal\n          title={\n            <Translate\n              pt=\"Você está convidado para uma nova partida\"\n              en=\"You've been invited to a new session\"\n            />\n          }\n          open={open ?? true}\n          onCancel={hideModal}\n          onOk={() => {\n            navigate(`/${redirect.gameId}`);\n          }}\n          okText={<Translate pt=\"Quero participar!\" en=\"Take me there!\" />}\n          cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        >\n          <Image\n            alt={gameInfo.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            className=\"round-corners\"\n          />\n          <Title>{redirect.gameId}</Title>\n        </Modal>\n      </>\n    );\n  }\n\n  return <></>;\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\n// Components\nimport { AdminMenuDrawer } from 'components/admin';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { PhaseLobby } from 'components/phases';\n// Internal\nimport { RedirectSession } from './RedirectSession';\nimport { AutoNextPhase } from 'components/general/AutoNextPhase';\nimport { GameInfo } from 'types/game-info';\n\ntype SessionProps = {\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameCollection, getActiveComponent }: SessionProps) {\n  const gameMeta = useGameMeta();\n  const { language } = useLanguage();\n  const state = useGameState(gameMeta.gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [, setLanguage] = useGlobalLocalStorage('language');\n\n  const [info, setInfo] = useState<GameInfo>(PLACEHOLDER_GAME_INFO);\n  const gameName = info?.title ?? '';\n  const players = state.players ?? {};\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection && GAME_LIST[gameCollection] ? GAME_LIST[gameCollection] : PLACEHOLDER_GAME_INFO);\n  }, [gameCollection]);\n\n  // Update session language to match the game\n  useEffect(() => {\n    if (language !== gameMeta.language) {\n      setLanguage(gameMeta.language);\n    }\n  }, [gameMeta.language]); // eslint-disable-line\n\n  if (!userId || !players[userId]) {\n    return (\n      <>\n        <RedirectSession state={state} />\n        <PhaseLobby players={players} info={info} meta={gameMeta} />;\n      </>\n    );\n  }\n\n  const ActiveComponent: any = getActiveComponent(state);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <RedirectSession state={state} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AutoNextPhase players={players} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n\nconst PLACEHOLDER_GAME_INFO: GameInfo = {\n  gameCode: ' ',\n  gameName: '',\n  version: '',\n  release: '',\n  title: { en: '', pt: '' },\n  popularName: { en: '', pt: '' },\n  basedOn: '',\n  summary: { en: '', pt: '' },\n  appearance: {\n    clouds: '',\n    color: '',\n  },\n  rules: {\n    pt: [''],\n    en: [''],\n  },\n  playerCount: {\n    recommended: [0],\n    min: 0,\n    max: 0,\n  },\n  tags: [''],\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\n// Ant Design Resources\nimport { App } from 'antd';\n// Internal\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const { notification } = App.useApp();\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate, notification]);\n}\n","import clsx from 'clsx';\nimport { ReactNode, forwardRef } from 'react';\n\nexport type StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport const Step = forwardRef<HTMLDivElement, StepProps>(\n  ({ children, announcement, fullWidth = false, fullHeight = false, className = '' }: StepProps, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'step',\n          fullWidth && 'step--full-width',\n          fullHeight && 'step--full-height',\n          className\n        )}\n      >\n        {announcement}\n        {children}\n      </div>\n    );\n  }\n);\n","import { ReactNode } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { print } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Loading } from 'components/loaders';\nimport { WaitingRoom } from 'components/players';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[] | JSX.Element;\n  /**\n   * The current step\n   */\n  step: number;\n  /*\n   * The conditions to render each step, otherwise the waiting room is rendered\n   */\n  conditions?: boolean[];\n  /**\n   * The players dictionary\n   */\n  players?: GamePlayers;\n  /**\n   * Waiting room customizations\n   */\n  waitingRoom?: {\n    /**\n     * The type of waiting room (for players or server)\n     */\n    type?: 'SERVER' | 'PLAYERS';\n    /**\n     * The instruction to replace the default one\n     */\n    instruction?: ReactNode;\n    /**\n     * Additional content to be rendered\n     */\n    content?: ReactNode;\n  };\n};\n\nexport function StepSwitcher({ children, step, conditions, players, waitingRoom = {} }: StepSwitcherProps) {\n  if (!players) print('SetSwitcher is being used without `players`, please add it.', 'warn');\n\n  const content = Array.isArray(children) ? children : [children];\n\n  if (players && step >= content.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoom.instruction ?? getWaitingRoomInstruction(waitingRoom.type ?? 'PLAYERS')}\n      >\n        {waitingRoom.content}\n      </WaitingRoom>\n    );\n  }\n\n  if (!content[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return content[step];\n  }\n\n  return <div></div>;\n}\n","import { ReactNode } from 'react';\n// Icons\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\n// Components\nimport { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n  /**\n   * Minutes\n   */\n  minutes?: number;\n  /**\n   * Seconds\n   */\n  seconds: number;\n} & Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  minutes = 0,\n  seconds,\n}: TimerClockProps) {\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","// Ant Design Resources\nimport { Progress, ProgressProps } from 'antd';\n\ninterface TimerBarProps extends ProgressProps {\n  steps?: number;\n  value: number;\n  total: number;\n}\n\n/**\n * Time Bar presentational component used in timed operations\n * @param props\n * @returns\n */\nexport function TimerBar({\n  steps,\n  strokeLinecap,\n  total,\n  type = 'line',\n  value,\n  status = 'active',\n  ...props\n}: TimerBarProps) {\n  const percentage = 100 - (value * 100) / total;\n  return (\n    <Progress\n      percent={percentage}\n      steps={steps}\n      showInfo={false}\n      style={{ marginBottom: '1rem' }}\n      size={steps && steps > 30 ? 'small' : undefined}\n      type={type}\n      {...props}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n// Internal\nimport { TimerBar } from './TimerBar';\n\ntype TimedTimerBarProps = {\n  /**\n   * Duration in seconds\n   */\n  duration: number;\n  /**\n   * Function executed when the time is up\n   */\n  onExpire: GenericFunction;\n  /**\n   * Number of ticks in the bar\n   */\n  steps?: number;\n  /**\n   * Type of bar. Default: line\n   */\n  type?: 'circle' | 'line' | 'dashboard';\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\nexport function TimedTimerBar({ duration, onExpire, type, steps = 10, className }: TimedTimerBarProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n  });\n\n  return (\n    <div className={clsx('timer-number', className)}>\n      {timeLeft} <TimerBar steps={steps} value={timeLeft} total={duration} type={type} /> {timeLeft}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useCountdown, useCountdownSettings } from 'hooks/useCountdown';\n// Icons\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\n// Components\nimport { MetricHighlight, MetricHighlightProps } from 'components/metrics/MetricHighlight';\n\nconst padTime = (value: number) => (value < 10 ? `0${value}` : value);\n\ntype TimedTimerClockProps = {\n  /**\n   * Replacement icon for the clock icon\n   */\n  icon?: ReactNode;\n  /**\n   * Optional children that comes after the time\n   */\n  children?: ReactNode;\n} & useCountdownSettings &\n  Omit<MetricHighlightProps, 'icon' | 'children'>;\n\n/**\n * Timer highlight with countdown functionality\n */\nexport function TimedTimerClock({\n  icon,\n  type,\n  iconSize,\n  children,\n  className = '',\n  iconPlacement = 'before',\n  ...timerProps\n}: TimedTimerClockProps) {\n  const { minutes, seconds } = useCountdown({ ...timerProps });\n\n  return (\n    <MetricHighlight\n      icon={icon ?? <AnimatedClockIcon />}\n      type={type}\n      iconSize={iconSize}\n      className={className}\n      iconPlacement={iconPlacement}\n    >\n      {minutes}:{padTime(seconds)}\n      {children}\n    </MetricHighlight>\n  );\n}\n","// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\n\ntype TimeForActionProps = {\n  duration: number;\n  onExpire?: () => void;\n  timeLeft?: number;\n};\n\nexport function WaitingTime({ duration, timeLeft, onExpire }: TimeForActionProps) {\n  const { timeLeft: privateTimeLeft } = useCountdown({\n    duration,\n    autoStart: timeLeft === undefined,\n    onExpire,\n  });\n\n  const percentage = ((timeLeft ?? privateTimeLeft) / duration) * 100;\n\n  return (\n    <div className=\"timer-waiting-time-bar\">\n      <span className=\"timer-waiting-time-bar__container\">\n        <span className=\"timer-waiting-time-bar__left\" style={{ width: `${percentage}%` }} />\n      </span>\n    </div>\n  );\n}\n","// Internal\nimport { useGlobalLocalStorage } from './useGlobalLocalStorage';\n\ntype UseBlurCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlurCards {\n  const [blurredCards, setBlurredCards] = useGlobalLocalStorage('blurredCards');\n  const [blurEnabled] = useGlobalLocalStorage('blurEnabled');\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards({\n      ...blurredCards,\n      [cardId]: !blurredCards?.[cardId] ?? true,\n    });\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","// Internal\nimport { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { App } from 'antd';\n// Services\nimport { GAME_API, GAME_API_COMMON_ACTIONS } from 'services/adapters';\n// Internal\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport type UseGameActionRequestArgs = {\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\ninterface Payload {\n  action: keyof typeof GAME_API_COMMON_ACTIONS | string;\n  [key: string]: any;\n}\n\n/**\n * Custom hook for making a game action request.\n *\n * @param options - The options for the game action request.\n * @param options.actionName - The name of the action.\n * @param [options.onBeforeCall] - The callback function to be called before making the API call.\n * @param [options.onAfterCall] - The callback function to be called after making the API call.\n * @param [options.onError] - The callback function to be called when an error occurs during the API call.\n * @param [options.onSuccess] - The callback function to be called when the API call is successful.\n * @param [options.successMessage] - The success message to be displayed.\n * @param [options.errorMessage] - The error message to be displayed.\n * @returns The debounced function for making the game action request.\n */\nexport function useGameActionRequest({\n  actionName,\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: UseGameActionRequestArgs): (...args: any[]) => any {\n  const { message, notification } = App.useApp();\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: Payload) =>\n      GAME_API.run({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","// Internal\nimport { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Determine is user is the Host by checking if they were the one who created the game.\n * @returns Returns true if the user is the Host, false otherwise\n */\nexport function useHost(): boolean {\n  const { createdBy } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  return createdBy === userId;\n}\n","import { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { App } from 'antd';\n// Services\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Internal\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport type UseHostActionRequestArgs = {\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\ninterface Payload {\n  action: keyof typeof HOST_API_ACTIONS;\n  [key: string]: any;\n}\n\n/**\n * Custom hook for making a host action request.\n *\n * @param options - The options for the host action request.\n * @param options.actionName - The name of the action.\n * @param [options.onBeforeCall] - The callback function to be called before making the API call.\n * @param [options.onAfterCall] - The callback function to be called after making the API call.\n * @param [options.onError] - The callback function to be called when an error occurs during the API call.\n * @param [options.onSuccess] - The callback function to be called when the API call is successful.\n * @param [options.successMessage] - The success message to be displayed.\n * @param [options.errorMessage] - The error message to be displayed.\n * @returns The debounced function for making the host action request.\n */\nexport function useHostActionRequest({\n  actionName,\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: UseHostActionRequestArgs): (...args: any[]) => any {\n  const { message, notification } = App.useApp();\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: Payload) =>\n      HOST_API.run({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","import { USE_MOCKS } from 'dev-configs';\nimport { useState } from 'react';\n// Utils\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\n// Internal\nimport { useCountdown } from './useCountdown';\nimport { useGlobalState } from './useGlobalState';\nimport { useHost } from './useHost';\n\n/**\n * Runs mock function tht performs whatever after 3-6 seconds\n * @param whatToDo\n * @param requirements\n * @param delay (default a random value between 3-6 seconds)\n * @returns\n */\nexport function useMock(whatToDo: GenericFunction, requirements: any[] = [], delay?: number) {\n  const isHost = useHost();\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n  const duration = delay ?? getRandomItem([3, 4, 4, 5, 6]);\n\n  return useCountdown({\n    duration,\n    onExpire: () => {\n      if (\n        !runOnce &&\n        isDevEnv &&\n        USE_MOCKS &&\n        !isHost &&\n        userId !== VIEWER_ID &&\n        requirements.every(Boolean)\n      ) {\n        whatToDo();\n        setRunOnce(true);\n      }\n    },\n    disabled: runOnce,\n  });\n}\n","import { useState } from 'react';\n\nexport type UseStep = {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: () => void;\n  goToPreviousStep: () => void;\n};\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): UseStep {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","/**\n * Returns the URL for the given kind of resource\n * @param kind the kind of resource\n * @returns the URL for the given kind of resource\n */\nexport function useTDBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic'): string {\n  const baseUrl = process.env.REACT_APP_TD_BASE_URL;\n\n  switch (library) {\n    case 'images':\n      return `${baseUrl}/${process.env.REACT_APP_TD_IMAGES}`;\n    case 'sprites':\n      return `${baseUrl}/${process.env.REACT_APP_TD_SPRITES}`;\n    case 'resources':\n      return `${baseUrl}/${process.env.REACT_APP_TD_RESOURCES}`;\n    case 'classic':\n      return `${baseUrl}/${process.env.REACT_APP_TD_CLASSIC}`;\n    default:\n      throw new Error('Invalid library');\n  }\n}\n","import { useEffect } from 'react';\n// Internal\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\n// Types\nimport type { GameState } from 'types/game';\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Utils\nimport { PLACEHOLDER_PLAYER, VIEWER_ID } from 'utils/constants';\n// Internal\nimport { useGlobalState } from './useGlobalState';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: GamePlayers, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        ...PLACEHOLDER_PLAYER,\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n    WAIT: 'WAIT',\n  },\n  ADEDANHX: {\n    ANSWERING: 'ANSWERING',\n    EVALUATION: 'EVALUATION',\n    RESULTS: 'RESULTS',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  COMUNICACAO_ALIENIGENA: {\n    ALIEN_SELECTION: 'ALIEN_SELECTION',\n    ALIEN_SEEDING: 'ALIEN_SEEDING',\n    HUMAN_ASK: 'HUMAN_ASK',\n    ALIEN_ANSWER: 'ALIEN_ANSWER',\n    ALIEN_REQUEST: 'ALIEN_REQUEST',\n    OFFERINGS: 'OFFERINGS',\n    REVEAL: 'REVEAL',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CONTROLE_DE_ESTOQUE: {\n    // PHASE ONE\n    GOOD_PLACEMENT: 'GOOD_PLACEMENT',\n    PLACEMENT_CONFIRMATION: 'PLACEMENT_CONFIRMATION',\n    // PHASE TWO\n    FULFILLMENT: 'FULFILLMENT',\n    RESULTS: 'RESULTS',\n  },\n  CRUZA_PALAVRAS: {\n    WORDS_SELECTION: 'WORDS_SELECTION',\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  DUETOS: {\n    PAIRING: 'PAIRING',\n    RESULTS: 'RESULTS',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    ORDERING: 'ORDERING',\n    RESULTS: 'RESULTS',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LABIRINTO_SECRETO: {\n    MAP_BUILDING: 'MAP_BUILDING',\n    PATH_FOLLOWING: 'PATH_FOLLOWING',\n    RESULTS: 'RESULTS',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TRACK: 'TRACK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  MESMICE: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    OBJECT_FEATURE_ELIMINATION: 'OBJECT_FEATURE_ELIMINATION',\n    RESULT: 'RESULT',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAO_SOU_ROBO: {\n    CARD_SELECTION: 'CARD_SELECTION',\n    ARE_YOU_A_ROBOT: 'ARE_YOU_A_ROBOT',\n    RESULTS: 'RESULTS',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    CHARACTER_FILTERING: 'CHARACTER_FILTERING',\n    CHARACTER_DESCRIPTION: 'CHARACTER_DESCRIPTION',\n    GUESSING: 'GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SINAIS_DE_ALERTA: {\n    DRAWING: 'DRAWING',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TA_NA_CARA: {\n    PROMPT: 'PROMPT',\n    ANSWERING: 'ANSWERING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TEORIA_DE_CONJUNTOS: {\n    JUDGE_SELECTION: 'JUDGE_SELECTION',\n    ITEM_PLACEMENT: 'ITEM_PLACEMENT',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TESTE_DE_ELENCO: {\n    MOVIE_GENRE_SELECTION: 'MOVIE_GENRE_SELECTION',\n    ACTOR_SELECTION: 'ACTOR_SELECTION',\n    RESULT: 'RESULT',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n    VERIFY_GUESS: 'VERIFY_GUESS',\n    RESULT: 'RESULT',\n  },\n  VAMOS_AO_CINEMA: {\n    MOVIE_SELECTION: 'MOVIE_SELECTION',\n    MOVIE_ELIMINATION: 'MOVIE_ELIMINATION',\n    REVEAL: 'REVEAL',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  VINGATIVOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n","// Internal\nimport { getRandomItem, stringRemoveAccents } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  // Special flavia\n  if (stringRemoveAccents(name.toLowerCase()).startsWith('fla')) {\n    const options = [\n      {\n        pt: `A mais sexy de todas chegou! Bem-vinda, ${name}!`,\n        en: `Welcome, ${name}!`,\n      },\n      {\n        pt: `Fiu, fiu! ${name} chegou para abalar e sensualizar!`,\n        en: `Welcome, ${name}!`,\n      },\n      {\n        pt: `Olha só quem chegou! ${name}, a mais linda de todas!`,\n        en: `Welcome, ${name}!`,\n      },\n    ];\n\n    return getRandomItem(options);\n  }\n\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n    {\n      pt: `Olha quem decidiu dar as caras! Bem-vindo, ${name}!`,\n      en: `Look who decided to show up! Welcome, ${name}!`,\n    },\n    {\n      pt: `A festa começou! ${name} chegou!`,\n      en: `The party has started! ${name} is here!`,\n    },\n    {\n      pt: `Seja bem-vindo ao rolê, ${name}!`,\n      en: `Welcome to the fun, ${name}!`,\n    },\n    {\n      pt: `Você trouxe a energia boa, ${name}! Vamos lá!`,\n      en: `You brought the good vibes, ${name}! Let’s go!`,\n    },\n    {\n      pt: `Ah, que delícia! ${name} chegou para animar a galera!`,\n      en: `Oh, how wonderful! ${name} is here to spice things up!`,\n    },\n    {\n      pt: `Atenção, pessoal! O rei ou rainha ${name} chegou!`,\n      en: `Attention, everyone! King or Queen ${name} has arrived!`,\n    },\n    {\n      pt: `Ei, ${name}! Você trouxe o lanche? Porque a diversão já começou!`,\n      en: `Hey, ${name}! Did you bring snacks? Because the fun has already started!`,\n    },\n    {\n      pt: `Preparem-se! ${name} é a estrela do show!`,\n      en: `Get ready! ${name} is the star of the show!`,\n    },\n    {\n      pt: `Olha o povo! ${name} entrou e agora é só alegria!`,\n      en: `Look out, world! ${name} is here and it’s all fun from now on!`,\n    },\n    {\n      pt: `Parou tudo! ${name} chegou e agora o jogo vai bombar!`,\n      en: `Hold everything! ${name} has arrived, and now the game is about to blow up!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n    {\n      pt: `Pronto! Que comece a diversão! Não se esqueça de respirar, ${name}!`,\n      en: `Ready! Let the fun begin! Don't forget to breathe, ${name}!`,\n    },\n    {\n      pt: `Pronto! Agora é só esperar esses lagartixas chegarem!`,\n      en: `Ready! Now just waiting for those slowpokes to show up!`,\n    },\n    {\n      pt: `Pronto! Se você estiver tão empolgado quanto eu, vamos arrebentar!`,\n      en: `Ready! If you're as excited as I am, we’re going to crush it!`,\n    },\n    {\n      pt: `Pronto! Espero que você tenha trazido suas habilidades secretas!`,\n      en: `Ready! I hope you brought your secret skills with you!`,\n    },\n    {\n      pt: `Pronto! Estou mais ansioso que criança na véspera de Natal!`,\n      en: `Ready! I'm more excited than a kid on Christmas Eve!`,\n    },\n    {\n      pt: `Pronto! Hora de mostrar quem manda! Boa sorte, ${name}!`,\n      en: `Ready! Time to show who's boss! Good luck, ${name}!`,\n    },\n    {\n      pt: `Pronto! Prepare-se para a aventura mais épica da sua vida!`,\n      en: `Ready! Get ready for the most epic adventure of your life!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n    {\n      pt: `Relaxa, ${name}! O importante é se divertir... e perder!`,\n      en: `Relax, ${name}! The important thing is to have fun... and lose!`,\n    },\n    {\n      pt: `Não se preocupe, a confusão faz parte do jogo!`,\n      en: `Don’t worry, confusion is part of the game!`,\n    },\n    {\n      pt: `Ok, sem regras, só instinto! Vamos ver no que dá!`,\n      en: `Okay, no rules, just instincts! Let’s see how this goes!`,\n    },\n    {\n      pt: `Quem precisa de regras? O jogo vai ficar mais interessante assim!`,\n      en: `Who needs rules? The game will be way more interesting this way!`,\n    },\n    {\n      pt: `Não tenha medo! O pior que pode acontecer é... bem, vamos descobrir!`,\n      en: `Don’t be scared! The worst that can happen is... well, let’s find out!`,\n    },\n    {\n      pt: `Vai ser divertido! E se não for, pelo menos temos histórias!`,\n      en: `It’ll be fun! And if not, at least we’ll have stories to tell!`,\n    },\n    {\n      pt: `A única regra é... não há regras! Vamos nessa, ${name}!`,\n      en: `The only rule is... there are no rules! Let’s do this, ${name}!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n    {\n      pt: `Olha só, ${name}. Se não entendeu as regras, é melhor segurar o choro!`,\n      en: `Look, ${name}. If you didn't get the rules, you better hold back those tears!`,\n    },\n    {\n      pt: `Uau, ${name}, você é um verdadeiro prodígio da confusão! Vamos lá!`,\n      en: `Wow, ${name}, you’re a true prodigy of confusion! Let’s do this!`,\n    },\n    {\n      pt: `Ah, não se preocupe, ${name}. A derrota vai ser tão engraçada quanto a sua falta de atenção!`,\n      en: `Oh, don’t worry, ${name}. Your loss is going to be as funny as your lack of focus!`,\n    },\n    {\n      pt: `Vish, ${name}, quem precisa de regras quando se tem uma boa dose de caos?`,\n      en: `Yikes, ${name}, who needs rules when you can have a good dose of chaos?`,\n    },\n    {\n      pt: `Se você não entendeu nada, é melhor pedir ajuda a alguém... ou não!`,\n      en: `If you didn’t get anything, you might want to ask for help... or not!`,\n    },\n    {\n      pt: `Espero que você seja bom em improvisar, porque as regras não ajudaram!`,\n      en: `I hope you’re good at improvising because the rules didn’t help!`,\n    },\n    {\n      pt: `Que lindo, ${name}. Você entrou na aventura sem saber o que está fazendo!`,\n      en: `How lovely, ${name}. You jumped into the adventure without knowing what you’re doing!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n"],"names":["AdminPerformActionButton","label","props","icon","type","danger","className","ValueFormItem","valueType","Item","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","message","App","useApp","Form","useForm","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","HOST_API_ACTIONS","FORCE_STATE_PROPERTY","resetFields","error","initialValues","rules","required","A","options","onChange","newType","includes","setFieldsValue","Option","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","isAdmin","useCurrentUserContext","useGlobalState","usingFirestoreEmulator","isAdminEnabled","visible","setVisible","meta","useGameMeta","onClose","useHostActionRequest","actionName","successMessage","errorMessage","onAfterCall","phase","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","GO_TO_NEXT_PHASE","PLAY_AGAIN","FORCE_END_GAME","round","forceLastRound","RESET_GAME","target","href","getFirebaseUrl","Boolean","gameName","gameId","SignIn","onSuccess","view","setView","src","logo","preview","checked","SignInWithGoogle","SignInWithEmail","useMutation","mutationFn","signInWithGoogle","isPending","mutate","isError","direction","align","classNames","item","description","showIcon","size","loading","block","translate","useLanguage","showForgotPassword","setShowForgotPassword","signIn","getFieldValue","labelCol","span","wrapperCol","maxWidth","remember","autoComplete","help","Password","offset","v","ResetPasswordForm","email","resetPassword","success","username","level","DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","DevButton","rest","BugFilled","AutoNextPhase","every","current","total","autoTriggerTime","GameBanner","language","alt","PUBLIC_URL","BANNERS","fallback","HostButton","RocketOutlined","ghost","clsx","HostOnlyContainer","useHost","ButtonLabel","HostNextPhaseButton","withWaitingTimeBar","isHost","loaders","onGoToNextPhase","handleClick","hasTimer","useCountdown","autoStart","duration","onExpire","timeLeft","isRunning","pause","resume","useEffect","getAnimationClass","PauseOutlined","PlayCircleOutlined","speed","infinite","HostOnlyButton","MetricHighlight","iconSize","iconPlacement","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","baseClass","backgroundColorOverlay","appearance","backgroundColor","id","ref","PhaseAnnouncement","buttonText","currentRound","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","autoFocus","custom","SingleCloud","backgroundImage","CLOUDS","backgroundPositionX","cloudData","MultiCloud","index","CloudBackground","cloudType","CloudTypeComponent","split","getCloudComponent","StepJoin","setStep","isAuthenticated","mutationKey","signInAsGuest","summary","S","LobbyStep","isLocked","DEV_NAMES","cacheNames","getRandomUniqueItemFromList","source","used","cache","randomItem","tries","getRandomItem","mockPlayerName","AvatarSelection","setSelectedAvatar","selectedAvatar","userId","availableAvatars","useMemo","usedAvatars","avatarId","newAvailableAvatars","AVAILABLE_AVATAR_IDS","filter","onPreviousAvatar","useCallback","indexOf","newIndex","length","onNextAvatar","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","Settings","hasImages","useGlobalLocalStorage","blurEnabled","setBlurEnabled","volume","setVolume","shape","InfoCircleOutlined","UsualAvatarsSelection","avatarsIds","UsualAvatarOption","randomName","StepInfo","currentUser","isGuest","names","at","setName","useLocalStorage","lsAvatarId","lsUsername","setUserId","setUsername","setUserAvatarId","notification","query","GAME_API","run","GAME_API_COMMON_ACTIONS","JOIN_GAME","playerAvatarId","response","data","localStorage","setItem","getKey","speak","getRandomWelcomeMessage","onError","console","useAddPlayer","hasPlayedBefore","games","nameOptions","trim","onSelect","placeholder","maxLength","tags","StepWaiting","setLoader","gameMeta","userAvatarId","HOST_API","LOCK_GAME","onSettled","isLocking","numPlayers","Text","min","PhaseLobby","useStep","step","localUsername","localAvatarId","resetGlobalState","orderBy","left","right","PHASES","DEFAULT","LOBBY","transform","top","animate","clouds","PhasePlaceholder","PhaseRules","user","useUser","setIsAdminEnabled","useGameId","queryClient","useQueryClient","invalidateQueries","queryKey","onBeReady","useGameActionRequest","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","MAKE_ME_READY","Content","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","SETUP","AnimatedGearIcon","PhaseTimerReset","goToNextStep","useEffectOnce","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","additionalInfoParser","orderList","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","width","startWith","starterIndex","slice","useGameState","docPath","subscribe","docRef","doc","firestore","useQuery","queryFn","getDoc","snapshot","unsubscribe","onSnapshot","refetch","useFirestoreDocument","isRefetching","count","print","PlayersStatusBar","sortPlayers","trigger","dot","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","score","BlurOptions","blurCard","useBlurCards","baseUrl","useTDBaseUrl","fetch","json","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","selectedGroups","forEach","flat","SectionSettings","toggleDevFeatures","s","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","gameInfo","FireOutlined","RedirectSession","setOpen","redirect","currentMilliseconds","Date","now","redirectAt","GAME_LIST","onCancel","onOk","okText","cancelText","Session","gameCollection","getActiveComponent","setLanguage","PLACEHOLDER_GAME_INFO","setInfo","isIdle","useIdle","warning","useIdleRedirect","useTitle","ActiveComponent","gameCode","version","release","popularName","basedOn","playerCount","recommended","max","Step","forwardRef","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","conditions","waitingRoom","content","Array","isArray","TimerClock","minutes","seconds","AnimatedClockIcon","TimerBar","steps","strokeLinecap","status","percentage","percent","showInfo","marginBottom","TimedTimerBar","TimedTimerClock","timerProps","WaitingTime","privateTimeLeft","blurredCards","setBlurredCards","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","onBeforeCall","onMutate","func","timer","timeout","args","clearTimeout","apply","debounce","createdBy","whatToDo","requirements","delay","runOnce","setRunOnce","USE_MOCKS","VIEWER_ID","startingStep","goToPreviousStep","library","process","Error","ignore","setShowPlayersBar","setUser","setIsReady","PLACEHOLDER_PLAYER","updatedAt","online","RULES","GAME_OVER","WAIT","ADEDANHX","ANSWERING","EVALUATION","RESULTS","ARTE_RUIM","DRAW","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CINEGRAFISTAS_AMADORES","UNKNOWN","COMUNICACAO_ALIENIGENA","ALIEN_SELECTION","ALIEN_SEEDING","HUMAN_ASK","ALIEN_ANSWER","ALIEN_REQUEST","OFFERINGS","REVEAL","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CONTROLE_DE_ESTOQUE","GOOD_PLACEMENT","PLACEMENT_CONFIRMATION","FULFILLMENT","CRUZA_PALAVRAS","WORDS_SELECTION","CLUE_WRITING","GUESSING","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","DUETOS","PAIRING","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","ORDERING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","LABIRINTO_SECRETO","MAP_BUILDING","PATH_FOLLOWING","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TRACK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","MESMICE","OBJECT_FEATURE_ELIMINATION","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAO_SOU_ROBO","CARD_SELECTION","ARE_YOU_A_ROBOT","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","CHARACTER_FILTERING","CHARACTER_DESCRIPTION","RETRATO_FALADO","COMPOSITE_SKETCH","SINAIS_DE_ALERTA","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","TA_NA_CARA","PROMPT","TEORIA_DE_CONJUNTOS","JUDGE_SELECTION","ITEM_PLACEMENT","TESTEMUNHA_OCULAR","WITNESS_SELECTION","QUESTIONING","TRIAL","TESTE_DE_ELENCO","MOVIE_GENRE_SELECTION","ACTOR_SELECTION","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VERIFY_GUESS","VAMOS_AO_CINEMA","MOVIE_SELECTION","MOVIE_ELIMINATION","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","VINGATIVOS","TEMPLATE","text","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis","stringRemoveAccents","toLowerCase","startsWith"],"sourceRoot":""}