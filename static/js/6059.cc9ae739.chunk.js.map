{"version":3,"file":"static/js/6059.cc9ae739.chunk.js","mappings":"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","sources":["components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","components/text/RuleInstruction.tsx","utils/info.ts"],"sourcesContent":["import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse, CollapseProps } from 'antd';\n// Components\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const panels: CollapseProps['items'] = [\n    {\n      key: '1',\n      label: <Translate pt=\"Regras\" en=\"Rules\" custom={title} />,\n      children: children,\n    },\n  ];\n\n  return (\n    <Instruction contained>\n      <Collapse ghost items={panels} />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button, Space } from 'antd';\nimport { CarouselRef } from 'antd/es/carousel';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { createRef } from 'react';\nimport { Translate } from 'components/language';\nimport { useKeyPressEvent } from 'react-use';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <Space className={clsx('space-container', actionsClassName)}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <div className=\"rules-modal-content\">\n            <RulesCarousel info={gameInfo} />\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  noMargin?: boolean;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({\n  children,\n  white,\n  className,\n  contained,\n  fullWidth,\n  noMargin = false,\n}: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        noMargin && `${baseClass}--no-margin`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Types\nimport type { GameRound } from 'types/game';\n// Components\nimport { Translate } from 'components/language';\nimport { RuleInstruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || round.forceLastRound) {\n    return (\n      <RuleInstruction type=\"event\">\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </RuleInstruction>\n    );\n  }\n\n  return (\n    <RuleInstruction type=\"tip\">\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong> {pluralize(left, 'rodada')} para o\n            jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round')} left for the game to end...\n          </>\n        }\n      />\n    </RuleInstruction>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function TextHighlight({ children, className }: TextHighlightProps) {\n  return <span className={clsx('text-highlight', className)}>{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\nexport type TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level (default: 2)\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title (default: medium)\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n  /**\n   * The alignment of the text (default: center)\n   */\n  align?: 'left' | 'right' | 'center';\n};\n\nexport const Title = ({\n  children,\n  white,\n  icon,\n  className,\n  level = 2,\n  size = 'medium',\n  align = 'center',\n}: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, `title--align-${align}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography, theme } from 'antd';\nimport {\n  AlertFilled,\n  BulbFilled,\n  ClockCircleFilled,\n  ExclamationCircleFilled,\n  MessageFilled,\n  PlayCircleFilled,\n  ReadFilled,\n  RobotFilled,\n  StarFilled,\n} from '@ant-design/icons';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Sass\nimport './RuleInstruction.scss';\n\nexport type RuleInstructionProps = {\n  /**\n   * The content of the rule instruction\n   */\n  children: ReactNode;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * The type of the rule instruction (default: rule)\n   * Rule is used for general rules\n   * Action is used when the player must do something\n   * Event is used when something happens like the result of an action or decision\n   * Alert is used when something very important needs attention (constant animation)\n   * Lore is used for story elements\n   * Scoring for result points (not rule)\n   * Wait for when the player must wait for something to happen\n   */\n  type: 'rule' | 'action' | 'event' | 'alert' | 'lore' | 'tip' | 'scoring' | 'wait' | 'bot';\n  /**\n   * Optional sound effect played when the component is rendered\n   */\n  sfx?: ReactNode;\n};\n\n/**\n * Typography container for rules instructions, if multiple lines, use <br /> to break lines\n * Do not use lists (ul, ol, li) inside this component\n * Add an icon on the left side\n */\nexport const RuleInstruction = ({\n  children,\n  className,\n  fullWidth,\n  type = 'rule',\n  sfx,\n}: RuleInstructionProps) => {\n  const baseClass = 'rule-instruction';\n\n  const icon = {\n    action: <PlayCircleFilled />,\n    alert: <AlertFilled />,\n    event: <ExclamationCircleFilled />,\n    lore: <MessageFilled />,\n    rule: <ReadFilled />,\n    tip: <BulbFilled />,\n    scoring: <StarFilled />,\n    wait: <ClockCircleFilled />,\n    bot: <RobotFilled />,\n  }[type];\n\n  const animationClass = {\n    action: getAnimationClass('shakeX'),\n    alert: getAnimationClass('flash', { infinite: true, speed: 'fast' }),\n    event: getAnimationClass('tada', { repeat: 3, speed: 'fast' }),\n    lore: getAnimationClass('pulse'),\n    rule: getAnimationClass('pulse'),\n    tip: getAnimationClass('pulse'),\n    scoring: getAnimationClass('pulse'),\n    wait: getAnimationClass('pulse'),\n    bot: getAnimationClass('pulse'),\n  }[type];\n\n  const { token } = theme.useToken();\n  const color = type === 'action' ? { background: token.colorPrimary } : {};\n\n  return (\n    <div\n      className={clsx(baseClass, fullWidth && `${baseClass}--full-width`, className)}\n      data-testid=\"rule-instruction\"\n    >\n      <div className={clsx(`${baseClass}__icon`, `${baseClass}__icon--${type}`)} style={color}>\n        <div className={animationClass}>{icon}</div>\n      </div>\n      {sfx}\n      <Typography.Paragraph className={clsx(`${baseClass}__content`)}>{children}</Typography.Paragraph>\n    </div>\n  );\n};\n","// Types\nimport type { GameInfo } from 'types/game-info';\n// Games\nimport ADEDANHX from 'games/adedanhx/game-info.json';\nimport ARTE_RUIM from 'games/arte-ruim/game-info.json';\nimport BOMBA_RELOGIO from 'games/bomba-relogio/game-info.json';\nimport CINEGRAFISTAS_AMADORES from 'games/cinegrafistas-amadores/game-info.json';\nimport COMUNICACAO_ALIENIGENA from 'games/comunicacao-alienigena/game-info.json';\nimport CONTADORES_HISTORIAS from 'games/contadores-historias/game-info.json';\nimport CRIMES_HEDIONDOS from 'games/crimes-hediondos/game-info.json';\nimport CRUZA_PALAVRAS from 'games/cruza-palavras/game-info.json';\nimport DETETIVES_IMAGINATIVOS from 'games/detetives-imaginativos/game-info.json';\nimport DILEMA_DOS_ESQUIADORES from 'games/dilema-dos-esquiadores/game-info.json';\nimport DUETOS from 'games/duetos/game-info.json';\nimport ESCAPE_ROOM from 'games/escape-room/game-info.json';\nimport ESPIAO_ENTRE_NOS from 'games/espiao-entre-nos/game-info.json';\nimport FILEIRA_DE_FATOS from 'games/fileira-de-fatos/game-info.json';\nimport GALERIA_DE_SONHOS from 'games/galeria-de-sonhos/game-info.json';\nimport INSTRUMENTOS_CODIFICADOS from 'games/instrumentos-codificados/game-info.json';\nimport LABIRINTO_SECRETO from 'games/labirinto-secreto/game-info.json';\nimport LINHAS_CRUZADAS from 'games/linhas-cruzadas/game-info.json';\nimport MEGAMIX from 'games/megamix/game-info.json';\nimport MENTE_COLETIVA from 'games/mente-coletiva/game-info.json';\nimport MESMICE from 'games/mesmice/game-info.json';\nimport NA_RUA_DO_MEDO from 'games/na-rua-do-medo/game-info.json';\nimport NAO_SOU_ROBO from 'games/nao-sou-robo/game-info.json';\nimport NAUFRAGOS from 'games/naufragos/game-info.json';\nimport ONDA_TELEPATICA from 'games/onda-telepatica/game-info.json';\nimport PALHETA_DE_CORES from 'games/palheta-de-cores/game-info.json';\nimport POLEMICA_DA_VEZ from 'games/polemica-da-vez/game-info.json';\nimport PORTA_DOS_DESESPERADOS from 'games/porta-dos-desesperados/game-info.json';\nimport QUEM_NAO_MATA from 'games/quem-nao-mata/game-info.json';\nimport QUEM_SOU_EU from 'games/quem-sou-eu/game-info.json';\nimport RETRATO_FALADO from 'games/retrato-falado/game-info.json';\nimport SINAIS_DE_ALERTA from 'games/sinais-de-alerta/game-info.json';\nimport SONHOS_PESADELOS from 'games/sonhos-pesadelos/game-info.json';\nimport SUPER_CAMPEONATO from 'games/super-campeonato/game-info.json';\nimport TA_NA_CARA from 'games/ta-na-cara/game-info.json';\nimport TEORIA_DE_CONJUNTOS from 'games/teoria-de-conjuntos/game-info.json';\nimport TESTEMUNHA_OCULAR from 'games/testemunha-ocular/game-info.json';\nimport TESTE_DE_ELENCO from 'games/teste-de-elenco/game-info.json';\nimport TREVO_DA_SORTE from 'games/trevo-da-sorte/game-info.json';\nimport UE_SO_ISSO from 'games/ue-so-isso/game-info.json';\nimport VAMOS_AO_CINEMA from 'games/vamos-ao-cinema/game-info.json';\nimport VENDAVAL_DE_PALPITE from 'games/vendaval-de-palpite/game-info.json';\nimport VICE_CAMPEAO from 'games/vice-campeao/game-info.json';\nimport VINGATIVOS from 'games/vingativos/game-info.json';\nimport comingSoonGames from 'assets/data/coming-soon-games.json';\n\nconst others = comingSoonGames as Record<GameName, GameInfo>;\n\nexport const GAME_LIST: Record<GameName, GameInfo> = {\n  ...others,\n  adedanhx: ADEDANHX,\n  'arte-ruim': ARTE_RUIM,\n  'bomba-relogio': BOMBA_RELOGIO,\n  'cinegrafistas-amadores': CINEGRAFISTAS_AMADORES,\n  'comunicacao-alienigena': COMUNICACAO_ALIENIGENA,\n  'contadores-historias': CONTADORES_HISTORIAS,\n  'crimes-hediondos': CRIMES_HEDIONDOS,\n  'cruza-palavras': CRUZA_PALAVRAS,\n  'detetives-imaginativos': DETETIVES_IMAGINATIVOS,\n  'dilema-dos-esquiadores': DILEMA_DOS_ESQUIADORES,\n  duetos: DUETOS,\n  'escape-room': ESCAPE_ROOM,\n  'espiao-entre-nos': ESPIAO_ENTRE_NOS,\n  'fileira-de-fatos': FILEIRA_DE_FATOS,\n  'galeria-de-sonhos': GALERIA_DE_SONHOS,\n  'instrumentos-codificados': INSTRUMENTOS_CODIFICADOS,\n  'labirinto-secreto': LABIRINTO_SECRETO,\n  'linhas-cruzadas': LINHAS_CRUZADAS,\n  megamix: MEGAMIX,\n  'mente-coletiva': MENTE_COLETIVA,\n  mesmice: MESMICE,\n  'na-rua-do-medo': NA_RUA_DO_MEDO,\n  'nao-sou-robo': NAO_SOU_ROBO,\n  naufragos: NAUFRAGOS,\n  'onda-telepatica': ONDA_TELEPATICA,\n  'palheta-de-cores': PALHETA_DE_CORES,\n  'polemica-da-vez': POLEMICA_DA_VEZ,\n  'porta-dos-desesperados': PORTA_DOS_DESESPERADOS,\n  'quem-nao-mata': QUEM_NAO_MATA,\n  'quem-sou-eu': QUEM_SOU_EU,\n  'retrato-falado': RETRATO_FALADO,\n  'sinais-de-alerta': SINAIS_DE_ALERTA,\n  'sonhos-pesadelos': SONHOS_PESADELOS,\n  'super-campeonato': SUPER_CAMPEONATO,\n  'ta-na-cara': TA_NA_CARA,\n  'teoria-de-conjuntos': TEORIA_DE_CONJUNTOS,\n  'testemunha-ocular': TESTEMUNHA_OCULAR,\n  'teste-de-elenco': TESTE_DE_ELENCO,\n  'trevo-da-sorte': TREVO_DA_SORTE,\n  'ue-so-isso': UE_SO_ISSO,\n  'vamos-ao-cinema': VAMOS_AO_CINEMA,\n  'vendaval-de-palpite': VENDAVAL_DE_PALPITE,\n  'vice-campeao': VICE_CAMPEAO,\n  vingativos: VINGATIVOS,\n};\n\nexport default GAME_LIST;\n"],"names":["CollapsibleRule","children","title","panels","key","label","pt","en","custom","contained","ghost","items","PopoverRule","content","showLabel","type","position","icon","ReadOutlined","RulesCarousel","info","className","ruleClassName","actionsClassName","language","useLanguage","ref","createRef","useKeyPressEvent","current","prev","next","clsx","autoplay","autoplaySpeed","rules","map","rule","index","src","PUBLIC_URL","gameName","fallback","alt","onClick","size","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","buttonProps","translate","useState","isVisible","setVisibility","onCloseModal","open","onCancel","footer","Instruction","white","fullWidth","noMargin","baseClass","RoundsLeftInstruction","round","left","total","forceLastRound","pluralize","TextHighlight","Title","level","align","Boolean","RuleInstruction","sfx","action","PlayCircleFilled","alert","AlertFilled","event","ExclamationCircleFilled","lore","MessageFilled","ReadFilled","tip","BulbFilled","scoring","StarFilled","wait","ClockCircleFilled","bot","RobotFilled","animationClass","getAnimationClass","infinite","speed","repeat","token","theme","color","background","colorPrimary","style","others","adedanhx","ADEDANHX","ARTE_RUIM","BOMBA_RELOGIO","CINEGRAFISTAS_AMADORES","COMUNICACAO_ALIENIGENA","CONTADORES_HISTORIAS","CRIMES_HEDIONDOS","CRUZA_PALAVRAS","DETETIVES_IMAGINATIVOS","DILEMA_DOS_ESQUIADORES","duetos","DUETOS","ESCAPE_ROOM","ESPIAO_ENTRE_NOS","FILEIRA_DE_FATOS","GALERIA_DE_SONHOS","INSTRUMENTOS_CODIFICADOS","LABIRINTO_SECRETO","LINHAS_CRUZADAS","megamix","MEGAMIX","MENTE_COLETIVA","mesmice","MESMICE","NA_RUA_DO_MEDO","NAO_SOU_ROBO","naufragos","NAUFRAGOS","ONDA_TELEPATICA","PALHETA_DE_CORES","POLEMICA_DA_VEZ","PORTA_DOS_DESESPERADOS","QUEM_NAO_MATA","QUEM_SOU_EU","RETRATO_FALADO","SINAIS_DE_ALERTA","SONHOS_PESADELOS","SUPER_CAMPEONATO","TA_NA_CARA","TEORIA_DE_CONJUNTOS","TESTEMUNHA_OCULAR","TESTE_DE_ELENCO","TREVO_DA_SORTE","UE_SO_ISSO","VAMOS_AO_CINEMA","VENDAVAL_DE_PALPITE","VICE_CAMPEAO","vingativos","VINGATIVOS"],"sourceRoot":""}