{"version":3,"file":"static/js/6393.e3045e54.chunk.js","mappings":"8VAWaA,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAUC,GAAb,mBACtC,SAAC,MAAD,gBAAQC,MAAM,SAAC,IAAD,IAAgBC,KAAK,UAAUC,QAAM,EAACC,UAAU,cAAiBJ,GAA/E,aACGD,IAFmC,E,uHCD3BM,EAAgB,SAAC,GAC5B,OADkE,EAApCC,WAE5B,IAAK,SACH,OACE,SAAC,SAAD,CAAWP,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,MAGN,IAAK,UACH,OACE,SAAC,SAAD,CAAWR,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,CAAQC,gBAAgB,OAAOC,kBAAkB,QAAQC,gBAAc,MAG7E,IAAK,UACH,OACE,SAAC,SAAD,CAAWX,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,CAAQC,gBAAgB,OAAOC,kBAAkB,YAAYC,gBAAc,MAGjF,QACE,OACE,SAAC,SAAD,CAAWX,MAAM,QAAQQ,KAAK,QAA9B,UACE,SAAC,IAAD,MAIT,ECdYI,EAAiB,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,UAAWC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,qBACzCC,EAAYC,EAAAA,EAAAA,SAAZD,QACR,EAAeE,EAAAA,EAAAA,UAARC,GAAP,eACA,GAAkCC,EAAAA,EAAAA,UAAS,UAA3C,eAAOb,EAAP,KAAkBc,EAAlB,KACMC,EAAYC,OAAOC,KAAKV,GAAOW,KAAI,SAACC,GAAD,MAAQ,CAAE1B,MAAO0B,EAAGC,MAAOD,EAA3B,IASnCE,EAAQ,mCAAG,WAAOC,GAAP,8EACXC,EAAcD,EAAEF,MADL,SAIO,WAAhBE,EAAEtB,YACJuB,EAAW,UAAGC,OAAOF,EAAEF,cAAZ,QAAsB,GAEf,YAAhBE,EAAEtB,YACJuB,EAAcD,EAAEF,MAAQ,UAAOK,GAG3BC,GAXO,UAYVJ,EAAEK,IAAMJ,IAGPK,OAAOC,QAAP,kDAAuDC,KAAKC,UAAUL,KAf7D,iCAgBLlB,EAAqB,CAAED,MAAOmB,EAASM,OAAQC,EAAAA,GAAAA,uBAhB1C,OAkBXrB,EAAKsB,cACLpB,EAAa,UAnBF,0DAsBbL,EAAQ0B,MAAM,uBAAd,MAtBa,0DAAH,sDA0Bd,OACE,UAAC,IAAD,CAAMlC,KAAK,QAAQW,KAAMA,EAAMwB,cAAe,CAAEpC,UAAW,UAAYqB,SAAUA,EAAjF,WACE,4CACA,SAAC,SAAD,CAAW5B,MAAM,MAAMQ,KAAK,MAAMoC,MAAO,CAAC,CAAEC,UAAU,IAAtD,UACE,SAAC,IAAD,CAAcC,QAASxB,OAEzB,SAAC,SAAD,CAAWtB,MAAM,OAAOQ,KAAK,YAA7B,UACE,UAAC,IAAD,CAAQuC,SAxCkB,SAACC,GAC3B,CAAC,UAAW,WAAWC,SAASD,IAAU7B,EAAK+B,eAAe,CAAEvB,OAAO,IAC3D,WAAZqB,GAAsB7B,EAAK+B,eAAe,CAAEvB,MAAO,IACvC,WAAZqB,GAAsB7B,EAAK+B,eAAe,CAAEvB,MAAO,KACvDN,EAAa2B,EACd,EAmCK,WACE,SAAC,WAAD,CAAerB,MAAM,SAArB,qBACA,SAAC,WAAD,CAAeA,MAAM,SAArB,qBACA,SAAC,WAAD,CAAeA,MAAM,UAArB,sBACA,SAAC,WAAD,CAAeA,MAAM,UAArB,2BAIJ,SAACrB,EAAD,CAAeC,UAAWA,KAE1B,SAAC,KAAD,CAAQJ,KAAK,UAAUgD,SAAS,SAASC,SAAUvC,EAAWT,QAAM,EAApE,sBAKL,E,qBCnEM,SAASiD,EAAT,GAAiE,IAApCC,EAAmC,EAAnCA,QAClC,EAAuD/B,OAAOgC,OAAOD,GAASE,QAC5E,SAACC,EAAmBC,GAOlB,OANIA,EAAOC,MACTF,EAAIG,aAAaC,KAAKH,EAAOlD,MAE7BiD,EAAIK,eAAeD,KAAKH,EAAOlD,MAG1BiD,CACR,GACD,CACEG,aAAc,GACdE,eAAgB,KAZZF,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,eAgBtB,OACE,gBAAIzD,UAAU,4BAAd,WACE,iDACA,iBAAKA,UAAU,mCAAf,WACE,SAAC0D,EAAA,EAAD,CAAmBC,MAAO,CAAEC,MAAO,SAAWC,MAAM,YACpD,eAAI7D,UAAU,kCAAd,SACGuD,EAAanC,KAAI,SAAC0C,GAAD,OAChB,eAAuC9D,UAAU,kCAAjD,SACG8D,GADH,uBAAyBA,GADT,UAOtB,iBAAK9D,UAAU,mCAAf,WACE,SAAC+D,EAAA,EAAD,CAAmBJ,MAAO,CAAEC,MAAO,UAAYC,MAAM,YACrD,eAAI7D,UAAU,kCAAd,SACGyD,EAAerC,KAAI,SAAC0C,GAAD,OAClB,eAAuC9D,UAAU,kCAAjD,SACG8D,GADH,uBAAyBA,GADP,WAS7B,C,0BCzBYE,EAAkB,SAAC,GAA8C,IAAD,EAA3CvD,EAA2C,EAA3CA,MAAOwC,EAAoC,EAApCA,QAC/BzC,GAAcyD,EAAAA,EAAAA,KAAdzD,UACA0D,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAAiCE,EAAAA,EAAAA,IAAe,0BAAzCC,GAAP,eACA,GAAyBD,EAAAA,EAAAA,IAAe,kBAAjCE,GAAP,eACA,GAA8BvD,EAAAA,EAAAA,WAAS,GAAvC,eAAOwD,EAAP,KAAgBC,EAAhB,KACMC,GAAOC,EAAAA,EAAAA,KAKPC,EAAU,WACdH,GAAW,EACZ,EAEK9D,GAAuBkE,EAAAA,EAAAA,GAAW,CACtCC,YAAaC,EAAAA,GAAAA,mBACbC,WAAY,uBACZC,eAAgB,sCAChBC,aAAc,uCACdC,YAAaP,IAGf,OAAKT,GAAYI,GAAmB7D,EAAM0E,OAGxC,+BACE,iBAAKnF,UAAU,oBAAf,WACE,SAAC,KAAD,CACEoF,UAAW,EACXvF,MAAM,SAAC,IAAD,IACNC,KAAK,SACLH,OAAO,SAAC,KAAD,CAAW0F,GAAG,SAASC,GAAG,WACjCC,QAzBW,WACjBf,GAAW,EACZ,EAwBOgB,YAAa,CACX1F,KAAM,cAIV,SAAC,IAAD,CAAQ+D,MAAM,aAAa4B,UAAU,OAAOC,UAAU,EAAOC,KAAMpB,EAASI,QAASA,EAArF,UACE,2BACE,SAAC,EAAD,CAAmB1B,QAASA,KAC5B,yBACE,qBAEF,gBAAIjD,UAAU,6BAAd,WACE,qCACA,SAAC,IAAD,CACEyF,UAAU,QACV5B,MAAM,iDACN+B,UAAW,kBAAMlF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,kBAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,SAAUvC,GAA6B,cAAhBC,EAAM0E,MAC7BxF,MAAM,mBACNK,UAAU,iCAGd,SAAC,IAAD,CACEyF,UAAU,QACV5B,MAAM,6CACN+B,UAAW,kBAAMlF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,YAArC,EAHb,UAKE,SAACzC,EAAD,CAGEqD,UAAQ,EACRpD,MAAM,aACNK,UAAU,iCAGd,SAAC,IAAD,CACEyF,UAAU,QACV5B,MAAM,wEACN+B,UAAW,kBAAMlF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,gBAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,UACO,OAALtC,QAAK,IAALA,GAAA,UAAAA,EAAOoF,aAAP,eAAcC,iBACdtF,GACA,CAAC,QAAS,QAAS,aAAaoC,SAASnC,EAAM0E,OAEjDxF,MACO,OAALc,QAAK,IAALA,GAAAA,EAAOoF,MAAMC,eACT,wCACA,2BAEN9F,UAAU,iCAGd,SAAC,IAAD,CACEyF,UAAU,QACV5B,MAAM,gEACN+B,UAAW,kBAAMlF,EAAqB,CAAEwB,OAAQC,EAAAA,GAAAA,YAArC,EAHb,UAKE,SAACzC,EAAD,CACEqD,SAA2B,WAAZ,OAALtC,QAAK,IAALA,OAAA,EAAAA,EAAO0E,OACjBxF,MAAM,oBACNK,UAAU,oCAIhB,yBACE,qBAEF,yBACE,SAACO,EAAD,CACEC,UAAWA,EACXE,qBAAsBA,EACtBD,MAAOA,OAGX,yBACE,qBAEF,2BACE,sCACA,SAAC,KAAD,CACEsF,OAAO,SACPC,MAAMC,EAAAA,EAAAA,IAAeC,QAAQ7B,GAAyBI,EAAK0B,SAAU1B,EAAK2B,QAF5E,qDA9F4C,mBA0GzD,E,8WC/IM,SAASC,EAAT,GAA6C,IAA3BC,EAA0B,EAA1BA,UACvB,GAAwBvF,EAAAA,EAAAA,UAAS,UAAjC,eAAOwF,EAAP,KAAaC,EAAb,KAEA,OACE,iBAAKxG,UAAU,UAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,SAAC,IAAD,CAAOyG,IAAKC,EAAAA,EAAMC,SAAS,OAG7B,SAAC,IAAD,CAAO3G,UAAU,kBAAjB,UACE,SAAC,IAAD,CACEI,iBAAiB,SAAC,KAAD,CAAWiF,GAAG,iBAAiBC,GAAG,uBACnDjF,kBAAkB,SAClBqC,SAAU,SAACkE,GAAD,OAAaJ,EAAQI,EAAU,QAAU,SAAzC,MAIJ,WAATL,GACC,SAACM,EAAD,CAAkBP,UAAWA,KAE7B,SAACQ,EAAD,CAAiBR,UAAWA,MAInC,CAEM,SAASO,EAAT,GAAqF,IAAzDP,EAAwD,EAAxDA,UAAcd,GAA0C,YACzF,GAAuCuB,EAAAA,EAAAA,GAAkD,CACvFC,WAAW,WAAD,wBAAE,+FAAkBC,EAAAA,EAAAA,MAAlB,mFAAF,kDAAC,GACXX,UAAAA,IAFM9F,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAS3B,OACE,SAAC,IAAD,CACEnH,UAAU,kBACVoH,UAAU,WACVC,MAAM,SACNC,WAAY,CAAEC,KAAM,cAJtB,UAME,gCACGJ,IACC,SAAC,IAAD,CACEK,aACE,SAAC,KAAD,CAAWnC,GAAG,mCAAmCC,GAAG,2CAEtDxF,KAAK,QACL2H,UAAQ,EACRzH,UAAU,0BAGd,SAAC,MAAD,gBACEF,KAAK,UACL4H,KAAK,QACLnC,QAzBS,WACf2B,GACD,EAwBOS,QAASnH,EACToH,OAAK,EACL/H,MAAM,SAAC,KAAD,CAAYA,MAAM,SAAC,IAAD,IAAgB6H,KAAK,WACzClC,GAPN,cASE,SAAC,KAAD,CAAWH,GAAG,oBAAoBC,GAAG,+BAK9C,CAED,SAASwB,EAAT,GAAsD,IAA3BR,EAA0B,EAA1BA,UACzB,EAAezF,EAAAA,EAAAA,UAARC,GAAP,eACQ+G,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAAoD9G,EAAAA,EAAAA,WAAS,GAA7D,eAAOgH,EAAP,KAA2BC,EAA3B,KAEA,GAAuCjB,EAAAA,EAAAA,GAAkD,CACvFC,WAAW,WAAD,wBAAE,+FAAkBiB,EAAAA,EAAAA,IAAOnH,EAAKoH,cAAc,YAAapH,EAAKoH,cAAc,aAA5E,mFAAF,kDAAC,GACX5B,UAAAA,IAFM9F,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAS3B,OACE,iCACE,UAAC,IAAD,CACEhH,KAAK,QACLW,KAAMA,EACNqH,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBzE,MAAO,CAAE2E,SAAU,KACnBhG,cAAe,CAAEiG,UAAU,GAC3BhH,SAbW,WACf2F,GACD,EAYKsB,aAAa,MARf,WAUE,SAAC,SAAD,CACE7I,OAAO,SAAC,KAAD,CAAW0F,GAAG,SAASC,GAAG,WACjCnF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,OAGF,SAAC,SAAD,CACElI,OAAO,SAAC,KAAD,CAAW0F,GAAG,QAAQC,GAAG,aAChCnF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAExEY,KAAMZ,EAAU,yBAAuB,2BANzC,UAQE,SAAC,aAAD,MAGDV,IACC,SAAC,SAAD,CAAWkB,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,IAAD,CACEZ,aACE,SAAC,KAAD,CACEnC,GAAG,mCACHC,GAAG,2CAGPxF,KAAK,QACL2H,UAAQ,EACRzH,UAAU,4BAKhB,UAAC,SAAD,CAAWqI,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,WACE,SAAC,KAAD,CAAQtI,KAAK,UAAUgD,SAAS,SAAS6E,QAASnH,EAAlD,UACE,SAAC,KAAD,CAAW6E,GAAG,SAASC,GAAG,cAG5B,SAAC,KAAD,CAAQxF,KAAK,OAAOyF,QAAS,kBAAMyC,GAAsB,SAACW,GAAD,OAAQA,CAAR,GAA5B,EAA7B,UACE,SAAC,KAAD,CAAWtD,GAAG,sBAAsBC,GAAG,+BAI5CyC,IACC,SAAC,IAAD,CACEjI,KAAK,OACLa,SACE,SAACiI,EAAD,CACEC,MAAO/H,EAAKoH,cAAc,YAC1B5B,UAAW,kBAAM0B,GAAsB,EAA5B,QAOxB,CAOD,SAASY,EAAT,GAA0E,IAA7CC,EAA4C,EAA5CA,MAAOvC,EAAqC,EAArCA,UAC1B3F,EAAYC,EAAAA,EAAAA,SAAZD,QACR,EAAeE,EAAAA,EAAAA,UAARC,GAAP,eACQ+G,GAAcC,EAAAA,EAAAA,KAAdD,UAER,GAAuCd,EAAAA,EAAAA,GAAY,CACjDC,WAAW,WAAD,wBAAE,+FAAkB8B,EAAAA,EAAAA,IAAchI,EAAKoH,cAAc,aAAnD,mFAAF,kDAAC,GACX5B,UAAW,WACTA,IACA3F,EAAQoI,QACNlB,EACE,0DACA,4CAGL,IAVKrH,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAiB3B,OACE,UAAC,IAAD,CACEhH,KAAK,kBACLW,KAAMA,EACNqH,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBzE,MAAO,CAAE2E,SAAU,KACnBhG,cAAe,CAAE0G,SAAUH,EAAON,UAAU,GAC5ChH,SAZa,WACf2F,GACD,EAWGsB,aAAa,MARf,WAUE,SAAC,SAAD,WACE,SAAC,KAAD,CAAOS,MAAO,EAAGvB,KAAK,WAAtB,UACE,SAAC,KAAD,CAAWrC,GAAG,oBAAoBC,GAAG,wBAGzC,SAAC,SAAD,CACE3F,OAAO,SAAC,KAAD,CAAW0F,GAAG,SAASC,GAAG,WACjCnF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,MAGDV,IACC,SAAC,SAAD,CAAWkB,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,IAAD,CACEZ,aACE,SAAC,KAAD,CACEnC,GAAG,gGACHC,GAAG,2CAGPxF,KAAK,QACL2H,UAAQ,EACRzH,UAAU,4BAKhB,SAAC,SAAD,CAAWqI,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,KAAD,CAAQtI,KAAK,UAAUgD,SAAS,SAASC,SAAUvC,EAAnD,UACE,SAAC,KAAD,CAAW6E,GAAG,SAASC,GAAG,iBAKnC,C,sKC7MM,SAAS4D,EAAT,GAA8E,IAAxDpI,EAAuD,EAAvDA,KAAMS,EAAiD,EAAjDA,SAAU4F,EAAuC,EAAvCA,QAAS3G,EAA8B,EAA9BA,UAC5CqH,GAAcC,EAAAA,EAAAA,KAAdD,UACR,OACE,UAAC,IAAD,CACE1H,KAAK,UACLW,KAAMA,EACNqH,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBzE,MAAO,CAAE2E,SAAU,KACnBhG,cAAe,CAAEiG,UAAU,GAC3BhH,SAAUA,EACViH,aAAa,MARf,WAUE,SAAC,SAAD,CACE7I,OAAO,SAAC,KAAD,CAAW0F,GAAG,SAASC,GAAG,WACjCnF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,OAGF,SAAC,SAAD,CACElI,OAAO,SAAC,KAAD,CAAW0F,GAAG,QAAQC,GAAG,aAChCnF,KAAK,WACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAExEY,KAAMZ,EAAU,yBAAuB,2BANzC,UAQE,SAAC,aAAD,OAGF,SAAC,SAAD,CACElI,OAAO,SAAC,KAAD,CAAW0F,GAAG,kBAAkBC,GAAG,qBAC1CnF,KAAK,mBACLoC,MAAO,CACL,CAAEC,UAAU,EAAM7B,QAASkH,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,aAAD,MAGDV,IACC,SAAC,SAAD,CAAWkB,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,IAAD,CACEZ,aACE,SAAC,KAAD,CAAWnC,GAAG,mCAAmCC,GAAG,2CAEtDxF,KAAK,QACL2H,UAAQ,EACRzH,UAAU,4BAKhB,SAAC,SAAD,CAAWqI,WAAY,CAAEK,OAAQ,EAAGN,KAAM,IAA1C,UACE,SAAC,KAAD,CAAQtI,KAAK,UAAUgD,SAAS,SAASC,SAAUvC,EAAnD,UACE,SAAC,KAAD,CAAW6E,GAAG,SAASC,GAAG,iBAKnC,C,yGC/FM,SAAS6D,EAAT,GAA6F,IAAxEC,EAAuE,EAAvEA,SAAuE,IAA7DC,IAAAA,OAA6D,aAAhDC,IAAAA,OAAgD,aAAnCC,QAAAA,OAAmC,SACjG,GAAqCC,EAAAA,EAAAA,KAA7BC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,SAExB,OAAIH,EACEF,GAAOK,GACF,yBAAMN,IAGRM,GAAW,oCAAIN,MAAe,wBAGlCE,GAAOI,GAAaD,EACnBJ,GACK,yBAAMD,KAER,8BAAGA,KAEL,uBACR,C,qEC5BM,SAASO,EAAT,GAA8D,IAAzCP,EAAwC,EAAxCA,SAAUtJ,EAA8B,EAA9BA,KAAS8J,GAAqB,YAClE,OACE,SAACT,EAAD,CAAWI,SAAO,EAAlB,UACE,SAAC,MAAD,gBAAQ1J,MAAM,SAACgK,EAAA,EAAD,IAAe/J,KAAI,OAAEA,QAAF,IAAEA,EAAAA,EAAQ,WAAe8J,GAA1D,aACGR,MAIR,C,wGCUM,SAASU,EAAT,GAA2E,IAArDjG,EAAoD,EAApDA,MAAOsC,EAA6C,EAA7CA,SAAUnG,EAAmC,EAAnCA,UAAW2G,EAAwB,EAAxBA,QAC/CoD,GAAajC,EAAAA,EAAAA,KAAbiC,SAER,OACE,6BACE,SAAC,IAAD,CACEC,IAAG,OAAEnG,QAAF,IAAEA,OAAF,EAAEA,EAAQkG,GACbtD,IAAG,UAAKwD,EAAAA,GAAAA,SAAL,OAA0B9D,EAA1B,YAAsC4D,EAAtC,QACHG,SAAQ,UAAKD,EAAAA,GAAAA,QAAL,iBACRjK,UAAWA,EACX2G,QAASA,KAIhB,C,6PC3BM,SAASwD,EAAT,GAAwF,IAAlE5E,EAAiE,EAAjEA,QAAS1F,EAAwD,EAAxDA,KAAMkD,EAAkD,EAAlDA,SAAkD,IAAxC/C,UAAAA,OAAwC,MAA5B,GAA4B,EAArB4J,GAAqB,YACpFpJ,GAAcyD,EAAAA,EAAAA,KAAdzD,UAER,OACE,SAAC,MAAD,QACEX,KAAI,OAAEA,QAAF,IAAEA,EAAAA,GAAQ,SAACuK,EAAA,EAAD,IACdC,OAAK,EACL9E,QAASA,EACTxC,SAAUA,GAAYvC,EACtBR,WAAWsK,EAAAA,EAAAA,GAAK,cAAetK,IAC3B4J,GAGT,C,qLCDYW,EAAoB,SAAC,GAAyE,IAAvEnB,EAAsE,EAAtEA,SAAUzJ,EAA4D,EAA5DA,MAA4D,IAArDK,UAAAA,OAAqD,MAAzC,GAAyC,EAAlC4J,GAAkC,YAGxG,OAFcY,EAAAA,EAAAA,MAKZ,sBAAUxK,WAAWsK,EAAAA,EAAAA,GAAK,sBAAuBtK,GAAjD,WACE,oBAAQA,UAAU,8BAAlB,WACE,SAACoK,EAAA,EAAD,IADF,WACsBzK,QADtB,IACsBA,EAAAA,EAAS,oBAE/B,SAAC,KAAD,kBAAWiK,GAAX,aAAkBR,SAPH,uBAUpB,EClBD,SAASqB,EAAT,GAAwD,IAAjC5E,EAAgC,EAAhCA,MACrB,OAAKA,GAASA,EAAM6E,UAAY7E,EAAM8E,OAAS9E,EAAMC,gBAC5C,SAAC,KAAD,CAAWT,GAAG,oBAAoBC,GAAG,sBAGvC,SAAC,KAAD,CAAWD,GAAG,oBAAiBC,GAAG,cAC1C,CA0BM,SAASsF,EAAT,GAAkG,IAAD,EAAlE/E,EAAkE,EAAlEA,MAAkE,IAA3DgF,gBAAAA,OAA2D,MAAzC,GAAyC,EAArCzB,EAAqC,EAArCA,SAC3D0B,GAAQN,EAAAA,EAAAA,KACN3C,GAAcC,EAAAA,EAAAA,KAAdD,UAEFrH,GADcyD,EAAAA,EAAAA,KAAZ8G,QACkB,oBAEpBC,GAAkBpG,EAAAA,EAAAA,GAAW,CACjCC,YAAaC,EAAAA,GAAAA,mBACbC,WAAY,mBACZC,eAAgB6C,EAAU,8BAA4B,0BACtD5C,aAAc4C,EACZ,2EACA,yEAIEoD,EAAc,kBAAMD,EAAgB,CAAE9I,OAAQC,EAAAA,GAAAA,kBAAhC,EAEd+I,EAAWhF,QAAQ2E,GAEzB,GAA+CM,EAAAA,EAAAA,GAAa,CAC1DC,UAAWP,EAAkB,EAC7BQ,SAAUR,EACVS,SAAUL,EACVlI,SAAQ,WAAG+H,SAAH,SAAaI,IAJfK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,MAAOC,EAApC,EAAoCA,OAcpC,OAPAC,EAAAA,EAAAA,YAAU,WAIR,OAHInL,GACFiL,IAEK,kBAAMA,GAAN,CACR,GAAE,CAACjL,KAGF,UAAC,EAAD,CACEb,MAAM,cACNK,WAAWsK,EAAAA,EAAAA,GAAK,8BAA8BsB,EAAAA,EAAAA,IAAkB,cAFlE,WAIE,SAAC,IAAD,CAAS/H,MAAM,QAAf,UACE,SAAC,EAAD,CACEhE,KAAM2L,GAAY,SAACK,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,IACtCvG,QAASiG,EAAYC,EAAQC,EAC7B3I,SAAUvC,OAGd,SAAC,EAAD,CACEuC,SAAUvC,EACV+E,QAAS0F,EACTpL,KACEqL,IACE,iBACElL,WAAWsK,EAAAA,EAAAA,GACT,qBACCkB,IACCI,EAAAA,EAAAA,IAAkB,QAAS,CACzBG,MAAO,OACPC,UAAU,KANlB,SAUGT,IAfT,gBAoBGnC,QApBH,IAoBGA,EAAAA,GAAY,SAACqB,EAAD,CAAa5E,MAAOA,QAIxC,C,6BCzGM,SAASoG,EAAT,GAAoF,IAA1D1G,EAAyD,EAAzDA,QAAS6D,EAAgD,EAAhDA,SAAa5D,GAAmC,YACxF,OACE,SAAC,EAAD,WACE,SAAC,GAAD,gBAAYD,QAASA,GAAaC,GAAlC,aACG4D,MAIR,C,8HCIM,SAAS8C,EAAT,GAQkB,IAPvBC,EAOsB,EAPtBA,KACAhH,EAMsB,EANtBA,MAMsB,IALtBiH,aAAAA,OAKsB,MALP,GAKO,EAJtBhD,EAIsB,EAJtBA,SAIsB,IAHtBpJ,UAAAA,OAGsB,MAHV,GAGU,MAFtBqM,WAAAA,OAEsB,aADtBC,MAAAA,OACsB,SACdzE,GAAcC,EAAAA,EAAAA,KAAdD,UACF0E,GAAYC,EAAAA,EAAAA,QAA0B,MAE5C,GAAI,OAACL,QAAD,IAACA,IAAAA,EAAMhG,UAAYiG,IAAiBjH,EACtC,OAAO,SAAC,KAAD,IAGT,IAAKA,EACH,OACE,SAAC,IAAD,CAAWqC,YAAaK,EAAU,wCAAmC,+BAIzE,IAAM4E,EAAY,kBAElB,OACE,iBACEzM,WAAWsK,EAAAA,EAAAA,GACTmC,EACAJ,GAAU,UAAOI,EAAP,iBACVH,GAAK,UAAOG,EAAP,WACLzM,GAEF0M,GAAG,SACHC,IAAKJ,EARP,SAUGnD,GAGN,C,qVC0BM,SAASwD,EAAT,GAaqB,IAAD,IAZzBC,EAYyB,EAZzBA,WACAhN,EAWyB,EAXzBA,KACAgE,EAUyB,EAVzBA,MACAuF,EASyB,EATzBA,SASyB,IARzB0D,aAAAA,OAQyB,MARV,EAQU,MAPzBnI,QAAAA,OAOyB,MAPf,WAAQ,EAOO,EANzB3E,EAMyB,EANzBA,UACAqL,EAKyB,EALzBA,SAKyB,IAJzB0B,aAAAA,OAIyB,SAHzBC,EAGyB,EAHzBA,YAGyB,IAFzBC,cAAAA,OAEyB,MAFT,aAES,MADzBnN,KAAAA,OACyB,MADlB,QACkB,GACzBoN,EAAAA,EAAAA,GAAsC,YAATpN,GAC7B,IAAMqN,EAAgB,oBAAG,CAAC,GAAI,EAAG,UAAX,aAAG,EAAaL,UAAhB,QAAiC,EACvD,GAA8B/L,EAAAA,EAAAA,WAAS,GAAvC,eAAOqM,EAAP,KAAiBC,EAAjB,KACA,GAAgCtM,EAAAA,EAAAA,WAAS,GAAzC,eAAOuM,EAAP,KAAkBC,EAAlB,KAOMC,EAAa,WACjBH,GAAU,GACVI,IACA9I,GACD,GAGD+I,EAAAA,EAAAA,GAAiB,KAAK,WACfV,GACHQ,GAEH,IAMD,IAAQC,GAAUtC,EAAAA,EAAAA,GAAa,CAC7BC,WAAW,EACXC,SAAU,EACVC,SAAU,kBAAMiC,GAAW,EAAjB,IAHJE,MAMR,OAAIH,GACK,yBAIP,gBACEtN,WAAWsK,EAAAA,EAAAA,GACA,YAATxK,GAAsB,8BACrBsN,IAAYxB,EAAAA,EAAAA,IAAkB,UAAW,CAAEG,MAAO,YAHvD,UAME,gBAAK/L,UAAU,6BAAf,UACE,iBACEA,WAAWsK,EAAAA,EAAAA,GACT,qBACA8C,GAAWxB,EAAAA,EAAAA,IAAkBqB,EAAe,CAAElB,MAAO,UAAYH,EAAAA,EAAAA,IAAkB,aACnF5L,GAJJ,WAOE,SAAC,KAAD,UAAQ6D,KAER,iBAAM7D,UAAU,2BAAhB,SAA4CH,IAE3CuJ,EAEA2D,GACC,SAAC,KAAD,CAAQjN,KAAK,UAAUyF,QAASiI,EAAYG,WAAS,EAArD,UACE,SAAC,KAAD,CAAWtI,GAAG,aAAaC,GAAG,WAAWsI,OAAQf,OAGnD,SAAC,KAAD,CACExB,SAAUA,GAAY8B,EACtBrN,KAAK,OACLyF,QAASiI,EACTlC,SAAUkC,EACVzK,SAAUiK,EACVW,WAAS,EANX,UAQE,SAAC,KAAD,CAAWtI,GAAG,aAAaC,GAAG,WAAWsI,OAAQf,YAO9D,C,4GCrLD,SAASgB,EAAT,GAAkE,IAA3C/N,EAA0C,EAA1CA,KACrB,OACE,gBACEE,UAAU,0BACV2D,MAAO,CACLmK,gBAAgB,QAAD,OAAU7D,EAAAA,GAAAA,QAAV,OAA8BnK,EAA9B,UACfiO,oBAAqB,MAI5B,CAED,IAAMC,EAAY,CAChB,CACED,oBAAqB,KAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,UAEvB,CACEA,oBAAqB,YAIzB,SAASE,EAAT,GAAuE,IAAjDnO,EAAgD,EAAhDA,KAAMoO,EAA0C,EAA1CA,MAC1B,OACE,gBACElO,UAAU,0BACV2D,OAAK,QACHmK,gBAAgB,QAAD,OAAU7D,EAAAA,GAAAA,QAAV,OAA8BnK,EAA9B,WACZkO,EAAUE,KAIpB,CAkBM,SAASC,EAAT,GAA0F,IAAD,IAA9DC,UAAAA,OAA8D,MAAlD,QAAkD,EAAzCC,EAAyC,EAAzCA,gBAC/CC,EAjBR,SAA2BxO,GACd,IAAD,EAAV,OAAIA,GAGa,OAFH,UAAGA,EAAKyO,MAAM,iBAAd,aAAG,EAAuB,IAG7BN,EAGJJ,CACR,CAQ4BW,CAAkBJ,GAEvC3B,EAAY,mBAElB,OACE,iBACEzM,WAAWsK,EAAAA,EAAAA,GAAKmC,EAAD,UAAeA,EAAf,aAA6B2B,IAC5CzK,MAAO0K,EAAkB,CAAEA,gBAAAA,GAAoB,CAAC,EAFlD,WAIE,gBAAKrO,UAAU,gCAAf,UACE,SAACsO,EAAD,CAAoBJ,MAAO,EAAGpO,KAAMsO,OAGtC,gBAAKpO,UAAU,gCAAf,UACE,SAACsO,EAAD,CAAoBJ,MAAO,EAAGpO,KAAMsO,OAGtC,gBAAKpO,UAAU,gCAAf,UACE,SAACsO,EAAD,CAAoBJ,MAAO,EAAGpO,KAAMsO,OAGtC,gBAAKpO,UAAU,gCAAf,UACE,SAACsO,EAAD,CAAoBJ,MAAO,EAAGpO,KAAMsO,OAGtC,gBAAKpO,UAAU,gCAAf,UACE,SAACsO,EAAD,CAAoBJ,MAAO,EAAGpO,KAAMsO,QAI3C,C,6GC3EM,SAASK,EAAT,GAAqD,IAAjCtC,EAAgC,EAAhCA,KAAMuC,EAA0B,EAA1BA,QACvBC,GAAoBxK,EAAAA,EAAAA,KAApBwK,gBAER,GAA8C5H,EAAAA,EAAAA,GAAY,CACxD6H,YAAa,CAAC,gBACd5H,WAAW,WAAD,wBAAE,uGAAY6H,EAAAA,IAAZ,2CAAF,kDAAC,GACXvI,UAAW,kBAAMoI,EAAQ,EAAd,IAHLlO,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAAS9E,EAApC,EAAoCA,MAYpC,OANAsJ,EAAAA,EAAAA,YAAU,WACJgD,GACFD,EAAQ,EAEX,GAAE,CAACC,EAAiBD,KAGnB,iCACE,eAAI1O,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWqF,GAAG,aAAaC,GAAG,cAG/BY,QAAO,OAACiG,QAAD,IAACA,OAAD,EAACA,EAAM2C,WACb,cAAG9O,UAAU,sBAAb,UACE,SAAC,KAAD,UAAgBmM,EAAK2C,aAIzB,SAAC,IAAD,CAAkBxI,UAAW,kBAAMoI,EAAQ,EAAd,EAAkB9G,OAAK,EAACF,KAAK,WAEzDP,IAAW,SAAC,IAAD,CAAOxG,QAAQ,QAAQ6G,YAAaxF,KAAKC,UAAUI,GAAQvC,KAAK,QAAQ2H,UAAQ,KAE5F,SAAC,IAAD,WACE,SAAC,KAAD,CAAWpC,GAAG,KAAKC,GAAG,UAGxB,SAAC,KAAD,CAAQxF,KAAK,UAAU8H,OAAK,EAAC7E,SAAU4L,EAAiBpJ,QAAS,kBAAM2B,GAAN,EAAgBS,QAASnH,EAA1F,UACE,SAAC,KAAD,CAAW6E,GAAG,wBAAwBC,GAAG,wBAIhD,C,eC7CM,SAASyJ,EAAT,GAAkE,IAA7C5C,EAA4C,EAA5CA,KAAM/C,EAAsC,EAAtCA,SAAU4F,EAA4B,EAA5BA,SAC1C,OACE,gBAAKhP,UAAU,aAAf,UACE,iBAAKA,UAAU,mBAAf,WACE,SAAC8J,EAAA,EAAD,CAAYjG,MAAK,OAAEsI,QAAF,IAAEA,OAAF,EAAEA,EAAMtI,MAAOsC,SAAQ,OAAEgG,QAAF,IAAEA,OAAF,EAAEA,EAAMhG,SAAUnG,UAAU,wBACpE,gBAAKA,UAAU,sBAAf,SACGkG,QAAQ8I,IACP,iCACE,eAAIhP,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWqF,GAAG,6BAA0BC,GAAG,8BAG7C,SAAC,IAAD,CACExF,KAAK,UACL2H,UAAQ,EACR9G,SACE,SAAC,KAAD,CACE0E,GAAG,2EACHC,GAAG,2EAMX8D,QAMX,C,gGCrCK6F,EACJ,iHAAiHV,MAC/G,KAGEW,EAAgC,CAAC,EAYjCC,EAA8B,SAClCC,GAMA,IAHI,IAFJC,EAEG,uDAFc,GACjBC,EACG,uDADwB,CAAC,EAExBC,EAAa,GACbC,EAAQ,GACJD,GAAcD,EAAMC,IAArB,OAAoCF,QAApC,IAAoCA,GAAAA,EAAMzM,SAAS2M,IAAeC,EAAQ,IAC/ED,GAAaE,EAAAA,EAAAA,GAAcL,GAC3BI,GAAS,EAGX,OADAF,EAAMC,IAAc,EACbA,CACR,EAOM,SAASG,EAAeL,GAC7B,OAAOF,EAA4BF,EAAWI,EAAMH,EACrD,C,wCC1BM,SAASS,GAAT,GAKmB,IAJxB1M,EAIuB,EAJvBA,QACA2M,EAGuB,EAHvBA,kBACAC,EAEuB,EAFvBA,eACAC,EACuB,EADvBA,OAGMC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,IAAMC,EAAc/O,OAAOgC,OAAOD,GAASE,QAAO,SAACC,EAAD,GAA+C,IAApB8M,EAAmB,EAAnBA,SAI3E,OAJ8F,EAATxD,KAC1EoD,IACT1M,EAAI8M,IAAY,GAEX9M,CACR,GAAE,CAAC,GAEE+M,EAAsBC,EAAAA,GAAAA,QAC1B,SAACF,GAAD,YAAwCvO,IAA1BsO,EAAYC,EAA1B,IAOF,OAJKC,EAAoBvN,SAASiN,IAChCD,GAAkBH,EAAAA,EAAAA,GAAcU,IAG3BA,CACR,GAAE,CAAClN,IAEEoN,GAAmBC,EAAAA,EAAAA,cAAY,WACnC,IAAMpC,EAAQ6B,EAAiBQ,QAAQV,GACjCW,EAAqB,IAAVtC,EAAc6B,EAAiBU,OAAS,EAAIvC,EAAQ,EACrE0B,EAAkBG,EAAiBS,GACpC,GAAE,CAACT,EAAkBF,EAAgBD,IAEhCc,GAAeJ,EAAAA,EAAAA,cAAY,WAC/B,IAAMpC,EAAQ6B,EAAiBQ,QAAQV,GACjCW,EAAWtC,IAAU6B,EAAiBU,OAAS,EAAI,EAAIvC,EAAQ,EACrE0B,EAAkBG,EAAiBS,GACpC,GAAE,CAACT,EAAkBF,EAAgBD,IAEtC,OACE,iCACE,iBAAK5P,UAAU,+BAAf,WACE,SAAC,KAAD,CAAQF,KAAK,SAASyF,QAAS8K,EAAkBrQ,UAAU,gCAA3D,UACE,SAAC2Q,GAAA,EAAD,OAEF,iBAAKC,QAAQ,cAAc5Q,UAAU,eAArC,WACE,gBAAKgG,KAAM6K,GAAAA,EAAO,kBAAchB,MAChC,4BACE,SAAC,KAAD,UAAgBiB,EAAAA,GAAQjB,GAAgBrI,oBAG5C,SAAC,KAAD,CAAQ1H,KAAK,SAASyF,QAASmL,EAAc1Q,UAAU,gCAAvD,UACE,SAAC+Q,GAAA,EAAD,UAGJ,gBAAK/Q,UAAU,0BAAf,UACE,4BACE,SAAC,KAAD,UAAgB8Q,EAAAA,GAAQjB,GAAgBrI,oBAKjD,C,gECnEM,SAASwJ,GAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,UACzB,GAAsC7M,EAAAA,EAAAA,IAAe,eAArD,eAAO8M,EAAP,KAAoBC,EAApB,KACA,GAA4B/M,EAAAA,EAAAA,IAAe,UAA3C,eAAOgN,EAAP,KAAeC,EAAf,KACA,GAA2CC,EAAAA,EAAAA,KAA3C,eAAOC,EAAP,KAAwBC,EAAxB,MAEAC,EAAAA,GAAAA,IAAc,WACZN,EAAeI,EAAgB,gBAC/BF,EAAUE,EAAgB,UAC3B,IAYD,OACE,UAAC,KAAD,CAAOvR,UAAU,uBAAuBuO,OAAO,SAAC,IAAD,CAASzO,KAAK,aAA7D,WACE,iBAAKE,UAAU,6BAAf,WACE,iBAAKA,UAAU,2BAAf,WACE,SAAC,KAAD,CAAWqF,GAAG,MAAMC,GAAG,WACvB,SAAC,KAAD,CACEzB,OACE,SAAC,KAAD,CACEwB,GAAG,uFACHC,GAAG,qFAJT,UAQE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,GAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAASwK,EAAS,EAClB7L,QA1BmB,SAACjE,GAC1B+P,EAAU/P,EAAQ,GAAM,GACxBkQ,EAAgB,CAAEJ,OAAQ9P,EAAQ,GAAM,GACzC,QA2BG,iBAAKtB,UAAU,6BAAf,WACE,iBAAKA,UAAU,2BAAf,WACE,SAAC,KAAD,CAAWqF,GAAG,iBAAcC,GAAG,iBAC/B,SAAC,KAAD,CACEzB,OACE,SAAC,KAAD,CACEwB,GAAG,oJACHC,GAAG,kHAJT,UAQE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,GAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAASsK,EACT3L,QAtDkB,SAACjE,GACzB6P,EAAe7P,GACfkQ,EAAgB,CAAEN,YAAa5P,GAChC,EAoDOyB,UAAWkO,SAKpB,CCtEM,SAASW,GAAT,GAA+F,IAA9DC,EAA6D,EAA7DA,WAAYjC,EAAiD,EAAjDA,kBAClD,OACE,iBAAK5P,UAAU,+BAAf,WACE,gBAAKA,UAAU,sCAAf,UACE,4BACE,SAAC,KAAD,CAAWqF,GAAG,2BAA2BC,GAAG,+BAGhD,eAAItF,UAAU,qCAAd,SACG6R,EAAWzQ,KAAI,SAAC8O,GAAD,OACd,SAAC4B,GAAD,CAAkClC,kBAAmBA,EAAmBM,SAAUA,GAA1DA,EADV,QAMvB,CAOM,SAAS4B,GAAT,GAAqF,IAAxD5B,EAAuD,EAAvDA,SAAUN,EAA6C,EAA7CA,kBAC5C,OACE,SAAC,KAAD,CAAmBrK,QAAS,kBAAMqK,EAAkBM,EAAxB,EAA5B,UACE,iBAAKU,QAAQ,cAAc5Q,UAAU,uCAArC,WACE,gBAAKgG,KAAM6K,GAAAA,EAAO,kBAAcX,MAChC,4BACE,SAAC,KAAD,UAAgBY,EAAAA,GAAQZ,GAAU1I,oBAK3C,CC7BD,IAAMuK,GAAarI,EAAAA,GAAWgG,SAAmB/N,EAQ1C,SAASqQ,GAAT,GAA8D,IAAD,YAAzC7F,EAAyC,EAAzCA,KAAMlJ,EAAmC,EAAnCA,QAASyL,EAA0B,EAA1BA,QACxC,GAAiCvK,EAAAA,EAAAA,KAAzB8N,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QACrB,GAA4CnR,EAAAA,EAAAA,UAAQ,iBAClDkR,QADkD,IAClDA,GADkD,UAClDA,EAAapB,eADqC,aAClD,EAAuB,UAD2B,SACrBpB,EAAAA,EAAAA,GAAcW,EAAAA,KAD7C,eAAOP,EAAP,KAAuBD,EAAvB,KAIA,GAAwB7O,EAAAA,EAAAA,UAAQ,QAAE,GAAD,iBAACkR,QAAD,IAACA,OAAD,EAACA,EAAaE,aAAd,QAAuB,IAAIC,IAAI,UAAhC,QAAsC,IAAtE,eAAOjS,EAAP,KAAakS,EAAb,KACA,GAA0Bf,EAAAA,EAAAA,KAAnBC,GAAP,gBAGA5F,EAAAA,EAAAA,YAAU,WACR,IAAM2G,EAAaf,EAAgB,YAC7BgB,EAAahB,EAAgB,YAE/BW,IACEI,GACF1C,EAAkB0C,GAGhBC,GACFF,EAAO,OAACE,QAAD,IAACA,EAAAA,EAAc,IAG3B,GAAE,CAACL,IAEJ,MCtCK,SAAsB/R,EAAc+P,EAAkBgC,EAAkB5L,GAC7E,OAA6B5B,EAAAA,EAAAA,KAArB0B,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SAChB,GAAsB/B,EAAAA,EAAAA,IAAe,UAA5BoO,GAAT,eACA,GAAwBpO,EAAAA,EAAAA,IAAe,YAA9BqO,GAAT,eACA,GAA4BrO,EAAAA,EAAAA,IAAe,gBAAlCsO,GAAT,eACA,GAAiBtO,EAAAA,EAAAA,IAAe,UAAzBgN,GAAP,eACA,GAAgCtJ,EAAAA,EAAAA,KAAxBiC,EAAR,EAAQA,SAAUlC,EAAlB,EAAkBA,UACV8K,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aAEFC,GAAQ7L,EAAAA,EAAAA,GAAY,CACxB6H,YAAa,CAAC,cACd5H,WAAW,WAAD,wBAAE,8FACJ6L,EAAAA,GAAAA,IAAa,CACjB3Q,OAAQ4Q,EAAAA,GAAAA,WACR1M,OAAAA,EACAD,SAAAA,EACArC,WAAY3D,EACZ4S,eAAgB7C,EAChBgC,QAAAA,IAPQ,mFAAF,kDAAC,GASX5L,UAAW,SAAC0M,GACV,IAAMC,EAAOD,EAASC,KACtBT,EAAUS,EAAKvG,IACf+F,EAAYQ,EAAK9S,MACjBuS,EAAgBO,EAAK/C,UAErBgD,EAAAA,EAAAA,IAAiB,CACflK,SAAUiK,EAAK9S,KACf+P,SAAU+C,EAAK/C,SACf9J,OAAAA,IAGEgL,IACF+B,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAuB,OAACjT,QAAD,IAACA,EAAAA,EAAQ0H,EAAU,MAAO,SAAUkC,EAAUqH,GAG7E9K,GACD,EACD+M,QAAS,SAAC7R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASkH,EACP,2EACA,mEAEFL,YAAaxF,KAAKC,UAAUT,EAAEb,SAC9B8E,UAAW,eAEb6N,QAAQjR,MAAMb,EACf,IAGH,OAAOoR,CACR,CDd+BW,CAAapT,EAAM0P,EAAgBqC,GAAS,kBAAMxD,EAAQ,EAAd,IAAlElO,EAAR,EAAQA,UAAW0G,EAAnB,EAAmBA,OAEbsM,EAAkBtN,QAAO,UAAC+L,EAAYwB,aAAb,aAAC,EAAoBtH,EAAKhG,WAEnDuN,GAAc,iBAACzB,QAAD,IAACA,OAAD,EAACA,EAAaE,aAAd,QAAuB,IAAI/Q,KAAI,SAACjB,GAAD,MAAW,CAAEmB,MAAOnB,EAApB,IAEnD,OACE,iCACE,eAAIH,UAAU,oBAAd,UACE,SAAC,KAAD,CAAWqF,GAAG,sBAAsBC,GAAG,oBAGxCkO,IACC,SAAC,IAAD,CACE1T,KAAK,OACLa,SAAS,SAAC,KAAD,CAAW0E,GAAG,wCAAqCC,GAAG,gCAC/DtF,UAAU,YAId,SAAC2P,GAAD,CACE1M,QAASA,EACT2M,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQmC,EAAYvF,KAGrBuF,GAAeA,EAAYpB,QAAQJ,OAAS,IAC3C,SAACmB,GAAD,CAAuBC,WAAYI,EAAYpB,QAASjB,kBAAmBA,KAG7E,SAAC,IAAD,CACE5P,UAAU,yBACVyC,QAASiR,EACThR,SAAU,SAACpB,GAAD,OAAW+Q,EAAQ/Q,EAAMqS,OAAzB,EACVC,SAAU,SAACtS,GAAD,OAAW+Q,EAAQ/Q,EAAMqS,OAAzB,EACVE,YAAY,aACZC,UAAW,GACXxS,MAAOnB,GAAQ4R,MAGjB,SAACf,GAAD,CAAUC,UAAW9E,EAAK4H,KAAKnR,SAAS,aAExC,SAAC,KAAD,CACEgF,OAAK,EACLD,QAASnH,EACTuC,UAAW5C,IAAS0P,EACpB/P,KAAK,UACLyF,QAAS,kBAAM2B,GAAN,EALX,UAOE,SAAC,KAAD,CAAW7B,GAAG,SAASC,GAAG,cAIjC,C,wCEhFM,SAAS0O,GAAT,GAAqD,IAA9B/Q,EAA6B,EAA7BA,QAC5B,EAAkCrC,EAAAA,EAAAA,SAA1BD,EAAR,EAAQA,QAASgS,EAAjB,EAAiBA,aACjB,GAA6BjO,EAAAA,EAAAA,KAArB0B,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SACR0B,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAAiC5D,EAAAA,GAAAA,KAAzBzD,EAAR,EAAQA,UAAWyT,EAAnB,EAAmBA,UAEbC,GAAWxP,EAAAA,EAAAA,KAEjB,GAAmBN,EAAAA,EAAAA,IAAe,YAA3B4E,GAAP,eACA,GAAuB5E,EAAAA,EAAAA,IAAe,gBAA/B+P,GAAP,eAEA,GAAyCpN,EAAAA,EAAAA,GAAY,CACnD6H,YAAa,CAAC,aACd5H,WAAW,WAAD,wBAAE,qFACViN,EAAU,aAAa,GADb,SAEGnP,EAAAA,GAAAA,IAAc,CACzB5C,OAAQkS,EAAAA,GAAAA,UACRhO,OAAAA,EACAD,SAAAA,IALQ,mFAAF,kDAAC,GAQXG,UAAW,SAAC0M,GACGA,EAASC,KAEbjE,UACPrO,EAAQoI,QACNlB,EAAU,wCAAyC,4CAGxD,EACDwL,QAAS,SAAC7R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASkH,EACP,0EACA,gFAEFL,YAAaxF,KAAKC,UAAUT,EAAEb,SAC9B8E,UAAW,eAEb6N,QAAQjR,MAAMb,EACf,EACD6S,UAAW,WACTJ,EAAU,aAAa,EACxB,IAhCK/M,EAAR,EAAQA,OAAmBoN,EAA3B,EAAgB9T,WAmChBmL,EAAAA,EAAAA,YAAU,WAGR,OAFAsI,EAAU,YAAaK,GAEhB,WACLL,EAAU,aAAa,EACxB,CACF,GAAE,CAACK,IAEJ,IAAMC,EAAarT,OAAOC,KAAK8B,GAASwN,OAExC,OACE,iCACE,eAAIzQ,WAAWsK,EAAAA,EAAAA,GAAK,qBAAqBsB,EAAAA,EAAAA,IAAkB,SAA3D,SACG5C,GAAYnB,EAAU,SAAU,cAGnC,SAAC,KAAD,CAAO7H,UAAU,kBAAjB,UACE,gBAAK4Q,QAAQ,cAAc5Q,UAAU,eAArC,UACE,gBAAKgG,KAAM6K,GAAAA,EAAO,kBAAcsD,UAIpC,eAAInU,UAAU,gBAAd,UACE,SAAC,KAAD,CAAWqF,GAAG,wCAAwCC,GAAG,gDAE3D,UAAC,MAAD,CAAmBtF,UAAU,6BAA6BoH,UAAU,WAApE,WACE,UAAC,UAAD,CAAiBpH,UAAU,iBAA3B,WACE,SAAC,KAAD,CAAWqF,GAAG,2BAAwBC,GAAG,mBAD3C,KACiEiP,EADjE,IAC8EL,EAASM,QAEvF,SAAC,MAAD,CACEjP,QAAS,kBAAM2B,GAAN,EACTnE,SAAUvC,GAAa+T,EAAaL,EAASM,IAC7C7M,QAASnH,EACToH,OAAK,EAJP,UAME,SAAC,KAAD,CAAWvC,GAAG,yBAAyBC,GAAG,+BAKnD,CC9EM,SAASmP,GAAT,GAA+D,IAAD,IAAxCxR,EAAwC,EAAxCA,QAASkJ,EAA+B,EAA/BA,KAAM1H,EAAyB,EAAzBA,KAC1C,GAA0BiQ,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,KAAMjG,EAAd,EAAcA,QACd,GAAyCvK,EAAAA,EAAAA,KAAjC8N,EAAR,EAAQA,YAAatD,EAArB,EAAqBA,gBACrB,GAAsBvK,EAAAA,EAAAA,IAAe,UAA5BoO,GAAT,eACA,GAAwBpO,EAAAA,EAAAA,IAAe,YAA9BqO,GAAT,eACA,GAA4BrO,EAAAA,EAAAA,IAAe,gBAAlCsO,GAAT,eACA,GAA0BpB,EAAAA,EAAAA,KAAnBC,GAAP,eAEMlO,EAAM,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAUgP,EAAYvF,KAErCf,EAAAA,EAAAA,YAAU,WACJtI,GACFqL,EAAQ,GACR8D,EAAUnP,EAAOqJ,IACjB+F,EAAYpP,EAAOlD,MACnBuS,EAAgBrP,EAAO6M,WACdvB,GACTD,EAAQ,IACRkG,EAAAA,EAAAA,QAEAlG,EAAQ,GACR+D,EAAYlB,EAAgB,aAC5BmB,EAAgBnB,EAAgB,aAEnC,GAAE,CACDlO,EACA4O,EAAYvF,GACZgC,EACA8D,EACAC,EACAC,EACA/D,EACA4C,IAGF,OAAwBsD,EAAAA,EAAAA,SAAQ3T,OAAOgC,OAAOD,GAAU,aAAaE,QACnE,SAACC,EAAmBC,EAAQ6K,GAO1B,OANIA,EAAQ,IAAM,EAChB9K,EAAI0R,KAAKtR,KAAKH,GAEdD,EAAI2R,MAAMvR,KAAKH,GAGVD,CACR,GACD,CACE0R,KAAM,GACNC,MAAO,KAZHD,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAgBd,OACE,UAAC7I,EAAA,EAAD,CAAgB/G,MAAM,QAAQiH,aAAc4I,EAAAA,EAAAA,QAAAA,MAAsB7I,KAAMA,EAAxE,WACE,iBAAKnM,UAAU,QAAf,WACE,gBAAKA,UAAU,2BAAf,SACG8U,EAAK1T,KAAI,SAACiC,EAAQ6K,GAAT,OACR,gBACElO,UAAU,cAEV2D,MAAO,CACLsR,UAAU,aAAD,OAAe,IAAM,GAAK/G,EAA1B,KACTgH,IAAI,GAAD,OAAK,IAAM,GAAKhH,EAAhB,KACH4G,KAAK,GAAD,OAAK,GAAW5G,EAAQ,EAAd,GAAV,MANR,UASE,SAAC,KAAD,CAAa7K,OAAQA,EAAQ8R,SAAO,KAP/B9R,EAAOlD,KAHN,OAeZ,gBAAKH,UAAU,4BAAf,SACG+U,EAAM3T,KAAI,SAACiC,EAAQ6K,GAAT,OACT,gBACElO,UAAU,cAEV2D,MAAO,CACLsR,UAAU,aAAD,OAAe,IAAM,GAAK/G,EAA1B,KACTgH,IAAI,GAAD,OAAK,IAAM,GAAKhH,EAAhB,KACH6G,MAAM,GAAD,OAAK,GAAW7G,EAAQ,EAAd,GAAV,MANT,UASE,SAAC,KAAD,CAAa7K,OAAQA,EAAQ8R,SAAO,KAP/B9R,EAAOlD,KAHL,OAeb,UAAC4O,EAAD,CAAW5C,KAAMA,EAAM6C,SAAUvK,EAAKuK,SAAtC,UACY,IAAT2F,IAAc,SAAClG,EAAD,CAAUtC,KAAMA,EAAMuC,QAASA,IACpC,IAATiG,IAAc,SAAC3C,GAAD,CAAU7F,KAAMA,EAAMlJ,QAASA,EAASyL,QAASA,IACtD,IAATiG,IAAc,SAACX,GAAD,CAAa/Q,QAASA,WAIzC,SAAC,KAAD,CACExC,MAAO,CAAE0E,MAAO,QAASU,MAAO,CAAE6E,QAAS,EAAGC,MAAO,EAAG7E,gBAAgB,GAAS7C,QAAS,CAAC,GAC3FA,QAASA,KAEX,SAACkL,EAAD,CACEC,UAAS,OAAEjC,QAAF,IAAEA,GAAF,UAAEA,EAAMiJ,kBAAR,aAAE,EAAkBC,OAC7BhH,gBAAe,OAAElC,QAAF,IAAEA,GAAF,UAAEA,EAAMiJ,kBAAR,aAAE,EAAkB/G,oBAI1C,CC/HM,SAASiH,GAAT,GAAmE,IAAD,EAAtCnJ,EAAsC,EAAtCA,KAAM1L,EAAgC,EAAhCA,MACvC,OACE,SAACyL,EAAA,EAAD,CAAgBC,KAAMA,EAAMhH,MAAM,MAAMiH,aAAa,MAAMpM,UAAU,oBAArE,0BACGS,QADH,IACGA,OADH,EACGA,EAAO0E,aADV,QACmB,iBAGtB,C,gJCJM,SAASoQ,GAAT,GAAyD,IAAhCtS,EAA+B,EAA/BA,QAG9B,OAFyB/B,OAAOgC,OAAOD,GAASuS,OAAM,SAACnS,GAAD,OAAYA,EAAOC,KAAnB,KAKpD,SAAC,MAAD,CAAqBuC,MAAO,CAAE6E,SAAU,EAAGC,MAAO,GAAI7E,gBAAgB,GAAS+E,gBAAiB,GAAhG,UACE,SAAC,KAAD,CAAWxF,GAAG,oBAAiBC,GAAG,sBAJR,uBAO/B,CCaM,SAASmQ,GAAT,GAAyD,IAAnCxS,EAAkC,EAAlCA,QAASkJ,EAAyB,EAAzBA,KAC5B3L,GAAcyD,EAAAA,GAAAA,KAAdzD,UACR,GAAgCsH,EAAAA,EAAAA,KAAxBiC,EAAR,EAAQA,SAAUlC,EAAlB,EAAkBA,UACZ6N,GAAOC,EAAAA,GAAAA,GAAQ1S,GACrB,GAAiBmB,EAAAA,EAAAA,IAAe,UAAzBgN,GAAP,eACA,GAA8BhN,EAAAA,EAAAA,IAAe,kBAApCwR,GAAT,gBAEAjK,EAAAA,EAAAA,YAAU,WACRiK,GAAkB,EACnB,GAAE,IAEH,IAAMxP,GAASyP,EAAAA,GAAAA,KAETC,GAAcC,EAAAA,GAAAA,OAEpBpK,EAAAA,EAAAA,YAAU,WACRmK,EAAYE,kBAAkB,CAAEC,SAAU,CAAC,OAAQ7P,IACpD,GAAE,CAACA,IAEJ,IAAMnB,EAAe4C,EACnB,2DACA,iEAGIqO,GAAYtR,EAAAA,GAAAA,GAAW,CAC3BC,YAAagO,EAAAA,GAAAA,IACb9N,WAAY,WACZC,eAAgB6C,EACd,sDACA,wCAEF5C,aAAAA,EACAqB,UAAW,YACT6M,EAAAA,EAAAA,KAAMgD,EAAAA,EAAAA,IAA8BT,EAAKvV,MAAO4J,EAAUqH,EAC3D,IAGGgF,GAAexR,EAAAA,GAAAA,GAAW,CAC9BC,YAAagO,EAAAA,GAAAA,IACb9N,WAAY,WACZC,eAAgB6C,EACd,sDACA,wCAEF5C,aAAAA,EACAqB,UAAW,YACT6M,EAAAA,EAAAA,KAAMkD,EAAAA,EAAAA,IAA6BX,EAAKvV,MAAO4J,EAAUqH,EAC1D,IAGGkF,GAAe1R,EAAAA,GAAAA,GAAW,CAC9BC,YAAagO,EAAAA,GAAAA,IACb9N,WAAY,WACZC,eAAgB6C,EACd,yDACA,+DAEF5C,aAAAA,EACAqB,UAAW,YACT6M,EAAAA,EAAAA,KAAMoD,EAAAA,EAAAA,IAA8Bb,EAAKvV,MAAO4J,EAAUqH,EAC3D,IAMH,OAFAoF,EAAAA,GAAAA,IAAQ,kBAAMN,EAAU,CAAEhU,OAAQ4Q,EAAAA,GAAAA,mBAA1B,GAAiE,GAAI,GAEzE,OAAC3G,QAAD,IAACA,GAAAA,EAAMhG,UAKT,UAAC,aAAD,CAAgBnG,UAAU,cAA1B,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWqF,GAAG,iBAAiBC,GAAG,kBAGpC,SAAC,MAAD,CACE6G,KAAMA,EACNnM,UAAU,wBACVyW,cAAc,oBACdC,iBAAiB,0BAGnB,UAAC,KAAD,CAAO1W,UAAU,uBAAuB2W,MAAI,EAA5C,WACE,SAAC,KAAD,CACE7W,KAAK,UACLD,KAAM6V,EAAKkB,SAAU,SAAClT,GAAA,EAAD,KAAwB,SAACmT,GAAA,EAAD,IAC7C9T,SAAUvC,GAAakV,EAAKkB,QAC5BrR,QAAS,kBAAM2Q,EAAU,CAAEhU,OAAQ4Q,EAAAA,GAAAA,mBAA1B,EACTnL,QAASnH,EALX,UAOE,SAAC,KAAD,CACE6E,GAAG,0CACHC,GAAG,sDAGP,SAAC,KAAD,CACEzF,KAAM6V,EAAKkB,SAAU,SAAClT,GAAA,EAAD,KAAwB,SAACoT,GAAA,EAAD,IAC7C/T,SAAUvC,GAAakV,EAAKkB,QAC5BrR,QAAS,kBAAM6Q,EAAa,CAAElU,OAAQ4Q,EAAAA,GAAAA,mBAA7B,EACTnL,QAASnH,EAJX,UAME,SAAC,KAAD,CAAW6E,GAAG,wCAAkCC,GAAG,oCAErD,SAAC,KAAD,CACExF,KAAK,UACLC,QAAM,EACNF,KAAM6V,EAAKkB,SAAU,SAAClT,GAAA,EAAD,KAAwB,SAACqT,GAAA,EAAD,IAC7ChU,SAAUvC,GAAakV,EAAKkB,QAC5BrR,QAAS,kBAAM+Q,EAAa,CAAEpU,OAAQ4Q,EAAAA,GAAAA,mBAA7B,EACTnL,QAASnH,EANX,UAQE,SAAC,KAAD,CAAW6E,GAAG,UAAOC,GAAG,gBAI5B,SAACiQ,GAAD,CAAetS,QAASA,QAjDnB,SAAC,MAAD,GAoDV,C,gBC1IM,SAAS+T,GAAT,GAAuD,IAAjC7K,EAAgC,EAAhCA,KAAM1L,EAA0B,EAA1BA,MACjC,OACE,SAACyL,EAAA,EAAD,CAAgBC,KAAMA,EAAMhH,MAAK,OAAE1E,QAAF,IAAEA,OAAF,EAAEA,EAAO0E,MAAOiH,aAAc4I,EAAAA,EAAAA,QAAAA,MAAsBhV,UAAU,QAA/F,UACE,iBAAKA,UAAU,qBAAf,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWqF,GAAG,uBAAuBC,GAAG,qBAG1C,SAAC2R,GAAA,EAAD,CAAkBjX,UAAU,8BAE5B,SAAC,KAAD,WACE,SAAC,KAAD,CAAWqF,GAAG,qBAAqBC,GAAG,wBAK/C,CCnBM,SAAS4R,GAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,aAWhC,OAVA1F,EAAAA,GAAAA,IAAc,WACZ,IACM2F,EAAI,mCAAG,8FADO,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAK,IAAzB,IACnB,OAEXH,IAFW,2CAAH,qDAKVC,GACD,KAEM,kBACR,C,+KCTM,SAASI,EAAT,GAKmB,IAJxBvU,EAIuB,EAJvBA,QACAwU,EAGuB,EAHvBA,UACAC,EAEuB,EAFvBA,gBAEuB,IADvBC,UAAAA,OACuB,SACvB,EACEzW,OAAOgC,OAAOD,GAASE,QACrB,SAACC,EAAUC,GAMT,OALIA,EAAOC,MACTF,EAAIG,aAAaC,KAAKH,GAEtBD,EAAIwU,gBAAgBpU,KAAKH,EAAOlD,MAE3BiD,CACR,GACD,CACEG,aAAc,GACdqU,gBAAiB,KAZfrU,EAAR,EAAQA,aAAcqU,EAAtB,EAAsBA,gBAgBtB,OAA4B,IAAxBrU,EAAakN,QACR,qBAIP,iBAAKzQ,UAAU,mBAAf,WACE,iBAAKA,UAAU,wBAAf,WACE,SAAC,UAAD,CAAiB0H,KAAK,QAAtB,SACGnE,EAAanC,KAAI,SAACiC,GAAD,OAChB,SAAC,KAAD,CAA0BqJ,GAAIrJ,EAAO6M,UAAxB7M,EAAOlD,KADJ,OAIpB,kBAAMH,UAAU,kCAAhB,WACE,SAAC,SAAD,UACGuD,EAAakN,OAAS,GACrB,SAAC,KAAD,CAAWpL,GAAG,mBAAmBC,GAAG,eAAesI,OAAQ8J,KAE3D,SAAC,KAAD,CAAWrS,GAAG,gBAAgBC,GAAG,aAAasI,OAAQ6J,OAG1D,SAACI,EAAA,EAAD,CAAY7X,UAAU,gDAGxB2X,GAAaC,EAAgBnH,OAAS,IACtC,kBAAMzQ,UAAU,0BAAhB,WACE,SAAC,KAAD,CAAWqF,GAAG,YAAYC,GAAG,gBAD/B,KACkDsS,EAAgBE,KAAK,WAK9E,C,0DC5BM,SAASC,EAAT,GAOa,IANlB9U,EAMiB,EANjBA,QACA+U,EAKiB,EALjBA,MACAC,EAIiB,EAJjBA,eACAC,EAGiB,EAHjBA,cACArU,EAEiB,EAFjBA,MAEiB,IADjB7D,UAAAA,OACiB,MADL,GACK,EACXmY,GAAYnI,EAAAA,EAAAA,UAChB,kBAAO9J,QAAQgS,IAAiBE,EAAAA,EAAAA,GAAQJ,EAAOE,GAAkBF,CAAjE,GACA,CAACE,EAAeF,IAGlB,OACE,iBAAKhY,WAAWsK,EAAAA,EAAAA,GAAK,aAActK,GAAnC,WACE,mBAAQA,UAAU,oBAAlB,UACE,SAAC,KAAD,CAAWsF,GAAG,eAAeD,GAAG,sBAAsBuI,OAAQ/J,OAEhE,eAAI7D,UAAU,sBAAd,SACGmY,EAAU/W,KAAI,SAACiX,EAAUnK,GACxB,IAAM7K,EAASJ,EAAQoV,GACjBjL,EAAW6K,IAAmBI,EACpC,OACE,UAAC,EAAAC,SAAD,YACE,iBACEtY,WAAWsK,EAAAA,EAAAA,GAAK,qBAAsB8C,GAAY,8BAClDzJ,MAAOyJ,EAAW,CAAEiB,iBAAiBkK,EAAAA,EAAAA,IAAmBlV,EAAO6M,gBAAcvO,EAF/E,UAIE,SAAC,KAAD,CAAY0B,OAAQA,MAErB6K,EAAQ8J,EAAMvH,OAAS,IACtB,iBAAMzQ,UAAU,oBAAhB,UACE,SAACwY,EAAA,EAAD,QATN,4BAAoCH,GAcvC,QAIR,C,oCC5CM,SAASI,EAAT,GAAyF,IAAlExV,EAAiE,EAAjEA,QAASY,EAAwD,EAAxDA,MAAO6U,EAAiD,EAAjDA,YAAatP,EAAoC,EAApCA,SAAUvJ,EAA0B,EAA1BA,KAGnE,OAFAqN,EAAAA,EAAAA,MAGE,iBAAKlN,UAAU,eAAf,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,QAAQsI,OAAQ/J,MAF/C,OAIGhE,QAJH,IAIGA,EAAAA,GAAQ,SAAC8Y,EAAA,EAAD,CAAiBhV,MAAO,CAAEiV,MAAO,WAC1C,iBAAK5Y,UAAU,wBAAf,WACE,SAAC,KAAD,UACGkG,QAAQwS,GACPA,GAEA,SAAC,KAAD,CAAWrT,GAAG,sCAAsCC,GAAG,yCAG1D8D,MAEH,SAACoO,EAAD,CAAiBvU,QAASA,MAG/B,C,sECzDM,SAASmV,EAAQJ,EAAmBa,GACzC,IAAMC,EAAed,EAAMzH,QAAQsI,GAEnC,MAAM,GAAN,eAAWb,EAAMe,MAAMD,KAAvB,OAAyCd,EAAMe,MAAM,EAAGD,IACzD,C,uLCIM,SAASE,EAAa5S,EAAgBD,GAC3C,IAAQwM,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aAGR,ECDK,SAA8BsG,GAAqD,IAApCC,EAAmC,wDACjFC,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAWJ,GACxBrG,GAAQ0G,EAAAA,EAAAA,GAAS,CACrBrD,SAAU,CAAC,YAAa,MAAOgD,GAC/BM,QAAQ,WAAD,wBAAE,qGACgBC,EAAAA,EAAAA,IAAOL,GADvB,cACDM,EADC,yBAEAA,EAASxG,QAFT,2CAAF,kDAAC,KAgBV,OAVAtH,EAAAA,EAAAA,YAAU,WACR,GAAIuN,EAAW,CACb,IAAMQ,GAAcC,EAAAA,EAAAA,IAAWR,GAAQ,WACrCvG,EAAMgH,SACP,IAED,OAAO,kBAAMF,GAAN,CACR,CACF,GAAE,CAACR,IAEGtG,CACR,CDpB2DiH,CAF7C,gBAAY1T,EAAZ,YAAwBC,EAAxB,WAE2E,GAAhF5F,EAAR,EAAQA,UAAWsZ,EAAnB,EAAmBA,aAAc3S,EAAjC,EAAiCA,QAAS9E,EAA1C,EAA0CA,MAAO4Q,EAAjD,EAAiDA,KAE7C9L,IACFwL,EAAatQ,MAAM,CACjB1B,QAAS,uEACT6G,YAAaxF,KAAKC,UAAUI,GAC5BoD,UAAW,eAEb6N,QAAQjR,MAAMA,IAGhB,IAAM5B,EAAK,OAAGwS,QAAH,IAAGA,EAAAA,EAAQ,CAAC,EAUvB,OARAtH,EAAAA,EAAAA,YAAU,WACJnL,GAAasZ,EACfxG,QAAQyG,MAAM,wBAEdC,EAAAA,EAAAA,IAAM,CAAEvZ,MAAAA,GAEX,GAAE,CAACD,EAAWsZ,IAERrZ,CACR,C,sNExBM,SAASwZ,EAAT,GAA+D,IAAxCpU,EAAuC,EAAvCA,MAAOqU,EAAgC,EAAhCA,WACnC,OACE,gBAAIla,UAAU,yBAAd,WACE,2BACE,gBAAKA,UAAU,iCAAf,UACE,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,cAE7B,SAAC,IAAD,CAAWtF,UAAU,0BAA0B0H,KAAK,QAApD,SACG7B,EAAM6E,WAET,iBAAM1K,UAAU,qCAAhB,UACE,SAAC,KAAD,CAAWqF,GAAG,KAAKC,GAAG,cAExB,SAAC,IAAD,CAAWtF,UAAU,0BAA0B0H,KAAK,QAApD,SACG7B,EAAM8E,WAIVzE,QAAQgU,KACP,2BACE,gBAAKla,UAAU,iCAAf,UACE,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,eAE7B,SAAC,IAAD,CACEtF,UAAU,0BACV0H,KAAK,UACL/D,MAAO,CAAE0K,gBAAiB,OAAQzK,MAAO,SAH3C,SAKGsW,SAMZ,C,yDC3BM,SAASC,EAAT,GAAuE,IAAvClX,EAAsC,EAAtCA,QAC7B8G,GAAajC,EAAAA,EAAAA,KAAbiC,SACF2L,GAAOC,EAAAA,EAAAA,GAAQ1S,GAEfmX,GAAgBpK,EAAAA,EAAAA,UACpB,kBAAM6E,EAAAA,EAAAA,SAAQ3T,OAAOgC,OAAOD,GAAU,CAAC,QAAS,QAAS,CAAC,OAAQ,OAAlE,GACA,CAACA,IAEH,OACE,wBACGmX,EAAchZ,KAAI,SAACiC,EAAQ6K,GAC1B,OACE,iBAAKlO,UAAU,kCAAf,UACGkO,EAAQ,EADX,IACe,KACb,SAAC,IAAD,CAAO6L,MAAO1W,EAAOgX,MAAOra,UAAU,sCAAtC,UACE,SAAC,KAAD,CAAQ0M,GAAIrJ,EAAO6M,SAAUwB,MAAM,aAEpCrO,EAAOlD,KALV,KAKkB2Q,EAAAA,GAAQzN,EAAO6M,UAAU1I,YAAYuC,GACpD1G,EAAOqJ,KAAOgJ,EAAKhJ,KAClB,SAAC,IAAD,CAAK9I,MAAOkN,EAAAA,GAAQzN,EAAO6M,UAAUtM,MAAO5D,UAAU,+BAAtD,UACE,SAAC,KAAD,CAAWqF,GAAG,UAAOC,GAAG,YAR9B,iBAAgEjC,EAAOlD,MAa1E,KAGN,C,wICnCM,SAASma,IACd,IAAQ3Z,EAAYC,EAAAA,EAAAA,SAAZD,QACA4Z,GAAaC,EAAAA,EAAAA,KAAbD,SACFE,GAAUC,EAAAA,EAAAA,GAAa,YAE7B,GAAqCpB,EAAAA,EAAAA,GAAS,CAC5CrD,SAAU,CAAC,SACXsD,QAAQ,WAAD,wBAAE,oGACgBoB,MAAM,GAAD,OAAIF,EAAJ,gBADrB,cACDzH,EADC,gBAEMA,EAAS4H,OAFf,mFAAF,kDAAC,KAFFpa,EAAR,EAAQA,UAAW2G,EAAnB,EAAmBA,QAAS8L,EAA5B,EAA4BA,KAQ5B,GAAgClS,EAAAA,EAAAA,UAA4B,CAC1D8Z,QAAQ,EACRC,aAAa,EACbC,WAAW,EACXC,QAAQ,EACRC,SAAS,IALX,eAAOC,EAAP,KAAiBC,EAAjB,KAQMC,EAAmB,SAACvZ,EAAaP,GACrC6Z,GAAY,SAACE,GAAD,eAAC,UACRA,GADO,cAETxZ,EAAMP,GAFG,GAIb,EAeD,OAAId,GAEA,gBAAKR,UAAU,eAAf,UACE,SAAC,IAAD,MAKFmH,GAEA,gBAAKnH,UAAU,eAAf,UACE,SAAC,IAAD,CACEF,KAAK,QACLa,SACE,SAAC,KAAD,CACE0E,GAAG,2DACHC,GAAG,6DASb,iBAAKtF,UAAU,eAAf,WACE,0BACE,SAAC,KAAD,CACEqF,GAAG,0DACHC,GAAG,8CAHP,QAQA,SAAC,IAAD,CACEsB,QAASsU,EAASL,OAClB9X,UAAWmD,QAAQ+M,EAAK4H,QACxBnY,SAAU,SAAClB,GAAD,OAAO4Z,EAAiB,SAAU5Z,EAAEuE,OAAOa,QAA3C,EACV5G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWqF,GAAG,iBAAcC,GAAG,cAGjC,SAAC,IAAD,CACEsB,QAASsU,EAASJ,YAClB/X,UAAWmD,QAAQ+M,EAAK6H,aACxBpY,SAAU,SAAClB,GAAD,OAAO4Z,EAAiB,cAAe5Z,EAAEuE,OAAOa,QAAhD,EACV5G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,mBAG7B,SAAC,IAAD,CACEsB,QAASsU,EAASH,UAClBhY,UAAWmD,QAAQ+M,EAAK8H,WACxBrY,SAAU,SAAClB,GAAD,OAAO4Z,EAAiB,YAAa5Z,EAAEuE,OAAOa,QAA9C,EACV5G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWqF,GAAG,gBAAaC,GAAG,iBAGhC,SAAC,IAAD,CACEsB,QAASsU,EAASF,OAClBjY,UAAWmD,QAAQ+M,EAAK+H,QACxBtY,SAAU,SAAClB,GAAD,OAAO4Z,EAAiB,SAAU5Z,EAAEuE,OAAOa,QAA3C,EACV5G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWqF,GAAG,SAASC,GAAG,cAG5B,SAAC,IAAD,CACEsB,QAASsU,EAASD,QAClBlY,UAAWmD,QAAQ+M,EAAKgI,SACxBvY,SAAU,SAAClB,GAAD,OAAO4Z,EAAiB,UAAW5Z,EAAEuE,OAAOa,QAA5C,EACV5G,UAAU,yBAJZ,UAME,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,eAG7B,SAAC,KAAD,CAAQxF,KAAK,UAAUuK,OAAK,EAAC3C,KAAK,QAAQnC,QA5FvB,WAErB,IAAM+V,EAA6B,GACnCpa,OAAOC,KAAK+Z,GAAUK,SAAQ,SAAC1Z,GACzBqZ,EAASrZ,IAAQoR,EAAKpR,IACxByZ,EAAe9X,KAAKyP,EAAKpR,GAE5B,IAEDyZ,EAAeE,OAAOD,QAAQhB,GAC9B5Z,EAAQoI,SAAQ,SAAC,KAAD,CAAW1D,GAAG,gCAAgCC,GAAG,+BAClE,EAiFG,UACE,SAAC,KAAD,CAAWD,GAAG,sBAAsBC,GAAG,sBAI9C,CC3HM,SAASmW,KACd,OAAsCrX,EAAAA,EAAAA,IAAe,eAArD,eAAO8M,EAAP,KAAoBC,EAApB,KACQjN,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAA4CE,EAAAA,EAAAA,IAAe,kBAA3D,eAAOE,EAAP,KAAuBsR,EAAvB,KACA,GAA4BxR,EAAAA,EAAAA,IAAe,UAA3C,eAAOgN,EAAP,KAAeC,EAAf,KACA,GAA8C7H,EAAAA,EAAAA,KAAtCC,EAAR,EAAQA,eAAgBiS,EAAxB,EAAwBA,kBACxB,GAA4BpK,EAAAA,EAAAA,KAAnBE,GAAT,eAYA,OACE,iBAAKxR,UAAU,qCAAf,WACE,iBAAKA,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWqF,GAAG,SAASC,GAAG,aAAc,KACxC,SAAC,IAAD,CACEzB,OACE,SAAC,KAAD,CACEwB,GAAG,4FACHC,GAAG,6EAJT,UAQE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,KAAD,QAGF,iBAAK1H,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWqF,GAAG,MAAMC,GAAG,WACvB,SAAC,IAAD,CACEzB,OAAO,SAAC,KAAD,CAAWwB,GAAG,qCAAqCC,GAAG,kCAD/D,UAGE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAASwK,EAAS,EAClB7L,QAvCmB,SAACjE,GAC1B+P,EAAU/P,EAAQ,GAAM,GACxBkQ,EAAgB,CAAEJ,OAAQ9P,EAAQ,GAAM,GACzC,QAwCG,iBAAKtB,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,WACE,SAAC,KAAD,CAAWqF,GAAG,iBAAcC,GAAG,iBAC/B,SAAC,IAAD,CACEzB,OACE,SAAC,KAAD,CACEwB,GAAG,iGACHC,GAAG,+EAJT,UAQE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAASsK,EACT3L,QAnEkB,SAACjE,GACzB6P,EAAe7P,GACfkQ,EAAgB,CAAEN,YAAa5P,GAChC,OAoEI4P,IACC,gBAAKlR,UAAU,mCAAf,UACE,SAACsa,EAAD,OAIJ,iBAAKta,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,mBAEE,SAAC,IAAD,CACE6D,OACE,SAAC,KAAD,CACEwB,GAAG,6FACHC,GAAG,sDAJT,UAQE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAAS6C,EACTlE,QAASmW,OAIZxX,IACC,iBAAKlE,UAAU,mCAAf,WACE,iBAAKA,UAAU,iCAAf,mBAEE,SAAC,IAAD,CAAS6D,OAAO,SAAC,KAAD,CAAWwB,GAAG,sCAAsCC,GAAG,wBAAvE,UACE,SAAC,KAAD,CAAQxF,KAAK,OAAO4R,MAAM,SAAS7R,MAAM,SAAC8R,EAAA,EAAD,IAAwBjK,KAAK,gBAI1E,SAAC,IAAD,CACEtH,gBAAgB,KAChBC,kBAAkB,MAClBuG,QAAStC,EACTiB,QAAS,kBAAMqQ,GAAkB,SAAC+F,GAAD,OAAQA,CAAR,GAAxB,SAMpB,C,wCC5HM,SAASC,GAAT,GAA+D,IAAnC3Y,EAAkC,EAAlCA,QACjC,GAAyBmB,EAAAA,EAAAA,IAAe,kBAExC,OAFA,gBAOE,gBAAKpE,WAAWsK,EAAAA,GAAAA,GAAK,sBAAsBsB,EAAAA,EAAAA,IAAkB,iBAA7D,UACE,eAAI5L,UAAU,2BAAd,UACG6b,EAAAA,EAAAA,IAAY5Y,GAAS7B,KAAI,SAACiC,GACzB,OACE,gBAAIrD,UAAU,6BAAd,WACE,SAAC,IAAD,CAAS6D,MAAOR,EAAOlD,KAAMsF,UAAU,OAAOqW,QAAQ,QAAtD,UACE,SAAC,IAAD,CAAOC,KAAG,EAACnY,MAAOP,EAAOC,MAAQ,QAAU,OAA3C,UACE,SAAC,KAAD,CACEoJ,GAAIrJ,EAAO6M,SACXlG,IAAK3G,EAAOlD,KACZuH,KAAK,QACL1H,WAAWsK,EAAAA,GAAAA,IAAMjH,EAAOC,OAAS,8CAItCD,EAAOC,QACN,gBAAKtD,UAAU,4BAAf,UACE,gBAAKA,UAAU,mCAAf,UACE,SAAC,KAAD,CAAWqF,GAAG,UAAUC,GAAG,qBAdnC,6BAAsEjC,EAAOqJ,IAoBhF,SA5BE,uBAgCV,C,gBCzBM,SAASsP,GAAT,GAAgF,IAAD,QAArD/Y,EAAqD,EAArDA,QAASxC,EAA4C,EAA5CA,MAAO0L,EAAqC,EAArCA,KAAM2D,EAA+B,EAA/BA,OAC7C/F,GAAajC,EAAAA,EAAAA,KAAbiC,SACR,GAAqCkS,EAAAA,EAAAA,IAAU,GAA/C,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA+CF,EAAAA,EAAAA,IAAU,GAAzD,eAAOG,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8CpY,EAAAA,EAAAA,KAAtCD,EAAR,EAAQA,QAASyK,EAAjB,EAAiBA,gBAAiBuD,EAAlC,EAAkCA,QAElC,MAAoB,UAAhBzR,EAAM0E,OACD,yBAIP,+BACE,iBAAKnF,UAAU,6BAAf,WACE,oBAAQA,UAAU,0BAA0BuF,QAAS4W,EAArD,WACE,kBAAMnc,UAAU,sCAAhB,8BACGmM,EAAKtI,aADR,aACG,EAAakG,UADhB,QAC6B,KAC3B,UAAC,KAAD,CAAWR,SAAO,EAAlB,qBAAqBtG,QAArB,IAAqBA,GAArB,UAAqBA,EAAU6M,UAA/B,aAAqB,EAAmB3P,KAAxC,WAEF,SAAC,IAAD,CAAWN,MAAM,SAAC2c,EAAA,EAAD,IAAqB9U,KAAK,WAC3C,gBAAK1H,UAAU,6CAAf,UACE,SAAC4b,GAAD,CAAkB3Y,QAASA,UAI/B,UAAC,IAAD,CACEY,OACE,SAACiG,GAAA,EAAD,CACEjG,MAAK,OAAEsI,QAAF,IAAEA,OAAF,EAAEA,EAAMtI,MACbsC,SAAUgG,EAAKhG,SACfQ,SAAS,EACT3G,UAAU,kBAGdyF,UAAU,QACVC,UAAU,EACVf,QAASwX,EACTxW,KAAMuW,EAZR,UAcGvN,IAAoBuD,IACnB,0BACE,SAAC,IAAD,CAAOxK,KAAK,UAAUqU,KAAG,EAACnY,MAAM,QAAhC,UACE,SAAC,KAAD,CAAQ8I,GAAE,OAAEzJ,QAAF,IAAEA,GAAF,UAAEA,EAAU6M,UAAZ,aAAE,EAAmBI,SAAUwB,MAAM,SAAShK,KAAK,YACtD,KACT,SAAC,KAAD,CAAWrC,GAAG,0BAAoBC,GAAG,2BAIzC,UAAC,IAAD,YACE,SAAC,KAAD,CAAQxF,KAAK,UAAUyF,QAAS,kBAAM8W,GAAqB,EAA3B,EAAkCxc,MAAM,SAAC2c,EAAA,EAAD,IAAxE,UACE,SAAC,KAAD,CAAWnX,GAAG,sBAAgBC,GAAG,gBAEnC,SAAC,MAAD,CAAYmX,SAAUtQ,KACtB,SAAC,IAAD,CACEtI,OAAO,SAAC,KAAD,CAAWwB,GAAG,sBAAgBC,GAAG,aACxCsT,MAAO,IACPlT,UAAU,EACVf,QAAS0X,EACT1W,KAAMyW,EALR,UAOE,SAACX,GAAD,MAEDvX,IACC,SAAC,KAAD,CAAQpE,KAAK,UAAUC,QAAM,EAACwF,QAAS,kBAAM+W,EAAS,OAAf,EAAwBzc,MAAM,SAAC6c,EAAA,EAAD,IAArE,qBAMJ,SAAC,IAAD,KAEA,SAACzC,EAAD,CAAapU,OAAY,OAALpF,QAAK,IAALA,OAAA,EAAAA,EAAOoF,QAAS,EAAGqU,WAAU,OAAEzZ,QAAF,IAAEA,OAAF,EAAEA,EAAOyZ,cAE1D,SAACC,EAAD,CAAsBlX,QAASA,WAKxC,C,+DCvFM,SAAS0Z,GAAT,GAA2D,IAAhClc,EAA+B,EAA/BA,MACxBsJ,GAAajC,EAAAA,EAAAA,KAAbiC,SACFuS,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBxb,EAAAA,EAAAA,UAAyB,MAAjD,eAAO4E,EAAP,KAAaiX,EAAb,KAMMC,EAAWpc,EAAMoc,SAEvB,GAAIA,EAAU,CACZ,IACMC,EAAsBC,KAAKC,MAEjC,GAAIH,EAASI,WAAaH,EAHK,KAI7B,OAAO,wBAGT,IAAML,EAAWS,EAAAA,EAAUL,EAAS1W,UACpC,OACE,+BACE,UAAC,KAAD,CACEtC,OACE,SAAC,KAAD,CACEwB,GAAG,kDACHC,GAAG,yCAGPK,KAAI,OAAEA,QAAF,IAAEA,GAAAA,EACNwX,SAzBU,WAChBP,GAAQ,EACT,EAwBOQ,KAAM,WACJd,EAAS,IAAD,OAAKO,EAASzW,QACvB,EACDiX,QAAQ,SAAC,KAAD,CAAWhY,GAAG,oBAAoBC,GAAG,mBAC7CgY,YAAY,SAAC,KAAD,CAAWjY,GAAG,WAAWC,GAAG,WAb1C,WAeE,SAAC,KAAD,CACE0E,IAAKyS,EAAS5Y,MAAMkG,GACpBtD,IAAG,UAAKwD,GAAAA,GAAAA,SAAL,OAA0BwS,EAAStW,SAAnC,YAA+C4D,EAA/C,QACHG,SAAQ,UAAKD,GAAAA,GAAAA,QAAL,qBAAoCF,EAApC,QACR/J,UAAU,mBAEZ,SAAC,MAAD,UAAQ6c,EAASzW,aAIxB,CAED,OAAO,uBACR,CCzCM,SAASmX,GAAT,GAAwE,IAAD,IAApDC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,mBAClCvJ,GAAWxP,EAAAA,EAAAA,KACTqF,GAAajC,EAAAA,EAAAA,KAAbiC,SACFtJ,EAAQuY,EAAa9E,EAAS9N,OAAQoX,GAC5C,GAAiBpZ,EAAAA,EAAAA,IAAe,UAAzB0L,GAAP,eACA,GAAwB1L,EAAAA,EAAAA,IAAe,YAA9BsZ,GAAT,eACA,GAAwB3c,EAAAA,EAAAA,UAAc,CAAC,GAAvC,eAAOoL,EAAP,KAAawR,EAAb,KACMxX,EAAQ,iBAAGgG,QAAH,IAAGA,OAAH,EAAGA,EAAMtI,aAAT,QAAkB,GAC1BZ,EAAO,UAAGxC,EAAMwC,eAAT,QAAoB,CAAC,EAkBlC,GC/CK,WACL,IAAQ0P,EAAiB/R,EAAAA,EAAAA,SAAjB+R,aACF2J,GAAWC,EAAAA,EAAAA,MACT1U,GAAcC,EAAAA,EAAAA,KAAdD,UAGF+V,GAASC,EAAAA,EAAAA,GAAQ,MAEvBlS,EAAAA,EAAAA,YAAU,WACJiS,GACFjL,EAAamL,QAAQ,CACnBnd,QAASkH,EACP,yDACA,uDAEFwD,SAAU,EACV1G,QAAS,kBAAM2X,EAAS,IAAf,EACT7W,UAAW,OAGhB,GAAE,CAACmY,EAAQtB,EAAUzU,EAAW8K,GAClC,CDUCoL,IAEAC,EAAAA,EAAAA,GAAS,GAAD,OAAI7X,EAAQ,UAAMA,EAAS4D,GAAf,OAAgC,GAA5C,qBAGR4B,EAAAA,EAAAA,YAAU,WACRgS,EAAQH,EAAiBN,EAAAA,EAAUM,GAAkB,CAAC,EACvD,GAAE,CAACA,KAGJ7R,EAAAA,EAAAA,YAAU,WACJ5B,IAAamK,EAASnK,UACxB2T,EAAYxJ,EAASnK,SAExB,GAAE,CAACmK,EAASnK,YAER+F,IAAW7M,EAAQ6M,GACtB,OACE,iCACE,SAAC6M,GAAD,CAAiBlc,MAAOA,KACxB,SAAC,KAAD,CAAYwC,QAASA,EAASkJ,KAAMA,EAAM1H,KAAMyP,IAFlD,OAOJ,IAAM+J,EAAuBR,EAAmBhd,GAEhD,OACE,iCACE,SAACub,GAAD,CAAgB/Y,QAASA,EAASxC,MAAOA,EAAO0L,KAAMA,EAAM2D,OAAQA,KACpE,SAAC6M,GAAD,CAAiBlc,MAAOA,KACxB,SAACwd,EAAD,CAAiBhb,QAASA,EAASxC,MAAOA,EAAO0L,KAAMA,EAAM1H,KAAMyP,KACnE,SAAC,MAAD,CAAiBzT,MAAOA,EAAOwC,QAASA,MAG7C,C,yGE7CM,SAASib,EAAT,GAMQ,IALb9U,EAKY,EALZA,SACA+U,EAIY,EAJZA,aAIY,IAHZC,UAAAA,OAGY,aAFZC,WAAAA,OAEY,aADZre,UAAAA,OACY,MADA,GACA,EACZ,OACE,iBACEA,WAAWsK,EAAAA,EAAAA,GAAK,OAAQ8T,GAAa,mBAAoBC,GAAc,oBAAqBre,GAD9F,UAGGme,EACA/U,IAGN,C,gDCnCKkV,EAA4B,SAACC,GACjC,OAAQA,GACN,IAAK,SACH,OACE,SAAC,KAAD,CAAWlZ,GAAG,0CAA0CC,GAAG,0CAE/D,IAAK,UACH,OACE,SAAC,KAAD,CACED,GAAG,wDACHC,GAAG,4CAIT,QACE,OAAO,SAAC,KAAD,CAAWD,GAAG,+BAA+BC,GAAG,6BAE5D,EAsCM,SAASkZ,EAAT,GAAqG,IAAD,EAA5EpV,EAA4E,EAA5EA,SAAUuL,EAAkE,EAAlEA,KAAM8J,EAA4D,EAA5DA,WAAYxb,EAAgD,EAAhDA,QAAgD,IAAvCyb,YAAAA,OAAuC,MAAzB,CAAC,EAAwB,EACpGzb,IAAS+W,EAAAA,EAAAA,IAAM,8DAA+D,QAEnF,IAEuC,IAFjC2E,EAAUC,MAAMC,QAAQzV,GAAYA,EAAW,CAACA,GAEtD,OAAInG,GAAW0R,GAAQgK,EAAQlO,QAE3B,SAAC,KAAD,CACExN,QAASA,EACTY,OAAO,SAAC,KAAD,CAAWwB,GAAG,UAAUC,GAAG,UAClCoT,YAAW,UAAEgG,EAAYhG,mBAAd,QAA6B4F,EAAyB,UAACI,EAAY5e,YAAb,QAAqB,WAHxF,SAKG4e,EAAYC,UAKdA,EAAQhK,GAIb,iBAAI8J,QAAJ,IAAIA,OAAJ,EAAIA,EAAa9J,UAAjB,SACSgK,EAAQhK,IAGV,oBAPE,SAAC,KAAD,GAQV,C,+KCxCM,SAAS/P,EAAT,GASsC,IAR3CC,EAQ0C,EAR1CA,YAQ0C,IAP1CE,WAAAA,OAO0C,MAP7B,aAO6B,MAN1C+Z,aAAAA,OAM0C,MAN3B,WAAQ,EAMmB,MAL1C5Z,YAAAA,OAK0C,MAL5B,WAAQ,EAKoB,MAJ1CmO,QAAAA,OAI0C,MAJhC,WAAQ,EAIwB,MAH1C/M,UAAAA,OAG0C,MAH9B,WAAQ,EAGsB,MAF1CtB,eAAAA,OAE0C,MAFzB,0BAEyB,MAD1CC,aAAAA,OAC0C,MAD3B,sBAC2B,EAC1C,EAAkCrE,EAAAA,EAAAA,SAA1BD,EAAR,EAAQA,QAASgS,EAAjB,EAAiBA,aACTsB,GAAchQ,EAAAA,EAAAA,KAAdgQ,UACR,GAA6BvP,EAAAA,EAAAA,KAArB0B,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,SAChB,GAAiB/B,EAAAA,EAAAA,IAAe,UAAzB0L,GAAP,eAEM8C,GAAQ7L,EAAAA,EAAAA,GAAY,CACxB6H,YAAa,CAAC7J,GACdiC,WAAY,SAACpF,GAAD,OACViD,GAAY,QACVuB,OAAAA,EACAD,SAAAA,EACAkS,SAAUvI,GACPlO,GALK,EAOZmd,SAAS,WAAD,wBAAE,qFACR9K,EAAUlP,GAAY,GADd,SAEF+Z,IAFE,2CAAF,kDAAC,GAITxY,UAAU,WAAD,wBAAE,8FACHA,IADG,OAET3F,EAAQoI,QAAQ/D,GAFP,2CAAF,kDAAC,GAIVqO,QAAS,SAAC7R,GACRmR,EAAatQ,MAAM,CACjB1B,QAASsE,EACTuC,YAAaxF,KAAKC,UAAL,OAAeT,QAAf,IAAeA,OAAf,EAAeA,EAAGb,SAC/B8E,UAAW,eAEb6N,QAAQjR,MAAMb,GACd6R,GACD,EACDgB,UAAU,WAAD,wBAAE,8FACHnP,IADG,OAET+O,EAAUlP,GAAY,GAFb,2CAAF,kDAAC,KAMZ,OAvFe,SAACia,GAA0D,IACtEC,EADuBC,EAA8C,uDAApC,IAErC,OAAO,WAAqB,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACzBC,aAAaH,GACbA,EAAQ1H,YAAW,WACjByH,EAAKK,MAAM,EAAMF,EAClB,GAAED,EACJ,CACF,CA+EQI,CAAS1M,EAAM1L,OACvB,C,wIChFM,SAASsT,IACd,OAAwCpW,EAAAA,EAAAA,IAAe,gBAAvD,eAAOmb,EAAP,KAAqBC,EAArB,KACA,GAAsBpb,EAAAA,EAAAA,IAAe,eAA9B8M,GAAP,eACA,GAA2CI,EAAAA,EAAAA,KAA3C,eAAOC,EAAP,KAAwBC,EAAxB,KAuBA,OAVAC,EAAAA,EAAAA,IAAc,WAAO,IAAD,EAClB+N,EAAe,UAACjO,EAAgB,uBAAjB,QAAoC,CAAC,EACrD,KAED5F,EAAAA,EAAAA,YAAU,WACJzK,OAAOC,KAAP,OAAYoe,QAAZ,IAAYA,EAAAA,EAAgB,CAAC,GAAG9O,QAClCe,EAAgB,CAAE+N,aAAY,OAAEA,QAAF,IAAEA,EAAAA,EAAgB,CAAC,GAEpD,GAAE,CAACA,EAAc/N,IAEX,CACL+N,aAAAA,EACAE,gBAhBsB,SAACC,GACvB,OAAOxZ,QAAQwZ,GAAUxO,IAAV,OAAyBqO,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAeG,IACxD,EAeCnF,SAxBe,SAACmF,GAChBF,GAAgB,SAAC7D,GAAD,qBAAC,UACZA,GADW,cAEb+D,EAFa,YAEJ,OAAC/D,QAAD,IAACA,GAAAA,EAAI+D,WAFD,aAIjB,EAoBCC,cAAezO,EAElB,C,4FCzCM,SAAS1H,IACd,OAA4CpF,EAAAA,EAAAA,IAAe,kBAA3D,eAAOqF,EAAP,KAAuBmW,EAAvB,KAMA,MAAO,CACLlW,SAAAA,EAAAA,GACAD,eAAAA,EACAiS,kBAPwB,WACxBkE,GAAkB,SAACjE,GAAD,OAAQA,CAAR,GACnB,EAOF,C,4FCZM,SAASnR,IACd,IAAQqV,GAAcnb,EAAAA,EAAAA,KAAdmb,UACR,GAAiBzb,EAAAA,EAAAA,IAAe,UAEhC,OAAOyb,KAFP,cAGD,C,kJCKM,SAASrJ,EAAQsJ,GAAsE,IAA3CC,EAA0C,uDAApB,GAAIC,EAAgB,uCACrFlV,GAAQN,EAAAA,EAAAA,KACd,GAAiBpG,EAAAA,EAAAA,IAAe,UAAhC,eAAO0L,EAAP,KACA,GAA8B/O,EAAAA,EAAAA,WAAS,GAAvC,eAAOkf,EAAP,KAAgBC,EAAhB,KACM7U,EAAQ,OAAG2U,QAAH,IAAGA,EAAAA,GAASvQ,EAAAA,EAAAA,GAAc,CAAC,EAAG,EAAG,EAAG,EAAG,IAErD,OAAOtE,EAAAA,EAAAA,GAAa,CAClBE,SAAAA,EACAC,SAAU,YAEL2U,GACDvW,EAAAA,IACAyW,EAAAA,KACCrV,GACDgF,IAAWsQ,EAAAA,IACXL,EAAavK,MAAMtP,WAEnB4Z,IACAI,GAAW,GAEd,EACDnd,SAAUkd,GAEb,C,gFClCM,SAASvL,IAKb,IALqB2L,EAKtB,uDALqC,EAMrC,GAAwBtf,EAAAA,EAAAA,UAAiBsf,GAAzC,eAAO1L,EAAP,KAAajG,EAAb,KAEMyI,EAAe,kBAAMzI,GAAQ,SAACiN,GAAD,OAAOA,EAAI,CAAX,GAAd,EAEf2E,EAAmB,kBAAM5R,GAAQ,SAACiN,GAAD,OAAQA,EAAI,EAAI,EAAI,EAAIA,EAAI,CAA5B,GAAd,EAEzB,MAAO,CACLhH,KAAAA,EACAjG,QAAAA,EACAyI,aAAAA,EACAmJ,iBAAAA,EAEH,C,wBCjBM,SAAS5F,EAAa6D,GAC3B,IAAMgC,EAAOC,6BAEb,OAAQjC,GACN,IAAK,MACH,MAAM,GAAN,OAAUgC,EAAV,YAAkBC,eACpB,IAAK,MACH,MAAM,GAAN,OAAUD,EAAV,YAAkBC,iBACpB,IAAK,WACH,MAAM,GAAN,OAAUD,EAAV,YAAkBC,YACpB,QACE,MAAO,GAEZ,C,2HCjBM,SAAStT,IAA8C,IAAjBuT,EAAgB,wDAC3D,GAA8Brc,EAAAA,EAAAA,IAAe,kBAA7C,eAASsc,EAAT,MAEA/U,EAAAA,EAAAA,YAAU,WAER,OADA+U,IAAkBD,GACX,WACLC,GAAkB,EACnB,CACF,GAAE,GACJ,C,kHCDM,SAAS/K,EAAQ1S,EAAsBxC,GAC5C,OAAiB2D,EAAAA,EAAAA,IAAe,UAAzB0L,GAAP,eACA,GAAwB1L,EAAAA,EAAAA,IAAe,QAAvC,eAAOsR,EAAP,KAAaiL,EAAb,KACA,GAA8B5f,EAAAA,EAAAA,WAAS,GAAvC,eAAO6V,EAAP,KAAgBgK,EAAhB,KAyCA,OAvCAjV,EAAAA,EAAAA,YAAU,WACJmE,IAAWsQ,EAAAA,GAQXtQ,GAAM,OAAI7M,QAAJ,IAAIA,GAAAA,EAAU6M,IACtB6Q,EAAO,OAAC1d,QAAD,IAACA,OAAD,EAACA,EAAU6M,IARlB6Q,EAAQ,CACNjU,GAAI0T,EAAAA,GACJ9c,OAAO,GAQZ,GAAE,CAACL,EAAS6M,EAAQ6Q,KAErBhV,EAAAA,EAAAA,YAAU,WAWgB,IAAD,EAVnBmE,IAAWsQ,EAAAA,GAKXtQ,IAA0B,KAAZ,OAAJ4F,QAAI,IAAJA,OAAA,EAAAA,EAAMpS,OAClBsd,GAAW,GAIT,OAACngB,QAAD,IAACA,GAAAA,EAAOogB,UAMR/Q,IAAc,OAAJ4F,QAAI,IAAJA,OAAA,EAAAA,EAAMmL,YAAN,OAAkBpgB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAOogB,WACrCD,GAAW,GAIbA,GAAW,GAVTA,EAAU,iBAAClL,QAAD,IAACA,OAAD,EAACA,EAAMpS,aAAP,UAVVsd,GAAW,EAqBd,GAAE,CAAC9Q,EAAD,OAAS4F,QAAT,IAASA,OAAT,EAASA,EAAMpS,MAAf,OAAsBoS,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMmL,UAA5B,OAAuCpgB,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAOogB,aAE1C,kBACFnL,GADL,IAEEkB,QAAAA,EACAkK,SAAQpL,EAAKmL,WAAY9D,KAAKC,MAAQtH,EAAKmL,UAtDzB,MAwDrB,C,wDCzDM,IAAM7L,EAAS,CACpB+L,QAAS,CACPC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,UAAW,YACXC,KAAM,QAERC,SAAU,CACRC,UAAW,YACXC,WAAY,aACZC,QAAS,WAEXC,UAAW,CACTC,KAAM,OACNH,WAAY,aACZI,QAAS,WAEXC,cAAe,CACbC,gBAAiB,kBACjBC,YAAa,cACbC,YAAa,cACbC,OAAQ,UAEVC,uBAAwB,CACtBC,QAAS,WAEXC,uBAAwB,CACtBC,gBAAiB,kBACjBC,cAAe,gBACfC,UAAW,YACXC,aAAc,eACdC,cAAe,gBACfC,UAAW,YACXC,OAAQ,UAEVC,qBAAsB,CACpBC,MAAO,QACPC,UAAW,YACXC,OAAQ,SACRC,WAAY,cAEdC,eAAgB,CACdC,gBAAiB,kBACjBC,aAAc,eACdC,SAAU,WACVT,OAAQ,UAEVU,uBAAwB,CACtBC,YAAa,cACbR,UAAW,YACXS,QAAS,UACTR,OAAQ,SACRJ,OAAQ,UAEVa,uBAAwB,CACtBrB,QAAS,WAEXsB,OAAQ,CACNC,QAAS,UACTjC,QAAS,WAEXkC,iBAAkB,CAChBC,WAAY,aACZC,cAAe,gBACfC,WAAY,aACZC,iBAAkB,mBAClBf,WAAY,cAEdgB,iBAAkB,CAChBC,SAAU,WACVxC,QAAS,WAEXyC,kBAAmB,CACjBC,eAAgB,iBAChBC,iBAAkB,mBAClBtB,UAAW,YACXE,WAAY,cAEdqB,iBAAkB,CAChBC,gBAAiB,kBACjBC,cAAe,gBACfnB,SAAU,WACVT,OAAQ,UAEV6B,uBAAwB,CACtBC,gBAAiB,kBACjBC,YAAa,cACb1B,WAAY,cAEd2B,yBAA0B,CACxBxC,QAAS,WAEXyC,kBAAmB,CACjBC,aAAc,eACdC,eAAgB,iBAChBrD,QAAS,WAEXsD,gBAAiB,CACfC,iBAAkB,mBAClBC,QAAS,UACTC,OAAQ,SACRC,aAAc,gBAEhBC,QAAS,CACPC,QAAS,UACTC,MAAO,QACPrD,OAAQ,UAEVsD,eAAgB,CACdC,mBAAoB,qBACpBC,iBAAkB,mBAClBC,QAAS,UACT1C,WAAY,cAEd2C,eAAgB,CACdC,eAAgB,iBAChB3D,OAAQ,SACR4D,WAAY,cAEdC,aAAc,CACZC,eAAgB,iBAChBC,gBAAiB,kBACjBvE,QAAS,WAEXwE,UAAW,CACT9D,QAAS,WAEX+D,gBAAiB,CACfC,UAAW,YACXC,MAAO,QACPzD,OAAQ,UAEV0D,iBAAkB,CAChBlE,QAAS,WAEXmE,gBAAiB,CACfC,gBAAiB,kBACjBC,MAAO,QACPxD,WAAY,cAEdyD,cAAe,CACbC,UAAW,YACXC,SAAU,WACVC,KAAM,OACN5D,WAAY,cAEd6D,YAAa,CACXC,oBAAqB,sBACrBC,sBAAuB,wBACvB3D,SAAU,WACV3B,QAAS,WAEXuF,eAAgB,CACdC,iBAAkB,mBAClBzF,WAAY,aACZmB,OAAQ,UAEVuE,iBAAkB,CAChBC,cAAe,gBACfC,SAAU,WACVpE,WAAY,cAEdqE,iBAAkB,CAChBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,KAAM,OACNC,OAAQ,SACRhG,QAAS,WAEXiG,WAAY,CACVC,OAAQ,SACRpG,UAAW,YACX6B,SAAU,WACVT,OAAQ,UAEViF,kBAAmB,CACjBC,kBAAmB,oBACnBrC,mBAAoB,qBACpBsC,YAAa,cACbC,MAAO,SAETC,gBAAiB,CACfC,sBAAuB,wBACvBC,gBAAiB,kBACjBjG,OAAQ,UAEVkG,eAAgB,CACdhE,eAAgB,iBAChBiE,eAAgB,iBAChBC,gBAAiB,kBACjB5G,QAAS,WAEX6G,WAAY,CACVnE,eAAgB,iBAChBoE,QAAS,UACT7C,QAAS,UACTU,MAAO,QACPoC,aAAc,eACdvG,OAAQ,UAEVwG,gBAAiB,CACfC,gBAAiB,kBACjBC,kBAAmB,oBACnBhG,OAAQ,UAEViG,oBAAqB,CACnBC,eAAgB,iBAChBC,sBAAuB,wBACvBC,cAAe,gBACfC,iBAAkB,oBAEpBC,WAAY,CACV9G,QAAS,WAEX+G,SAAU,CACR/G,QAAS,W,wKCnNN,SAAS/O,EACd+V,EACAnf,EACAqH,GAEO,IADP+X,EACM,uDADmB,WAAQ,EAE3BC,EAAY,IAAIC,yBAAyBH,EAAKnf,IACpDqf,EAAUE,KAAoB,OAAbvf,EAAoB,QAAU,QAC/Cqf,EAAUhY,OAASA,EACnBgY,EAAUG,iBAAiB,MAAOJ,GAClCrnB,OAAO0nB,gBAAgBrW,MAAMiW,EAC9B,CAOM,SAAShW,EAAwBjT,GACtC,IAAMsC,EAAU,CACd,CACE4C,GAAG,cAAD,OAAgBlF,EAAhB,KACFmF,GAAG,YAAD,OAAcnF,EAAd,MAEJ,CACEkF,GAAG,mCACHC,GAAG,+BAEL,CACED,GAAG,sBACHC,GAAG,mBAEL,CACED,GAAG,oBAAD,OAAgBlF,EAAhB,KACFmF,GAAG,cAAD,OAAgBnF,EAAhB,MAEJ,CACEkF,GAAG,GAAD,OAAKlF,EAAL,2CACFmF,GAAG,GAAD,OAAKnF,EAAL,cAEJ,CACEkF,GAAG,yBAAD,OAA2BlF,EAA3B,4BACFmF,GAAG,iBAAD,OAAmBnF,EAAnB,MAEJ,CACEkF,GAAG,6DACHC,GAAG,0DAIP,OAAOmK,EAAAA,EAAAA,GAAchN,EACtB,CAEM,SAAS0T,EAA8BhW,GAC5C,IAAMsC,EAAU,CACd,CACE4C,GAAG,mEAAD,OAAqElF,GACvEmF,GAAG,oDAAD,OAAsDnF,IAE1D,CACEkF,GAAG,+CACHC,GAAG,gDAEL,CACED,GAAG,0DACHC,GAAG,4DAIP,OAAOmK,EAAAA,EAAAA,GAAchN,EACtB,CAEM,SAAS4T,EAA6BlW,GAC3C,IAAMsC,EAAU,CACd,CACE4C,GAAG,4BAAD,OAA2BlF,EAA3B,+CACFmF,GAAG,oCAAD,OAAsCnF,EAAtC,0CAEJ,CACEkF,GAAG,kFACHC,GAAG,wFAEL,CACED,GAAG,4CACHC,GAAG,qDAIP,OAAOmK,EAAAA,EAAAA,GAAchN,EACtB,CAEM,SAAS8T,EAA8BpW,GAC5C,IAAMsC,EAAU,CACd,CACE4C,GAAG,QAAD,OAAUlF,EAAV,kEACFmF,GAAG,MAAD,OAAQnF,EAAR,2DAEJ,CACEkF,GAAG,+EACHC,GAAG,qEAEL,CACED,GAAG,qIACHC,GAAG,sCAIP,OAAOmK,EAAAA,EAAAA,GAAchN,EACtB,C","sources":["components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/auth/SignIn.tsx","components/auth/SignUp.tsx","components/debug/DebugOnly.tsx","components/debug/DevButton.tsx","components/general/GameBanner.tsx","components/host/HostButton.tsx","components/host/HostOnlyContainer.tsx","components/host/HostNextPhaseButton.tsx","components/host/HostOnlyButton.tsx","components/phases/PhaseContainer.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/lobby/StepJoin.tsx","components/phases/lobby/LobbyStep.tsx","mock/players.ts","components/phases/lobby/AvatarSelection.tsx","components/phases/lobby/Settings.tsx","components/phases/lobby/UsualAvatarsSelection.tsx","components/phases/lobby/StepInfo.tsx","hooks/useAddPlayer.ts","components/phases/lobby/StepWaiting.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/rules/AutoNextPhase.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/players/reorder.tsx","hooks/useGameState.ts","hooks/useFirestoreDocument.ts","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/RedirectSession.tsx","components/session/Session.tsx","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","hooks/useAPICall.ts","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useHost.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useTDBaseUrl.ts","hooks/useTemporarilyHidePlayersBar.ts","hooks/useUser.ts","utils/phases.ts","utils/speech.ts"],"sourcesContent":["// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Icons\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  /**\n   * The label of the button\n   */\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  /**\n   * The input value type\n   */\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","import { useState } from 'react';\n// Ant Design Resources\nimport { AutoComplete, Button, Form, Select, App } from 'antd';\n// Utils\nimport { ADMIN_ACTIONS } from 'utils/constants';\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  /**\n   * The loading state\n   */\n  isLoading?: boolean;\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The admin action being performed\n   */\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","// Ant Design Resources\nimport { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n// Sass\nimport './PlayersReadyState.scss';\n\ntype PlayersReadyStateProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Drawer, Popconfirm } from 'antd';\nimport { FireFilled } from '@ant-design/icons';\n// Hooks\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getFirebaseUrl } from 'services/firebase';\n// Components\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n// Sass\nimport './AdminMenuDrawer.scss';\n\ntype AdminMenuDrawerProps = {\n  /**\n   * The game state\n   */\n  state: GameState;\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const { isAdmin } = useCurrentUserContext();\n  const [usingFirestoreEmulator] = useGlobalState('usingFirestoreEmulator');\n  const [isAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [visible, setVisible] = useState(false);\n  const meta = useGameMeta();\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin || !isAdminEnabled || !state.phase) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <FixedMenuButton\n          position={-1}\n          icon={<FireFilled />}\n          type=\"button\"\n          label={<Translate pt=\" Admin\" en=\" Admin\" />}\n          onClick={showDrawer}\n          buttonProps={{\n            type: 'default',\n          }}\n        />\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} open={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  // Not every game is currently working with this feature\n                  // disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  disabled\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.round?.forceLastRound ||\n                    isLoading ||\n                    ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label={\n                    state?.round.forceLastRound\n                      ? 'This is already set as the last round'\n                      : 'Make this the last round'\n                  }\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the lobby and unlock the game?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.RESET_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={state?.phase === 'LOBBY'}\n                  label=\"Reset and restart\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <h3>Firebase</h3>\n              <Button\n                target=\"_blank\"\n                href={getFirebaseUrl(Boolean(usingFirestoreEmulator), meta.gameName, meta.gameId)}\n              >\n                Visit Firebase Collection\n              </Button>\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image, App, Switch, Space, ButtonProps } from 'antd';\n// API\nimport { resetPassword, signIn, signInWithGoogle } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { UserCredential } from 'firebase/auth';\nimport { IconAvatar } from 'components/avatars';\nimport { GoogleIcon } from 'icons/GoogleIcon';\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [view, setView] = useState('google');\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Space className=\"space-container\">\n        <Switch\n          checkedChildren={<Translate pt=\"E-mail e senha\" en=\"Email and Password\" />}\n          unCheckedChildren=\"Google\"\n          onChange={(checked) => setView(checked ? 'email' : 'google')}\n        />\n      </Space>\n\n      {view === 'google' ? (\n        <SignInWithGoogle onSuccess={onSuccess} />\n      ) : (\n        <SignInWithEmail onSuccess={onSuccess} />\n      )}\n    </div>\n  );\n}\n\nexport function SignInWithGoogle({ onSuccess, ...buttonProps }: SignInProps & ButtonProps) {\n  const { isLoading, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signInWithGoogle(),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Space\n      className=\"space-container\"\n      direction=\"vertical\"\n      align=\"center\"\n      classNames={{ item: 'full-width' }}\n    >\n      <>\n        {isError && (\n          <Alert\n            description={\n              <Translate pt=\"Algo deu errado, tente novamente\" en=\"Something went wrong. Please try again\" />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        )}\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={onFinish}\n          loading={isLoading}\n          block\n          icon={<IconAvatar icon={<GoogleIcon />} size=\"small\" />}\n          {...buttonProps}\n        >\n          <Translate pt=\"Entrar com Google\" en=\"Sign in with Google\" />\n        </Button>\n      </>\n    </Space>\n  );\n}\n\nfunction SignInWithEmail({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n\n  const { isLoading, mutate, isError } = useMutation<UserCredential, Error, void, unknown>({\n    mutationFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    onSuccess,\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <>\n      <Form\n        name=\"login\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            <Translate pt=\"Entrar\" en=\"Submit\" />\n          </Button>\n\n          <Button type=\"link\" onClick={() => setShowForgotPassword((v) => !v)}>\n            <Translate pt=\"Esqueci minha senha\" en=\"Forgot my password\" />\n          </Button>\n        </Form.Item>\n      </Form>\n      {showForgotPassword && (\n        <Alert\n          type=\"info\"\n          message={\n            <ResetPasswordForm\n              email={form.getFieldValue('username')}\n              onSuccess={() => setShowForgotPassword(false)}\n            />\n          }\n        />\n      )}\n    </>\n  );\n}\n\ntype ResetPasswordFormProps = {\n  email?: string;\n  onSuccess: GenericFunction;\n};\n\nfunction ResetPasswordForm({ email, onSuccess }: ResetPasswordFormProps) {\n  const { message } = App.useApp();\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isLoading, mutate, isError } = useMutation({\n    mutationFn: async () => await resetPassword(form.getFieldValue('username')),\n    onSuccess: () => {\n      onSuccess();\n      message.success(\n        translate(\n          'Verifique seu e-mail enviado para redefinir a sua senha',\n          'Verify your email to reset your password'\n        )\n      );\n    },\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <Form\n      name=\"forgot-password\"\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      style={{ maxWidth: 600 }}\n      initialValues={{ username: email, remember: true }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item>\n        <Title level={4} size=\"xx-small\">\n          <Translate pt=\"Redefinir a senha\" en=\"Password Reset\" />\n        </Title>\n      </Form.Item>\n      <Form.Item\n        label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n        name=\"username\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      {isError && (\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Alert\n            description={\n              <Translate\n                pt=\"Algo deu errado, provavelmente este e-mail não existe no banco de dados da Tarde Divertida\"\n                en=\"Something went wrong. Please try again\"\n              />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-in__error-alert\"\n          />\n        </Form.Item>\n      )}\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image, FormInstance } from 'antd';\n// API\nimport { signUp } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\n// Components\nimport { Translate } from 'components/language';\n\ntype SignUpProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignUp({ onSuccess }: SignUpProps) {\n  const [form] = Form.useForm();\n\n  const { isLoading, mutate, isError } = useMutation({\n    mutationKey: ['sign-up'],\n    mutationFn: async () => await signUp(form.getFieldValue('username'), form.getFieldValue('password')),\n    onSuccess: () => {\n      onSuccess();\n    },\n  });\n\n  const onFinish = () => {\n    mutate();\n  };\n\n  return (\n    <div className=\"sign-up\">\n      <div className=\"sign-up__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <SignUpForm form={form} onFinish={onFinish} isError={isError} isLoading={isLoading} />\n    </div>\n  );\n}\n\ntype SignUpFormProps = {\n  form: FormInstance<any>;\n  onFinish: GenericFunction;\n  isError: boolean;\n  isLoading: boolean;\n};\n\nexport function SignUpForm({ form, onFinish, isError, isLoading }: SignUpFormProps) {\n  const { translate } = useLanguage();\n  return (\n    <Form\n      name=\"sign-up\"\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 16 }}\n      style={{ maxWidth: 600 }}\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label={<Translate pt=\"E-mail\" en=\"E-mail\" />}\n        name=\"username\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label={<Translate pt=\"Senha\" en=\"Password\" />}\n        name=\"password\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n        help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label={<Translate pt=\"Confirmar Senha\" en=\"Confirm Password\" />}\n        name=\"password-confirm\"\n        rules={[\n          { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      {isError && (\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Alert\n            description={\n              <Translate pt=\"Algo deu errado, tente novamente\" en=\"Something went wrong. Please try again\" />\n            }\n            type=\"error\"\n            showIcon\n            className=\"sign-up__error-alert\"\n          />\n        </Form.Item>\n      )}\n\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { BugFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { DebugOnly } from './DebugOnly';\n\n/**\n * Button only available during dev only\n * @returns\n */\nexport function DevButton({ children, type, ...rest }: ButtonProps) {\n  return (\n    <DebugOnly devOnly>\n      <Button icon={<BugFilled />} type={type ?? 'primary'} {...rest}>\n        {children}\n      </Button>\n    </DebugOnly>\n  );\n}\n","// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype BannerProps = {\n  /**\n   * Display title of the game\n   */\n  title?: DualLanguageValue;\n  /**\n   * Name (collection key) of the game\n   */\n  gameName?: string;\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Determine if image should be able to be previewed\n   */\n  preview?: boolean;\n};\n\nexport function GameBanner({ title, gameName, className, preview }: BannerProps) {\n  const { language } = useLanguage();\n\n  return (\n    <figure>\n      <Image\n        alt={title?.[language]}\n        src={`${PUBLIC_URL.BANNERS}${gameName}-${language}.jpg`}\n        fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        className={className}\n        preview={preview}\n      />\n    </figure>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { RocketOutlined } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Sass\nimport './HostButton.scss';\n\n/**\n * Host Button (orange with rocket icon)\n * Important: This button is NOT guarded by HostOnlyContainer, and it must be wrapped by it.\n */\nexport function HostButton({ onClick, icon, disabled, className = '', ...rest }: ButtonProps) {\n  const { isLoading } = useLoading();\n\n  return (\n    <Button\n      icon={icon ?? <RocketOutlined />}\n      ghost\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      className={clsx('host-button', className)}\n      {...rest}\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, SpaceProps } from 'antd';\nimport { RocketOutlined } from '@ant-design/icons';\n// Hooks\nimport { useHost } from 'hooks/useHost';\n// Sass\nimport './HostOnlyContainer.scss';\n\ninterface VIPOnlyContainerProps extends SpaceProps {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Custom label\n   */\n  label?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport const HostOnlyContainer = ({ children, label, className = '', ...rest }: VIPOnlyContainerProps) => {\n  const isVIP = useHost();\n\n  if (!isVIP) return <></>;\n\n  return (\n    <fieldset className={clsx('host-only-container', className)}>\n      <legend className=\"host-only-container__legend\">\n        <RocketOutlined /> {label ?? 'Host Controls'}\n      </legend>\n      <Space {...rest}>{children}</Space>\n    </fieldset>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode, useEffect } from 'react';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { PauseOutlined, PlayCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { HostOnlyContainer } from './HostOnlyContainer';\nimport { HostButton } from './HostButton';\nimport { useHost } from 'hooks/useHost';\n\nfunction ButtonLabel({ round }: { round?: GameRound }) {\n  if (!round || round.current === round.total || round.forceLastRound) {\n    return <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />;\n  }\n\n  return <Translate pt=\"Próxima rodada\" en=\"Next Round\" />;\n}\n\ntype VIPNextPhaseButtonProps = {\n  /**\n   * The button content, if not present \"Next Round is used instead\"\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Game round information used to determine if it is game over\n   */\n  round?: GameRound;\n  /**\n   * Time to auto trigger the button in seconds (default: 45 seconds)\n   */\n  autoTriggerTime?: number;\n};\n\n/**\n * Button only available to the Host to go to the next phase.\n * It will be auto-triggered after 60 seconds unless value is overridden with a 0\n * It may be paused\n */\nexport function HostNextPhaseButton({ round, autoTriggerTime = 30, children }: VIPNextPhaseButtonProps) {\n  const isVIP = useHost();\n  const { translate } = useLanguage();\n  const { loaders } = useLoading();\n  const isLoading = loaders['go-to-next-phase'];\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'go-to-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  const handleClick = () => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE });\n\n  const hasTimer = Boolean(autoTriggerTime);\n\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    autoStart: autoTriggerTime > 0,\n    duration: autoTriggerTime,\n    onExpire: handleClick,\n    disabled: !isVIP ?? !hasTimer,\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      pause();\n    }\n    return () => pause();\n  }, [isLoading]); // eslint-disable-line\n\n  return (\n    <HostOnlyContainer\n      label=\"Host Action\"\n      className={clsx('host-only-container--float', getAnimationClass('slideInUp'))}\n    >\n      <Tooltip title=\"Pause\">\n        <HostButton\n          icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n          onClick={isRunning ? pause : resume}\n          disabled={isLoading}\n        />\n      </Tooltip>\n      <HostButton\n        disabled={isLoading}\n        onClick={handleClick}\n        icon={\n          hasTimer && (\n            <span\n              className={clsx(\n                'host-button-timer',\n                !isRunning &&\n                  getAnimationClass('flash', {\n                    speed: 'slow',\n                    infinite: true,\n                  })\n              )}\n            >\n              {timeLeft}\n            </span>\n          )\n        }\n      >\n        {children ?? <ButtonLabel round={round} />}\n      </HostButton>\n    </HostOnlyContainer>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ButtonProps } from 'antd';\n// Components\nimport { HostButton, HostOnlyContainer } from './index';\n\ntype VIPOnlyButtonProps = {\n  /**\n   * The click action\n   */\n  onClick: GenericFunction;\n  /**\n   * The button label\n   */\n  children: ReactNode;\n} & ButtonProps;\n\nexport function HostOnlyButton({ onClick, children, ...buttonProps }: VIPOnlyButtonProps) {\n  return (\n    <HostOnlyContainer>\n      <HostButton onClick={onClick} {...buttonProps}>\n        {children}\n      </HostButton>\n    </HostOnlyContainer>\n  );\n}\n","import { ReactNode, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport clsx from 'clsx';\nimport { useKeyPressEvent } from 'react-use';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n// Sass\nimport './PhaseAnnouncement.scss';\n\ntype PhaseAnnouncementBasicProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n  /**\n   * If component should be an overlay or a block\n   */\n  type?: 'block' | 'overlay';\n};\n\ntype PhaseAnnouncementBlock = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'block';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementOverlay = {\n  /**\n   * The phase announcement will be its own screen without overlaying any content\n   */\n  type: 'overlay';\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose?: GenericFunction;\n} & PhaseAnnouncementBasicProps;\n\ntype PhaseAnnouncementProps = PhaseAnnouncementBlock | PhaseAnnouncementOverlay;\n\n/**\n * Screen displayed before (or over) any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 3,\n  onClose = () => {},\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n  type = 'block',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar(type === 'overlay');\n  const durationPerRound = [15, 7, 5]?.[currentRound] ?? 4;\n  const [isActive, setActive] = useState(true);\n  const [isRemoved, setRemoved] = useState(false);\n\n  /**\n   * Deactivate component (triggering animation)\n   * Start timer to remove it from dom\n   * Perform the onClose function\n   */\n  const onContinue = () => {\n    setActive(false);\n    start();\n    onClose();\n  };\n\n  // Allow skip when pressing the space bar in a skippable announcement\n  useKeyPressEvent(' ', () => {\n    if (!unskippable) {\n      onContinue();\n    }\n  });\n\n  /**\n   * When the overlay is dismissed the component needs to disappear so the screen\n   * components can be clickable again\n   */\n  const { start } = useCountdown({\n    autoStart: false,\n    duration: 1,\n    onExpire: () => setRemoved(true),\n  });\n\n  if (isRemoved) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className={clsx(\n        type === 'overlay' && 'phase-announcement-overlay',\n        !isActive && getAnimationClass('fadeOut', { speed: 'faster' })\n      )}\n    >\n      <div className=\"phase-announcement-wrapper\">\n        <div\n          className={clsx(\n            'phase-announcement',\n            isActive ? getAnimationClass(animationType, { speed: 'fast' }) : getAnimationClass('bounceOut'),\n            className\n          )}\n        >\n          <Title>{title}</Title>\n\n          <span className=\"phase-announcement__icon\">{icon}</span>\n\n          {children}\n\n          {withoutTimer ? (\n            <Button type=\"primary\" onClick={onContinue} autoFocus>\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </Button>\n          ) : (\n            <TimedButton\n              duration={duration || durationPerRound}\n              type=\"text\"\n              onClick={onContinue}\n              onExpire={onContinue}\n              disabled={unskippable}\n              autoFocus\n            >\n              <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n            </TimedButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type }: { type: string; index?: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        backgroundPositionX: '0',\n      }}\n    ></div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Divider, Modal } from 'antd';\n// API & Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Services\nimport { signInAsGuest } from 'services/firebase';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { SignIn, SignInWithGoogle } from 'components/auth/SignIn';\nimport { SignUp } from 'components/auth/SignUp';\n\ntype StepJoinProps = {\n  info: GameInfo;\n  setStep: GenericFunction;\n};\n\nexport function StepJoin({ info, setStep }: StepJoinProps) {\n  const { isAuthenticated } = useCurrentUserContext();\n\n  const { isLoading, mutate, isError, error } = useMutation({\n    mutationKey: ['sign-in-anon'],\n    mutationFn: async () => signInAsGuest,\n    onSuccess: () => setStep(1),\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setStep(1);\n    }\n  }, [isAuthenticated, setStep]);\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Bem-vindo!\" en=\"Welcome\" />\n      </h1>\n\n      {Boolean(info?.summary) && (\n        <p className=\"lobby-step__summary\">\n          <DualTranslate>{info.summary}</DualTranslate>\n        </p>\n      )}\n\n      <SignInWithGoogle onSuccess={() => setStep(1)} block size=\"middle\" />\n\n      {isError && <Alert message=\"Error\" description={JSON.stringify(error)} type=\"error\" showIcon />}\n\n      <Divider>\n        <Translate pt=\"ou\" en=\"or\" />\n      </Divider>\n\n      <Button type=\"primary\" block disabled={isAuthenticated} onClick={() => mutate()} loading={isLoading}>\n        <Translate pt=\"Entrar como visitante\" en=\"Join as a Guest\" />\n      </Button>\n    </>\n  );\n}\n\ntype LoginButtonProps = {\n  disabled: boolean;\n  setStep: GenericFunction;\n};\n\nexport function LoginButton({ disabled, setStep }: LoginButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignIn onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Fazer Login\" en=\"Login\" />\n      </Button>\n    </div>\n  );\n}\n\ntype SignUpButtonProps = {\n  disabled: boolean;\n  setStep: GenericFunction;\n};\n\nexport function SignUpButton({ disabled, setStep }: SignUpButtonProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        title={<Translate pt=\"Cadastro\" en=\"Sign Up Form\" />}\n        cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        onCancel={() => setOpen(false)}\n        okButtonProps={{\n          style: { display: 'none' },\n        }}\n      >\n        <SignUp onSuccess={() => setStep(1)} />\n      </Modal>\n      <Button type=\"link\" block disabled={disabled} onClick={() => setOpen(true)}>\n        <Translate pt=\"Cadastrar\" en=\"Sign up\" />\n      </Button>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Alert } from 'antd';\n// Components\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Translate } from 'components/language';\n\ntype LobbyStepProps = {\n  info: GameInfo;\n  children: ReactNode;\n  isLocked: boolean;\n};\n\nexport function LobbyStep({ info, children, isLocked }: LobbyStepProps) {\n  return (\n    <div className=\"lobby-step\">\n      <div className=\"lobby-step__card\">\n        <GameBanner title={info?.title} gameName={info?.gameName} className=\"lobby-step__banner\" />\n        <div className=\"lobby-step__content\">\n          {Boolean(isLocked) ? (\n            <>\n              <h1 className=\"lobby-step__title\">\n                <Translate pt=\"Esse jogo está trancado\" en=\"This session is locked\" />\n              </h1>\n\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"O jogo já foi iniciado e novos jogadores não podem ser adicionados\"\n                    en=\"The game has started and new players cannot be added at this time\"\n                  />\n                }\n              />\n            </>\n          ) : (\n            children\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Sam,Tim,Una,Vic,Will,Xavier,Yara,Zoe'.split(\n    ','\n  );\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  let tries = 0;\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem) || tries < 50) {\n    randomItem = getRandomItem(source);\n    tries += 1;\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties: PlainObject | GenericFunction = {}\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length === quantity) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name: `${name}`,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...(typeof properties === 'function' ? properties(i) : properties),\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","import { useCallback, useMemo } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n// Components\nimport { DualTranslate } from 'components/language';\n\ntype AvatarSelectionProps = {\n  players: GamePlayers;\n  selectedAvatar: string;\n  setSelectedAvatar: GenericFunction;\n  userId: PlayerId;\n};\n\nexport function AvatarSelection({\n  players,\n  setSelectedAvatar,\n  selectedAvatar,\n  userId,\n}: AvatarSelectionProps) {\n  // Calculate available avatars and monitor if user chose a non-available one\n  const availableAvatars = useMemo(() => {\n    const usedAvatars = Object.values(players).reduce((acc: BooleanDictionary, { avatarId, id }) => {\n      if (id !== userId) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (!newAvailableAvatars.includes(selectedAvatar)) {\n      setSelectedAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    return newAvailableAvatars;\n  }, [players]); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(selectedAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setSelectedAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, selectedAvatar, setSelectedAvatar]);\n\n  return (\n    <>\n      <div className=\"lobby-step__avatar-selection\">\n        <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretLeftOutlined />\n        </Button>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${selectedAvatar}`}></use>\n          <title>\n            <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n          </title>\n        </svg>\n        <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-step__avatar-nav-button\">\n          <CaretRightOutlined />\n        </Button>\n      </div>\n      <div className=\"lobby-step__description\">\n        <small>\n          <DualTranslate>{AVATARS[selectedAvatar].description}</DualTranslate>\n        </small>\n      </div>\n    </>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Space, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { Translate } from 'components/language';\n\ntype SettingsProps = {\n  hasImages: boolean;\n};\nexport function Settings({ hasImages }: SettingsProps) {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  useEffectOnce(() => {\n    setBlurEnabled(getLocalStorage('blurEnabled'));\n    setVolume(getLocalStorage('volume'));\n  });\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <Space className=\"lobby-step__settings\" split={<Divider type=\"vertical\" />}>\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Alguns jogos tocam sons ou falas. Você pode mudar essa configuração depois.\"\n                en=\"A few games will play sound effects or speech. You may change this setting later\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"lobby-step__settings-entry\">\n        <div className=\"lobby-step__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia. Você pode mudar essa configuração depois\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia. You may change this setting later\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n          disabled={!hasImages}\n        />\n      </div>\n    </Space>\n  );\n}\n","// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { DualTranslate, Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\n\ntype UsualAvatarsSelectionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarsIds: string[];\n};\n\nexport function UsualAvatarsSelection({ avatarsIds, setSelectedAvatar }: UsualAvatarsSelectionProps) {\n  return (\n    <div className=\"lobby-usual-avatar-selection\">\n      <div className=\"lobby-usual-avatar-selection__title\">\n        <small>\n          <Translate pt=\"Seus avatars mais usados\" en=\"Your favorite avatars\" />\n        </small>\n      </div>\n      <ul className=\"lobby-usual-avatar-selection__list\">\n        {avatarsIds.map((avatarId) => (\n          <UsualAvatarOption key={avatarId} setSelectedAvatar={setSelectedAvatar} avatarId={avatarId} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\ntype UsualAvatarOptionProps = {\n  setSelectedAvatar: GenericFunction;\n  avatarId: string;\n};\n\nexport function UsualAvatarOption({ avatarId, setSelectedAvatar }: UsualAvatarOptionProps) {\n  return (\n    <TransparentButton onClick={() => setSelectedAvatar(avatarId)}>\n      <svg viewBox=\"0 0 100 100\" className=\"lobby-usual-avatar-selection__avatar\">\n        <use href={avatars + `#avatar-${avatarId}`}></use>\n        <title>\n          <DualTranslate>{AVATARS[avatarId].description}</DualTranslate>\n        </title>\n      </svg>\n    </TransparentButton>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, AutoComplete, Button } from 'antd';\n// API & Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useAddPlayer } from 'hooks/useAddPlayer';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarSelection } from './AvatarSelection';\nimport { Settings } from './Settings';\nimport { UsualAvatarsSelection } from './UsualAvatarsSelection';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype StepInfoProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  setStep: GenericFunction;\n};\n\nexport function StepInfo({ info, players, setStep }: StepInfoProps) {\n  const { currentUser, isGuest } = useCurrentUserContext();\n  const [selectedAvatar, setSelectedAvatar] = useState(\n    currentUser?.avatars?.[0] ?? getRandomItem(AVAILABLE_AVATAR_IDS)\n  );\n\n  const [name, setName] = useState((currentUser?.names ?? []).at(-1) ?? '');\n  const [getLocalStorage] = useLocalStorage();\n\n  // Load username and avatar from localStorage if any\n  useEffect(() => {\n    const lsAvatarId = getLocalStorage('avatarId');\n    const lsUsername = getLocalStorage('username');\n\n    if (isGuest) {\n      if (lsAvatarId) {\n        setSelectedAvatar(lsAvatarId);\n      }\n\n      if (lsUsername) {\n        setName(lsUsername ?? '');\n      }\n    }\n  }, [isGuest]); // eslint-disable-line\n\n  const { isLoading, mutate } = useAddPlayer(name, selectedAvatar, isGuest, () => setStep(2));\n\n  const hasPlayedBefore = Boolean(currentUser.games?.[info.gameName]);\n\n  const nameOptions = (currentUser?.names ?? []).map((name) => ({ value: name }));\n\n  return (\n    <>\n      <h1 className=\"lobby-step__title\">\n        <Translate pt=\"Adicione seus dados\" en=\"Add your info\" />\n      </h1>\n\n      {hasPlayedBefore && (\n        <Alert\n          type=\"info\"\n          message={<Translate pt=\"Você jogou esse jogo anteriormente\" en=\"You played this game before\" />}\n          className=\"margin\"\n        />\n      )}\n\n      <AvatarSelection\n        players={players}\n        setSelectedAvatar={setSelectedAvatar}\n        selectedAvatar={selectedAvatar}\n        userId={currentUser.id}\n      />\n\n      {currentUser && currentUser.avatars.length > 0 && (\n        <UsualAvatarsSelection avatarsIds={currentUser.avatars} setSelectedAvatar={setSelectedAvatar} />\n      )}\n\n      <AutoComplete\n        className=\"lobby-step__name-input\"\n        options={nameOptions}\n        onChange={(value) => setName(value.trim())}\n        onSelect={(value) => setName(value.trim())}\n        placeholder=\"input here\"\n        maxLength={10}\n        value={name || randomName}\n      />\n\n      <Settings hasImages={info.tags.includes('images')} />\n\n      <Button\n        block\n        loading={isLoading}\n        disabled={!name || !selectedAvatar}\n        type=\"primary\"\n        onClick={() => mutate()}\n      >\n        <Translate pt=\"Entrar\" en=\"Enter\" />\n      </Button>\n    </>\n  );\n}\n","import { App } from 'antd';\nimport { useMutation } from '@tanstack/react-query';\n// Services\nimport localStorage from 'services/localStorage';\nimport { GAME_API, GAME_API_ACTIONS } from 'services/adapters';\n// Hooks\nimport { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\nimport { useLanguage } from './useLanguage';\n// Utils\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n\nexport function useAddPlayer(name: string, avatarId: string, isGuest: boolean, onSuccess: GenericFunction) {\n  const { gameId, gameName } = useGameMeta();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume] = useGlobalState('volume');\n  const { language, translate } = useLanguage();\n  const { notification } = App.useApp();\n\n  const query = useMutation({\n    mutationKey: ['add-player'],\n    mutationFn: async () =>\n      await GAME_API.run({\n        action: GAME_API_ACTIONS.ADD_PLAYER,\n        gameId,\n        gameName,\n        playerName: name,\n        playerAvatarId: avatarId,\n        isGuest,\n      }),\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n      setUserId(data.id);\n      setUsername(data.name);\n      setUserAvatarId(data.avatarId);\n\n      localStorage.set({\n        username: data.name,\n        avatarId: data.avatarId,\n        gameId,\n      });\n\n      if (volume) {\n        speak(getRandomWelcomeMessage(name ?? translate('vei', 'babe')), language, volume);\n      }\n\n      onSuccess();\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n  });\n\n  return query;\n}\n","import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\n// Ant Design Resources\nimport { App, Space, Typography } from 'antd';\n// API & Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useGameMeta } from 'hooks/useGameMeta';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Services\nimport { ADMIN_API, ADMIN_API_ACTIONS } from 'services/adapters';\n// Components\nimport { Translate } from 'components/language';\nimport { HostButton, HostOnlyContainer } from 'components/host';\n\ntype StepWaitingProps = {\n  players: GamePlayers;\n};\n\nexport function StepWaiting({ players }: StepWaitingProps) {\n  const { message, notification } = App.useApp();\n  const { gameId, gameName } = useGameMeta();\n  const { translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n\n  const gameMeta = useGameMeta();\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const { mutate, isLoading: isLocking } = useMutation({\n    mutationKey: ['lock-game'],\n    mutationFn: async () => {\n      setLoader('lock-game', true);\n      return await ADMIN_API.run({\n        action: ADMIN_API_ACTIONS.LOCK_GAME,\n        gameId,\n        gameName,\n      });\n    },\n    onSuccess: (response) => {\n      const data = response.data as PlainObject;\n\n      if (data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    },\n    onSettled: () => {\n      setLoader('lock-game', false);\n    },\n  });\n\n  useEffect(() => {\n    setLoader('lock-game', isLocking);\n\n    return () => {\n      setLoader('lock-game', false);\n    };\n  }, [isLocking]); // eslint-disable-line\n\n  const numPlayers = Object.keys(players).length;\n\n  return (\n    <>\n      <h1 className={clsx('lobby-step__title', getAnimationClass('tada'))}>\n        {username || translate('Fulano', 'Unknown')}\n      </h1>\n\n      <Space className=\"space-container\">\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n      </Space>\n\n      <h3 className=\"lobby-heading\">\n        <Translate pt=\"Aguarde os outros jogadores entrarem.\" en=\"Please, wait while other players join...\" />\n      </h3>\n      <HostOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n        <Typography.Text className=\"center padding\">\n          <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n        </Typography.Text>\n        <HostButton\n          onClick={() => mutate()}\n          disabled={isLoading || numPlayers < gameMeta.min}\n          loading={isLoading}\n          block\n        >\n          <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n        </HostButton>\n      </HostOnlyContainer>\n    </>\n  );\n}\n","import { orderBy } from 'lodash';\n// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useEffect } from 'react';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { resetGlobalState, useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { StepJoin } from './lobby/StepJoin';\nimport { LobbyStep } from './lobby/LobbyStep';\nimport { StepInfo } from './lobby/StepInfo';\nimport { StepWaiting } from './lobby/StepWaiting';\n// Sass\nimport './PhaseLobby.scss';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\ntype SplitPlayers = {\n  left: GamePlayer[];\n  right: GamePlayer[];\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const { step, setStep } = useStep();\n  const { currentUser, isAuthenticated } = useCurrentUserContext();\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [getLocalStorage] = useLocalStorage();\n\n  const player = players?.[currentUser.id];\n\n  useEffect(() => {\n    if (player) {\n      setStep(2);\n      setUserId(player.id);\n      setUsername(player.name);\n      setUserAvatarId(player.avatarId);\n    } else if (isAuthenticated) {\n      setStep(1);\n      resetGlobalState();\n    } else {\n      setStep(0);\n      setUsername(getLocalStorage('username'));\n      setUserAvatarId(getLocalStorage('avatarId'));\n    }\n  }, [\n    player,\n    currentUser.id,\n    setStep,\n    setUserId,\n    setUsername,\n    setUserAvatarId,\n    isAuthenticated,\n    getLocalStorage,\n  ]);\n\n  const { left, right } = orderBy(Object.values(players), 'updatedAt').reduce(\n    (acc: SplitPlayers, player, index) => {\n      if (index % 2 === 0) {\n        acc.left.push(player);\n      } else {\n        acc.right.push(player);\n      }\n\n      return acc;\n    },\n    {\n      left: [],\n      right: [],\n    }\n  );\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby\">\n        <div className=\"lobby__seating-area-left\">\n          {left.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                left: `${60 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"lobby__seating-area-right\">\n          {right.map((player, index) => (\n            <div\n              className=\"lobby__seat\"\n              key={player.name}\n              style={{\n                transform: `translate(${100 - 10 * index}%`,\n                top: `${100 - 10 * index}%`,\n                right: `${80 - 30 * (index % 3)}%`,\n              }}\n            >\n              <AvatarEntry player={player} animate />\n            </div>\n          ))}\n        </div>\n\n        <LobbyStep info={info} isLocked={meta.isLocked}>\n          {step === 0 && <StepJoin info={info} setStep={setStep} />}\n          {step === 1 && <StepInfo info={info} players={players} setStep={setStep} />}\n          {step === 2 && <StepWaiting players={players} />}\n        </LobbyStep>\n      </div>\n\n      <AdminMenuDrawer\n        state={{ phase: 'LOBBY', round: { current: 0, total: 0, forceLastRound: false }, players: {} }}\n        players={players}\n      />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","import { Translate } from 'components/language';\nimport { HostNextPhaseButton } from 'components/host';\n\ntype AutoNextPhaseProps = {\n  players: GamePlayers;\n};\n\n/**\n * Add this component to a game if you want the game to automatically go to the next phase when all players are ready.\n */\nexport function AutoNextPhase({ players }: AutoNextPhaseProps) {\n  const isEverybodyReady = Object.values(players).every((player) => player.ready);\n\n  if (!isEverybodyReady) return <></>;\n\n  return (\n    <HostNextPhaseButton round={{ current: -1, total: 10, forceLastRound: false }} autoTriggerTime={15}>\n      <Translate pt=\"Começar o jogo\" en=\"Start the game\" />\n    </HostNextPhaseButton>\n  );\n}\n","import { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n// Ant Design Resources\nimport { Button, Layout, Space } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API, GAME_API_ACTIONS } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGameId } from 'hooks/useGameId';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { RulesCarousel } from '../rules';\nimport { AutoNextPhase } from './rules/AutoNextPhase';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  useEffect(() => {\n    setIsAdminEnabled(true);\n  }, []); // eslint-disable-line\n\n  const gameId = useGameId();\n  // TODO: check if this is working\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: ['meta', gameId] });\n  }, [gameId]); // eslint-disable-line\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.run,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.run,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.run,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({ action: GAME_API_ACTIONS.MAKE_PLAYER_READY }), [], 2);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Title>\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Title>\n\n      <RulesCarousel\n        info={info}\n        className=\"phase-rules__carousel\"\n        ruleClassName=\"phase-rules__rule\"\n        actionsClassName=\"phase-rules__actions\"\n      />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={user.isReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReady({ action: GAME_API_ACTIONS.MAKE_PLAYER_READY })}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={user.isReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyIDK({ action: GAME_API_ACTIONS.MAKE_PLAYER_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={user.isReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || user.isReady}\n          onClick={() => onBeReadyQue({ action: GAME_API_ACTIONS.MAKE_PLAYER_READY })}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n\n      <AutoNextPhase players={players} />\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnimatedGearIcon } from 'icons/AnimatedGearIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up...\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { Fragment, ReactNode, useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\nimport { reorder } from './reorder';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  /**\n   * Game players\n   */\n  players: GamePlayers;\n  /**\n   * The order array\n   */\n  order: PlayerId[];\n  /**\n   * The active player who should be highlighted\n   */\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom title\n   */\n  title?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Reorder turn order so it starts with given player\n   */\n  reorderByUser?: PlayerId;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = useMemo(\n    () => (Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order),\n    [reorderByUser, order]\n  );\n\n  return (\n    <div className={clsx('turn-order', className)}>\n      <header className=\"turn-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ol className=\"turn-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <Fragment key={`turn-order-player-${playerId}`}>\n              <span\n                className={clsx('turn-order__player', isActive && 'turn-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span className=\"turn-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </Fragment>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { WaitingRoomIcon } from 'icons/WaitingRoomIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n// Sass\nimport './WaitingRoom.scss';\n\ntype WaitingRoomProps = {\n  /**\n   * The game players\n   */\n  players: GamePlayers;\n  /**\n   * Replacement title of the waiting room\n   */\n  title?: ReactNode;\n  /**\n   * Replacement instruction for the waiting room\n   */\n  instruction?: ReactNode;\n  /**\n   * Additional content of the waiting room\n   */\n  children?: ReactNode;\n  /**\n   * Icon the replaces the default Waiting Room icon\n   */\n  icon?: ReactNode;\n};\n\nexport function WaitingRoom({ players, title, instruction, children, icon }: WaitingRoomProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <div className=\"waiting-room\">\n      <Title>\n        <Translate pt=\"Pronto!\" en=\"Done!\" custom={title} />\n      </Title>\n      {icon ?? <WaitingRoomIcon style={{ width: '6rem' }} />}\n      <div className=\"waiting-room__content\">\n        <Instruction>\n          {Boolean(instruction) ? (\n            instruction\n          ) : (\n            <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n          )}\n        </Instruction>\n        {children}\n      </div>\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","export function reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Hooks\nimport { useFirestoreDocument } from './useFirestoreDocument';\n// Utils\nimport { print } from 'utils/helpers';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const { notification } = App.useApp();\n  const docPath = `games/${gameName}/${gameId}/state`;\n\n  const { isLoading, isRefetching, isError, error, data } = useFirestoreDocument(docPath, true);\n\n  if (isError) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  const state = data ?? {};\n\n  useEffect(() => {\n    if (isLoading || isRefetching) {\n      console.count('Refreshing state...');\n    } else {\n      print({ state });\n    }\n  }, [isLoading, isRefetching]); // eslint-disable-line\n\n  return state as GameState;\n}\n","import { useEffect } from 'react';\nimport { UseQueryResult, useQuery } from '@tanstack/react-query';\nimport { doc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { firestore } from 'services/firebase';\n\n/**\n * React hook that retrieves a Firestore document and provides the result as a query object.\n * @param docPath - The path to the Firestore document.\n * @param [subscribe=false] - Whether to subscribe to real-time updates on the document.\n * @returns A React Query object containing the document data.\n */\nexport function useFirestoreDocument(docPath: string, subscribe = false): UseQueryResult {\n  const docRef = doc(firestore, docPath);\n  const query = useQuery({\n    queryKey: ['firestore', 'doc', docPath],\n    queryFn: async () => {\n      const snapshot = await getDoc(docRef);\n      return snapshot.data();\n    },\n  });\n\n  useEffect(() => {\n    if (subscribe) {\n      const unsubscribe = onSnapshot(docRef, () => {\n        query.refetch();\n      });\n\n      return () => unsubscribe();\n    }\n  }, [subscribe]); // eslint-disable-line\n\n  return query;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n// Ant Design Resource\nimport { Alert, App, Button, Checkbox, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { message } = App.useApp();\n  const { blurCard } = useBlurCards();\n  const baseUrl = useTDBaseUrl('tdi-data');\n\n  const { isLoading, isError, data } = useQuery({\n    queryKey: ['credo'],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/credo.json`);\n      return await response.json();\n    },\n  });\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const { isAdmin } = useCurrentUserContext();\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge, Tooltip } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n};\n\nexport function PlayersStatusBar({ players }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <div className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Tooltip title={player.name} placement=\"left\" trigger=\"hover\">\n                <Badge dot color={player.ready ? 'green' : 'gray'}>\n                  <Avatar\n                    id={player.avatarId}\n                    alt={player.name}\n                    size=\"small\"\n                    className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                  />\n                </Badge>\n              </Tooltip>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useToggle } from 'react-use';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Avatar as AntAvatar, Badge, Button, Divider, Drawer, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from 'components/players/PlayersStatusBar';\nimport { GameBanner } from 'components/general/GameBanner';\nimport { Avatar } from 'components/avatars';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const { isAdmin, isAuthenticated, isGuest } = useCurrentUserContext();\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer-container\">\n        <button className=\"game-info-drawer-button\" onClick={toggleDrawer}>\n          <span className=\"game-info-drawer-button__game-title\">\n            {info.title?.[language] ?? '?'}\n            <DebugOnly devOnly>({players?.[userId]?.name})</DebugOnly>\n          </span>\n          <AntAvatar icon={<SettingOutlined />} size=\"small\" />\n          <div className=\"game-info-drawer-button__player-status-bar\">\n            <PlayersStatusBar players={players} />\n          </div>\n        </button>\n\n        <Drawer\n          title={\n            <GameBanner\n              title={info?.title}\n              gameName={info.gameName}\n              preview={false}\n              className=\"round-corners\"\n            />\n          }\n          placement=\"right\"\n          closable={false}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          {isAuthenticated && !isGuest && (\n            <p>\n              <Badge size=\"default\" dot color=\"green\">\n                <Avatar id={players?.[userId]?.avatarId} shape=\"square\" size=\"small\" />\n              </Badge>{' '}\n              <Translate pt=\"Você está logado!\" en=\"You are logged in!\" />\n            </p>\n          )}\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Image, Modal } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport GAME_LIST from 'utils/info';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\n\ntype RedirectSessionProps = {\n  state: GameState;\n};\n\nexport function RedirectSession({ state }: RedirectSessionProps) {\n  const { language } = useLanguage();\n  const navigate = useNavigate();\n\n  const [open, setOpen] = useState<boolean | null>(null);\n\n  const hideModal = () => {\n    setOpen(false);\n  };\n\n  const redirect = state.redirect;\n\n  if (redirect) {\n    const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n    const currentMilliseconds = Date.now();\n\n    if (redirect.redirectAt - currentMilliseconds > twoHoursInMilliseconds) {\n      return <></>;\n    }\n\n    const gameInfo = GAME_LIST[redirect.gameName];\n    return (\n      <>\n        <Modal\n          title={\n            <Translate\n              pt=\"Você está convidado para uma nova partida\"\n              en=\"You've been invited to a new session\"\n            />\n          }\n          open={open ?? true}\n          onCancel={hideModal}\n          onOk={() => {\n            navigate(`/${redirect.gameId}`);\n          }}\n          okText={<Translate pt=\"Quero participar!\" en=\"Take me there!\" />}\n          cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n        >\n          <Image\n            alt={gameInfo.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            className=\"round-corners\"\n          />\n          <Title>{redirect.gameId}</Title>\n        </Modal>\n      </>\n    );\n  }\n\n  return <></>;\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\nimport { useGameMeta } from 'hooks/useGameMeta';\n// Utils\nimport GAME_LIST from 'utils/info';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { RedirectSession } from './RedirectSession';\n\ntype SessionProps = {\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameCollection, getActiveComponent }: SessionProps) {\n  const gameMeta = useGameMeta();\n  const { language } = useLanguage();\n  const state = useGameState(gameMeta.gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [, setLanguage] = useGlobalState('language');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n  const players = state.players ?? {};\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  // Update session language to match the game\n  useEffect(() => {\n    if (language !== gameMeta.language) {\n      setLanguage(gameMeta.language);\n    }\n  }, [gameMeta.language]); // eslint-disable-line\n\n  if (!userId || !players[userId]) {\n    return (\n      <>\n        <RedirectSession state={state} />\n        <PhaseLobby players={players} info={info} meta={gameMeta} />;\n      </>\n    );\n  }\n\n  const ActiveComponent: any = getActiveComponent(state);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <RedirectSession state={state} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { App } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const { notification } = App.useApp();\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate, notification]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * Overlay PhaseAnnouncement\n   */\n  announcement?: JSX.Element;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Flag indicating if the step should be full width\n   */\n  fullWidth?: boolean;\n  /**\n   * Flag indicating if the step should be full height\n   */\n  fullHeight?: boolean;\n};\n\nexport function Step({\n  children,\n  announcement,\n  fullWidth = false,\n  fullHeight = false,\n  className = '',\n}: StepProps) {\n  return (\n    <div\n      className={clsx('step', fullWidth && 'step--full-width', fullHeight && 'step--full-height', className)}\n    >\n      {announcement}\n      {children}\n    </div>\n  );\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { print } from 'utils/helpers';\nimport { ReactNode } from 'react';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[] | JSX.Element;\n  /**\n   * The current step\n   */\n  step: number;\n  /*\n   * The conditions to render each step, otherwise the waiting room is rendered\n   */\n  conditions?: boolean[];\n  /**\n   * The players dictionary\n   */\n  players?: GamePlayers;\n  /**\n   * Waiting room customizations\n   */\n  waitingRoom?: {\n    /**\n     * The type of waiting room (for players or server)\n     */\n    type?: 'SERVER' | 'PLAYERS';\n    /**\n     * The instruction to replace the default one\n     */\n    instruction?: ReactNode;\n    /**\n     * Additional content to be rendered\n     */\n    content?: ReactNode;\n  };\n};\n\nexport function StepSwitcher({ children, step, conditions, players, waitingRoom = {} }: StepSwitcherProps) {\n  if (!players) print('SetSwitcher is being used without `players`, please add it.', 'warn');\n\n  const content = Array.isArray(children) ? children : [children];\n\n  if (players && step >= content.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoom.instruction ?? getWaitingRoomInstruction(waitingRoom.type ?? 'PLAYERS')}\n      >\n        {waitingRoom.content}\n      </WaitingRoom>\n    );\n  }\n\n  if (!content[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return content[step];\n  }\n\n  return <div></div>;\n}\n","import { App } from 'antd';\nimport { HttpsCallable } from 'firebase/functions';\nimport { useMutation } from '@tanstack/react-query';\n// Hooks\nimport { useLoading } from './useLoading';\nimport { useGlobalState } from './useGlobalState';\nimport { useGameMeta } from './useGameMeta';\n\nconst debounce = (func: any, timeout = 1000): ((...args: any[]) => any) => {\n  let timer: NodeJS.Timeout;\n  return (...args: any[]) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport type UseAPICallArgs = {\n  apiFunction: HttpsCallable<unknown, unknown>;\n  actionName: string;\n  onBeforeCall?: (...args: any) => any;\n  onAfterCall?: (...args: any) => any;\n  onError?: (...args: any) => any;\n  onSuccess?: (...args: any) => any;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\n/**\n * Wrapper around common firebase http call\n * @param data\n * @param data.apiFunction\n * @param [data.onBeforeCall] what to run before the api call\n * @param [data.onAfterCall] what to run after the api call\n * @param [data.onError] what to run if an error occurs\n * @param [data.onSuccess] what to run if success occurs\n * @param [data.actionName] the name used in the loader hook\n * @param [data.successMessage]\n * @param [data.errorMessage]\n * @returns\n */\n\n/**\n * Wrapper around common firebase http call\n * @param options\n * @returns\n */\nexport function useAPICall({\n  apiFunction,\n  actionName = 'api-action',\n  onBeforeCall = () => {},\n  onAfterCall = () => {},\n  onError = () => {},\n  onSuccess = () => {},\n  successMessage = 'API call was successful',\n  errorMessage = 'API call has failed',\n}: UseAPICallArgs): (...args: any[]) => any {\n  const { message, notification } = App.useApp();\n  const { setLoader } = useLoading();\n  const { gameId, gameName } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  const query = useMutation({\n    mutationKey: [actionName],\n    mutationFn: (payload: {}) =>\n      apiFunction({\n        gameId,\n        gameName,\n        playerId: userId,\n        ...payload,\n      }),\n    onMutate: async () => {\n      setLoader(actionName, true);\n      await onBeforeCall();\n    },\n    onSuccess: async () => {\n      await onSuccess();\n      message.success(successMessage);\n    },\n    onError: (e: any) => {\n      notification.error({\n        message: errorMessage,\n        description: JSON.stringify(e?.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      onError();\n    },\n    onSettled: async () => {\n      await onAfterCall();\n      setLoader(actionName, false);\n    },\n  });\n\n  return debounce(query.mutate);\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useGameMeta } from './useGameMeta';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Determine is user is the Host by checking if they were the one who created the game.\n * @returns Returns true if the user is the Host, false otherwise\n */\nexport function useHost(): boolean {\n  const { createdBy } = useGameMeta();\n  const [userId] = useGlobalState('userId');\n\n  return createdBy === userId;\n}\n","import { useState } from 'react';\n// Hooks\nimport { useCountdown } from './useCountdown';\nimport { useGlobalState } from './useGlobalState';\nimport { useHost } from './useHost';\n// Utils\nimport { VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { USE_MOCKS } from 'dev-configs';\n\n/**\n * Runs mock function tht performs whatever after 3-6 seconds\n * @param whatToDo\n * @param requirements\n * @param delay (default a random value between 3-6 seconds)\n * @returns\n */\nexport function useMock(whatToDo: GenericFunction, requirements: any[] = [], delay?: number) {\n  const isVIP = useHost();\n  const [userId] = useGlobalState('userId');\n  const [runOnce, setRunOnce] = useState(false);\n  const duration = delay ?? getRandomItem([3, 4, 4, 5, 6]);\n\n  return useCountdown({\n    duration,\n    onExpire: () => {\n      if (\n        !runOnce &&\n        isDevEnv &&\n        USE_MOCKS &&\n        !isVIP &&\n        userId !== VIEWER_ID &&\n        requirements.every(Boolean)\n      ) {\n        whatToDo();\n        setRunOnce(true);\n      }\n    },\n    disabled: runOnce,\n  });\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","type TDUrlKind = 'tdi' | 'tdr' | 'tdi-data';\n\n/**\n * Returns the URL for the given kind of resource\n * @param kind the kind of resource\n * @returns the URL for the given kind of resource\n */\nexport function useTDBaseUrl(kind: TDUrlKind): string {\n  const base = process.env.REACT_APP_TD_BASE_URL;\n\n  switch (kind) {\n    case 'tdi':\n      return `${base}/${process.env.REACT_APP_TDI_IMAGES}`;\n    case 'tdr':\n      return `${base}/${process.env.REACT_APP_TD_RESOURCES}`;\n    case 'tdi-data':\n      return `${base}/${process.env.REACT_APP_TDI_DATA}`;\n    default:\n      return '';\n  }\n}\n","import { useEffect } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\nexport function useTemporarilyHidePlayersBar(ignore = false) {\n  const [, setShowPlayersBar] = useGlobalState('showPlayersBar');\n\n  useEffect(() => {\n    setShowPlayersBar(ignore ? true : false);\n    return () => {\n      setShowPlayersBar(true);\n    };\n  }, []); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\nconst THREE_MINUTES = 3 * 60 * 1000;\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: GamePlayers, state?: GameState): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useGlobalState('user');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId && players?.[userId]) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId, setUser]);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && user?.ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(user?.ready ?? true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && user?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, user?.ready, user?.updatedAt, state?.updatedAt]);\n\n  return {\n    ...user,\n    isReady,\n    online: user.updatedAt ? Date.now() - user.updatedAt < THREE_MINUTES : false,\n  };\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n    WAIT: 'WAIT',\n  },\n  ADEDANHX: {\n    ANSWERING: 'ANSWERING',\n    EVALUATION: 'EVALUATION',\n    RESULTS: 'RESULTS',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  COMUNICACAO_ALIENIGENA: {\n    ALIEN_SELECTION: 'ALIEN_SELECTION',\n    ALIEN_SEEDING: 'ALIEN_SEEDING',\n    HUMAN_ASK: 'HUMAN_ASK',\n    ALIEN_ANSWER: 'ALIEN_ANSWER',\n    ALIEN_REQUEST: 'ALIEN_REQUEST',\n    OFFERINGS: 'OFFERINGS',\n    REVEAL: 'REVEAL',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    WORDS_SELECTION: 'WORDS_SELECTION',\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  DUETOS: {\n    PAIRING: 'PAIRING',\n    RESULTS: 'RESULTS',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    ORDERING: 'ORDERING',\n    RESULTS: 'RESULTS',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LABIRINTO_SECRETO: {\n    MAP_BUILDING: 'MAP_BUILDING',\n    PATH_FOLLOWING: 'PATH_FOLLOWING',\n    RESULTS: 'RESULTS',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MEGAMIX: {\n    SEEDING: 'SEEDING',\n    TRACK: 'TRACK',\n    RESULT: 'RESULT',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAO_SOU_ROBO: {\n    CARD_SELECTION: 'CARD_SELECTION',\n    ARE_YOU_A_ROBOT: 'ARE_YOU_A_ROBOT',\n    RESULTS: 'RESULTS',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    CHARACTER_FILTERING: 'CHARACTER_FILTERING',\n    CHARACTER_DESCRIPTION: 'CHARACTER_DESCRIPTION',\n    GUESSING: 'GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TA_NA_CARA: {\n    PROMPT: 'PROMPT',\n    ANSWERING: 'ANSWERING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TESTE_DE_ELENCO: {\n    MOVIE_GENRE_SELECTION: 'MOVIE_GENRE_SELECTION',\n    ACTOR_SELECTION: 'ACTOR_SELECTION',\n    RESULT: 'RESULT',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n    VERIFY_GUESS: 'VERIFY_GUESS',\n    RESULT: 'RESULT',\n  },\n  VAMOS_AO_CINEMA: {\n    MOVIE_SELECTION: 'MOVIE_SELECTION',\n    MOVIE_ELIMINATION: 'MOVIE_ELIMINATION',\n    REVEAL: 'REVEAL',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  VINGATIVOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(\n  text: DualLanguageValue,\n  language: Language,\n  volume: number,\n  onEnd: GenericFunction = () => {}\n): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  utterance.addEventListener('end', onEnd);\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n"],"names":["AdminPerformActionButton","label","props","icon","type","danger","className","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","message","App","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","error","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","isAdmin","useCurrentUserContext","useGlobalState","usingFirestoreEmulator","isAdminEnabled","visible","setVisible","meta","useGameMeta","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","phase","position","pt","en","onClick","buttonProps","placement","closable","open","onConfirm","round","forceLastRound","target","href","getFirebaseUrl","Boolean","gameName","gameId","SignIn","onSuccess","view","setView","src","logo","preview","checked","SignInWithGoogle","SignInWithEmail","useMutation","mutationFn","signInWithGoogle","mutate","isError","direction","align","classNames","item","description","showIcon","size","loading","block","translate","useLanguage","showForgotPassword","setShowForgotPassword","signIn","getFieldValue","labelCol","span","wrapperCol","maxWidth","remember","autoComplete","help","offset","v","ResetPasswordForm","email","resetPassword","success","username","level","SignUpForm","DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","DevButton","rest","BugFilled","GameBanner","language","alt","PUBLIC_URL","fallback","HostButton","RocketOutlined","ghost","clsx","HostOnlyContainer","useHost","ButtonLabel","current","total","HostNextPhaseButton","autoTriggerTime","isVIP","loaders","onGoToNextPhase","handleClick","hasTimer","useCountdown","autoStart","duration","onExpire","timeLeft","isRunning","pause","resume","useEffect","getAnimationClass","PauseOutlined","PlayCircleOutlined","speed","infinite","HostOnlyButton","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","baseClass","id","ref","PhaseAnnouncement","buttonText","currentRound","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","isActive","setActive","isRemoved","setRemoved","onContinue","start","useKeyPressEvent","autoFocus","custom","SingleCloud","backgroundImage","backgroundPositionX","cloudData","MultiCloud","index","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","StepJoin","setStep","isAuthenticated","mutationKey","signInAsGuest","summary","LobbyStep","isLocked","DEV_NAMES","cacheNames","getRandomUniqueItemFromList","source","used","cache","randomItem","tries","getRandomItem","mockPlayerName","AvatarSelection","setSelectedAvatar","selectedAvatar","userId","availableAvatars","useMemo","usedAvatars","avatarId","newAvailableAvatars","AVAILABLE_AVATAR_IDS","onPreviousAvatar","useCallback","indexOf","newIndex","length","onNextAvatar","CaretLeftOutlined","viewBox","avatars","AVATARS","CaretRightOutlined","Settings","hasImages","blurEnabled","setBlurEnabled","volume","setVolume","useLocalStorage","getLocalStorage","setLocalStorage","useEffectOnce","shape","InfoCircleOutlined","UsualAvatarsSelection","avatarsIds","UsualAvatarOption","randomName","StepInfo","currentUser","isGuest","names","at","setName","lsAvatarId","lsUsername","setUserId","setUsername","setUserAvatarId","notification","query","GAME_API","GAME_API_ACTIONS","playerAvatarId","response","data","localStorage","speak","getRandomWelcomeMessage","onError","console","useAddPlayer","hasPlayedBefore","games","nameOptions","trim","onSelect","placeholder","maxLength","tags","StepWaiting","setLoader","gameMeta","userAvatarId","ADMIN_API_ACTIONS","onSettled","isLocking","numPlayers","min","PhaseLobby","useStep","step","resetGlobalState","orderBy","left","right","PHASES","transform","top","animate","appearance","clouds","PhasePlaceholder","AutoNextPhase","every","PhaseRules","user","useUser","setIsAdminEnabled","useGameId","queryClient","useQueryClient","invalidateQueries","queryKey","onBeReady","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClassName","actionsClassName","wrap","isReady","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","reorder","playerId","Fragment","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","width","startWith","starterIndex","slice","useGameState","docPath","subscribe","docRef","doc","firestore","useQuery","queryFn","getDoc","snapshot","unsubscribe","onSnapshot","refetch","useFirestoreDocument","isRefetching","count","print","SectionMeta","groupScore","SectionRankedPlayers","rankedPlayers","score","BlurOptions","blurCard","useBlurCards","baseUrl","useTDBaseUrl","fetch","json","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","selectedGroups","forEach","flat","SectionSettings","toggleDevFeatures","s","PlayersStatusBar","sortPlayers","trigger","dot","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","gameInfo","FireOutlined","RedirectSession","setOpen","redirect","currentMilliseconds","Date","now","redirectAt","GAME_LIST","onCancel","onOk","okText","cancelText","Session","gameCollection","getActiveComponent","setLanguage","setInfo","isIdle","useIdle","warning","useIdleRedirect","useTitle","ActiveComponent","Step","announcement","fullWidth","fullHeight","getWaitingRoomInstruction","kind","StepSwitcher","conditions","waitingRoom","content","Array","isArray","onBeforeCall","onMutate","func","timer","timeout","args","clearTimeout","apply","debounce","blurredCards","setBlurredCards","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","createdBy","whatToDo","requirements","delay","runOnce","setRunOnce","USE_MOCKS","VIEWER_ID","startingStep","goToPreviousStep","base","process","ignore","setShowPlayersBar","setUser","setIsReady","updatedAt","online","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","WAIT","ADEDANHX","ANSWERING","EVALUATION","RESULTS","ARTE_RUIM","DRAW","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CINEGRAFISTAS_AMADORES","UNKNOWN","COMUNICACAO_ALIENIGENA","ALIEN_SELECTION","ALIEN_SEEDING","HUMAN_ASK","ALIEN_ANSWER","ALIEN_REQUEST","OFFERINGS","REVEAL","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","WORDS_SELECTION","CLUE_WRITING","GUESSING","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","DUETOS","PAIRING","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","ORDERING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","LABIRINTO_SECRETO","MAP_BUILDING","PATH_FOLLOWING","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MEGAMIX","SEEDING","TRACK","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAO_SOU_ROBO","CARD_SELECTION","ARE_YOU_A_ROBOT","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","CHARACTER_FILTERING","CHARACTER_DESCRIPTION","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","TA_NA_CARA","PROMPT","TESTEMUNHA_OCULAR","WITNESS_SELECTION","QUESTIONING","TRIAL","TESTE_DE_ELENCO","MOVIE_GENRE_SELECTION","ACTOR_SELECTION","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VERIFY_GUESS","VAMOS_AO_CINEMA","MOVIE_SELECTION","MOVIE_ELIMINATION","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","VINGATIVOS","TEMPLATE","text","onEnd","utterance","SpeechSynthesisUtterance","lang","addEventListener","speechSynthesis"],"sourceRoot":""}