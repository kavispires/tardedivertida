{"version":3,"file":"static/js/4834.2d119bfb.chunk.js","mappings":"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","sources":["components/debug/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","mock/players.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/SectionSettings.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","hooks/useDevFeatures.ts","hooks/useIsUserReady.ts","hooks/useMock.ts","hooks/useUser.ts","utils/phases.ts"],"sourcesContent":["import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n};\n\n/**\n * Screen displayed before any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose,\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  const durationPerRound = [15, 10, 5]?.[currentRound] ?? 5;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n\n      <span className=\"phase-announcement__icon\">{icon}</span>\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(text: DualLanguageValue, language: Language, volume: number): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { AVAILABLE_AVATAR_IDS } from 'utils/avatars';\nimport { getRandomItem } from 'utils/helpers';\n\n/**\n * Random names used during Dev\n */\nconst DEV_NAMES: string[] =\n  'Abe,Bob,Cam,Dan,Eva,Fin,Gus,Hal,Ian,Jan,Kim,Leo,Max,Nic,Ole,Pat,Quinn,Roy,Tim'.split(',');\n\nconst cacheNames: BooleanDictionary = {};\nconst cacheAvatars: BooleanDictionary = {};\n\nlet cacheMockedPlayers: GamePlayers = {};\n\n/**\n * Gets a random unique item from list based on the cached dictionary or used dictionary\n * @param source\n * @param used\n * @param cache\n * @returns\n */\nconst getRandomUniqueItemFromList = (\n  source: string[],\n  used: string[] = [],\n  cache: BooleanDictionary = {}\n) => {\n  let randomItem = '';\n  while (!randomItem || cache[randomItem] || used?.includes(randomItem)) {\n    randomItem = getRandomItem(source);\n  }\n  cache[randomItem] = true;\n  return randomItem;\n};\n\n/**\n * Get random user name\n * @param used\n * @returns\n */\nexport function mockPlayerName(used?: string[]): string {\n  return getRandomUniqueItemFromList(DEV_NAMES, used, cacheNames);\n}\n\n/**\n * Mock players to be used during dev\n * @param players\n * @param quantity\n * @param properties\n * @returns\n */\nexport function mockPlayers(\n  players: GamePlayers,\n  quantity: number = 10,\n  properties?: PlainObject\n): GamePlayers {\n  if (Object.keys(cacheMockedPlayers).length > 1) {\n    return {\n      ...cacheMockedPlayers,\n      ...players,\n    };\n  }\n\n  const usedNames: BooleanDictionary = {};\n  const usedAvatars: BooleanDictionary = {};\n  Object.values(players).forEach((player) => {\n    usedNames[player.name] = true;\n    usedAvatars[player.avatarId] = true;\n  });\n\n  const neededQuantity = quantity - Object.keys(players).length;\n\n  const mockedPlayers: Player[] = Array(neededQuantity)\n    .fill(0)\n    .map((e, i) => {\n      const name = mockPlayerName(Object.keys(usedNames));\n\n      return {\n        id: `_${name.toLowerCase()}`,\n        name,\n        avatarId: getRandomUniqueItemFromList(AVAILABLE_AVATAR_IDS, Object.keys(usedAvatars), cacheAvatars),\n        updatedAt: Date.now(),\n        ready: true,\n        ...properties,\n      };\n    });\n\n  const newMockedPlayers: GamePlayers = {\n    ...mockedPlayers.reduce((acc: GamePlayers, player) => {\n      acc[player.id] = player;\n      return acc;\n    }, {}),\n    ...players,\n  };\n\n  cacheMockedPlayers = newMockedPlayers;\n  return cacheMockedPlayers;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Image, Input, notification, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { PUBLIC_URL } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\n// Components\nimport { Translate } from 'components/language';\nimport { mockPlayerName } from 'mock/players';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      onAddPlayer();\n    }\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onAddPlayer}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  switch (type) {\n    case 'eye-cloud':\n    case 'monster-eye-cloud':\n    case 'phone-cloud':\n    case 'retro-cloud':\n    case 'sheep-cloud':\n    case 'speech-cloud':\n      return SingleCloud;\n    case 'artsy-clouds':\n    case 'book-clouds':\n    case 'crime-clouds':\n    case 'halloween-clouds':\n    case 'letter-clouds':\n    case 'one-clouds':\n    case 'sky-clouds':\n      return MultiCloud;\n    default:\n      return SingleCloud;\n  }\n}\n\nfunction getCloudFileName(gameCode: string) {\n  return (\n    {\n      A: 'artsy-clouds',\n      C: 'book-clouds',\n      D: 'crime-clouds',\n      E: 'cyber-cloud',\n      G: 'sky-clouds',\n      H: 'crime-clouds',\n      L: 'phone-cloud',\n      M: 'sheep-cloud',\n      N: 'halloween-clouds',\n      O: 'retro-cloud',\n      P: 'speech-cloud',\n      R: 'monster-eye-cloud',\n      S: 'sky-clouds',\n      T: 'eye-cloud',\n      U: 'one-clouds',\n      X: 'letter-clouds',\n    }[gameCode] ?? 'cloud'\n  );\n}\n\ntype CloudBackgroundProps = {\n  gameCode?: string;\n};\n\nexport function CloudBackground({ gameCode = 'Z' }: CloudBackgroundProps) {\n  const cloudType = getCloudFileName(gameCode);\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${cloudType}`)}>\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <AdminMenuDrawer state={{ phase: 'LOBBY', round: { current: 0, total: 0 } }} players={players} />\n      <CloudBackground gameCode={info.gameCode} />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n      <ReadyPlayersBar players={players} />\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\nimport { GearsIcon } from 'components/icons/GearsIcon';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <GearsIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  players: GamePlayers;\n  order: PlayerId[];\n  activePlayerId?: PlayerId;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  reorderByUser?: PlayerId;\n  title?: string;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order;\n\n  return (\n    <div className={clsx('game-order', className)}>\n      <header className=\"game-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ul className=\"game-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <>\n              <span\n                key={`turn-order-player-${playerId}`}\n                className={clsx('game-order__player', isActive && 'game-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span key={`turn-order-player-${playerId}-arrow`} className=\"game-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nfunction reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\nimport { WaitingRoomIcon } from 'components/icons/WaitingRoomIcon';\n\ntype WaitingRoomProps = {\n  players: GamePlayers;\n  title?: any;\n  instruction?: any;\n  children?: any;\n};\n\nexport function WaitingRoom({ players, title, instruction, children }: WaitingRoomProps) {\n  const { translate } = useLanguage();\n  return (\n    <div className=\"waiting-room\">\n      <Title>{translate('Pronto!', 'Done!', title)}</Title>\n      <WaitingRoomIcon style={{ width: '6rem' }} />\n      <Instruction>\n        {Boolean(instruction) ? (\n          instruction\n        ) : (\n          <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n        )}\n      </Instruction>\n      {children}\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Instruction } from 'components/text';\nimport { ReactNode } from 'react';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype PopoverRuleProps = {\n  content: any;\n  showLabel?: boolean;\n  label?: any;\n};\n\nexport function PopoverRule({ content, label, showLabel = true }: PopoverRuleProps): JSX.Element {\n  const [isActive, setActive] = useState(false);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <div className=\"popover-rule\">\n      <Popover placement=\"bottomLeft\" content={content} trigger=\"click\">\n        <Button\n          shape={'round'}\n          size=\"large\"\n          onMouseOver={() => setActive(true)}\n          onMouseLeave={() => setActive(showLabel ?? false)}\n        >\n          <ReadOutlined />\n          {isActive && Boolean(label) ? label : <Translate pt=\" Regras\" en=\" Rules\" />}\n        </Button>\n      </Popover>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function RulesModal({ gameInfo }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image, Space } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          visible={isDrawerOpen}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>{' '}\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              visible={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  gameId: GameId;\n  gameCollection: GameName;\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? GAME_LIST[gameId[0]] : {});\n  }, [gameId]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): Players | {} {\n  const docPath = `${gameName}/${gameId}/session/players`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing players...');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `${gameName}/${gameId}/session/state`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing state...');\n  }\n\n  return snapshot?.data() as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n  /**\n   * Flag indicating if it is the last round\n   */\n  lastRound?: boolean;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round, lastRound }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || lastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong>{' '}\n            {pluralize(left, 'rodada', 'rodadas')} para o jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round', 'rounds')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography } from 'antd';\nimport { ReactNode } from 'react';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  white?: boolean;\n  icon?: any;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  level?: 1 | 2 | 3 | 4 | 5 | undefined;\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n};\n\nexport const Title = ({ children, white, icon, className, level = 1, size = 'large' }: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n// Check if user is ready\nexport function useIsUserReady(players: Players, state?: GameState) {\n  const [userId] = useGlobalState('userId');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && players?.[userId].ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && players?.[userId]?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, players, state?.updatedAt]);\n\n  return isReady;\n}\n","import { useEffect } from 'react';\nimport { isDevEnv } from 'utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = []) {\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  useEffect(() => {\n    if (isDevEnv && !isAdmin) {\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: Players): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    if (userId) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId]);\n\n  return user;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES: ObjectDictionary = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DESENHO_RAPIDAO: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    HINT_GIVING: 'HINT_GIVING',\n    HINT_RECEIVING: 'HINT_RECEIVING',\n    GUESS_THE_CODE: 'GUESS_THE_CODE',\n    DISCUSSION: 'DISCUSSION',\n    SOLUTION: 'SOLUTION',\n  },\n  PALHETA_DE_CORES: {\n    '': '',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TE_CONHECO: {\n    WRITE: 'WRITE',\n    TRUTHS_AND_LIES: 'TRUTHS_AND_LIES',\n    RESULT: 'RESULT',\n    MATCH_PLAYERS: 'MATCH_PLAYERS',\n    REVEAL: 'REVEAL',\n  },\n};\n"],"names":["DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","PhaseAnnouncement","buttonText","icon","title","currentRound","onClose","className","duration","withoutTimer","unskippable","animationType","durationPerRound","clsx","getAnimationClass","type","onClick","pt","en","custom","onExpire","disabled","PhaseContainer","info","phase","allowedPhase","fullScreen","white","translate","useLanguage","screenRef","useRef","useGlobalState","setScreenSize","useEffect","current","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","speak","text","language","volume","utterance","SpeechSynthesisUtterance","lang","window","speechSynthesis","getRandomWelcomeMessage","name","options","getRandomItem","DEV_NAMES","split","cacheNames","getRandomUniqueItemFromList","source","used","cache","randomItem","includes","mockPlayerName","randomName","undefined","Join","players","meta","useLoading","isLoading","setLoader","gameId","setUserId","setUsername","setUserAvatarId","setVolume","useState","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","Object","values","reduce","acc","avatarId","newAvailableAvatars","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerName","playerAvatarId","response","data","username","notification","message","JSON","stringify","placement","console","error","alt","src","PUBLIC_URL","fallback","Boolean","CaretLeftOutlined","viewBox","href","avatars","AVATARS","CaretRightOutlined","isComplete","onChange","e","target","value","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","key","loading","ghost","size","Waiting","gameMeta","userAvatarId","onLockGameAndStart","ADMIN_API","isLocked","numPlayers","keys","direction","min","danger","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","style","backgroundImage","CloudBackground","gameCode","cloudType","A","C","D","E","G","H","L","M","N","O","P","R","S","T","U","X","getCloudFileName","CloudTypeComponent","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","map","player","animate","state","round","total","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","user","useUser","errorMessage","onBeReady","useAPICall","apiFunction","actionName","successMessage","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClass","wrap","CheckCircleFilled","SmileFilled","MehFilled","RobotFilled","PhaseSetup","GearsIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","ready","readyPlayers","push","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","startWith","starterIndex","slice","reorder","playerId","isActive","backgroundColor","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","WaitingRoomIcon","CollapsibleRule","contained","header","PopoverRule","content","label","showLabel","setActive","trigger","shape","onMouseOver","onMouseLeave","ReadOutlined","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rules","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","visible","onCancel","footer","SectionMeta","groupScore","color","SectionRankedPlayers","rankedPlayers","useMemo","count","score","SectionSettings","blurEnabled","setBlurEnabled","isAdmin","isAdminEnabled","setIsAdminEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","checkedChildren","unCheckedChildren","checked","s","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","SettingOutlined","closable","preview","Session","gameCollection","getActiveComponent","docPath","useDocument","doc","firestore","snapshotListenOptions","includeMetadataChanges","snapshot","useGamePlayers","useGameState","setInfo","navigate","useNavigate","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","ActiveComponent","Instruction","fullWidth","RoundsLeftInstruction","lastRound","left","pluralize","TextHighlight","Title","level","setIsDebugEnabled","isReady","setIsReady","updatedAt","whatToDo","conditions","setUser","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","REVEAL","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","DESENHO_RAPIDAO","PROMPT_SELECTION","DRAWING","GUESSING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","HINT_GIVING","HINT_RECEIVING","GUESS_THE_CODE","DISCUSSION","SOLUTION","PALHETA_DE_CORES","LINHAS_CRUZADAS","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","ONDA_TELEPATICA","DIAL_CLUE","GUESS","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","RESULTS","CRUZA_PALAVRAS","CLUE_WRITING","TE_CONHECO","WRITE","TRUTHS_AND_LIES","MATCH_PLAYERS"],"sourceRoot":""}