{"version":3,"file":"static/js/linhas-cruzadas.595e946d.chunk.js","mappings":"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","sources":["components/canvas/CanvasResizer.tsx","components/canvas/CanvasSVG.tsx","components/canvas/DrawingCanvas.tsx","components/cards/Card.tsx","components/general/Achievements.tsx","components/metrics/TimeHighlight.tsx","games/linhas-cruzadas/utils/api-requests.ts","games/linhas-cruzadas/StepSelectPrompt.tsx","games/linhas-cruzadas/PhasePromptSelection.tsx","games/linhas-cruzadas/utils/constants.ts","games/linhas-cruzadas/StepTimedDrawing.tsx","games/linhas-cruzadas/PhaseDrawing.tsx","games/linhas-cruzadas/StepNameDrawing.tsx","games/linhas-cruzadas/PhaseNaming.tsx","games/linhas-cruzadas/components/Page.tsx","games/linhas-cruzadas/components/Album.tsx","games/linhas-cruzadas/StepAlbum.tsx","games/linhas-cruzadas/PhasePresentation.tsx","games/linhas-cruzadas/PhaseGameOver.tsx","games/linhas-cruzadas/SessionLinhasCruzadas.tsx"],"sourcesContent":["// Ant Design Resources\nimport { Slider } from 'antd';\nimport { DragOutlined } from '@ant-design/icons';\n// State & Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n\n/**\n * Fixed Menu Button for resizing canvas\n */\nexport const CanvasResizer = () => {\n  const [canvasSize, setCanvasSize] = useGlobalState('canvasSize');\n\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={1}\n      icon={<DragOutlined />}\n      label={labelText}\n      content={\n        <div className=\"canvas-resizer\">\n          <div className=\"canvas-resizer__label\">{labelText}</div>\n          <Slider\n            className=\"canvas-resizer__slider\"\n            value={canvasSize ?? 100}\n            min={150}\n            max={500}\n            step={50}\n            onChange={setCanvasSize}\n          />\n        </div>\n      }\n    />\n  );\n};\n\nconst labelText = <Translate pt=\"Tamanho das Artes\" en=\"Art Size\" />;\n","/**\n * Builds paths from canvas lines\n * @param lines\n * @returns\n */\nconst getPathFromKonvaLines = (lines: CanvasLine[]) => {\n  const result = lines.map((lineArr) => {\n    let path = '';\n    for (let x = 0, y = 1; y < lineArr.length; x += 2, y += 2) {\n      if (lineArr[x + 2] && lineArr[y + 2]) {\n        path += `M${lineArr[x]},${lineArr[y]} L${lineArr[x + 2]},${lineArr[y + 2]}`;\n      }\n    }\n\n    return path;\n  });\n\n  return result;\n};\n\ntype CanvasSVGProps = {\n  /**\n   * The stringified svg path\n   */\n  drawing: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * Custom view box size (default: '0 0 500')\n   */\n  viewBox?: string;\n};\n\nexport const CanvasSVG = ({\n  drawing = '',\n  className = '',\n  width = 250,\n  height,\n  strokeWidth = 'medium',\n  viewBox = '0 0 500 500',\n}: CanvasSVGProps) => {\n  const konvaLines = JSON.parse(drawing);\n  const paths = getPathFromKonvaLines(konvaLines);\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      overflow=\"hidden\"\n      className={className}\n      style={{ width: `${width}px`, height: `${height || width}px` }}\n    >\n      <defs />\n      {paths.map((path, index) => (\n        <path\n          key={`${drawing}-${index}`}\n          d={path}\n          fill=\"none\"\n          stroke=\"#000\"\n          strokeWidth={strokeWidthBySize}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeMiterlimit=\"10\"\n        />\n      ))}\n    </svg>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype DrawingCanvasProps = {\n  /**\n   * Lines drawn in the canvas\n   */\n  lines: CanvasLine[];\n  /**\n   * Function where any new version of the drawing is sent to\n   */\n  setLines: CanvasSetLine;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Show controls to undo, redo, or erase drawing. Default: false\n   */\n  showControls?: boolean;\n  /**\n   * Size of the stroke. Default: medium\n   */\n  strokeWidth?: 'small' | 'medium' | 'large';\n  /**\n   * The width of the canvas (default: 500)\n   */\n  width?: number;\n  /**\n   * The height of the canvas (default: 500)\n   */\n  height?: number;\n  /**\n   *\n   */\n  willReadFrequently?: boolean;\n};\n\n/**\n * Canvas drawing board using react-konva\n * It requires an array of lines and an setState function to save the lines\n */\nexport const DrawingCanvas = ({\n  lines,\n  setLines,\n  className = '',\n  showControls = false,\n  strokeWidth = 'medium',\n  width = 500,\n  height,\n  willReadFrequently = false,\n}: DrawingCanvasProps) => {\n  const [drawingHistory, setDrawingHistory] = useState<CanvasLine[]>([]);\n  const isDrawing = useRef(false);\n\n  /**\n   * Toggles off the isDrawing flag\n   */\n  const startDrawing = () => {\n    isDrawing.current = true;\n  };\n\n  /**\n   * Toggles off the isDrawing flag and resets history\n   */\n  const stopDrawing = () => {\n    isDrawing.current = false;\n    setDrawingHistory([]);\n  };\n\n  const startLine = (e: any) => {\n    startDrawing();\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, [Math.round(pos.x), Math.round(pos.y)]]);\n  };\n\n  const finishLine = (e: any) => {\n    // Add point if it was a point\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    const x = Math.round(point.x);\n    const y = Math.round(point.y);\n\n    let lastLineEntry = lines[lines.length - 1];\n    lastLineEntry = lastLineEntry.concat([x + 0.1, y + 0.1]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLineEntry);\n    setLines(lines.concat());\n  };\n\n  /**\n   * Start recording drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseDown = (e: any) => {\n    startLine(e);\n  };\n\n  /**\n   * Tracks mouse moving during the drawing\n   * @param e - konva mouse event\n   */\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add end point\n    lastLine = lastLine.concat([Math.round(point.x), Math.round(point.y)]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = (e: any) => {\n    if (isDrawing.current) {\n      stopDrawing();\n\n      finishLine(e);\n    }\n  };\n\n  /**\n   * Handles case when a current drawing is stopped off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseUp = () => {\n    stopDrawing();\n  };\n\n  /**\n   * Handles case when a current drawing is started off stage\n   * @param e - mouse event\n   */\n  const handleOffsetMouseDown = () => {\n    startDrawing();\n  };\n\n  /**\n   * Handles when mouse leaves the stage\n   * @param e - konva mouse event\n   */\n  const handleMouseLeave = (e: any) => {\n    if (isDrawing.current) {\n      finishLine(e);\n\n      window.document.addEventListener('mouseup', handleOffsetMouseUp);\n      window.document.addEventListener('touchEnd', handleOffsetMouseUp);\n      window.document.addEventListener('mousedown', handleOffsetMouseDown);\n      window.document.addEventListener('touchStart', handleOffsetMouseDown);\n    }\n  };\n\n  /**\n   * Handles when mouse reenters the state\n   * @param e\n   */\n  const handleMouseEnter = (e: any) => {\n    if (isDrawing.current) {\n      startLine(e);\n    }\n    window.document.removeEventListener('mouseup', handleOffsetMouseUp);\n    window.document.removeEventListener('touchEnd', handleOffsetMouseUp);\n    window.document.removeEventListener('mousedown', handleOffsetMouseDown);\n    window.document.removeEventListener('touchStart', handleOffsetMouseDown);\n  };\n\n  const onClear = () => setLines([]);\n\n  const onUndo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastLine: CanvasLine | undefined = linesCopy.pop();\n    if (lastLine) {\n      drawingHistoryCopy.push(lastLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const onRedo = () => {\n    const linesCopy = [...lines];\n    const drawingHistoryCopy = [...drawingHistory];\n    const lastUndoLine = drawingHistoryCopy.pop();\n    if (lastUndoLine) {\n      linesCopy.push(lastUndoLine);\n      setLines(linesCopy);\n      setDrawingHistory(drawingHistoryCopy);\n    }\n  };\n\n  const strokeWidthBySize =\n    {\n      small: 3,\n      medium: 5,\n      large: 7,\n    }?.[strokeWidth] ?? 5;\n\n  return (\n    <Space direction=\"vertical\" align=\"center\">\n      <Stage\n        width={width}\n        height={height || width}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onMouseEnter={handleMouseEnter}\n        className={clsx('drawing-canvas', className)}\n        style={{ width: `${width}px`, height: `${height || width}px` }}\n        willReadFrequently={willReadFrequently}\n        id=\"drawing-canvas\"\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line}\n              stroke=\"#222222\"\n              strokeWidth={strokeWidthBySize}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation=\"source-over\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n      {showControls && (\n        <Space>\n          <Button onClick={onUndo} disabled={lines.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Desfazer\" en=\"Undo\" />\n          </Button>\n          <Button onClick={onRedo} disabled={drawingHistory.length === 0}>\n            <UndoOutlined />\n            <Translate pt=\"Refazer\" en=\"Redo\" />\n          </Button>\n          <Button onClick={onClear} disabled={lines.length === 0}>\n            <DeleteOutlined />\n            <Translate pt=\"Apagar\" en=\"Clear\" />\n          </Button>\n        </Space>\n      )}\n    </Space>\n  );\n};\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n// Sass\nimport './Card.scss';\n\ntype CardProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  hideHeader?: boolean;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n  hideHeader = false,\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      {!hideHeader && (\n        <span\n          className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n          style={color.startsWith('#') ? { backgroundColor: color } : {}}\n        >\n          {header}\n        </span>\n      )}\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { Achievement, AchievementReference } from 'types/achievements';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  if (achievements.length === 0) return <></>;\n\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { ClockIcon } from 'icons/ClockIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function TimeHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ClockIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import type { SubmitDrawingPayload, SubmitGuessPayload, SubmitPromptPayload } from './types';\nimport type { UseStep } from 'hooks/useStep';\nimport { functions } from 'services/firebase';\nimport { httpsCallable } from 'firebase/functions';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nconst submitAction = httpsCallable(functions, 'linhasCruzadasSubmitAction');\n\nexport function useOnSubmitPromptAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-prompt',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Carta enviada com sucesso!', 'Card send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to submit the card'\n    ),\n  });\n\n  return (payload: SubmitPromptPayload) => {\n    request({\n      action: 'SUBMIT_PROMPT',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitDrawingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-drawing',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate(\n      'Acabou o tempo! Aguarde enquanto os outros participantes desenham',\n      \"Time's up! Wait for the other players to finish their art\"\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desenho',\n      'Oops, the application failed to send your art'\n    ),\n  });\n\n  return (payload: SubmitDrawingPayload) => {\n    request({\n      action: 'SUBMIT_DRAWING',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: submitAction,\n    actionName: 'submit-guess',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Resposta enviado com sucesso!', 'Guess submitted successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua resposta',\n      'Oops, the application failed to submit your guess'\n    ),\n  });\n\n  return (payload: SubmitGuessPayload) => {\n    request({\n      action: 'SUBMIT_GUESS',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Types\nimport type { PromptCard, SubmitPromptPayload } from './utils/types';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { shuffle } from 'utils/helpers';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\n\ntype StepSelectPromptProps = {\n  prompts: PromptCard[];\n  onSubmitPrompt: (props: SubmitPromptPayload) => void;\n};\n\nexport function StepSelectPrompt({ prompts, onSubmitPrompt }: StepSelectPromptProps) {\n  const { isLoading } = useLoading();\n\n  const onRandomSelect = () => {\n    onSubmitPrompt({ promptId: shuffle(prompts.map((prompt) => prompt.id))[0], randomSelection: true });\n  };\n\n  // DEV: Auto auto-select\n  useMock(onRandomSelect, []);\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Seleção de Carta\" en=\"Card Selection\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione uma das cartas abaixo a ser usada no jogo\"\n          en=\"Select one of the cards below to be used in the game\"\n        />\n      </Instruction>\n\n      <div className=\"l-cards\">\n        {prompts.map((prompt) => {\n          return (\n            <TransparentButton\n              key={prompt.id}\n              onClick={() => onSubmitPrompt({ promptId: prompt.id })}\n              disabled={isLoading}\n            >\n              <Card>{prompt.text}</Card>\n            </TransparentButton>\n          );\n        })}\n      </div>\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={onRandomSelect} disabled={isLoading} ghost>\n          <Translate pt=\"Escolha pra mim\" en=\"Select for me\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitPromptAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { ListIcon } from 'icons/ListIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepSelectPrompt } from './StepSelectPrompt';\n\nexport function PhasePromptSelection({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitPrompt = useOnSubmitPromptAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<ListIcon />}\n          title={<Translate pt=\"Seleção da Carta\" en=\"Card Selection\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={20}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Neste jogo, você recebe uma carta e a desenha, daí o próximo jogador tentar adivinhar o que\n                  é, daí o próximo jogador desenha a adivinhação, e por ai vai até seu album original voltar\n                  pra você.\n                  <br />\n                  Selecione a palavra a ser desenhada, talvez seja para você, talvez seja para um outro\n                  jogador.\n                </>\n              }\n              en={\n                <>\n                  In this game, you receive a prompt and will have to draw it, then the next player will\n                  attempt to guess your drawing, then the next player will draw the guess attempt, and so on\n                  until your album comes back to you.\n                  <br />\n                  Select a card to be drawn this round, it might be for you to draw or the next player... who\n                  knows?\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectPrompt prompts={user.prompts} onSubmitPrompt={onSubmitPrompt} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","export const DRAWING_TIME_IN_SECONDS = 120;\n\nexport const PAGE_DURATION = 7;\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { Prompt } from './utils/types';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n// Icons\nimport { AnimatedLoaderIcon } from 'icons/AnimatedLoaderIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Card } from 'components/cards';\nimport { TimedTimerBar } from 'components/timers';\nimport { DrawingCanvas } from 'components/canvas';\nimport { Translate } from 'components/language';\n\ntype StepTimedDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitDrawing: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepTimedDrawing({ currentPrompt, onSubmitDrawing, players }: StepTimedDrawingProps) {\n  const [lines, setLines] = useState<any>([]);\n  const [isTimesUp, setTimesUp] = useState(false);\n\n  const onExpire = () => {\n    setTimesUp(true);\n    onSubmit();\n  };\n\n  const onSubmit = () =>\n    onSubmitDrawing({\n      drawing: JSON.stringify(lines),\n    });\n\n  const author = players[currentPrompt.author];\n\n  return (\n    <Step>\n      <Card size=\"large\" header={author.name} color={AVATARS[author.avatarId].color}>\n        {currentPrompt.content}\n      </Card>\n      <TimedTimerBar steps={90} duration={DRAWING_TIME_IN_SECONDS} onExpire={onExpire} />\n      {isTimesUp ? (\n        <AnimatedLoaderIcon style={{ background: 'white', width: '250px', padding: '125px' }} />\n      ) : (\n        <DrawingCanvas lines={lines} setLines={setLines} showControls />\n      )}\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={() => onSubmit()} size=\"large\">\n          <Translate pt=\"Enviar desenho\" en=\"Submit drawing\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDrawingAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { DRAWING_TIME_IN_SECONDS } from './utils/constants';\n// Icons\nimport { DrawingIcon } from 'icons/DrawingIcon';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepTimedDrawing } from './StepTimedDrawing';\nimport { TimeHighlight } from 'components/metrics/TimeHighlight';\n\nexport function PhaseDrawing({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitDrawing = useOnSubmitDrawingAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.DRAWING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DrawingIcon />}\n          title={<Translate pt=\"Desenhe\" en=\"Draw\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          buttonText={<Translate pt=\"Um dó, lá, si... vamos e... já!\" en=\"Ready! Set! Go!\" />}\n          withoutTimer\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Você receberá uma carta.\n                  <br />\n                  Desenhe-a da melhor maneira possível, você tem{' '}\n                  <TimeHighlight>{DRAWING_TIME_IN_SECONDS}</TimeHighlight> segundos.\n                </>\n              }\n              en={\n                <>\n                  You will receive a card.\n                  <br />\n                  Draw it the best way possible, you have{' '}\n                  <TimeHighlight>{DRAWING_TIME_IN_SECONDS}</TimeHighlight> seconds.\n                </>\n              }\n            />\n\n            <TurnOrder\n              title={<Translate pt=\"Ordem dos Álbuns\" en=\"Albums' Order\" />}\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepTimedDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitDrawing={onSubmitDrawing}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\nimport type { GameRound } from 'types/game';\nimport type { Prompt } from './utils/types';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\n\ntype StepNameDrawingProps = {\n  currentPrompt: Prompt;\n  onSubmitGuess: GenericFunction;\n  players: GamePlayers;\n  // for mock\n  user: GamePlayer;\n  round: GameRound;\n};\n\nexport function StepNameDrawing({\n  currentPrompt,\n  onSubmitGuess,\n  players,\n  user,\n  round,\n}: StepNameDrawingProps) {\n  const { translate } = useLanguage();\n  const [title, setTitle] = useState<string>('');\n\n  const author = players[currentPrompt.author];\n\n  const onTitleChange = (e: any) => setTitle(e.target.value);\n\n  const onSubmitTitle = () => onSubmitGuess({ guess: title });\n\n  // DEV: Auto write\n  useMock(() => onSubmitGuess({ guess: `${round.current}${user.id}` }), []);\n\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"O que é isso?\" en=\"What is this?\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={author} /> desenhou isso, o que é?\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={author} /> draw this, so what is it?\n            </>\n          }\n        />\n      </Instruction>\n\n      <CanvasSVG drawing={currentPrompt.content} className=\"l-drawing\" width={300} />\n\n      <Input\n        onChange={onTitleChange}\n        size=\"large\"\n        placeholder={translate('Escreva seu chute aqui', 'Write your guess here')}\n        className=\"l-drawing-guess-input\"\n        onPressEnter={onSubmitTitle}\n      />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button type=\"primary\" onClick={onSubmitTitle} size=\"large\" disabled={!title}>\n          <Translate pt=\"Enviar\" en=\"Submit name\" />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitGuessAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { WriteIdeaIcon } from 'icons/WriteIdeaIcon';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepNameDrawing } from './StepNameDrawing';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nexport function PhaseNaming({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players, state);\n\n  const onSubmitGuess = useOnSubmitGuessAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.NAMING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<WriteIdeaIcon />}\n          title={<Translate pt=\"O que é isso?\" en=\"What is it?\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate pt=\"Tente adivinhar o que é a obra\" en=\"Try to guess what the artwork is\" />\n\n            <TurnOrder\n              players={players}\n              order={state.gameOrder}\n              className=\"l-turn-order\"\n              activePlayerId={user.currentPrompt?.id}\n              reorderByUser={user.id}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepNameDrawing\n          currentPrompt={user.currentPrompt}\n          onSubmitGuess={onSubmitGuess}\n          players={players}\n          user={user}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { Slide } from '../utils/types';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { CanvasSVG } from 'components/canvas';\nimport { Avatar, AvatarName } from 'components/avatars';\n// Componentes\n\ntype PageProps = {\n  slide: Slide;\n  players: GamePlayers;\n  albumColor: string;\n  currentPage: number;\n  totalSlides: number;\n};\n\nexport function Page({ slide, players, albumColor, currentPage, totalSlides }: PageProps) {\n  const author = players[slide.author];\n  const animationClass = useMemo(() => getAnimationClass('flipInY'), []);\n\n  return (\n    <div className=\"l-page\" style={{ background: slide.type === 'cover' ? albumColor : 0 }}>\n      <div className=\"l-page__pagination\">\n        <AntAvatar style={{ backgroundColor: albumColor }}>{currentPage + 1}</AntAvatar>\n        <span className=\"l-page__pagination-of\">\n          <Translate pt=\"de\" en=\"of\" />\n        </span>\n        <AntAvatar style={{ backgroundColor: albumColor }}>{totalSlides}</AntAvatar>\n      </div>\n\n      {slide.type === 'cover' && (\n        <div className={clsx('l-page__container', animationClass)} style={{ backgroundColor: albumColor }}>\n          <Avatar id={author.avatarId} size={96} />\n        </div>\n      )}\n\n      {slide.type === 'title' &&\n        (currentPage === 0 ? (\n          <div className={clsx('l-page__container', animationClass)}>\n            <Card>{slide.content}</Card>\n          </div>\n        ) : (\n          <div className={clsx('l-page__container l-page__text', animationClass)}>\"{slide.content}\"</div>\n        ))}\n\n      {slide.type === 'drawing' && (\n        <CanvasSVG\n          drawing={slide.content}\n          className={clsx('l-page__container l-artwork', animationClass)}\n          width={350}\n        />\n      )}\n\n      {slide.type !== 'cover' && (\n        <div className=\"l-page__author\">\n          <Translate pt=\"por \" en=\"by \" />\n          <AvatarName player={author} addressUser />\n        </div>\n      )}\n    </div>\n  );\n}\n","// Types\nimport type { GamePlayers } from 'types/player';\nimport type { AlbumEntry } from '../utils/types';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Page } from './Page';\n\ntype AlbumProps = {\n  albumEntry: AlbumEntry;\n  currentPage: number;\n  players: GamePlayers;\n};\n\nexport function Album({ albumEntry, currentPage, players }: AlbumProps) {\n  const albumOwner = players[albumEntry.id];\n  const albumColor = getAvatarColorById(albumOwner.avatarId);\n\n  return (\n    <div className=\"l-album\">\n      <h2 className=\"l-album__owner\" style={{ backgroundColor: albumColor }}>\n        <Avatar id={albumOwner.avatarId} size=\"large\" />{' '}\n        <Translate pt={<>Álbum de {albumOwner.name}</>} en={<>{albumOwner.name}'s Album</>} />\n      </h2>\n\n      <Page\n        slide={albumEntry.slides[currentPage]}\n        players={players}\n        albumColor={albumColor}\n        currentPage={currentPage}\n        totalSlides={albumEntry.slides.length}\n      />\n    </div>\n  );\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\nimport type { AlbumEntry } from './utils/types';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { PAGE_DURATION } from './utils/constants';\n// Components\nimport { HostNextPhaseButton } from 'components/host';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Album } from './components/Album';\n\ntype StepAlbumProps = {\n  players: GamePlayers;\n  album: AlbumEntry[];\n};\n\nexport function StepAlbum({ players, album }: StepAlbumProps) {\n  useTemporarilyHidePlayersBar();\n  const [areControlsLocked, setAreControlsLocked] = useState(true);\n  const [currentEntry, setCurrentEntry] = useState(0);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [barSize, setBarSize] = useState(1);\n\n  const totalPages = useMemo(() => {\n    return album.reduce((total, albumEntry) => total + albumEntry.slides.length, 0);\n  }, [album]);\n\n  const totalTime = PAGE_DURATION * totalPages;\n\n  const { timeLeft, isRunning } = useCountdown({\n    duration: PAGE_DURATION * totalPages,\n    autoStart: true,\n    onExpire: () => setAreControlsLocked(false),\n  });\n\n  const currentAlbumEntry = album[currentEntry];\n  const currentAlbumLastPageIndex = (currentAlbumEntry?.slides?.length || 0) - 1;\n  const isLastAlbum = !Boolean(album[currentEntry + 1]);\n\n  // Control Functions\n  const onPrevAlbum = () => {\n    setCurrentEntry(currentEntry - 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  };\n  const onPrevPage = () => setCurrentPage((c) => c - 1);\n  const onNextPage = useCallback(() => {\n    setCurrentPage((c) => c + 1);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n  const onNextAlbum = useCallback(() => {\n    setCurrentEntry((c) => c + 1);\n    setCurrentPage(0);\n    if (areControlsLocked) {\n      setBarSize((s) => s + 1);\n    }\n  }, [areControlsLocked]);\n\n  useEffect(() => {\n    if (isRunning && timeLeft < totalTime && timeLeft % PAGE_DURATION === 0) {\n      // If next page exists, go for it, otherwise, next album\n      if (currentPage < currentAlbumLastPageIndex) {\n        onNextPage();\n      } else if (!isLastAlbum) {\n        onNextAlbum();\n      }\n    }\n  }, [timeLeft, isRunning, currentAlbumLastPageIndex]); // eslint-disable-line\n\n  return (\n    <Step className=\"l-step-album\">\n      <Title>\n        <Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />\n      </Title>\n      {currentPage < 0 || !currentAlbumEntry ? (\n        <div className=\"a\">?</div>\n      ) : (\n        <Album albumEntry={currentAlbumEntry} currentPage={currentPage} players={players} />\n      )}\n      <div className=\"l-timer-bar\">\n        <span\n          className=\"l-timer-bar__pill\"\n          style={{\n            width: `${Math.abs((100 * barSize) / totalPages)}%`,\n            backgroundColor: 'gray',\n          }}\n        />\n      </div>\n      <Space className=\"space-container\" align=\"center\">\n        <Button disabled={areControlsLocked || currentEntry === 0} onClick={onPrevAlbum}>\n          Prev Album\n        </Button>\n        <Button disabled={areControlsLocked || currentPage === 0} onClick={onPrevPage}>\n          Prev Page\n        </Button>\n        <Button\n          disabled={areControlsLocked || currentPage === currentAlbumLastPageIndex}\n          onClick={onNextPage}\n        >\n          Next Page\n        </Button>\n        <Button disabled={areControlsLocked || isLastAlbum} onClick={onNextAlbum}>\n          Next Album\n        </Button>\n      </Space>\n      <HostNextPhaseButton autoTriggerTime={0} />\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// State & Hooks\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PhotoAlbumIcon } from 'icons/PhotoAlbumIcon';\n// Components\nimport { TurnOrder } from 'components/players';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { StepSwitcher } from 'components/steps';\nimport { StepAlbum } from './StepAlbum';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nexport function PhasePresentation({ players, state, info }: PhaseProps) {\n  const { step, goToNextStep } = useStep(0);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.LINHAS_CRUZADAS.PRESENTATION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<PhotoAlbumIcon />}\n          title={<Translate pt=\"Álbum de Fotos\" en=\"Photo Album\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          duration={7}\n          type=\"block\"\n        >\n          <Instruction>\n            <Translate pt=\"A ordem dos albums será:\" en=\"The albums' order will be:\" />\n            <TurnOrder players={players} order={state.gameOrder} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepAlbum players={players} album={state.album} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\nimport type { AlbumEntry } from './utils/types';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport achievementsReference from './utils/achievements';\n// Icons\nimport { TheEndIcon } from 'icons/TheEndIcon';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { CanvasSVG } from 'components/canvas';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\n\nexport function PhaseGameOver({ state, info, players }: PhaseProps) {\n  const slideCount = Math.min(state.album[0]?.slides.length ?? 5, 8);\n  const cardWidth = useCardWidth(slideCount, { minWidth: 100 });\n\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<TheEndIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <ul className=\"l-album-strips\">\n        {state.album.map((albumEntry: AlbumEntry) => (\n          <li key={`album-strip-${albumEntry.id}`} className=\"l-album-strip-entry\">\n            <div className=\"l-album-strip-entry__author\">\n              <AvatarName player={players[albumEntry.id]} />\n            </div>\n            <ul\n              className=\"l-album-strip\"\n              style={{ gridTemplateColumns: `repeat(${albumEntry.slides.length - 1}, 1fr)` }}\n            >\n              {albumEntry.slides.slice(1).map((slide) => {\n                const key = `slide-${albumEntry.id}-${slide.author}-${slide.type}`;\n\n                if (slide.type === 'title') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-text\" style={{ width: `${cardWidth}px` }}>\n                      {slide.content}\n                    </li>\n                  );\n                }\n\n                if (slide.type === 'drawing') {\n                  return (\n                    <li key={key} className=\"l-album-strip-square-drawing\">\n                      <CanvasSVG drawing={slide.content} width={cardWidth} />\n                    </li>\n                  );\n                }\n                return <></>;\n              })}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </GameOverWrapper>\n  );\n}\n","import { ConfigProvider } from 'antd';\n// Types\nimport type { GameState } from 'types/game';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhasePromptSelection } from './PhasePromptSelection';\nimport { PhaseDrawing } from './PhaseDrawing';\nimport { PhaseNaming } from './PhaseNaming';\nimport { PhasePresentation } from './PhasePresentation';\nimport { PhaseGameOver } from './PhaseGameOver';\n// Fonts\nimport 'assets/fonts/architects-daughter.scss';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.LINHAS_CRUZADAS.PROMPT_SELECTION:\n      return PhasePromptSelection;\n    case PHASES.LINHAS_CRUZADAS.DRAWING:\n      return PhaseDrawing;\n    case PHASES.LINHAS_CRUZADAS.NAMING:\n      return PhaseNaming;\n    case PHASES.LINHAS_CRUZADAS.PRESENTATION:\n      return PhasePresentation;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionInstrumentosCodificados() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.DEFAULT,\n          colorLink: THEME_COLORS.DEFAULT,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.LINHAS_CRUZADAS} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionInstrumentosCodificados;\n"],"names":["CanvasResizer","useGlobalState","canvasSize","setCanvasSize","type","position","icon","DragOutlined","label","labelText","content","className","value","min","max","step","onChange","pt","en","CanvasSVG","drawing","width","height","strokeWidth","viewBox","konvaLines","JSON","parse","paths","map","lineArr","path","x","y","length","strokeWidthBySize","small","medium","large","xmlns","overflow","style","index","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","DrawingCanvas","lines","setLines","showControls","willReadFrequently","useState","drawingHistory","setDrawingHistory","isDrawing","useRef","startDrawing","current","stopDrawing","startLine","e","pos","target","getStage","getPointerPosition","Math","round","finishLine","point","lastLineEntry","concat","splice","handleMouseDown","handleMouseMove","lastLine","handleMouseUp","handleOffsetMouseUp","handleOffsetMouseDown","direction","align","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onMouseLeave","window","document","addEventListener","onMouseEnter","removeEventListener","clsx","id","line","i","points","tension","lineCap","globalCompositeOperation","onClick","linesCopy","drawingHistoryCopy","pop","push","disabled","UndoOutlined","lastUndoLine","DeleteOutlined","Card","children","header","footer","color","size","randomColor","headerClassName","footerClassName","hideHeader","baseClass","bgColor","getColorFromLetter","toUpperCase","startsWith","backgroundColor","unknownText","Achievements","players","achievements","reference","getAnimationClass","level","achievement","achievementObj","player","playerId","delay","title","avatarId","name","Boolean","description","shape","TimeHighlight","iconSize","submitAction","httpsCallable","functions","StepSelectPrompt","prompts","onSubmitPrompt","isLoading","useLoading","onRandomSelect","promptId","shuffle","prompt","randomSelection","useMock","fullWidth","contained","text","ghost","PhasePromptSelection","state","info","useStep","goToNextStep","setStep","user","useUser","translate","useLanguage","request","useAPICall","apiFunction","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitPromptAPIRequest","phase","allowedPhase","PHASES","ListIcon","onClose","currentRound","duration","StepTimedDrawing","currentPrompt","onSubmitDrawing","isTimesUp","setTimesUp","onSubmit","stringify","author","AVATARS","steps","onExpire","AnimatedLoaderIcon","background","padding","PhaseDrawing","useOnSubmitDrawingAPIRequest","DrawingIcon","buttonText","withoutTimer","order","gameOrder","activePlayerId","reorderByUser","StepNameDrawing","onSubmitGuess","setTitle","onSubmitTitle","guess","placeholder","onPressEnter","PhaseNaming","useOnSubmitGuessAPIRequest","WriteIdeaIcon","Page","slide","albumColor","currentPage","totalSlides","animationClass","useMemo","addressUser","Album","albumEntry","albumOwner","getAvatarColorById","slides","StepAlbum","album","useTemporarilyHidePlayersBar","areControlsLocked","setAreControlsLocked","currentEntry","setCurrentEntry","setCurrentPage","barSize","setBarSize","totalPages","reduce","total","totalTime","useCountdown","autoStart","timeLeft","isRunning","currentAlbumEntry","currentAlbumLastPageIndex","isLastAlbum","onNextPage","useCallback","c","s","onNextAlbum","useEffect","abs","autoTriggerTime","PhasePresentation","PhotoAlbumIcon","unskippable","PhaseGameOver","slideCount","cardWidth","useCardWidth","minWidth","announcementIcon","TheEndIcon","T","achievementsReference","gridTemplateColumns","slice","key","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION"],"sourceRoot":""}