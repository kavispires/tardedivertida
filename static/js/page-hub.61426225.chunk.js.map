{"version":3,"file":"static/js/page-hub.61426225.chunk.js","mappings":"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","sources":["components/auth/LogoutButton.tsx","components/general/GameTags.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","hooks/useDevFeatures.ts","pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx","pages/Hub/components/GameCustomizations.tsx","pages/Hub/components/CreateGameModal.tsx","hooks/useRedirectToNewGame.ts","pages/Hub/components/GameCard.tsx","pages/Hub/components/DevEmulatorAlert.tsx","pages/Hub/components/Filters.tsx","pages/Hub/Hub.tsx"],"sourcesContent":["import { useMutation } from '@tanstack/react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { App, Button, type ButtonProps, Popconfirm } from 'antd';\nimport { signOut } from 'services/firebase';\nimport { Translate } from 'components/language';\n// Services\n\nexport function LogoutButton(props: ButtonProps) {\n  const navigate = useNavigate();\n  const { message } = App.useApp();\n\n  const { isPending, mutate } = useMutation({\n    mutationKey: ['sign-out'],\n    mutationFn: async () => await signOut(),\n    onSuccess: () => {\n      navigate('/');\n    },\n    onError: (error: any) => {\n      message.error(`Something went wrong: ${JSON.stringify(error, null, 2)}`);\n    },\n  });\n\n  return (\n    <Popconfirm\n      title={<Translate pt=\"Tem certeza que quer deslogar?\" en=\"Are you sure you want to log out?\" />}\n      onConfirm={() => mutate()}\n      key=\"logout-button\"\n    >\n      <Button danger ghost {...props} loading={isPending}>\n        Logout\n      </Button>\n    </Popconfirm>\n  );\n}\n","import { useMemo } from 'react';\n// Ant Design Resources\nimport { Space, type SpaceProps, Tag, Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { TAG_DICT } from 'utils/constants';\n// Icons\nimport { BrainIcon } from 'icons/BrainIcon';\nimport { CloverIcon } from 'icons/CloverIcon';\nimport { CompetitiveGameIcon } from 'icons/CompetitiveGameIcon';\nimport { CooperativeGameIcon } from 'icons/CooperativeGameIcon';\nimport { DrawingIcon } from 'icons/DrawingIcon';\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\nimport { GamblingChipIcon } from 'icons/GamblingChipIcon';\nimport { ImageCardsIcon } from 'icons/ImageCardsIcon';\nimport { MedalIcon } from 'icons/MedalIcon';\nimport { PuzzleIcon } from 'icons/PuzzleIcon';\nimport { RobotIcon } from 'icons/RobotIcon';\nimport { SmartphoneIcon } from 'icons/SmartphoneIcon';\nimport { TalkIcon } from 'icons/TalkIcon';\nimport { ThinkingIcon } from 'icons/ThinkingIcon';\nimport { TimerIcon } from 'icons/TimerIcon';\nimport { TogetherGameIcon } from 'icons/TogetherGameIcon';\nimport { TraitorIcon } from 'icons/TraitorIcon';\nimport { TurnBasedGameIcon } from 'icons/TurnBasedGameIcon';\nimport { VoteIcon } from 'icons/VoteIcon';\nimport { WritingIcon } from 'icons/WritingIcon';\n// Sass\nimport './GameTags.scss';\n\nconst sortTags = (tags: string[]) => {\n  const sortedTags: string[] = [];\n\n  tags.forEach((tag) => {\n    if (TAG_DICT?.[tag]?.index !== undefined) {\n      sortedTags[TAG_DICT[tag].index] = tag;\n    } else if (sortedTags.length < 18) {\n      sortedTags[18] = tag;\n    } else {\n      sortedTags.push(tag);\n    }\n  });\n\n  return sortedTags.filter((v) => Boolean(v));\n};\n\nconst icons: Dictionary<any> = {\n  competitive: CompetitiveGameIcon,\n  cooperative: CooperativeGameIcon,\n  'same-time': TogetherGameIcon,\n  'turn-based': TurnBasedGameIcon,\n  drawing: DrawingIcon,\n  writing: WritingIcon,\n  guessing: ThinkingIcon,\n  voting: VoteIcon,\n  pairing: EvaluateIcon,\n  'push-your-luck': CloverIcon,\n  'brain-burner': BrainIcon,\n  discussion: TalkIcon,\n  timed: TimerIcon,\n  traitor: TraitorIcon,\n  images: ImageCardsIcon,\n  betting: GamblingChipIcon,\n  achievements: MedalIcon,\n  bots: RobotIcon,\n  'mobile-friendly': SmartphoneIcon,\n  puzzle: PuzzleIcon,\n};\n\ntype GameTagsProps = {\n  tags: string[];\n  gameCode: GameCode;\n} & SpaceProps;\n\nexport function GameTags({ tags, gameCode, ...rest }: GameTagsProps) {\n  const { language } = useLanguage();\n\n  const { buttonTags, otherTags } = useMemo(() => {\n    const sortedTags = sortTags(tags);\n\n    const buttonTags = sortedTags.filter((tag) => icons[tag]);\n\n    const otherTags = sortedTags.filter((tag) => !icons[tag]);\n\n    return { buttonTags, otherTags };\n  }, [tags]);\n\n  return (\n    <Space wrap {...rest} direction=\"vertical\">\n      <div className=\"game-tags-group\">\n        {buttonTags.map((tag) => {\n          const Icon = icons[tag];\n\n          return (\n            <Tooltip key={`${gameCode}-${tag}`} title={TAG_DICT[tag]?.label[language]}>\n              <Icon style={{ width: 36 }} className=\"game-tags-group__icon\" />\n            </Tooltip>\n          );\n        })}\n      </div>\n\n      {otherTags.map((tag) => (\n        <Tag key={`${gameCode}-${tag}`} color={TAG_DICT[tag]?.color}>\n          {TAG_DICT[tag]?.label[language]}\n        </Tag>\n      ))}\n    </Space>\n  );\n}\n","import type { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse, type CollapseProps } from 'antd';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps) {\n  const panels: CollapseProps['items'] = [\n    {\n      key: '1',\n      label: <Translate pt=\"Regras\" en=\"Rules\" custom={title} />,\n      children: children,\n    },\n  ];\n\n  return (\n    <Instruction contained>\n      <Collapse ghost items={panels} />\n    </Instruction>\n  );\n}\n","import type { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { FixedMenuButton } from 'components/buttons';\nimport { Translate } from 'components/language';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps) {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n    />\n  );\n}\n","import type { CarouselRef } from 'antd/es/carousel';\nimport clsx from 'clsx';\nimport { createRef } from 'react';\nimport { useKeyPressEvent } from 'react-use';\n// Ant Design Resources\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps) {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}no-rules.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <SpaceContainer className={actionsClassName}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </SpaceContainer>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps) {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\nimport { Button, type ButtonProps, Modal } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps) {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <div className=\"rules-modal-content\">\n            <RulesCarousel info={gameInfo} />\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Internal\nimport { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useLocation, useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Segmented } from 'antd';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import type { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Internal\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\" wrap>\n            {extra}\n          </Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Switch, Radio, Checkbox } from 'antd';\n// Types\nimport type { GameInfo, GameInfoOption } from 'types/game-info';\n// Components\nimport { Translate } from 'components/language';\n// Adapters\n// Hooks\n// Constants\n\ntype GameCustomizationsProps = {\n  options?: GameInfo['options'];\n  disabled: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\n\nexport function GameCustomizations({\n  options = [],\n  disabled,\n  onChangeOptions,\n  selectedOptions,\n}: GameCustomizationsProps) {\n  if (!options || options.length === 0) {\n    return (\n      <div className=\"create-game-modal-options create-game-modal-options__no-options\">\n        <Typography.Text>\n          <Translate pt=\"Este jogo não possui customizações\" en=\"This game does not support customizations\" />\n        </Typography.Text>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"create-game-modal-options\">\n      <Typography.Title level={5} className=\"create-game-modal-options__title\">\n        <Translate pt=\"Opções:\" en=\"Options:\" />\n      </Typography.Title>\n      <div className=\"create-game-modal-options__list\">\n        {(options ?? []).map((option) => (\n          <Typography.Paragraph\n            key={`option-${option.label}`}\n            className={clsx(\n              'create-game-modal-options__option',\n              option.disabled && 'create-game-modal-options__option--disabled',\n            )}\n          >\n            <div className=\"create-game-modal-options__label\">\n              <span>{option.label}</span>\n              {option.kind !== 'switch' && Boolean(option.description) && (\n                <div className=\"create-game-modal-options__option-description\">{option.description}</div>\n              )}\n            </div>\n\n            {option.kind === 'switch' && (\n              <SwitchOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n            {option.kind === 'radio' && (\n              <RadioOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n            {option.kind === 'checkbox' && (\n              <CheckboxOptions\n                option={option}\n                disabled={disabled}\n                onChangeOptions={onChangeOptions}\n                selectedOptions={selectedOptions}\n              />\n            )}\n\n            {option.kind === 'switch' && Boolean(option.description) && (\n              <span className=\"create-game-modal-options__option-description\">{option.description}</span>\n            )}\n          </Typography.Paragraph>\n        ))}\n      </div>\n    </div>\n  );\n}\n\ntype OptionProps = {\n  option: GameInfoOption;\n  disabled?: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\n\nfunction SwitchOptions({ option, disabled, onChangeOptions, selectedOptions }: OptionProps) {\n  return (\n    <>\n      <span\n        className={clsx(\n          'create-game-modal-options__off',\n          !selectedOptions[option.key] && 'create-game-modal-options--selected',\n        )}\n      >\n        {option?.values[0].label ?? ''}\n      </span>\n      <Switch disabled={disabled || option.disabled} onChange={(e) => onChangeOptions(option.key, e)} />\n      <span\n        className={clsx(\n          'create-game-modal-options__on',\n          selectedOptions[option.key] && 'create-game-modal-options--selected',\n        )}\n      >\n        {option?.values[1].label ?? ''}\n      </span>\n    </>\n  );\n}\n\nfunction RadioOptions({ option, disabled, onChangeOptions }: OptionProps) {\n  return (\n    <Radio.Group\n      disabled={disabled || option.disabled}\n      onChange={(e) => onChangeOptions(option.key, e.target.value)}\n      defaultValue={option.values[0].value}\n      className=\"create-game-modal-options__selections\"\n    >\n      {option.values.map((value) => (\n        <Radio key={String(value.value)} value={value.value}>\n          {value.label}\n        </Radio>\n      ))}\n    </Radio.Group>\n  );\n}\n\nfunction CheckboxOptions({ option, disabled, onChangeOptions }: OptionProps) {\n  return (\n    <Checkbox.Group\n      disabled={disabled || option.disabled}\n      onChange={(v) => onChangeOptions(option.key, v)}\n      className=\"create-game-modal-options__selections\"\n      options={option.values}\n    />\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useCopyToClipboard } from 'react-use';\n// Ant Design Resources\nimport { Image, Modal, Button, Divider, Alert, App } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useGlobalLocalStorage } from 'hooks/useGlobalLocalStorage';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useRedirectToNewGame } from 'hooks/useRedirectToNewGame';\n// Services\nimport { HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { Loading } from 'components/loaders';\nimport { Instruction, Title } from 'components/text';\n// Internal\nimport { GameCustomizations } from './GameCustomizations';\n\nconst updateLocal24hGameIds = (latestGameIds: NumberDictionary, newId: GameId) => {\n  const now = Date.now();\n  const past24Hours = now - 1000 * 60 * 60 * 24;\n  const cleanedUpIds = Object.entries(latestGameIds ?? {}).reduce((acc: PlainObject, [key, timestamp]) => {\n    if (timestamp > past24Hours) {\n      acc[key] = timestamp;\n    }\n    return acc;\n  }, {});\n  return {\n    ...cleanedUpIds,\n    [newId]: now,\n  };\n};\n\nconst latestGameBeforeNewOne = (latestGameIds: NumberDictionary) => {\n  const idsObjectList = Object.entries(latestGameIds).map(([gameId, createdAt]) => ({ gameId, createdAt }));\n  if (idsObjectList.length < 2) {\n    return null;\n  }\n\n  const orderedList = orderBy(idsObjectList, 'createdAt', 'desc');\n  const twoHoursInMilliseconds = 2 * 60 * 60 * 1000; // 2 hours\n  const currentMilliseconds = Date.now();\n\n  // Check if game is too old\n  if (orderedList[1].createdAt - currentMilliseconds > twoHoursInMilliseconds) {\n    return null;\n  }\n\n  return orderedList[1].gameId;\n};\n\nconst getOptionsDefaultValues = (\n  options: GameInfo['options'],\n): Record<string, boolean | string | string[]> => {\n  return (\n    options?.reduce((acc: Record<string, boolean | string | string[]>, option) => {\n      if (option.kind === 'switch') {\n        acc[option.key] = false;\n      }\n      if (option.kind === 'radio') {\n        acc[option.key] = option.values[0].value;\n      }\n      if (option.kind === 'checkbox') {\n        acc[option.key] = [];\n      }\n      return acc;\n    }, {}) ?? {}\n  );\n};\n\ntype CreateGameFlowProps = {\n  gameInfo: GameInfo;\n};\n\nexport function CreateGameFlow({ gameInfo }: CreateGameFlowProps) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => setOpen(true)} block disabled={!gameInfo.available}>\n        <Translate pt=\"Criar\" en=\"Create\" />\n      </Button>\n      {open && <CreateGameModal gameInfo={gameInfo} open={open} setOpen={setOpen} />}\n    </>\n  );\n}\n\ntype CreateGameModalProps = {\n  gameInfo: GameInfo;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n};\n\nfunction CreateGameModal({ gameInfo, open, setOpen }: CreateGameModalProps) {\n  const { message, notification } = App.useApp();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  const { language, translate } = useLanguage();\n  const { setLoader } = useLoading();\n\n  const [isLoading, setLoading] = useState(false);\n  const [gameId, setGameId] = useState(null);\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUserName] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [options, setOptions] = useState(getOptionsDefaultValues(gameInfo.options));\n  const [latestGameIds, setLatestGameIds] = useGlobalLocalStorage('latestGameIds');\n  const previousGameId = latestGameBeforeNewOne(latestGameIds);\n\n  const { startRedirect, isSettingRedirect, wasRedirectSuccessful } = useRedirectToNewGame();\n\n  useEffect(() => {\n    if (state.value && gameId) {\n      message.info(`Copied to clipboard: ${state.value}`);\n    }\n  }, [state, gameId, message]);\n\n  const onChangeOptions = (key: string, value: boolean | string | string[]) => {\n    setOptions((s) => ({\n      ...s,\n      [key]: value,\n    }));\n  };\n\n  const createGame = async () => {\n    try {\n      setLoader('create', true);\n      setLoading(true);\n\n      const response: PlainObject = await HOST_API.run({\n        action: HOST_API_ACTIONS.CREATE_GAME,\n        gameName: gameInfo.gameName,\n        language,\n        options,\n        version: gameInfo.version,\n      });\n      if (response.data.gameId) {\n        setGameId(response.data.gameId);\n        setUserId(null);\n        setUserName('');\n        setUserAvatarId('');\n        setLatestGameIds(updateLocal24hGameIds(latestGameIds, response.data.gameId));\n        const baseUrl = window.location.href.split(pathname)[0];\n        copyToClipboard(`${baseUrl}/${response.data.gameId}`);\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Aplicativo encontrou um erro ao tentar criar o jogo',\n          'The application found an error while trying to create a game',\n          language,\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      setOpen(false);\n    } finally {\n      setLoading(false);\n      setLoader('create', false);\n    }\n  };\n\n  const onConfirmGame = async () => {\n    if (gameId) {\n      navigate(`/${gameId}`);\n    } else {\n      message.info(\n        translate('Péra! O jogo ainda não foi inicializado.', 'Wait! The game has not been created'),\n      );\n    }\n  };\n\n  return (\n    <Modal\n      title={`${translate('Criando novo jogo', 'Creating new game')}: ${gameInfo.title[language]}`}\n      open={open}\n      onCancel={() => setOpen(false)}\n      onOk={onConfirmGame}\n      okButtonProps={{ disabled: Boolean(!gameId) || isSettingRedirect }}\n      maskClosable={false}\n    >\n      <>\n        <Image\n          alt={gameInfo.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          className=\"round-corners\"\n        />\n\n        {!gameId && (\n          <Instruction>\n            <Translate pt=\"Você está criando um jogo em:\" en=\"You are creating a game in:\" />{' '}\n            <LanguageSwitch />\n          </Instruction>\n        )}\n\n        <GameCustomizations\n          options={gameInfo.options}\n          disabled={isLoading || Boolean(gameId)}\n          onChangeOptions={onChangeOptions}\n          selectedOptions={options}\n        />\n\n        <Divider />\n\n        {isLoading && (\n          <>\n            <Instruction>\n              <Translate pt=\"O jogo está sendo criado...\" en=\"The game session is being created\" />\n            </Instruction>\n            <Loading message={translate('Gerando...', 'Generating...')} margin />\n          </>\n        )}\n\n        {gameInfo.version.startsWith('alpha') && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message={\n              <Translate\n                pt=\"Este jogo está em alpha, não o jogue\"\n                en=\"This game is still in alpha and shouldn't be played\"\n              />\n            }\n          />\n        )}\n\n        {gameInfo.version.startsWith('beta') && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message={\n              <Translate\n                pt=\"Este jogo está em beta, prossiga com cuidado\"\n                en=\"This game is in beta and bugs might be everywhere\"\n              />\n            }\n          />\n        )}\n\n        {gameId ? (\n          <div>\n            <Title className=\"center\">\n              <Translate pt=\"Jogo inicializado\" en=\"Game Initialized\" />: {gameId}\n            </Title>\n            <Instruction>\n              {previousGameId && !wasRedirectSuccessful && (\n                <Alert\n                  type=\"info\"\n                  showIcon\n                  message={\n                    <>\n                      <Translate\n                        pt={<>Você quer redirecionar jogadores em {previousGameId} para essa nova partida?</>}\n                        en={<>Redirect players in {previousGameId} to this new play?</>}\n                      />\n                      <Button\n                        size=\"large\"\n                        onClick={() => {\n                          startRedirect(previousGameId ?? '', gameId ?? '', gameInfo.gameName);\n                        }}\n                        disabled={!gameId || !previousGameId}\n                        loading={isSettingRedirect}\n                      >\n                        <Translate pt=\"Redirecione-os\" en=\"Redirect them\" />\n                      </Button>\n                    </>\n                  }\n                />\n              )}\n              {wasRedirectSuccessful && (\n                <Alert\n                  type=\"info\"\n                  showIcon\n                  message={\n                    <Translate\n                      pt={\n                        <>\n                          Jogadores em {previousGameId} foram convidados para o jogo {gameId}\n                        </>\n                      }\n                      en={\n                        <>\n                          Players in {previousGameId} have been invited to {gameId}\n                        </>\n                      }\n                    />\n                  }\n                />\n              )}\n            </Instruction>\n          </div>\n        ) : (\n          <SpaceContainer align=\"center\">\n            <Button type=\"primary\" size=\"large\" disabled={isLoading} onClick={createGame}>\n              <Translate pt=\"Criar Jogo\" en=\"Create Game\" />\n            </Button>\n          </SpaceContainer>\n        )}\n      </>\n    </Modal>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\n// Ant Design Resources\nimport { App } from 'antd';\n// Types\nimport type { GameMeta } from 'types/game';\n// Services\nimport { GAME_API, GAME_API_COMMON_ACTIONS, HOST_API, HOST_API_ACTIONS } from 'services/adapters';\n// Internal\nimport { useCurrentUserContext } from './useCurrentUserContext';\n\ntype GameMetaResponse = {\n  data: GameMeta;\n};\n\nexport function useRedirectToNewGame() {\n  const { notification } = App.useApp();\n  const { currentUser } = useCurrentUserContext();\n  const [happenedOnce, setHappenedOnce] = useState(false);\n  const [newGame, setNewGame] = useState({\n    gameId: '',\n    gameName: '',\n  });\n\n  const mutation = useMutation<unknown, Error, PlainObject, unknown>({\n    mutationKey: ['oldState', newGame.gameId],\n    mutationFn: async ({ prevGameId, payload }) => {\n      const metaResponse = (await GAME_API.run({\n        action: GAME_API_COMMON_ACTIONS.LOAD_GAME,\n        gameId: prevGameId,\n      })) as GameMetaResponse;\n\n      const meta = metaResponse.data;\n\n      return await HOST_API.run({\n        gameId: prevGameId,\n        gameName: meta?.gameName ?? '',\n        playerId: currentUser.id,\n        action: HOST_API_ACTIONS.FORCE_STATE_PROPERTY,\n        state: payload,\n      });\n    },\n    onSuccess: async () => {\n      notification.success({\n        message: 'Redirect successfully triggered',\n      });\n    },\n    onError: (e: any) => {\n      console.error(e);\n      notification.error({\n        message: 'Failed to load previous game to continue the redirect',\n        description: JSON.stringify(e.message),\n      });\n    },\n  });\n\n  const startRedirect = async (prevGameId: GameId, newGameId: GameId, newGameName: GameName) => {\n    if (happenedOnce) {\n      notification.error({\n        message: 'Redirect has failed to trigger',\n      });\n      return;\n    }\n    setNewGame({\n      gameId: newGameId,\n      gameName: newGameName,\n    });\n\n    await mutation.mutateAsync({\n      prevGameId,\n      gameName: newGameName,\n      payload: {\n        redirect: {\n          redirectAt: Date.now(),\n          gameId: newGameId,\n          gameName: newGameName,\n        },\n      },\n    });\n    setHappenedOnce(true);\n  };\n\n  return {\n    isSettingRedirect: mutation.isPending,\n    startRedirect,\n    wasRedirectSuccessful: mutation.isSuccess,\n  };\n}\n","// Ant Design Resources\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport { Card, Image, Divider, Badge, Space, Tag, Tooltip } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport { calculateGameAverageDuration, truncateRecommended } from 'utils/helpers';\n// Components\nimport { GameTags } from 'components/general/GameTags';\nimport { RulesModal } from 'components/rules';\n// Internal\nimport { CreateGameFlow } from './CreateGameModal';\n\nconst getVersionColor = (version: string) => {\n  if (version.includes('dev')) {\n    return '#6cb3f6';\n  }\n\n  if (version.includes('alpha')) {\n    return '#F97659';\n  }\n\n  if (version.includes('beta')) {\n    return '#F9D859';\n  }\n\n  const major = Number(version.split('.')[0]);\n\n  if (Number.isNaN(major)) {\n    return '#96A0A3';\n  }\n\n  if (major === 0) {\n    return '#F9D859';\n  }\n\n  if (major === 1) {\n    return '#72D984';\n  }\n\n  if (major === 2) {\n    return '#7CBD51';\n  }\n\n  if (major >= 3) {\n    return '#7CBD51';\n  }\n\n  return '#96A0A3';\n};\n\ntype GameCardProps = {\n  game: GameInfo;\n  isAdmin?: boolean;\n};\n\nexport function GameCard({ game, isAdmin = true }: GameCardProps) {\n  const { language, translate } = useLanguage();\n\n  const duration = calculateGameAverageDuration(game);\n\n  return (\n    <Card\n      key={game.gameName}\n      className=\"game-card\"\n      cover={\n        <Badge.Ribbon text={game.version} color={getVersionColor(game.version)}>\n          <Image\n            alt={game.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${game.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          />\n        </Badge.Ribbon>\n      }\n    >\n      <div className=\"game-card__contents\">\n        <Space direction=\"vertical\" className=\"full-width\">\n          <Card.Meta\n            title={\n              <span className=\"game-card__title\" title={game.title[language]}>\n                {game.title[language]}{' '}\n                <span>\n                  <Tooltip title={translate('Código do jogo começará com', 'The game id will start with')}>\n                    <Tag>{game.gameCode}</Tag>\n                  </Tooltip>\n                </span>\n              </span>\n            }\n            description={`${translate('Baseado em', 'Based on')} ${game.basedOn\n              .split('')\n              .reverse()\n              .join('')}`}\n          />\n\n          <Card.Meta className=\"game-card__description\" description={game.summary[language]} />\n\n          {Boolean(game.rules?.[language]?.length > 1) && (\n            <RulesModal\n              gameInfo={game}\n              buttonProps={{\n                size: 'small',\n                className: 'game-card__margin-bottom',\n              }}\n            />\n          )}\n\n          <GameTags\n            wrap\n            size={[1, 6]}\n            style={{ display: 'flex' }}\n            gameCode={game.gameCode}\n            tags={game.tags}\n          />\n        </Space>\n      </div>\n\n      <div className=\"game-card__actions\">\n        {game.duration && (\n          <Card.Meta\n            description={\n              <>\n                <ClockCircleOutlined /> {duration.min} min - {duration.max} min (Avg: {duration.ideal} min)\n              </>\n            }\n          />\n        )}\n\n        <Divider className=\"game-card__divider\" />\n\n        <Space direction=\"vertical\">\n          <Card.Meta\n            description={translate(\n              `Para ${game.playerCount.min}-${game.playerCount.max} jogadores`,\n              `For ${game.playerCount.min}-${game.playerCount.max} players`,\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count\"\n            description={translate(\n              `Melhor com ${game.playerCount.best || '?'} jogadores`,\n              `Best wih ${game.playerCount.best || '?'} players`,\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count game-card__margin-bottom\"\n            description={translate(\n              `Recomendado jogar com ${truncateRecommended(game.playerCount.recommended)}`,\n              `Recommended with ${truncateRecommended(game.playerCount.recommended)}`,\n            )}\n          />\n        </Space>\n\n        {isAdmin && (\n          <div style={{ marginTop: '1rem' }}>\n            {['dev', 'beta', 'stable'].includes(game.release) && <CreateGameFlow gameInfo={game} />}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","import { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Alert, Button, Modal } from 'antd';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\n\n/**\n * The emulator only properly works if using the local ip, to allow multi device testing\n * including mobile, this component will display an alert in case the current port is localhost\n */\nexport function DevEmulatorAlert() {\n  const { isDevEnv } = useDevFeatures();\n  const [stay, setStay] = useState(false);\n  const [usingFirestoreEmulator] = useGlobalState('usingFirestoreEmulator');\n  const [usingFunctionsEmulator] = useGlobalState('usingFunctionsEmulator');\n\n  const ip = process.env.REACT_APP_LOCAL_IP;\n  const displayDevWarningMessage = isDevEnv && window.location.hostname !== usingFirestoreEmulator;\n  const displayDevWarningMessageFunctions = isDevEnv && window.location.hostname !== usingFunctionsEmulator;\n  const { port, pathname, hash, protocol } = window.location;\n  const newPath = `${ip}:${port}${pathname}/${hash}`.replace('//', '/');\n  const emulatorUrl = `${protocol}//${newPath}`;\n\n  useEffectOnce(() => {\n    if (!stay && isDevEnv && displayDevWarningMessage) {\n      Modal.confirm({\n        title: 'Wrong Dev Environment',\n        icon: <ExclamationCircleOutlined />,\n        content: 'You are in a development environment and not using the Firestore emulator.',\n        okText: 'Switch Routes',\n        cancelText: 'Stay in Localhost',\n        onOk: () => {\n          setStay(true);\n          window.location.href = emulatorUrl;\n        },\n      });\n    }\n  });\n\n  if (!isDevEnv) return <></>;\n\n  return (\n    <>\n      {displayDevWarningMessage && (\n        <Alert\n          message={\n            <>\n              You are in a development environment and not using the Firestore emulator.{' '}\n              <Button href={emulatorUrl} type=\"link\">\n                Switch Routes\n              </Button>\n            </>\n          }\n          type=\"error\"\n          showIcon\n          banner\n        />\n      )}\n      {displayDevWarningMessageFunctions && (\n        <Alert\n          message={\n            <>\n              You are in a development environment and not using the Functions emulator.{' '}\n              <Button href={emulatorUrl} type=\"link\">\n                Switch Routes\n              </Button>\n            </>\n          }\n          type=\"warning\"\n          showIcon\n          banner\n        />\n      )}\n      {!displayDevWarningMessageFunctions && !displayDevWarningMessage && (\n        <Alert message={<>You are running emulators safely.</>} type=\"success\" showIcon banner />\n      )}\n    </>\n  );\n}\n","import { capitalize } from 'lodash';\nimport { useMemo } from 'react';\n// Ant Design Resources\nimport { FilterOutlined } from '@ant-design/icons';\nimport { InputNumber, Select, Space, type TreeDataNode, TreeSelect } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { SEPARATOR, TAG_DICT } from 'utils/constants';\n\nconst { SHOW_PARENT } = TreeSelect;\n\ntype FiltersProps = {\n  setTagFilters: GenericFunction;\n  setNumberFilters: GenericFunction;\n  availabilityCount: number;\n};\nexport function Filters({ availabilityCount, setTagFilters, setNumberFilters }: FiltersProps) {\n  const onNumberFiltersUpdate = (key: string, value: number) => {\n    setNumberFilters((prevState: NumberDictionary) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onPlayingSelectChange = (value: string) => {\n    onNumberFiltersUpdate('recommendedWith', Number(value === 'recommended'));\n    onNumberFiltersUpdate('bestWith', Number(value === 'best'));\n  };\n\n  return (\n    <Space className=\"hub-filters\" wrap size=\"middle\">\n      <span>\n        <FilterOutlined /> ({availabilityCount})\n      </span>\n      <Select defaultValue=\"\" style={{ minWidth: '20ch' }} size=\"small\" onChange={onPlayingSelectChange}>\n        <Select.Option value=\"\">Playing with</Select.Option>\n        <Select.Option value=\"recommended\">Recommended with</Select.Option>\n        <Select.Option value=\"best\">Best with</Select.Option>\n      </Select>\n      <div className=\"hub-filters__entry\">\n        <label htmlFor=\"players-input\">Players</label>\n        <InputNumber\n          id=\"players-input\"\n          min={2}\n          max={12}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('players', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label htmlFor=\"duration\">Duration</label>\n        <InputNumber\n          id=\"duration\"\n          min={15}\n          step={15}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('duration', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label htmlFor=\"tags\">Tags</label>\n        <TagTreeSelect value={undefined} onTreeSelectChange={setTagFilters} />\n      </div>\n    </Space>\n  );\n}\n\nfunction TagTreeSelect({ value, onTreeSelectChange }: any) {\n  const { dualTranslate } = useLanguage();\n\n  const onChange = (tags: string[]) => {\n    onTreeSelectChange(\n      tags,\n      // .map((tag) => {\n      //   if (tag.includes(SEPARATOR)) {\n      //     return tag.split(SEPARATOR);\n      //   }\n      //   return tag;\n      // })\n      // .flat()\n    );\n  };\n\n  const treeData: TreeDataNode[] = useMemo(\n    () =>\n      Object.values(\n        Object.keys(TAG_DICT).reduce((acc: any, tagKey: string) => {\n          const tagObj = TAG_DICT[tagKey];\n          if (acc[tagObj.group] === undefined) {\n            acc[tagObj.group] = {\n              title: capitalize(tagObj.group),\n              value: tagObj.group,\n              children: [],\n            };\n          }\n\n          acc[tagObj.group].children.push({\n            title: capitalize(dualTranslate(tagObj.label)),\n            value: `${tagObj.group}${SEPARATOR}${tagKey}`,\n          });\n\n          return acc;\n        }, {}),\n      ),\n    [dualTranslate],\n  );\n\n  return (\n    <TreeSelect\n      treeData={treeData}\n      value={value}\n      onChange={onChange}\n      treeCheckable={true}\n      showCheckedStrategy={SHOW_PARENT}\n      placeholder=\"Select Game Tags\"\n      size=\"small\"\n      style={{\n        width: '100%',\n        minWidth: '400px',\n      }}\n    />\n  );\n}\n","import { orderBy } from 'lodash';\nimport { DevHeader } from 'pages/Dev/DevHeader';\nimport { useMemo, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Ant Design Resources\nimport { DatabaseFilled } from '@ant-design/icons';\nimport { Typography, Layout, Divider, Row, Col, Tag } from 'antd';\n// Types\nimport type { GameInfo } from 'types/game-info';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { SEPARATOR, TAG_RULES } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv } from 'utils/helpers';\nimport GAME_LIST from 'utils/info';\n// Components\nimport { LogoutButton } from 'components/auth/LogoutButton';\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { PageLayout } from 'components/layout/PageLayout';\n// Internal\nimport { GameCard } from './components/GameCard';\nimport { DevEmulatorAlert } from './components/DevEmulatorAlert';\nimport { Filters } from './components/Filters';\n\nconst statsCountsArray = orderBy(\n  Object.entries(\n    Object.values(GAME_LIST).reduce((acc: Record<string, number>, game) => {\n      if (acc[game.gameCode] === undefined) {\n        acc[game.gameCode] = 0;\n      }\n      acc[game.gameCode]++;\n      return acc;\n    }, {}),\n  ).map(([gameCode, count]) => `${gameCode}: ${count}`),\n);\n\nfunction Hub() {\n  useTitle('Hub - Tarde Divertida');\n  const { language } = useLanguage();\n  const [tagFilters, setTagFilters] = useState<string[]>([]);\n  const [numberFilters, setNumberFilters] = useState<NumberDictionary>({});\n\n  const gameList = useMemo(\n    () =>\n      Object.values(GAME_LIST).filter((game) => {\n        const result = [];\n\n        // Check player count\n        if (numberFilters.players) {\n          result.push(\n            game.playerCount.min <= numberFilters.players && game.playerCount.max >= numberFilters.players,\n          );\n\n          if (numberFilters.bestWith) {\n            result.push(numberFilters.players === game.playerCount.best);\n          }\n\n          if (numberFilters.recommendedWith) {\n            result.push(game.playerCount.recommended.includes(numberFilters.players));\n          }\n        }\n\n        // Check tags\n        // TODO: this does not account for tagGroups and concurrent tags\n        tagFilters.forEach((tagKey) => {\n          const [tagGroup, tag] = tagKey.split(SEPARATOR);\n\n          if (tagGroup && tag && TAG_RULES?.[tagGroup] === 'exclusive') {\n            result.push(game.tags.includes(tag));\n          } else if (tag) {\n            result.push(game.tags.includes(tag));\n          }\n        });\n\n        // Check time\n        if (numberFilters.duration) {\n          const duration = calculateGameAverageDuration(game, numberFilters.players ?? 0);\n\n          if (numberFilters.players) {\n            result.push(\n              numberFilters.duration >= duration.customTime - 10 &&\n                numberFilters.duration <= duration.customTime + 10,\n            );\n          } else {\n            result.push(numberFilters.duration >= duration.min && numberFilters.duration <= duration.max);\n          }\n        }\n\n        return result.every(Boolean);\n      }),\n    [tagFilters, numberFilters],\n  );\n\n  const { availableGames, comingSoonGames, devGames } = useMemo(() => {\n    const sortedGameList = orderBy(gameList, [`title.[${language}]`], ['asc']);\n\n    return sortedGameList.reduce(\n      (\n        acc: {\n          availableGames: GameInfo[];\n          devGames: GameInfo[];\n          comingSoonGames: GameInfo[];\n        },\n        game,\n      ) => {\n        if (['stable'].includes(game.release)) {\n          acc.availableGames.push(game);\n        } else if (['dev', 'beta'].includes(game.release)) {\n          acc.devGames.push(game);\n        } else {\n          acc.comingSoonGames.push(game);\n        }\n        return acc;\n      },\n      {\n        availableGames: [],\n        devGames: [],\n        comingSoonGames: [],\n      },\n    );\n  }, [gameList, language]);\n  return (\n    <PageLayout className=\"dev-layout\">\n      <DevHeader\n        title={\n          <>\n            <DatabaseFilled /> Hub\n          </>\n        }\n        subTitle={<Translate pt=\"Selecione um jogo para começar\" en=\"Select a game to start\" />}\n        extra={[\n          <LanguageSwitch key=\"language-switch\" />,\n          <LogoutButton key=\"logout-button\" danger ghost size=\"small\" />,\n        ]}\n      />\n\n      <DevEmulatorAlert />\n\n      <Filters\n        setTagFilters={setTagFilters}\n        setNumberFilters={setNumberFilters}\n        availabilityCount={availableGames.length}\n      />\n\n      <Layout.Content className=\"container\" id=\"main-container\">\n        {isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <Typography.Paragraph>\n              {statsCountsArray.map((e) => (\n                <Tag key={e}>{e}</Tag>\n              ))}\n            </Typography.Paragraph>\n            <RowOfGames games={devGames} />\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Disponíveis\" en=\"Available\" />\n        </Typography.Title>\n        <RowOfGames games={availableGames} />\n\n        <Divider />\n        {!isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <RowOfGames games={devGames} />\n\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Em Breve\" en=\"Coming Soon\" />\n        </Typography.Title>\n        <RowOfGames games={comingSoonGames} />\n      </Layout.Content>\n    </PageLayout>\n  );\n}\n\ntype RowOfGamesProps = {\n  games: GameInfo[];\n};\n\nfunction RowOfGames({ games }: RowOfGamesProps) {\n  if (games.length === 0) {\n    return (\n      <Typography.Text type=\"secondary\">\n        <Translate pt=\"Nenhum jogo encontrado nessa categoria\" en=\"No games found in this category\" />\n      </Typography.Text>\n    );\n  }\n\n  return (\n    <Row gutter={[8, 16]}>\n      {games.map((game: GameInfo) => (\n        <Col key={game.gameName} xs={24} sm={12} md={8} lg={8} xl={6} xxl={4}>\n          <GameCard game={game} isAdmin={['dev', 'beta', 'stable'].includes(game.release)} />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nexport default Hub;\n"],"names":["LogoutButton","props","navigate","useNavigate","message","App","useApp","useMutation","mutationKey","mutationFn","signOut","onSuccess","onError","error","JSON","stringify","isPending","mutate","title","pt","en","onConfirm","danger","ghost","loading","icons","competitive","CompetitiveGameIcon","cooperative","CooperativeGameIcon","TogetherGameIcon","TurnBasedGameIcon","drawing","DrawingIcon","writing","WritingIcon","guessing","ThinkingIcon","voting","VoteIcon","pairing","EvaluateIcon","CloverIcon","BrainIcon","discussion","TalkIcon","timed","TimerIcon","traitor","TraitorIcon","images","ImageCardsIcon","betting","GamblingChipIcon","achievements","MedalIcon","bots","RobotIcon","SmartphoneIcon","puzzle","PuzzleIcon","GameTags","tags","gameCode","rest","language","useLanguage","useMemo","sortedTags","forEach","tag","undefined","TAG_DICT","index","length","push","filter","v","Boolean","sortTags","buttonTags","otherTags","wrap","direction","className","map","Icon","label","style","width","color","CollapsibleRule","children","panels","key","custom","contained","items","PopoverRule","content","showLabel","type","position","icon","ReadOutlined","RulesCarousel","info","ruleClassName","actionsClassName","ref","createRef","useKeyPressEvent","current","prev","next","clsx","autoplay","autoplaySpeed","rules","rule","src","PUBLIC_URL","BANNERS","gameName","RULES","fallback","alt","Paragraph","SpaceContainer","onClick","size","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","buttonProps","translate","useState","isVisible","setVisibility","onCloseModal","open","onCancel","footer","useDevFeatures","useGlobalState","isDebugEnabled","setIsDebugEnabled","isDevEnv","toggleDevFeatures","s","DevMenu","pathname","useLocation","options","value","disabled","defaultValue","onChange","path","DevHeader","subTitle","extra","GameCustomizations","onChangeOptions","selectedOptions","Title","level","option","kind","description","SwitchOptions","RadioOptions","CheckboxOptions","Text","values","e","target","String","Group","updateLocal24hGameIds","latestGameIds","newId","now","Date","past24Hours","cleanedUpIds","Object","entries","reduce","acc","timestamp","CreateGameFlow","setOpen","block","available","CreateGameModal","notification","useCopyToClipboard","state","copyToClipboard","setLoader","useLoading","isLoading","setLoading","gameId","setGameId","setUserId","setUserName","setUserAvatarId","getOptionsDefaultValues","setOptions","useGlobalLocalStorage","setLatestGameIds","previousGameId","idsObjectList","createdAt","orderedList","orderBy","currentMilliseconds","latestGameBeforeNewOne","currentUser","useCurrentUserContext","happenedOnce","setHappenedOnce","newGame","setNewGame","mutation","prevGameId","payload","GAME_API","run","action","GAME_API_COMMON_ACTIONS","LOAD_GAME","metaResponse","meta","data","HOST_API","playerId","id","HOST_API_ACTIONS","FORCE_STATE_PROPERTY","success","console","startRedirect","newGameId","newGameName","mutateAsync","redirect","redirectAt","isSettingRedirect","wasRedirectSuccessful","isSuccess","useRedirectToNewGame","useEffect","createGame","CREATE_GAME","version","response","baseUrl","window","location","href","split","placement","onConfirmGame","onOk","okButtonProps","maskClosable","margin","startsWith","A","showIcon","align","getVersionColor","includes","major","Number","isNaN","GameCard","game","isAdmin","duration","calculateGameAverageDuration","cover","Ribbon","text","Meta","basedOn","reverse","join","summary","display","ClockCircleOutlined","min","max","ideal","playerCount","best","truncateRecommended","recommended","marginTop","release","DevEmulatorAlert","stay","setStay","usingFirestoreEmulator","usingFunctionsEmulator","displayDevWarningMessage","hostname","displayDevWarningMessageFunctions","port","hash","protocol","newPath","process","replace","emulatorUrl","useEffectOnce","Modal","confirm","ExclamationCircleOutlined","okText","cancelText","banner","SHOW_PARENT","TreeSelect","Filters","availabilityCount","setTagFilters","setNumberFilters","onNumberFiltersUpdate","prevState","FilterOutlined","minWidth","Option","htmlFor","step","TagTreeSelect","onTreeSelectChange","dualTranslate","treeData","keys","tagKey","tagObj","group","capitalize","SEPARATOR","treeCheckable","showCheckedStrategy","placeholder","statsCountsArray","GAME_LIST","count","RowOfGames","games","gutter","xs","sm","md","lg","xl","xxl","useTitle","tagFilters","numberFilters","gameList","result","players","bestWith","recommendedWith","tagGroup","TAG_RULES","customTime","every","availableGames","devGames","comingSoonGames","PageLayout","DatabaseFilled","Content"],"sourceRoot":""}