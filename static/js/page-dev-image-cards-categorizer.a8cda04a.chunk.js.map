{"version":3,"file":"static/js/page-dev-image-cards-categorizer.a8cda04a.chunk.js","mappings":"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","sources":["pages/Dev/ImageCards/ImageCardsCategorizer.tsx"],"sourcesContent":["import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Button, Card, Layout, Select, Space, Switch } from 'antd';\nimport { DevHeader } from '../DevHeader';\nimport { useMemo } from 'react';\nimport { ImageCard } from 'components/image-cards';\n\nimport { buildDictionaries, hasCardAchievedMinimumRequirements } from './utils';\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Components\nimport './dev-image-cards.scss';\nimport { useImageCardsData, useRandomCard } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\n\nfunction ImageCardsCategorizerPage() {\n  useTitle('Image Cards Categorizer | Dev | Tarde Divertida');\n\n  const cardWidth = useCardWidth(2, { containerId: 'root' });\n\n  const { data, isLoading, isDirty, setDirty, isSuccess, isSaving, save } = useImageCardsData();\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardId, card, onRandomCard, update, toggleHighlight } = useRandomCard(data, setDirty);\n\n  // Build local object of tags\n  const dataKey = JSON.stringify(data);\n  const { colors, mood, elements, actions } = useMemo(() => buildDictionaries(data), [dataKey]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleFocusChange = (value: string[]) => {\n    update('focus', value);\n  };\n\n  const handleColorChange = (value: string[]) => {\n    update('colors', value);\n  };\n\n  const handleMoodChange = (value: string[]) => {\n    update('mood', value);\n  };\n\n  const handleElementsChange = (value: string[]) => {\n    update('elements', value);\n  };\n\n  const handleActionsChange = (value: string[]) => {\n    update('actions', value);\n  };\n\n  return (\n    <Layout className=\"dev-layout\">\n      <DevHeader title=\"Image Cards Categorizer\" />\n      <Layout.Content className=\"dev-content\">\n        {isLoading && <div>Loading...</div>}\n        {isSaving && <div>Saving...</div>}\n        {isSuccess && !isSaving && (\n          <Space className=\"space-container\" direction=\"vertical\">\n            <Button onClick={onRandomCard}>Random Card</Button>\n\n            <Card\n              title={cardId}\n              extra={hasCardAchievedMinimumRequirements(card) && <CheckCircleFilled />}\n              key={cardId}\n            >\n              <div className=\"image-card-card\">\n                <div className=\"image-card-card__image\">\n                  <ImageCard imageId={cardId} cardWidth={cardWidth} />\n                </div>\n                <div className=\"image-card-card__data\">\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"focus\">Focus</label>\n                    <Select\n                      id=\"focus\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Focus\"\n                      onChange={handleFocusChange}\n                      options={elements}\n                      defaultValue={card.focus}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"actions\">Actions</label>\n                    <Select\n                      id=\"actions\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Actions\"\n                      onChange={handleActionsChange}\n                      options={actions}\n                      defaultValue={card.actions}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"colors\">Colors</label>\n                    <Select\n                      id=\"colors\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Colors\"\n                      onChange={handleColorChange}\n                      options={colors}\n                      defaultValue={card.colors}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"mood\">Mood</label>\n                    <Select\n                      id=\"mood\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Mood\"\n                      onChange={handleMoodChange}\n                      options={mood}\n                      defaultValue={card.mood}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label htmlFor=\"elements\">Elements</label>\n                    <Select\n                      id=\"elements\"\n                      mode=\"tags\"\n                      className=\"image-card-card__select\"\n                      placeholder=\"Elements\"\n                      onChange={handleElementsChange}\n                      options={elements}\n                      defaultValue={card.elements}\n                    />\n                  </div>\n\n                  <div className=\"image-card-card__item\">\n                    <label>Highlight</label>\n                    <div>\n                      <Switch checked={card.highlight} onChange={toggleHighlight} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Button type=\"primary\" onClick={() => save({})} disabled={!isDirty} loading={isSaving}>\n              Save\n            </Button>\n          </Space>\n        )}\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default ImageCardsCategorizerPage;\n"],"names":["useTitle","cardWidth","useCardWidth","containerId","useImageCardsData","data","isLoading","isDirty","setDirty","isSuccess","isSaving","save","useRandomCard","cardId","card","onRandomCard","update","toggleHighlight","dataKey","JSON","stringify","useMemo","buildDictionaries","colors","mood","elements","actions","className","title","direction","onClick","extra","hasCardAchievedMinimumRequirements","imageId","htmlFor","id","mode","placeholder","onChange","value","options","defaultValue","focus","checked","highlight","type","disabled","loading"],"sourceRoot":""}