{"version":3,"file":"static/js/page-dev-connect-items.e92dbb10.chunk.js","mappings":"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","sources":["components/cards/ItemCard.tsx","components/sprites/Sprite.tsx","hooks/useTDBaseUrl.ts","pages/Dev/ConnectItems/ConnectItems.tsx","pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Components\nimport { DualTranslate } from 'components/language';\nimport { Sprite } from 'components/sprites';\n// Sass\nimport './ItemCard.scss';\n\nexport type ItemCardProps = {\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional text to display\n   */\n  text?: DualLanguageValue;\n  /**\n   * Optional padding\n   */\n  padding?: number;\n};\n\nconst BASE = 64;\n\n/**\n * Retrieves the source and item ID based on a given string.\n *\n * @param str - The input string.\n * @returns An array containing the source and item ID.\n */\nexport const getSource = (str: string) => {\n  const match = str.match(/\\d+/);\n  const numId = match ? parseInt(match[0], 10) : 0;\n  const itemId = `item-${numId}`;\n  const sourceId = Math.ceil(numId / BASE) * BASE;\n  const source = `items-${sourceId}`;\n  return [source, itemId];\n};\n\n/**\n * An item card component.\n */\nexport function ItemCard({ id, width = 75, className, title, text, padding }: ItemCardProps) {\n  const [source, itemId] = getSource(id);\n\n  const height = text ? 'auto' : `${width}px`;\n  const divPadding = padding === 0 ? { padding: 0 } : {};\n\n  return (\n    <div className={clsx('item-card', className)} style={{ width: `${width}px`, height, ...divPadding }}>\n      <Sprite source={source} id={itemId} width={width} title={title} padding={padding} />\n      {Boolean(text) && (\n        <span className=\"item-card__text\">\n          <DualTranslate>{text!}</DualTranslate>\n        </span>\n      )}\n    </div>\n  );\n}\n","import { useQuery } from '@tanstack/react-query';\n// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\nimport { Spin, Tooltip } from 'antd';\n// Hooks\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n\ntype SpriteProps = {\n  /**\n   * The sprite source name\n   */\n  source: string;\n  /**\n   * The id of the item\n   */\n  id: string;\n  /**\n   * The width of the item\n   */\n  width?: number;\n  /**\n   * Replacement title, usually the name of the item\n   */\n  title?: string;\n  /**\n   * Optional class name\n   */\n  className?: string;\n  /**\n   *\n   */\n  padding?: number;\n};\n\n/**\n * Loads a sprite from the Tarde Divertida sprites\n * @param {SpriteProps} props\n * @returns a single sprite item\n */\nexport function Sprite({ id, source, width = 75, padding = 6, title, className }: SpriteProps) {\n  const baseUrl = useTDBaseUrl('sprites');\n\n  const { isLoading, data, isError } = useQuery({\n    queryKey: ['sprite', source],\n    queryFn: async () => {\n      const response = await fetch(`${baseUrl}/sprites/${source}.svg`);\n      return await response.text();\n    },\n    enabled: !!id && !!source,\n  });\n\n  const paddedWidth = width - padding * 2;\n\n  if (isLoading) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <Spin />\n      </span>\n    );\n  }\n\n  const svgContent = data;\n\n  if (isError || !svgContent) {\n    return (\n      <span\n        style={{\n          width: `${paddedWidth}px`,\n          height: `${paddedWidth}px`,\n          padding,\n          display: 'grid',\n          placeItems: 'center',\n        }}\n        className={className}\n      >\n        <WarningOutlined />\n      </span>\n    );\n  }\n\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      style={{ width: `${paddedWidth}px`, height: `${paddedWidth}px`, padding }}\n      className={className}\n    >\n      <use xlinkHref={`#${id}`} dangerouslySetInnerHTML={{ __html: svgContent }} />\n      <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n        {title && (\n          <Tooltip title={title}>\n            <div style={{ background: 'transparent', width: '100%', height: '100vh' }}></div>\n          </Tooltip>\n        )}\n      </foreignObject>\n    </svg>\n  );\n}\n","/**\n * Returns the URL for the given kind of resource\n * @param kind the kind of resource\n * @returns the URL for the given kind of resource\n */\nexport function useTDBaseUrl(library: 'images' | 'sprites' | 'resources' | 'classic'): string {\n  const baseUrl = process.env.REACT_APP_TD_BASE_URL;\n\n  switch (library) {\n    case 'images':\n      return `${baseUrl}/${process.env.REACT_APP_TD_IMAGES}`;\n    case 'sprites':\n      return `${baseUrl}/${process.env.REACT_APP_TD_SPRITES}`;\n    case 'resources':\n      return `${baseUrl}/${process.env.REACT_APP_TD_RESOURCES}`;\n    case 'classic':\n      return `${baseUrl}/${process.env.REACT_APP_TD_CLASSIC}`;\n    default:\n      throw new Error('Invalid library');\n  }\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Radio, RadioChangeEvent, Space, Table, TableColumnType, Tag } from 'antd';\n// Utils\nimport { PUBLIC_URL, TOTAL_ALIEN_ITEMS } from 'utils/constants';\n// Components\nimport { ItemCard } from 'components/cards/ItemCard';\nimport { LoadingPage } from 'components/loaders';\n// Internal\nimport { DevHeader } from '../DevHeader';\nimport { ConnectionGroup, GroupSummary, ItemGroup } from './types';\n\n/**\n * Item Connections game\n * Get item A with 2 groups of at least 4 items where the only connection is item A\n * Get one of these groups\n * Get the other group but without the item A\n * Get another 2 groups that don't contain any of the items from the first 2 groups\n */\n\ntype ConnectItemsContentProps = {\n  data: Dictionary<ConnectionGroup>;\n};\n\nfunction ConnectItemsContent({ data }: ConnectItemsContentProps) {\n  const [view, setView] = useState('groups');\n\n  const sortedData = useMemo(\n    () =>\n      orderBy(\n        Object.values(data).filter((e) => e.items.length > 0),\n        [(v) => v.items.length, 'difficulty'],\n        ['asc', 'asc']\n      ),\n    [data]\n  );\n\n  const itemCount: ItemGroup[] = useMemo(() => {\n    const items: Record<string, GroupSummary[]> = {};\n    sortedData.forEach((group) => {\n      group.items.forEach((item) => {\n        if (group.items.length >= 0) {\n          if (!items[item]) {\n            items[item] = [];\n          }\n          items[item].push({\n            groupId: group.id,\n            name: group.name,\n            items: group.items.map(String),\n            count: group.items.length,\n          });\n        }\n      });\n    });\n\n    const allItems = new Array(Number(TOTAL_ALIEN_ITEMS))\n      .fill(0)\n      .map((_, i) => String(i + 1))\n      .reduce((acc: Record<string, GroupSummary[]>, id) => {\n        if (items[id]) {\n          acc[id] = items[id];\n        } else {\n          acc[id] = [];\n        }\n        return acc;\n      }, {});\n    return orderBy(\n      Object.entries(allItems).map(([itemId, groups]) => ({\n        itemId,\n        groups,\n        total: groups.length,\n      })),\n      ['total'],\n      ['asc']\n    );\n  }, [sortedData]);\n\n  return (\n    <Space className=\"container classifier full-width\" direction=\"vertical\">\n      <Radio.Group\n        options={[\n          { label: 'Groups', value: 'groups' },\n          { label: 'Items', value: 'items' },\n        ]}\n        onChange={({ target: { value } }: RadioChangeEvent) => setView(value)}\n        value={view}\n        optionType=\"button\"\n      />\n\n      {view === 'groups' && <GroupTable dataSource={sortedData} />}\n      {view === 'items' && <ItemsTable dataSource={itemCount} />}\n    </Space>\n  );\n}\n\ntype GroupTableProps = {\n  dataSource: ConnectionGroup[];\n};\n\nfunction GroupTable({ dataSource }: GroupTableProps) {\n  const columns: TableColumnType<ConnectionGroup>[] = [\n    {\n      title: 'Group',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Items',\n      dataIndex: 'items',\n      render: (items: number[], row) => (\n        <Space wrap>\n          {items.map((item) => (\n            <Space key={`${row.id}-${item}`} wrap direction=\"vertical\" align=\"center\">\n              <ItemCard id={String(item)} />\n              <Tag>{item}</Tag>\n            </Space>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Difficulty',\n      dataIndex: 'difficulty',\n    },\n  ];\n\n  return <Table columns={columns} dataSource={dataSource} pagination={false} size=\"small\" bordered />;\n}\n\ntype ItemsTableProps = {\n  dataSource: ItemGroup[];\n};\n\nfunction ItemsTable({ dataSource }: ItemsTableProps) {\n  const columns: TableColumnType<ItemGroup>[] = [\n    {\n      title: 'Item Id',\n      dataIndex: 'itemId',\n    },\n    {\n      title: 'Item',\n      dataIndex: 'itemId',\n      render: (id) => <ItemCard id={id} />,\n    },\n    {\n      title: 'Groups',\n      dataIndex: 'groups',\n      render: (groups: GroupSummary[], row) => (\n        <Space wrap>\n          {groups.map((group) => (\n            <Tag key={`${row.itemId}-${group.name}`}>\n              {group.name} ({group.count})\n            </Tag>\n          ))}\n        </Space>\n      ),\n    },\n    {\n      title: 'Total',\n      dataIndex: 'total',\n    },\n  ];\n\n  return <Table columns={columns} dataSource={dataSource} pagination={false} size=\"small\" bordered />;\n}\n\nfunction ConnectItemsPage() {\n  useTitle('Items Connections | Dev | Tarde Divertida');\n\n  const { data, isLoading, isSuccess } = useQuery<Dictionary<ConnectionGroup>>({\n    queryKey: ['connect-items'],\n    queryFn: async () => {\n      const response = await fetch(`${PUBLIC_URL.RESOURCES}/connect-items.json`);\n      return await response.json();\n    },\n  });\n\n  return (\n    <div>\n      <DevHeader\n        title=\"Items Connections\"\n        // extra={<Segmented options={segments} defaultValue={view} onChange={(v: any) => qp.add('view', v)} />}\n      />\n      {isLoading && <LoadingPage />}\n      {isSuccess && <ConnectItemsContent data={data} />}\n    </div>\n  );\n}\n\nexport default ConnectItemsPage;\n","import { useLocation, useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Segmented } from 'antd';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Internal\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\" wrap>\n            {extra}\n          </Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n"],"names":["getSource","str","match","numId","parseInt","itemId","sourceId","Math","ceil","ItemCard","id","width","className","title","text","padding","source","height","divPadding","clsx","style","Boolean","Sprite","baseUrl","useTDBaseUrl","useQuery","queryKey","queryFn","fetch","response","enabled","isLoading","data","isError","paddedWidth","display","placeItems","svgContent","WarningOutlined","viewBox","xlinkHref","dangerouslySetInnerHTML","__html","x","y","background","library","process","Error","ConnectItemsContent","useState","view","setView","sortedData","useMemo","orderBy","Object","values","filter","e","items","length","v","itemCount","forEach","group","item","push","groupId","name","map","String","count","allItems","Array","Number","TOTAL_ALIEN_ITEMS","fill","_","i","reduce","acc","entries","groups","total","direction","options","label","value","onChange","target","optionType","GroupTable","dataSource","ItemsTable","columns","dataIndex","render","row","wrap","align","I","pagination","size","bordered","useTitle","PUBLIC_URL","RESOURCES","json","isSuccess","DevMenu","pathname","useLocation","navigate","useNavigate","disabled","defaultValue","path","DevHeader","subTitle","extra"],"sourceRoot":""}