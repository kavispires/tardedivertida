{"version":3,"file":"static/js/6576.9bcbe921.chunk.js","mappings":"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","sources":["components/buttons/FixedMenuButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","hooks/useCountdown.ts","utils/info.ts"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, ButtonProps, Popover } from 'antd';\n\ntype FixedMenuButtonDefaultProps = {\n  /**\n   * What order it will show up in the screen\n   * 0 for rules\n   * 1 for extras (card size)\n   * 2 for admin only\n   */\n  position: 0 | 1 | 2 | -1;\n  /**\n   * The displayed icon\n   */\n  icon: ReactNode;\n  /**\n   * The optional label to follow the icon when hover\n   */\n  label?: ReactNode;\n  /**\n   * The custom class\n   */\n  className?: string;\n  /**\n   * Determine if label should be visible\n   */\n  showLabel?: boolean;\n  /**\n   * Any ant design button props\n   */\n  buttonProps?: ButtonProps;\n};\n\ninterface FixedMenuButtonPopoverProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'popover';\n  /**\n   * Content of popover, required when popover rule\n   */\n  content: ReactNode;\n  /**\n   * Guard onclick from button only\n   */\n  onClick?: never;\n}\n\ninterface FixedMenuButtonButtonOnlyProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'button';\n  /**\n   * The click function for the button\n   */\n  onClick: GenericFunction;\n  /**\n   * Guard content from popover\n   */\n  content?: never;\n}\n\ntype FixedMenuButtonProps = FixedMenuButtonPopoverProps | FixedMenuButtonButtonOnlyProps;\n\n/**\n * Button position on the top left of the screen to display rules, admin button and other features\n */\nexport function FixedMenuButton({ type, position, content, className, ...rest }: FixedMenuButtonProps) {\n  return (\n    <div className={clsx('fixed-menu-button', `fixed-menu-button--${position}`, className)}>\n      {type === 'popover' ? (\n        <Popover placement=\"bottomLeft\" content={content} trigger=\"click\">\n          <FixedMenuButtonContent {...rest} />\n        </Popover>\n      ) : (\n        <FixedMenuButtonContent {...rest} />\n      )}\n    </div>\n  );\n}\n\nfunction FixedMenuButtonContent({\n  icon,\n  label,\n  showLabel,\n  onClick,\n  buttonProps,\n}: Partial<FixedMenuButtonProps>) {\n  const [isActive, setActive] = useState(showLabel);\n  const hasLabel = Boolean(label);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <Button\n      shape={hasLabel && isActive ? 'round' : 'circle'}\n      size=\"middle\"\n      onMouseOver={() => setActive(true)}\n      onMouseLeave={() => setActive(showLabel ?? false)}\n      onClick={onClick ? onClick : undefined}\n      icon={icon}\n      type=\"ghost\"\n      {...buttonProps}\n    >\n      {isActive && hasLabel && <span className=\"fixed-menu-button__label\">{label}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useCountdown } from 'hooks/useCountdown';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n    disabled: hideTimer,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && <span className={clsx(timeClass, `${timeClass}--${type}`)}>{timeLeft}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { TimerResult, TimerSettings, useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ntype SelectedTimeSettings = Omit<TimerSettings, 'expiryTimestamp'>;\n\ninterface useCountdownSettings extends SelectedTimeSettings {\n  /**\n   * The duration of the countdown in seconds\n   */\n  duration: number;\n  /**\n   * Disable timer\n   */\n  disabled?: boolean;\n}\n\ninterface useCountdownResults extends TimerResult {\n  /**\n   * Time left in total seconds (minutes + seconds)\n   */\n  timeLeft: number;\n}\n\n/**\n * Timer countdown to perform actions\n * @param settings\n * @returns\n */\nexport function useCountdown({\n  duration,\n  onExpire,\n  disabled = false,\n  ...rest\n}: useCountdownSettings): useCountdownResults {\n  const timer = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    onExpire: disabled ? undefined : onExpire,\n    ...rest,\n  });\n\n  const timeLeft = timer.minutes * 60 + timer.seconds;\n\n  return {\n    ...timer,\n    timeLeft,\n  };\n}\n","import A from 'games/arte-ruim/game-info.json';\nimport B from 'games/bomba-relogio/game-info.json';\nimport C from 'games/contadores-historias/game-info.json';\nimport D from 'games/detetives-imaginativos/game-info.json';\nimport E from 'games/espiao-entre-nos/game-info.json';\nimport G from 'games/galeria-de-sonhos/game-info.json';\nimport H from 'games/crimes-hediondos/game-info.json';\nimport I from 'games/instrumentos-codificados/game-info.json';\nimport K from 'games/palheta-de-cores/game-info.json';\nimport L from 'games/linhas-cruzadas/game-info.json';\nimport M from 'games/mente-coletiva/game-info.json';\nimport N from 'games/na-rua-do-medo/game-info.json';\nimport O from 'games/onda-telepatica/game-info.json';\nimport P from 'games/polemica-da-vez/game-info.json';\nimport Q from 'games/quem-nao-mata/game-info.json';\nimport R from 'games/retrato-falado/game-info.json';\nimport S from 'games/sonhos-pesadelos/game-info.json';\nimport T from 'games/testemunha-ocular/game-info.json';\nimport U from 'games/ue-so-isso/game-info.json';\nimport V from 'games/vendaval-de-palpite/game-info.json';\nimport W from 'games/super-campeonato/game-info.json';\nimport X from 'games/cruza-palavras/game-info.json';\nimport Y from 'games/trevo-da-sorte/game-info.json';\n\nimport comingSoonGames from 'assets/data/coming-soon-games.json';\n\nconst others = comingSoonGames as Record<GameCode, GameInfo>;\n\nexport const GAME_LIST: Record<GameCode, GameInfo> = {\n  ...others,\n  A,\n  B,\n  C,\n  D,\n  E,\n  G,\n  H,\n  I,\n  K,\n  L,\n  M,\n  N,\n  O,\n  P,\n  Q,\n  R,\n  S,\n  T,\n  U,\n  V,\n  W,\n  X,\n  Y,\n};\n\nexport default GAME_LIST;\n"],"names":["FixedMenuButton","type","position","content","className","rest","clsx","placement","trigger","FixedMenuButtonContent","icon","label","showLabel","onClick","buttonProps","useState","isActive","setActive","hasLabel","Boolean","useEffectOnce","shape","size","onMouseOver","onMouseLeave","undefined","TimedButton","duration","children","onExpire","hideTimer","timeLeft","useCountdown","autoStart","disabled","timeClass","TransparentButton","active","activeClass","hoverType","timer","useTimer","expiryTimestamp","inNSeconds","minutes","seconds","others","A","B","C","D","E","G","H","I","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y"],"sourceRoot":""}