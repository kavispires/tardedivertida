{"version":3,"file":"static/js/super-campeonato.c3f70b40.chunk.js","mappings":"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","sources":["components/steps/Step.tsx","components/steps/StepSwitcher.tsx","games/super-campeonato/utils/constants.ts","games/super-campeonato/components/ContenderCard.tsx","games/super-campeonato/components/ContendersHand.tsx","games/super-campeonato/utils/mock.ts","games/super-campeonato/StepSelectChallenge.tsx","games/super-campeonato/PhaseChallengeSelection.tsx","games/super-campeonato/utils/api-requests.ts","games/super-campeonato/components/Challenge.tsx","games/super-campeonato/StepSelectContenders.tsx","games/super-campeonato/PhaseContendersSelection.tsx","games/super-campeonato/components/Brackets.tsx","games/super-campeonato/components/BetsForm.tsx","games/super-campeonato/StepMakeYourBets.tsx","games/super-campeonato/PhaseBets.tsx","games/super-campeonato/components/TierTitle.tsx","games/super-campeonato/utils/useBracketVoting.ts","games/super-campeonato/components/Voting.tsx","games/super-campeonato/StepBattle.tsx","games/super-campeonato/PhaseBattle.tsx","games/super-campeonato/StepRanking.tsx","games/super-campeonato/PhaseResults.tsx","games/super-campeonato/SessionSuperCampeonato.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/DownSquareOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  fullWidth?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function Step({ children, fullWidth = false, className }: StepProps) {\n  return <div className={clsx('step', fullWidth && 'step--full-width', className)}>{children}</div>;\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) console.warn('SetSwitcher is being used without `players`, please add it.');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","export const ACTIONS = {\n  SUBMIT_CHALLENGE: 'SUBMIT_CHALLENGE',\n  SUBMIT_CONTENDERS: 'SUBMIT_CONTENDERS',\n  SUBMIT_BETS: 'SUBMIT_BETS',\n  SUBMIT_VOTES: 'SUBMIT_VOTES',\n};\n","import { Image } from 'antd';\nimport clsx from 'clsx';\nimport { useLanguage } from 'hooks';\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype ContenderCardProps = {\n  size: number;\n  overlayColor: string;\n  contender: WContender;\n  className?: string;\n};\n\nexport function ContenderCard({ size, overlayColor, contender, className }: ContenderCardProps) {\n  const { language } = useLanguage();\n\n  return (\n    <div className={clsx('w-contender', className)} style={{ width: `${size}px` }}>\n      <span className=\"w-contender-name\">{contender.name[language]}</span>\n      <img\n        src={`${PUBLIC_URL.IN_GAME}/w-overlay-${overlayColor}.png`}\n        className=\"w-contender-overlay\"\n        alt=\"contender\"\n        style={{ width: `${size}px` }}\n      />\n      <Image\n        src={`${PUBLIC_URL.IN_GAME}/${contender.id}.jpg`}\n        width={size}\n        className=\"w-contender-image\"\n        fallback={`${PUBLIC_URL.IN_GAME}/w-no-image.jpg`}\n      />\n    </div>\n  );\n}\n","import { Button } from 'antd';\nimport { FloatingHand } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { useCardWidth } from 'hooks';\nimport { ContenderCard } from './ContenderCard';\n\ntype ContendersHandProps = {\n  contenders: WContender[];\n  onSelect?: GenericFunction;\n};\n\nexport function ContendersHand({ contenders, onSelect }: ContendersHandProps) {\n  const cardWidth = useCardWidth(5, 32, 100);\n\n  return (\n    <FloatingHand>\n      <ul className=\"w-contenders-hand\">\n        {contenders.map((contender) => (\n          <li key={contender.id} className=\"w-contenders-hand__entry\">\n            {Boolean(onSelect) && (\n              <Button onClick={() => onSelect!(contender.id)}>\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            )}\n            <ContenderCard contender={contender} overlayColor=\"gray\" size={cardWidth} />\n          </li>\n        ))}\n      </ul>\n    </FloatingHand>\n  );\n}\n","import { getRandomItem } from 'utils/helpers';\n\nexport function mockSelectChallenge(challenges: DefaultTextCard[]): CardId {\n  return getRandomItem(challenges).id;\n}\n\nexport function mockSelectContender(contenders: WContender[]): CardId[] {\n  return [getRandomItem(contenders).id];\n}\n\nexport function mockBets(brackets: WBracket[]) {\n  const contenders = brackets\n    .filter((entry) => entry.tier === 'quarter')\n    .map((entry) => ({ id: entry.id, name: entry.name }));\n\n  return {\n    quarter: contenders[0],\n    semi: contenders[0],\n    final: contenders[0],\n  };\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { ContendersHand } from './components/ContendersHand';\nimport { useMock } from 'hooks';\nimport { mockSelectChallenge } from './utils/mock';\n\ntype StepSelectChallengeProps = {\n  onSubmitChallenge: GenericFunction;\n  challenges: DefaultTextCard[];\n  userContenders: WContender[];\n};\n\nexport function StepSelectChallenge({\n  onSubmitChallenge,\n  challenges,\n  userContenders,\n}: StepSelectChallengeProps) {\n  useMock(() => {\n    onSubmitChallenge({ challengeId: mockSelectChallenge(challenges) });\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Selecione o desafio da rodada\" en=\"Select the theme for the round\" />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione o desafio que você acha que um dos seus competidores tem mais change de ganhar\"\n          en=\"Select a challenge you think one of your contenders have the best chance of winning\"\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        {challenges.map((challenge, index) => {\n          return (\n            <TransparentButton\n              key={challenge.id}\n              onClick={() => onSubmitChallenge({ challengeId: challenge.id })}\n            >\n              <Card header={LETTERS[index]} randomColor>\n                {challenge.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n\n      <ContendersHand contenders={userContenders} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep, useUser } from 'hooks';\nimport { useOnSubmitChallengeAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepSelectChallenge } from './StepSelectChallenge';\nimport { SelectListIcon } from 'components/icons/SelectListIcon';\n\nfunction PhaseChallengeSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitChallenge = useOnSubmitChallengeAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.SUPER_CAMPEONATO.CHALLENGE_SELECTION}\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={4} circleColor=\"pink\">\n          <Instruction contained>\n            <Translate pt=\"Quem vai ganhar a medalha de ouro?\" en=\"Who's gonna get the gold medal?\" />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<SelectListIcon />}\n          title={translate('Desafio', 'Challenge')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Qual o desafio da rodada?\" en=\"What's the round's challenge?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepSelectChallenge\n          onSubmitChallenge={onSubmitChallenge}\n          challenges={state.challenges}\n          userContenders={user.contenders}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseChallengeSelection;\n","import { SUPER_CAMPEONATO_API } from 'services/adapters';\nimport { useAPICall, useLanguage } from 'hooks';\nimport { ACTIONS } from './constants';\n\nexport function useOnSubmitChallengeAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-challenge',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Desafio enviado com sucesso!', 'Challenge send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desafio',\n      'Oops, the application failed to submit the challenge'\n    ),\n  });\n\n  return (payload: SubmitChallengePayload) => {\n    request({\n      action: ACTIONS.SUBMIT_CHALLENGE,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitContenderAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-contender',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Competidor enviado com sucesso!', 'Contender send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o competidor',\n      'Oops, the application failed to submit the contender'\n    ),\n  });\n\n  return (payload: SubmitContendersPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_CONTENDERS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitBetsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-bets',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Apostas enviadas com sucesso!', 'Bets send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar apostas',\n      'Oops, the application failed to submit bets'\n    ),\n  });\n\n  return (payload: SubmitBetsPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_BETS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Votos enviados com sucesso!', 'Votes send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar votos',\n      'Oops, the application failed to submit votes'\n    ),\n  });\n\n  return (payload: SubmitBattleVotesPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_VOTES,\n      ...payload,\n    });\n  };\n}\n","import { Space } from 'antd';\nimport { Card } from 'components/cards';\nimport { useLanguage } from 'hooks';\n\ntype ChallengeProps = {\n  challenge: DefaultTextCard;\n};\n\nexport function Challenge({ challenge }: ChallengeProps) {\n  const { translate } = useLanguage();\n  return (\n    <Space className=\"space-container\" align=\"center\">\n      <Card header={translate('Desafio', 'Challenge')} randomColor>\n        {challenge.text}\n      </Card>\n    </Space>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { ContendersHand } from './components/ContendersHand';\nimport { useMock } from 'hooks';\nimport { mockSelectContender } from './utils/mock';\nimport { Challenge } from './components/Challenge';\n\ntype StepSelectContendersProps = {\n  onSubmitContender: GenericFunction;\n  challenge: DefaultTextCard;\n  userContenders: WContender[];\n};\n\nexport function StepSelectContenders({\n  onSubmitContender,\n  challenge,\n  userContenders,\n}: StepSelectContendersProps) {\n  useMock(() => {\n    onSubmitContender({ contendersIds: mockSelectContender(userContenders) });\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Quem pode ganhar esse desafio?\" en=\"Who can win this challenge?\" />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione um de seus competidores para entrar no campeonato\"\n          en=\"Select one of your contenders to join the championship\"\n        />\n      </Instruction>\n\n      <ContendersHand\n        contenders={userContenders}\n        onSelect={(id) => onSubmitContender({ contendersIds: [id] })}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep, useUser } from 'hooks';\nimport { useOnSubmitContenderAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepSelectContenders } from './StepSelectContenders';\nimport { AnonymousIcon } from 'components/icons/AnonymousIcon';\n\nfunction PhaseContenderSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitContender = useOnSubmitContenderAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.SUPER_CAMPEONATO.CONTENDER_SELECTION}\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<AnonymousIcon />}\n          title={translate('Competidores', 'Contenders')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Quem tem chance de ganhar?\" en=\"Who has what it takes?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectContenders\n          onSubmitContender={onSubmitContender}\n          challenge={state.challenge}\n          userContenders={user.contenders}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseContenderSelection;\n","import { Translate } from 'components/language';\nimport { ContenderCard } from './ContenderCard';\n\ntype BracketsProps = {\n  brackets: WBracket[];\n  activeTier: WBracketTier;\n};\n\ntype BracketTiers = {\n  quarter: WBracket[];\n  semi: WBracket[];\n  final: WBracket[];\n  winner: WBracket[];\n};\n\nconst getContenderColor = (index: number) => {\n  return index % 2 === 0 ? 'red' : 'blue';\n};\n\nexport function Brackets({ brackets, activeTier }: BracketsProps) {\n  const { quarter, semi, final, winner } = brackets.reduce(\n    (acc: BracketTiers, entry) => {\n      acc[entry.tier].push(entry);\n\n      return acc;\n    },\n    {\n      quarter: [],\n      semi: [],\n      final: [],\n      winner: [],\n    }\n  );\n  return (\n    <div>\n      <div className=\"tournament-headers\">\n        <h3>\n          <Translate pt=\"Quartas\" en=\"Quarter-finals\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Semifinais\" en=\"Semifinals\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Final\" en=\"Final\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Campeão\" en=\"Winner\" />\n        </h3>\n      </div>\n      <div className=\"w-tournament-brackets\">\n        <ul className=\"w-bracket w-bracket--1\">\n          {quarter.map((entry, index) => (\n            <li className=\"w-team-item\" key={`${entry.id}-${entry.position}`}>\n              <ContenderCard\n                size={100}\n                overlayColor={activeTier === entry.tier ? getContenderColor(index) : 'gray'}\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--2\">\n          {semi.map((entry) => (\n            <li className=\"w-team-item\" key={`${entry.id}-${entry.position}`}>\n              <ContenderCard\n                size={100}\n                overlayColor=\"gray\"\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--3\">\n          {final.map((entry) => (\n            <li className=\"w-team-item\" key={`${entry.id}-${entry.position}`}>\n              <ContenderCard\n                size={100}\n                overlayColor=\"gray\"\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--4\">\n          {winner.map((entry) => (\n            <li className=\"w-team-item\" key={`${entry.id}-${entry.position}`}>\n              <ContenderCard\n                size={100}\n                overlayColor=\"gray\"\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import { Button, Form, Select } from 'antd';\nimport { Translate } from 'components/language';\nimport { useLanguage } from 'hooks';\nimport { orderBy } from 'lodash';\nimport { useState } from 'react';\n\ntype BetsFormProps = {\n  brackets: WBracket[];\n  onSubmitBets: GenericFunction;\n};\n\nexport function BetsForm({ brackets, onSubmitBets }: BetsFormProps) {\n  const { language } = useLanguage();\n  const [bets, setBets] = useState({ quarter: '', semi: '', final: '' });\n\n  const updateBet = (value: PlainObject) => {\n    setBets((s) => ({ ...s, ...value }));\n  };\n\n  const contenders = orderBy(\n    brackets.filter((entry) => entry.tier === 'quarter').map((entry) => ({ id: entry.id, name: entry.name })),\n    `name.${language}`\n  );\n\n  return (\n    <Form\n      className=\"w-bet-form\"\n      onValuesChange={updateBet}\n      onFinish={onSubmitBets}\n      labelCol={{ span: 12 }}\n      wrapperCol={{ span: 12 }}\n      initialValues={{ quarter: '', semi: '', final: '' }}\n    >\n      <Form.Item label={<Translate pt=\"Quartas de finais\" en=\"Quarterfinals\" />} name=\"quarter\" required>\n        <Select>\n          <Select.Option value=\"\">\n            <Translate pt=\"Selecione\" en=\"Select\" />\n          </Select.Option>\n          {contenders.map((contender) => (\n            <Select.Option value={contender.id} key={`quarter-${contender.id}`}>\n              {contender.name[language]}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item label={<Translate pt=\"Semifinais\" en=\"Semifinals\" />} name=\"semi\" required>\n        <Select>\n          <Select.Option value=\"\">\n            <Translate pt=\"Selecione\" en=\"Select\" />\n          </Select.Option>\n          {contenders.map((contender) => (\n            <Select.Option value={contender.id} key={`semi-${contender.id}`}>\n              {contender.name[language]}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item label={<Translate pt=\"Final\" en=\"Final\" />} name=\"final\" required>\n        <Select>\n          <Select.Option value=\"\">\n            <Translate pt=\"Selecione\" en=\"Select\" />\n          </Select.Option>\n          {contenders.map((contender) => (\n            <Select.Option value={contender.id} key={`final-${contender.id}`}>\n              {contender.name[language]}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item wrapperCol={{ offset: 12, span: 16 }}>\n        <Button type=\"primary\" htmlType=\"submit\" disabled={!bets.final || !bets.quarter || !bets.semi}>\n          <Translate pt=\"Enviar apostas\" en=\"Submit bets\" />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\n\nimport { useMock } from 'hooks';\nimport { mockBets } from './utils/mock';\nimport { Brackets } from './components/Brackets';\nimport { BetsForm } from './components/BetsForm';\nimport { Challenge } from './components/Challenge';\n\ntype StepMakeYourBetsProps = {\n  onSubmitBets: GenericFunction;\n  challenge: DefaultTextCard;\n  brackets: WBracket[];\n};\n\nexport function StepMakeYourBets({ onSubmitBets, challenge, brackets }: StepMakeYourBetsProps) {\n  useMock(() => {\n    onSubmitBets(mockBets(brackets));\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Faça suas apostas!\" en=\"Make your bets!\" />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Selecione um competidor para cada uma das 3 seções do torneio:\n              <br />\n              Quartas-de-finais: Ganhe 1 ponto se o competidor passar\n              <br />\n              Semi-finais: Ganhe 3 pontos se o competidor passar\n              <br />\n              Final: Ganhe 5 pontos se o competidor ganhar\n            </>\n          }\n          en={\n            <>\n              Select a contender of each of the section in the Championship:\n              <br />\n              Quarter-finals: Get 1 point if the contender passes\n              <br />\n              Semi-finals: Get 3 point if the contender passes\n              <br />\n              Finals: Get 5 point if the contender wins\n            </>\n          }\n        />\n      </Instruction>\n\n      <Brackets brackets={brackets} activeTier=\"quarter\" />\n\n      <BetsForm brackets={brackets} onSubmitBets={onSubmitBets} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\nimport { useOnSubmitBetsAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepMakeYourBets } from './StepMakeYourBets';\nimport { GamblingChipIcon } from 'components/icons/GamblingChipIcon';\n\nfunction PhaseBets({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const onSubmitBets = useOnSubmitBetsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.BETS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<GamblingChipIcon />}\n          title={translate('Apostas', 'Bets')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Selecione quem você acha que ganha as quartas de final, semi final, final\"\n              en=\"Place bet on who you think will win the quarter-finals, semifinals and finals\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepMakeYourBets onSubmitBets={onSubmitBets} challenge={state.challenge} brackets={state.brackets} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseBets;\n","import { Translate } from 'components/language';\n\ntype TierTitleProps = {\n  tier: WBracketTier;\n};\n\nexport function TierTitle({ tier }: TierTitleProps) {\n  if (tier === 'quarter') return <Translate pt=\"Quartas de finais\" en=\"Quarterfinals\" />;\n  if (tier === 'semi') return <Translate pt=\"Semifinais\" en=\"Semifinals\" />;\n  return <Translate pt=\"Final\" en=\"Final\" />;\n}\n","import { useState } from 'react';\n\nconst voteTarget: Record<number, number> = {\n  0: 8,\n  1: 8,\n  2: 9,\n  3: 9,\n  4: 10,\n  5: 10,\n  6: 11,\n  7: 11,\n  8: 12,\n  9: 12,\n  10: 13,\n  11: 13,\n  12: 14,\n  13: 14,\n};\n\nconst targetByTier: Record<WBracketTier, number> = {\n  quarter: 4,\n  semi: 2,\n  final: 1,\n  winner: 0,\n};\n\nexport function useBracketVoting(tier: WBracketTier) {\n  const [votes, setVotes] = useState<NumberDictionary>({});\n\n  function updateVote(vote: WBracket) {\n    setVotes((v) => ({ ...v, [voteTarget[vote.position]]: vote.position }));\n  }\n\n  function checkActiveVote(position: number) {\n    return Object.values(votes).includes(position);\n  }\n\n  return {\n    votes,\n    updateVote,\n    isComplete: Object.keys(votes).length === targetByTier[tier],\n    checkActiveVote,\n  };\n}\n","import { Button, Space } from 'antd';\nimport clsx from 'clsx';\nimport { TransparentButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { useStep } from 'hooks';\nimport { useTimer } from 'react-timer-hook';\nimport { getAnimationClass, inNSeconds } from 'utils/helpers';\nimport { useBracketVoting } from '../utils/useBracketVoting';\nimport { ContenderCard } from './ContenderCard';\n\ntype VotingProps = {\n  brackets: WBracket[];\n  tier: WBracketTier;\n  onSubmitVotes: GenericFunction;\n};\n\nexport function Voting({ brackets, tier, onSubmitVotes }: VotingProps) {\n  const { step, goToNextStep } = useStep(0);\n\n  const { seconds } = useTimer({\n    expiryTimestamp: inNSeconds(5),\n    autoStart: true,\n    onExpire: goToNextStep,\n  });\n\n  const bracketedContenders: WBracket[][] = brackets\n    .filter((entry) => entry.tier === tier)\n    .map((entry, index, arr) => {\n      if (index % 2 === 0) {\n        return [entry, arr[index + 1]];\n      }\n      return [];\n    })\n    .filter((entry) => entry.length > 0);\n\n  const { votes, updateVote, isComplete, checkActiveVote } = useBracketVoting(tier);\n\n  const colors = getContenderColor(tier);\n\n  return (\n    <StepSwitcher step={step}>\n      {/* Step 0 */}\n      <Instruction contained>\n        <Translate pt={<>Votação começando em {seconds}</>} en={<>Voting starting in {seconds}</>} />\n      </Instruction>\n\n      {/* Step 1-x */}\n      <div>\n        <ul>\n          {bracketedContenders.map((contenderPair) => (\n            <VotingOptions\n              left={contenderPair[0]}\n              right={contenderPair[1]}\n              onClick={updateVote}\n              colorLeft={colors.left}\n              colorRight={colors.right}\n              checkActiveVote={checkActiveVote}\n            />\n          ))}\n        </ul>\n\n        <Space className=\"space-container\">\n          <Button type=\"primary\" size=\"large\" onClick={() => onSubmitVotes({ votes })} disabled={!isComplete}>\n            <Translate pt=\"Enviar votos\" en=\"Submit votes\" />\n          </Button>\n        </Space>\n      </div>\n    </StepSwitcher>\n  );\n}\n\ntype VotingOptionsProps = {\n  left: WBracket;\n  right: WBracket;\n  onClick: GenericFunction;\n  colorLeft: string;\n  colorRight: string;\n  checkActiveVote: (pos: number) => boolean;\n};\n\nfunction VotingOptions({ left, right, colorLeft, colorRight, onClick, checkActiveVote }: VotingOptionsProps) {\n  return (\n    <li className={clsx('w-voting-options', getAnimationClass('flipInX'))}>\n      <TransparentButton\n        onClick={() => onClick(left)}\n        active={checkActiveVote(left.position)}\n        className=\"w-vote\"\n        activeClass=\"w-vote--active\"\n      >\n        <ContenderCard size={200} contender={left} overlayColor={colorLeft} />\n      </TransparentButton>\n      <span className=\"w-voting-options__vs\">VS</span>\n      <TransparentButton\n        onClick={() => onClick(right)}\n        active={checkActiveVote(right.position)}\n        className=\"w-vote\"\n        activeClass=\"w-vote--active\"\n      >\n        <ContenderCard size={200} contender={right} overlayColor={colorRight} />\n      </TransparentButton>\n    </li>\n  );\n}\n\nconst getContenderColor = (tier: WBracketTier) => {\n  switch (tier) {\n    case 'quarter':\n      return {\n        left: 'red',\n        right: 'blue',\n      };\n    case 'semi':\n      return {\n        left: 'green',\n        right: 'orange',\n      };\n    default:\n      return {\n        left: 'red',\n        right: 'blue',\n      };\n  }\n};\n","// Ant Design Resources\nimport { Space } from 'antd';\n\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\n\nimport { useMock } from 'hooks';\nimport { mockBets } from './utils/mock';\nimport { Brackets } from './components/Brackets';\nimport { BetsForm } from './components/BetsForm';\nimport { TierTitle } from './components/TierTitle';\nimport { Challenge } from './components/Challenge';\nimport { Voting } from './components/Voting';\n\ntype StepBattleProps = {\n  onSubmitVotes: GenericFunction;\n  challenge: DefaultTextCard;\n  brackets: WBracket[];\n  tier: WBracketTier;\n};\n\nexport function StepBattle({ onSubmitVotes, challenge, brackets, tier }: StepBattleProps) {\n  // useMock(() => {\n  //   onSubmitVotes(mockBets(brackets));\n  // });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <TierTitle tier={tier} />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Voting brackets={brackets} tier={tier} onSubmitVotes={onSubmitVotes} />\n\n      <Brackets brackets={brackets} activeTier={tier} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVotesAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { BoxingGlovesIcon } from 'components/icons/BoxingGlovesIcon';\nimport { StepBattle } from './StepBattle';\nimport { useEffect, useState } from 'react';\n\nfunction PhaseBattle({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [previousTier, setPreviousTier] = useState<string>('');\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  useEffect(() => {\n    if (state.tier !== previousTier) {\n      setPreviousTier(state.tier);\n      setStep(0);\n    }\n  }, [state.tier, previousTier, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.BATTLE}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<BoxingGlovesIcon />}\n          title={translate('Batalha!', 'Battle!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Vote em quem você acha que melhor se encaixa no desafio\"\n              en=\"Vote on who you think best fit the challenge\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepBattle\n          onSubmitVotes={onSubmitVotes}\n          challenge={state.challenge}\n          brackets={state.brackets}\n          tier={state.tier}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseBattle;\n","import { PictureOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { AdminNextRoundButton } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { RoundsLeftInstruction } from 'components/text';\nimport { Brackets } from './components/Brackets';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  isLastRound?: boolean;\n  brackets: WBracket[];\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  isGameOver,\n  round,\n  isLastRound = false,\n  brackets,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          pt=\"Votos corretos em seu desenho por outros jogadores\"\n          en=\"Correct guesses on your drawing by other players\"\n        />,\n      ]}\n    >\n      {!isGameOver && <RoundsLeftInstruction round={round} lastRound={isLastRound} />}\n\n      <Brackets brackets={brackets} activeTier=\"winner\" />\n\n      <AdminNextRoundButton round={round} lastRound={isLastRound} />\n    </StepRankingWrapper>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { useEffect, useState } from 'react';\nimport { StepRanking } from './StepRanking';\nimport { TournamentIcon } from 'components/icons/TournamentIcon';\n\nfunction PhaseResults({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [previousTier, setPreviousTier] = useState<string>('');\n\n  useEffect(() => {\n    if (state.tier !== previousTier) {\n      setPreviousTier(state.tier);\n      setStep(0);\n    }\n  }, [state.tier, previousTier, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<TournamentIcon />}\n          title={translate('Resultado!', 'Resultado!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Vote em quem você acha que melhor se encaixa no desafio\"\n              en=\"Vote on who you think best fit the challenge\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={false}\n          round={state.round}\n          brackets={state.brackets}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResults;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhasePlaceholder, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseChallengeSelection from './PhaseChallengeSelection';\nimport PhaseContenderSelection from './PhaseContendersSelection';\nimport PhaseBets from './PhaseBets';\n// Fonts\nimport 'assets/fonts/bangers.scss';\nimport PhaseBattle from './PhaseBattle';\nimport PhaseResults from './PhaseResults';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: THEME_COLORS.RUSSIAN_VIOLET,\n  },\n});\n\nfunction SessionSuperCampeonato({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.SUPER_CAMPEONATO.CHALLENGE_SELECTION:\n        return PhaseChallengeSelection;\n      case PHASES.SUPER_CAMPEONATO.CONTENDER_SELECTION:\n        return PhaseContenderSelection;\n      case PHASES.SUPER_CAMPEONATO.BETS:\n        return PhaseBets;\n      case PHASES.SUPER_CAMPEONATO.BATTLE:\n        return PhaseBattle;\n      case PHASES.SUPER_CAMPEONATO.RESULTS:\n        return PhaseResults;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhasePlaceholder;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.SUPER_CAMPEONATO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionSuperCampeonato;\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\n\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar DownSquareOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\" } }] }, \"name\": \"down-square\", \"theme\": \"outlined\" };\nexport default DownSquareOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownSquareOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownSquareOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownSquareOutlined = function DownSquareOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownSquareOutlinedSvg\n  }));\n};\n\nDownSquareOutlined.displayName = 'DownSquareOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownSquareOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\n\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Step","children","fullWidth","className","clsx","getWaitingRoomInstruction","kind","pt","en","StepSwitcher","step","conditions","players","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","console","warn","length","title","instruction","ACTIONS","ContenderCard","size","overlayColor","contender","language","useLanguage","style","width","name","src","PUBLIC_URL","alt","id","fallback","ContendersHand","contenders","onSelect","cardWidth","useCardWidth","map","Boolean","onClick","mockSelectChallenge","challenges","getRandomItem","StepSelectChallenge","onSubmitChallenge","userContenders","useMock","challengeId","contained","align","challenge","index","header","LETTERS","randomColor","text","state","info","translate","useStep","goToNextStep","setStep","user","useUser","request","useAPICall","apiFunction","SUPER_CAMPEONATO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitChallengeAPIRequest","phase","allowedPhase","PHASES","round","onPressButton","time","circleColor","icon","SelectListIcon","onClose","currentRound","current","duration","Challenge","StepSelectContenders","onSubmitContender","contendersIds","useOnSubmitContenderAPIRequest","AnonymousIcon","getContenderColor","Brackets","brackets","activeTier","reduce","acc","entry","tier","push","quarter","semi","final","winner","position","BetsForm","onSubmitBets","useState","bets","setBets","orderBy","filter","onValuesChange","value","s","onFinish","labelCol","span","wrapperCol","initialValues","label","required","offset","type","htmlType","disabled","StepMakeYourBets","mockBets","useOnSubmitBetsAPIRequest","GamblingChipIcon","TierTitle","voteTarget","targetByTier","Voting","onSubmitVotes","seconds","useTimer","expiryTimestamp","inNSeconds","autoStart","onExpire","bracketedContenders","arr","votes","setVotes","updateVote","vote","v","isComplete","Object","keys","checkActiveVote","values","includes","useBracketVoting","colors","contenderPair","VotingOptions","left","right","colorLeft","colorRight","getAnimationClass","active","activeClass","StepBattle","previousTier","setPreviousTier","useOnSubmitVotesAPIRequest","useEffect","BoxingGlovesIcon","StepRanking","ranking","isGameOver","isLastRound","gainedPointsDescriptions","lastRound","TournamentIcon","ConfigProvider","theme","primaryColor","THEME_COLORS","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseChallengeSelection","PhaseContenderSelection","PhaseBets","PhaseBattle","PhaseResults","PhasePlaceholder","PageError","CrownFilled","props","ref","React","AntdIcon","_objectSpread","CrownFilledSvg","displayName","DownSquareOutlined","DownSquareOutlinedSvg","UpCircleOutlined","UpCircleOutlinedSvg"],"sourceRoot":""}