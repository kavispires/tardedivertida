{"version":3,"file":"static/js/quem-sou-eu.85cf439d.chunk.js","mappings":"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","sources":["components/cards/CharacterCard.tsx","components/metrics/CardHighlight.tsx","games/quem-sou-eu/utils/constants.ts","games/quem-sou-eu/utils/mock.ts","games/quem-sou-eu/StepSelectCharacters.tsx","games/quem-sou-eu/PhaseCharacterFiltering.tsx","games/quem-sou-eu/utils/api-requests.ts","games/quem-sou-eu/components/WaitingRoomCharacter.tsx","games/quem-sou-eu/components/Card.tsx","games/quem-sou-eu/components/Table.tsx","games/quem-sou-eu/components/Highlights.tsx","games/quem-sou-eu/StepSelectGlyphs.tsx","games/quem-sou-eu/PhaseCharacterDescription.tsx","games/quem-sou-eu/components/RulesBlobs.tsx","games/quem-sou-eu/StepGuessing.tsx","games/quem-sou-eu/PhaseGuessing.tsx","games/quem-sou-eu/components/GalleryGuesses.tsx","games/quem-sou-eu/StepGallery.tsx","games/quem-sou-eu/StepRanking.tsx","games/quem-sou-eu/PhaseResults.tsx","games/quem-sou-eu/components/FinalCharacter.tsx","games/quem-sou-eu/PhaseGameOver.tsx","games/quem-sou-eu/SessionQuemSouEu.tsx","games/quem-sou-eu/components/PlayerGlyphs.tsx","games/quem-sou-eu/utils/achievements.ts","games/quem-sou-eu/utils/helpers.ts","hooks/useBooleanDictionary.ts","icons/BoxCheckMarkIcon.tsx","icons/FilterIcon.tsx","icons/GarbageIcon.tsx","icons/MirrorIcon.tsx","icons/NoIcon.tsx","icons/PlayerIconsIcon.tsx","icons/YesIcon.tsx"],"sourcesContent":["import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, Tooltip } from 'antd';\n// Types\nimport type { ContenderCard } from 'types/tdr';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { ImageBlurButtonContainer } from 'components/image-cards';\nimport { DualTranslate } from 'components/language';\n// Sass\nimport './CharacterCard.scss';\n// Ant Design resources\n\nexport type OverlayColor = 'blue' | 'gray' | 'green' | 'orange' | 'pink' | 'purple' | 'red' | 'yellow';\n\ntype CharacterCardProps = {\n  /**\n   * The size of the card\n   */\n  size: number;\n  /**\n   * The color of the overlay\n   */\n  overlayColor?: OverlayColor;\n  /**\n   * The character object\n   */\n  character: ContenderCard;\n  /**\n   * The class name to be appended to the container\n   */\n  className?: string;\n  /**\n   * Whether the name should be hidden or not\n   */\n  hideName?: boolean;\n};\n\nexport function CharacterCard({ size, overlayColor, character, className, hideName }: CharacterCardProps) {\n  const { dualTranslate } = useLanguage();\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl('images');\n\n  const isBlurred = shouldBeBlurred(character.id);\n\n  const imageURL = character.id.replace(/-/g, '/');\n\n  const description = character?.description || character.name;\n\n  return (\n    <ImageBlurButtonContainer cardId={character.id}>\n      <Tooltip title={dualTranslate(description)} placement=\"top\">\n        <div className={clsx('character-card', className)} style={{ width: `${size}px` }}>\n          {!hideName && (\n            <span className=\"character-card__name\">\n              <DualTranslate>{character.name}</DualTranslate>\n            </span>\n          )}\n          {overlayColor && (\n            <img\n              src={`${PUBLIC_URL.IN_GAME}/w-overlay-${overlayColor}.png`}\n              className=\"character-card__overlay\"\n              alt=\"character\"\n              style={{ width: `${size}px` }}\n            />\n          )}\n          <Image\n            src={`${baseUrl}/${imageURL}.jpg`}\n            width={size}\n            className={clsx('character-card__image', isBlurred && 'character-card__image--blur')}\n            fallback={`${PUBLIC_URL.IN_GAME}/w-no-image.jpg`}\n            alt={dualTranslate(character.name)}\n            preview={false}\n            title={dualTranslate(character.name)}\n          />\n        </div>\n      </Tooltip>\n    </ImageBlurButtonContainer>\n  );\n}\n","// Icons\nimport { ImageCardsIcon } from 'icons/ImageCardsIcon';\n// Components\nimport { type HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function CardHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ImageCardsIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","export const QUEM_SOU_EU_ACTIONS = {\n  SUBMIT_CHARACTERS: 'SUBMIT_CHARACTERS',\n  SUBMIT_GLYPHS: 'SUBMIT_GLYPHS',\n  SUBMIT_GUESSES: 'SUBMIT_GUESSES',\n} as const;\n\nexport const SLIDE_DURATION = 10;\n\nexport const ROUND_TYPE = {\n  SHOW: 'SHOW',\n  HIDE: 'HIDE',\n} as const;\n","import { sample, sampleSize } from 'lodash';\n// Internal\nimport type { Character } from './types';\n\nexport const mockSelectCharacters = (characters: Character[]) => {\n  return sampleSize(characters, 6).map((c) => c.id);\n};\n\nexport const mockGlyphs = (glyphs: string[]) => {\n  const positiveQuantity = sample([1, 1, 2, 2, 2, 3]) ?? 2;\n  const negativeQuantity = sample([0, 0, 0, 1, 1, 1, 2, 2, 3]) ?? 0;\n  const selected = glyphs.slice(0, positiveQuantity + negativeQuantity);\n  const dict: BooleanDictionary = {};\n  selected.slice(0, positiveQuantity).forEach((key) => {\n    dict[key] = true;\n  });\n  selected.slice(positiveQuantity).forEach((key) => {\n    dict[key] = false;\n  });\n\n  return dict;\n};\n","// Ant Design Resources\nimport { Badge, Space } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\nimport type { ContenderCard } from 'types/tdr';\n// Hooks\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Components\nimport { SendButton, TransparentButton } from 'components/buttons';\nimport { CharacterCard } from 'components/cards/CharacterCard';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport { mockSelectCharacters } from './utils/mock';\nimport type { SubmitCharactersPayload } from './utils/types';\n\ntype StepSelectCharactersProps = {\n  user: GamePlayer;\n  onSelectCharacters: (payload: SubmitCharactersPayload) => void;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepSelectCharacters({ user, announcement, onSelectCharacters }: StepSelectCharactersProps) {\n  const { isLoading } = useLoading();\n  const cardWidth = useCardWidth(12, {\n    gap: 16,\n    minWidth: 100,\n    maxWidth: 200,\n  });\n  const {\n    dict: selection,\n    updateDict: update,\n    length: count,\n    keys: selectedCharacters,\n  } = useBooleanDictionary({});\n\n  const availableCharacters = user.availableCharacters ?? [];\n\n  useMock(() => {\n    onSelectCharacters({ characters: mockSelectCharacters(availableCharacters) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle>\n        <Translate\n          pt={\n            <>\n              Selecione <CardHighlight>6</CardHighlight> cartas\n            </>\n          }\n          en={\n            <>\n              Select <CardHighlight>6</CardHighlight> cards\n            </>\n          }\n        />\n      </StepTitle>\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              <strong>Selecione</strong> 6 personagens/celebridades abaixo, dessas 5 serão usadas no jogo.\n              <br />\n              Essa etapa é necessária para que você não receba um personagem que não conheça.\n            </>\n          }\n          en={\n            <>\n              <strong>Select</strong> 6 characters/celebrities below, 5 of them will be used in the game.\n              <br />\n              This step is necessary so that you don't receive a character you don't know.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <Space className=\"grid-container grid-template-6 gap-4\" wrap>\n        {availableCharacters.map((character: ContenderCard) => (\n          <TransparentButton\n            key={character.id}\n            disabled={user.ready || isLoading}\n            onClick={() => update(character.id)}\n            active={selection[character.id]}\n            activeClass=\"q-character-player\"\n          >\n            <CharacterCard size={cardWidth} character={character} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <SpaceContainer>\n        <SendButton\n          size=\"large\"\n          type=\"dashed\"\n          onClick={() => onSelectCharacters({ characters: mockSelectCharacters(availableCharacters) })}\n          loading={isLoading}\n          disabled={isLoading || user.ready}\n        >\n          <Translate pt={<>Escolha pra mim</>} en={<>Choose for me</>} />\n        </SendButton>\n        <Badge count={count}>\n          <SendButton\n            size=\"large\"\n            onClick={() => onSelectCharacters({ characters: selectedCharacters })}\n            loading={isLoading}\n            disabled={user.ready || count !== 6}\n          >\n            <Translate pt=\"Enviar cartas\" en=\"Submit cards\" />\n          </SendButton>\n        </Badge>\n      </SpaceContainer>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { FilterIcon } from 'icons/FilterIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { useOnSubmitCharactersAPIRequest } from './utils/api-requests';\nimport { StepSelectCharacters } from './StepSelectCharacters';\n\nexport function PhaseCharacterFiltering({ players, state }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSelectCharacters = useOnSubmitCharactersAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<FilterIcon />}\n      title={<Translate pt=\"Quem você conhece?\" en=\"Who do you know?\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt={<>Selecione personagens/pessoas que você conhece</>}\n          en={<>Select characters/people you know</>}\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.CHARACTER_FILTERING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepSelectCharacters\n          user={user}\n          onSelectCharacters={onSelectCharacters}\n          announcement={announcement}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Hooks\nimport { useGameActionRequest } from 'hooks/useGameActionRequest';\nimport { useLanguage } from 'hooks/useLanguage';\nimport type { UseStep } from 'hooks/useStep';\n// Internal\nimport type { SubmitCharactersPayload, SubmitGlyphsPayload, SubmitGuessesPayload } from './types';\nimport { QUEM_SOU_EU_ACTIONS } from './constants';\n\nexport function useOnSubmitCharactersAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-characters',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action',\n    ),\n  });\n\n  return (payload: SubmitCharactersPayload) => {\n    request({\n      action: QUEM_SOU_EU_ACTIONS.SUBMIT_CHARACTERS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGlyphsAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-glyphs',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action',\n    ),\n  });\n\n  return (payload: SubmitGlyphsPayload) => {\n    request({\n      action: QUEM_SOU_EU_ACTIONS.SUBMIT_GLYPHS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessesAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-guesses',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action',\n    ),\n  });\n\n  return (payload: SubmitGuessesPayload) => {\n    request({\n      action: QUEM_SOU_EU_ACTIONS.SUBMIT_GUESSES,\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\n// Components\nimport { CharacterCard } from 'components/cards/CharacterCard';\n// Internal\nimport { PlayerGlyphs } from './PlayerGlyphs';\n\ntype WaitingRoomCharacterProps = {\n  user: GamePlayer;\n};\n\nexport function WaitingRoomCharacter({ user }: WaitingRoomCharacterProps) {\n  if (!user.selectedGlyphs) {\n    return <></>;\n  }\n\n  return (\n    <Space wrap>\n      <CharacterCard size={100} character={user.character} />\n      <PlayerGlyphs player={user} glyphWidth={60} />\n    </Space>\n  );\n}\n","// Types\nimport type { ContenderCard } from 'types/tdr';\n// Components\nimport { CharacterCard } from 'components/cards/CharacterCard';\nimport { ImageBlurButtonContainer, ImageCard } from 'components/image-cards';\n\ntype CardProps = {\n  character: ContenderCard;\n  width: number;\n  imageCardMode: boolean;\n  className?: string;\n};\n\nexport function Card({ character, width, imageCardMode, className }: CardProps) {\n  if (imageCardMode) {\n    return (\n      <ImageBlurButtonContainer cardId={character.id}>\n        <ImageCard id={character.id} cardWidth={width} className={className} preview={false} />\n      </ImageBlurButtonContainer>\n    );\n  }\n\n  return <CharacterCard character={character} size={width} className={className} />;\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { CharacterCard } from 'components/cards/CharacterCard';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\n// Internal\nimport type { Characters } from '../utils/types';\nimport { Card } from './Card';\n\ntype TableProps = {\n  characters: Characters;\n  tableOrder: CardId[];\n  playerCharacterId: CardId;\n  showAll?: boolean;\n  imageCardMode: boolean;\n};\n\nexport function Table({\n  characters,\n  playerCharacterId,\n  tableOrder,\n  showAll = true,\n  imageCardMode = false,\n}: TableProps) {\n  const width = useCardWidth(8, {\n    gap: 16,\n    minWidth: 150,\n    maxWidth: 200,\n  });\n\n  const topKeys = tableOrder.slice(0, Math.floor(tableOrder.length / 2));\n  const bottomKeys = tableOrder.slice(Math.floor(tableOrder.length / 2));\n\n  if (!showAll) {\n    return (\n      <SpaceContainer className=\"q-table\">\n        <CharacterCard\n          character={characters[playerCharacterId]}\n          size={width}\n          className=\"q-character-player\"\n        />\n      </SpaceContainer>\n    );\n  }\n\n  return (\n    <SpaceContainer className=\"q-table\" wrap>\n      <SpaceContainer wrap>\n        {topKeys.map((key) => (\n          <Card\n            character={characters[key]}\n            key={key}\n            width={width}\n            imageCardMode={imageCardMode}\n            className={clsx(key === playerCharacterId && 'q-character-player')}\n          />\n        ))}\n      </SpaceContainer>\n      <SpaceContainer wrap>\n        {bottomKeys.map((key) => (\n          <Card\n            character={characters[key]}\n            key={key}\n            width={width}\n            imageCardMode={imageCardMode}\n            className={clsx(key === playerCharacterId && 'q-character-player')}\n          />\n        ))}\n      </SpaceContainer>\n    </SpaceContainer>\n  );\n}\n","// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { type HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PositiveHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<YesIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n\nexport function NegativeHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<NoIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","// Ant Design Resources\nimport { Popover, Space, Tooltip } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\n// Hooks\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { SendButton, TransparentButton } from 'components/buttons';\nimport { GlyphCard } from 'components/cards/GlyphCard';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { Characters, SubmitGlyphsPayload } from './utils/types';\nimport { prepareGlyphs } from './utils/helpers';\nimport { mockGlyphs } from './utils/mock';\nimport type { ROUND_TYPE } from './utils/constants';\nimport { Table } from './components/Table';\nimport { NegativeHighlight, PositiveHighlight } from './components/Highlights';\n\ntype StepSelectGlyphsProps = {\n  user: GamePlayer;\n  onSelectGlyphs: (payload: SubmitGlyphsPayload) => void;\n  characters: Characters;\n  tableOrder: CardId[];\n  roundType: (typeof ROUND_TYPE)[keyof typeof ROUND_TYPE];\n  imageCardMode: boolean;\n} & Pick<StepProps, 'announcement'>;\n\nconst SELECTIONS_PLACEHOLDER = [0, 1, 2];\n\nexport function StepSelectGlyphs({\n  user,\n  announcement,\n  onSelectGlyphs,\n  characters,\n  tableOrder,\n  roundType,\n  imageCardMode,\n}: StepSelectGlyphsProps) {\n  const { translate } = useLanguage();\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 50,\n    maxWidth: 75,\n  });\n  const selectedWidth = glyphWidth + 15;\n\n  const {\n    dict: positiveSelection,\n    updateDict: updatePositive,\n    keys: positiveSelections,\n  } = useBooleanDictionary({});\n\n  const {\n    dict: negativeSelection,\n    updateDict: updateNegative,\n    keys: negativeSelections,\n  } = useBooleanDictionary({});\n\n  const glyphs = user.glyphs ?? [];\n\n  useMock(() => {\n    onSelectGlyphs({ glyphs: mockGlyphs(glyphs) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle>\n        <Translate\n          pt={<>Descreva seu personagem com ícones</>}\n          en={<>Describe your character with glyphs</>}\n        />\n      </StepTitle>\n\n      <RuleInstruction type=\"rule\">\n        <Translate\n          pt={\n            <>\n              Dos ícones abaixo, você pode selecionar até <PositiveHighlight>3</PositiveHighlight> positivos e\n              até <NegativeHighlight>3</NegativeHighlight> negativos.\n              <br /> Quando você clica em ícone, você determina se ele é relacionado ao seu personagem ou não.\n              <br />\n              <strong>A sua carta é a que tem a borda de bolinhas amarelas!</strong>\n            </>\n          }\n          en={\n            <>\n              From the glyphs below, you may select up to <PositiveHighlight>3</PositiveHighlight> positive\n              and <NegativeHighlight>3</NegativeHighlight> negative glyphs.\n              <br />\n              When you click on a glyph, you will determine if it's related or not to your character.\n              <br />\n              <strong>Your card is highlighted with the dotted yellow border!</strong>\n            </>\n          }\n        />\n        {roundType === 'SHOW' && (\n          <Translate\n            pt={\n              <>\n                <br />\n                Você também pode ver todos os personagens abaixo caso queira evitar conflito com outros\n                jogadores.\n              </>\n            }\n            en={\n              <>\n                <br />\n                You can also take a look at all the characters for this round so you don't give clues that\n                match others.\n              </>\n            }\n          />\n        )}\n      </RuleInstruction>\n\n      {roundType !== 'SHOW' && (\n        <RuleInstruction type=\"event\">\n          <Translate\n            pt={<>De agora em diante, você vê apenas o seu personagem.</>}\n            en={<>From now on, you only see your own character.</>}\n          />\n        </RuleInstruction>\n      )}\n\n      <Table\n        characters={characters}\n        playerCharacterId={user.character?.id}\n        tableOrder={tableOrder}\n        showAll={roundType === 'SHOW'}\n        imageCardMode={imageCardMode}\n      />\n\n      <SpaceContainer className=\"q-selections\">\n        <div className=\"q-selections__section q-selections__section--positive\">\n          {SELECTIONS_PLACEHOLDER.map((entry) => {\n            const id = positiveSelections[entry];\n\n            return (\n              <div className=\"q-selections__positive\" key={`pos-${entry}-${id}`}>\n                <div className=\"q-selections__entry\">\n                  <IconAvatar icon={<YesIcon />} />\n                  {id !== undefined ? (\n                    <TransparentButton\n                      onClick={() => updatePositive(id)}\n                      title={translate('Remover', 'Remove')}\n                    >\n                      <Tooltip title={<Translate pt=\"Remover\" en=\"Remove\" />}>\n                        <GlyphCard width={selectedWidth} id={id} />\n                      </Tooltip>\n                    </TransparentButton>\n                  ) : (\n                    <div\n                      className=\"q-selections__no-glyph\"\n                      style={{ width: `${selectedWidth}px`, height: `${selectedWidth}px` }}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"q-selections__section q-selections__section--negative\">\n          {SELECTIONS_PLACEHOLDER.map((entry) => {\n            const id = negativeSelections[entry];\n            return (\n              <div className=\"q-selections__positive\" key={`neg-${entry}-${id}`}>\n                <div className=\"q-selections__entry\">\n                  <IconAvatar icon={<NoIcon />} />\n                  {id !== undefined ? (\n                    <TransparentButton onClick={() => updateNegative(id)}>\n                      <Tooltip title={<Translate pt=\"Remover\" en=\"Remove\" />} trigger=\"hover\">\n                        <GlyphCard width={selectedWidth} id={id} />\n                      </Tooltip>\n                    </TransparentButton>\n                  ) : (\n                    <div\n                      className=\"q-selections__no-glyph\"\n                      style={{ width: `${selectedWidth}px`, height: `${selectedWidth}px` }}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </SpaceContainer>\n\n      <Space className=\"glyphs\" wrap>\n        {glyphs.map((glyphId: string) => (\n          <Popover\n            key={glyphId}\n            content={\n              <PopoverGlyph\n                id={glyphId}\n                updatePositive={updatePositive}\n                updateNegative={updateNegative}\n                disablePositive={positiveSelections.length === 3}\n                disableNegative={negativeSelections.length === 3}\n              />\n            }\n            title={<Translate pt=\"Positivo ou Negativo?\" en=\"Positive or Negative\" />}\n            trigger=\"click\"\n          >\n            <TransparentButton>\n              <GlyphCard width={glyphWidth} id={glyphId} />\n            </TransparentButton>\n          </Popover>\n        ))}\n      </Space>\n\n      <SpaceContainer>\n        <SendButton\n          size=\"large\"\n          onClick={() => onSelectGlyphs({ glyphs: prepareGlyphs(positiveSelection, negativeSelection) })}\n          disabled={user.ready || (positiveSelections.length < 1 && negativeSelections.length < 1)}\n        >\n          <Translate pt={<>Enviar ícones</>} en={<>Submit glyphs</>} />\n        </SendButton>\n      </SpaceContainer>\n    </Step>\n  );\n}\n\ntype PopoverGlyphProps = {\n  id: CardId;\n  updatePositive: (key: string) => void;\n  updateNegative: (key: string) => void;\n  disablePositive: boolean;\n  disableNegative: boolean;\n};\n\nfunction PopoverGlyph({\n  id,\n  updatePositive,\n  updateNegative,\n  disablePositive,\n  disableNegative,\n}: PopoverGlyphProps) {\n  return (\n    <Space>\n      <TransparentButton onClick={() => updatePositive(id)} disabled={disablePositive}>\n        <IconAvatar icon={<YesIcon />} size=\"large\" />\n      </TransparentButton>\n      <TransparentButton onClick={() => updateNegative(id)} disabled={disableNegative}>\n        <IconAvatar icon={<NoIcon />} size=\"large\" />\n      </TransparentButton>\n    </Space>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { PlayerIconsIcon } from 'icons/PlayerIconsIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { RoundAnnouncement } from 'components/round';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { useOnSubmitGlyphsAPIRequest } from './utils/api-requests';\nimport { WaitingRoomCharacter } from './components/WaitingRoomCharacter';\nimport { StepSelectGlyphs } from './StepSelectGlyphs';\n\nexport function PhaseCharacterDescription({ players, state }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, goToNextStep, setStep } = useStep();\n\n  const onSelectGlyphs = useOnSubmitGlyphsAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<PlayerIconsIcon />}\n      title={<Translate pt=\"Descreva seu personagem com ícones\" en=\"Describe your character with glyphs\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt={<>Selecione até 6 ícones que ajudem os outros jogadores a adivinhar o seu personagem</>}\n          en={<>Select up to 6 glyphs that would help other players to guess who your character is</>}\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.CHARACTER_DESCRIPTION}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoom={{\n          content: <WaitingRoomCharacter user={user} />,\n        }}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n        ></RoundAnnouncement>\n\n        {/* Step 0 */}\n        <StepSelectGlyphs\n          user={user}\n          onSelectGlyphs={onSelectGlyphs}\n          characters={state.characters}\n          tableOrder={state.tableOrder}\n          announcement={announcement}\n          roundType={state.roundType}\n          imageCardMode={state.mode === 'imageCards'}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\nexport function ScoringRules({ currentRound }: { currentRound: number }) {\n  return (\n    <Translate\n      pt={\n        <>\n          Você ganha <PointsHighlight>{currentRound}</PointsHighlight>ponto para cada par que acertar e também{' '}\n          <PointsHighlight>{currentRound}</PointsHighlight>ponto para cada jogador que acertar o seu.\n        </>\n      }\n      en={\n        <>\n          You get <PointsHighlight>{currentRound}</PointsHighlight>point for each pair you get correctly and\n          also <PointsHighlight>{currentRound}</PointsHighlight>point for each player who gets your character\n          correctly\n        </>\n      }\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { shuffle } from 'lodash';\nimport { useCallback, useEffect, useState } from 'react';\n// Ant Design Resources\nimport { ThunderboltOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { getEntryId, sortPlayers } from 'utils/helpers';\n// Components\nimport { SendButton, TransparentButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { RibbonGroup } from 'components/ribbons';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { Characters, SubmitGuessesPayload } from './utils/types';\nimport { getRibbons, prepareGuesses } from './utils/helpers';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { PlayerGlyphs } from './components/PlayerGlyphs';\nimport { Card } from './components/Card';\n\ntype StepGuessingProps = {\n  user: GamePlayer;\n  players: GamePlayers;\n  onSubmitGuesses: (payload: SubmitGuessesPayload) => void;\n  characters: Characters;\n  tableOrder: CardId[];\n  round: GameRound;\n  imageCardMode: boolean;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepGuessing({\n  user,\n  announcement,\n  onSubmitGuesses,\n  players,\n  characters,\n  tableOrder,\n  round,\n  imageCardMode,\n}: StepGuessingProps) {\n  const { isLoading } = useLoading();\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 45,\n    maxWidth: 60,\n  });\n  const characterWidth = useCardWidth(8, {\n    gap: 16,\n    minWidth: 120,\n    maxWidth: 200,\n  });\n  const { votes, setVotes, activateItem, isVotingComplete, isItemActive } = useVotingMatch(\n    'player',\n    true,\n    Object.keys(players).length,\n    {},\n  );\n  const [choseRandomly, setChoseRandomly] = useState(false);\n\n  const onGuessForMe = () => {\n    setChoseRandomly(true);\n    const usedPlayers = Object.keys(votes);\n    const usedCharacters = Object.values(votes);\n    const playerKeys = Object.keys(players)\n      .map((playerId: string) => getEntryId(['player', playerId]))\n      .filter((key: string) => !usedPlayers.includes(key));\n    const characterKeys = shuffle(\n      Object.keys(characters)\n        .map((cardId: CardId) => getEntryId(['char', cardId]))\n        .filter((key: string) => !usedCharacters.includes(key)),\n    );\n    const newVotes = { ...votes };\n    playerKeys.forEach((playerKey: string, index: number) => {\n      if (!newVotes[playerKey]) {\n        newVotes[playerKey] = characterKeys[index];\n      }\n    });\n    setVotes(newVotes);\n    return newVotes;\n  };\n\n  const selectOwnCard = useCallback(() => {\n    if (user.character) {\n      return {\n        [getEntryId(['player', user.id])]: getEntryId(['char', user.character.id]),\n      };\n    }\n  }, [user]);\n\n  // Dev Mocks\n  useMock(() => {\n    onSubmitGuesses({ guesses: prepareGuesses(onGuessForMe()), choseRandomly });\n  });\n\n  // Auto-select the players own drawing and word\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Hook should be called only if the user character changes\n  useEffect(() => {\n    const selection = selectOwnCard();\n\n    if (selection) {\n      setVotes((s) => ({ ...s, ...selection }));\n    }\n  }, [user?.character?.id]);\n\n  const ribbons = getRibbons(players, votes);\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle>\n        <Translate pt={<>Pareie os cada personagem com um jogador</>} en={<>Pair player and characters</>} />\n      </StepTitle>\n\n      <RuleInstruction type=\"rule\">\n        <Translate\n          pt={\n            <>\n              De acordo com a seleção de ícones de cada jogador, tente adivinhar todos os pares.\n              <br />\n              <strong>Clique</strong> em uma das barras de ícones então no personagem correspondente.\n              <br />\n              Para desfazer, basta selecionar normalmente que sua escolha era sobreposta.\n            </>\n          }\n          en={\n            <>\n              Based on each player's glyphs selection, try to guess the pairs.\n              <br />\n              <strong>Click</strong> on one of the glyph bars and then on the corresponding character.\n              <br />\n              To undo, just select normally that your choice was overridden.\n            </>\n          }\n        />\n        <br />\n        <ScoringRules currentRound={round.current} />\n      </RuleInstruction>\n\n      <div className=\"q-voting-container\">\n        <div className=\"q-voting-characters\">\n          {tableOrder.map((cardId) => {\n            const entryId = getEntryId(['char', cardId]);\n            const labels = ribbons[cardId] ?? [];\n\n            return (\n              <TransparentButton\n                key={cardId}\n                onClick={() => activateItem(entryId)}\n                active={isItemActive(entryId)}\n                className=\"q-voting-characters__button\"\n              >\n                <RibbonGroup labels={labels} />\n                <Card\n                  character={characters[cardId]}\n                  width={characterWidth}\n                  className={clsx(cardId === 'a' && 'q-character-player')}\n                  imageCardMode={imageCardMode}\n                />\n              </TransparentButton>\n            );\n          })}\n        </div>\n\n        <div className=\"q-players-glyphs\">\n          {sortPlayers(players).map((player) => {\n            const entryId = getEntryId(['player', player.id]);\n\n            return (\n              <TransparentButton\n                key={`glyphs-for-${player.id}`}\n                onClick={() => activateItem(entryId)}\n                active={isItemActive(entryId)}\n              >\n                <PlayerGlyphs player={player} glyphWidth={glyphWidth} done={Boolean(votes[entryId])} />\n              </TransparentButton>\n            );\n          })}\n        </div>\n      </div>\n\n      <SpaceContainer>\n        <SendButton\n          size=\"large\"\n          onClick={() => onSubmitGuesses({ guesses: prepareGuesses(votes), choseRandomly })}\n          disabled={user.ready || !isVotingComplete}\n        >\n          <Translate pt={<>Enviar pares</>} en={<>Submit guesses</>} />\n        </SendButton>\n        <Button\n          size=\"large\"\n          type=\"dashed\"\n          onClick={() => onGuessForMe()}\n          disabled={isLoading || user.ready}\n          icon={<ThunderboltOutlined />}\n        >\n          <Translate pt={<>Desistir</>} en={<>Guess for me</>} />\n        </Button>\n      </SpaceContainer>\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { useOnSubmitGuessesAPIRequest } from './utils/api-requests';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { StepGuessing } from './StepGuessing';\n\nexport function PhaseGuessing({ players, state }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitGuesses = useOnSubmitGuessesAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<EvaluateIcon />}\n      title={\n        <Translate pt=\"Pareie os personagens e símbolos\" en=\"Pair characters with the players' glyphs\" />\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <ScoringRules currentRound={state.round.current} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.GUESSING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepGuessing\n          user={user}\n          onSubmitGuesses={onSubmitGuesses}\n          characters={state.characters}\n          tableOrder={state.tableOrder}\n          players={players}\n          announcement={announcement}\n          round={state.round}\n          imageCardMode={state.mode === 'imageCards'}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Components\nimport { ImageCard } from 'components/image-cards';\nimport { DualTranslate, Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\nimport {\n  SlideShowBubbleValue,\n  SlideShowLabel,\n  SlideShowNoWins,\n  SlideShowPlayersList,\n} from 'components/slide-show';\n// Internal\nimport type { Characters } from '../utils/types';\n// Icons\n\ntype GalleryGuessesProps = {\n  players: GamePlayers;\n  playersSay: Record<CardId, PlayerId[]>;\n  playersPoints: NumberDictionary;\n  characters: Characters;\n  currentColor: string;\n  currentPlayer: GamePlayer;\n  round: GameRound;\n  imageCardMode: boolean;\n};\n\nexport function GalleryGuesses({\n  players,\n  playersSay,\n  playersPoints,\n  characters,\n  currentColor,\n  currentPlayer,\n  round,\n  imageCardMode,\n}: GalleryGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        character: characters[cardId],\n        playersIds,\n        count: playersIds.length,\n        isCorrect: currentPlayer.character.id === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc'],\n  );\n  const correctGuesses = playersSay[currentPlayer.character.id];\n\n  return (\n    <Space className=\"q-gallery__info-container\" direction=\"vertical\">\n      <Space className=\"q-gallery__votes\" direction=\"vertical\">\n        <SlideShowLabel>\n          <Translate pt=\"Jogadores votaram\" en=\"Players voted\" />\n        </SlideShowLabel>\n\n        {entries.map((entry, index) => {\n          return (\n            <div key={`guess-${entry.cardId}-${index}`} className=\"q-gallery__guess\">\n              <SlideShowBubbleValue winner={entry.isCorrect} backgroundColor={currentColor}>\n                {imageCardMode ? (\n                  <ImageCard id={entry.character.id} cardWidth={35} className=\"inline\" />\n                ) : (\n                  <DualTranslate>{entry.character.name}</DualTranslate>\n                )}\n              </SlideShowBubbleValue>\n              <SlideShowPlayersList playersIds={entry.playersIds} players={players} />\n            </div>\n          );\n        })}\n      </Space>\n\n      <Space className=\"q-gallery__votes\" direction=\"vertical\">\n        <SlideShowLabel>\n          <Translate pt=\"Pontos\" en=\"Points\" />\n        </SlideShowLabel>\n\n        {correctGuesses.length ? (\n          <>\n            <div className=\"q-gallery__players\">\n              <SlideShowPlayersList playersIds={correctGuesses} players={players}>\n                <StarPoints quantity={round.current} keyPrefix={`guessers-points-${currentPlayer.id}`} />\n              </SlideShowPlayersList>\n            </div>\n            <div className=\"q-gallery__player-points\">\n              <SlideShowPlayersList playersIds={[currentPlayer.id]} players={players}>\n                <StarPoints\n                  quantity={playersPoints?.[currentPlayer.id]}\n                  keyPrefix={`artist-points-${currentPlayer.id}`}\n                />\n              </SlideShowPlayersList>\n            </div>\n          </>\n        ) : (\n          <SlideShowNoWins>\n            <Translate\n              pt=\"Esses ícones devem ter sido uma bosta, heim.\"\n              en=\"It must have been a very crappy glyphs. What a shame...\"\n            />\n          </SlideShowNoWins>\n        )}\n      </Space>\n    </Space>\n  );\n}\n","// Types\nimport type { GameRound } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport type { SlideShowConfig } from 'hooks/useSlideShow';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { StepTitle } from 'components/text';\n// Internal\nimport type { Characters, GalleryEntry } from './utils/types';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { PlayerGlyphs } from './components/PlayerGlyphs';\nimport { GalleryGuesses } from './components/GalleryGuesses';\nimport { Card } from './components/Card';\n\ntype StepGalleryProps = {\n  players: GamePlayers;\n  characters: Characters;\n  gallery: GalleryEntry[];\n  slideShowConfig: SlideShowConfig;\n  round: GameRound;\n  imageCardMode: boolean;\n};\n\nexport function StepGallery({\n  players,\n  gallery,\n  characters,\n  slideShowConfig,\n  round,\n  imageCardMode,\n}: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 45,\n    maxWidth: 60,\n  });\n  const characterWidth = useCardWidth(8, {\n    gap: 16,\n    minWidth: 120,\n    maxWidth: 200,\n  });\n  const { playerId, characterId, playersPoints, playersSay } = gallery[slideShowConfig.slideIndex];\n\n  const currentPlayer = players[playerId];\n  const currentColor = getAvatarColorById(currentPlayer.avatarId);\n\n  return (\n    <Step className=\"l-step-album\">\n      <StepTitle>\n        <Translate pt=\"Galeria\" en=\"Gallery\" />\n      </StepTitle>\n\n      <PopoverRule content={<ScoringRules currentRound={round.current} />} />\n\n      <SlideShow\n        config={slideShowConfig}\n        barColor={currentColor}\n        leftClassName=\"q-gallery__result\"\n        rightClassName=\"q-gallery__info\"\n      >\n        <div className=\"q-gallery__result-container\">\n          <div className=\"q-gallery__player\" style={{ backgroundColor: currentColor }}>\n            <AvatarName player={currentPlayer} size=\"large\" />\n          </div>\n          <SpaceContainer vertical>\n            <Card character={characters[characterId]} width={characterWidth} imageCardMode={imageCardMode} />\n            <PlayerGlyphs player={currentPlayer} glyphWidth={glyphWidth} />\n          </SpaceContainer>\n        </div>\n\n        <GalleryGuesses\n          players={players}\n          playersSay={playersSay}\n          playersPoints={playersPoints}\n          characters={characters}\n          currentColor={currentColor}\n          currentPlayer={currentPlayer}\n          round={round}\n          imageCardMode={imageCardMode}\n        />\n      </SlideShow>\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { PictureOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Types\nimport type { GameRound, GameRanking } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Components\nimport { HostNextPhaseButton } from 'components/host';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { RoundsLeftInstruction } from 'components/text';\n// Internal\nimport { ScoringRules } from './components/RulesBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  round: GameRound;\n  onGoBack: () => void;\n};\n\nexport function StepRanking({ players, ranking, round, onGoBack }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate key=\"1\" pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          key=\"2\"\n          pt=\"Votos corretos em seu personagem por outros jogadores\"\n          en=\"Correct guesses on your character by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules currentRound={round.current} />} />\n\n      <RoundsLeftInstruction round={round} />\n\n      <Button size=\"large\" onClick={onGoBack} icon={<PictureOutlined />}>\n        <Translate pt=\"Ver Galeria Novamente\" en=\"See Gallery Again\" />\n      </Button>\n\n      <HostNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { MirrorIcon } from 'icons/MirrorIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { SLIDE_DURATION } from './utils/constants';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\n\nexport function PhaseResults({ players, state }: PhaseProps) {\n  const { step, goToPreviousStep, goToNextStep } = useStep();\n\n  const slideShowConfig = useSlideShow({\n    length: state.gallery.length,\n    slideDuration: SLIDE_DURATION,\n    onExpire: goToNextStep,\n  });\n\n  const onGoBack = () => {\n    slideShowConfig.reset();\n    goToPreviousStep();\n  };\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<MirrorIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          type=\"block\"\n        >\n          <Instruction>\n            <ScoringRules currentRound={state.round.current} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          players={players}\n          gallery={state.gallery}\n          characters={state.characters}\n          slideShowConfig={slideShowConfig}\n          round={state.round}\n          imageCardMode={state.mode === 'imageCards'}\n        />\n\n        {/* Step 2 */}\n        <StepRanking players={players} ranking={state.ranking} round={state.round} onGoBack={onGoBack} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { useMemo } from 'react';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { AvatarStrip, IconAvatar } from 'components/avatars';\nimport { GlyphCard } from 'components/cards/GlyphCard';\n// Internal\nimport type { FinalCharacterEntry } from '../utils/types';\nimport { parseSelectedGlyphs } from '../utils/helpers';\nimport { Card } from './Card';\n\ntype FinalCharacterProps = {\n  players: GamePlayers;\n  character: FinalCharacterEntry;\n  glyphWidth: number;\n  imageCardsMode: boolean;\n};\n\nexport function FinalCharacter({ players, character, glyphWidth, imageCardsMode }: FinalCharacterProps) {\n  const [positive, negative] = useMemo(() => parseSelectedGlyphs(character.glyphs ?? {}), [character.glyphs]);\n\n  return (\n    <div className=\"q-player-glyphs q-final-character\">\n      <AvatarStrip player={players[character.playerId]} withName className=\"q-player-glyphs__strip\" />\n      <Card width={100} character={character} imageCardMode={imageCardsMode} />\n\n      {positive.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--positive\"\n            key={`pos-${character.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<YesIcon />} size=\"small\" />\n            {id ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n      {negative.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--negative\"\n            key={`neg-${character.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<NoIcon />} size=\"small\" />\n            {id ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Types\nimport type { PhaseProps } from 'types/game';\n// Icons\nimport { TrophyIcon } from 'icons/TrophyIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\n// Internal\nimport type { FinalCharacterEntry } from './utils/types';\nimport { achievementsReference } from './utils/achievements';\nimport { FinalCharacter } from './components/FinalCharacter';\n\nexport function PhaseGameOver({ state, players, meta }: PhaseProps) {\n  return (\n    <GameOverWrapper state={state} players={players} announcementIcon={<TrophyIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <SpaceContainer wrap>\n        {orderBy(state.gallery, `name.${meta.language}`).map((entry: FinalCharacterEntry) => (\n          <FinalCharacter\n            players={players}\n            character={entry}\n            glyphWidth={30}\n            key={entry.id}\n            imageCardsMode={!!meta.options?.imageCardsMode}\n          />\n        ))}\n      </SpaceContainer>\n    </GameOverWrapper>\n  );\n}\n","// Types\nimport type { GameState } from 'types/game';\n// Utils\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { Session } from 'components/session';\n// Internal\nimport { PhaseCharacterFiltering } from './PhaseCharacterFiltering';\nimport { PhaseCharacterDescription } from './PhaseCharacterDescription';\nimport { PhaseGuessing } from './PhaseGuessing';\nimport { PhaseResults } from './PhaseResults';\nimport { PhaseGameOver } from './PhaseGameOver';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.QUEM_SOU_EU.CHARACTER_FILTERING:\n      return PhaseCharacterFiltering;\n    case PHASES.QUEM_SOU_EU.CHARACTER_DESCRIPTION:\n      return PhaseCharacterDescription;\n    case PHASES.QUEM_SOU_EU.GUESSING:\n      return PhaseGuessing;\n    case PHASES.QUEM_SOU_EU.RESULTS:\n      return PhaseResults;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionQuemSouEu() {\n  return <Session gameCollection={GAME_COLLECTION.QUEM_SOU_EU} getActiveComponent={getActiveComponent} />;\n}\n\nexport default SessionQuemSouEu;\n","import { useMemo } from 'react';\n// Types\nimport type { GamePlayer } from 'types/player';\n// Icons\nimport { BoxCheckMarkIcon } from 'icons/BoxCheckMarkIcon';\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { AvatarStrip, IconAvatar } from 'components/avatars';\nimport { GlyphCard } from 'components/cards/GlyphCard';\n// Internal\nimport { parseSelectedGlyphs } from '../utils/helpers';\n\ntype PlayerGlyphsProps = {\n  player: GamePlayer;\n  glyphWidth: number;\n  done?: boolean;\n};\n\nexport function PlayerGlyphs({ player, glyphWidth, done }: PlayerGlyphsProps) {\n  const [positive, negative] = useMemo(\n    () => parseSelectedGlyphs(player.selectedGlyphs ?? {}),\n    [player.selectedGlyphs],\n  );\n\n  return (\n    <div className=\"q-player-glyphs\">\n      <AvatarStrip\n        player={player}\n        withName\n        className=\"q-player-glyphs__strip\"\n        icon={done ? <BoxCheckMarkIcon /> : undefined}\n      />\n      {positive.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--positive\"\n            key={`pos-${player.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<YesIcon />} size=\"small\" />\n            {id ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n      {negative.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--negative\"\n            key={`neg-${player.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<NoIcon />} size=\"small\" />\n            {id ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Types\nimport type { AchievementReference } from 'types/achievements';\n\nconst ACHIEVEMENTS = {\n  MOST_GLYPHS: 'MOST_GLYPHS',\n  LEAST_GLYPHS: 'LEAST_GLYPHS',\n  MOST_POSITIVE: 'MOST_POSITIVE',\n  LEAST_POSITIVE: 'LEAST_POSITIVE',\n  MOST_NEGATIVE: 'MOST_NEGATIVE',\n  LEAST_NEGATIVE: 'LEAST_NEGATIVE',\n  SINGLE_ICON: 'SINGLE_ICON',\n  TABLE_VOTES: 'TABLE_VOTES',\n  CHOOSE_FOR_ME: 'CHOOSE_FOR_ME',\n};\n\nexport const achievementsReference: AchievementReference = {\n  [ACHIEVEMENTS.MOST_GLYPHS]: {\n    icon: 'arrow-up',\n    title: {\n      pt: 'Melhor Uso dos Ícones',\n      en: 'Best Glyph User',\n    },\n    description: {\n      pt: 'Usou o maior número de ícones durante o jogo',\n      en: 'Used the most glyphs during the game',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_GLYPHS]: {\n    icon: 'arrow-down',\n    title: {\n      pt: 'Mais Sucinto',\n      en: 'Most Succinct',\n    },\n    description: {\n      pt: 'Usou o menor número de ícones durante o jogo',\n      en: 'Used the fewest glyphs during the game',\n    },\n  },\n  [ACHIEVEMENTS.MOST_POSITIVE]: {\n    icon: 'thumbs-up',\n    title: {\n      pt: 'Mais Positivo',\n      en: 'Most Positive',\n    },\n    description: {\n      pt: 'Usou mais ícones no lado positivo',\n      en: 'Used the most glyphs on the positive side',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_POSITIVE]: {\n    icon: 'arrow-left',\n    title: {\n      pt: 'Menos Positivo',\n      en: 'Least Positive',\n    },\n    description: {\n      pt: 'Usou menos ícones no lado positivo',\n      en: 'Used the least glyphs on the positive side',\n    },\n  },\n  [ACHIEVEMENTS.MOST_NEGATIVE]: {\n    icon: 'thumbs-down',\n    title: {\n      pt: 'Mais Negativo',\n      en: 'Most Negative',\n    },\n    description: {\n      pt: 'Usou mais ícones no lado negativo',\n      en: 'Used the most glyphs on the negative side',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_NEGATIVE]: {\n    icon: 'arrow-right',\n    title: {\n      pt: 'Menos Negativo',\n      en: 'Least Negative',\n    },\n    description: {\n      pt: 'Usou menos ícones no lado negativo',\n      en: 'Used the least glyphs on the negative side',\n    },\n  },\n  [ACHIEVEMENTS.SINGLE_ICON]: {\n    icon: 'one',\n    title: {\n      pt: 'Mais Único',\n      en: 'Most Unique',\n    },\n    description: {\n      pt: 'Usou apenas um ícone mais vezes',\n      en: 'Used a single icon most times',\n    },\n  },\n  [ACHIEVEMENTS.TABLE_VOTES]: {\n    icon: 'table',\n    title: {\n      pt: 'Melhor Votador Pra Mesa',\n      en: 'Best Table Voter',\n    },\n    description: {\n      pt: 'Votou nas cartas extras que não eram de nenhum jogador mais vezes',\n      en: \"Voted for extra cards that didn't belong to any player the most\",\n    },\n  },\n  [ACHIEVEMENTS.CHOOSE_FOR_ME]: {\n    icon: 'dice',\n    title: {\n      pt: 'Menos Brasileiro',\n      en: 'The Shirker',\n    },\n    description: {\n      pt: 'Apertou o botão Chutar Restantes mais vezes',\n      en: \"Pressed 'Guess for me' the most\",\n    },\n  },\n};\n\nexport default achievementsReference;\n","// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Utils\nimport { SEPARATOR } from 'utils/constants';\n\n/**\n * Creates a glyph reference dictionary where true means positive and false means negative\n * @param positive\n * @param negative\n * @returns\n */\nexport const prepareGlyphs = (\n  positive: BooleanDictionary,\n  negative: BooleanDictionary,\n): BooleanDictionary => {\n  const dict: BooleanDictionary = {};\n  Object.keys(positive).forEach((key) => {\n    dict[key] = true;\n  });\n  Object.keys(negative).forEach((key) => {\n    dict[key] = false;\n  });\n\n  return dict;\n};\n\nexport const parseSelectedGlyphs = (glyphs: BooleanDictionary) => {\n  const positive: string[] = [];\n  const negative: string[] = [];\n\n  Object.keys(glyphs).forEach((id) => {\n    if (glyphs[id]) {\n      positive.push(id);\n    } else {\n      negative.push(id);\n    }\n  });\n\n  while (positive.length < 3) {\n    positive.push('');\n  }\n\n  while (negative.length < 3) {\n    negative.push('');\n  }\n\n  return [positive, negative];\n};\n\n/**\n * Get list of players on each voted character\n * @param players\n * @param votes\n * @returns\n */\nexport const getRibbons = (players: GamePlayers, votes: StringDictionary): Record<string, GamePlayer[]> => {\n  const votesDict: Record<string, GamePlayer[]> = {};\n\n  Object.keys(votes).forEach((playerEntry) => {\n    const playerId = playerEntry.split(SEPARATOR)[1];\n    const characterId = votes[playerEntry].split(SEPARATOR)[1];\n\n    if (votesDict[characterId] === undefined) {\n      votesDict[characterId] = [];\n    }\n\n    votesDict[characterId].push(players[playerId]);\n  });\n\n  return votesDict;\n};\n\n/**\n * Removes prefixes from votes\n * @param votes\n * @returns\n */\nexport const prepareGuesses = (votes: StringDictionary): StringDictionary => {\n  const result: StringDictionary = {};\n\n  Object.keys(votes).forEach((playerEntry) => {\n    const playerId = playerEntry.split(SEPARATOR)[1];\n    const characterId = votes[playerEntry].split(SEPARATOR)[1];\n\n    result[playerId] = characterId;\n  });\n\n  return result;\n};\n","import { type Dispatch, useState } from 'react';\n\ntype UseBooleanDictionaryReturnValue = {\n  /**\n   * The dictionary\n   */\n  dict: BooleanDictionary;\n  /**\n   * Set the dictionary\n   */\n  setDict: Dispatch<React.SetStateAction<BooleanDictionary>>;\n  /**\n   * Add or remove an entry from the dictionary\n   * @param key - The key to add or remove\n   */\n  updateDict: (key: string) => void;\n  /**\n   * Reset the dictionary to the initial state\n   */\n  reset: () => void;\n  /**\n   * The number of entries in the dictionary\n   */\n  length: number;\n  /**\n   * The list of keys in the dictionary\n   */\n  keys: string[];\n};\n\n/**\n * A dictionary of booleans\n * @param initialState - The initial state, usually an empty object\n * @param validation - A function to validate if an entry can be added to the dictionary\n * @returns - A dictionary of booleans and its functions\n */\nexport function useBooleanDictionary(\n  initialState: BooleanDictionary,\n  validation?: (...args: any[]) => boolean,\n): UseBooleanDictionaryReturnValue {\n  const [dict, setDict] = useState(initialState);\n\n  const updateDict = (key: string) => {\n    const isValid = !validation || validation(dict);\n    if (!dict[key] && isValid) {\n      setDict((s) => ({\n        ...s,\n        [key]: true,\n      }));\n    } else {\n      const dictCopy = { ...dict };\n      delete dictCopy[key];\n      setDict(dictCopy);\n    }\n  };\n\n  const reset = () => setDict(initialState);\n\n  const keys = Object.keys(dict);\n\n  return {\n    dict,\n    setDict,\n    updateDict,\n    reset,\n    keys,\n    length: keys.length,\n  };\n}\n","export function BoxCheckMarkIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#69bb69\"\n        d=\"M473.2 481.1H38.8a31.28 31.28 0 01-31.3-31.3V45.2A37.73 37.73 0 0145.2 7.5h421.6a37.73 37.73 0 0137.7 37.7v404.6a31.28 31.28 0 01-31.3 31.3z\"\n      ></path>\n      <path\n        fill=\"#53b652\"\n        d=\"M504.5 45.2v404.6a31.28 31.28 0 01-31.3 31.3H452a31.28 31.28 0 0031.3-31.3V45.2a37.73 37.73 0 00-37.7-37.7h21.1a37.75 37.75 0 0137.8 37.7z\"\n      ></path>\n      <path\n        fill=\"#69bb69\"\n        d=\"M434.7 436.5H77.3a25.65 25.65 0 01-25.6-25.6V82.8A30.81 30.81 0 0182.5 52h347.1a30.81 30.81 0 0130.8 30.8v328.1a25.73 25.73 0 01-25.7 25.6z\"\n      ></path>\n      <path\n        fill=\"#53b652\"\n        d=\"M429.5 52.1h-27.4a30.81 30.81 0 0130.8 30.8V411a25.65 25.65 0 01-25.6 25.6h27.4a25.65 25.65 0 0025.6-25.6V82.8a30.73 30.73 0 00-30.8-30.7z\"\n      ></path>\n      <path d=\"M512 45.2C512 21.1 492.1 0 466.8 0H45.2C20.7-.1.1 20.1 0 45.2v404.6c0 20.5 17 38.8 38.8 38.8h357.4a7.5 7.5 0 000-15H38.8a24.41 24.41 0 01-11.4-2.9l33.1-31.3a33.05 33.05 0 0016.8 4.6h357.4a33.05 33.05 0 0016.8-4.6l33.1 31.3a23.28 23.28 0 01-11.4 2.9h-42a7.5 7.5 0 000 15h42c20.9.1 38.7-17.2 38.8-38.8zM466.8 15a29.94 29.94 0 0116 4.6l-32.8 31a37.88 37.88 0 00-20.5-6h-347a37.63 37.63 0 00-20.5 6l-32.8-31a29.94 29.94 0 0116-4.6zM15 449.8V45.2a30.62 30.62 0 013.8-14.7L51.1 61a38.48 38.48 0 00-6.9 21.9V411a32.94 32.94 0 005.4 18.1l-32.4 30.7a24.32 24.32 0 01-2.2-10zM77.3 429a18.1 18.1 0 01-18.1-18.1V82.8a23.32 23.32 0 0123.3-23.3h347.1a23.32 23.32 0 0123.3 23.3v22.5a7.5 7.5 0 0015 0V82.8a38.48 38.48 0 00-6.9-21.9l32.3-30.5a30.62 30.62 0 013.8 14.7v404.6a23.51 23.51 0 01-2.2 9.9l-32.4-30.7a32.94 32.94 0 005.4-18.1V141.6a7.5 7.5 0 00-15 0V411a18.1 18.1 0 01-18.1 18.1z\"></path>\n      <path\n        fill=\"#ffeee6\"\n        d=\"M216.9 341.4a36 36 0 01-25.4-10.5l-44.2-44.2a35.921 35.921 0 0150.8-50.8l18.7 18.7 96.9-96.9a35.921 35.921 0 1150.8 50.8L242.3 330.8a35.54 35.54 0 01-25.4 10.6z\"\n      ></path>\n      <path d=\"M329.4 228.2a11.03 11.03 0 0015.6 15.6l27.5-27.5a47 47 0 00-66.4-66.4L217 239l-11-11a47 47 0 10-66.4 66.4l44.2 44.2a47.08 47.08 0 0066.4 0l57.2-57.2a11.03 11.03 0 10-15.6-15.6L234.6 323a24.87 24.87 0 01-35.2 0l-44.2-44.2a25 25 0 0135.3-35.3l18.7 18.7a11 11 0 007.8 3.2 11.4 11.4 0 007.8-3.2l96.9-96.9a25 25 0 1135.3 35.3z\"></path>\n    </svg>\n  );\n}\n","export function FilterIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffe17d\"\n        d=\"M215.92 304.64v191.83a8 8 0 0011.6 7.17l59.7-29.85a16 16 0 008.86-14.34V304.64a24.06 24.06 0 015.41-15.2L467 86.28a24.08 24.08 0 005.4-15.19V23.53a16 16 0 00-16-16H55.6a16 16 0 00-16 16v47.56A24.08 24.08 0 0045 86.28l165.51 203.17a24 24 0 015.41 15.19z\"\n      ></path>\n      <path\n        fill=\"#ffd164\"\n        d=\"M400 71.63H191.87V7.5H55.6a16 16 0 00-16 16v47.59A24.08 24.08 0 0045 86.28l165.51 203.16a24 24 0 015.41 15.2v191.83a8 8 0 0011.6 7.17l16.6-8.3V296.08H272L410.68 91.76A12.9 12.9 0 00400 71.63z\"\n      ></path>\n      <path\n        fill=\"#ffc350\"\n        d=\"M143.77 71.63H39.61A24.09 24.09 0 0045 86.28l165.52 203.16a24 24 0 013.78 6.64H232z\"\n      ></path>\n      <path d=\"M456.4 0H55.6a23.56 23.56 0 00-23.53 23.53v47.56A31.67 31.67 0 0039.16 91L204.7 294.18a16.61 16.61 0 013.72 10.46v191.83a15.49 15.49 0 0022.45 13.88l59.7-29.85a23.41 23.41 0 0013-21.05V304.64a16.61 16.61 0 013.72-10.46L472.84 91a31.67 31.67 0 007.09-19.93V23.53A23.56 23.56 0 00456.4 0zM288.58 459.45a8.48 8.48 0 01-4.72 7.63l-59.69 29.85a.46.46 0 01-.51 0 .45.45 0 01-.24-.44V303.58h65.2v155.87zm7.09-174.74a32.21 32.21 0 00-2.69 3.87H219a31.1 31.1 0 00-2.69-3.87L50.79 81.54a16.72 16.72 0 01-1.63-2.41h22.48a7.5 7.5 0 000-15H47.07v-40.6A8.54 8.54 0 0155.6 15h400.8a8.54 8.54 0 018.53 8.53v40.6h-24.56a7.5 7.5 0 000 15h22.48a17 17 0 01-1.63 2.41z\"></path>\n      <path d=\"M408.3 64.13H103.69a7.5 7.5 0 000 15H408.3a7.5 7.5 0 000-15z\"></path>\n    </svg>\n  );\n}\n","export function GarbageIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f7f3f1\"\n        d=\"M199.02 408.89h-19.67a5 5 0 01-5-5V290.5a5 5 0 015-5h19.67a5 5 0 015 5v113.4a5 5 0 01-5 5z\"\n      ></path>\n      <path\n        fill=\"#e38523\"\n        d=\"M411.84 215.02c-1.39-9.14-9.04-16.98-18.13-18.6-9.15-1.62-18.34 3.41-23.99 10.73a5.25 5.25 0 01-8.34 0c-5.64-7.32-14.84-12.35-23.98-10.72-9.1 1.61-16.75 9.45-18.13 18.59-.94 6.17.79 12.55 3.94 17.94 5.86 10.03 16.25 15.4 23.54 24.12h37.6c7.3-8.72 17.68-14.1 23.55-24.12 3.14-5.39 4.87-11.77 3.94-17.94z\"\n      ></path>\n      <path\n        fill=\"#e9a52d\"\n        d=\"M365.55 245.72c-39.32 0-71.2 55.63-71.2 91.73s31.88 65.38 71.2 65.38 71.2-29.27 71.2-65.37-31.88-91.74-71.2-91.74z\"\n      ></path>\n      <path\n        fill=\"#e38523\"\n        d=\"M388.03 251.79c18.94 19.47 31.4 49.66 31.4 72.23 0 36.11-31.88 65.38-71.2 65.38-13.4 0-25.92-3.4-36.62-9.3 13.05 13.9 32.37 22.73 53.94 22.73 39.32 0 71.2-29.27 71.2-65.38 0-28.89-20.42-70.28-48.72-85.66z\"\n      ></path>\n      <path\n        fill=\"#5ea570\"\n        d=\"M104.99 268.48a18.95 18.95 0 00-19.37-9.33c-7.57 1.33-13.3 7.84-15.62 15.13a4.34 4.34 0 01-6.49 2.36c-6.46-4.09-15.04-5.4-21.7-1.55a18.95 18.95 0 00-8.83 19.6c1.02 5.07 4.17 9.54 8.15 12.84 7.4 6.14 17 7.38 25.13 12.1l29.26-10.65c3.2-8.85 9.76-15.97 11.48-25.43.93-5.08.46-10.53-2.01-15.07z\"\n      ></path>\n      <path\n        fill=\"#6dc17d\"\n        d=\"M78.8 308.56c-36.94 13.45-47.87 76.62-35.52 110.55s52.31 50.54 89.26 37.1 56.89-51.86 44.54-85.8-61.33-75.3-98.28-61.85z\"\n      ></path>\n      <path\n        fill=\"#a87c72\"\n        d=\"M476.3 403.63a4.19 4.19 0 01-3.12-4.88 51.27 51.27 0 00-64.43-59.42 6.9 6.9 0 01-7.18-2.2 98.46 98.46 0 00-75.29-34.88 98.29 98.29 0 00-65.88 25.21 6.26 6.26 0 01-6.31 1.21 78.15 78.15 0 00-26.5-4.6 78.24 78.24 0 00-61.63 29.96 3.86 3.86 0 01-5.7.43 42.62 42.62 0 00-65.02 7.93 5.7 5.7 0 01-5.62 2.56 48.62 48.62 0 00-54.36 35.59 6.8 6.8 0 01-4.1 4.56A37.38 37.38 0 007.5 439.87v23.96a5 5 0 005 5h487a5 5 0 005-5v-23.96a37.36 37.36 0 00-28.2-36.24z\"\n      ></path>\n      <path\n        fill=\"#9a695e\"\n        d=\"M476.3 403.63a4.19 4.19 0 01-3.12-4.88 51.27 51.27 0 00-62.74-59.88 51.28 51.28 0 0137.74 59.88 4.19 4.19 0 003.12 4.88 37.36 37.36 0 0128.2 36.24v23.95a5 5 0 01-5 5h25a5 5 0 005-5v-23.95a37.36 37.36 0 00-28.2-36.24z\"\n      ></path>\n      <path\n        fill=\"#de5791\"\n        d=\"M249.31 269.6l8.26 22.67 33.77-12.3-8.26-22.67a7.59 7.59 0 00-9.72-4.53l-19.51 7.1a7.59 7.59 0 00-4.54 9.72z\"\n      ></path>\n      <path\n        fill=\"#91dafa\"\n        d=\"M318.11 322.21c-1.78-4.88-.66-10.16 2.5-14.23a7.77 7.77 0 001.04-7.4l-4.74-13.04a15.85 15.85 0 00-20.32-9.48l-44.28 16.12a15.85 15.85 0 00-9.47 20.32l4.74 13.03a7.77 7.77 0 005.57 5c5.03 1.1 9.27 4.42 11.05 9.3s.66 10.16-2.49 14.23a7.77 7.77 0 00-1.05 7.4l23.96 65.84 74.07-26.96-23.96-65.83a7.77 7.77 0 00-5.57-5c-5.02-1.09-9.27-4.41-11.05-9.3z\"\n      ></path>\n      <path\n        fill=\"#6cbff8\"\n        d=\"M334.73 336.5a7.77 7.77 0 00-5.57-5c-5.02-1.08-9.27-4.4-11.05-9.29s-.66-10.16 2.5-14.23a7.77 7.77 0 001.04-7.4l-4.74-13.04a15.85 15.85 0 00-20.32-9.48l-18.14 6.6c7.97-2.9 16.86 1.42 19.86 9.65l4.74 13.03c.9 2.5.61 5.3-.95 7.38-3.03 4.02-4.06 9.27-2.28 14.15s5.94 8.24 10.84 9.37a7.84 7.84 0 015.47 5.04l23.96 65.83 18.6-6.77z\"\n      ></path>\n      <path\n        fill=\"#a87c72\"\n        d=\"M410.44 432.03a26.44 26.44 0 00-31.2-26 4.75 4.75 0 01-5.44-3.55 45.62 45.62 0 00-82.3-13.59 5.38 5.38 0 01-7.04 1.77 26.45 26.45 0 00-39.09 23.23v35h165.07z\"\n      ></path>\n      <path d=\"M481.06 397.2a58.85 58.85 0 00-36.92-63.4 95.22 95.22 0 00-3.21-19.66 7.5 7.5 0 00-14.5 3.86 86.2 86.2 0 012.36 12.12 58.59 58.59 0 00-21.72 1.9 106.05 106.05 0 00-79.55-37.26l-3.56-9.8a23.39 23.39 0 00-1.78-3.78c10.27-14.3 25.77-27.96 43.37-27.96 20.13 0 37.28 17.5 47.81 34.63a7.5 7.5 0 0012.78-7.85c-7.31-11.9-15.79-21.52-24.9-28.52 4.77-4.14 9.53-8.59 13.13-14.74 4.27-7.3 6-15.42 4.89-22.85-1.86-12.24-12.06-22.69-24.24-24.85-10.3-1.84-21.6 2.6-29.47 11.4-7.86-8.8-19.16-13.24-29.45-11.4-12.2 2.16-22.4 12.61-24.24 24.85-1.13 7.42.6 15.53 4.87 22.85 3.6 6.17 8.39 10.62 13.18 14.76a98.34 98.34 0 00-19.11 19.84 23.28 23.28 0 00-14.95-.9l-5.72-15.7a15.1 15.1 0 00-19.34-9.03l-19.5 7.1c-3.8 1.38-6.82 4.15-8.52 7.8s-1.88 7.76-.5 11.54l5.71 15.72a23.15 23.15 0 00-11.41 11.33 23.19 23.19 0 00-.81 17.75 86.77 86.77 0 00-24.24 1.11v-27.55c0-6.9-5.6-12.5-12.5-12.5h-19.67c-6.9 0-12.5 5.6-12.5 12.5v48.47c-10.1-12.15-22.8-22.8-36.02-30.04a88.17 88.17 0 00-22.46-8.8c2.46-4.44 4.95-9.42 6-15.24 1.32-7.17.33-14.28-2.8-20.02a26.28 26.28 0 00-27.25-13.12c-8.7 1.53-16.15 7.8-20.12 16.7-8.7-4.2-18.62-4.22-26.14.14-9.33 5.41-14.56 17-12.43 27.56 1.28 6.39 5.09 12.47 10.7 17.14 4.57 3.79 9.7 6 14.43 7.82a85.38 85.38 0 00-10.06 17.51c-6.65 15.35-10.08 33.6-9.74 51.62a55.84 55.84 0 00-2.85 8A44.63 44.63 0 000 439.86v23.96c0 6.9 5.6 12.5 12.5 12.5h86.87a7.5 7.5 0 100-15H15v-21.46a29.71 29.71 0 0118.93-27.8 14.34 14.34 0 008.58-9.61 37.14 37.14 0 012.81-7.53 41.14 41.14 0 0143.2-22.56 13.26 13.26 0 0013.02-5.9 35.04 35.04 0 0129.52-16.08 35 35 0 0124.05 9.52 11.39 11.39 0 0016.74-1.24 71 71 0 0170.12-25.62 15.01 15.01 0 009.6 6.81c2.71.59 4.75 2.24 5.58 4.54.84 2.29.34 4.86-1.37 7.06a15.35 15.35 0 00-2.17 14.58l5.9 16.22a34 34 0 00-21.64 31.63v15.45a7.5 7.5 0 1015 0V413.9a18.97 18.97 0 0128-16.65 12.92 12.92 0 0016.9-4.23 38.02 38.02 0 0131.87-17.23 38.08 38.08 0 0136.9 28.57 12.3 12.3 0 0014.04 9.05 18.96 18.96 0 0122.36 18.63v3a7.5 7.5 0 1015 0v-3a33.97 33.97 0 00-37.54-33.75 53.03 53.03 0 00-26.77-31.78l-11.86-32.57a15.17 15.17 0 00-11.02-9.75c-2.72-.6-4.76-2.25-5.6-4.54-.83-2.29-.33-4.86 1.36-7.05.68-.87 1.25-1.82 1.71-2.82a91.08 91.08 0 0167.62 32.2 14.41 14.41 0 0014.99 4.57 43.82 43.82 0 0155 50.7 11.68 11.68 0 008.63 13.66A29.82 29.82 0 01497 439.87v21.46H134.37a7.5 7.5 0 100 15H499.5c6.9 0 12.5-5.6 12.5-12.5v-23.96a44.8 44.8 0 00-30.94-42.67zM196.52 293v29.35a84.97 84.97 0 00-14.67 7.38V293zm-156.19.2a11.54 11.54 0 015.25-11.62c4.23-2.45 10.03-1.06 13.93 1.42a11.8 11.8 0 0010.41 1.1 11.78 11.78 0 007.23-7.55c1.4-4.37 4.95-9.17 9.76-10.01a11.54 11.54 0 0111.5 5.52c1.48 2.73 1.91 6.33 1.21 10.15-.78 4.32-3.09 8.4-5.53 12.73-.65 1.15-1.3 2.33-1.95 3.53-5.53.2-10.85 1.2-15.9 3.04a51.38 51.38 0 00-14.1 7.9c-5.99-2.38-11.98-4.13-16.22-7.65-3-2.48-4.98-5.52-5.59-8.55zm49.24 64.17a56.06 56.06 0 00-42.29 11.77c4.45-28.7 19.1-48.08 34.08-53.53 19.2-6.99 44.04 4.24 63.06 21.59a50.24 50.24 0 00-13.36-1.81 49.97 49.97 0 00-41.49 21.98zm240.12-128.2c-2.55-4.36-3.62-8.98-3-13.03.9-5.97 6.07-11.27 12.03-12.33 5.67-1 12.23 2.1 16.72 7.92 2.44 3.17 6.13 4.98 10.11 4.98s7.67-1.81 10.1-4.98c4.5-5.82 11.07-8.92 16.74-7.91 5.95 1.05 11.13 6.35 12.03 12.32.61 4.04-.46 8.67-3 13.04-3.18 5.42-8.47 9.61-13.66 14.1a53.19 53.19 0 00-22.21-5.06 53.04 53.04 0 00-22.18 5.08c-5.13-4.43-10.52-8.7-13.68-14.13zm-73.28 37.74l19.51-7.1c.05-.02.1 0 .12.06l5.68 15.62-19.67 7.16-5.69-15.62c-.01-.04.01-.1.05-.12zm71.1 71.9c.02.02.12.1.17.26l8.03 22.06a52.98 52.98 0 00-49.4 22.06 34 34 0 00-11.62-3.11l-6.99-19.19c-.05-.15-.03-.27-.06-.24 4.85-6.27 6.2-14.26 3.61-21.38-2.59-7.13-8.76-12.4-16.44-14.05a.58.58 0 01-.18-.26l-4.74-13.03a8.3 8.3 0 01.27-6.4 8.28 8.28 0 014.72-4.3l44.27-16.12a8.37 8.37 0 0110.71 5l4.75 13.03.02.11c0 .06 0 .11.02.16-4.84 6.27-6.18 14.26-3.59 21.37a22.3 22.3 0 0016.45 14.04zM167.72 146.83a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.74-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.42c6.81 4.61 7.4 15.66 5.08 23.97-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.89 16.8-6.1 20.03 1.17 34.5 9.25 40.79zm83.85 0a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.74-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.43c6.8 4.6 7.4 15.65 5.08 23.96-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.9 16.8-6.09 20.03 1.18 34.5 9.26 40.79zm83.85 0a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.73-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.42c6.81 4.61 7.4 15.66 5.08 23.97-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.89 16.8-6.1 20.03 1.17 34.5 9.25 40.79z\"></path>\n    </svg>\n  );\n}\n","export function MirrorIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffe07d\"\n        d=\"M436.567 191.783H75.431c-9.917 0-17.957 8.04-17.957 17.957 0 9.917 8.04 17.957 17.957 17.957h361.136c9.917 0 17.957-8.04 17.957-17.957 0-9.917-8.039-17.957-17.957-17.957z\"\n      ></path>\n      <path\n        fill=\"#ffd064\"\n        d=\"M454.527 209.738c0 9.92-8.04 17.96-17.96 17.96H75.431c-4.96 0-9.45-2.01-12.7-5.26s-5.26-7.74-5.26-12.7c0-2.87.68-5.59 1.88-8 .87 1.74 2.02 3.33 3.38 4.69 3.25 3.25 7.74 5.26 12.7 5.26h361.136c7.04 0 13.14-4.05 16.08-9.95 1.2 2.41 1.88 5.13 1.88 8z\"\n      ></path>\n      <path\n        fill=\"#ffe07d\"\n        d=\"M255.999 411.981c-70.7 0-128.014-57.314-128.014-128.014V135.514c0-70.7 57.314-128.014 128.014-128.014 70.7 0 128.014 57.314 128.014 128.014v148.453c0 70.7-57.314 128.014-128.014 128.014z\"\n      ></path>\n      <path\n        fill=\"#ffd064\"\n        d=\"M263.974 411.726c-2.64.17-5.3.25-7.98.25-70.699 0-128.009-57.309-128.009-128.009V135.519c0-70.71 57.31-128.019 128.009-128.019 2.68 0 5.34.08 7.98.25-66.979 4.11-120.029 59.739-120.029 127.769v148.448c0 68.02 53.05 123.649 120.029 127.759z\"\n      ></path>\n      <path\n        fill=\"#80b4fb\"\n        d=\"M354.009 135.519v148.448c0 54.049-43.97 98.009-98.009 98.009-13.79 0-26.92-2.86-38.83-8.02a98.133 98.133 0 01-30.24-20.51c-17.87-17.76-28.95-42.35-28.95-69.479V135.519c0-54.05 43.97-98.019 98.019-98.019 23.6 0 45.27 8.38 62.199 22.33a98.544 98.544 0 0123.16 27.57c8.051 14.219 12.651 30.649 12.651 48.119z\"\n      ></path>\n      <path\n        fill=\"#9dc6fb\"\n        d=\"M354.009 135.519v50.849L186.931 353.447c-17.87-17.76-28.95-42.35-28.95-69.479v-13.19L341.359 87.399c8.05 14.22 12.65 30.65 12.65 48.12zm0 101.599v46.85c0 54.049-43.97 98.009-98.009 98.009-13.79 0-26.92-2.86-38.83-8.02zM318.199 59.83L157.981 220.048v-84.529c0-54.05 43.97-98.019 98.019-98.019 23.6 0 45.27 8.38 62.199 22.33z\"\n      ></path>\n      <path\n        fill=\"#c19d8e\"\n        d=\"M91.41 484.856h36.575V176.243c0-10.1-8.188-18.288-18.288-18.288s-18.288 8.188-18.288 18.288v308.613z\"\n      ></path>\n      <path\n        fill=\"#b78b7a\"\n        d=\"M118.52 160.223c-1.52.83-2.9 1.87-4.12 3.09a18.23 18.23 0 00-5.36 12.93V484.86H91.41V176.243c0-5.05 2.05-9.62 5.36-12.93s7.88-5.35 12.93-5.35c3.2 0 6.2.82 8.82 2.26z\"\n      ></path>\n      <path\n        fill=\"#c19d8e\"\n        d=\"M384.013 484.856h36.575V176.243c0-10.1-8.188-18.288-18.288-18.288s-18.288 8.188-18.288 18.288v308.613z\"\n      ></path>\n      <path\n        fill=\"#b78b7a\"\n        d=\"M411.123 160.223c-1.52.83-2.9 1.87-4.12 3.09a18.23 18.23 0 00-5.36 12.93V484.86h-17.63V176.243c0-5.05 2.05-9.62 5.36-12.93s7.88-5.35 12.93-5.35c3.2 0 6.2.82 8.82 2.26z\"\n      ></path>\n      <path\n        fill=\"#c19d8e\"\n        d=\"M424.891 504.495H87.107c-11.882 0-21.515-9.633-21.515-21.515 0-11.882 9.633-21.515 21.515-21.515h337.784c11.882 0 21.515 9.633 21.515 21.515 0 11.883-9.632 21.515-21.515 21.515z\"\n      ></path>\n      <path\n        fill=\"#b78b7a\"\n        d=\"M138.731 504.5H87.112c-11.89 0-21.52-9.63-21.52-21.52 0-5.94 2.41-11.32 6.3-15.21 3.9-3.89 9.28-6.3 15.22-6.3h51.619c-5.94 0-11.32 2.41-15.22 6.3-3.89 3.89-6.3 9.27-6.3 15.21 0 11.89 9.63 21.52 21.52 21.52z\"\n      ></path>\n      <path d=\"M436.568 235.198c14.039 0 25.46-11.421 25.46-25.459 0-6.801-2.648-13.195-7.465-18.012-4.812-4.797-11.203-7.438-17.995-7.438h-8.479v-8.045c0-14.219-11.568-25.788-25.788-25.788a25.63 25.63 0 00-10.791 2.375V135.51c0-27.577-8.237-54.118-23.822-76.753a7.5 7.5 0 00-12.356 8.507c13.854 20.122 21.178 43.721 21.178 68.247v148.46c0 66.449-54.061 120.51-120.51 120.51s-120.51-54.061-120.51-120.51V135.51C135.49 69.061 189.55 15 256 15c29.899 0 58.574 11.026 80.743 31.046a7.5 7.5 0 1010.053-11.132C321.866 12.399 289.621 0 256 0c-74.72 0-135.51 60.79-135.51 135.51v17.321a25.623 25.623 0 00-10.792-2.376c-14.219 0-25.788 11.568-25.788 25.788v8.045h-8.478c-14.039 0-25.46 11.417-25.46 25.45 0 6.801 2.648 13.195 7.457 18.003 4.808 4.809 11.202 7.457 18.003 7.457h8.478V454.15c-6.539.713-12.596 3.599-17.308 8.311-5.49 5.477-8.513 12.764-8.513 20.52 0 16.001 13.019 29.02 29.02 29.02h337.78c7.749 0 15.034-3.018 20.514-8.497 5.485-5.486 8.507-12.774 8.507-20.523 0-14.915-11.32-27.232-25.821-28.83V235.198zm0-35.91a10.41 10.41 0 017.396 3.053 10.388 10.388 0 013.063 7.397c0 5.768-4.692 10.459-10.46 10.459h-8.479v-20.91h8.48zm-45.055-23.045c0-5.948 4.839-10.788 10.787-10.788s10.788 4.839 10.788 10.788v277.722h-21.575zm-292.603 0c0-5.948 4.839-10.788 10.788-10.788s10.788 4.839 10.788 10.788v277.722H98.91zm-23.478 43.955c-2.795 0-5.422-1.088-7.397-3.063s-3.063-4.602-3.063-7.396c0-5.762 4.692-10.45 10.46-10.45h8.478v20.91h-8.478zM438.91 482.98c0 3.742-1.461 7.264-4.114 9.917A13.917 13.917 0 01424.89 497H87.109c-7.73 0-14.02-6.29-14.02-14.02 0-3.743 1.458-7.258 4.113-9.907a13.918 13.918 0 019.907-4.103h62.61a7.5 7.5 0 000-15h-14.234V345.89c22.526 43.664 68.09 73.59 120.514 73.59s97.988-29.925 120.514-73.589V453.97H179.68a7.5 7.5 0 000 15h245.209c7.731 0 14.021 6.285 14.021 14.01z\"></path>\n      <path d=\"M255.999 30c-58.181 0-105.514 47.333-105.514 105.514v148.453c0 58.181 47.333 105.514 105.514 105.514s105.514-47.333 105.514-105.514V135.514C361.513 77.333 314.18 30 255.999 30zm90.514 253.967c0 49.91-40.604 90.514-90.514 90.514a90.28 90.28 0 01-25.18-3.567l28.544-28.544a7.5 7.5 0 00-10.607-10.606L215.58 364.94a90.85 90.85 0 01-17.807-11.73l85.009-85.009a7.5 7.5 0 00-10.607-10.606l-85.042 85.043c-13.491-15.812-21.649-36.304-21.649-58.67V135.514c0-49.91 40.604-90.514 90.514-90.514 18.812 0 36.3 5.771 50.792 15.632l-29.754 29.754a7.5 7.5 0 005.304 12.803 7.478 7.478 0 005.304-2.197l30.873-30.873a91.208 91.208 0 0113.381 16.134l-78.291 78.292a7.5 7.5 0 005.303 12.803 7.478 7.478 0 005.304-2.197l75.072-75.072c4.65 10.889 7.228 22.866 7.228 35.434v148.454z\"></path>\n    </svg>\n  );\n}\n","export function NoIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M.09.09h512v512H.09z\"></path>\n      <path\n        fill=\"#e94444\"\n        d=\"M256.09 441.78a184.89 184.89 0 01-85.58-20.86c-4.22-2.2-8.36-4.55-12.38-7.05a3.33 3.33 0 01-.62-5.19l251.16-251.17a3.34 3.34 0 015.2.62c2.49 4 4.85 8.16 7.05 12.38a185.75 185.75 0 01-164.83 271.27M98.33 354.09q-3.75-6-7-12.37a184.43 184.43 0 01-20.8-79.76c-3.24-105 82.25-192.47 187.33-191.5a185 185 0 0183.88 20.85q6.33 3.3 12.36 7.06a3.33 3.33 0 01.61 5.19L103.52 354.65a3.33 3.33 0 01-5.19-.61M256.09 7.5C118.8 7.5 7.5 118.8 7.5 256.09s111.3 248.59 248.59 248.59 248.59-111.29 248.59-248.59S393.38 7.5 256.09 7.5\"\n      ></path>\n      <path\n        fill=\"#d83131\"\n        d=\"M398.28 52.16a248 248 0 0189.35 190.93c0 137.29-111.29 248.59-248.59 248.59a247.45 247.45 0 01-142.18-44.69 247.53 247.53 0 00159.23 57.69c137.29 0 248.59-111.29 248.59-248.59a248.28 248.28 0 00-106.4-203.93\"\n      ></path>\n      <path d=\"M256.09 512.18A256.09 256.09 0 0175.01 75.01a256.11 256.11 0 11291.08 412.4 7.5 7.5 0 01-6.45-13.54 239.89 239.89 0 10-31.63 12.4 7.5 7.5 0 114.47 14.32 256.11 256.11 0 01-76.39 11.59z\"></path>\n      <path d=\"M101.2 363.09a10.48 10.48 0 01-1.25-.07 10.8 10.8 0 01-8-5 191.8 191.8 0 01-7.34-12.88 191 191 0 01-21.64-83c-1.63-52.89 18-103 55.21-141s86.85-58.74 139.71-58.23a191.22 191.22 0 0187.27 21.7c4.37 2.28 8.69 4.75 12.86 7.34a10.83 10.83 0 011.95 16.86L108.83 359.95a10.76 10.76 0 01-7.63 3.14zM256.09 77.9c-48.12 0-93.22 19-127.16 53.72-34.35 35.1-52.44 81.29-50.94 130.06a176 176 0 0020 76.52c1.29 2.47 2.64 4.94 4.06 7.37l243.54-243.6a175.7 175.7 0 00-7.36-4.06 176.41 176.41 0 00-80.47-20zm0 371.38a193.54 193.54 0 01-89-21.71 192.5 192.5 0 01-12.88-7.34 10.82 10.82 0 01-2-16.86l137.55-137.55a7.5 7.5 0 1110.6 10.61L166.59 410.2c2.42 1.41 4.89 2.77 7.38 4.06a178.52 178.52 0 0082.12 20c98.26 0 178.19-79.93 178.19-178.19a176.22 176.22 0 00-20-82.12c-1.29-2.49-2.65-5-4.06-7.38l-84.87 84.87a7.5 7.5 0 01-10.61-10.6l88.65-88.65a10.83 10.83 0 0116.86 1.95c2.58 4.16 5.05 8.49 7.34 12.89a191.11 191.11 0 0121.71 89c-.02 106.59-86.68 193.25-193.21 193.25z\"></path>\n    </svg>\n  );\n}\n","export function PlayerIconsIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M0 0h512v512H0z\"></path>\n      <path fill=\"#fbf4db\" d=\"M199.89 103.69a96.2 96.2 0 11-96.2-96.19 96.2 96.2 0 0196.2 96.19\"></path>\n      <path\n        fill=\"#8ceea1\"\n        d=\"M114.3 57a23.81 23.81 0 00-10.41 16.91 5.77 5.77 0 004.28 6.25 23.79 23.79 0 0029.89-20 5.8 5.8 0 00-4.28-6.26A23.84 23.84 0 00114.3 57\"\n      ></path>\n      <path fill=\"#ffe077\" d=\"M504.5 103.69A96.2 96.2 0 11408.31 7.5a96.2 96.2 0 0196.19 96.19\"></path>\n      <path fill=\"#7ad7ee\" d=\"M504.5 408.31a96.2 96.2 0 11-96.19-96.2 96.2 96.2 0 0196.19 96.2\"></path>\n      <path fill=\"#eceaec\" d=\"M448.39 416.32h-80.16v-24.05h80.16z\"></path>\n      <path fill=\"#8ceea1\" d=\"M199.89 408.31a96.2 96.2 0 11-96.2-96.2 96.2 96.2 0 0196.2 96.2\"></path>\n      <path\n        fill=\"#736572\"\n        d=\"M456.4 440.37h-16a8 8 0 01-8-8v-48.11a8 8 0 018-8h16a8 8 0 018 8v48.09a8 8 0 01-8 8\"\n      ></path>\n      <path\n        fill=\"#ff7e92\"\n        d=\"M89 79.73a25.07 25.07 0 00-25.39 25.53c.46 21.78 10.43 46.53 32.05 46.53a30.43 30.43 0 004.91-.42 19 19 0 016.21 0 30.43 30.43 0 004.91.42c22.14 0 32.06-26 32.06-48.1 0-26.87-26.45-23.94-54.75-24\"\n      ></path>\n      <path\n        fill=\"#ff744d\"\n        d=\"M392.27 133.51a16 16 0 11-16-16 16 16 0 0116 16m64.13-8.01a16 16 0 11-16-16 16 16 0 0116 16\"\n      ></path>\n      <path\n        fill=\"#736572\"\n        d=\"M376.24 440.37h-16a8 8 0 01-8-8v-48.11a8 8 0 018-8h16a8 8 0 018 8v48.09a8 8 0 01-8 8\"\n      ></path>\n      <path\n        fill=\"#615260\"\n        d=\"M352.19 416.32v16a8 8 0 008 8h16a8 8 0 008-8v-16zm80.16 0v16a8 8 0 008 8h16a8 8 0 008-8v-16z\"\n      ></path>\n      <path fill=\"#fbbd80\" d=\"M280.05 183.85a24.05 24.05 0 11-24.05-24 24 24 0 0124.05 24\"></path>\n      <path\n        fill=\"#dbd8db\"\n        d=\"M288.06 232h-64.12a32.07 32.07 0 00-32.07 32v32.06c0 13.28 32.07 24.05 32.07 24.05h72.14a24.05 24.05 0 0024.05-24.05V264a32.07 32.07 0 00-32.07-32\"\n      ></path>\n      <path\n        fill=\"#c9c5c9\"\n        d=\"M256 232h-32.06a32.07 32.07 0 00-32.07 32v32.06a24.05 24.05 0 0024 24.05h8V264A32.06 32.06 0 01256 232\"\n      ></path>\n      <path\n        fill=\"#f8ebcc\"\n        d=\"M119.73 183.85A96.09 96.09 0 0144.22 28.19a96.13 96.13 0 10135 135 95.71 95.71 0 01-59.47 20.68\"\n      ></path>\n      <path\n        fill=\"#ffd05b\"\n        d=\"M424.34 183.85a96.1 96.1 0 01-75.51-155.66 96.13 96.13 0 10135 135 95.71 95.71 0 01-59.47 20.68\"\n      ></path>\n      <path\n        fill=\"#4ce1a1\"\n        d=\"M119.73 488.47A96.1 96.1 0 0144.22 332.8a96.13 96.13 0 10135 135 95.66 95.66 0 01-59.47 20.69\"\n      ></path>\n      <path\n        fill=\"#4bc3ef\"\n        d=\"M424.34 488.47a96.11 96.11 0 01-75.51-155.67 96.13 96.13 0 10135 135 95.66 95.66 0 01-59.47 20.69\"\n      ></path>\n      <path fill=\"#fff\" d=\"M119.73 440.37h32.06v-64.13h-32.06a16 16 0 00-16 16v64.16a16 16 0 0116-16\"></path>\n      <path fill=\"#f8ebcc\" d=\"M87.66 440.37H55.6v-64.13h32.06a16 16 0 0116 16v64.16a16 16 0 00-16-16\"></path>\n      <path\n        fill=\"#ff5f7a\"\n        d=\"M87.68 105.26a25 25 0 0124.58-25.45c-7.22-.29-15.14-.07-23.24-.08a25.07 25.07 0 00-25.39 25.53c.46 21.78 10.43 46.53 32.05 46.53a30.43 30.43 0 004.91-.42 19 19 0 016.21 0 30.43 30.43 0 004.91.42 26.21 26.21 0 004-.3c-18.85-2.85-27.62-25.84-28-46.23\"\n      ></path>\n      <path d=\"M103.69 207.39A103.7 103.7 0 00187.92 43.2a7.5 7.5 0 10-12.17 8.8 88.7 88.7 0 11-23-22.18A7.5 7.5 0 00161 17.29a103.7 103.7 0 10-57.35 190.1m.04 289.61a88.7 88.7 0 1188.7-88.69 88.8 88.8 0 01-88.7 88.69m0-192.39a103.7 103.7 0 10103.7 103.7 103.82 103.82 0 00-103.7-103.7M408.31 497A88.7 88.7 0 11497 408.31 88.8 88.8 0 01408.31 497m0-192.39A103.7 103.7 0 10512 408.31a103.82 103.82 0 00-103.69-103.7M256 167.31a16.55 16.55 0 11-16.55 16.54A16.57 16.57 0 01256 167.31m0 48.09a31.55 31.55 0 10-31.55-31.55A31.58 31.58 0 00256 215.4M184.37 264v40.1a7.5 7.5 0 0015 0V264a24.6 24.6 0 0124.57-24.57h64.12A24.6 24.6 0 01312.63 264v40.1a7.5 7.5 0 0015 0V264a39.61 39.61 0 00-39.57-39.57h-64.12A39.61 39.61 0 00184.37 264\"></path>\n      <path d=\"M223.94 264.53a7.5 7.5 0 00-7.5 7.5v48.1a7.5 7.5 0 0015 0V272a7.5 7.5 0 00-7.5-7.5m64.12.03a7.5 7.5 0 00-7.5 7.5v48.1a7.5 7.5 0 0015 0V272a7.5 7.5 0 00-7.5-7.5M408.31 15a88.7 88.7 0 11-88.7 88.69A88.8 88.8 0 01408.31 15m0 192.39a103.7 103.7 0 10-103.7-103.7 103.82 103.82 0 00103.7 103.7\"></path>\n      <path d=\"M376.24 125a8.53 8.53 0 11-8.53 8.53 8.54 8.54 0 018.53-8.53m64.13 9a8.54 8.54 0 118.53-8.53 8.54 8.54 0 01-8.53 8.53m-64.13 23a23.55 23.55 0 0023.53-23.53V81.9a8.52 8.52 0 016.47-8.28l42-10.5a.5.5 0 01.64.5v39.95a23.53 23.53 0 1015 21.93V63.62a15.52 15.52 0 00-19.28-15.06l-42 10.51a23.49 23.49 0 00-17.83 22.83v29.69a23.23 23.23 0 00-8.53-1.61 23.53 23.53 0 000 47.06m80.68 275.31a.52.52 0 01-.52.52h-16a.52.52 0 01-.52-.52v-48.09a.52.52 0 01.52-.52h16a.52.52 0 01.52.52zm-65.16-32.58h33.09v17.07h-33.09zm-15 32.58a.52.52 0 01-.52.52h-16a.52.52 0 01-.52-.52v-48.09a.52.52 0 01.52-.52h16a.52.52 0 01.52.52zm79.64-63.61h-16a15.53 15.53 0 00-15.52 15.52v.51h-33.12v-.51a15.53 15.53 0 00-15.52-15.52h-16a15.53 15.53 0 00-15.52 15.52v48.09a15.53 15.53 0 0015.52 15.52h16a15.53 15.53 0 0015.52-15.52v-.51h33.09v.51a15.53 15.53 0 0015.52 15.52h16a15.53 15.53 0 0015.52-15.52v-48.09a15.53 15.53 0 00-15.52-15.52M118.46 61.89a16.21 16.21 0 0111.89-2.49 16.29 16.29 0 01-18.75 12.5 16.15 16.15 0 016.86-10m-6.75 82.4a23.11 23.11 0 01-3.71-.3 26.22 26.22 0 00-8.66 0 22.9 22.9 0 01-3.68.32c-17.41 0-24.22-23.43-24.55-39.18a17.22 17.22 0 014.93-12.52A18 18 0 0189 87.23h7.77c15.51-.13 30.16-.27 36 5.56 2.33 2.3 3.45 5.88 3.45 10.94 0 29.79-14.69 40.6-24.56 40.6M89 72.23a32.82 32.82 0 00-23.65 9.86 32.13 32.13 0 00-9.22 23.33c.28 13.11 3.52 25.57 9.13 35.08 7.14 12.12 17.94 18.79 30.42 18.79a38.34 38.34 0 006.13-.52 11.3 11.3 0 013.76 0 38.46 38.46 0 006.14.52c26 0 39.56-28 39.56-55.6 0-9.14-2.65-16.41-7.89-21.6a26.92 26.92 0 00-6.38-4.62 31.7 31.7 0 008.65-23.76 7.49 7.49 0 00-4.18-6.28 31.62 31.62 0 00-31.37 2 30.78 30.78 0 00-6.62 6l-.73-2.17A7.5 7.5 0 1088.56 58l4.75 14.24H89m55.29 360.63h-24.56a23.53 23.53 0 00-8.54 1.6v-42.2a8.55 8.55 0 018.54-8.53h24.56zm-56.63 0H63.1v-49.13h24.56a8.54 8.54 0 018.53 8.53v42.2a23.43 23.43 0 00-8.53-1.6m64.13-64.13h-32.06a23.46 23.46 0 00-16 6.33 23.43 23.43 0 00-16-6.33H55.6a7.5 7.5 0 00-7.5 7.5v64.13a7.5 7.5 0 007.5 7.5h32.06a8.54 8.54 0 018.53 8.53 7.5 7.5 0 0015 0 8.55 8.55 0 018.54-8.53h32.06a7.5 7.5 0 007.5-7.5v-64.13a7.5 7.5 0 00-7.5-7.5\"></path>\n    </svg>\n  );\n}\n","export function YesIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M.09.09h512v512H.09z\"></path>\n      <circle cx=\"256.09\" cy=\"256.09\" r=\"248.59\" fill=\"#46e846\"></circle>\n      <path\n        fill=\"#32d632\"\n        d=\"M398.28 52.16a248 248 0 0189.35 190.93c0 137.29-111.29 248.59-248.59 248.59a247.45 247.45 0 01-142.18-44.69 247.53 247.53 0 00159.23 57.69c137.29 0 248.59-111.29 248.59-248.59a248.28 248.28 0 00-106.4-203.93\"\n      ></path>\n      <path\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"15\"\n        d=\"M330.25 493.43a248.51 248.51 0 01-74.16 11.25C118.8 504.68 7.5 393.38 7.5 256.09S118.8 7.5 256.09 7.5s248.59 111.3 248.59 248.59a248.61 248.61 0 01-141.81 224.55\"\n      ></path>\n      <path\n        fill=\"#80ff80\"\n        d=\"M305.09 71.64s130.18 30.21 130.18 184.45c0 0-37.91-139.06-130.18-184.45z\"\n      ></path>\n    </svg>\n  );\n}\n"],"names":["CharacterCard","size","overlayColor","character","className","hideName","dualTranslate","useLanguage","shouldBeBlurred","useBlurCards","baseUrl","useTDBaseUrl","isBlurred","id","imageURL","replace","description","name","cardId","title","placement","clsx","style","width","src","PUBLIC_URL","IN_GAME","alt","fallback","preview","CardHighlight","children","type","iconSize","icon","QUEM_SOU_EU_ACTIONS","mockSelectCharacters","characters","sampleSize","map","c","mockGlyphs","glyphs","positiveQuantity","sample","negativeQuantity","selected","slice","dict","forEach","key","StepSelectCharacters","user","announcement","onSelectCharacters","isLoading","useLoading","cardWidth","useCardWidth","gap","minWidth","maxWidth","useBooleanDictionary","selection","update","updateDict","count","length","selectedCharacters","keys","availableCharacters","useMock","fullWidth","pt","en","wrap","disabled","ready","onClick","active","activeClass","SpaceContainer","loading","PhaseCharacterFiltering","players","state","useUser","useStep","step","setStep","translate","request","useGameActionRequest","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitCharactersAPIRequest","FilterIcon","currentRound","round","current","phase","allowedPhase","PHASES","QUEM_SOU_EU","CHARACTER_FILTERING","WaitingRoomCharacter","selectedGlyphs","PlayerGlyphs","player","glyphWidth","Card","imageCardMode","Table","playerCharacterId","tableOrder","showAll","topKeys","Math","floor","bottomKeys","PositiveHighlight","MetricHighlight","YesIcon","NegativeHighlight","NoIcon","SELECTIONS_PLACEHOLDER","StepSelectGlyphs","onSelectGlyphs","roundType","selectedWidth","positiveSelection","updatePositive","positiveSelections","negativeSelection","updateNegative","negativeSelections","entry","undefined","GlyphCard","height","trigger","glyphId","content","PopoverGlyph","disablePositive","disableNegative","prepareGlyphs","PhaseCharacterDescription","goToNextStep","useOnSubmitGlyphsAPIRequest","PlayerIconsIcon","CHARACTER_DESCRIPTION","waitingRoom","onPressButton","buttonText","time","mode","ScoringRules","PointsHighlight","StepGuessing","onSubmitGuesses","characterWidth","useVotingMatch","Object","votes","setVotes","activateItem","isVotingComplete","isItemActive","useState","choseRandomly","setChoseRandomly","onGuessForMe","usedPlayers","usedCharacters","values","playerKeys","playerId","getEntryId","filter","includes","characterKeys","shuffle","newVotes","playerKey","index","selectOwnCard","useCallback","guesses","prepareGuesses","useEffect","s","ribbons","getRibbons","entryId","labels","sortPlayers","done","Boolean","ThunderboltOutlined","PhaseGuessing","useOnSubmitGuessesAPIRequest","EvaluateIcon","GUESSING","GalleryGuesses","playersSay","playersPoints","currentColor","currentPlayer","entries","orderBy","playersIds","isCorrect","correctGuesses","direction","winner","backgroundColor","quantity","keyPrefix","StepGallery","gallery","slideShowConfig","useTemporarilyHidePlayersBar","slideIndex","characterId","getAvatarColorById","avatarId","config","barColor","leftClassName","rightClassName","vertical","StepRanking","ranking","onGoBack","gainedPointsDescriptions","PictureOutlined","PhaseResults","goToPreviousStep","useSlideShow","slideDuration","onExpire","RESULTS","MirrorIcon","onClose","unskippable","reset","FinalCharacter","imageCardsMode","useMemo","parseSelectedGlyphs","positive","negative","withName","PhaseGameOver","meta","announcementIcon","TrophyIcon","Achievements","achievements","reference","achievementsReference","language","options","getActiveComponent","LoadingPage","DEFAULT","LOBBY","PhaseLobby","RULES","PhaseRules","SETUP","PhaseSetup","GAME_OVER","PageError","gameCollection","GAME_COLLECTION","ACHIEVEMENTS","push","votesDict","playerEntry","split","SEPARATOR","result","initialState","validation","setDict","isValid","dictCopy","BoxCheckMarkIcon","props","xmlns","viewBox","fill","d","GarbageIcon","cx","cy","r","stroke","strokeLinecap","strokeLinejoin","strokeWidth"],"sourceRoot":""}