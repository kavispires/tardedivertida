{"version":3,"file":"static/js/page-hub.2143f85a.chunk.js","mappings":"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","sources":["components/buttons/FixedMenuButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","components/general/GameTags.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","hooks/useCountdown.ts","hooks/useDevFeatures.ts","pages/Dev/DevMenu.tsx","pages/Dev/DevHeader.tsx","pages/Hub/components/CreateGameModal.tsx","pages/Hub/components/GameCard.tsx","pages/Hub/components/DevEmulatorAlert.tsx","pages/Hub/components/Filters.tsx","components/auth/LogoutButton.tsx","pages/Hub/Hub.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, ButtonProps, Popover } from 'antd';\n// Sass\nimport './FixedMenuButton.scss';\n\ntype FixedMenuButtonDefaultProps = {\n  /**\n   * What order it will show up in the screen\n   * 0 for rules\n   * 1 for extras (e.g. card size)\n   * 2 for extras\n   * 3 for rating\n   * -1 for admin only\n   */\n  position: 0 | 1 | 2 | 3 | -1;\n  /**\n   * The displayed icon\n   */\n  icon: ReactNode;\n  /**\n   * The optional label to follow the icon when hover\n   */\n  label?: ReactNode;\n  /**\n   * The custom class\n   */\n  className?: string;\n  /**\n   * Determine if label should be visible\n   */\n  showLabel?: boolean;\n  /**\n   * Any ant design button props\n   */\n  buttonProps?: ButtonProps;\n};\n\ninterface FixedMenuButtonPopoverProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'popover';\n  /**\n   * Content of popover, required when popover rule\n   */\n  content: ReactNode;\n  /**\n   * Guard onclick from button only\n   */\n  onClick?: never;\n  /**\n   * If popover should be open\n   */\n  open?: boolean;\n}\n\ninterface FixedMenuButtonButtonOnlyProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'button';\n  /**\n   * The click function for the button\n   */\n  onClick: GenericFunction;\n  /**\n   * Guard content from popover\n   */\n  content?: never;\n  /**\n   * If popover should be open\n   */\n  open?: never;\n}\n\ntype FixedMenuButtonProps = FixedMenuButtonPopoverProps | FixedMenuButtonButtonOnlyProps;\n\n/**\n * Button position on the top left of the screen to display rules, admin button and other features\n */\nexport function FixedMenuButton({ type, position, content, className, open, ...rest }: FixedMenuButtonProps) {\n  return (\n    <div className={clsx('fixed-menu-button', `fixed-menu-button--${position}`, className)}>\n      {type === 'popover' ? (\n        <Popover placement=\"bottomLeft\" content={content} trigger=\"click\" open={open}>\n          <FixedMenuButtonContent {...rest} />\n        </Popover>\n      ) : (\n        <FixedMenuButtonContent {...rest} />\n      )}\n    </div>\n  );\n}\n\nfunction FixedMenuButtonContent({\n  icon,\n  label,\n  showLabel,\n  onClick,\n  buttonProps,\n}: Partial<FixedMenuButtonProps>) {\n  const [isActive, setActive] = useState(showLabel);\n  const hasLabel = Boolean(label);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <Button\n      shape={hasLabel && isActive ? 'round' : 'circle'}\n      size=\"middle\"\n      onMouseOver={() => setActive(true)}\n      onMouseLeave={() => setActive(showLabel ?? false)}\n      onClick={onClick ? onClick : undefined}\n      icon={icon}\n      type=\"ghost\"\n      {...buttonProps}\n    >\n      {isActive && hasLabel && <span className=\"fixed-menu-button__label\">{label}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useCountdown } from 'hooks/useCountdown';\n// Sass\nimport './TimedButton.scss';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n    disabled: hideTimer,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && <span className={clsx(timeClass, `${timeClass}--${type}`)}>{timeLeft}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Sass\nimport './TransparentButton.scss';\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","// Ant Design Resources\nimport { Space, SpaceProps, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { TAG_DICT } from 'utils/constants';\n\nconst sortTags = (tags: string[]) => {\n  const sortedTags: string[] = [];\n\n  tags.forEach((tag) => {\n    if (TAG_DICT?.[tag]?.index !== undefined) {\n      sortedTags[TAG_DICT[tag].index] = tag;\n    } else if (sortedTags.length < 18) {\n      sortedTags[18] = tag;\n    } else {\n      sortedTags.push(tag);\n    }\n  });\n\n  return sortedTags.filter((v) => Boolean(v));\n};\n\ntype GameTagsProps = {\n  tags: string[];\n  gameCode: GameCode;\n} & SpaceProps;\n\nexport function GameTags({ tags, gameCode, ...rest }: GameTagsProps) {\n  const { language } = useLanguage();\n  const sortedTags = sortTags(tags);\n\n  return (\n    <Space wrap {...rest}>\n      {sortedTags.map((tag) => (\n        <Tag key={`${gameCode}-${tag}`} color={TAG_DICT[tag]?.color}>\n          {TAG_DICT[tag]?.label[language]}\n        </Tag>\n      ))}\n    </Space>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Collapse } from 'antd';\n// Components\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: ReactNode;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={<Translate pt=\"Regras\" en=\"Rules\" custom={title} />} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button, Space } from 'antd';\nimport { CarouselRef } from 'antd/es/carousel';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { createRef } from 'react';\nimport { Translate } from 'components/language';\nimport { useKeyPressEvent } from 'react-use';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional custom class name\n   */\n  ruleClassName?: string;\n  /**\n   * Optional custom class name\n   */\n  actionsClassName?: string;\n};\n\nexport function RulesCarousel({\n  info,\n  className = '',\n  ruleClassName = '',\n  actionsClassName,\n}: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const ref = createRef<CarouselRef>();\n\n  useKeyPressEvent('ArrowLeft', () => {\n    ref.current?.prev();\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    ref.current?.next();\n  });\n\n  return (\n    <div>\n      <Carousel className={clsx('rules-carousel', className)} autoplay autoplaySpeed={15000} ref={ref}>\n        {info.rules[language].map((rule, index) => (\n          <div className={clsx('rules-carousel__rule', className)} key={rule}>\n            <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n            <Image\n              className=\"rules-carousel__image\"\n              src={\n                index === 0\n                  ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                  : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n              }\n              fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n              alt={rule}\n            />\n            <Typography.Paragraph className={clsx('rules-carousel__rule-text', ruleClassName)}>\n              {rule}\n            </Typography.Paragraph>\n          </div>\n        ))}\n      </Carousel>\n      <Space className={clsx('space-container', actionsClassName)}>\n        <Button type=\"default\" ghost onClick={() => ref.current?.prev()} size=\"small\">\n          <DoubleLeftOutlined /> <Translate pt=\"Regra Anterior\" en=\"Previous Rule\" />\n        </Button>\n        <Button type=\"default\" ghost onClick={() => ref.current?.next()} size=\"small\">\n          <Translate pt=\"Próxima Regra\" en=\"Next Rule\" /> <DoubleRightOutlined />\n        </Button>\n      </Space>\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <div className=\"rules-modal-content\">\n            <RulesCarousel info={gameInfo} />\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Instruction.scss';\n\ntype InstructionsProps = {\n  /**\n   * The content of the instruction\n   */\n  children: ReactNode;\n  /**\n   * Adds a semi transparent background (white or black opposite to the white property)\n   */\n  contained?: boolean;\n  /**\n   * Make text color white\n   */\n  white?: boolean;\n  /**\n   * Makes instruction width 100%\n   */\n  fullWidth?: boolean;\n  /**\n   * Custom class name\n   */\n  className?: string;\n};\n\n/**\n * Typography container for instructions\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { pluralize } from 'utils/helpers';\n\ntype RoundsLeftInstructionProps = {\n  /**\n   * The state round object with current and total values\n   */\n  round: GameRound;\n};\n\n/**\n * Displays instructional sentence based on the number of rounds left for the game to end\n */\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  const left = (round?.total ?? 0) - (round?.current ?? 0);\n\n  if (left === 0 || round.forceLastRound) {\n    return (\n      <Instruction contained>\n        <Translate pt=\"Essa foi a última rodada\" en=\"No more rounds left\" />\n      </Instruction>\n    );\n  }\n\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            {pluralize(left, 'Falta', 'Faltam')} <strong>{left}</strong> {pluralize(left, 'rodada')} para o\n            jogo terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{left}</strong> {pluralize(left, 'round')} left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Sass\nimport './TextHighlight.scss';\n\ntype TextHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Ant Design Resources\nimport { Typography } from 'antd';\n// Sass\nimport './Title.scss';\n\ntype TitleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Makes text white\n   */\n  white?: boolean;\n  /**\n   * Icon prefixing the title\n   */\n  icon?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * The heading level (default: 2)\n   */\n  level?: 1 | 2 | 3 | 4 | 5;\n  /**\n   * The size of the title (default: medium)\n   */\n  size?: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large';\n  /**\n   * The alignment of the text (default: center)\n   */\n  align?: 'left' | 'right' | 'center';\n};\n\nexport const Title = ({\n  children,\n  white,\n  icon,\n  className,\n  level = 2,\n  size = 'medium',\n  align = 'center',\n}: TitleProps) => {\n  return (\n    <Typography.Title\n      level={level}\n      className={clsx('title', `title--${size}`, `title--align-${align}`, white && 'title--white', className)}\n    >\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","import { TimerResult, TimerSettings, useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ntype SelectedTimeSettings = Omit<TimerSettings, 'expiryTimestamp'>;\n\nexport interface useCountdownSettings extends SelectedTimeSettings {\n  /**\n   * The duration of the countdown in seconds\n   */\n  duration: number;\n  /**\n   * Disable timer\n   */\n  disabled?: boolean;\n}\n\ninterface useCountdownResults extends TimerResult {\n  /**\n   * Time left in total seconds (minutes + seconds)\n   */\n  timeLeft: number;\n}\n\n/**\n * Timer countdown to perform actions\n * @param settings\n * @returns\n */\nexport function useCountdown({\n  duration,\n  onExpire,\n  disabled = false,\n  ...rest\n}: useCountdownSettings): useCountdownResults {\n  const timer = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    onExpire: disabled ? undefined : onExpire,\n    ...rest,\n  });\n\n  const timeLeft = timer.minutes * 60 + timer.seconds;\n\n  return {\n    ...timer,\n    timeLeft,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { Segmented } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport function DevMenu() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  const options = [\n    { label: 'Home', value: '/', disabled: pathname === '/' },\n    { label: 'Hub', value: '/hub', disabled: pathname === '/hub' },\n    { label: 'Icons', value: '/dev/icons', disabled: pathname === '/dev/icons' },\n    { label: 'Colors', value: '/dev/colors', disabled: pathname === '/dev/colors' },\n    { label: 'Sprites', value: '/dev/sprites', disabled: pathname === '/dev/sprites' },\n    { label: 'Resources', value: '/dev/resources', disabled: pathname === '/dev/resources' },\n    { label: 'Playground', value: '/dev/playground', disabled: pathname === '/dev/playground' },\n    { label: 'Showcase', value: '/showcase', disabled: pathname === '/showcase' },\n  ];\n\n  const onNavigate = (path: any) => {\n    navigate(path);\n  };\n\n  return <Segmented options={options} defaultValue={pathname} onChange={onNavigate} />;\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Components\nimport { DevMenu } from './DevMenu';\n\ntype DevHeaderProps = {\n  title: ReactNode;\n  subTitle?: ReactNode;\n  extra?: ReactNode;\n};\n\nexport function DevHeader({ title, subTitle, extra }: DevHeaderProps) {\n  return (\n    <header className=\"dev-header\">\n      <div className=\"dev-header__heading\">\n        <div className=\"dev-header__left\">\n          <span className=\"dev-header__title\">{title} </span>\n          <span className=\"dev-header__subtitle\">{subTitle}</span>\n        </div>\n        <div className=\"dev-header__extra\">\n          <Space className=\"dev-header__extra-space\">{extra}</Space>\n          <DevMenu />\n        </div>\n      </div>\n    </header>\n  );\n}\n","import clsx from 'clsx';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useCopyToClipboard } from 'react-use';\n// Ant Design Resources\nimport { Image, Modal, message, Button, notification, Divider, Typography, Switch, Space, Alert } from 'antd';\n// Adapters\nimport { ADMIN_API } from 'services/adapters';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Constants\nimport { LATEST_GAME_IDS, PUBLIC_URL } from 'utils/constants';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { Loading } from 'components/loaders';\n\nconst updateLocal24hGameIds = (latestGameIds: PlainObject, newId: GameId) => {\n  const now = Date.now();\n  const past24Hours = now - 1000 * 60 * 60 * 24;\n  const cleanedUpIds = Object.entries(latestGameIds ?? {}).reduce((acc: PlainObject, [key, timestamp]) => {\n    if (timestamp > past24Hours) {\n      acc[key] = timestamp;\n    }\n    return acc;\n  }, {});\n  return {\n    [LATEST_GAME_IDS]: {\n      ...cleanedUpIds,\n      [newId]: now,\n    },\n  };\n};\n\ntype CreateGameModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function CreateGameModal({ gameInfo }: CreateGameModalProps): JSX.Element {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  const { language, translate } = useLanguage();\n  const { setLoader } = useLoading();\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n  const [isVisible, setVisibility] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [gameId, setGameId] = useState(null);\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUserName] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [options, setOptions] = useState({});\n\n  useEffect(() => {\n    if (state.value && gameId) {\n      message.info(`Copied to clipboard: ${state.value}`);\n    }\n  }, [state, gameId]);\n\n  const onCloseModal = useCallback(() => {\n    setVisibility(false);\n  }, []);\n\n  const onChangeOptions = (key: string, value: boolean) => {\n    setOptions((s) => ({\n      ...s,\n      [key]: value,\n    }));\n  };\n\n  const createGame = async () => {\n    try {\n      setLoader('create', true);\n      setLoading(true);\n      const response: PlainObject = await ADMIN_API.createGame({\n        gameName: gameInfo.gameName,\n        language,\n        options,\n      });\n      if (response.data.gameId) {\n        setGameId(response.data.gameId);\n        setUserId(null);\n        setUserName('');\n        setUserAvatarId('');\n        setLocalStorage(updateLocal24hGameIds(getLocalStorage(LATEST_GAME_IDS), response.data.gameId));\n        const baseUrl = window.location.href.split(pathname)[0];\n        copyToClipboard(`${baseUrl}/${response.data.gameId}`);\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Aplicativo encontrou um erro ao tentar criar o jogo',\n          'The application found an error while trying to create a game',\n          language\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n      setVisibility(false);\n    } finally {\n      setLoading(false);\n      setLoader('create', false);\n    }\n  };\n\n  const onConfirmGame = () => {\n    if (gameId) {\n      navigate(`/${gameId}`);\n    } else {\n      message.info(\n        translate('Péra! O jogo ainda não foi inicializado.', 'Wait! The game has not been created')\n      );\n    }\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => setVisibility(true)} block>\n        <Translate pt=\"Criar\" en=\"Create\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Criando novo jogo', 'Creating new game')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          onOk={onConfirmGame}\n          okButtonProps={{ disabled: Boolean(!gameId) }}\n          maskClosable={false}\n        >\n          <>\n            <Image\n              alt={gameInfo.title[language]}\n              src={`${PUBLIC_URL.BANNERS}${gameInfo.gameName}-${language}.jpg`}\n              fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n              className=\"round-corners\"\n            />\n\n            <Options\n              options={gameInfo.options}\n              disabled={isLoading || Boolean(gameId)}\n              onChangeOptions={onChangeOptions}\n              selectedOptions={options}\n            />\n\n            <Divider />\n\n            {isLoading && (\n              <>\n                <Instruction>\n                  <Translate pt=\"O jogo está sendo criado...\" en=\"The game session is being created\" />\n                </Instruction>\n                <Loading message={translate('Gerando...', 'Generating...')} margin />\n              </>\n            )}\n\n            {gameInfo.version.startsWith('alpha') && (\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"Este jogo está em alpha, não o jogue\"\n                    en=\"This game is still in alpha and shouldn't be played\"\n                  />\n                }\n              />\n            )}\n\n            {gameInfo.version.startsWith('beta') && (\n              <Alert\n                type=\"warning\"\n                showIcon\n                message={\n                  <Translate\n                    pt=\"Este jogo está em beta, prossiga com cuidado\"\n                    en=\"This game is in beta and bugs might be everywhere\"\n                  />\n                }\n              />\n            )}\n\n            {Boolean(gameId) ? (\n              <div>\n                <Title className=\"center\">\n                  <Translate pt=\"Jogo inicializado\" en=\"Game Initialized\" />: {gameId}\n                </Title>\n                <Instruction>\n                  <Translate\n                    pt=\"Pressione OK para ser redirecionadx à página do jogo.\"\n                    en=\"Press OK to be redirected to the game page\"\n                  />\n                </Instruction>\n              </div>\n            ) : (\n              <Space className=\"space-container\" align=\"center\">\n                <Button type=\"primary\" size=\"large\" disabled={isLoading} onClick={createGame}>\n                  <Translate pt=\"Criar Jogo\" en=\"Create Game\" />\n                </Button>\n              </Space>\n            )}\n          </>\n        </Modal>\n      )}\n    </>\n  );\n}\n\ntype OptionsProps = {\n  options?: GameInfo['options'];\n  disabled: boolean;\n  onChangeOptions: GenericFunction;\n  selectedOptions: PlainObject;\n};\nfunction Options({ options = [], disabled, onChangeOptions, selectedOptions }: OptionsProps) {\n  return Boolean(options) ? (\n    <div className=\"create-game-modal-options\">\n      <Typography.Title level={5} className=\"create-game-modal-options__title\">\n        <Translate pt=\"Opções:\" en=\"Options:\" />\n      </Typography.Title>\n      {(options ?? []).map((option) => (\n        <Typography.Paragraph key={`option-${option.label}`} className=\"create-game-modal-options__option\">\n          <span className=\"create-game-modal-options__label\">{option.label}</span>\n          <span\n            className={clsx(\n              'create-game-modal-options__off',\n              !selectedOptions[option.key] && 'create-game-modal-options--selected'\n            )}\n          >\n            {option?.off ?? ''}\n          </span>\n          <Switch disabled={disabled} onChange={(e) => onChangeOptions(option.key, e)} />\n          <span\n            className={clsx(\n              'create-game-modal-options__on',\n              selectedOptions[option.key] && 'create-game-modal-options--selected'\n            )}\n          >\n            {option?.on ?? ''}\n          </span>\n          {Boolean(option.description) && (\n            <span className=\"create-game-modal-options__option-description\">{option.description}</span>\n          )}\n        </Typography.Paragraph>\n      ))}\n    </div>\n  ) : (\n    <div className=\"create-game-modal-options create-game-modal-options__no-options\">\n      <Typography.Text>\n        <Translate pt=\"Este jogo não possui customizações\" en=\"This game does not support customizations\" />\n      </Typography.Text>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Card, Image, Divider, Badge, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv, truncateRecommended } from 'utils/helpers';\n// Components\nimport { RulesModal } from 'components/rules';\nimport { CreateGameModal } from './CreateGameModal';\nimport { GameTags } from 'components/general/GameTags';\nimport { ClockCircleOutlined } from '@ant-design/icons';\n\nconst getVersionColor = (version: string) => {\n  if (version.includes('dev')) {\n    return '#6cb3f6';\n  }\n\n  if (version.includes('alpha')) {\n    return '#F97659';\n  }\n\n  if (version.includes('beta')) {\n    return '#F9D859';\n  }\n\n  const major = Number(version.split('.')[0]);\n\n  if (isNaN(major)) {\n    return '#96A0A3';\n  }\n\n  if (major === 0) {\n    return '#F9D859';\n  }\n\n  if (major === 1) {\n    return '#72D984';\n  }\n\n  if (major === 2) {\n    return '#7CBD51';\n  }\n\n  if (major >= 3) {\n    return '#7CBD51';\n  }\n\n  return '#96A0A3';\n};\n\ntype GameCardProps = {\n  game: GameInfo;\n};\n\nexport function GameCard({ game }: GameCardProps) {\n  const { language, translate } = useLanguage();\n\n  const duration = calculateGameAverageDuration(game);\n\n  return (\n    <Card\n      key={game.gameName}\n      className=\"game-card\"\n      cover={\n        <Badge.Ribbon text={game.version} color={getVersionColor(game.version)}>\n          <Image\n            alt={game.title[language]}\n            src={`${PUBLIC_URL.BANNERS}${game.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n          />\n        </Badge.Ribbon>\n      }\n    >\n      <div className=\"game-card__contents\">\n        <Space direction=\"vertical\">\n          <Card.Meta\n            title={\n              <span className=\"game-card__title\" title={game.title[language]}>\n                {isDevEnv && `[${game.gameCode}]`} {game.title[language]}\n              </span>\n            }\n            description={`${translate('Baseado em', 'Based on')} ${game.basedOn\n              .split('')\n              .reverse()\n              .join('')}`}\n          />\n\n          <Card.Meta className=\"game-card__description\" description={game.summary[language]} />\n\n          {Boolean(game.rules?.[language]?.length > 1) && (\n            <RulesModal\n              gameInfo={game}\n              buttonProps={{ size: 'small', className: 'game-card__margin-bottom' }}\n            />\n          )}\n\n          <GameTags\n            wrap\n            size={[1, 6]}\n            style={{ display: 'flex' }}\n            gameCode={game.gameCode}\n            tags={game.tags}\n          />\n        </Space>\n      </div>\n\n      <div className=\"game-card__actions\">\n        {game.duration && (\n          <Card.Meta\n            description={\n              <>\n                <ClockCircleOutlined /> {duration.min} min - {duration.max} min (Avg: {duration.ideal} min)\n              </>\n            }\n          />\n        )}\n\n        <Divider className=\"game-card__divider\" />\n\n        <Space direction=\"vertical\">\n          <Card.Meta\n            description={translate(\n              `Para ${game.playerCount.min}-${game.playerCount.max} jogadores`,\n              `For ${game.playerCount.min}-${game.playerCount.max} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count\"\n            description={translate(\n              `Melhor com ${game.playerCount.best || '?'} jogadores`,\n              `Best wih ${game.playerCount.best || '?'} players`\n            )}\n          />\n\n          <Card.Meta\n            className=\"game-card__player-count game-card__margin-bottom\"\n            description={translate(\n              `Recomendado jogar com ${truncateRecommended(game.playerCount.recommended)}`,\n              `Recommended with ${truncateRecommended(game.playerCount.recommended)}`\n            )}\n          />\n        </Space>\n\n        <div style={{ marginTop: '1rem' }}>\n          {Boolean(game.available[language]) && <CreateGameModal gameInfo={game} />}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","import { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Alert, Button, Modal } from 'antd';\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\n/**\n * The emulator only properly works if using the local ip, to allow multi device testing\n * including mobile, this component will display an alert in case the current port is localhost\n */\nexport function DevEmulatorAlert() {\n  const { isDevEnv } = useDevFeatures();\n  const [stay, setStay] = useState(false);\n\n  const ip = process.env.REACT_APP_LOCAL_IP;\n  const displayDevWarningMessage = isDevEnv && window.location.hostname !== ip;\n  const { port, pathname, hash, protocol } = window.location;\n  const newPath = `${ip}:${port}${pathname}/${hash}`.replace('//', '/');\n  const emulatorUrl = `${protocol}//${newPath}`;\n\n  useEffectOnce(() => {\n    if (!stay && isDevEnv && displayDevWarningMessage) {\n      Modal.confirm({\n        title: 'Wrong Dev Environment',\n        icon: <ExclamationCircleOutlined />,\n        content: 'You are in a development environment and not using the emulator.',\n        okText: 'Switch Routes',\n        cancelText: 'Stay in Localhost',\n        onOk: () => {\n          setStay(true);\n          window.location.href = emulatorUrl;\n        },\n      });\n    }\n  });\n\n  if (!isDevEnv) return <></>;\n\n  return (\n    <>\n      {displayDevWarningMessage && (\n        <Alert\n          message={\n            <>\n              You are in a development environment and not using the emulator.{' '}\n              <Button href={emulatorUrl} type=\"link\">\n                Switch Routes\n              </Button>\n            </>\n          }\n          type=\"warning\"\n          showIcon\n          banner\n        />\n      )}\n    </>\n  );\n}\n","import { FilterOutlined } from '@ant-design/icons';\nimport { Checkbox, InputNumber, TreeSelect } from 'antd';\nimport { DefaultOptionType } from 'antd/lib/select';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { capitalize } from 'lodash';\nimport { useMemo } from 'react';\nimport { SEPARATOR, TAG_DICT } from 'utils/constants';\n\nconst { SHOW_PARENT } = TreeSelect;\n\ntype FiltersProps = {\n  setTagFilters: GenericFunction;\n  setNumberFilters: GenericFunction;\n  availabilityCount: number;\n};\nexport function Filters({ availabilityCount, setTagFilters, setNumberFilters }: FiltersProps) {\n  const onNumberFiltersUpdate = (key: string, value: number) => {\n    setNumberFilters((prevState: NumberDictionary) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  return (\n    <div className=\"hub-filters\">\n      <FilterOutlined />({availabilityCount}){' '}\n      <div className=\"hub-filters__entry\">\n        <label>Players</label>\n        <InputNumber\n          min={2}\n          max={12}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('players', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Recommended with</label>\n        <Checkbox onChange={(e) => onNumberFiltersUpdate('recommendedWith', Number(e.target?.checked))} />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Best with</label>\n        <Checkbox onChange={(e) => onNumberFiltersUpdate('bestWith', Number(e.target?.checked))} />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Duration</label>\n        <InputNumber\n          min={15}\n          step={15}\n          size=\"small\"\n          className=\"hub-filters__input-number\"\n          onChange={(value) => onNumberFiltersUpdate('duration', value ?? 0)}\n        />\n      </div>\n      <div className=\"hub-filters__entry\">\n        <label>Tags</label>\n        <TagTreeSelect value={undefined} onTreeSelectChange={setTagFilters} />\n      </div>\n    </div>\n  );\n}\n\nfunction TagTreeSelect({ value, onTreeSelectChange }: any) {\n  const { dualTranslate } = useLanguage();\n\n  const onChange = (tags: string[]) => {\n    onTreeSelectChange(\n      tags\n      // .map((tag) => {\n      //   if (tag.includes(SEPARATOR)) {\n      //     return tag.split(SEPARATOR);\n      //   }\n      //   return tag;\n      // })\n      // .flat()\n    );\n  };\n\n  const treeData: DefaultOptionType[] = useMemo(\n    () =>\n      Object.values(\n        Object.keys(TAG_DICT).reduce((acc: any, tagKey: string) => {\n          const tagObj = TAG_DICT[tagKey];\n          if (acc[tagObj.group] === undefined) {\n            acc[tagObj.group] = {\n              title: capitalize(tagObj.group),\n              value: tagObj.group,\n              children: [],\n            };\n          }\n\n          acc[tagObj.group].children.push({\n            title: capitalize(dualTranslate(tagObj.label)),\n            value: `${tagObj.group}${SEPARATOR}${tagKey}`,\n          });\n\n          return acc;\n        }, {})\n      ),\n    [dualTranslate]\n  );\n\n  return (\n    <TreeSelect\n      treeData={treeData}\n      value={value}\n      onChange={onChange}\n      treeCheckable={true}\n      showCheckedStrategy={SHOW_PARENT}\n      placeholder=\"Select Game Tags\"\n      size=\"small\"\n      style={{\n        width: '100%',\n        minWidth: '400px',\n      }}\n    />\n  );\n}\n","import { useQuery } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\n// Ant Design Resources\nimport { Button, ButtonProps, Popconfirm, message } from 'antd';\n// Services\nimport { signOut } from 'services/firebase';\n// Components\nimport { Translate } from 'components/language';\n\nexport function LogoutButton(props: ButtonProps) {\n  const navigate = useNavigate();\n\n  const { isLoading, refetch } = useQuery({\n    queryKey: 'sign-out',\n    queryFn: async () => await signOut(),\n    enabled: false,\n    onSuccess: () => {\n      navigate('/');\n    },\n    onError: (error: any) => {\n      message.error(`Something went wrong: ${JSON.stringify(error, null, 2)}`);\n    },\n  });\n\n  return (\n    <Popconfirm\n      title={<Translate pt=\"Tem certeza que quer deslogar?\" en=\"Are you sure you want to log out?\" />}\n      onConfirm={() => refetch()}\n      key=\"logout-button\"\n    >\n      <Button danger ghost {...props} loading={isLoading}>\n        Logout\n      </Button>\n    </Popconfirm>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { useEffectOnce, useTitle } from 'react-use';\n// Ant Design Resources\nimport { Typography, Layout, Space, Divider } from 'antd';\nimport { DatabaseFilled } from '@ant-design/icons';\n\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { SEPARATOR, TAG_RULES } from 'utils/constants';\nimport { calculateGameAverageDuration, isDevEnv } from 'utils/helpers';\n// Components\nimport { GameCard } from './components/GameCard';\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { DevHeader } from 'pages/Dev/DevHeader';\nimport { DevEmulatorAlert } from './components/DevEmulatorAlert';\nimport { Filters } from './components/Filters';\nimport { LogoutButton } from 'components/auth/LogoutButton';\n\nfunction Hub() {\n  useTitle('Hub - Tarde Divertida');\n\n  const { language } = useLanguage();\n  const [getLocalStorage] = useLocalStorage();\n  const [, setLanguage] = useGlobalState('language');\n  const [tagFilters, setTagFilters] = useState<string[]>([]);\n  const [numberFilters, setNumberFilters] = useState<NumberDictionary>({});\n\n  useEffectOnce(() => {\n    const prevLanguage = getLocalStorage('language');\n    if (prevLanguage) {\n      setLanguage(prevLanguage);\n    }\n  });\n\n  const gameList = useMemo(\n    () =>\n      Object.values(GAME_LIST).filter((game) => {\n        let result = [];\n\n        // Check player count\n        if (numberFilters.players) {\n          result.push(\n            game.playerCount.min <= numberFilters.players && game.playerCount.max >= numberFilters.players\n          );\n\n          if (numberFilters.bestWith) {\n            result.push(numberFilters.players === game.playerCount.best);\n          }\n\n          if (numberFilters.recommendedWith) {\n            result.push(game.playerCount.recommended.includes(numberFilters.players));\n          }\n        }\n\n        // Check tags\n        // TODO: this does not account for tagGroups and concurrent tags\n        tagFilters.forEach((tagKey) => {\n          const [tagGroup, tag] = tagKey.split(SEPARATOR);\n\n          if (tagGroup && tag && TAG_RULES?.[tagGroup] === 'exclusive') {\n            result.push(game.tags.includes(tag));\n          } else if (tag) {\n            result.push(game.tags.includes(tag));\n          }\n        });\n\n        // Check time\n        if (numberFilters.duration) {\n          const duration = calculateGameAverageDuration(game, numberFilters.players ?? 0);\n\n          if (numberFilters.players) {\n            result.push(\n              numberFilters.duration >= duration.customTime - 10 &&\n                numberFilters.duration <= duration.customTime + 10\n            );\n          } else {\n            result.push(numberFilters.duration >= duration.min && numberFilters.duration <= duration.max);\n          }\n        }\n\n        return result.every(Boolean);\n      }),\n    [tagFilters, numberFilters]\n  );\n\n  const { availableGames, comingSoonGames, devGames } = useMemo(() => {\n    const sortedGameList = gameList.sort((a, b) => (a.title[language] > b.title[language] ? 1 : -1));\n\n    return sortedGameList.reduce(\n      (acc: any, game) => {\n        if (game.available[language]) {\n          if (['alpha', 'dev'].includes(game.version) || game.version.startsWith('beta')) {\n            acc.devGames.push(game);\n          } else {\n            acc.availableGames.push(game);\n          }\n        } else {\n          acc.comingSoonGames.push(game);\n        }\n        return acc;\n      },\n      {\n        availableGames: [],\n        devGames: [],\n        comingSoonGames: [],\n      }\n    );\n  }, [gameList, language]);\n\n  return (\n    <Layout className=\"dev-layout\">\n      <DevHeader\n        title={\n          <>\n            <DatabaseFilled /> Hub\n          </>\n        }\n        subTitle={<Translate pt=\"Selecione um jogo para começar\" en=\"Select a game to start\" />}\n        extra={[\n          <LanguageSwitch key=\"language-switch\" />,\n          <LogoutButton key=\"logout-button\" danger ghost size=\"small\" />,\n        ]}\n      />\n\n      <DevEmulatorAlert />\n\n      <Filters\n        setTagFilters={setTagFilters}\n        setNumberFilters={setNumberFilters}\n        availabilityCount={availableGames.length}\n      />\n\n      <Layout.Content className=\"container\" id=\"main-container\">\n        {isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <Space size={[8, 16]} wrap align=\"start\" className=\"game-card-collection\">\n              {devGames.map((game: GameInfo, index: number) => (\n                <GameCard key={`${game.gameCode}-${index}`} game={game} />\n              ))}\n            </Space>\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Disponíveis\" en=\"Available\" />\n        </Typography.Title>\n        <Space size={[8, 16]} wrap align=\"start\" className=\"game-card-collection\">\n          {availableGames.map((game: GameInfo, index: number) => (\n            <GameCard key={`${game.gameCode}-${index}`} game={game} />\n          ))}\n        </Space>\n        <Divider />\n        {!isDevEnv && (\n          <>\n            <Typography.Title level={2}>\n              <Translate pt=\"Em Desenvolvimento\" en=\"Under Development\" />\n            </Typography.Title>\n            <Space size={[8, 16]} wrap align=\"start\" className=\"game-card-collection\">\n              {devGames.map((game: GameInfo, index: number) => (\n                <GameCard key={`${game.gameCode}-${index}`} game={game} />\n              ))}\n            </Space>\n            <Divider />\n          </>\n        )}\n        <Typography.Title level={2}>\n          <Translate pt=\"Em Breve\" en=\"Coming Soon\" />\n        </Typography.Title>\n        <Space size={[8, 16]} wrap align=\"start\" className=\"game-card-collection\">\n          {comingSoonGames.map((game: GameInfo, index: number) => (\n            <GameCard key={`${game.gameCode}-${index}`} game={game} />\n          ))}\n        </Space>\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default Hub;\n"],"names":["FixedMenuButton","type","position","content","className","open","rest","clsx","placement","trigger","FixedMenuButtonContent","icon","label","showLabel","onClick","buttonProps","useState","isActive","setActive","hasLabel","Boolean","useEffectOnce","shape","size","onMouseOver","onMouseLeave","undefined","TimedButton","duration","children","onExpire","hideTimer","timeLeft","useCountdown","autoStart","disabled","timeClass","TransparentButton","active","activeClass","hoverType","GameTags","tags","gameCode","language","useLanguage","sortedTags","forEach","tag","TAG_DICT","index","length","push","filter","v","sortTags","wrap","map","color","CollapsibleRule","title","contained","ghost","header","pt","en","custom","PopoverRule","ReadOutlined","RulesCarousel","info","ruleClassName","actionsClassName","ref","createRef","useKeyPressEvent","current","prev","next","autoplay","autoplaySpeed","rules","rule","src","PUBLIC_URL","gameName","fallback","alt","DoubleLeftOutlined","DoubleRightOutlined","RulesList","RulesModal","gameInfo","translate","isVisible","setVisibility","onCloseModal","onCancel","footer","Instruction","white","fullWidth","baseClass","RoundsLeftInstruction","round","left","total","forceLastRound","pluralize","TextHighlight","Title","level","align","timer","useTimer","expiryTimestamp","inNSeconds","minutes","seconds","useDevFeatures","useGlobalState","isDebugEnabled","setIsDebugEnabled","isDevEnv","toggleDevFeatures","s","DevMenu","pathname","useLocation","navigate","useNavigate","options","value","defaultValue","onChange","path","DevHeader","subTitle","extra","updateLocal24hGameIds","latestGameIds","newId","now","Date","past24Hours","cleanedUpIds","Object","entries","reduce","acc","key","timestamp","LATEST_GAME_IDS","CreateGameModal","useCopyToClipboard","state","copyToClipboard","setLoader","useLoading","useLocalStorage","getLocalStorage","setLocalStorage","isLoading","setLoading","gameId","setGameId","setUserId","setUserName","setUserAvatarId","setOptions","useEffect","message","useCallback","createGame","ADMIN_API","response","data","baseUrl","window","location","href","split","notification","description","JSON","stringify","console","error","block","onOk","okButtonProps","maskClosable","Options","onChangeOptions","selectedOptions","margin","version","startsWith","showIcon","option","off","e","on","getVersionColor","includes","major","Number","isNaN","GameCard","game","calculateGameAverageDuration","cover","text","direction","basedOn","reverse","join","summary","style","display","ClockCircleOutlined","min","max","ideal","playerCount","best","truncateRecommended","recommended","marginTop","available","DevEmulatorAlert","stay","setStay","ip","process","displayDevWarningMessage","hostname","port","hash","protocol","newPath","replace","emulatorUrl","Modal","ExclamationCircleOutlined","okText","cancelText","banner","SHOW_PARENT","TreeSelect","Filters","availabilityCount","setTagFilters","setNumberFilters","onNumberFiltersUpdate","prevState","FilterOutlined","target","checked","step","TagTreeSelect","onTreeSelectChange","dualTranslate","treeData","useMemo","values","keys","tagKey","tagObj","group","capitalize","SEPARATOR","treeCheckable","showCheckedStrategy","placeholder","width","minWidth","LogoutButton","props","useQuery","queryKey","queryFn","signOut","enabled","onSuccess","onError","refetch","onConfirm","danger","loading","useTitle","setLanguage","tagFilters","numberFilters","prevLanguage","gameList","GAME_LIST","result","players","bestWith","recommendedWith","tagGroup","TAG_RULES","customTime","every","sort","a","b","devGames","availableGames","comingSoonGames","DatabaseFilled","id"],"sourceRoot":""}