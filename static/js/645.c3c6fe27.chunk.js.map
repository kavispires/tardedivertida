{"version":3,"file":"static/js/645.c3c6fe27.chunk.js","mappings":"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","sources":["components/admin/AdminOnlyContainer.tsx","components/admin/_internal/AdminPerformActionButton.tsx","components/admin/_internal/ValueFormItem.tsx","components/admin/_internal/ForceStateForm.tsx","components/admin/_internal/PlayersReadyState.tsx","components/admin/AdminMenuDrawer.tsx","components/admin/AdminNextRoundButton.tsx","components/admin/AdminButton.tsx","components/admin/AdminOnlyButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","components/dev/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/players/ReadyPlayersBar.tsx","components/players/TurnOrder.tsx","components/players/WaitingRoom.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMe.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionTeamPlayers.tsx","components/drawers/_internal/SectionTeams.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/SectionSettings.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","components/text/Instruction.tsx","components/text/RoundsLeftInstruction.tsx","components/text/TextHighlight.tsx","components/text/Title.tsx","utils/phases.ts"],"sourcesContent":["import { FireFilled } from '@ant-design/icons';\nimport { Space, SpaceProps } from 'antd';\nimport clsx from 'clsx';\nimport { useGlobalState } from 'hooks';\n\ninterface AdminOnlyContainerProps extends SpaceProps {\n  children: any;\n  className?: string;\n}\n\nexport const AdminOnlyContainer = ({ children, className = '', ...props }: AdminOnlyContainerProps) => {\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (!isAdmin) return <span></span>;\n\n  return (\n    <fieldset className={clsx('admin-only-container', className)}>\n      <legend className=\"admin-only-container__legend\">\n        <FireFilled /> Admin Controls\n      </legend>\n      <Space {...props}>{children}</Space>\n    </fieldset>\n  );\n};\n","// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n\nimport { FireFilled } from '@ant-design/icons';\n\ninterface AdminPerformActionButtonProps extends ButtonProps {\n  label: string;\n}\nexport const AdminPerformActionButton = ({ label, ...props }: AdminPerformActionButtonProps) => (\n  <Button icon={<FireFilled />} type=\"primary\" danger className=\"full-width\" {...props}>\n    {label}\n  </Button>\n);\n","// Ant Design Resources\nimport { Form, Input, InputNumber, Switch } from 'antd';\n\ntype ValueFormItemProps = {\n  valueType?: string;\n};\n\nexport const ValueFormItem = ({ valueType }: ValueFormItemProps) => {\n  switch (valueType) {\n    case 'number':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <InputNumber />\n        </Form.Item>\n      );\n    case 'boolean':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"true\" unCheckedChildren=\"false\" defaultChecked />\n        </Form.Item>\n      );\n    case 'nullish':\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Switch checkedChildren=\"null\" unCheckedChildren=\"undefined\" defaultChecked />\n        </Form.Item>\n      );\n    default:\n      return (\n        <Form.Item label=\"Value\" name=\"value\">\n          <Input />\n        </Form.Item>\n      );\n  }\n};\n","// Ant Design Resources\nimport { AutoComplete, Button, Form, message, Select } from 'antd';\nimport { useState } from 'react';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\n// Components\nimport { ValueFormItem } from './ValueFormItem';\n\ntype ForceStateFormProps = {\n  isLoading?: boolean;\n  state: GameState;\n  onPerformAdminAction: GenericFunction;\n};\n\nexport const ForceStateForm = ({ isLoading, state, onPerformAdminAction }: ForceStateFormProps) => {\n  const [form] = Form.useForm();\n  const [valueType, setValueType] = useState('string');\n  const stateKeys = Object.keys(state).map((k) => ({ label: k, value: k }));\n\n  const onValueTypeSelectChange = (newType: any) => {\n    if (['boolean', 'nullish'].includes(newType)) form.setFieldsValue({ value: true });\n    if (newType === 'number') form.setFieldsValue({ value: 0 });\n    if (newType === 'string') form.setFieldsValue({ value: '' });\n    setValueType(newType);\n  };\n\n  const onFinish = async (e: any) => {\n    let parsedValue = e.value;\n\n    try {\n      if (e.valueType === 'number') {\n        parsedValue = Number(e.value) ?? 0;\n      }\n      if (e.valueType === 'nullish') {\n        parsedValue = e.value ? null : undefined;\n      }\n\n      const payload = {\n        [e.key]: parsedValue,\n      };\n\n      if (window.confirm(`Tem certeza que quer forçar o estado ${JSON.stringify(payload)}`)) {\n        await onPerformAdminAction({ state: payload, action: ADMIN_ACTIONS.FORCE_STATE_PROPERTY });\n\n        form.resetFields();\n        setValueType('string');\n      }\n    } catch (e: any) {\n      message.error('Something went wrong', e);\n    }\n  };\n\n  return (\n    <Form name=\"basic\" form={form} initialValues={{ valueType: 'string' }} onFinish={onFinish}>\n      <h3>Force Property</h3>\n      <Form.Item label=\"Key\" name=\"key\" rules={[{ required: true }]}>\n        <AutoComplete options={stateKeys} />\n      </Form.Item>\n      <Form.Item label=\"Type\" name=\"valueType\">\n        <Select onChange={onValueTypeSelectChange}>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n          <Select.Option value=\"boolean\">boolean</Select.Option>\n          <Select.Option value=\"nullish\">nullish</Select.Option>\n        </Select>\n      </Form.Item>\n\n      <ValueFormItem valueType={valueType} />\n\n      <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading} danger>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import { CheckCircleFilled, MinusCircleFilled } from '@ant-design/icons';\n\ntype PlayersReadyStateProps = {\n  players: GamePlayers;\n};\n\ntype PlayerStatus = {\n  readyPlayers: PlayerName[];\n  pendingPlayers: PlayerName[];\n};\n\nexport function PlayersReadyState({ players }: PlayersReadyStateProps) {\n  const { readyPlayers, pendingPlayers }: PlayerStatus = Object.values(players).reduce(\n    (acc: PlayerStatus, player) => {\n      if (player.ready) {\n        acc.readyPlayers.push(player.name);\n      } else {\n        acc.pendingPlayers.push(player.name);\n      }\n\n      return acc;\n    },\n    {\n      readyPlayers: [],\n      pendingPlayers: [],\n    }\n  );\n\n  return (\n    <li className=\"admin-players-ready-state\">\n      <h3>Players Ready State</h3>\n      <div className=\"admin-players-ready-state__entry\">\n        <CheckCircleFilled style={{ color: 'green' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {readyPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"admin-players-ready-state__entry\">\n        <MinusCircleFilled style={{ color: 'orange' }} title=\"Ready:\" />\n        <ul className=\"admin-players-ready-state__list\">\n          {pendingPlayers.map((playerName) => (\n            <li key={`admin-player-${playerName}`} className=\"admin-players-ready-state__item\">\n              {playerName}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n","import { FireFilled } from '@ant-design/icons';\nimport { Button, Drawer, Popconfirm, Spin } from 'antd';\nimport { useAPICall, useGlobalState, useLoading } from 'hooks';\nimport { useState } from 'react';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminPerformActionButton } from './_internal/AdminPerformActionButton';\nimport { ForceStateForm } from './_internal/ForceStateForm';\nimport { PlayersReadyState } from './_internal/PlayersReadyState';\n\ntype AdminMenuDrawerProps = {\n  state: GameState;\n  players: GamePlayers;\n};\n\nexport const AdminMenuDrawer = ({ state, players }: AdminMenuDrawerProps) => {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const onPerformAdminAction = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'perform-admin-action',\n    successMessage: 'Admin action performed successfully',\n    errorMessage: 'The selected admin action has failed',\n    onAfterCall: onClose,\n  });\n\n  if (!isAdmin) return <span></span>;\n\n  return (\n    <>\n      <div className=\"admin-menu-drawer\">\n        <Button\n          type=\"primary\"\n          danger\n          size=\"small\"\n          onClick={showDrawer}\n          disabled={isLoading}\n          icon={isLoading ? <Spin /> : <FireFilled />}\n        >\n          Admin\n        </Button>\n\n        <Drawer title=\"Admin Menu\" placement=\"left\" closable={false} visible={visible} onClose={onClose}>\n          <ul>\n            <PlayersReadyState players={players} />\n            <li>\n              <hr />\n            </li>\n            <li className=\"admin-menu-drawer__buttons\">\n              <h3>Actions</h3>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to the next phase?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || state.phase === 'GAME_OVER'}\n                  label=\"Force Next Phase\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to play again?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.PLAY_AGAIN })}\n              >\n                <AdminPerformActionButton\n                  disabled={isLoading || !(state.phase === 'GAME_OVER')}\n                  label=\"Play Again\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n              <Popconfirm\n                placement=\"right\"\n                title=\"Are you sure you want to go to end the game by the end of this round?\"\n                onConfirm={() => onPerformAdminAction({ action: ADMIN_ACTIONS.FORCE_END_GAME })}\n              >\n                <AdminPerformActionButton\n                  disabled={\n                    state?.lastRound || isLoading || ['LOBBY', 'RULES', 'GAME_OVER'].includes(state.phase)\n                  }\n                  label=\"Make this the last round\"\n                  className=\"admin-menu-drawer__button\"\n                />\n              </Popconfirm>\n            </li>\n            <li>\n              <hr />\n            </li>\n            <li>\n              <ForceStateForm\n                isLoading={isLoading}\n                onPerformAdminAction={onPerformAdminAction}\n                state={state}\n              />\n            </li>\n          </ul>\n        </Drawer>\n      </div>\n    </>\n  );\n};\n","import { FireFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { Translate } from 'components/language';\nimport { useAPICall, useGlobalState, useLanguage, useLoading } from 'hooks';\nimport { ADMIN_API } from 'services/adapters';\nimport { ADMIN_ACTIONS } from 'utils/constants';\n\nimport { AdminOnlyContainer } from './AdminOnlyContainer';\n\nfunction ButtonLabel({ round, lastRound }: { round?: GameRound; lastRound: boolean }) {\n  return lastRound || !round || round.current === round.total ? (\n    <Translate pt=\"Tela de Game Over\" en=\"Game Over Screen\" />\n  ) : (\n    <Translate pt=\"Próxima rodada\" en=\"Next Round\" />\n  );\n}\n\ntype AdminNextRoundButtonProps = {\n  buttonText?: ReactChildren;\n  className?: string;\n  round?: GameRound;\n  lastRound?: boolean;\n};\n\nexport function AdminNextRoundButton({\n  buttonText,\n  className = '',\n  round,\n  lastRound = false,\n}: AdminNextRoundButtonProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  const onGoToNextPhase = useAPICall({\n    apiFunction: ADMIN_API.performAdminAction,\n    actionName: 'force-next-phase',\n    successMessage: translate('Funcionou, próxima fase!', 'It worked, next phase!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar ir para a próxima fase',\n      'The application found an error while trying to go to the next phase'\n    ),\n  });\n\n  if (!isAdmin) return <span></span>;\n\n  return (\n    <AdminOnlyContainer className={className}>\n      <Button\n        icon={<FireFilled />}\n        type=\"primary\"\n        danger\n        onClick={() => onGoToNextPhase({ action: ADMIN_ACTIONS.GO_TO_NEXT_PHASE })}\n        disabled={isLoading}\n      >\n        {buttonText ?? <ButtonLabel round={round} lastRound={lastRound} />}\n      </Button>\n    </AdminOnlyContainer>\n  );\n}\n","import { RocketFilled } from '@ant-design/icons';\nimport { Button, ButtonProps } from 'antd';\nimport { useLoading } from 'hooks';\n\ninterface AdminButtonProps extends ButtonProps {\n  onClick: GenericFunction;\n  children: ReactChildren;\n}\n\nexport function AdminButton({ onClick, children, ...props }: AdminButtonProps) {\n  const { isLoading } = useLoading();\n\n  return (\n    <Button icon={<RocketFilled />} danger type=\"primary\" onClick={onClick} disabled={isLoading} {...props}>\n      {children}\n    </Button>\n  );\n}\n","import { AdminButton, AdminOnlyContainer } from './index';\n\ntype AdminOnlyButtonProps = {\n  onClick: GenericFunction;\n  label: ReactChildren;\n};\n\nexport function AdminOnlyButton({ onClick, label }: AdminOnlyButtonProps) {\n  return (\n    <AdminOnlyContainer>\n      <AdminButton onClick={onClick}>{label}</AdminButton>\n    </AdminOnlyContainer>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ninterface TimedButtonProps extends ButtonProps {\n  duration?: number;\n  onExpire?: GenericFunction;\n  showTimer?: boolean;\n}\n\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  showTimer = true,\n  type,\n  ...props\n}: TimedButtonProps) {\n  const { minutes, seconds } = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    autoStart: true,\n    onExpire: showTimer ? onExpire : undefined,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...props} type={type}>\n      {children}\n      {Boolean(children) && ' '}\n      {showTimer && (\n        <span className={clsx(timeClass, `${timeClass}--${type}`)}>{minutes * 60 + seconds}</span>\n      )}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: any;\n  active?: boolean;\n  activeClass?: string;\n  className?: string;\n  hoverType?: 'scale' | 'sepia';\n}\n\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...props\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useDevFeatures } from 'hooks';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  children: ReactChildren;\n};\n\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { getAnimationClass, kebabToPascal } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Icons } from 'components/icons';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\nconst IconIllustrationsComponents: any = Icons;\n\ntype PhaseAnnouncementProps = {\n  title: any;\n  onClose: GenericFunction;\n  buttonText?: string;\n  children?: any;\n  className?: string;\n  currentRound?: number;\n  duration?: number;\n  type?: string;\n  unskippable?: boolean;\n  withoutTimer?: boolean;\n  animationType?: AnimationType;\n};\nexport function PhaseAnnouncement({\n  buttonText,\n  type,\n  title,\n  children,\n  duration,\n  currentRound = 0,\n  onClose,\n  className,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  const { translate } = useLanguage();\n  const durationPerRound = [15, 15, 10, 5, 5, 5]?.[currentRound] ?? 5;\n  const Icon: any =\n    IconIllustrationsComponents[kebabToPascal(type ?? 'multitask')] ?? IconIllustrationsComponents.Multitask;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n      <Icon className=\"phase-announcement__icon\" />\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          {translate('Prosseguir', 'Continue', buttonText)}\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState, useLanguage } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  children: any;\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Alert, Button, Image, Input, notification, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage, useLoading } from 'hooks';\nimport useGlobalState from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVATARS, PUBLIC_URL, RANDOM_NAMES } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\n\nconst randomName = isDevEnv ? getRandomItem(RANDOM_NAMES) : undefined;\n\nconst AVATAR_IDS = Object.keys(AVATARS);\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n};\n\nexport function Join({ players, info }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId }) => {\n      acc[avatarId] = true;\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVATAR_IDS.filter((avatarId) => usedAvatars[avatarId] === undefined);\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffect(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  }, []); // eslint-disable-line\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(async () => {\n    try {\n      setLoader('add-player', true);\n      const response: PlainObject = await GAME_API.addPlayer({\n        gameId,\n        gameName,\n        playerName: tempUsername,\n        playerAvatarId: tempAvatar,\n      });\n\n      setUserId(response.data.id);\n      setUsername(response.data.name);\n      setUserAvatarId(response.data.avatarId);\n\n      localStorage.set({\n        username: response.data.name,\n        avatarId: response.data.avatarId,\n        gameId,\n      });\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n          'Oops, the application failed when trying to add you as a player'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('add-player', false);\n    }\n  }, [gameId, gameName, tempUsername, tempAvatar]); // eslint-disable-line\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      onAddPlayer();\n    }\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onAddPlayer}\n          loading={isLoading}\n        >\n          {translate('Entrar no jogo', 'Enter')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useLoading, useGlobalState, useLanguage } from 'hooks';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}game-image-${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  switch (type) {\n    case 'eye-cloud':\n    case 'monster-eye-cloud':\n    case 'phone-cloud':\n    case 'retro-cloud':\n    case 'sheep-cloud':\n    case 'speech-cloud':\n      return SingleCloud;\n    case 'artsy-clouds':\n    case 'book-clouds':\n    case 'crime-clouds':\n    case 'halloween-clouds':\n    case 'letter-clouds':\n    case 'one-clouds':\n    case 'sky-clouds':\n      return MultiCloud;\n    default:\n      return SingleCloud;\n  }\n}\n\nfunction getCloudFileName(gameCode: string) {\n  return (\n    {\n      A: 'artsy-clouds',\n      C: 'book-clouds',\n      D: 'crime-clouds',\n      E: 'cyber-cloud',\n      G: 'sky-clouds',\n      H: 'crime-clouds',\n      L: 'phone-cloud',\n      M: 'sheep-cloud',\n      N: 'halloween-clouds',\n      O: 'retro-cloud',\n      P: 'speech-cloud',\n      R: 'monster-eye-cloud',\n      S: 'sky-clouds',\n      T: 'eye-cloud',\n      U: 'one-clouds',\n      X: 'letter-clouds',\n    }[gameCode] ?? 'cloud'\n  );\n}\n\ntype CloudBackgroundProps = {\n  gameCode?: string;\n};\n\nexport function CloudBackground({ gameCode = 'Z' }: CloudBackgroundProps) {\n  const cloudType = getCloudFileName(gameCode);\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${cloudType}`)}>\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport useGlobalState from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseLobby({ players, info }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} />\n        ) : (\n          <Join players={players} info={info} />\n        )}\n      </div>\n\n      <CloudBackground gameCode={info.gameCode} />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport { useLoading, useIsUserReady, useAPICall, useLanguage, useMock } from 'hooks';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n      'Oh no! The application found an error when trying to continue'\n    ),\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n      'Oh no! The application found an error when trying to continue'\n    ),\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n      <ReadyPlayersBar players={players} />\n    </Layout.Content>\n  );\n}\n","import { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PHASES } from 'utils/phases';\n\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <Icons.Gears className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffect } from 'react';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffect(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  }, []); // eslint-disable-line\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Typography } from 'antd';\nimport { LikeFilled } from '@ant-design/icons';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ReadyPlayersBarProps = {\n  players: GamePlayers;\n  readyText?: string;\n  readyTextPlural?: string;\n  hideNames?: boolean;\n};\n\nexport function ReadyPlayersBar({\n  players,\n  readyText,\n  readyTextPlural,\n  hideNames = false,\n}: ReadyPlayersBarProps) {\n  const { readyPlayers, notReadyPlayers }: { readyPlayers: GamePlayer[]; notReadyPlayers: string[] } =\n    Object.values(players).reduce(\n      (acc: any, player: GamePlayer) => {\n        if (player.ready) {\n          acc.readyPlayers.push(player);\n        } else {\n          acc.notReadyPlayers.push(player.name);\n        }\n        return acc;\n      },\n      {\n        readyPlayers: [],\n        notReadyPlayers: [],\n      }\n    );\n\n  if (readyPlayers.length === 0) {\n    return <span></span>;\n  }\n\n  return (\n    <div className=\"ready-player-bar\">\n      <div className=\"ready-player-bar__bar\">\n        <AntAvatar.Group size=\"small\">\n          {readyPlayers.map((player) => (\n            <Avatar key={player.name} id={player.avatarId} />\n          ))}\n        </AntAvatar.Group>\n        <span className=\"ready-player-bar__speech-bubble\">\n          <Typography.Text>\n            {readyPlayers.length > 1 ? (\n              <Translate pt=\"Estamos prontos!\" en=\"We're ready!\" custom={readyTextPlural} />\n            ) : (\n              <Translate pt=\"Estou pronto!\" en=\"I'm ready!\" custom={readyText} />\n            )}\n          </Typography.Text>\n          <LikeFilled className=\"ready-player-bar__speech-bubble-icon\" />\n        </span>\n      </div>\n      {!hideNames && notReadyPlayers.length > 0 && (\n        <span className=\"ready-player-bar__names\">\n          <Translate pt=\"Esperando\" en=\"Waiting for\" />: {notReadyPlayers.join(', ')}\n        </span>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { ForwardFilled } from '@ant-design/icons';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\n\ntype TurnOrderProps = {\n  players: GamePlayers;\n  order: PlayerId[];\n  activePlayerId?: PlayerId;\n  className?: string;\n  reorderByUser?: PlayerId;\n  title?: string;\n};\n\nexport function TurnOrder({\n  players,\n  order,\n  activePlayerId,\n  reorderByUser,\n  title,\n  className = '',\n}: TurnOrderProps) {\n  const orderList = Boolean(reorderByUser) ? reorder(order, reorderByUser!) : order;\n\n  return (\n    <div className={clsx('game-order', className)}>\n      <header className=\"game-order__title\">\n        <Translate en=\"Player Order\" pt=\"Ordem dos Jogadores\" custom={title} />\n      </header>\n      <ul className=\"game-order__players\">\n        {orderList.map((playerId, index) => {\n          const player = players[playerId];\n          const isActive = activePlayerId === playerId;\n          return (\n            <>\n              <span\n                key={`turn-order-player-${playerId}`}\n                className={clsx('game-order__player', isActive && 'game-order__player--active')}\n                style={isActive ? { backgroundColor: getAvatarColorById(player.avatarId) } : undefined}\n              >\n                <AvatarName player={player} />\n              </span>\n              {index < order.length - 1 && (\n                <span key={`turn-order-player-${playerId}-arrow`} className=\"game-order__arrow\">\n                  <ForwardFilled />\n                </span>\n              )}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nfunction reorder(order: PlayerId[], startWith: PlayerId): PlayerId[] {\n  const starterIndex = order.indexOf(startWith);\n\n  return [...order.slice(starterIndex), ...order.slice(0, starterIndex)];\n}\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\nimport { ReadyPlayersBar } from 'components/players';\nimport { Instruction, Title } from 'components/text';\n\ntype WaitingRoomProps = {\n  players: GamePlayers;\n  title?: any;\n  instruction?: any;\n  children?: any;\n};\n\nexport function WaitingRoom({ players, title, instruction, children }: WaitingRoomProps) {\n  const { translate } = useLanguage();\n  return (\n    <div className=\"waiting-room\">\n      <Title>{translate('Pronto!', 'Done!', title)}</Title>\n      <Icons.WaitingRoom style={{ width: '6rem' }} />\n      <Instruction>\n        {Boolean(instruction) ? (\n          instruction\n        ) : (\n          <Translate pt=\"Vamos aguardar os outros jogadores!\" en=\"Please wait for the other players!\" />\n        )}\n      </Instruction>\n      {children}\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Instruction } from 'components/text';\n\ntype CollapsibleRuleProps = {\n  children: any;\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype PopoverRuleProps = {\n  content: any;\n  showLabel?: boolean;\n  label?: any;\n};\n\nexport function PopoverRule({ content, label, showLabel = true }: PopoverRuleProps): JSX.Element {\n  const [isActive, setActive] = useState(false);\n\n  useEffect(() => {\n    setActive(showLabel);\n  }, []); // eslint-disable-line\n\n  return (\n    <div className=\"popover-rule\">\n      <Popover placement=\"bottomLeft\" content={content} trigger=\"click\">\n        <Button\n          shape={'round'}\n          size=\"large\"\n          onMouseOver={() => setActive(true)}\n          onMouseLeave={() => setActive(showLabel ?? false)}\n        >\n          <ReadOutlined />\n          {isActive && Boolean(label) ? label : <Translate pt=\" Regras\" en=\" Rules\" />}\n        </Button>\n      </Popover>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}game-image-${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\n\ntype RulesListProps = {\n  children: any;\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n};\n\nexport function RulesModal({ gameInfo }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          visible={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Badge } from 'antd';\n// Utils\nimport { AVATARS } from 'utils/constants';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionMeProps = {\n  player: Player;\n  isTeamGame?: boolean;\n};\n\nexport function SectionMe({ player, isTeamGame = false }: SectionMeProps) {\n  const { language } = useLanguage();\n\n  return (\n    <div className=\"game-info-drawer__section-me\">\n      <div className=\"game-info-drawer__label\">\n        <Translate pt=\"Você é\" en=\"You are\" />\n        {isTeamGame && (\n          <Translate pt={` do time ${player?.team ?? '?'}`} en={` on team ${player?.team ?? '?'}`} />\n        )}\n      </div>\n      <div className=\"game-info-drawer__me\">\n        <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n          <Avatar id={player.avatarId} shape=\"square\" />\n        </Badge>\n        {player.name}, {AVATARS[player.avatarId].description[language]}\n      </div>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar, Table } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n  pointsToVictory?: number;\n  isTeamGame?: boolean;\n  teams?: GameTeams;\n};\n\nexport function SectionMeta({\n  round,\n  groupScore,\n  pointsToVictory,\n  isTeamGame = false,\n  teams,\n}: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li className=\"game-info-drawer__meta-item\">\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li className=\"game-info-drawer__meta-item\">\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar className=\"game-info-drawer__round\" size=\"default\" style={{ backgroundColor: 'gold' }}>\n            {groupScore ?? 0}\n          </AntAvatar>\n        </li>\n      )}\n\n      {Boolean(teams) && (\n        <li className=\"game-info-drawer__meta-item\">\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <Table\n            size=\"small\"\n            pagination={false}\n            columns={Object.entries(teams!).map(([teamId, teamObj]: [string, GameTeam]) => ({\n              title: teamObj?.name ?? teamId,\n              dataIndex: teamId,\n              key: teamId,\n              align: 'center',\n            }))}\n            dataSource={Object.entries(teams!).reduce(\n              (acc: PlainObject[], [teamId, teamObj]: [string, GameTeam]) => {\n                acc[0][teamId] = teamObj.score;\n                return acc;\n              },\n              [{}]\n            )}\n          />\n        </li>\n      )}\n\n      {Boolean(pointsToVictory) && (\n        <div>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate\n              pt={`Pontos restantes para ${isTeamGame ? 'um time' : 'alguém'} ganhar:`}\n              en={`Points left for ${isTeamGame ? 'a team' : 'someone'} to win:`}\n            />\n          </div>\n          <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n            {pointsToVictory}\n          </AntAvatar>\n        </div>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { AVATARS } from 'utils/constants';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionTeamPlayersProp = {\n  team: GameTeam;\n  players: GamePlayers;\n};\n\nexport function SectionTeamPlayers({ team, players }: SectionTeamPlayersProp) {\n  const { language } = useLanguage();\n\n  const sortedPlayers = useMemo(\n    () =>\n      orderBy(\n        team.members.map((playerId) => {\n          return players[playerId];\n        }),\n        ['name'],\n        ['asc']\n      ),\n    [players, team]\n  );\n\n  return (\n    <div className=\"game-info-drawer__team\" key={team.name}>\n      <h3>\n        <Translate pt=\"Time \" en=\"Team \" />\n        {team.name}\n      </h3>\n      <ul>\n        {sortedPlayers.map((player) => {\n          return (\n            <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.id}`}>\n              <Avatar id={player.avatarId} shape=\"square\" className=\"game-info-drawer__avatar-with-badge\" />\n              {player.name}, {AVATARS[player.avatarId].description[language]}\n            </div>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","// Components\nimport { SectionTeamPlayers } from './SectionTeamPlayers';\n\ntype SectionTeamsProps = {\n  players: GamePlayers;\n  teams: GameTeams;\n};\n\nexport function SectionTeams({ players, teams }: SectionTeamsProps) {\n  return (\n    <div className=\"game-info-drawer__team-players\">\n      {Object.values(teams).map((team) => (\n        <SectionTeamPlayers key={team.name} team={team} players={players} />\n      ))}\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Utils\nimport { AVATARS } from 'utils/constants';\n// Components\nimport { Avatar } from 'components/avatars';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures, useGlobalState, useLocalStorage } from 'hooks';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Utils\nimport { useLanguage } from 'hooks';\n// Components\nimport { SectionMe } from './_internal/SectionMe';\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionTeams } from './_internal/SectionTeams';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/dev';\nimport { RulesModal } from 'components/rules';\nimport { PUBLIC_URL } from 'utils/constants';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [visible, setVisible] = useState(false);\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  const completeMe = players?.[userId] ?? {};\n  const isTeamGame = Boolean(completeMe?.team) && Boolean(state.teams);\n\n  return (\n    <>\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={showDrawer}>\n          {info.title?.[language] ?? '?'} <InfoCircleOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={onClose}\n          visible={visible}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}game-image-${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/game-image-em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          {completeMe && <SectionMe player={completeMe} isTeamGame={isTeamGame} />}\n\n          <Divider />\n\n          <SectionSettings />\n\n          <Divider />\n\n          <RulesModal gameInfo={info} />\n\n          <Divider />\n\n          <SectionMeta\n            round={state?.round || 0}\n            groupScore={state?.groupScore}\n            pointsToVictory={state?.pointsToVictory}\n            isTeamGame={isTeamGame}\n            teams={state?.teams}\n          />\n\n          <Divider />\n\n          {isTeamGame ? (\n            <SectionTeams players={players} teams={state?.teams} />\n          ) : (\n            <SectionRankedPlayers players={players} />\n          )}\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useGameState, useGlobalState, useGamePlayers } from 'hooks';\n// Utils\nimport gameList from 'assets/data/games.json';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\n\nconst GAME_LIST: {\n  [key: string]: GameInfo;\n} = gameList;\n\ntype SessionProps = {\n  gameId: GameId;\n  gameCollection: GameName;\n  getActiveComponent: (args: any) => any;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent }: SessionProps) {\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameId?.[0] ? GAME_LIST[gameId[0]] : {});\n  }, [gameId]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport { Typography } from 'antd';\n\ntype InstructionsProps = {\n  children: any;\n  white?: boolean;\n  className?: string;\n  contained?: boolean;\n  fullWidth?: boolean;\n};\n\n/**\n * Typography container for instructions\n * @param props\n * @returns\n */\nexport const Instruction = ({ children, white, className, contained, fullWidth }: InstructionsProps) => {\n  const baseClass = 'instruction';\n\n  return (\n    <Typography.Text\n      className={clsx(\n        baseClass,\n        contained && `${baseClass}--contained`,\n        white && `${baseClass}--white`,\n        fullWidth && `${baseClass}--full-width`,\n        className\n      )}\n      data-testid=\"instruction\"\n    >\n      {children}\n    </Typography.Text>\n  );\n};\n","// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype RoundsLeftInstructionProps = {\n  round: GameRound;\n};\n\nexport function RoundsLeftInstruction({ round }: RoundsLeftInstructionProps) {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Faltam <strong>{(round?.total ?? 0) - (round?.current ?? 0)}</strong> rodadas para o jogo\n            terminar...\n          </>\n        }\n        en={\n          <>\n            <strong>{(round?.total ?? 0) - (round?.current ?? 0)}</strong> rounds left for the game to end...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","type TextHighlightProps = {\n  children: any;\n};\n\nexport function TextHighlight({ children }: TextHighlightProps) {\n  return <span className=\"text-highlight\">{children}</span>;\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography } from 'antd';\n\ntype TitleProps = {\n  children: any;\n  white?: boolean;\n  icon?: any;\n  className?: string;\n  level?: 1 | 2 | 3 | 4 | 5 | undefined;\n};\n\nexport const Title = ({ children, white, icon, className, level = 1 }: TitleProps) => {\n  return (\n    <Typography.Title level={level} className={clsx('title', white && 'title--white', className)}>\n      {Boolean(icon) && icon}\n      {children}\n    </Typography.Title>\n  );\n};\n","/**\n * Enum of Game Phases\n */\nexport const PHASES: Record<string, Record<string, string>> = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  DESENHO_RAPIDAO: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    HINT_GIVING: 'HINT_GIVING',\n    HINT_RECEIVING: 'HINT_RECEIVING',\n    GUESS_THE_CODE: 'GUESS_THE_CODE',\n    DISCUSSION: 'DISCUSSION',\n    SOLUTION: 'SOLUTION',\n  },\n  PALHETA_DE_CORES: {\n    '': '',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    WRITE: 'WRITE',\n    EVALUATION: 'EVALUATION',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  TE_CONHECO: {\n    WRITE: 'WRITE',\n    TRUTHS_AND_LIES: 'TRUTHS_AND_LIES',\n    RESULT: 'RESULT',\n    MATCH_PLAYERS: 'MATCH_PLAYERS',\n    REVEAL: 'REVEAL',\n  },\n};\n"],"names":["AdminOnlyContainer","children","className","props","useGlobalState","clsx","FireFilled","AdminPerformActionButton","label","icon","type","danger","ValueFormItem","valueType","name","checkedChildren","unCheckedChildren","defaultChecked","ForceStateForm","isLoading","state","onPerformAdminAction","Form","form","useState","setValueType","stateKeys","Object","keys","map","k","value","onFinish","e","parsedValue","Number","undefined","payload","key","window","confirm","JSON","stringify","action","ADMIN_ACTIONS","resetFields","message","initialValues","rules","required","options","onChange","newType","includes","setFieldsValue","htmlType","disabled","PlayersReadyState","players","values","reduce","acc","player","ready","readyPlayers","push","pendingPlayers","CheckCircleFilled","style","color","title","playerName","MinusCircleFilled","AdminMenuDrawer","useLoading","isAdmin","visible","setVisible","onClose","useAPICall","apiFunction","ADMIN_API","actionName","successMessage","errorMessage","onAfterCall","size","onClick","placement","closable","onConfirm","phase","lastRound","ButtonLabel","round","current","total","pt","en","AdminNextRoundButton","buttonText","translate","useLanguage","onGoToNextPhase","AdminButton","RocketFilled","AdminOnlyButton","TimedButton","duration","onExpire","showTimer","useTimer","expiryTimestamp","inNSeconds","autoStart","minutes","seconds","timeClass","Boolean","TransparentButton","active","activeClass","hoverType","DebugOnly","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","IconIllustrationsComponents","Icons","PhaseAnnouncement","currentRound","withoutTimer","unskippable","animationType","durationPerRound","Icon","kebabToPascal","Multitask","getAnimationClass","custom","PhaseContainer","info","allowedPhase","fullScreen","white","screenRef","useRef","setScreenSize","useEffect","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","randomName","getRandomItem","RANDOM_NAMES","AVATAR_IDS","AVATARS","Join","language","setLoader","gameId","setUserId","setUsername","setUserAvatarId","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","avatarId","newAvailableAvatars","filter","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","GAME_API","playerAvatarId","response","data","username","notification","console","error","alt","src","PUBLIC_URL","fallback","CaretLeftOutlined","viewBox","href","avatars","CaretRightOutlined","target","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","loading","Waiting","gameMeta","userAvatarId","onLockGameAndStart","isLocked","numPlayers","direction","min","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","backgroundImage","CloudBackground","gameCode","cloudType","A","C","D","E","G","H","L","M","N","O","P","R","S","T","U","X","getCloudFileName","CloudTypeComponent","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","animate","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","onBeReady","onBeReadyQue","useMock","ruleClass","wrap","SmileFilled","MehFilled","RobotFilled","PhaseSetup","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","ReadyPlayersBar","readyText","readyTextPlural","hideNames","notReadyPlayers","LikeFilled","join","TurnOrder","order","activePlayerId","reorderByUser","orderList","startWith","starterIndex","slice","reorder","playerId","isActive","backgroundColor","getAvatarColorById","ForwardFilled","WaitingRoom","instruction","CollapsibleRule","contained","ghost","header","PopoverRule","content","showLabel","setActive","trigger","shape","onMouseOver","onMouseLeave","ReadOutlined","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","onCancel","footer","SectionMe","isTeamGame","team","count","score","SectionMeta","groupScore","pointsToVictory","teams","pagination","columns","entries","teamId","teamObj","dataIndex","align","dataSource","SectionTeamPlayers","sortedPlayers","useMemo","members","SectionTeams","SectionRankedPlayers","rankedPlayers","SectionSettings","blurEnabled","setBlurEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","checked","GameInfoDrawer","completeMe","preview","GAME_LIST","gameList","Session","gameCollection","getActiveComponent","useGamePlayers","useGameState","setInfo","table","ActiveComponent","meta","Instruction","fullWidth","RoundsLeftInstruction","TextHighlight","Title","level","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","REVEAL","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","DESENHO_RAPIDAO","PROMPT_SELECTION","DRAWING","GUESSING","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","INSTRUMENTOS_CODIFICADOS","HINT_GIVING","HINT_RECEIVING","GUESS_THE_CODE","DISCUSSION","SOLUTION","PALHETA_DE_CORES","LINHAS_CRUZADAS","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","ONDA_TELEPATICA","DIAL_CLUE","GUESS","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","WRITE","CRUZA_PALAVRAS","CLUE_WRITING","TE_CONHECO","TRUTHS_AND_LIES","MATCH_PLAYERS"],"sourceRoot":""}