{"version":3,"file":"static/js/testemunha-ocular.41586d02.chunk.js","mappings":"sXAeaA,EAAO,SAAC,GAUH,IAThBC,EASe,EATfA,SASe,IARfC,OAAAA,OAQe,MARN,QAQM,EAPfC,EAOe,EAPfA,OAOe,IANfC,MAAAA,OAMe,MANP,OAMO,MALfC,KAAAA,OAKe,MALR,SAKQ,MAJfC,YAAAA,OAIe,aAHfC,UAAAA,OAGe,MAHH,GAGG,MAFfC,gBAAAA,OAEe,MAFG,GAEH,MADfC,gBAAAA,OACe,MADG,GACH,EACTC,EAAY,OAEZC,EAAUL,GACZM,EAAAA,EAAAA,IACsB,kBAAbX,EACHA,EAAS,GAAGY,cACD,UAAXX,EACAA,EAAO,GAAGW,cACV,KAENT,EAEJ,OACE,iBAAKG,WAAWO,EAAAA,EAAAA,GAAKJ,EAAD,UAAeA,EAAf,aAA6BL,GAAQE,GAAzD,WACE,iBACEA,WAAWO,EAAAA,EAAAA,GAAK,GAAD,OAAIJ,EAAJ,wCAA8CC,GAAWH,GACxEO,MAAOX,EAAMY,WAAW,KAAO,CAAEC,gBAAiBb,GAAU,GAF9D,SAIGF,KAEH,iBAAMK,UAAS,UAAKG,EAAL,UAAf,SAAwCT,IACvCE,IAAU,iBAAMI,WAAWO,EAAAA,EAAAA,GAAK,GAAD,OAAIJ,EAAJ,YAAyBD,GAA9C,SAAiEN,Q,kDCjC3E,SAASe,EAAT,GAAsF,IAA9DjB,EAA6D,EAA7DA,SAA6D,IAAnDkB,SAAAA,OAAmD,MAAxC,GAAwC,MAApCC,KAAAA,OAAoC,MAA7B,OAA6B,EAC1F,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACQC,GAAcC,EAAAA,EAAAA,MAAdD,UAER,OACE,iCACE,gBAAKjB,UAAU,qCACf,iBACEA,WAAWO,EAAAA,EAAAA,GAAK,gBAAiBQ,GAAc,2BAC/CI,YAAa,kBAAMH,GAAc,IACjCI,aAAc,kBAAMJ,GAAc,IAHpC,WAKE,kBAAMhB,UAAU,uBAAhB,WACE,SAAC,KAAD,CACEa,KAAe,SAATA,EAAkB,gBAAkB,aAC1Cf,KAAMiB,EAAa,GAAK,GACxBf,UAAU,sBACVqB,IAAKJ,EAAU,mBAAiB,oBAElC,SAAC,IAAD,CAAWK,GAAG,+BAA+BC,GAAG,qBAC/CX,KAEFlB,Q,kCCxBF,SAAS8B,EAAT,GAA4D,IAAjCC,EAAgC,EAAhCA,OAChC,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,SAER,OAFA,EAAkBC,eAGhB,SAAC,IAAD,CACEC,UAAU,MACVC,OACE,SAAC,IAAD,CACER,GAAG,2EACHC,GAAG,4DALT,UASE,UAAC,IAAD,CAAQQ,OAAK,EAACC,QAAS,kBAAML,EAASF,IAAS3B,KAAK,QAAQE,UAAU,oBAAtE,WACE,SAACiC,EAAA,EAAD,IADF,KAC2B,SAAC,IAAD,CAAWX,GAAG,QAAQC,GAAG,eAItD,wB,4DCnBG,SAASW,EAAT,GAK4B,IAJjCT,EAIgC,EAJhCA,OACAzB,EAGgC,EAHhCA,UACAN,EAEgC,EAFhCA,SACGyC,GAC6B,YAChC,OACE,iCAAKnC,WAAWO,EAAAA,EAAAA,GAAK,8BAA+BP,IAAgBmC,GAApE,cACGzC,GACD,SAAC8B,EAAD,CAAiBC,OAAQA,Q,iCCHlBW,EAAY,SAAC,GAMH,IALrBC,EAKoB,EALpBA,QAKoB,IAJpBvC,KAAAA,OAIoB,MAJb,SAIa,MAHpBwC,UAAAA,OAGoB,MAHR,IAGQ,MAFpBtC,UAAAA,OAEoB,MAFR,GAEQ,MADpBuC,QAAAA,OACoB,SACZC,GAAoBd,EAAAA,EAAAA,MAApBc,gBAEFrC,EAAY,aAEZsC,EAAY,sBAAkBJ,EAAQA,EAAQK,OAAS,IAEvDC,EAAWN,EAAQO,QAAQ,KAAM,KAEjCC,EAAYL,EAAgBH,GAElC,OACE,gBAAKrC,WAAWO,EAAAA,EAAAA,GAAKJ,EAAD,UAAeA,EAAf,aAA6BL,GAAQ+C,GAAS,UAAO1C,EAAP,UAA0BH,GAA5F,UACE,SAAC,IAAD,CACE8C,MAAOR,EACPS,IAAG,UAAKC,0CAAL,OAA2CL,EAA3C,QACHM,aAAa,SAAC,IAAD,CAAOV,SAAS,EAAOQ,IAAKE,EAAaH,MAAOR,IAC7DY,SAAQ,UAAKC,EAAAA,GAAAA,OAAL,OAAwBV,EAAxB,QACRF,WACEA,GAAYM,IACR,CACEO,cAAc,GAAD,OAAKjD,EAAL,wB,SCvBtB,SAASkD,EAAT,GAUiB,IAAD,IATrBC,KAAAA,OASqB,MATd,GASc,EARrBC,EAQqB,EARrBA,aACAC,EAOqB,EAPrBA,kBAOqB,IANrBxD,UAAAA,OAMqB,MANT,GAMS,MALrByD,kBAAAA,OAKqB,MALD,GAKC,MAJrBC,UAAAA,OAIqB,MAJT,EAIS,EAHrBC,EAGqB,EAHrBA,SAGqB,IAFrBC,YAAAA,OAEqB,MAFP,GAEO,MADrBC,qBAAAA,OACqB,SACb5C,GAAcC,EAAAA,EAAAA,MAAdD,UAEFqB,GAAYwB,EAAAA,EAAAA,IAAaJ,EAAW,GAAIE,GAE9C,OACE,SAAC,iBAAD,WACE,gBAAK5D,WAAWO,EAAAA,EAAAA,GAAK,kBAAmBP,GAAxC,SACGsD,EAAKS,KAAI,SAACtC,GACT,OACE,iBAA4BzB,UAAU,kCAAtC,UACGgE,QAAQT,KACP,SAAC,IAAD,CACEU,MAAM,SAACC,EAAA,EAAD,IACNlE,UAAWyD,EACXzB,QAAS,kBAAMuB,EAAc9B,IAC7B3B,KAAK,QACLqE,SAAUN,EALZ,SAOG5C,EAAU,aAAc,SAAUuC,MAGvC,SAACpB,EAAD,CAAWC,QAASZ,EAAQa,UAAWqB,GAAYrB,KACnD,SAACd,EAAD,CAAiBC,OAAQA,MAb3B,eAAkBA,WC3BvB,IAAM2C,EAAgB,SAAC,GAKH,IAAD,IAJxBtE,KAAAA,OAIwB,MAJjB,SAIiB,MAHxBwC,UAAAA,OAGwB,MAHZ,IAGY,MAFxBtC,UAAAA,OAEwB,MAFZ,GAEY,EADxBqE,EACwB,EADxBA,eAEMlE,EAAY,kBAEZ0C,GAAYL,GADUd,EAAAA,EAAAA,MAApBc,iBAC0B6B,GAC5B1B,GAAW,OAAC0B,QAAD,IAACA,EAAAA,EAAkB,IAAIzB,QAAQ,KAAM,KAEtD,OACE,gBAAK5C,WAAWO,EAAAA,EAAAA,GAAKJ,EAAD,UAAeA,EAAf,aAA6BL,GAAQE,GAAzD,UACE,SAAC,IAAD,CACE8C,MAAOR,EACPS,IAAKE,EACLV,UACEyB,QAAQK,MACHxB,GACC,CACEO,cAAe,2BACfL,IAAI,GAAD,OAAKC,0CAAL,OAA2CL,EAA3C,eC7Bd,SAAS2B,EAAT,GAAoE,IAApChB,EAAmC,EAAnCA,KACrC,OAAKA,GAEH,gBAAKtD,UAAU,0BAAf,SACGsD,EAAKS,KAAI,SAACtC,GAAD,OACR,SAACW,EAAD,CAAWC,QAASZ,EAAQa,UAAW,EAA8BC,SAAS,GAA9E,mBAA2Dd,UAJ/C,oB,cCQb,SAAS8C,EAAT,GAMyB,IAL9BvC,EAK6B,EAL7BA,QACAP,EAI6B,EAJ7BA,OACA+C,EAG6B,EAH7BA,YACAC,EAE6B,EAF7BA,cAE6B,IAD7BC,WAAAA,OAC6B,SAC7B,OACE,UAAC,IAAD,CACEC,MAAM,QACN7E,KAAK,QACLiC,OAAQ2C,EACR1E,UAAU,2BACVgC,QAAS,kBAAMA,EAAQP,IALzB,WAOE,SAACmD,EAAA,EAAD,IACCF,GACC,SAAC,IAAD,CAAWpD,GAAG,YAAYC,GAAG,WAAWsD,OAAQJ,KAEhD,SAAC,IAAD,CAAWnD,GAAG,aAAaC,GAAG,SAASsD,OAAQL,KAEjD,SAACI,EAAA,EAAD,S,2IChCC,SAASE,EAAT,GAAwC,IAAxBpF,EAAuB,EAAvBA,SACrB,OAAO,8BAAGA,ICAL,SAASqF,EAAT,GAA+D,IAAD,IAA5CC,UAAAA,OAA4C,SAAzBtF,EAAyB,EAAzBA,SAC1C,OAAOsF,GAAY,8BAAGtF,KAAe,wBCDhC,SAASuF,EAAT,GAAiE,IAAD,IAA9CC,YAAAA,OAA8C,SAAzBxF,EAAyB,EAAzBA,SAC5C,OAAOwF,GAAc,8BAAGxF,EAAS,MAAS,8BAAGA,EAAS,KCDjD,SAASyF,EAAT,GAA2D,IAArCC,EAAoC,EAApCA,MAAO1F,EAA6B,EAA7BA,SAClC,GAAI0F,EAAM1C,OAAS,EACjB,MAAM2C,MAAM,0CAGd,OAAID,EAAM,IAAM1F,EAAS,GAChBA,EAAS,GAGd0F,EAAM,IAAM1F,EAAS,GAChBA,EAAS,GAGd0F,EAAM,IAAM1F,EAAS,GAChBA,EAAS,GAGd0F,EAAM,IAAM1F,EAAS,GAChBA,EAAS,GAGd0F,EAAM,IAAM1F,EAAS,GAChBA,EAAS,IAElB4F,QAAQC,KAAK,4CACN7F,K,wOC3BF,SAAS8F,IACd,OACE,SAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,SAAC,IAAD,CACEnE,GAAG,6RACHC,GAAG,4PAUJ,SAASmE,EAAT,GACL,OAD4E,EAAxCC,YAElC,SAAC,KAAD,WACE,SAAC,IAAD,CACErE,GAAG,oIACHC,GAAG,uHAIP,SAAC,KAAD,WACE,SAAC,IAAD,CACED,GAAG,kKACHC,GAAG,wJCbJ,SAASqE,EAAT,GAA6F,IAA7DC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,qBACtCC,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAkBE,EAAAA,EAAAA,IAAe,WAA1BC,GAAP,eAEA,OACE,UAAC,IAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAYrF,KAAK,iBAAiBf,KAAK,WACvC,mBACA,SAAC,IAAD,CAAWwB,GAAG,qCAAqCC,GAAG,yCAGxD,SAACiE,EAAD,KAEA,SAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,SAAC,IAAD,UACGU,OAAOC,OAAOP,GAAS9B,KAAI,SAACsC,GAC3B,OAAIH,GAEA,SAAC,IAAD,CAEE/B,SAAU4B,EACV/D,QAAS,kBAAM8D,EAAqB,CAAEQ,UAAWD,EAAOE,MAH1D,UAKE,SAAC,KAAD,CAAqCF,OAAQA,EAAQG,UAAQ,EAACC,aAAW,GAAzE,cAAwBJ,EAAOE,MALjC,eACeF,EAAOE,MASnB,SAAC,KAAD,CAAqCF,OAAQA,EAAQG,UAAQ,EAACC,aAAW,GAAzE,cAAwBJ,EAAOE,aAK5C,UAAC,KAAD,gBAEE,SAAC,IAAD,CAAWjF,GAAG,8CAA2CC,GAAG,oCAF9D,SA7BS,GCsCf,MAhDA,YAAsE,IAAD,EAApCmF,EAAoC,EAApCA,MAAOb,EAA6B,EAA7BA,QAASc,EAAoB,EAApBA,KACvC1F,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA+B2F,EAAAA,EAAAA,IAAQ,GAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAERhB,ECZD,WACL,IAAQ7E,GAAcC,EAAAA,EAAAA,MAAdD,UAEF8F,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,iBACZC,eAAgBnG,EAAU,iCAAkC,kCAC5DoG,aAAcpG,EACZ,yEACA,6EAIJ,OAAO,SAACqG,GACNP,GAAQ,QACNQ,OAAQ,kBACLD,KDJsBE,GAE7B,OACE,SAAC,KAAD,CACEb,KAAMA,EACNc,MAAK,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAOe,MACdC,aAAcC,EAAAA,EAAAA,kBAAAA,kBACd3H,UAAU,UAJZ,UAME,UAAC,IAAD,CAAc6G,KAAMA,EAAMhB,QAASA,EAAnC,WAEE,SAAC,KAAD,CACEhF,KAAK,cACLiB,MAAOb,EAAU,SAAU,YAC3B2G,QAASd,EACTe,aAAY,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOoB,aAAT,aAAE,EAAcC,QAJ9B,UAME,SAAC,KAAD,WACE,SAAC,IAAD,CACEzG,IACE,6QAMFC,IACE,6OAWR,SAACqE,EAAD,CAAsBC,QAASA,EAASC,qBAAsBA,U,8BE1C/D,SAASkC,EAAT,GAA+D,IAAnCC,EAAkC,EAAlCA,QACzBhH,GAAcC,EAAAA,EAAAA,MAAdD,UAER,OACE,SAAC,KAAD,CAAiBa,MAAOb,EAAU,uBAAwB,oBAA1D,UACE,wBACGgH,EAAQlE,KAAI,SAACmE,GAAD,OACX,gBAAsClI,UAAU,mBAAhD,WACE,iBAAMA,UAAU,sBAAhB,SAAuCkI,EAAMC,WAC5CD,EAAME,QACL,SAAC,IAAD,CAAStG,MAAOb,EAAU,MAAO,OAAQjB,UAAU,kBAAnD,UACE,SAAC,KAAD,CAAYa,KAAK,yBAAyBf,KAAK,aAGjD,SAAC,IAAD,CAASgC,MAAOb,EAAU,SAAO,MAAOjB,UAAU,kBAAlD,UACE,SAAC,KAAD,CAAYa,KAAK,yBAAyBf,KAAK,cARrD,wBAA0BoI,EAAM3B,Y,iCCJnC,SAAS8B,EAAT,GAAmG,IAA/EC,EAA8E,EAA9EA,SAAUC,EAAoE,EAApEA,YAAaC,EAAuD,EAAvDA,YAAuD,IAA1CC,mBAAAA,OAA0C,MAArB,GAAqB,EACvG,GAAgCvH,EAAAA,EAAAA,MAAxBwH,EAAR,EAAQA,SAAUzH,EAAlB,EAAkBA,UACV8E,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAgB4C,EAAAA,EAAAA,MAAT7F,GAAP,eAEMR,EAAYsG,KAAKC,MAAM/F,EAAQ,GAErC,OAAI0F,GAEA,gBAAKxI,UAAU,mBAAf,SACGsI,EAASvE,KAAI,SAAC+E,GACb,IAAMC,EAAgBN,EAAmBO,SAASF,EAAQvC,IACpD0C,EAAOH,EAAQG,KAAKP,GAE1B,OACE,SAAC,IAAD,CAEE5G,MAAOb,EAAU,gCAAD,OACkBgI,EADlB,gDAEsBA,EAFtB,MAIhBC,UAAW,kBAAMV,EAAYM,EAAQvC,KACrC4C,OAAQlI,EAAU,MAAO,OACzBmI,WAAYnI,EAAU,SAAO,MAC7BkD,SAAU4E,GAAiBhD,EAT7B,UAWE,oBACE/F,UAAU,6DACVmE,SAAU4E,GAAiBhD,EAF7B,WAIE,SAAC,KAAD,CACE1D,QAAS0G,EAAgB,QAAUD,EAAQvC,GAC3CvG,WAAWO,EAAAA,EAAAA,GACT,mCACW,OAAXgI,QAAW,IAAXA,OAAA,EAAAA,EAAahC,MAAOuC,EAAQvC,IAAM,0CAClCwC,GAAiB,6CAEnBzG,UAAWA,EACXC,SAAS,KAETwG,IAAiB,gBAAK/I,UAAU,iCAAf,SAAiDiJ,QAxBjEH,EAAQvC,UAkCvB,gBAAKvG,UAAU,mBAAf,SACGsI,EAASvE,KAAI,SAAC+E,GACb,IAAMC,EAAgBN,EAAmBO,SAASF,EAAQvC,IAC1D,OACE,iBAAKvG,UAAU,4BAAf,WACE,SAAC,KAAD,CACEqC,QAAS0G,EAAgB,QAAUD,EAAQvC,GAC3CvG,WAAWO,EAAAA,EAAAA,GACT,mCACW,OAAXgI,QAAW,IAAXA,OAAA,EAAAA,EAAahC,MAAOuC,EAAQvC,IAAM,2CAEpCjE,UAAWA,KAEXyG,IAAiB,gBAAK/I,UAAU,iCAAf,SAAiD8I,EAAQG,KAAKP,OATnCI,EAAQvC,SCnD3D,SAAS8C,EAAT,GAOuB,IAN5Bf,EAM2B,EAN3BA,SACAgB,EAK2B,EAL3BA,6BACAf,EAI2B,EAJ3BA,YACAgB,EAG2B,EAH3BA,WACAC,EAE2B,EAF3BA,iBACAvB,EAC2B,EAD3BA,QAEA,OACE,UAAC,IAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAYpH,KAAK,iBAAiBf,KAAK,WACvC,mBACA,SAAC,IAAD,CAAWwB,IAAI,uDAA2BC,IAAI,6DAEhD,UAAC,KAAD,CAAakE,WAAS,EAAtB,WACE,SAAC,IAAD,CACEnE,IACE,iCACE,SAAC,KAAD,CAAY+E,OAAQkD,IADtB,wDAIFhI,IACE,iCACE,SAAC,KAAD,CAAY8E,OAAQkD,IADtB,8CAID,IACFC,IACC,SAAC,IAAD,CACElI,GAAG,gEACHC,GAAG,sDAKT,SAAC8G,EAAD,CACEC,SAAUA,EACVC,YAAaiB,EAAmBjB,OAAckB,EAC9ChB,mBAAoBa,KAGtB,SAACtB,EAAD,CAAkBC,QAASA,OCvC1B,SAASyB,EAAT,GAOsB,IAN3BC,EAM0B,EAN1BA,UACAC,EAK0B,EAL1BA,iBACA7D,EAI0B,EAJ1BA,UACAuC,EAG0B,EAH1BA,SACAgB,EAE0B,EAF1BA,6BACArB,EAC0B,EAD1BA,QAEA,OACE,UAAC,IAAD,YACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAW3G,GAAG,yBAAyBC,GAAG,yBAE5C,UAAC,KAAD,CAAakE,WAAS,EAAtB,WACE,SAAC,IAAD,CACEnE,GAAG,6HACHC,GAAG,yGACF,QAGL,SAAC,IAAD,CAAOvB,UAAU,kBAAkB6J,MAAM,SAAzC,SACGF,EAAU5F,KAAI,WAAmB+F,GAAW,IAA3B3B,EAA0B,EAA1BA,SAAU5B,EAAgB,EAAhBA,GAC1B,OACE,mBAEEvG,UAAU,4BACVgC,QAAS,kBAAM4H,EAAiB,CAAEG,WAAYxD,KAC9CpC,SAAU4B,EAJZ,UAME,SAAC,KAAD,CAAMpG,OAAQqK,EAAAA,GAAQF,GAAQ/J,aAAW,EAACC,UAAU,SAApD,SACGmI,KANE5B,SAab,SAAC8B,EAAD,CAAUC,SAAUA,EAAUG,mBAAoBa,KAElD,SAACtB,EAAD,CAAkBC,QAASA,OC6BjC,MA1EA,YAAuE,IAAD,UAApCvB,EAAoC,EAApCA,MAAOb,EAA6B,EAA7BA,QAASc,EAAoB,EAApBA,KACxC1F,GAAcC,EAAAA,EAAAA,MAAdD,UACA8E,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA+Ba,EAAAA,EAAAA,IAAQ,GAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACd,GAAoCmD,EAAAA,EAAAA,IAAoB,YAAavD,EAAOb,GAA5E,eAAOqE,EAAP,KAAgBV,EAAhB,KACA,GAA0CS,EAAAA,EAAAA,IAAoB,eAAgBvD,EAAOb,GAArF,eAAO0D,EAAP,KAAmBY,EAAnB,KACMP,ELID,WACL,IAAQ3I,GAAcC,EAAAA,EAAAA,MAAdD,UAEF8F,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,kBACZC,eAAgBnG,EAAU,+BAAgC,mCAC1DoG,aAAcpG,EACZ,iEACA,0EAIJ,OAAO,SAACqG,GACNP,GAAQ,QACNQ,OAAQ,mBACLD,KKpBkB8C,GAEnBC,GAAa,iBAAC3D,QAAD,IAACA,GAAD,UAACA,EAAOoB,aAAR,aAAC,EAAcwC,aAAf,QAAwB,IAAxB,iBAA8B5D,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAOoB,aAArC,aAA8B,EAAcC,eAA5C,QAAuD,GAAK,GAAK,GAEpF,OACE,SAAC,KAAD,CACEpB,KAAMA,EACNc,MAAK,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAOe,MACdC,aAAcC,EAAAA,EAAAA,kBAAAA,mBACd3H,UAAU,UAJZ,UAME,UAAC,IAAD,CAAc6G,KAAMA,EAAMhB,QAASA,EAAnC,WAEE,SAAC,KAAD,CACEhF,KAAK,gBACLiB,MAAOb,EAAU,4BAAuB,sBACxC2G,QAASd,EACTe,aAAY,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOoB,aAAT,aAAE,EAAcC,QAJ9B,UAME,SAAC,KAAD,WACE,SAAC,IAAD,CACEzG,IACE,4EAC0C,SAAC,KAAD,CAAY+E,OAAQ6D,IAD9D,mCAGE,kBAHF,0BAIuBG,EAJvB,0BAIwD,SAAC,KAAD,CAAYhE,OAAQkD,IAJ5E,iCAQFhI,IACE,gEAC8B,SAAC,KAAD,CAAY8E,OAAQ6D,IADlD,oDAGE,kBAHF,6BAI6BG,EAJ7B,mBAIuD,SAAC,KAAD,CAAYhE,OAAQkD,IAJ3E,gCAaR,UAAC,KAAD,CAAQrE,YAAaiF,EAArB,WACE,SAACT,EAAD,CACE3D,UAAWA,EACX6D,iBAAkBA,EAClBN,6BAA8B5C,EAAM4C,6BACpCK,UAAWjD,EAAMiD,UACjBrB,SAAU5B,EAAM4B,SAChBL,QAASvB,EAAMuB,WAGjB,SAACoB,EAAD,CACEG,iBAAkBA,EAClBjB,YAAa7B,EAAM6B,YACnBe,6BAA8B5C,EAAM4C,6BACpCC,WAAYA,EACZjB,SAAU5B,EAAM4B,SAChBL,QAASvB,EAAMuB,mB,6BCtDpB,SAASsC,EAAT,GAUmB,IATxBjC,EASuB,EATvBA,SACAgB,EAQuB,EARvBA,6BACAf,EAOuB,EAPvBA,YACAiB,EAMuB,EANvBA,iBACAU,EAKuB,EALvBA,QACAnE,EAIuB,EAJvBA,UACAyE,EAGuB,EAHvBA,SACArC,EAEuB,EAFvBA,SACAF,EACuB,EADvBA,QAEQhH,GAAcC,EAAAA,EAAAA,MAAdD,UAER,OACE,UAAC,IAAD,YACE,UAAC,KAAD,CAAOwJ,MAAO,EAAd,WACE,SAAC,IAAD,CACEnJ,IACE,+CACa,SAAC,KAAD,CAAY+E,OAAQ6D,IADjC,iBAIF3I,IACE,4CACU,SAAC,KAAD,CAAY8E,OAAQ6D,IAD9B,yBAKJ,mBACA,iBAAKlK,UAAU,4BAAf,UACGwJ,GACC,UAAC,IAAD,CACE3I,KAAK,OACLf,KAAK,QACLkC,QAAS,kBAAMwI,EAAS,CAAEE,WAAW,KACrC1K,UAAU,0EACVmE,UAAWqF,GAAoBzD,EALjC,WAOE,iBAAM/F,UAAU,oCAAhB,UACE,SAAC,IAAD,CAAWsB,GAAG,SAAMC,GAAG,UAEzB,SAAC,IAAD,CACEzB,KAAK,QACLmE,MAAM,SAAC,yBAAD,IACNzD,MAAO,CAAEE,gBAAiB,eAC1BiE,MAAM,eAIV,oBAGF,SAAC,KAAD,CAAMhF,OAAQsB,EAAU,gBAAiB,sBAAuBlB,aAAW,EAACC,UAAU,SAAtF,SACGmI,EAASA,WAEXqB,GACC,UAAC,IAAD,CACE3I,KAAK,OACLf,KAAK,QACLkC,QAAS,kBAAMwI,EAAS,CAAEE,WAAW,KACrC1K,UAAU,0EACVmE,UAAWqF,GAAoBzD,EALjC,WAOE,SAAC,IAAD,CACEjG,KAAK,QACLmE,MAAM,SAAC,yBAAD,IACNzD,MAAO,CAAEE,gBAAiB,eAC1BiE,MAAM,YAER,iBAAM3E,UAAU,oCAAhB,UACE,SAAC,IAAD,CAAWsB,GAAG,MAAMC,GAAG,cAI3B,0BAKN,SAAC8G,EAAD,CACEC,SAAUA,EACVC,YAAaiB,EAAmBjB,OAAckB,EAC9ChB,mBAAoBa,KAGtB,SAACtB,EAAD,CAAkBC,QAASA,OCvCjC,MA5DA,YAAiE,IAAD,EAApCvB,EAAoC,EAApCA,MAAOb,EAA6B,EAA7BA,QAASc,EAAoB,EAApBA,KAClC1F,GAAcC,EAAAA,EAAAA,MAAdD,UACA8E,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA+Ba,EAAAA,EAAAA,IAAQ,GAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACd,GAAoCmD,EAAAA,EAAAA,IAAoB,YAAavD,EAAOb,GAA5E,eAAOqE,EAAP,KAAgBV,EAAhB,KAEMgB,EP2BD,WACL,IAAQvJ,GAAcC,EAAAA,EAAAA,MAAdD,UAEF8F,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,mBACZC,eAAgBnG,EAAU,iCAAkC,oCAC5DoG,aAAcpG,EACZ,uEACA,8EAIJ,OAAO,SAACqG,GACNP,GAAQ,QACNQ,OAAQ,kBACLD,KO3CUqD,GAEjB,OACE,SAAC,KAAD,CACEhE,KAAMA,EACNc,MAAK,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAOe,MACdC,aAAcC,EAAAA,EAAAA,kBAAAA,YACd3H,UAAU,UAJZ,UAME,UAAC,IAAD,CAAc6G,KAAMA,EAAMhB,QAASA,EAAnC,WAEE,SAAC,KAAD,CACEhF,KAAK,MACLiB,MAAOb,EAAU,iBAAkB,eACnC2G,QAASd,EACTe,aAAY,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOoB,aAAT,aAAE,EAAcC,QAJ9B,UAME,SAAC,KAAD,WACE,SAAC,IAAD,CACEzG,IACE,wFAEE,mBACA,SAAC,KAAD,CAAY+E,OAAQ6D,IAHtB,gEAMF3I,IACE,qFAEE,mBACA,SAAC,KAAD,CAAY8E,OAAQ6D,IAHtB,kEAWR,SAACK,EAAD,CACEjC,SAAU5B,EAAM4B,SAChBgB,6BAA8B5C,EAAM4C,6BACpCf,YAAa7B,EAAM6B,YACnBiB,iBAAkBA,EAClBU,QAASA,EACTnE,UAAWA,EACXyE,SAAUA,EACVrC,SAAUzB,EAAMyB,SAChBF,QAASvB,EAAMuB,gB,UCpClB,SAAS2C,EAAT,GAa0B,IAZ/BtC,EAY8B,EAZ9BA,SACAgB,EAW8B,EAX9BA,6BACAb,EAU8B,EAV9BA,mBACAF,EAS8B,EAT9BA,YACAiB,EAQ8B,EAR9BA,iBACAW,EAO8B,EAP9BA,oBACAD,EAM8B,EAN9BA,QACAnE,EAK8B,EAL9BA,UACA8E,EAI8B,EAJ9BA,YACA1C,EAG8B,EAH9BA,SACAuC,EAE8B,EAF9BA,UACAzC,EAC8B,EAD9BA,QAEQhH,GAAcC,EAAAA,EAAAA,MAAdD,UAKR,OACE,UAAC,IAAD,YACE,UAAC,KAAD,CAAOwJ,MAAO,EAAd,WACE,SAAC,KAAD,CAAYpE,OAAQ6D,KACpB,SAAC,IAAD,CAAW3I,GAAG,WAAWD,GAAG,cAAe,IAC1CoJ,GACC,SAAC,IAAD,CAAWnJ,GAAG,MAAMD,GAAG,SAEvB,+BACE,SAAC,IAAD,CAAWC,GAAG,KAAKD,GAAG,aAEvB,KACH,SAAC,IAAD,CACExB,KAAK,QACLmE,KAAMyG,GAAY,SAAC,yBAAD,KAAiC,SAAC,yBAAD,IACnDlK,MAAO,CAAEE,gBAAiB,eAC1BiE,MAAM,WACL,KACH,SAAC,IAAD,CAAWpD,GAAG,kBAAkBD,GAAG,sBACnC,mBACA,SAAC,IAAD,CAAOtB,UAAU,kBAAkB6J,MAAM,SAAzC,UACE,SAAC,KAAD,CACElK,OAAQsB,EAAU,gBAAiB,sBACnCpB,MAAO6K,EAAY,QAAU,MAC7B1K,UAAU,SAHZ,SAKGmI,EAASA,gBAIfgC,IACC,UAAC,KAAD,CAAa1E,WAAS,EAAtB,WACE,SAAC,IAAD,CACEnE,GAAG,6CACHC,GAAG,2CAEL,kBACCyC,SAA0B,OAAlByE,QAAkB,IAAlBA,OAAA,EAAAA,EAAoB/F,SAAUyH,KACrC,SAAC,IAAD,CAAOnK,UAAU,kBAAkB6J,MAAM,SAAzC,UACE,SAAC,IAAD,CAAQhJ,KAAK,UAAUmB,QAzCpB,kBAAM6I,EAAY,CAAEC,UAAW,GAAIC,MAAM,KAyCJ5G,SAAU4B,EAAlD,UACE,SAAC,IAAD,CACEzE,GAAG,oDACHC,GAAG,4DAQf,SAAC8G,EAAD,CACEC,SAAUA,EACVC,YAAaiB,EAAmBjB,OAAckB,EAC9CjB,YAAa2B,EAxDQ,SAACW,GAAD,OAAuBD,EAAY,CAAEC,UAAAA,EAAWC,MAAM,UAwDnBtB,EACxDhB,mBAAkB,yBAAOA,QAAP,IAAOA,EAAAA,EAAsB,KAA7B,cAAsCa,QAAtC,IAAsCA,EAAAA,EAAgC,QAG1F,SAACtB,EAAD,CAAkBC,QAASA,OCzBjC,MAtEA,YAA2D,IAAD,EAApCvB,EAAoC,EAApCA,MAAOb,EAA6B,EAA7BA,QAASc,EAAoB,EAApBA,KAC5B1F,GAAcC,EAAAA,EAAAA,MAAdD,UACA8E,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA+Ba,EAAAA,EAAAA,IAAQ,GAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAEd,GAAoCmD,EAAAA,EAAAA,IAAoB,YAAavD,EAAOb,GAA5E,eAAOqE,EAAP,KAAgBV,EAAhB,KACA,GAA0CS,EAAAA,EAAAA,IAAoB,eAAgBvD,EAAOb,GAArF,eAAO0D,EAAP,KAAmBY,EAAnB,KAEMU,ETgDD,WACL,IAAQ5J,GAAcC,EAAAA,EAAAA,MAAdD,UAEF8F,GAAUC,EAAAA,EAAAA,IAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,oBACZC,eAAgBnG,EAAU,iCAAkC,0CAC5DoG,aAAcpG,EACZ,qEACA,8EAIJ,OAAO,SAACqG,GACNP,GAAQ,QACNQ,OAAQ,qBACLD,KShEa0D,GAEpB,OACE,SAAC,KAAD,CACErE,KAAMA,EACNc,MAAK,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAOe,MACdC,aAAcC,EAAAA,EAAAA,kBAAAA,MACd3H,UAAU,UAJZ,UAME,UAAC,IAAD,CAAc6G,KAAMA,EAAMhB,QAASA,EAAnC,WAEE,SAAC,KAAD,CACEhF,KAAK,MACLiB,MAAOb,EAAU,aAAc,SAC/B2G,QAASd,EACTe,aAAY,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOoB,aAAT,aAAE,EAAcC,QAJ9B,UAME,SAAC,KAAD,WACE,SAAC,IAAD,CACEzG,IACE,mPAIE,mBACA,SAAC,KAAD,CAAY+E,OAAQkD,EAAY9C,aAAW,IAL7C,yDASFlF,IACE,mPAIE,mBACA,SAAC,KAAD,CAAY8E,OAAQkD,IALtB,4DAaR,SAACqB,EAAD,CACEtC,SAAU5B,EAAM4B,SAChBgB,6BAA8B5C,EAAM4C,6BACpCf,YAAa7B,EAAM6B,YACnBiB,iBAAkBA,EAClBU,QAASA,EACTnE,UAAWA,EACX8E,YAAaA,EACb1C,SAAUzB,EAAMyB,SAChBM,mBAAoB/B,EAAM+B,mBAC1B0B,oBAAqBA,EACrBO,UAAWhE,EAAMgE,UACjBzC,QAASvB,EAAMuB,gB,UCtBzB,MAzCA,YAAqD,IAAD,IAA3BvB,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAC9B,GAAgCzF,EAAAA,EAAAA,MAAxBwH,EAAR,EAAQA,SAAUzH,EAAlB,EAAkBA,UAEZ0E,EAA+B,QAAlBe,EAAMuE,QAEzB,OACE,UAAC,IAAD,CACEtE,KAAMA,EACND,MAAOA,EACPwE,iBAAkBvF,EAAa,WAAa,YAC5CwF,qBAAsB,GACtBC,kBACEzF,EACI1E,EAAU,aAAc,aACxBA,EAAU,uBAAwB,kBAExCoK,qBAAqB,SAAC3F,EAAD,CAAqBC,WAAYA,IAVxD,WAYE,UAAC,KAAD,CAAaF,WAAS,EAAtB,WACE,SAAC,IAAD,CACEnE,IAAI,uEAA0BoF,EAAM4E,kBAAhC,QAA8C,IAA9C,aACJ/J,IAAI,0EAAgCmF,EAAM4E,kBAAtC,QAAoD,IAApD,gBAEN,mBACA,SAAC,IAAD,CAAWhK,GAAG,mBAAmBC,GAAG,0BAEpC,iBAAKvB,UAAU,4BAAf,WACE,SAAC,KAAD,CACEqC,QAASqE,EAAM6B,YAAYhC,GAC3BvG,UAAU,kCACVsC,UAAW,OAEb,gBAAKtC,UAAU,iCAAf,SAAiD0G,EAAM6B,YAAYU,KAAKP,YAI5E,SAACV,EAAD,CAAkBC,QAASvB,EAAMuB,cCDvC,MAjCA,YAA4D,IAAzBsD,EAAwB,EAAxBA,OAwBjC,OACE,SAAC,IAAD,CACEA,OAAQA,EACRC,eAAgBC,EAAAA,GAAAA,kBAChBC,mBA3BJ,SAA4BjE,GAC1B,OAAQA,GACN,KAAKE,EAAAA,EAAAA,QAAAA,MACH,OAAOgE,EAAAA,GACT,KAAKhE,EAAAA,EAAAA,QAAAA,MACH,OAAOiE,EAAAA,GACT,KAAKjE,EAAAA,EAAAA,QAAAA,MACH,OAAOkE,EAAAA,GACT,KAAKlE,EAAAA,EAAAA,kBAAAA,kBACH,OAAOmE,EACT,KAAKnE,EAAAA,EAAAA,kBAAAA,mBACH,OAAOoE,EACT,KAAKpE,EAAAA,EAAAA,kBAAAA,YACH,OAAOqE,EACT,KAAKrE,EAAAA,EAAAA,kBAAAA,MACH,OAAOsE,EACT,KAAKtE,EAAAA,EAAAA,QAAAA,UACH,OAAOuE,EACT,QACE,OAAOC,EAAAA,Q,4EC/Bf,EADyB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,8LAAiM,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,8IAAkJ,KAAQ,cAAe,MAAS,Y,UCMhjBjI,EAAqB,SAA4B/B,EAAOiK,GAC1D,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,GAAIpK,GAAQ,GAAI,CAC5FiK,IAAKA,EACLnI,KAAMuI,MAIVtI,EAAmBuI,YAAc,qBACjC,MAA4BJ,EAAAA,WAAiBnI,I,6ECb7C,EADuB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,6LAAgM,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,oLAAwL,KAAQ,YAAa,MAAS,Y,UCMjlBU,EAAmB,SAA0BzC,EAAOiK,GACtD,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,GAAIpK,GAAQ,GAAI,CAC5FiK,IAAKA,EACLnI,KAAMyI,MAIV9H,EAAiB6H,YAAc,mBAC/B,MAA4BJ,EAAAA,WAAiBzH,I","sources":["components/cards/Card.tsx","components/cards/FloatingHand.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageBlurButtonContainer.tsx","components/cards/ImageCard.tsx","components/cards/ImageCardHand.tsx","components/cards/ImageCardBack.tsx","components/cards/ImageCardPreloadHand.tsx","components/cards/ImageCardSelectButton.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/testemunha-ocular/components/TextBlobs.tsx","games/testemunha-ocular/StepWitnessSelection.tsx","games/testemunha-ocular/PhaseWitnessSelection.tsx","games/testemunha-ocular/utils/api-requests.ts","games/testemunha-ocular/components/QuestionsHistory.tsx","games/testemunha-ocular/components/Suspects.tsx","games/testemunha-ocular/StepQuestionWaiting.tsx","games/testemunha-ocular/StepSelectQuestion.tsx","games/testemunha-ocular/PhaseQuestionSelection.tsx","games/testemunha-ocular/StepQuestioning.tsx","games/testemunha-ocular/PhaseQuestioning.tsx","games/testemunha-ocular/StepSuspectElimination.tsx","games/testemunha-ocular/PhaseTrial.tsx","games/testemunha-ocular/PhaseGameOver.tsx","games/testemunha-ocular/SessionTestemunhaOcular.tsx","../node_modules/@ant-design/icons-svg/es/asn/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/DownSquareOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n\ntype CardProps = {\n  children: any;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype FloatingHandProps = {\n  children: any;\n  type?: 'hand' | 'stats';\n  subtitle?: any;\n};\n\nexport function FloatingHand({ children, subtitle = '', type = 'hand' }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n      >\n        <span className=\"floating-hand__label\">\n          <AvatarIcon\n            type={type === 'hand' ? 'hand-of-cards' : 'user-stats'}\n            size={isExpanded ? 40 : 60}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <Translate pt=\"Passe o mouse para expandir \" en=\"Hover to expand \" />\n          {subtitle}\n        </span>\n        {children}\n      </div>\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageBlurButtonProps = {\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n\ntype ImageBlurButtonContainerProps = {\n  cardId: string;\n  className?: string;\n  children: any;\n  [key: string]: any;\n};\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  className,\n  children,\n  ...props\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...props}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardProps = {\n  imageId: string;\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number;\n  className?: string;\n  preview?: Boolean;\n};\nexport const ImageCard = ({\n  imageId,\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  preview = true,\n}: ImageCardProps) => {\n  const { shouldBeBlurred } = useBlurCards();\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = shouldBeBlurred(imageId);\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          preview && !isBlurred\n            ? {\n                maskClassName: `${baseClass}__preview-mask`,\n              }\n            : false\n        }\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Components\nimport { ImageBlurButton, ImageCard } from '.';\n\ntype ImageCardHandProps = {\n  hand: string[];\n  onSelectCard?: GenericFunction;\n  selectButtonLabel?: string;\n  className?: string;\n  selectButtonClass?: string;\n  sizeRatio?: number;\n  cardSize?: number;\n  minCardSize?: number;\n  disabledSelectButton?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonLabel,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n}: ImageCardHandProps) {\n  const { translate } = useLanguage();\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(sizeRatio, 32, minCardSize);\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div key={`hand-${cardId}`} className=\"image-card-hand__card-container\">\n              {Boolean(onSelectCard) && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  className={selectButtonClass}\n                  onClick={() => onSelectCard!(cardId)}\n                  size=\"small\"\n                  disabled={disabledSelectButton}\n                >\n                  {translate('Selecionar', 'Select', selectButtonLabel)}\n                </Button>\n              )}\n              <ImageCard imageId={cardId} cardWidth={cardSize || cardWidth} />\n              <ImageBlurButton cardId={cardId} />\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Resources\nimport placeholder from 'assets/images/placeholder.jpg';\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardBackProps = {\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number | string;\n  className?: string;\n  previewImageId?: string;\n};\n\nexport const ImageCardBack = ({\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  previewImageId,\n}: ImageCardBackProps) => {\n  const baseClass = 'image-card-back';\n  const { shouldBeBlurred } = useBlurCards();\n  const isBlurred = shouldBeBlurred(previewImageId);\n  const imageURL = (previewImageId ?? '').replace(/-/g, '/');\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <Image\n        width={cardWidth}\n        src={placeholder}\n        preview={\n          Boolean(previewImageId)\n            ? !isBlurred\n              ? {\n                  maskClassName: 'image-card__preview-mask',\n                  src: `${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`,\n                }\n              : false\n            : false\n        }\n      />\n    </div>\n  );\n};\n","// Components\nimport { ImageCard } from './ImageCard';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","type ViewProps = {\n  children: any;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","type ViewIfProps = {\n  children: any;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\nexport function WitnessRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt=\"Em Testemunha Ocular, um jogador será a testemunha que presenciou um crime desconhecido. Essa testemunha responderá perguntas de sim-ou-não para ajudar os outros jogadores, detetives, a liberarem pelo menos um dos 12 suspeitos em cada rodada. Você quer ser a testemunha?\"\n        en=\"In Eye Witness, a player will be the witness who witnessed an unknown crime. This witness will answer yes-or-no questions to help the other players, detective, to release at least one of the 12 suspects each round. Do you want to be the witness?\"\n      />\n    </Instruction>\n  );\n}\n\ntype AnnouncementContentProps = {\n  didUserWin: boolean;\n};\n\nexport function AnnouncementContent({ didUserWin }: AnnouncementContentProps) {\n  return didUserWin ? (\n    <Instruction>\n      <Translate\n        pt=\"O criminoso foi capturado e preso e vai morrer na cadeira elétrica! Obrigado pelo seu serviço e dedicação nesse caso!\"\n        en=\"The perpetrator was captured, arrested, and will be executed by the electric chair! Thank you for your service!\"\n      />\n    </Instruction>\n  ) : (\n    <Instruction>\n      <Translate\n        pt=\"O criminoso não foi capturado. Tudo por conta da sua investigação porca. Ele(a) saiu pelo mundo a fora cometendo mais crimes. Saiu até nos jornais!\"\n        en=\"The perpetrator got away. Thanks to you and your lousy investigation. Now they are out and about committing more crimes. It was even on the news!\"\n      />\n    </Instruction>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLoading, useGlobalState } from 'hooks';\n// Components\nimport { AvatarCard, AvatarIcon } from 'components/avatars';\nimport { TransparentButton } from 'components/buttons';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { WitnessRules } from './components/TextBlobs';\n\ntype StepWitnessSelectionProps = {\n  players: GamePlayers;\n  onWitnessButtonClick: GenericFunction;\n};\n\nexport function StepWitnessSelection({ players, onWitnessButtonClick }: StepWitnessSelectionProps) {\n  const { isLoading } = useLoading();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  return (\n    <Step key={1}>\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" />\n        <br />\n        <Translate pt=\"Quem quer ser a testemunha ocular?\" en=\"Who wants to be the eye witness?\" />\n      </Title>\n\n      <WitnessRules />\n\n      <Instruction contained>\n        <Space>\n          {Object.values(players).map((player) => {\n            if (isAdmin) {\n              return (\n                <TransparentButton\n                  key={`p-bt-${player.id}`}\n                  disabled={isLoading}\n                  onClick={() => onWitnessButtonClick({ witnessId: player.id })}\n                >\n                  <AvatarCard key={`p-a-${player.id}`} player={player} withName addressUser />\n                </TransparentButton>\n              );\n            }\n\n            return <AvatarCard key={`p-a-${player.id}`} player={player} withName addressUser />;\n          })}\n        </Space>\n      </Instruction>\n\n      <Instruction>\n        (\n        <Translate pt=\"O administrator selecionará a testemunha\" en=\"The VIP will select the witness\" />)\n      </Instruction>\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useStep } from 'hooks';\nimport { useOnSelectWitnessAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepWitnessSelection } from './StepWitnessSelection';\n\nfunction PhaseWitnessSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep(0);\n\n  const onWitnessButtonClick = useOnSelectWitnessAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.WITNESS_SELECTION}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"crime-scene\"\n          title={translate('O Caso', 'The Case')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Um crime horrível aconteceu. Tão horrível quem não consigo nem explicar e nem podemos contar\n                  com a ciência forense para resolvê-lo. Portanto, só há uma pessoa que pode nos ajudar agora:\n                  uma testemunha ocular...\n                </>\n              }\n              en={\n                <>\n                  A horrible crime has happened. So horrible that I can't even explain, neither can't rely on\n                  forensics and science to solve it. So there's only one person that could help us now: An eye\n                  witness...\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepWitnessSelection players={players} onWitnessButtonClick={onWitnessButtonClick} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWitnessSelection;\n","import { TESTEMUNHA_OCULAR_API } from 'services/adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSelectWitnessAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'select-witness',\n    successMessage: translate('Testemunha enviada com sucesso', 'Witness submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar selecionar a testemunha',\n      'Oops, the application found an error while trying to submit the witness'\n    ),\n  });\n\n  return (payload: SelectWitnessPayload) => {\n    request({\n      action: 'SELECT_WITNESS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSelectQuestionAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'select-question',\n    successMessage: translate('Pergunta enviada com sucesso', 'Question submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar pergunta',\n      'Oops, the application found an error while trying to submit question'\n    ),\n  });\n\n  return (payload: SelectQuestionPayload) => {\n    request({\n      action: 'SELECT_QUESTION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitTestimonyAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'submit-testimony',\n    successMessage: translate('Testemunho enviada com sucesso', 'Testimony submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu testemunho',\n      'Oops, the application found an error while trying to send your testimony'\n    ),\n  });\n\n  return (payload: SubmitTestimonyPayload) => {\n    request({\n      action: 'GIVE_TESTIMONY',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnEliminateSuspectAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'eliminate-suspect',\n    successMessage: translate('Suspeito eliminado com sucesso', 'Suspect release submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar eliminar o suspeito',\n      'Oops, the application found an error while trying to release the suspect'\n    ),\n  });\n\n  return (payload: EliminatePayload) => {\n    request({\n      action: 'ELIMINATE_SUSPECT',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { CollapsibleRule } from 'components/rules';\n\ntype QuestionsHistoryProps = {\n  history: THistoryEntry[];\n};\n\nexport function QuestionsHistory({ history }: QuestionsHistoryProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <CollapsibleRule title={translate('Respostas Anteriores', 'Previous Answers')}>\n      <ol>\n        {history.map((entry) => (\n          <li key={`history-entry-${entry.id}`} className=\"t-history__entry\">\n            <span className=\"t-history__question\">{entry.question}</span>\n            {entry.answer ? (\n              <Tooltip title={translate('Sim', 'Yes')} className=\"t-history__icon\">\n                <AvatarIcon type=\"speech-bubble-accepted\" size=\"small\" />\n              </Tooltip>\n            ) : (\n              <Tooltip title={translate('Não', 'No')} className=\"t-history__icon\">\n                <AvatarIcon type=\"speech-bubble-declined\" size=\"small\" />\n              </Tooltip>\n            )}\n          </li>\n        ))}\n      </ol>\n    </CollapsibleRule>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Popconfirm } from 'antd';\n// Hooks\nimport { useDimensions, useLanguage, useLoading } from 'hooks';\n// Components\nimport { ImageCard } from 'components/cards';\n\ntype SuspectsProps = {\n  suspects: Suspect[];\n  perpetrator?: Suspect;\n  onCardClick?: GenericFunction;\n  eliminatedSuspects?: string[];\n};\n\nexport function Suspects({ suspects, perpetrator, onCardClick, eliminatedSuspects = [] }: SuspectsProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [width] = useDimensions();\n\n  const cardWidth = Math.floor(width / 7);\n\n  if (onCardClick) {\n    return (\n      <div className=\"t-suspects-table\">\n        {suspects.map((suspect) => {\n          const wasEliminated = eliminatedSuspects.includes(suspect.id);\n          const name = suspect.name[language];\n\n          return (\n            <Popconfirm\n              key={suspect.id}\n              title={translate(\n                `Tem certeza que quer liberar ${name}?`,\n                `Are you sure you want to release ${name}?`\n              )}\n              onConfirm={() => onCardClick(suspect.id)}\n              okText={translate('Sim', 'Yes')}\n              cancelText={translate('Não', 'No')}\n              disabled={wasEliminated || isLoading}\n            >\n              <button\n                className=\"t-suspects-table__suspect t-suspects-table__suspect-button\"\n                disabled={wasEliminated || isLoading}\n              >\n                <ImageCard\n                  imageId={wasEliminated ? 'us-00' : suspect.id}\n                  className={clsx(\n                    't-suspects-table__suspect-image',\n                    perpetrator?.id === suspect.id && 't-suspects-table__suspect-image--active',\n                    wasEliminated && 't-suspects-table__suspect-image--disabled'\n                  )}\n                  cardWidth={cardWidth}\n                  preview={false}\n                />\n                {!wasEliminated && <div className=\"t-suspects-table__suspect-name\">{name}</div>}\n              </button>\n            </Popconfirm>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"t-suspects-table\">\n      {suspects.map((suspect) => {\n        const wasEliminated = eliminatedSuspects.includes(suspect.id);\n        return (\n          <div className=\"t-suspects-table__suspect\" key={suspect.id}>\n            <ImageCard\n              imageId={wasEliminated ? 'us-00' : suspect.id}\n              className={clsx(\n                't-suspects-table__suspect-image',\n                perpetrator?.id === suspect.id && 't-suspects-table__suspect-image--active'\n              )}\n              cardWidth={cardWidth}\n            />\n            {!wasEliminated && <div className=\"t-suspects-table__suspect-name\">{suspect.name[language]}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Components\n\nimport { AvatarIcon, AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { QuestionsHistory } from './components/QuestionsHistory';\nimport { Suspects } from './components/Suspects';\n\ntype StepQuestionWaitingProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  perpetrator: Suspect;\n  questioner: GamePlayer;\n  isUserTheWitness: boolean;\n  history: THistoryEntry[];\n};\n\nexport function StepQuestionWaiting({\n  suspects,\n  previouslyEliminatedSuspects,\n  perpetrator,\n  questioner,\n  isUserTheWitness,\n  history,\n}: StepQuestionWaitingProps) {\n  return (\n    <Step>\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" />\n        <br />\n        <Translate pt={<>Examine os suspeitos</>} en={<>Examine the suspects</>} />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={questioner} /> está escolhendo uma pergunta para essa rodada.\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={questioner} /> is picking a question for this round.\n            </>\n          }\n        />{' '}\n        {isUserTheWitness && (\n          <Translate\n            pt=\"O criminoso que você viu está marcado com borda amarela\"\n            en=\"The criminal you saw is highlighted in yellow\"\n          />\n        )}\n      </Instruction>\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        eliminatedSuspects={previouslyEliminatedSuspects}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\n\nimport { Suspects } from './components/Suspects';\nimport { QuestionsHistory } from './components/QuestionsHistory';\nimport { Space } from 'antd';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\n\ntype StepSelectQuestionProps = {\n  questions: TQuestion[];\n  onSelectQuestion: GenericFunction;\n  isLoading: boolean;\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  history: THistoryEntry[];\n};\n\nexport function StepSelectQuestion({\n  questions,\n  onSelectQuestion,\n  isLoading,\n  suspects,\n  previouslyEliminatedSuspects,\n  history,\n}: StepSelectQuestionProps) {\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Selecione uma pergunta\" en=\"Select a question\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"A testemunha responderá a pergunta sobre o  sobre criminoso. A pergunta que você não escolher será descartada.\"\n          en=\"The witness will answer the question about the perpetrator. The unchosen question will be discarded.\"\n        />{' '}\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        {questions.map(({ question, id }, index) => {\n          return (\n            <button\n              key={id}\n              className=\"t-select-question__button\"\n              onClick={() => onSelectQuestion({ questionId: id })}\n              disabled={isLoading}\n            >\n              <Card header={LETTERS[index]} randomColor className=\"t-card\">\n                {question}\n              </Card>\n            </button>\n          );\n        })}\n      </Space>\n\n      <Suspects suspects={suspects} eliminatedSuspects={previouslyEliminatedSuspects} />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage, useLoading, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSelectQuestionAPIRequest } from './utils/api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { ViewOr } from 'components/views';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepQuestionWaiting } from './StepQuestionWaiting';\nimport { StepSelectQuestion } from './StepSelectQuestion';\n\nfunction PhaseQuestionSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n  const [questioner, isUserTheQuestioner] = useWhichPlayerIsThe('questionerId', state, players);\n  const onSelectQuestion = useOnSelectQuestionAPIRequest();\n\n  const roundsLeft = (state?.round?.total ?? 0) - (state?.round?.current ?? 0) + 1 || 11;\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.QUESTION_SELECTION}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"investigation\"\n          title={translate('Seleção da Pergunta', 'Question Selection')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora que encontramos nossa testemunha (<AvatarName player={witness} />) é hora de\n                  questioná-la.\n                  <br />\n                  Só temos tempo para {roundsLeft} perguntas. Portanto, <AvatarName player={questioner} />,\n                  escolha a pergunta certa.\n                </>\n              }\n              en={\n                <>\n                  Now that we have a Witness (<AvatarName player={witness} />\n                  ), it's time to choose the question to ask them.\n                  <br />\n                  We can only have time for {roundsLeft} questions. So <AvatarName player={questioner} />,\n                  choose a question\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <ViewOr orCondition={isUserTheQuestioner}>\n          <StepSelectQuestion\n            isLoading={isLoading}\n            onSelectQuestion={onSelectQuestion}\n            previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n            questions={state.questions}\n            suspects={state.suspects}\n            history={state.history}\n          />\n\n          <StepQuestionWaiting\n            isUserTheWitness={isUserTheWitness}\n            perpetrator={state.perpetrator}\n            previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n            questioner={questioner}\n            suspects={state.suspects}\n            history={state.history}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseQuestionSelection;\n","// Ant Design Resources\nimport { Avatar, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\n\nimport { Suspects } from './components/Suspects';\nimport { QuestionsHistory } from './components/QuestionsHistory';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Icons } from 'components/icons';\nimport { Card } from 'components/cards';\n\ntype StepQuestioningProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  perpetrator: Suspect;\n  isUserTheWitness: boolean;\n  witness: GamePlayer;\n  isLoading: boolean;\n  onAnswer: GenericFunction;\n  question: GamePlayer;\n  history: THistoryEntry[];\n};\n\nexport function StepQuestioning({\n  suspects,\n  previouslyEliminatedSuspects,\n  perpetrator,\n  isUserTheWitness,\n  witness,\n  isLoading,\n  onAnswer,\n  question,\n  history,\n}: StepQuestioningProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <Step>\n      <Title level={3}>\n        <Translate\n          pt={\n            <>\n              Testemunha <AvatarName player={witness} />, responda:\n            </>\n          }\n          en={\n            <>\n              Witness <AvatarName player={witness} />, please answer:\n            </>\n          }\n        />\n        <br />\n        <div className=\"t-questioning-answer-grid\">\n          {isUserTheWitness ? (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={() => onAnswer({ testimony: false })}\n              className=\"t-questioning-answer-grid__button t-questioning-answer-grid__button--no\"\n              disabled={!isUserTheWitness || isLoading}\n            >\n              <span className=\"t-questioning-answer-grid__answer\">\n                <Translate pt=\"Não\" en=\"No\" />\n              </span>\n              <Avatar\n                size=\"large\"\n                icon={<Icons.SpeechBubbleDeclined />}\n                style={{ backgroundColor: 'transparent' }}\n                shape=\"square\"\n              />\n            </Button>\n          ) : (\n            <div></div>\n          )}\n\n          <Card header={translate('O suspeito...', 'The perpetrator...')} randomColor className=\"t-card\">\n            {question.question}\n          </Card>\n          {isUserTheWitness ? (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={() => onAnswer({ testimony: true })}\n              className=\"t-questioning-answer-grid__button t-questioning-answer-grid__button--no\"\n              disabled={!isUserTheWitness || isLoading}\n            >\n              <Avatar\n                size=\"large\"\n                icon={<Icons.SpeechBubbleAccepted />}\n                style={{ backgroundColor: 'transparent' }}\n                shape=\"square\"\n              />\n              <span className=\"t-questioning-answer-grid__answer\">\n                <Translate pt=\"Sim\" en=\"Yes\" />\n              </span>\n            </Button>\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </Title>\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        eliminatedSuspects={previouslyEliminatedSuspects}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLoading, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitTestimonyAPIRequest } from './utils/api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Instruction } from 'components/text';\nimport { StepQuestioning } from './StepQuestioning';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\n\nfunction PhaseQuestioning({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onAnswer = useOnSubmitTestimonyAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.QUESTIONING}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"eye\"\n          title={translate('Questionamento', 'Questioning')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Nossa testemunha só sabe julgar por aparência.\n                  <br />\n                  <AvatarName player={witness} />, é hora de nos ajudar a pegar esse criminoso hediondo.\n                </>\n              }\n              en={\n                <>\n                  Our witness loves to judge the book by its cover.\n                  <br />\n                  <AvatarName player={witness} />, it's time to help us find this heinous perpetrator!\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepQuestioning\n          suspects={state.suspects}\n          previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n          perpetrator={state.perpetrator}\n          isUserTheWitness={isUserTheWitness}\n          witness={witness}\n          isLoading={isLoading}\n          onAnswer={onAnswer}\n          question={state.question}\n          history={state.history}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseQuestioning;\n","// Ant Design Resources\nimport { Avatar, Button, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\n\nimport { Suspects } from './components/Suspects';\nimport { QuestionsHistory } from './components/QuestionsHistory';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Icons } from 'components/icons';\nimport { Card } from 'components/cards';\n\ntype StepSuspectEliminationProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  eliminatedSuspects: string[];\n  perpetrator: Suspect;\n  isUserTheWitness: boolean;\n  isUserTheQuestioner: boolean;\n  witness: GamePlayer;\n  isLoading: boolean;\n  onEliminate: GenericFunction;\n  question: GamePlayer;\n  testimony: boolean;\n  history: THistoryEntry[];\n};\n\nexport function StepSuspectElimination({\n  suspects,\n  previouslyEliminatedSuspects,\n  eliminatedSuspects,\n  perpetrator,\n  isUserTheWitness,\n  isUserTheQuestioner,\n  witness,\n  isLoading,\n  onEliminate,\n  question,\n  testimony,\n  history,\n}: StepSuspectEliminationProps) {\n  const { translate } = useLanguage();\n\n  const onEliminateSuspect = (suspectId: string) => onEliminate({ suspectId, pass: false });\n  const onPass = () => onEliminate({ suspectId: '', pass: true });\n\n  return (\n    <Step>\n      <Title level={3}>\n        <AvatarName player={witness} />\n        <Translate en=\"answered\" pt=\"respondeu\" />{' '}\n        {testimony ? (\n          <Translate en=\"YES\" pt=\"SIM\" />\n        ) : (\n          <>\n            <Translate en=\"NO\" pt=\"NÃO\" />\n          </>\n        )}{' '}\n        <Avatar\n          size=\"large\"\n          icon={testimony ? <Icons.SpeechBubbleAccepted /> : <Icons.SpeechBubbleDeclined />}\n          style={{ backgroundColor: 'transparent' }}\n          shape=\"square\"\n        />{' '}\n        <Translate en=\"to the question\" pt=\"para a pergunta:\" />\n        <br />\n        <Space className=\"space-container\" align=\"center\">\n          <Card\n            header={translate('O suspeito...', 'The perpetrator...')}\n            color={testimony ? 'green' : 'red'}\n            className=\"t-card\"\n          >\n            {question.question}\n          </Card>\n        </Space>\n      </Title>\n      {isUserTheQuestioner && (\n        <Instruction contained>\n          <Translate\n            pt=\"Clique em um suspeito para liberá-lo(a)\"\n            en=\"Click on a suspect card to release it\"\n          />\n          <br />\n          {Boolean(eliminatedSuspects?.length && isUserTheQuestioner) && (\n            <Space className=\"space-container\" align=\"center\">\n              <Button type=\"primary\" onClick={onPass} disabled={isLoading}>\n                <Translate\n                  pt=\"Parar de eliminar e ir para a próxima pergunta\"\n                  en=\"Stop releasing suspects and go to next question\"\n                />\n              </Button>\n            </Space>\n          )}\n        </Instruction>\n      )}\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        onCardClick={isUserTheQuestioner ? onEliminateSuspect : undefined}\n        eliminatedSuspects={[...(eliminatedSuspects ?? []), ...(previouslyEliminatedSuspects ?? [])]}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","import { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { useLanguage, useLoading, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { PHASES } from 'utils/phases';\n\nimport { useOnEliminateSuspectAPIRequest } from './utils/api-requests';\nimport { StepSuspectElimination } from './StepSuspectElimination';\n\nfunction PhaseTrial({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n  const [questioner, isUserTheQuestioner] = useWhichPlayerIsThe('questionerId', state, players);\n\n  const onEliminate = useOnEliminateSuspectAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.TRIAL}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"law\"\n          title={translate('Julgamento', 'Trial')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Precisamos eliminar suspeitos! Para cada pergunta, pelo menos um suspeito tem que se\n                  eliminado. Lembre-se que estamos tentando liberar testemunhas. Desvendamos o caso se o\n                  último suspeito for o criminoso!\n                  <br />\n                  <AvatarName player={questioner} addressUser /> está encarregado(a) de selecionar os\n                  inocentes.\n                </>\n              }\n              en={\n                <>\n                  We need to eliminate suspects! For each question we must eliminate at least one suspect.\n                  Remember we are trying to release witnesses. We solve the case if the last man (or woman)\n                  standing is the perpetrator!\n                  <br />\n                  <AvatarName player={questioner} /> is in charge of selecting the innocent people.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSuspectElimination\n          suspects={state.suspects}\n          previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n          perpetrator={state.perpetrator}\n          isUserTheWitness={isUserTheWitness}\n          witness={witness}\n          isLoading={isLoading}\n          onEliminate={onEliminate}\n          question={state.question}\n          eliminatedSuspects={state.eliminatedSuspects}\n          isUserTheQuestioner={isUserTheQuestioner}\n          testimony={state.testimony}\n          history={state.history}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTrial;\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\n\nimport { AnnouncementContent } from './components/TextBlobs';\nimport { QuestionsHistory } from './components/QuestionsHistory';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ImageCard } from 'components/cards';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  const { language, translate } = useLanguage();\n\n  const didUserWin = state.outcome === 'WIN';\n\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      announcementIcon={didUserWin ? 'criminal' : 'newspaper'}\n      announcementDuration={15}\n      announcementTitle={\n        didUserWin\n          ? translate('Capturado!', 'Arrested!')\n          : translate('O criminoso escapou!', 'They got away!')\n      }\n      announcementContent={<AnnouncementContent didUserWin={didUserWin} />}\n    >\n      <Instruction contained>\n        <Translate\n          pt={<>O interrogatório durou {state.groupScore ?? '?'} horas.</>}\n          en={<>The interrogation lasted for {state.groupScore ?? '?'} hours.</>}\n        />\n        <br />\n        <Translate pt=\"O criminoso era:\" en=\"The perpetrator was:\" />\n\n        <div className=\"t-suspects-table__suspect\">\n          <ImageCard\n            imageId={state.perpetrator.id}\n            className=\"t-suspects-table__suspect-image\"\n            cardWidth={150}\n          />\n          <div className=\"t-suspects-table__suspect-name\">{state.perpetrator.name[language]}</div>\n        </div>\n      </Instruction>\n\n      <QuestionsHistory history={state.history} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseWitnessSelection from './PhaseWitnessSelection';\nimport PhaseQuestionSelection from './PhaseQuestionSelection';\nimport PhaseQuestioning from './PhaseQuestioning';\nimport PhaseTrial from './PhaseTrial';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionTestemunhaOcular({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.TESTEMUNHA_OCULAR.WITNESS_SELECTION:\n        return PhaseWitnessSelection;\n      case PHASES.TESTEMUNHA_OCULAR.QUESTION_SELECTION:\n        return PhaseQuestionSelection;\n      case PHASES.TESTEMUNHA_OCULAR.QUESTIONING:\n        return PhaseQuestioning;\n      case PHASES.TESTEMUNHA_OCULAR.TRIAL:\n        return PhaseTrial;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.TESTEMUNHA_OCULAR}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionTestemunhaOcular;\n","// This icon file is generated automatically.\nvar DownSquareOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\" } }] }, \"name\": \"down-square\", \"theme\": \"outlined\" };\nexport default DownSquareOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownSquareOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownSquareOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownSquareOutlined = function DownSquareOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownSquareOutlinedSvg\n  }));\n};\n\nDownSquareOutlined.displayName = 'DownSquareOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownSquareOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\n\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","FloatingHand","subtitle","type","useState","isExpanded","setIsExpanded","translate","useLanguage","onMouseOver","onMouseLeave","alt","pt","en","ImageBlurButton","cardId","useBlurCards","blurCard","isBlurEnabled","placement","title","ghost","onClick","EyeInvisibleOutlined","ImageBlurButtonContainer","props","ImageCard","imageId","cardWidth","preview","shouldBeBlurred","fallbackName","length","imageURL","replace","isBlurred","width","src","process","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardHand","hand","onSelectCard","selectButtonLabel","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","useCardWidth","map","Boolean","icon","DownSquareOutlined","disabled","ImageCardBack","previewImageId","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","shape","UpCircleOutlined","custom","View","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","WitnessRules","contained","AnnouncementContent","didUserWin","StepWitnessSelection","players","onWitnessButtonClick","isLoading","useLoading","useGlobalState","isAdmin","Object","values","player","witnessId","id","withName","addressUser","state","info","useStep","step","goToNextStep","request","useAPICall","apiFunction","TESTEMUNHA_OCULAR_API","actionName","successMessage","errorMessage","payload","action","useOnSelectWitnessAPIRequest","phase","allowedPhase","PHASES","onClose","currentRound","round","current","QuestionsHistory","history","entry","question","answer","Suspects","suspects","perpetrator","onCardClick","eliminatedSuspects","language","useDimensions","Math","floor","suspect","wasEliminated","includes","name","onConfirm","okText","cancelText","StepQuestionWaiting","previouslyEliminatedSuspects","questioner","isUserTheWitness","undefined","StepSelectQuestion","questions","onSelectQuestion","align","index","questionId","LETTERS","useWhichPlayerIsThe","witness","isUserTheQuestioner","useOnSelectQuestionAPIRequest","roundsLeft","total","StepQuestioning","onAnswer","level","testimony","useOnSubmitTestimonyAPIRequest","StepSuspectElimination","onEliminate","suspectId","pass","useOnEliminateSuspectAPIRequest","outcome","announcementIcon","announcementDuration","announcementTitle","announcementContent","groupScore","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWitnessSelection","PhaseQuestionSelection","PhaseQuestioning","PhaseTrial","PhaseGameOver","PageError","ref","React","AntdIcon","_objectSpread","DownSquareOutlinedSvg","displayName","UpCircleOutlinedSvg"],"sourceRoot":""}