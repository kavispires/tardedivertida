{"version":3,"file":"static/js/page-dev-image-cards-relationships.f02d4d3a.chunk.js","mappings":"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","sources":["components/buttons/FixedMenuButton.tsx","components/buttons/TimedButton.tsx","components/buttons/TransparentButton.tsx","hooks/useCountdown.ts","hooks/useQueryParams.ts","pages/Dev/ImageCards/RelationshipCountTag.tsx","pages/Dev/ImageCards/Comparator.tsx","pages/Dev/ImageCards/Grouping.tsx","pages/Dev/ImageCards/ImageCardsPage.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport { ReactNode, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Button, ButtonProps, Popover } from 'antd';\n// Sass\nimport './FixedMenuButton.scss';\n\ntype FixedMenuButtonDefaultProps = {\n  /**\n   * What order it will show up in the screen\n   * 0 for rules\n   * 1 for extras (e.g. card size)\n   * 2 for extras\n   * 3 for rating\n   * -1 for admin only\n   */\n  position: 0 | 1 | 2 | 3 | -1;\n  /**\n   * The displayed icon\n   */\n  icon: ReactNode;\n  /**\n   * The optional label to follow the icon when hover\n   */\n  label?: ReactNode;\n  /**\n   * The custom class\n   */\n  className?: string;\n  /**\n   * Determine if label should be visible\n   */\n  showLabel?: boolean;\n  /**\n   * Any ant design button props\n   */\n  buttonProps?: ButtonProps;\n};\n\ninterface FixedMenuButtonPopoverProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'popover';\n  /**\n   * Content of popover, required when popover rule\n   */\n  content: ReactNode;\n  /**\n   * Guard onclick from button only\n   */\n  onClick?: never;\n  /**\n   * If popover should be open\n   */\n  open?: boolean;\n}\n\ninterface FixedMenuButtonButtonOnlyProps extends FixedMenuButtonDefaultProps {\n  /**\n   * The type of the floater\n   */\n  type: 'button';\n  /**\n   * The click function for the button\n   */\n  onClick: GenericFunction;\n  /**\n   * Guard content from popover\n   */\n  content?: never;\n  /**\n   * If popover should be open\n   */\n  open?: never;\n}\n\ntype FixedMenuButtonProps = FixedMenuButtonPopoverProps | FixedMenuButtonButtonOnlyProps;\n\n/**\n * Button position on the top left of the screen to display rules, admin button and other features\n */\nexport function FixedMenuButton({ type, position, content, className, open, ...rest }: FixedMenuButtonProps) {\n  return (\n    <div className={clsx('fixed-menu-button', `fixed-menu-button--${position}`, className)}>\n      {type === 'popover' ? (\n        <Popover placement=\"bottomLeft\" content={content} trigger=\"click\" open={open}>\n          <FixedMenuButtonContent {...rest} />\n        </Popover>\n      ) : (\n        <FixedMenuButtonContent {...rest} />\n      )}\n    </div>\n  );\n}\n\nfunction FixedMenuButtonContent({\n  icon,\n  label,\n  showLabel,\n  onClick,\n  buttonProps,\n}: Partial<FixedMenuButtonProps>) {\n  const [isActive, setActive] = useState(showLabel);\n  const hasLabel = Boolean(label);\n\n  useEffectOnce(() => {\n    setActive(showLabel);\n  });\n\n  return (\n    <Button\n      shape={hasLabel && isActive ? 'round' : 'circle'}\n      size=\"middle\"\n      onMouseOver={() => setActive(true)}\n      onMouseLeave={() => setActive(showLabel ?? false)}\n      onClick={onClick ? onClick : undefined}\n      icon={icon}\n      ghost\n      type=\"primary\"\n      {...buttonProps}\n    >\n      {isActive && hasLabel && <span className=\"fixed-menu-button__label\">{label}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, ButtonProps } from 'antd';\n// Hook and Utils\nimport { useCountdown } from 'hooks/useCountdown';\n// Sass\nimport './TimedButton.scss';\n\ninterface TimedButtonProps extends ButtonProps {\n  /**\n   * Duration to call onExpire in seconds\n   */\n  duration?: number;\n  /**\n   * Function to be called when the time expires\n   */\n  onExpire?: GenericFunction;\n  /**\n   * Flag indicating if the timer should be hidden (this cancels the onExpire function)\n   */\n  hideTimer?: boolean;\n}\n\n/**\n * Button component that triggers a function when given duration is over\n */\nexport function TimedButton({\n  duration = 10,\n  children,\n  onExpire,\n  type,\n  onClick,\n  hideTimer = false,\n  ...rest\n}: TimedButtonProps) {\n  const { timeLeft } = useCountdown({\n    duration,\n    autoStart: true,\n    onExpire,\n    disabled: hideTimer,\n  });\n\n  const timeClass = 'timed-button__time';\n\n  return (\n    <Button {...rest} type={type} onClick={onClick ?? onExpire}>\n      {children}\n      {Boolean(children && !hideTimer) && ' '}\n      {!hideTimer && <span className={clsx(timeClass, `${timeClass}--${type}`)}>{timeLeft}</span>}\n    </Button>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Sass\nimport './TransparentButton.scss';\ninterface TransparentButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The content of the button\n   */\n  children: ReactNode;\n  /**\n   * Flag indicating if the button is on its active state\n   */\n  active?: boolean;\n  /**\n   * Custom active class\n   */\n  activeClass?: string;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Behavior when the mouse hovers the button (default: scale)\n   */\n  hoverType?: 'scale' | 'sepia';\n}\n\n/**\n * Transparent button that has all the functionality of a button but no visible styling\n */\nexport const TransparentButton = ({\n  children,\n  active = false,\n  activeClass = '',\n  className = '',\n  hoverType = 'scale',\n  ...rest\n}: TransparentButtonProps) => {\n  return (\n    <button\n      className={clsx(\n        'transparent-button',\n        `transparent-button--${hoverType}`,\n        active && (activeClass || 'transparent-button--active'),\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { TimerResult, TimerSettings, useTimer } from 'react-timer-hook';\nimport { inNSeconds } from 'utils/helpers';\n\ntype SelectedTimeSettings = Omit<TimerSettings, 'expiryTimestamp'>;\n\nexport interface useCountdownSettings extends SelectedTimeSettings {\n  /**\n   * The duration of the countdown in seconds\n   */\n  duration: number;\n  /**\n   * Disable timer\n   */\n  disabled?: boolean;\n}\n\ninterface useCountdownReturnValue extends TimerResult {\n  /**\n   * Time left in total seconds (minutes + seconds)\n   */\n  timeLeft: number;\n}\n\n/**\n * Timer countdown to perform actions\n * @param settings\n * @returns\n */\nexport function useCountdown({\n  duration,\n  onExpire,\n  disabled = false,\n  ...rest\n}: useCountdownSettings): useCountdownReturnValue {\n  const timer = useTimer({\n    expiryTimestamp: inNSeconds(duration),\n    onExpire: disabled ? undefined : onExpire,\n    ...rest,\n  });\n\n  const timeLeft = timer.minutes * 60 + timer.seconds;\n\n  return {\n    ...timer,\n    timeLeft,\n  };\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  /**\n   * Adds a query param\n   * @param key - the key of the query param to add\n   * @param value - the value of the query param to add\n   */\n  const add = (key: string, value: unknown) => {\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  /**\n   * Removes a query param\n   * @param key - the key of the query param to remove\n   */\n  const remove = (key: string) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        add(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    add,\n    remove,\n    queryParams,\n  };\n}\n","import { TagsFilled } from '@ant-design/icons';\nimport { Tag } from 'antd';\n\ntype RelationshipCountTagProps = {\n  card: string[];\n};\nexport function RelationshipCountTag({ card }: RelationshipCountTagProps) {\n  const color = card.length > 10 ? 'red' : card.length > 5 ? 'blue' : card.length > 0 ? 'green' : undefined;\n  return (\n    <div>\n      <Tag color={color} icon={<TagsFilled />}>\n        {' '}\n        {card.length}\n      </Tag>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Card, Image, Layout, Space } from 'antd';\n\nimport { ImageCard } from 'components/image-cards';\n\nimport { CheckCircleFilled } from '@ant-design/icons';\n// Components\nimport './dev-image-cards.scss';\nimport { UseImageCardsRelationshipDataReturnValue, useRandomCards } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\n\ntype ComparatorProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Comparator({ query }: ComparatorProps) {\n  const cardWidth = useCardWidth(2, { containerId: 'root' });\n\n  const { data, isDirty, setDirty, isSuccess, isSaving, save } = query;\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardAId, cardA, cardBId, cardB, relate, unrelate, areRelated, onRandomCards } = useRandomCards(\n    data,\n    setDirty\n  );\n\n  return (\n    <Layout.Content className=\"dev-content\">\n      {isSaving && <div>Saving...</div>}\n      {isSuccess && !isSaving && (\n        <Space className=\"space-container\" direction=\"vertical\">\n          <Button onClick={onRandomCards}>New Random Cards</Button>\n          <Card title={`${cardAId} X ${cardBId}`} extra={areRelated && <CheckCircleFilled />}>\n            <div className=\"image-card-card\">\n              <Image.PreviewGroup>\n                <div className=\"image-card-card__image\">\n                  <ImageCard imageId={cardAId} cardWidth={cardWidth} />\n                  <RelationshipCountTag card={cardA} />\n                </div>\n                <div className=\"image-card-card__image\">\n                  <ImageCard imageId={cardBId} cardWidth={cardWidth} />\n                  <RelationshipCountTag card={cardB} />\n                </div>\n              </Image.PreviewGroup>\n            </div>\n\n            <Space className=\"image-card-categorizer-options\">\n              <Button onClick={unrelate} size=\"large\" block>\n                Unrelated\n              </Button>\n              <Button onClick={relate} size=\"large\" block type=\"primary\">\n                Related\n              </Button>\n            </Space>\n          </Card>\n\n          <Button type=\"primary\" onClick={() => save({})} disabled={!isDirty} loading={isSaving}>\n            Save\n          </Button>\n        </Space>\n      )}\n    </Layout.Content>\n  );\n}\n","// Ant Design Resources\nimport { Button, Card, FloatButton, Image, Layout, Popover, Select, Space, Switch, Tag } from 'antd';\n\nimport { ImageCard } from 'components/image-cards';\n\n// Components\nimport './dev-image-cards.scss';\nimport { UseImageCardsRelationshipDataReturnValue, useRandomGroups } from './hooks';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { RelationshipCountTag } from './RelationshipCountTag';\nimport { TransparentButton } from 'components/buttons';\nimport { useMemo, useRef, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport {\n  BarChartOutlined,\n  ExpandOutlined,\n  FileImageOutlined,\n  ForkOutlined,\n  LoadingOutlined,\n  SaveOutlined,\n  SyncOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\ntype GroupingProps = {\n  query: UseImageCardsRelationshipDataReturnValue;\n};\n\nexport function Grouping({ query }: GroupingProps) {\n  const [sampleSize, setSampleSize] = useState(15);\n  const [tagThreshold, setTagThreshold] = useState(5);\n  const [cardSize, setCardSize] = useState(120);\n  const [showIds, setShowIds] = useState(false);\n  // Get screen size and calculate how many 120px cards can fit in a row\n  const [ref, { width: containerWidth }] = useMeasure<HTMLDivElement>();\n  const cardQuantity = useMemo(() => {\n    return Math.min(Math.ceil(containerWidth / (cardSize + 16)), sampleSize);\n  }, [containerWidth, sampleSize, cardSize]);\n  const cardWidth = useCardWidth(cardQuantity + 1, { containerId: 'root', minWidth: 100 });\n\n  const { data, isDirty, setDirty, isSuccess, isSaving, save, stats } = query;\n\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  // Selects a random deck, but gives option select for a specific deck (1-10)\n  const { cardIds, cards, onSelect, selection, relate, nextSet, deselectAll, cycles, filters } =\n    useRandomGroups(data, setDirty, sampleSize, tagThreshold);\n\n  const onNextSet = () => {\n    nextSet();\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const statsContent = (\n    <ul>\n      <li>Completion: {Math.floor((stats.total * 100) / (10 * 252))}%</li>\n      <li>Total Relationships: {stats.total}</li>\n      <li>Complete: {stats.complete}</li>\n      <li>Overdone: {stats.overdone}</li>\n      <li>Single Match: {stats.single}</li>\n    </ul>\n  );\n\n  return (\n    <Layout.Content className=\"dev-content\">\n      {isSaving && <div>Saving...</div>}\n      {isSuccess && (\n        <Space className=\"space-container\" direction=\"vertical\" ref={ref}>\n          <Space wrap className=\"contained space-container\">\n            <Popover content={statsContent} title=\"Stats\" placement=\"bottom\">\n              <Button size=\"small\" icon={<BarChartOutlined />}>\n                Stats\n              </Button>\n            </Popover>\n            <span>Filters:</span>\n            <Switch\n              checkedChildren=\"Use Cycles\"\n              unCheckedChildren=\"Any Card\"\n              checked={filters.useCycles}\n              onChange={() => filters.toggleUseCycles()}\n            />\n            <Switch\n              checkedChildren=\"Show Ids\"\n              unCheckedChildren=\"No Ids\"\n              checked={showIds}\n              onChange={(c) => setShowIds(c)}\n            />\n            <Select\n              onChange={(value) => setTagThreshold(value)}\n              defaultValue={tagThreshold}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={1}>Tags: {'='} 0</Select.Option>\n              <Select.Option value={3}>Tags: {'<'} 3</Select.Option>\n              <Select.Option value={5}>Tags: {'<'} 5</Select.Option>\n              <Select.Option value={10}>Tags: {'<'} 10</Select.Option>\n              <Select.Option value={0}>Tags: Any</Select.Option>\n            </Select>\n            <Select\n              onChange={(value) => setSampleSize(value)}\n              defaultValue={sampleSize}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={9}>Cards: 9</Select.Option>\n              <Select.Option value={15}>Cards: 15</Select.Option>\n              <Select.Option value={30}>Cards: 30</Select.Option>\n              <Select.Option value={50}>Cards: 50</Select.Option>\n              <Select.Option value={100}>Cards: 100</Select.Option>\n            </Select>\n            <Select\n              onChange={(value) => setCardSize(value)}\n              defaultValue={cardSize}\n              className=\"sample-size-select\"\n              size=\"small\"\n            >\n              <Select.Option value={120}>Size: 120</Select.Option>\n              <Select.Option value={150}>Size: 150</Select.Option>\n              <Select.Option value={200}>Size: 200</Select.Option>\n              <Select.Option value={300}>Size: 300</Select.Option>\n            </Select>\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              icon={<SaveOutlined />}\n              onClick={() => save({})}\n              disabled={!isDirty}\n              loading={isSaving}\n              danger\n            >\n              Save\n            </Button>\n          </Space>\n          <Card\n            title=\"Card Relationship Matching\"\n            extra={\n              <span>\n                <FileImageOutlined /> {cycles}\n              </span>\n            }\n            className=\"image-card-categorizer-card\"\n            ref={cardRef}\n          >\n            <Image.PreviewGroup>\n              <div\n                className=\"image-cards-group\"\n                style={{ gridTemplateColumns: `repeat(${Math.max(cardQuantity, 1)}, 1fr)` }}\n              >\n                {cardIds.map((cardId, index) => {\n                  const isSelected = selection.includes(cardId);\n                  const card = cards[index];\n\n                  return (\n                    <div className=\"image-card-card__image\" key={cardId}>\n                      <TransparentButton\n                        onClick={() => onSelect(cardId)}\n                        active={isSelected}\n                        className=\"image-cards-group__button\"\n                        activeClass=\"image-cards-group__button--active\"\n                      >\n                        <ImageCard imageId={cardId} cardWidth={cardWidth} preview={false} />\n                        <div>\n                          {showIds && <Tag>{cardId}</Tag>}\n                          {/* <Button size=\"small\">{isSelected ? 'Deselect' : 'Select'}</Button> */}\n                          <RelationshipCountTag card={card} />\n                        </div>\n                      </TransparentButton>\n                    </div>\n                  );\n                })}\n              </div>\n            </Image.PreviewGroup>\n            <Actions\n              isSaving={isSaving}\n              isDirty={isDirty}\n              selection={selection}\n              relate={relate}\n              deselectAll={deselectAll}\n              onNextSet={onNextSet}\n            />\n          </Card>\n          <div style={{ height: 100 }}></div>\n        </Space>\n      )}\n    </Layout.Content>\n  );\n}\n\ntype ActionsProps = {\n  isSaving: boolean;\n  isDirty: boolean;\n  selection: string[];\n  relate: () => void;\n  deselectAll: () => void;\n  onNextSet: () => void;\n};\n\nconst Actions = ({ isSaving, isDirty, selection, relate, deselectAll, onNextSet }: ActionsProps) => {\n  if (isSaving) {\n    return (\n      <>\n        <FloatButton icon={<LoadingOutlined />} />\n      </>\n    );\n  }\n\n  const onRelate = () => {\n    if (selection.length < 2) return;\n    relate();\n  };\n\n  return (\n    // <FloatButton.Group shape=\"square\" style={{ right: 24 }}>\n    <>\n      {isDirty && (\n        <FloatButton icon={<WarningOutlined />} type=\"primary\" style={{ right: 24 + 70 + 70 + 70 }} />\n      )}\n      <FloatButton\n        icon={<ExpandOutlined />}\n        style={{ right: 24 + 70 + 70 }}\n        // tooltip=\"Deselect\"\n        onClick={deselectAll}\n      />\n      <FloatButton\n        icon={<ForkOutlined />}\n        style={{ right: 24 + 70 }}\n        type={selection.length < 2 ? 'default' : 'primary'}\n        // tooltip=\"Relate\"\n        badge={{ count: selection.length, size: 'small' }}\n        onClick={onRelate}\n      />\n      <FloatButton\n        icon={<SyncOutlined />}\n        style={{ right: 24 }}\n        // tooltip=\"Next Set\"\n        onClick={onNextSet}\n      />\n    </>\n    // </FloatButton.Group>\n  );\n};\n","import { useTitle } from 'react-use';\n// Ant Design Resources\nimport { Segmented } from 'antd';\nimport { DevHeader } from '../DevHeader';\n\n// Components\nimport './dev-image-cards.scss';\nimport { useImageCardsRelationshipData } from './hooks';\nimport { useEffect, useState } from 'react';\nimport { LoadingPage } from 'components/loaders';\nimport { isEmpty } from 'lodash';\nimport { PageError } from 'components/errors';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { Comparator } from './Comparator';\nimport { Grouping } from './Grouping';\n\nfunction ImageCardsRelationshipsPage() {\n  useTitle('Image Cards Relationships | Dev | Tarde Divertida');\n  const [view, setView] = useState('default');\n  const qp = useQueryParams({ view: 'grouping' });\n\n  useEffect(() => {\n    setView(qp.queryParams.view ?? 'grouping');\n  }, [qp.queryParams.view]);\n\n  const query = useImageCardsRelationshipData();\n\n  if (isEmpty(query.data) && query.isLoading) {\n    return <LoadingPage />;\n  }\n\n  if (query.isError) {\n    return <PageError message=\"Something is wrong\" />;\n  }\n\n  const segments = [\n    { label: 'Compare', value: 'default', disabled: view === 'compare' },\n    { label: 'Grouping', value: 'grouping', disabled: view === 'grouping' },\n  ];\n\n  return (\n    <div>\n      <DevHeader\n        title=\"Image Cards Relationships\"\n        extra={<Segmented options={segments} defaultValue={view} onChange={(v: any) => qp.add('view', v)} />}\n      />\n\n      {view === 'default' && <Comparator query={query} />}\n      {view === 'grouping' && <Grouping query={query} />}\n    </div>\n  );\n}\n\nexport default ImageCardsRelationshipsPage;\n"],"names":["FixedMenuButton","type","position","content","className","open","rest","clsx","placement","trigger","FixedMenuButtonContent","icon","label","showLabel","onClick","buttonProps","useState","isActive","setActive","hasLabel","Boolean","useEffectOnce","shape","size","onMouseOver","onMouseLeave","undefined","ghost","TimedButton","duration","children","onExpire","hideTimer","timeLeft","useCountdown","autoStart","disabled","timeClass","TransparentButton","active","activeClass","hoverType","timer","useTimer","expiryTimestamp","inNSeconds","minutes","seconds","useQueryParams","defaultParams","useSearchParams","searchParams","setSearchParams","add","key","value","delete","set","String","remove","useEffect","Object","entries","forEach","has","queryParams","toString","split","reduce","qp","entry","RelationshipCountTag","card","color","length","TagsFilled","Comparator","query","cardWidth","useCardWidth","containerId","data","isDirty","setDirty","isSuccess","isSaving","save","useRandomCards","cardAId","cardA","cardBId","cardB","relate","unrelate","areRelated","onRandomCards","direction","title","extra","CheckCircleFilled","imageId","block","loading","Grouping","sampleSize","setSampleSize","tagThreshold","setTagThreshold","cardSize","setCardSize","showIds","setShowIds","useMeasure","ref","containerWidth","width","cardQuantity","useMemo","Math","min","ceil","minWidth","stats","cardRef","useRef","useRandomGroups","cardIds","cards","onSelect","selection","nextSet","deselectAll","cycles","filters","statsContent","floor","total","complete","overdone","single","wrap","BarChartOutlined","checkedChildren","unCheckedChildren","checked","useCycles","onChange","toggleUseCycles","c","defaultValue","SaveOutlined","danger","FileImageOutlined","style","gridTemplateColumns","max","map","cardId","index","isSelected","includes","preview","Actions","onNextSet","current","scrollIntoView","behavior","height","LoadingOutlined","WarningOutlined","right","ExpandOutlined","ForkOutlined","badge","count","SyncOutlined","useTitle","view","setView","useImageCardsRelationshipData","isEmpty","isLoading","isError","message","segments","DevHeader","options","v"],"sourceRoot":""}