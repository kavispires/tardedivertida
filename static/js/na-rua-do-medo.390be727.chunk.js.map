{"version":3,"file":"static/js/na-rua-do-medo.390be727.chunk.js","mappings":"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","sources":["components/metrics/MetricHighlight.tsx","games/na-rua-do-medo/utils/mock.ts","games/na-rua-do-medo/components/PlayerStats.tsx","games/na-rua-do-medo/components/Highlights.tsx","games/na-rua-do-medo/components/RulesBlobs.tsx","games/na-rua-do-medo/components/Street.tsx","games/na-rua-do-medo/components/PlayersDecisionState.tsx","games/na-rua-do-medo/components/NewHouseCard.tsx","games/na-rua-do-medo/StepMakeDecision.tsx","games/na-rua-do-medo/PhaseTrickOrTreat.tsx","games/na-rua-do-medo/utils/api-requests.ts","games/na-rua-do-medo/StepResult.tsx","games/na-rua-do-medo/PhaseResult.tsx","games/na-rua-do-medo/StepStreetEnd.tsx","games/na-rua-do-medo/PhaseStreetEnd.tsx","games/na-rua-do-medo/utils/achievements.ts","games/na-rua-do-medo/PhaseGameOver.tsx","games/na-rua-do-medo/SessionNaRuaDoMedo.tsx","games/na-rua-do-medo/components/CandyCount.tsx","games/na-rua-do-medo/components/HouseCard.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Components\nimport { IconAvatar } from 'components/icons/IconAvatar';\n\nimport { AvatarSize } from 'antd/lib/avatar/SizeContext';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   *\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {children} <IconAvatar size={iconSize} icon={icon} />\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { getRandomItem } from 'utils/helpers';\n\nconst MORE_CONTINUE = ['CONTINUE', 'CONTINUE', 'CONTINUE', 'CONTINUE', 'GO_HOME'];\nconst MORE_HOME = ['GO_HOME', 'GO_HOME', 'CONTINUE', 'CONTINUE', 'CONTINUE'];\n\nexport const mockPlayerDecision = (horrorLength: number, hand: number) => {\n  let decision = getRandomItem(MORE_CONTINUE);\n\n  if (hand < 2 || horrorLength < 2) {\n    decision = 'CONTINUE';\n  } else if (horrorLength >= 3 && hand > 4) {\n    decision = getRandomItem(MORE_HOME);\n  }\n\n  return decision;\n};\n","// Components\nimport { AvatarStrip } from 'components/avatars';\nimport { FloatingHand, ImageCard } from 'components/cards';\nimport { HouseIcon } from 'components/icons/HouseIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { QuestionIcon } from 'components/icons/QuestionIcon';\nimport { TrickOrTreatIcon } from 'components/icons/TrickOrTreatIcon';\nimport { WalkIcon } from 'components/icons/WalkIcon';\nimport { Translate } from 'components/language';\n\ntype PlayerStatsProps = {\n  user: GamePlayer;\n  omitDecision?: boolean;\n};\n\nexport function PlayerStats({ user, omitDecision = false }: PlayerStatsProps) {\n  return (\n    <FloatingHand title={<Translate pt=\"Informações\" en=\"Stats\" />} icon={<TrickOrTreatIcon />}>\n      <div className=\"n-player-stats\">\n        <AvatarStrip player={user} withName size=\"small\" />\n        <div className=\"n-player-stats__decision\">\n          <DecisionIcon decision={user.decision} omitDecision={omitDecision} />\n        </div>\n        <div className=\"n-player-stats__container n-player-stats__container--candy\">\n          <span className=\"n-player-stats__title\">\n            <Translate pt=\"Doces\" en=\"Candy\" />\n          </span>\n          <div className=\"n-player-stats__count\">\n            <span className=\"n-player-stats__count-label\">\n              <Translate pt=\"Em mão\" en=\"In hand\" />\n            </span>\n            <span className=\"n-player-stats__count-value\">{user.hand}</span>\n          </div>\n\n          <div className=\"n-player-stats__count\">\n            <span className=\"n-player-stats__count-label\">\n              <Translate pt=\"Em casa (pontos)\" en=\"At home (points)\" />\n            </span>\n            <span className=\"n-player-stats__count-value\">{user.totalCandy}</span>\n          </div>\n        </div>\n\n        <div className=\"n-player-stats__container\">\n          <span className=\"n-player-stats__title\">\n            <Translate pt=\"Boladas\" en=\"Jackpots\" />\n          </span>\n          {user.jackpots?.length > 0 ? (\n            <ul className=\"n-player-stats__jackpots\">\n              {user.jackpots.map((jackpot: NCard) => (\n                <ImageCard\n                  key={jackpot.id}\n                  imageId={jackpot.key}\n                  cardWidth={60}\n                  className=\"n-player-stats__jackpot\"\n                />\n              ))}\n            </ul>\n          ) : (\n            <div className=\"n-player-stats__no-jackpot\">\n              <Translate\n                pt=\"Você não coletou nenhuma bolada até o momento.\"\n                en=\"You haven't gotten any jackpot yet.\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </FloatingHand>\n  );\n}\n\ntype DecisionIconProps = {\n  decision: NDecision;\n  omitDecision: boolean;\n};\n\nfunction DecisionIcon({ decision, omitDecision }: DecisionIconProps) {\n  if (omitDecision) {\n    return (\n      <>\n        <IconAvatar icon={<QuestionIcon />} shape=\"square\" />\n        <Translate pt=\"Decida\" en=\"Decide\" />\n      </>\n    );\n  }\n\n  return decision === 'CONTINUE' ? (\n    <>\n      <IconAvatar icon={<WalkIcon />} />\n      <Translate pt=\"Continuando\" en=\"Continuing\" />\n    </>\n  ) : (\n    <>\n      <IconAvatar icon={<HouseIcon />} />\n      <Translate pt=\"Em casa\" en=\"At home\" />\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport { CandyIcon } from 'components/icons/CandyIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { TabletIcon } from 'components/icons/TabletIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function CandyHighlight({ children, type }: HighlightProps) {\n  return (\n    <MetricHighlight\n      icon={<CandyIcon />}\n      type={type}\n      className={clsx(type === 'positive' && 'n-candy-highlight')}\n    >\n      {children}\n    </MetricHighlight>\n  );\n}\n\nexport function TitleCandyHighlight({ children, type }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<IconAvatar size=\"large\" icon={<CandyIcon />} />} type={type}>\n      {children}\n    </MetricHighlight>\n  );\n}\n\nexport function TitleIPadHighlight({ children, type }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<IconAvatar size=\"small\" icon={<TabletIcon />} />} type={type}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","// Components\nimport { Translate } from 'components/language';\nimport { RulesList } from 'components/rules';\nimport { Instruction } from 'components/text';\nimport { CandyHighlight } from './Highlights';\n\nconst CANDY_VALUES = [1, 2, 3, 4, 5, 5, 5, 7, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 17, 19];\n\ntype DecisionExplanationProps = {\n  user: GamePlayer;\n  totalCandyInSidewalk: number;\n};\n\nexport function DecisionExplanation({ user, totalCandyInSidewalk }: DecisionExplanationProps) {\n  const isThereAnyCandy = Boolean(user.hand + totalCandyInSidewalk);\n\n  return (\n    <Instruction contained>\n      {isThereAnyCandy ? (\n        <Translate\n          pt={\n            <>\n              Se você voltar pra sua casa você come todos os doces em mãos{' '}\n              <CandyHighlight>{user.hand}</CandyHighlight> e divide os doces ainda na rua{' '}\n              <CandyHighlight>{totalCandyInSidewalk}</CandyHighlight> com os jogadores que também decidirem\n              voltar.\n            </>\n          }\n          en={\n            <>\n              If you go back home you cash in all your candy in hand{' '}\n              <CandyHighlight>{user.hand}</CandyHighlight> and divide all candy still in the street{' '}\n              <CandyHighlight>{totalCandyInSidewalk}</CandyHighlight> with other players who also decide to go\n              back.\n            </>\n          }\n        />\n      ) : (\n        <Translate\n          pt=\"Não tem doce nenhum ainda, então, melhor simplesmente continuar!\"\n          en=\"There's no candy yet, so why not just continue?\"\n        />\n      )}\n      <br />\n\n      <Translate\n        pt=\"Lembre-se que se dois monstros iguais aparecerem, todos entram em pânico, derrubam todos os doces em mãos e correm pra casa.\"\n        en=\"Remember that if two of the same monster show up, you lose all candy in hand because you freaked out, dropped everything, and ran home.\"\n      />\n    </Instruction>\n  );\n}\n\nexport function CardCountExplanation() {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <RulesList>\n            <li>\n              O baralho de cartas contém {CANDY_VALUES.length} cartas Gostosuras que variam de 1 a 19 doces.{' '}\n              <br />({CANDY_VALUES.join(', ')})\n            </li>\n            <li>Também contém 5 tipos de monstros com 3 cartas para cada (Total: 15).</li>\n            <li>\n              Cada vez que um monstro aparece duas vezes e causa pânico, uma de suas cartas é removida do\n              baralho.\n            </li>\n            <li>\n              Cada rua adiciona um iPad indivisível ao baralho, somente uma pessoa pode tê-lo, se ninguém\n              conseguir pegar o iPad a rua, ele fica no baralho para a próxima rodada.\n            </li>\n          </RulesList>\n        }\n        en={\n          <RulesList>\n            <li>\n              The deck has {CANDY_VALUES.length} Candy cards varying from 1 to 19 candies.\n              <br />({CANDY_VALUES.join(', ')})\n            </li>\n            <li>It also has 5 types of monsters with 3 cards each (15 total).</li>\n            <li>\n              When a second monster of the same type shows up, one of its cards is remove for the next round.\n            </li>\n            <li>\n              Each street adds an unshareable iPad to the deck, only one person get get it, if nobody has\n              gotten the iPad on the current street, it will remain in the deck for the next round.\n            </li>\n          </RulesList>\n        }\n      />\n    </Instruction>\n  );\n}\n","import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { PUBLIC_URL } from 'utils/constants';\n// Helpers\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { HouseCard } from './HouseCard';\n\ntype StreetProps = {\n  street: NStreet;\n  currentCard?: NCard;\n  candySidewalk: CandySidewalk;\n};\n\nexport function Street({ street, currentCard, candySidewalk }: StreetProps) {\n  useEffect(() => {\n    const streetEl = document.getElementById('street');\n    const currentCardEl = document.getElementById('current-card');\n\n    if (streetEl !== null && currentCardEl !== null) {\n      streetEl.scrollLeft = currentCardEl.offsetLeft;\n    }\n  }, [street, currentCard]);\n\n  return (\n    <div\n      className=\"n-street\"\n      id=\"street\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.IN_GAME}n-street.png')`,\n      }}\n    >\n      {street.map((card, index) => {\n        return (\n          <HouseCard\n            key={card.id}\n            card={card}\n            candyLeftover={candySidewalk[index].leftover}\n            id={index === street.length - 1 ? 'current-card' : undefined}\n          />\n        );\n      })}\n      {currentCard && (\n        <HouseCard\n          card={currentCard}\n          candyLeftover={candySidewalk[candySidewalk.length - 1].leftover}\n          className={clsx('n-current-card', getAnimationClass('flipInY'))}\n          id=\"current-card\"\n          active\n        />\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { CandyIcon } from 'components/icons/CandyIcon';\nimport { HouseIcon } from 'components/icons/HouseIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { WalkIcon } from 'components/icons/WalkIcon';\nimport { Translate } from 'components/language';\nimport { CostumeAvatar } from './CostumeAvatar';\nimport { TrickOrTreatIcon } from 'components/icons/TrickOrTreatIcon';\nimport { ScaredIcon } from 'components/icons/ScaredIcon';\n\ntype PlayersDecisionStateProps = {\n  players: GamePlayers;\n  goingHomePlayerIds: PlayerId[];\n  continuingPlayerIds: PlayerId[];\n  alreadyAtHomePlayerIds: PlayerId[];\n  cashedInCandy: number;\n  candyInHand: number;\n  phase: 'TRICK_OR_TREAT' | 'RESULT' | 'STREET_END';\n};\n\nexport function PlayersDecisionState({\n  players,\n  goingHomePlayerIds,\n  continuingPlayerIds,\n  alreadyAtHomePlayerIds,\n  cashedInCandy,\n  candyInHand,\n  phase,\n}: PlayersDecisionStateProps) {\n  return (\n    <div className=\"n-players-decision\">\n      <DecisionSection\n        players={players}\n        playersInSection={alreadyAtHomePlayerIds}\n        icon={<HouseIcon />}\n        title={<Translate pt=\"Em Casa\" en=\"At Home\" />}\n        description={\n          <Translate\n            pt=\"Você se lembra quantos doces eles levaram?\"\n            en=\"Do you remember how much candy they took?\"\n          />\n        }\n      />\n      <div className=\"n-players-decision__divider\" />\n      <DecisionSection\n        players={players}\n        playersInSection={goingHomePlayerIds}\n        icon={<WalkIcon className=\"svg-mirror\" />}\n        title={<Translate pt=\"Voltando pra Casa\" en=\"Going Home\" />}\n        description={\n          <Translate\n            pt={\n              <>\n                Cada um levou {candyInHand + cashedInCandy} <IconAvatar icon={<CandyIcon />} size=\"small\" />{' '}\n                pra casa.\n              </>\n            }\n            en={\n              <>\n                Each one took {candyInHand + cashedInCandy} <IconAvatar icon={<CandyIcon />} size=\"small\" />{' '}\n                home.\n              </>\n            }\n          />\n        }\n      />\n      <div className=\"n-players-decision__divider\" />\n      <DecisionSection\n        players={players}\n        playersInSection={continuingPlayerIds}\n        icon={phase === 'STREET_END' ? <ScaredIcon /> : <TrickOrTreatIcon />}\n        title={\n          <>\n            {phase === 'TRICK_OR_TREAT' && (\n              <Translate pt=\"Continua ou Volta?\" en=\"Continuing or Going Home?\" />\n            )}\n            {phase === 'RESULT' && <Translate pt=\"Continuando\" en=\"Continuing\" />}\n            {phase === 'STREET_END' && <Translate pt=\"Continuariam\" en=\"Would continue\" />}\n          </>\n        }\n        description={\n          phase === 'STREET_END' ? (\n            <Translate\n              pt={\n                <>\n                  Perderam {candyInHand} <IconAvatar icon={<CandyIcon />} size=\"small\" />.\n                </>\n              }\n              en={\n                <>\n                  Lost {candyInHand} <IconAvatar icon={<CandyIcon />} size=\"small\" /> .\n                </>\n              }\n            />\n          ) : (\n            <Translate\n              pt={\n                <>\n                  Cada um tem {candyInHand} <IconAvatar icon={<CandyIcon />} size=\"small\" /> na sacolinha.\n                </>\n              }\n              en={\n                <>\n                  Each one has {candyInHand} <IconAvatar icon={<CandyIcon />} size=\"small\" /> in their bag.\n                </>\n              }\n            />\n          )\n        }\n      />\n    </div>\n  );\n}\n\ntype DecisionSectionProps = {\n  players: GamePlayers;\n  playersInSection: PlayerId[];\n  icon: ReactNode;\n  title: ReactNode;\n  description: ReactNode;\n};\n\nfunction DecisionSection({ players, playersInSection, icon, title, description }: DecisionSectionProps) {\n  const hasPlayers = playersInSection.length > 0;\n\n  return (\n    <div className={clsx('n-players-decision__section', !hasPlayers && 'n-players-decision__section--empty')}>\n      <h3\n        className={clsx(\n          'n-players-decision__title',\n          !hasPlayers && getAnimationClass('fadeOut') && 'n-players-decision__title--empty'\n        )}\n      >\n        <IconAvatar icon={icon} />\n        {title}\n      </h3>\n\n      <ul className=\"n-players-decision__players\">\n        {hasPlayers &&\n          playersInSection.map((playerId) => {\n            const player = players[playerId];\n            return (\n              <span key={`going-home-player-${player.id}`} className=\"n-players-decision__player\">\n                <CostumeAvatar id={player.avatarId} costumeId={player.costumeId} />\n                {player.name}\n              </span>\n            );\n          })}\n      </ul>\n      <p className={clsx('n-players-decision__info', !hasPlayers && 'n-players-decision__info--empty')}>\n        {hasPlayers && description}\n      </p>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCountdown } from 'hooks/useCountdown';\n// Utils\nimport { NOOP } from 'utils/constants';\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard } from 'components/cards';\n\ntype NewHouseCardProps = {\n  /**\n   * The candy, monster, jackpot card\n   */\n  card: NCard;\n};\n\nexport function NewHouseCard({ card }: NewHouseCardProps) {\n  const { dualTranslate } = useLanguage();\n\n  const baseClass = 'n-new-house-card';\n  const cardBaseClass = 'n-new-house-card__card';\n\n  const { timeLeft } = useCountdown({\n    duration: 3,\n    onExpire: () => NOOP,\n  });\n\n  return (\n    <div\n      className={clsx(\n        `${baseClass}`,\n        timeLeft > 0 ? getAnimationClass('bounceIn') : getAnimationClass('bounceOut')\n      )}\n    >\n      <div className={clsx(`${baseClass}--container`, `${baseClass}--${card.type}`)}>\n        <ImageCard imageId={card.key} cardWidth={200} className={clsx(cardBaseClass)} />\n\n        <h3 className={`${baseClass}__name`}>{dualTranslate(card.name)}</h3>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { mockPlayerDecision } from './utils/mock';\n// Components\nimport { CandyCount } from './components/CandyCount';\nimport { PlayerStats } from './components/PlayerStats';\nimport { CardCountExplanation, DecisionExplanation } from './components/RulesBlobs';\nimport { Street } from './components/Street';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { TransparentButton } from 'components/buttons';\nimport { WalkIcon } from 'components/icons/WalkIcon';\nimport { HouseIcon } from 'components/icons/HouseIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { CandyHighlight, TitleIPadHighlight } from './components/Highlights';\nimport { getAnimationClass } from 'utils/helpers';\nimport { PlayersDecisionState } from './components/PlayersDecisionState';\nimport { NewHouseCard } from './components/NewHouseCard';\n\ntype StepMakeDecisionProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  street: NStreet;\n  currentCard: NCard;\n  onSubmitDecision: GenericFunction;\n  continuingPlayerIds: PlayerId[];\n  alreadyAtHomePlayerIds: PlayerId[];\n  candySidewalk: CandySidewalk;\n  totalCandyInSidewalk: number;\n  candyInHand: number;\n  candyPerPlayer: number;\n  cashedInCandy: number;\n};\n\nexport function StepMakeDecision({\n  players,\n  street,\n  currentCard,\n  candySidewalk,\n  totalCandyInSidewalk,\n  continuingPlayerIds,\n  alreadyAtHomePlayerIds,\n  onSubmitDecision,\n  user,\n  candyPerPlayer,\n  candyInHand,\n}: StepMakeDecisionProps) {\n  const { dualTranslate } = useLanguage();\n  const { isLoading } = useLoading();\n\n  // DEV: make decision\n  useMock(() => {\n    if (user.isTrickOrTreating && !user.ready) {\n      onSubmitDecision({\n        decision: mockPlayerDecision(street.filter((card) => card.type === 'horror').length, user.hand),\n      });\n    }\n  }, [user.isTrickOrTreating, user.ready]);\n\n  return (\n    <Step fullWidth className=\"n-step-trick-or-treat\">\n      <Title size=\"medium\" white className={clsx('n-title', getAnimationClass('tada'))} level={2}>\n        <Translate pt=\"Continua ou Volta pra Casa?\" en=\"Next House or Go Home?\" />\n      </Title>\n\n      <Title size=\"small\" white level={3} className=\"n-subtitle\">\n        {currentCard.type === 'candy' && (\n          <Translate\n            pt={\n              <>\n                Que delícia! <CandyHighlight>{currentCard.value}</CandyHighlight>! Cada criança ganha{' '}\n                <CandyHighlight type=\"positive\">{candyPerPlayer}</CandyHighlight> !\n              </>\n            }\n            en={\n              <>\n                Yummy! <CandyCount candyCount={currentCard.value} size=\"large\" />! {candyPerPlayer} for each\n                one of us!\n              </>\n            }\n          />\n        )}\n        {currentCard.type === 'horror' && (\n          <Translate\n            pt={`Ahh! Cruz credo! Um(a) ${dualTranslate(currentCard.name)} super assustador(a)!`}\n            en={`Ahh! Yikes! A very scary ${dualTranslate(currentCard.name)}!`}\n          />\n        )}\n        {currentCard.type === 'jackpot' && (\n          <Translate\n            pt={\n              <>\n                Um <TitleIPadHighlight>iPad</TitleIPadHighlight>! Mas somente uma criança pode ficar com\n                ele...\n              </>\n            }\n            en={\n              <>\n                An <TitleIPadHighlight>iPad</TitleIPadHighlight>! But only one kid can keep it...\n              </>\n            }\n          />\n        )}\n      </Title>\n\n      <PopoverRule content={<CardCountExplanation />} />\n\n      <PlayersDecisionState\n        players={players}\n        goingHomePlayerIds={[]}\n        continuingPlayerIds={continuingPlayerIds}\n        alreadyAtHomePlayerIds={alreadyAtHomePlayerIds ?? []}\n        cashedInCandy={0}\n        candyInHand={candyInHand}\n        phase=\"TRICK_OR_TREAT\"\n      />\n\n      <Street street={street} currentCard={currentCard} candySidewalk={candySidewalk} />\n\n      <NewHouseCard card={currentCard} />\n\n      {user.isTrickOrTreating ? (\n        <DecisionExplanation user={user} totalCandyInSidewalk={totalCandyInSidewalk} />\n      ) : (\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                Essa é a nova casa! Mas você já voltou para sua casa, então, apenas observe.\n                <br />\n                Você não tem que fazer nada.\n              </>\n            }\n            en={\n              <>\n                A new house! But you are already home, so, just chill.\n                <br />\n                You don't have to do anything.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      {user.isTrickOrTreating && !user.ready && (\n        <div className=\"n-decision-buttons-container\">\n          <TransparentButton\n            className=\"n-decision-button n-decision-button--home\"\n            onClick={() => onSubmitDecision({ decision: 'GO_HOME' })}\n            disabled={isLoading || user.ready}\n          >\n            <IconAvatar icon={<HouseIcon />} size=\"large\" />\n            <Translate pt=\"Voltar pra casa\" en=\"Go back home\" />\n          </TransparentButton>\n          <TransparentButton\n            className=\"n-decision-button n-decision-button--continue\"\n            onClick={() => onSubmitDecision({ decision: 'CONTINUE' })}\n            disabled={isLoading || user.ready}\n          >\n            <IconAvatar icon={<WalkIcon />} size=\"large\" />\n            <Translate pt=\"Continuar para a próxima casa\" en=\"Continue trick or treating\" />\n          </TransparentButton>\n        </div>\n      )}\n\n      <PlayerStats user={user} omitDecision={!user.ready} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitDecisionAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { ImageCardPreloadHand } from 'components/cards';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepMakeDecision } from './StepMakeDecision';\nimport { PlayerStats } from './components/PlayerStats';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StreetIcon } from 'components/icons/StreetIcon';\n\nfunction PhaseTrickOrTreat({ state, players, info }: PhaseProps) {\n  const user = useUser(players, state);\n\n  const isNewStreet = state.street.length === 0;\n  const { step, goToNextStep, setStep } = useStep(isNewStreet ? 0 : 2);\n\n  const onSubmitDecision = useOnSubmitDecisionAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.NA_RUA_DO_MEDO.TRICK_OR_TREAT}>\n      <StepSwitcher\n        step={step}\n        conditions={[!user.isReady]}\n        players={players}\n        waitingRoomContent={<PlayerStats user={user} />}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state.round}\n          buttonText=\" \"\n          onPressButton={goToNextStep}\n          time={5}\n          circleColor={info?.appearance?.color}\n        >\n          <Instruction contained>\n            <Translate\n              pt={`Vamos pegar doces na Rua do Medo ${state.round.current} de ${state.round.total}`}\n              en={`Let's get candy on Fear Street ${state.round.current} of ${state.round.total}`}\n            />\n          </Instruction>\n          <ImageCardPreloadHand hand={[state.currentCard.key]} />\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<StreetIcon />}\n          title={<Translate pt=\"Gostosuras ou Travessuras?\" en=\"Trick or Treat?\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Nova rua! Vamos de porta em porta pegar doces!\n                  <br />\n                  Espero que essa rua não dê medo...\n                </>\n              }\n              en={\n                <>\n                  New street! Let's go door to door to get candy!\n                  <br />I hope this street is not scary...\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepMakeDecision\n          players={players}\n          street={state.street}\n          currentCard={state.currentCard}\n          candySidewalk={state.candySidewalk}\n          cashedInCandy={state.cashedInCandy}\n          candyPerPlayer={state.candyPerPlayer}\n          candyInHand={state.candyInHand}\n          totalCandyInSidewalk={state.totalCandyInSidewalk}\n          continuingPlayerIds={state.continuingPlayerIds}\n          alreadyAtHomePlayerIds={state.alreadyAtHomePlayerIds}\n          onSubmitDecision={onSubmitDecision}\n          user={user}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTrickOrTreat;\n","import { NA_RUA_DO_MEDO_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitDecisionAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: NA_RUA_DO_MEDO_API.submitAction,\n    actionName: 'submit-decision',\n    onSuccess: () => {\n      window.scrollTo({ top: 0, left: 0, behavior: 'smooth' });\n    },\n    successMessage: translate('Decisão submetida com sucesso', 'Decision submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua decisão',\n      'Oops, the application found an error while trying to submit your decision'\n    ),\n  });\n\n  return (payload: SubmitDecisionPayload) => {\n    request({\n      action: 'SUBMIT_DECISION',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { PlayerStats } from './components/PlayerStats';\nimport { Street } from './components/Street';\nimport { CardCountExplanation } from './components/RulesBlobs';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { PlayersDecisionState } from './components/PlayersDecisionState';\n\ntype StepResultProps = {\n  players: GamePlayers;\n  street: NStreet;\n  currentCard: NCard;\n  candySidewalk: CandySidewalk;\n  cashedInCandy: number;\n  user: GamePlayer;\n  alreadyAtHomePlayerIds: PlayerId[];\n  continuingPlayerIds: PlayerId[];\n  goingHomePlayerIds: PlayerId[];\n  candyInHand: number;\n};\n\nexport function StepResult({\n  players,\n  street,\n  currentCard,\n  candySidewalk,\n  user,\n  cashedInCandy,\n  alreadyAtHomePlayerIds,\n  continuingPlayerIds,\n  goingHomePlayerIds,\n  candyInHand,\n}: StepResultProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\" white className={clsx('n-title', getAnimationClass('fadeIn'))} level={2}>\n        <Translate pt=\"Decisões\" en=\"Decisions\" />:\n      </Title>\n\n      <Title size=\"small\" white level={3} className={clsx('n-subtitle', getAnimationClass('fadeIn', 1))}>\n        {goingHomePlayerIds.length === 0 && (\n          <Translate pt=\"Todos continuaram...\" en=\"Everybody will continue...\" />\n        )}\n\n        {goingHomePlayerIds.length === 1 && (\n          <Translate pt=\"Olha o cagão voltando pra casa...\" en=\"Look at this scared cat going back home...\" />\n        )}\n        {goingHomePlayerIds.length > 1 && (\n          <Translate\n            pt=\"Olha os cagões voltando pra casa...\"\n            en=\"Look at these scared cats going back home...\"\n          />\n        )}\n      </Title>\n\n      <PopoverRule content={<CardCountExplanation />} />\n\n      <PlayersDecisionState\n        players={players}\n        goingHomePlayerIds={goingHomePlayerIds ?? []}\n        continuingPlayerIds={continuingPlayerIds}\n        alreadyAtHomePlayerIds={alreadyAtHomePlayerIds ?? []}\n        cashedInCandy={cashedInCandy}\n        candyInHand={candyInHand}\n        phase=\"RESULT\"\n      />\n\n      <Street street={street} currentCard={currentCard} candySidewalk={candySidewalk} />\n\n      <AdminNextPhaseButton autoTriggerTime={10}>\n        <Translate pt=\"Próxima Casa\" en=\"Next House\" />\n      </AdminNextPhaseButton>\n\n      <PlayerStats user={user} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepResult } from './StepResult';\nimport { PhaseContainer } from 'components/phases';\n\nfunction PhaseResult({ state, players, info }: PhaseProps) {\n  const user = useUser(players, state);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.NA_RUA_DO_MEDO.RESULT}>\n      {/* Step 1 */}\n      <StepResult\n        players={players}\n        street={state.street}\n        currentCard={state.currentCard}\n        candySidewalk={state.candySidewalk}\n        cashedInCandy={state.cashedInCandy}\n        candyInHand={state.candyInHand}\n        user={user}\n        alreadyAtHomePlayerIds={state.alreadyAtHomePlayerIds}\n        continuingPlayerIds={state.continuingPlayerIds}\n        goingHomePlayerIds={state.goingHomePlayerIds}\n      />\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResult;\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { PlayerStats } from './components/PlayerStats';\nimport { Street } from './components/Street';\nimport { CardCountExplanation } from './components/RulesBlobs';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { PlayersDecisionState } from './components/PlayersDecisionState';\n\ntype StepStreetEndProps = {\n  street: NStreet;\n  currentCard: NCard;\n  candySidewalk: CandySidewalk;\n  user: GamePlayer;\n  isDoubleHorror: boolean;\n  round: GameRound;\n  players: GamePlayers;\n  alreadyAtHomePlayerIds: PlayerId[];\n  goingHomePlayerIds: PlayerId[];\n  continuingPlayerIds: PlayerId[];\n  candyInHand: number;\n};\n\nexport function StepStreetEnd({\n  street,\n  currentCard,\n  candySidewalk,\n  user,\n  isDoubleHorror,\n  round,\n  players,\n  alreadyAtHomePlayerIds,\n  goingHomePlayerIds,\n  continuingPlayerIds,\n  candyInHand,\n}: StepStreetEndProps) {\n  const { language } = useLanguage();\n\n  const monsterName = currentCard?.name?.[language] ?? '';\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\" white>\n        {isDoubleHorror ? (\n          <Translate\n            pt={<>Um segundo {monsterName} surgiu do nada!</>}\n            en={<>A second {monsterName} came out of nowhere!</>}\n          />\n        ) : (\n          <Translate pt=\"Todo mundo voltou pra casa...\" en=\"Everybody went back home for now...\" />\n        )}\n      </Title>\n\n      <PopoverRule content={<CardCountExplanation />} />\n\n      <Instruction contained>\n        {isDoubleHorror && (\n          <>\n            <Translate\n              pt={<>Jogamos todos os doces pra cima e corremos desesperados pra casa!</>}\n              en={<>We threw all candy in the air and ran desperately home!</>}\n            />\n            <br />\n          </>\n        )}\n        {round.current < round.total && monsterName && (\n          <>\n            <Translate\n              pt={<>Uma carta do {monsterName} será removida, menos chances dele aparece novamente!</>}\n              en={<>One of the {monsterName} will be removed, so less chances of it showing up again!</>}\n            />\n            <br />\n          </>\n        )}\n\n        {round.current === round.total ? (\n          <Translate\n            pt=\"E a noite chegou ao fim... Hora de comer gostosuras!\"\n            en=\"And the night is over... Time to eat candy!\"\n          />\n        ) : (\n          <Translate pt=\"Próxima rua?\" en=\"Let's hit the next street?\" />\n        )}\n      </Instruction>\n\n      <PlayersDecisionState\n        players={players}\n        goingHomePlayerIds={[]}\n        continuingPlayerIds={continuingPlayerIds}\n        alreadyAtHomePlayerIds={[...goingHomePlayerIds, ...alreadyAtHomePlayerIds]}\n        cashedInCandy={0}\n        candyInHand={candyInHand}\n        phase=\"STREET_END\"\n      />\n\n      <Street street={street} currentCard={currentCard} candySidewalk={candySidewalk} />\n\n      <AdminNextPhaseButton>\n        {round.current < round.total ? <Translate pt=\"Próxima Casa\" en=\"Next House\" /> : 'Game Over'}\n      </AdminNextPhaseButton>\n\n      <PlayerStats user={user} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { StepStreetEnd } from './StepStreetEnd';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { ScaredIcon } from 'components/icons/ScaredIcon';\nimport { HouseIcon } from 'components/icons/HouseIcon';\n\nfunction PhaseStreetEnd({ state, players, info }: PhaseProps) {\n  const { step, goToNextStep } = useStep(0);\n  const user = useUser(players, state);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.NA_RUA_DO_MEDO.STREET_END}>\n      <StepSwitcher step={step} conditions={[!user.isReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={state.isDoubleHorror ? <ScaredIcon /> : <HouseIcon />}\n          title={<Translate pt=\"Fim da Rua\" en=\"End of the Street\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={3}\n        >\n          <Instruction>\n            {state.isDoubleHorror ? (\n              <Translate pt=\"Corre cambada!!!\" en=\"Run for your life!!!\" />\n            ) : (\n              <Translate pt=\"E todo mundo foi pra casa...\" en=\"And everybody went home...\" />\n            )}\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepStreetEnd\n          street={state.street}\n          currentCard={state.currentCard}\n          candySidewalk={state.candySidewalk}\n          user={user}\n          isDoubleHorror={state.isDoubleHorror}\n          round={state.round}\n          players={players}\n          alreadyAtHomePlayerIds={state.alreadyAtHomePlayerIds}\n          goingHomePlayerIds={state.goingHomePlayerIds}\n          continuingPlayerIds={state.continuingPlayerIds}\n          candyInHand={state.candyInHand}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseStreetEnd;\n","import { MedalCandyIcon } from 'components/icons/MedalCandyIcon';\nimport { MedalCloverIcon } from 'components/icons/MedalCloverIcon';\nimport { MedalDollarSignIcon } from 'components/icons/MedalDollarSignIcon';\nimport { MedalHouseIcon } from 'components/icons/MedalHouseIcon';\nimport { MedalScaredIcon } from 'components/icons/MedalScaredIcon';\nimport { MedalSwordIcon } from 'components/icons/MedalSwordIcon';\nimport { MedalWideIcon } from 'components/icons/MedalWideIcon';\n\nexport const achievementsReference: AchievementReference = {\n  BRAVEST: {\n    Icon: MedalSwordIcon,\n    title: {\n      pt: 'Mais Corajoso',\n      en: 'Bravest',\n    },\n    description: {\n      pt: 'Encontrou o maior número de monstros',\n      en: 'Encounter the most number of monsters',\n    },\n  },\n  LUCKIEST: {\n    Icon: MedalCloverIcon,\n    title: {\n      pt: 'Mais Sortudo',\n      en: 'Luckiest',\n    },\n    description: {\n      pt: 'Encontrou o menor número de monstros',\n      en: 'Encounter the fewest monsters',\n    },\n  },\n  CANDY_LOSER: {\n    Icon: MedalCandyIcon,\n    title: {\n      pt: 'Mais Desesperado',\n      en: 'Most Desperate',\n    },\n    description: {\n      pt: 'Perdeu mais doces para ataques dos monstros',\n      en: 'Lost the most number of candy for a double monster',\n    },\n  },\n  MOST_SCARED: {\n    Icon: MedalScaredIcon,\n    title: {\n      pt: 'Mais Assustado',\n      en: 'Most Scared',\n    },\n    description: {\n      pt: 'Visitou o menor número de casas',\n      en: 'Visited the fewest houses',\n    },\n  },\n  MOST_HOUSES: {\n    Icon: MedalHouseIcon,\n    title: {\n      pt: 'Mais Andador',\n      en: 'Most Houses',\n    },\n    description: {\n      pt: 'Visitou o maior número de casas',\n      en: 'Visited the most houses',\n    },\n  },\n  MOST_JACKPOTS: {\n    Icon: MedalDollarSignIcon,\n    title: {\n      pt: 'Mais Boladas',\n      en: 'Most Jackpots',\n    },\n    description: {\n      pt: 'Ganhou mais boladas',\n      en: 'Got the most jackpots',\n    },\n  },\n  MOST_SIDEWALK: {\n    Icon: MedalWideIcon,\n    title: {\n      pt: 'Mais Mendigo',\n      en: 'Most Sidewalk Candy',\n    },\n    description: {\n      pt: 'Catou mais doces da calçada',\n      en: 'Got the most candy from the sidewalk',\n    },\n  },\n};\n","import { orderBy } from 'lodash';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\nimport { achievementsReference } from './utils/achievements';\n// Components\nimport { CandyCount } from './components/CandyCount';\nimport { PlayerStats } from './components/PlayerStats';\nimport { GameOverWrapper } from 'components/game-over';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { PoopIcon } from 'components/icons/PoopIcon';\nimport { Achievements } from 'components/general/Achievements';\nimport { CostumeAvatar } from './components/CostumeAvatar';\n\nconst GRID_REPEAT: NumberDictionary = {\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 3,\n  7: 4,\n  8: 4,\n  9: 5,\n  10: 5,\n};\n\nfunction PhaseGameOver({ state, players, info }: PhaseProps) {\n  const { language } = useLanguage();\n  const user = useUser(players, state);\n\n  const winningPlayersIds = state.winners.map((player: GamePlayer) => player.id);\n  const nonWinningPlayers = orderBy(\n    Object.values(players).filter((player) => !winningPlayersIds.includes(player.id)),\n    'score',\n    'desc'\n  );\n\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      announcementIcon={<PoopIcon />}\n      announcementDuration={6}\n      announcementContent={\n        <Instruction>\n          <Translate\n            pt=\"O jogador que comeu mais doces, teve uma caganeira horrível, mas é o campeão é...\"\n            en=\"The player who ate candy the most, had a terrible diarrhea, but it's the winner is...\"\n          />\n        </Instruction>\n      }\n    >\n      <Instruction contained>\n        <p>\n          <Translate pt=\"com\" en=\"with\" />\n        </p>\n        <ul className=\"n-game-over-players\">\n          {state.winners.map((player: GamePlayer) => {\n            return (\n              <div className=\"n-game-over-player\">\n                <CostumeAvatar\n                  key={`winner-${player.id}`}\n                  id={state.winners[0].avatarId}\n                  costumeId={player.costumeId}\n                />\n                <div>\n                  <CandyCount candyCount={player.score} size=\"default\" />\n                </div>\n              </div>\n            );\n          })}\n        </ul>\n      </Instruction>\n\n      <ul\n        className=\"n-game-over-players\"\n        style={{ gridTemplateColumns: `repeat(${GRID_REPEAT?.[Object.keys(players).length] ?? 5}, 1fr)` }}\n      >\n        {nonWinningPlayers.map((player) => (\n          <li className=\"n-game-over-player\" key={`game-over-player-${player.id}`}>\n            <div className=\"n-game-over-player__name\">\n              <CostumeAvatar id={player.avatarId} costumeId={player.costumeId} />\n              <br />\n              <strong>{player.name}</strong>, {AVATARS[player.avatarId].description[language]}\n            </div>\n            <div className=\"n-game-over-player__candy\">\n              <CandyCount candyCount={player.score} size=\"small\" />\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <PlayerStats user={user} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseTrickOrTreat from './PhaseTrickOrTreat';\nimport PhaseResult from './PhaseResult';\nimport PhaseStreetEnd from './PhaseStreetEnd';\nimport PhaseGameOver from './PhaseGameOver';\n// Sass\nimport './na-rua-do-medo.scss';\n\nfunction getActiveComponent(phase: string) {\n  switch (phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.NA_RUA_DO_MEDO.TRICK_OR_TREAT:\n      return PhaseTrickOrTreat;\n    case PHASES.NA_RUA_DO_MEDO.RESULT:\n      return PhaseResult;\n    case PHASES.NA_RUA_DO_MEDO.STREET_END:\n      return PhaseStreetEnd;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionNaRuaDoMedo({ gameId }: SessionProps) {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.ORANGE,\n        },\n      }}\n    >\n      <Session\n        gameId={gameId}\n        gameCollection={GAME_COLLECTION.NA_RUA_DO_MEDO}\n        getActiveComponent={getActiveComponent}\n        backgroundClassName=\"n-background\"\n      />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionNaRuaDoMedo;\n","// Ant Design Resources\nimport { Avatar } from 'antd';\n// Components\nimport { CandyIcon } from 'components/icons/CandyIcon';\nimport { IconAvatar } from 'components/icons/IconAvatar';\n\ntype CandyCountProps = {\n  candyCount: number;\n  size?: 'small' | 'default' | 'large';\n};\n\nexport function CandyCount({ candyCount, size = 'small' }: CandyCountProps) {\n  return (\n    <>\n      <IconAvatar icon={<CandyIcon />} size={size} />\n      <Avatar size={size} style={{ backgroundColor: 'hotPink' }}>\n        {candyCount}\n      </Avatar>\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { CandyCount } from './CandyCount';\n\ntype HouseCardProps = {\n  /**\n   * The candy, monster, jackpot card\n   */\n  card: NCard;\n  /**\n   * The quantity of candy left in the sidewalk\n   */\n  candyLeftover: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Unique id\n   */\n  id?: string;\n  /**\n   * If the house is the last one\n   */\n  active?: boolean;\n  /**\n   * Enables or disables preview\n   */\n  preview?: boolean;\n};\n\nexport function HouseCard({\n  card,\n  candyLeftover,\n  id,\n  className = '',\n  active = false,\n  preview,\n}: HouseCardProps) {\n  const { dualTranslate } = useLanguage();\n\n  const baseClass = 'n-house-card';\n  const cardBaseClass = 'n-house-card__card';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${card.type}`, active && `${baseClass}--active`, className)}\n      id={id}\n    >\n      <div className=\"n-house-card__sidewalk\">\n        {card.type === 'candy' && candyLeftover > 0 && (\n          <Tooltip\n            color=\"hotPink\"\n            title={\n              <Translate\n                pt=\"Doces que não foram divididos entre os jogadores\"\n                en=\"Candy that wasn't shared between players\"\n              />\n            }\n          >\n            <CandyCount candyCount={candyLeftover} />\n          </Tooltip>\n        )}\n      </div>\n      <ImageCard imageId={card.key} cardWidth={80} className={clsx(cardBaseClass)} preview={preview} />\n\n      <h3 className={`${baseClass}__name`}>{dualTranslate(card.name)}</h3>\n\n      {active && (\n        <span\n          className={clsx(`${baseClass}__active`, getAnimationClass('heartBeat', undefined, 'slow', true))}\n        />\n      )}\n    </div>\n  );\n}\n"],"names":["MetricHighlight","children","icon","type","className","iconSize","clsx","size","MORE_CONTINUE","MORE_HOME","mockPlayerDecision","horrorLength","hand","decision","getRandomItem","PlayerStats","user","omitDecision","title","pt","en","TrickOrTreatIcon","player","withName","DecisionIcon","totalCandy","jackpots","length","map","jackpot","imageId","key","cardWidth","id","QuestionIcon","shape","WalkIcon","HouseIcon","CandyHighlight","TitleIPadHighlight","TabletIcon","CANDY_VALUES","DecisionExplanation","totalCandyInSidewalk","isThereAnyCandy","Boolean","contained","CardCountExplanation","join","Street","street","currentCard","candySidewalk","useEffect","streetEl","document","getElementById","currentCardEl","scrollLeft","offsetLeft","style","backgroundImage","PUBLIC_URL","card","index","HouseCard","candyLeftover","leftover","undefined","getAnimationClass","active","PlayersDecisionState","players","goingHomePlayerIds","continuingPlayerIds","alreadyAtHomePlayerIds","cashedInCandy","candyInHand","phase","DecisionSection","playersInSection","description","ScaredIcon","hasPlayers","playerId","CostumeAvatar","avatarId","costumeId","name","NewHouseCard","dualTranslate","useLanguage","baseClass","timeLeft","useCountdown","duration","onExpire","NOOP","StepMakeDecision","onSubmitDecision","candyPerPlayer","isLoading","useLoading","useMock","isTrickOrTreating","ready","filter","fullWidth","white","level","value","CandyCount","candyCount","content","onClick","disabled","state","info","useUser","isNewStreet","useStep","step","goToNextStep","setStep","translate","request","useAPICall","apiFunction","NA_RUA_DO_MEDO_API","actionName","onSuccess","window","scrollTo","top","left","behavior","successMessage","errorMessage","payload","action","useOnSubmitDecisionAPIRequest","allowedPhase","PHASES","conditions","isReady","waitingRoomContent","round","buttonText","onPressButton","time","circleColor","appearance","color","current","total","StreetIcon","onClose","currentRound","StepResult","useTemporarilyHidePlayersBar","autoTriggerTime","StepStreetEnd","isDoubleHorror","language","monsterName","achievementsReference","BRAVEST","Icon","MedalSwordIcon","LUCKIEST","MedalCloverIcon","CANDY_LOSER","MedalCandyIcon","MOST_SCARED","MedalScaredIcon","MOST_HOUSES","MedalHouseIcon","MOST_JACKPOTS","MedalDollarSignIcon","MOST_SIDEWALK","MedalWideIcon","GRID_REPEAT","winningPlayersIds","winners","nonWinningPlayers","orderBy","Object","values","includes","announcementIcon","PoopIcon","announcementDuration","announcementContent","score","gridTemplateColumns","keys","AVATARS","Achievements","achievements","reference","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseTrickOrTreat","PhaseResult","PhaseStreetEnd","PhaseGameOver","PageError","gameId","theme","token","colorPrimary","THEME_COLORS","gameCollection","GAME_COLLECTION","backgroundClassName","backgroundColor","preview"],"sourceRoot":""}