{"version":3,"file":"static/js/galeria-de-sonhos.8e55e884.chunk.js","mappings":"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","sources":["components/cards/Card.tsx","components/cards/FloatingHand.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageCard.tsx","components/cards/ImageCardHand.tsx","components/cards/ImageCardBack.tsx","components/cards/ImageCardPreloadHand.tsx","components/cards/ImageCardSelectButton.tsx","components/points/StarPoints.tsx","components/pop-up/messageContent.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/galeria-de-sonhos/components/RulesBlobs.tsx","games/galeria-de-sonhos/StepWordSelection.tsx","games/galeria-de-sonhos/PhaseWordSelection.tsx","games/galeria-de-sonhos/utils/api-requests.ts","games/galeria-de-sonhos/utils/mock.ts","games/galeria-de-sonhos/components/SelectTable.tsx","games/galeria-de-sonhos/StepDreamsSelection.tsx","games/galeria-de-sonhos/PhaseDreamsSelections.tsx","games/galeria-de-sonhos/components/PlayTable.tsx","games/galeria-de-sonhos/components/PlayersDreamsCount.tsx","games/galeria-de-sonhos/StepPlayDream.tsx","games/galeria-de-sonhos/components/ListPlayers.tsx","games/galeria-de-sonhos/components/MatchCount.tsx","games/galeria-de-sonhos/StepAnnounceDream.tsx","games/galeria-de-sonhos/utils/constants.ts","games/galeria-de-sonhos/PhaseCardPlay.tsx","games/galeria-de-sonhos/PhaseResolution.tsx","games/galeria-de-sonhos/components/BestMatches.tsx","games/galeria-de-sonhos/PhaseGameOver.tsx","games/galeria-de-sonhos/SessionGaleriaDeSonhos.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/DownSquareOutlined.js","../node_modules/@ant-design/icons/es/icons/DownSquareOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js"],"sourcesContent":["import clsx from 'clsx';\n// Utils\nimport { getColorFromLetter } from 'utils/helpers';\n\ntype CardProps = {\n  children: any;\n  header?: string;\n  footer?: string;\n  color?: string;\n  size?: 'small' | 'medium' | 'large';\n  randomColor?: boolean;\n  className?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n};\nexport const Card = ({\n  children,\n  header = 'Carta',\n  footer,\n  color = 'none',\n  size = 'medium',\n  randomColor = false,\n  className = '',\n  headerClassName = '',\n  footerClassName = '',\n}: CardProps) => {\n  const baseClass = 'card';\n\n  const bgColor = randomColor\n    ? getColorFromLetter(\n        typeof children === 'string'\n          ? children[0].toUpperCase()\n          : header !== 'Carta'\n          ? header[0].toUpperCase()\n          : 'X'\n      )\n    : color;\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <span\n        className={clsx(`${baseClass}__header`, `color-background--${bgColor}`, headerClassName)}\n        style={color.startsWith('#') ? { backgroundColor: color } : {}}\n      >\n        {header}\n      </span>\n      <span className={`${baseClass}__text`}>{children}</span>\n      {footer && <span className={clsx(`${baseClass}__footer`, footerClassName)}>{footer}</span>}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype FloatingHandProps = {\n  children: any;\n  type?: 'hand' | 'stats';\n  subtitle?: any;\n};\n\nexport function FloatingHand({ children, subtitle = '', type = 'hand' }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n      >\n        <span className=\"floating-hand__label\">\n          <AvatarIcon\n            type={type === 'hand' ? 'hand-of-cards' : 'user-stats'}\n            size={isExpanded ? 40 : 60}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <Translate pt=\"Passe o mouse para expandir \" en=\"Hover to expand \" />\n          {subtitle}\n        </span>\n        {children}\n      </div>\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageBlurButtonProps = {\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const [, addBlurCard, blurEnabled] = useBlurCards();\n\n  return blurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => addBlurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n\ntype ImageBlurButtonContainerProps = {\n  cardId: string;\n  className?: string;\n  children: any;\n  [key: string]: any;\n};\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  className,\n  children,\n  ...props\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...props}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\n// Assets\nimport placeholder from 'assets/images/placeholder.jpg';\n// Hooks\nimport { useBlurCards } from 'hooks';\n\ntype ImageCardProps = {\n  imageId: string;\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number;\n  className?: string;\n  preview?: Boolean;\n};\nexport const ImageCard = ({\n  imageId,\n  size = 'medium',\n  cardWidth = 200,\n  className = '',\n  preview = true,\n}: ImageCardProps) => {\n  const [blurredCards, , blurEnabled] = useBlurCards();\n\n  const baseClass = 'image-card';\n\n  const fallbackName = `placeholder-${imageId[imageId.length - 1]}`;\n\n  const imageURL = imageId.replace(/-/g, '/');\n\n  const isBlurred = blurEnabled && blurredCards?.[imageId];\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, isBlurred && `${baseClass}--blur`, className)}>\n      <Image\n        width={cardWidth}\n        src={`${process.env.REACT_APP_TDI_IMAGES_URL}${imageURL}.jpg`}\n        placeholder={<Image preview={false} src={placeholder} width={cardWidth} />}\n        fallback={`${PUBLIC_URL.CARDS}${fallbackName}.jpg`}\n        preview={\n          preview && !isBlurred\n            ? {\n                maskClassName: `${baseClass}__preview-mask`,\n              }\n            : false\n        }\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { DownSquareOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLanguage } from 'hooks';\n// Components\nimport { ImageBlurButton, ImageCard } from '.';\n\ntype ImageCardHandProps = {\n  hand: string[];\n  onSelectCard?: GenericFunction;\n  selectButtonLabel?: string;\n  className?: string;\n  selectButtonClass?: string;\n  sizeRatio?: number;\n  cardSize?: number;\n  minCardSize?: number;\n  disabledSelectButton?: boolean;\n};\n\nexport function ImageCardHand({\n  hand = [],\n  onSelectCard,\n  selectButtonLabel,\n  className = '',\n  selectButtonClass = '',\n  sizeRatio = 8,\n  cardSize,\n  minCardSize = 80,\n  disabledSelectButton = false,\n}: ImageCardHandProps) {\n  const { translate } = useLanguage();\n  // Prefers cardSize otherwise calculates width based on screen and ratio\n  const cardWidth = useCardWidth(sizeRatio, 32, minCardSize);\n\n  return (\n    <Image.PreviewGroup>\n      <div className={clsx('image-card-hand', className)}>\n        {hand.map((cardId) => {\n          return (\n            <div key={`hand-${cardId}`} className=\"image-card-hand__card-container\">\n              {Boolean(onSelectCard) && (\n                <Button\n                  icon={<DownSquareOutlined />}\n                  className={selectButtonClass}\n                  onClick={() => onSelectCard!(cardId)}\n                  size=\"small\"\n                  ghost\n                  disabled={disabledSelectButton}\n                >\n                  {translate('Selecionar', 'Select', selectButtonLabel)}\n                </Button>\n              )}\n              <ImageCard imageId={cardId} cardWidth={cardSize || cardWidth} />\n              <ImageBlurButton cardId={cardId} />\n            </div>\n          );\n        })}\n      </div>\n    </Image.PreviewGroup>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Resources\nimport placeholder from 'assets/images/placeholder.jpg';\n\ntype ImageCardBackProps = {\n  size?: 'small' | 'medium' | 'large';\n  cardWidth?: number | string;\n  className?: string;\n};\n\nexport const ImageCardBack = ({ size = 'medium', cardWidth = 200, className = '' }: ImageCardBackProps) => {\n  const baseClass = 'image-card-back';\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--${size}`, className)}>\n      <Image width={cardWidth} src={placeholder} preview={false} />\n    </div>\n  );\n};\n","// Components\nimport { ImageCard } from './ImageCard';\n\ntype ImageCardPreloadHandProps = {\n  hand: string[];\n};\nexport function ImageCardPreloadHand({ hand }: ImageCardPreloadHandProps) {\n  if (!hand) return <span></span>;\n  return (\n    <div className=\"image-card-preload-hand\">\n      {hand.map((cardId) => (\n        <ImageCard imageId={cardId} cardWidth={1} key={`pre-load-${cardId}`} preview={false} />\n      ))}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype ImageCardSelectButtonProps = {\n  isSelected?: boolean;\n  cardId: ImageCard;\n  onClick: GenericFunction;\n  className?: string;\n  selectLabel?: string;\n  deselectLabel?: string;\n};\n\nexport function ImageCardSelectButton({\n  onClick,\n  cardId,\n  selectLabel,\n  deselectLabel,\n  isSelected = false,\n}: ImageCardSelectButtonProps) {\n  return (\n    <Button\n      shape=\"round\"\n      size=\"small\"\n      ghost={!isSelected}\n      className=\"image-card-select-button\"\n      onClick={() => onClick(cardId)}\n    >\n      <UpCircleOutlined />\n      {isSelected ? (\n        <Translate pt=\"Desmarcar\" en=\"Deselect\" custom={deselectLabel} />\n      ) : (\n        <Translate pt=\"Selecionar\" en=\"Select\" custom={selectLabel} />\n      )}\n      <UpCircleOutlined />\n    </Button>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { StarFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype StarPointsProps = {\n  keyPrefix: string;\n  quantity?: number;\n  className?: string;\n  hideText?: boolean;\n};\n\nexport const StarPoints = ({ keyPrefix, quantity, className, hideText }: StarPointsProps) => {\n  if (!quantity) {\n    return <span />;\n  }\n\n  const isNegative = quantity < 0;\n  const num = Math.abs(quantity);\n\n  const StarsArray = Array.from({ length: num }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n\n  return (\n    <span className={clsx('star-points', isNegative && 'star-points--negative', className)}>\n      {isNegative ? '-' : '+'} <span className=\"star-points__stars\">{StarsArray}</span>\n      {!hideText && (\n        <>\n          <Translate pt=\"ponto\" en=\"point\" />\n          {num > 1 ? 's' : ''}\n        </>\n      )}\n    </span>\n  );\n};\n","// Ant Design Resources\nimport { message } from 'antd';\n// Components\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\n\n/**\n * Pops up a modal with a confirmation button but also closing timeout\n * @param title\n * @param description\n * @param id\n * @param duration\n * @returns\n */\nexport const messageContent = (title: string, description: string, id: string, duration = 30) => {\n  const key = `${id} - ${title}`;\n\n  return {\n    content: (\n      <div>\n        <h1>{title}</h1>\n        <p>{description}</p>\n        <p>\n          <small>\n            <Translate\n              pt=\"Popup fecha automaticamente ou clique para fechar\"\n              en=\"Auto-close or click to close\"\n            />\n          </small>\n        </p>\n      </div>\n    ),\n    top: window.innerWidth / 2 - 100,\n    duration,\n    key,\n    icon: <Icons.VideoGameController style={{ width: '64px' }} />,\n    onClick: () => message.destroy(key),\n  };\n};\n","type ViewProps = {\n  children: any;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","type ViewIfProps = {\n  children: any;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype WordSelectionRulesProps = {\n  scout: GamePlayer;\n};\n\nexport function WordSelectionRules({ scout }: WordSelectionRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Cada sonho tem seu tema... uma palavra.\n            <br />\n            Para essa rodada, <AvatarName player={scout} addressUser size=\"small\" /> escolherá o tema.\n          </>\n        }\n        en={\n          <>\n            Every dream has a theme... a word.\n            <br />\n            For this round,\n            <AvatarName player={scout} addressUser size=\"small\" /> will choose the theme.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GeneralRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Somos caçadores de sonhos!\n            <br />\n            Dentro do tema escolhido, podemos visitar os sonhos de até 10 das 15 pessoas (cartas-imagens)\n            disponíveis.\n            <br />\n            O objetivo é encontrar uns aos outros em cada sonho, então escolha apenas sonhos que você acredita\n            que outros jogadores também irão escolher.\n            <br />\n            Parece fácil, mas se você escolher um sonho que ninguém mais escolheu... vixi...\n          </>\n        }\n        en={\n          <>\n            We are dream scouts!\n            <br />\n            Given the chosen theme, we can visit dreams of 10 of the 15 people (image cards) available.\n            <br />\n            The goal of the game is to match the same visited dreams of other players, therefore choose dreams\n            that you think other players will also choose.\n            <br />\n            It seems easy, but if you choose a dream that nobody else has chosen... well...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionRules({ contained = false }) {\n  return (\n    <Instruction contained={contained}>\n      <Translate\n        pt={\n          <>\n            Selecione sonhos (cartas) que você acha que se relacionam com a palavra-tema da rodada.\n            <br />\n            Você deve selecionar pelo menos uma e no máximo 10.\n          </>\n        }\n        en={\n          <>\n            Now select cards that you think match the round's card.\n            <br />\n            You must select at least one card and a maximum of 10.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionExtendedRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Na próxima fase, de um a um, cada jogador vai escolher um de seus sonhos visitados.\n            <br />\n            Se pelo menos um jogador visitou o mesmo sonho, eles ganham pontos. Se ninguém escolheu, o jogador\n            está fora da rodada!\n            <br />\n            Dai passa-se a vez para o próximo jogador!\n            <br />\n            Sonhos só podem ser escolhidos uma vez por rodada...\n          </>\n        }\n        en={\n          <>\n            On the next phase, one by one, each player will select one of their visited dreams.\n            <br />\n            If at least one other player visited the same dream, they get points! If nobody visited the same\n            dream, you are out of the round!\n            <br />\n            Each dream can be chosen once per round only...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function CardPlayRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            De um em um, cada jogador vai escolher um de seus sonhos visitados se você ainda tem algum\n            disponível.\n            <br />\n            Selecione o sonho que você mais acha que tem chance de outro jogador ter também visitado.\n            <br />\n            Você ganha 3 pontos se apenas mais 1 jogador visitou o mesmo sonho.\n            <br />\n            Você ganha 2 pontos se mais de 1 jogador visitou o mesmo sonho.\n            <br />\n            Você está eliminado da rodada se ninguém mais visitou o sonho escolhido.\n          </>\n        }\n        en={\n          <>\n            One by one, each player chooses one of their visited dreams, if you have any still available.\n            <br />\n            Select the dream you think you have the most chances of matching another player.\n            <br />\n            You get 3 points if only 1 player visited the same dream.\n            <br />\n            You get 2 points if many players have visited the same dream.\n            <br />\n            You are eliminated for this round if nobody else has visited the chosen dream.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\n\nimport { GeneralRules } from './components/RulesBlobs';\nimport { Space } from 'antd';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\n\ntype StepWordSelectionProps = {\n  onSubmitWord: GenericFunction;\n  words: GWord[];\n};\n\nexport function StepWordSelection({ onSubmitWord, words }: StepWordSelectionProps) {\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione o tema\" en=\"Select the theme\" />\n      </Title>\n      <GeneralRules />\n      <Space className=\"space-container\" align=\"center\">\n        {words.map((word, index) => {\n          return (\n            <TransparentButton key={word.id} onClick={() => onSubmitWord({ wordId: word.id })}>\n              <Card header={LETTERS[index]} randomColor>\n                {word.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitWordAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { GeneralRules, WordSelectionRules } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ViewOr } from 'components/views';\nimport { WaitingRoom } from 'components/players';\nimport { AvatarName } from 'components/avatars';\nimport { StepWordSelection } from './StepWordSelection';\n\nfunction PhaseWordSelection({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n  const [scout, isUserTheScout] = useWhichPlayerIsThe('scoutId', state, players);\n\n  const onSubmitWord = useOnSubmitWordAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.WORD_SELECTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos caçadores de sonhos tentando encontrar uns aos outros...\"\n              en=\"We're dream scouts trying to find each other...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"sleep\"\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WordSelectionRules scout={scout} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheScout}>\n          <StepWordSelection onSubmitWord={onSubmitWord} words={state.words} />\n\n          <WaitingRoom\n            players={players}\n            title={<Translate pt=\"Aguarde...\" en=\"Please wait...\" />}\n            instruction={\n              <Translate\n                pt={\n                  <>\n                    <AvatarName player={scout} /> está escolhendo o tema.\n                  </>\n                }\n                en={\n                  <>\n                    <AvatarName player={scout} /> is choosing the theme.\n                  </>\n                }\n              />\n            }\n          >\n            <GeneralRules />\n          </WaitingRoom>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { GALERIA_DE_SONHOS_API } from 'services/adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitWordAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-word',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Palavra enviada com sucesso', 'Word submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua palavra',\n      'Oops, the application failed to send your word'\n    ),\n  });\n\n  return (payload: SubmitWordPayload) => {\n    request({\n      action: 'SUBMIT_WORD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitCardsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-cards',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Cartas enviadas com sucesso', 'Cards submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas cartas',\n      'Oops, the application failed to send your cards'\n    ),\n  });\n\n  return (payload: SubmitCardsPayload) => {\n    request({\n      action: 'SUBMIT_CARDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'play-card',\n    // onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to send your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n","import { shuffle } from 'utils/helpers';\n\nexport const mockDreamSelection = (cards: GImageCard[]): string[] => {\n  const selectionOrder = [2, 11, 6, 8, 9, 3, 13];\n  const numberOfCards = shuffle([1, 2, 3, 3, 3, 4, 4, 5, 6])[0];\n  const selections = selectionOrder.slice(0, numberOfCards);\n  return selections.map((cardIndex) => cards[cardIndex].id);\n};\n","import { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport { ImageBlurButton, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { useCardWidth } from 'hooks';\n\ntype SelectTableProps = {\n  table: GImageCard[];\n  onSelectCard: GenericFunction;\n  selectedCards: BooleanDictionary;\n};\n\nexport function SelectTable({ table, onSelectCard, selectedCards }: SelectTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = selectedCards[card.id];\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n            />\n\n            <Button\n              shape=\"round\"\n              size=\"small\"\n              ghost={!isSelected}\n              className=\"g-table-item-button\"\n              onClick={() => onSelectCard(card.id)}\n            >\n              <UpCircleOutlined />\n              {isSelected ? (\n                <Translate pt=\"Desmarcar\" en=\"Deselect\" />\n              ) : (\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              )}\n              <UpCircleOutlined />\n            </Button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useBooleanDictionary, useMock } from 'hooks';\n// Utils\nimport { mockDreamSelection } from './utils/mock';\n// Components\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { DreamSelectionExtendedRules, DreamSelectionRules } from './components/RulesBlobs';\nimport { SelectTable } from './components/SelectTable';\n\nconst validateSelectedCards = (v: BooleanDictionary) => {\n  return Object.keys(v).length < 10;\n};\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onSubmitCards: GenericFunction;\n  currentRound: number;\n};\n\nexport function StepDreamsSelection({ table, word, onSubmitCards, currentRound }: StepDreamsSelectionProps) {\n  const [selectedCards, onSelectCard] = useBooleanDictionary({}, validateSelectedCards);\n\n  const selectedCount = Object.keys(selectedCards).length;\n\n  useMock(() => {\n    onSubmitCards({ cardsIds: mockDreamSelection(table) });\n  }, []);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Visite Sonhos\" en=\"Visit Dreams\" />\n      </Title>\n      <Card randomColor>{word.text}</Card>\n      <DreamSelectionRules contained />\n\n      <PopoverRule content={<DreamSelectionExtendedRules />} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={selectedCount < 1 || selectedCount > 10}\n          onClick={() => onSubmitCards({ cardsIds: Object.keys(selectedCards) })}\n        >\n          <Translate pt={`Visitar ${selectedCount} sonhos`} en={`Visit ${selectedCount} dreams`} />\n        </Button>\n      </Space>\n      <SelectTable table={table} onSelectCard={onSelectCard} selectedCards={selectedCards} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitCardsAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { ImageCardPreloadHand } from 'components/cards';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { DreamSelectionRules } from './components/RulesBlobs';\nimport { StepDreamsSelection } from './StepDreamsSelection';\n\nfunction PhaseDreamsSelections({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitCards = useOnSubmitCardsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"dream\"\n          title={translate('Visite sonhos!', 'Visit dreams!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <DreamSelectionRules />\n          <ImageCardPreloadHand hand={state.table.map((entry: GImageCard) => entry.id)} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepDreamsSelection\n          table={state.table}\n          word={state.word}\n          onSubmitCards={onSubmitCards}\n          currentRound={state.round.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamsSelections;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth, useLoading } from 'hooks';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageBlurButton, ImageCard, ImageCardBack } from 'components/cards';\nimport { Icons } from 'components/icons';\nimport { Translate } from 'components/language';\n\ntype PlayTableProps = {\n  table: GImageCard[];\n  onPlayCard: GenericFunction;\n  userCards: PlainObject;\n  isPlayAvailable: boolean;\n};\n\nexport function PlayTable({ table, onPlayCard, userCards, isPlayAvailable }: PlayTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  const { isLoading } = useLoading();\n\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = Boolean((userCards ?? {})[card.id]);\n        const userCardEntry = userCards[card.id] ?? {};\n        if (card.used) {\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <ImageBlurButton cardId={card.id} />\n              <ImageCardBack\n                cardWidth={cardWidth - 6}\n                className={clsx(\n                  'g-table-image',\n                  isSelected && 'g-table-image--selected',\n                  getAnimationClass('zoomIn')\n                )}\n              />\n              {userCardEntry.used && (\n                <div className=\"g-star-points\">\n                  {userCardEntry.score === 3 && <Icons.Star className=\"g-star g-star--super-spark\" />}\n                  {userCardEntry.score > 1 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                  {userCardEntry.score > 0 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                </div>\n              )}\n            </li>\n          );\n        }\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx(\n                'g-table-image',\n                isSelected && 'g-table-image--selected',\n                getAnimationClass('zoomIn')\n              )}\n            />\n            {isPlayAvailable && userCards[card.id] && (\n              <Button\n                shape=\"round\"\n                size=\"small\"\n                ghost\n                className=\"g-table-item-button\"\n                onClick={() => onPlayCard(card.id)}\n                disabled={isLoading}\n              >\n                <UpCircleOutlined />\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n                <UpCircleOutlined />\n              </Button>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import clsx from 'clsx';\n// Helpers\n\n// Colors\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { getAnimationClass, getAvatarColorById } from 'utils/helpers';\n\ntype PlayersDreamsCountProps = {\n  players: Players;\n  playerInNightmareId?: PlayerId;\n};\n\nexport function PlayersDreamsCount({ players, playerInNightmareId }: PlayersDreamsCountProps) {\n  return (\n    <div className=\"g-players-dreams-count\">\n      <header className=\"g-players-dreams-count__title\">\n        <Translate en=\"Player Dream Count\" pt=\"Sonhos por Jogador\" />\n      </header>\n      <ul className=\"g-players-dreams-count__players\">\n        {Object.values(players).map((player) => {\n          const cards: GCardInHand[] = Object.values(player.cards);\n          const cardsLeft = cards.filter((card) => !card.used);\n\n          return (\n            <span\n              key={`player-dream-count-${player.id}`}\n              className={clsx(\n                'g-players-dreams-count__player',\n                player.id === playerInNightmareId &&\n                  !player.fallen &&\n                  `g-players-dreams-count__player--nightmare ${getAnimationClass(\n                    'pulse',\n                    undefined,\n                    'faster',\n                    false,\n                    3\n                  )}`\n              )}\n              style={{ backgroundColor: getAvatarColorById(player.avatarId) }}\n            >\n              <Avatar shape=\"square\" id={player.avatarId} alt={player.name} />\n              <div\n                className={clsx(\n                  'g-players-dreams-count__count',\n                  player.fallen && 'g-players-dreams-count__count--fallen'\n                )}\n              >\n                {cardsLeft.length}\n              </div>\n            </span>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { CardPlayRules } from './components/RulesBlobs';\nimport { PlayTable } from './components/PlayTable';\nimport { messageContent } from 'components/pop-up';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { AvatarName } from 'components/avatars';\nimport { PopoverRule } from 'components/rules';\nimport { TurnOrder } from 'components/players';\nimport { PlayersDreamsCount } from './components/PlayersDreamsCount';\nimport { getAnimationClass } from 'utils/helpers';\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onPlayCard: GenericFunction;\n  user: GamePlayer;\n  activePlayer: GamePlayer;\n  isActivePlayer: boolean;\n  isLoading?: boolean;\n  players: GamePlayers;\n  gameOrder: GameOrder;\n\n  setLastTurnCount: GenericFunction;\n  playerInNightmareId?: PlayerId;\n};\n\nexport function StepPlayDream({\n  table,\n  word,\n  onPlayCard,\n  user,\n  activePlayer,\n  isActivePlayer,\n  isLoading,\n  players,\n  gameOrder,\n\n  setLastTurnCount,\n  playerInNightmareId,\n}: StepDreamsSelectionProps) {\n  const { translate } = useLanguage();\n  const [showedMessage, setShowedMessage] = useState(false);\n\n  useEffect(() => {\n    setLastTurnCount(activePlayer.id);\n  });\n\n  useEffect(() => {\n    if (isActivePlayer && !isLoading && !showedMessage) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate(\n            'Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!',\n            'Select the dream card you think will match at least one player'\n          ),\n          activePlayer.id,\n          3\n        )\n      );\n      setShowedMessage(true);\n    }\n  }, [isActivePlayer, activePlayer.id, translate, isLoading, showedMessage]);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"small\">\n        <Translate pt=\"Bingo dos Sonhos\" en=\"Dream Bingo\" />\n      </Title>\n      <Card header={translate('Tema', 'Theme')} randomColor>\n        {word.text}\n      </Card>\n\n      <PlayersDreamsCount players={players} playerInNightmareId={playerInNightmareId} />\n\n      <Instruction contained>\n        {isActivePlayer ? (\n          <Translate\n            pt=\"Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!\"\n            en=\"Select the dream card you think will match at least one player\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('tada')} /> está selecionando\n                um sonho.\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('tada')} /> is selecting a\n                dream.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <PopoverRule content={<CardPlayRules />} />\n\n      <PlayTable\n        table={table}\n        onPlayCard={(cardId: string) => onPlayCard({ cardId })}\n        userCards={user.cards}\n        isPlayAvailable={isActivePlayer}\n      />\n\n      <TurnOrder players={players} order={gameOrder} activePlayerId={activePlayer.id} />\n    </Step>\n  );\n}\n","// Components\nimport { AvatarName } from 'components/avatars';\n\ntype ListPlayersProps = {\n  listPlayers: GamePlayer[];\n  className: string;\n};\n\nexport function ListPlayers({ listPlayers, className }: ListPlayersProps) {\n  return (\n    <ul className={className}>\n      {listPlayers.map((player) => (\n        <li key={`${className}-${player.id}`}>\n          <AvatarName player={player} addressUser />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// Utils\nimport { pluralize } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\n\ntype MatchCountProps = {\n  matchCount: number;\n  lastActivePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n};\n\nexport function MatchCount({ matchCount, lastActivePlayer, playerInNightmare }: MatchCountProps) {\n  const isSpark = matchCount > 0;\n  const isSuperSpark = matchCount === 1;\n\n  const isPlayerInNightmare = playerInNightmare?.id === lastActivePlayer.id;\n\n  return (\n    <div>\n      {isSpark ? (\n        <Translate\n          pt={\n            <p>\n              E encontrou {matchCount} {pluralize(matchCount, 'jogador', 'jogadores')} lá!\n              <br />\n              {isSuperSpark && 'Brilho total!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n          en={\n            <p>\n              And met {matchCount} {pluralize(matchCount, 'player', 'players')} there!\n              <br />\n              {isSuperSpark && 'Super Spark!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n        />\n      ) : (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">Vixi...</h2>\n              Não sei o que dizer... Ninguém visitou esse sonho e{' '}\n              <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> está fora da rodada{' '}\n              <small>(as cartas restantes ainda contarão pontos para outros jogadores)</small>.\n              {isPlayerInNightmare && (\n                <>\n                  Para piorar, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> vai perder 1\n                  ponto por sonho usado até então.\n                </>\n              )}\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">Oops...</h2>I don't know what to say... no one has visited this\n              dream and <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> is/are out of the\n              round <small>(the remaining cards will still count towards scoring for other players)</small>.\n              {isPlayerInNightmare && (\n                <>\n                  To make this worse, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> will\n                  lose a point for each scored dream.\n                </>\n              )}\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Divider, Space } from 'antd';\nimport { useMemo } from 'react';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Constants\nimport { GO_TO_CARD_PLAY_STEP, GO_TO_PLAYER_WITH_NIGHTMARE_STEP } from './utils/constants';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { ImageCard } from 'components/cards';\nimport { TimedButton } from 'components/buttons';\nimport { AdminNextRoundButton } from 'components/admin';\nimport { ListPlayers } from './components/ListPlayers';\nimport { MatchCount } from './components/MatchCount';\n\ntype MatchingPlayersReduceResult = {\n  matchingPlayers: GamePlayer[];\n  fallenMatchingPlayers: GamePlayer[];\n};\n\ntype StepAnnounceDreamProps = {\n  latest: LatestInfo;\n  lastActivePlayer: GamePlayer;\n  activePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n  setStep: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepAnnounceDream({\n  latest,\n  lastActivePlayer,\n  activePlayer,\n  setStep,\n  players,\n  playerInNightmare,\n}: StepAnnounceDreamProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n\n  const { matchingPlayers, fallenMatchingPlayers } = useMemo(\n    () =>\n      (latest?.matchedPlayers ?? []).reduce(\n        (acc: MatchingPlayersReduceResult, playerId) => {\n          const player = players[playerId];\n          if (player?.fallen) {\n            if (lastActivePlayer.id !== playerId) {\n              acc.fallenMatchingPlayers.push(player);\n            }\n          } else {\n            acc.matchingPlayers.push(player);\n          }\n          return acc;\n        },\n        { matchingPlayers: [], fallenMatchingPlayers: [] }\n      ),\n    [latest?.matchedPlayers, players, lastActivePlayer.id]\n  );\n\n  const completedPlayers = Object.values(players).filter((player) => player?.skip || player?.fallen);\n\n  return (\n    <Step fullWidth>\n      <div className=\"g-dream-result\">\n        <header\n          className=\"g-dream-result__header\"\n          style={{ backgroundColor: getAvatarColorById(lastActivePlayer.avatarId) }}\n        >\n          <AvatarName player={lastActivePlayer} size=\"large\" />\n          <Translate pt=\"escolheu visitar o sonho\" en=\"chose to visit the dream\" />:\n        </header>\n        <div className=\"g-dream-result__card\">\n          <ImageCard imageId={latest.cardId} cardWidth={cardWidth} />\n        </div>\n        <div className=\"g-dream-result__match-result\">\n          <MatchCount\n            matchCount={latest.matchCount}\n            lastActivePlayer={lastActivePlayer}\n            playerInNightmare={playerInNightmare}\n          />\n        </div>\n        <div className=\"g-dream-result__matching-players\">\n          {matchingPlayers.length > 0 && (\n            <>\n              <p>\n                <Translate pt=\"Ganharam pontos:\" en=\"Scored points:\" />\n              </p>\n\n              <ListPlayers listPlayers={matchingPlayers} className=\"g-dream-result__matched-players-list\" />\n            </>\n          )}\n        </div>\n        <div className=\"g-dream-result__fallen-matching-players\">\n          {fallenMatchingPlayers.length > 0 && (\n            <>\n              <p className=\"g-dream-result__label\">\n                <Translate\n                  pt=\"Ganhariam pontos, mas já estão eliminados:\"\n                  en=\"Matched by are out of the round:\"\n                />\n              </p>\n\n              <ListPlayers\n                listPlayers={fallenMatchingPlayers}\n                className=\"g-dream-result__matched-players-list fallen\"\n              />\n            </>\n          )}\n        </div>\n        <footer className=\"g-dream-result__footer\">\n          {completedPlayers.length > 0 && (\n            <div>\n              <p className=\"g-dream-result__label center\">\n                <Translate pt=\"Jogadores fora do rodízio\" en=\"Players out of rotation\" />:\n              </p>\n              <ListPlayers\n                listPlayers={completedPlayers}\n                className=\"g-dream-result__matched-players-list g-dream-result__matched-players-list--centered\"\n              />\n            </div>\n          )}\n          <Divider />\n          {latest.isPhaseOver || latest.cardsLeft === 0 ? (\n            <p className=\"center\">\n              <Translate\n                pt=\"Todos jogadores já usaram seus sonhos ou não deram match com ninguém. Vamos para a próxima rodada?\"\n                en=\"All players have used their dreams or didn't match anybody. Ready for the next round?\"\n              />\n            </p>\n          ) : (\n            <Space align=\"center\" className=\"full-width padding\" direction=\"vertical\">\n              <p className=\"center\">\n                <Translate pt=\"Próximo jogador:\" en=\"Next player:\" />\n                <AvatarName player={activePlayer} addressUser />\n              </p>\n\n              <TimedButton\n                type=\"primary\"\n                duration={10}\n                disabled\n                onExpire={() =>\n                  setStep(\n                    Boolean(playerInNightmare?.id && !playerInNightmare?.fallen)\n                      ? GO_TO_PLAYER_WITH_NIGHTMARE_STEP\n                      : GO_TO_CARD_PLAY_STEP\n                  )\n                }\n              >\n                <Translate pt=\"Continuando em...\" en=\"Continuing in...\" />\n              </TimedButton>\n            </Space>\n          )}\n        </footer>\n      </div>\n\n      {(latest.isPhaseOver || latest.cardsLeft === 0) && <AdminNextRoundButton buttonText=\"Ranking\" />}\n    </Step>\n  );\n}\n","export const GO_TO_PLAYER_WITH_NIGHTMARE_STEP = 1;\nexport const GO_TO_SEE_CARD_STEP = 3;\nexport const GO_TO_CARD_PLAY_STEP = 5;\n","import { useEffect, useState } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useWhichPlayerIsThe, useStep, useLoading } from 'hooks';\nimport { useOnPlayCardAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport {\n  GO_TO_CARD_PLAY_STEP,\n  GO_TO_PLAYER_WITH_NIGHTMARE_STEP,\n  GO_TO_SEE_CARD_STEP,\n} from './utils/constants';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, PhaseTimerReset } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Instruction } from 'components/text';\nimport { CardPlayRules } from './components/RulesBlobs';\nimport { StepPlayDream } from './StepPlayDream';\nimport { StepAnnounceDream } from './StepAnnounceDream';\n\nfunction PhaseCardPlay({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep, setStep } = useStep();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const [activePlayer, isActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [lastActivePlayer] = useWhichPlayerIsThe('lastActivePlayerId', state, players);\n  const [playerInNightmare] = useWhichPlayerIsThe('playerInNightmareId', state, players);\n\n  const [lastTurnCount, setLastTurnCount] = useState('');\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  useEffect(() => {\n    if (lastTurnCount && state.turnCount !== lastTurnCount) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.turnCount]); // eslint-disable-line\n\n  useEffect(() => {\n    if (!state.activePlayerId) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.activePlayerId, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.CARD_PLAY}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"door-sign\"\n          title={translate('Hora do Bingo dos Sonhos!', 'Time for the Dream Bingo!')}\n          onClose={() =>\n            setStep(playerInNightmare.id ? GO_TO_PLAYER_WITH_NIGHTMARE_STEP : GO_TO_CARD_PLAY_STEP)\n          }\n          duration={state.round.current < 3 ? 20 : 5}\n        >\n          <CardPlayRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 2 */}\n        <PhaseAnnouncement\n          type=\"nightmare\"\n          animationType=\"tada\"\n          title={\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> está em apuros!\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> is in danger!\n                </>\n              }\n            />\n          }\n          onClose={() => setStep(GO_TO_CARD_PLAY_STEP)}\n          currentRound={state?.round?.current}\n          duration={state.turnCount < 1 ? 10 : 3}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quando um jogador sozinho selecionou o maior número de sonhos, ele é considerado estar em um pesadelo! Se ele não conseguir achar outro jogador que marcou o mesmo sonho para cada uma das cartas selecionadas, ele perde 1 ponto por carta.\"\n              en=\"When a player alone selected the most dream cards they are considered to be in a nightmare! If they are not able to match every single dream, they will lose 1 point per card.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 3 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 4 */}\n        <StepAnnounceDream\n          latest={state.latest}\n          lastActivePlayer={lastActivePlayer}\n          setStep={setStep}\n          players={players}\n          activePlayer={activePlayer}\n          playerInNightmare={playerInNightmare}\n        />\n\n        {/* Step 5 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 6 */}\n        <StepPlayDream\n          table={state.table}\n          word={state.word}\n          onPlayCard={onPlayCard}\n          user={user}\n          activePlayer={activePlayer}\n          isActivePlayer={isActivePlayer}\n          players={players}\n          gameOrder={state.gameOrder}\n          isLoading={isLoading}\n          setLastTurnCount={setLastTurnCount}\n          playerInNightmareId={state.playerInNightmareId}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction } from 'components/text';\nimport { AdminNextRoundButton } from 'components/admin';\n\nfunction PhaseResolution({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.RESOLUTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"rank\"\n          title={translate('Ranking', 'Ranking')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate pt=\"E quem deu mais matches foi...\" en=\"And who matched the most was...\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepRankingWrapper\n          players={players}\n          ranking={state.ranking}\n          gainedPointsDescriptions={[\n            <Translate pt=\"Pontos por encontrar só um jogador\" en=\"Points for matching only 1 player\" />,\n            <Translate\n              pt=\"Pontos por encontrar mais de um jogador\"\n              en=\"Points for matching with more players\"\n            />,\n            <Translate\n              pt=\"Pontos perdidos por não ter dado match e estar em um pesadelo\"\n              en=\"Points lost for not matching any player while in a nightmare\"\n            />,\n          ]}\n        >\n          <AdminNextRoundButton round={state.round} lastRound={state.isLastRound} />\n        </StepRankingWrapper>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar, Divider } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\n\ntype BestMatchesProps = {\n  bestMatches: GImageCardMatch[];\n};\n\nexport function BestMatches({ bestMatches }: BestMatchesProps) {\n  const cardWidth = useCardWidth(7, 8, 140, 150);\n\n  return (\n    <Step>\n      <Divider />\n      <Title size=\"x-small\" level={3}>\n        <Translate pt=\"Sonhos mais visitados\" en=\"Most visited dreams\" />\n      </Title>\n\n      <ul className=\"g-best-matches\">\n        {orderBy(bestMatches, 'matchedPlayers.length', 'desc').map((entry, index) => {\n          return (\n            <div key={`${entry.id}-${index}`} className=\"g-best-matches__entry\">\n              <div className=\"g-best-matches__label\">\n                <Avatar size=\"small\">{entry.matchedPlayers.length}</Avatar>\n                <span>{entry.text}</span>\n              </div>\n              <ImageCard\n                imageId={entry.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n              />\n            </div>\n          );\n        })}\n      </ul>\n    </Step>\n  );\n}\n","// Components\nimport { GameOverWrapper } from 'components/game-over';\n\nimport { BestMatches } from './components/BestMatches';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon=\"ladder\">\n      <BestMatches bestMatches={state.bestMatches} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseDreamsSelection from './PhaseDreamsSelections';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionGaleriaDeSonhos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.GALERIA_DE_SONHOS.WORD_SELECTION:\n        return PhaseWordSelection;\n      case PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION:\n        return PhaseDreamsSelection;\n      case PHASES.GALERIA_DE_SONHOS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.GALERIA_DE_SONHOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.GALERIA_DE_SONHOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionGaleriaDeSonhos;\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\n\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar DownSquareOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.5 658.7c3.2 4.4 9.7 4.4 12.9 0l178-246c3.8-5.3 0-12.7-6.5-12.7H643c-10.2 0-19.9 4.9-25.9 13.2L512 558.6 406.8 413.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\" } }] }, \"name\": \"down-square\", \"theme\": \"outlined\" };\nexport default DownSquareOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownSquareOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownSquareOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownSquareOutlined = function DownSquareOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownSquareOutlinedSvg\n  }));\n};\n\nDownSquareOutlined.displayName = 'DownSquareOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownSquareOutlined);","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\n\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);"],"names":["Card","children","header","footer","color","size","randomColor","className","headerClassName","footerClassName","baseClass","bgColor","getColorFromLetter","toUpperCase","clsx","style","startsWith","backgroundColor","FloatingHand","subtitle","type","useState","isExpanded","setIsExpanded","translate","useLanguage","onMouseOver","onMouseLeave","alt","pt","en","ImageBlurButton","cardId","useBlurCards","addBlurCard","placement","title","ghost","onClick","EyeInvisibleOutlined","ImageBlurButtonContainer","props","ImageCard","imageId","cardWidth","preview","blurredCards","blurEnabled","fallbackName","length","imageURL","replace","isBlurred","width","src","process","placeholder","fallback","PUBLIC_URL","maskClassName","ImageCardHand","hand","onSelectCard","selectButtonLabel","selectButtonClass","sizeRatio","cardSize","minCardSize","disabledSelectButton","useCardWidth","map","Boolean","icon","DownSquareOutlined","disabled","ImageCardBack","ImageCardPreloadHand","ImageCardSelectButton","selectLabel","deselectLabel","isSelected","shape","UpCircleOutlined","custom","StarPoints","keyPrefix","quantity","hideText","isNegative","num","Math","abs","StarsArray","Array","from","_","i","StarFilled","messageContent","description","id","duration","key","content","top","window","innerWidth","message","View","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","WordSelectionRules","scout","player","addressUser","GeneralRules","contained","DreamSelectionRules","DreamSelectionExtendedRules","CardPlayRules","StepWordSelection","onSubmitWord","words","fullWidth","align","word","index","wordId","LETTERS","text","players","state","info","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheScout","request","useAPICall","apiFunction","GALERIA_DE_SONHOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitWordAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstructionType","round","onPressButton","buttonText","time","onClose","currentRound","current","instruction","mockDreamSelection","cards","numberOfCards","shuffle","slice","cardIndex","SelectTable","table","selectedCards","card","validateSelectedCards","v","Object","keys","StepDreamsSelection","onSubmitCards","useBooleanDictionary","selectedCount","useMock","cardsIds","useOnSubmitCardsAPIRequest","entry","PlayTable","onPlayCard","userCards","isPlayAvailable","isLoading","useLoading","userCardEntry","used","getAnimationClass","score","PlayersDreamsCount","playerInNightmareId","values","cardsLeft","filter","fallen","undefined","getAvatarColorById","avatarId","name","StepPlayDream","user","activePlayer","isActivePlayer","gameOrder","setLastTurnCount","showedMessage","setShowedMessage","useEffect","order","activePlayerId","ListPlayers","listPlayers","MatchCount","matchCount","lastActivePlayer","playerInNightmare","isSpark","isSuperSpark","isPlayerInNightmare","pluralize","StepAnnounceDream","latest","useMemo","matchedPlayers","reduce","acc","playerId","fallenMatchingPlayers","push","matchingPlayers","completedPlayers","skip","isPhaseOver","direction","onExpire","useUser","lastTurnCount","useOnPlayCardAPIRequest","turnCount","animationType","ranking","gainedPointsDescriptions","lastRound","isLastRound","BestMatches","bestMatches","level","orderBy","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseDreamsSelection","PhaseCardPlay","PhaseResolution","PhaseGameOver","PageError","CrownFilled","ref","React","AntdIcon","_objectSpread","CrownFilledSvg","displayName","DownSquareOutlinedSvg","UpCircleOutlinedSvg"],"sourceRoot":""}