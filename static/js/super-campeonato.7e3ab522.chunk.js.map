{"version":3,"file":"static/js/super-campeonato.7e3ab522.chunk.js","mappings":"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","sources":["components/icons/TrophyIcon.tsx","games/super-campeonato/utils/constants.ts","games/super-campeonato/utils/mock.ts","games/super-campeonato/components/ContenderCard.tsx","games/super-campeonato/components/ContendersHand.tsx","games/super-campeonato/StepSelectChallenge.tsx","games/super-campeonato/PhaseChallengeSelection.tsx","games/super-campeonato/utils/api-requests.ts","games/super-campeonato/components/Challenge.tsx","games/super-campeonato/StepSelectContenders.tsx","games/super-campeonato/PhaseContendersSelection.tsx","games/super-campeonato/components/BracketContenderVotes.tsx","games/super-campeonato/components/Brackets.tsx","games/super-campeonato/components/ContendersSelect.tsx","games/super-campeonato/components/BetsForm.tsx","games/super-campeonato/StepMakeYourBets.tsx","games/super-campeonato/utils/helpers.ts","games/super-campeonato/components/BetsFloatingHand.tsx","games/super-campeonato/PhaseBets.tsx","games/super-campeonato/components/TierTitle.tsx","games/super-campeonato/components/TierContenders.tsx","games/super-campeonato/components/Voting.tsx","games/super-campeonato/utils/useBracketVoting.ts","games/super-campeonato/StepBattle.tsx","games/super-campeonato/PhaseBattle.tsx","games/super-campeonato/components/PlayersBets.tsx","games/super-campeonato/StepRanking.tsx","games/super-campeonato/StepWinner.tsx","games/super-campeonato/PhaseResults.tsx","games/super-campeonato/PhaseGameOver.tsx","games/super-campeonato/SessionSuperCampeonato.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/TrophyOutlined.js","../node_modules/@ant-design/icons/es/icons/TrophyOutlined.js"],"sourcesContent":["export function TrophyIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M397.763 87.5h-98.509v213.476h98.509c58.855 0 106.737-47.882 106.737-106.738S456.618 87.5 397.763 87.5zm0 183.476h-68.509V117.5h68.509c42.381 0 76.738 34.357 76.738 76.738-.001 42.381-34.357 76.738-76.738 76.738zM114.237 87.5C55.382 87.5 7.5 135.382 7.5 194.238s47.882 106.738 106.737 106.738h98.509V87.5zm68.509 183.476h-68.509c-42.381 0-76.738-34.357-76.738-76.738S71.856 117.5 114.237 117.5h68.509zM314 419.5H198l15-91h86z\"\n      ></path>\n      <path fill=\"#fee97d\" d=\"M299 328.5h-30l15 91h30z\"></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M382.221 504.5H129.779a7 7 0 01-7-7v-11.629c0-22.091 17.909-40 40-40h186.442c22.091 0 40 17.909 40 40V497.5a7 7 0 01-7 7z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M349.221 445.871h-30c22.092 0 40 17.909 40 40V497.5a7 7 0 01-7 7h30a7 7 0 007-7v-11.629c0-22.092-17.909-40-40-40zm-5 0H167.779v-3.629c0-22.091 17.909-40 40-40h96.442c22.091 0 40 17.909 40 40z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M304.221 402.241h-30c22.092 0 40 17.909 40 40v3.629h30v-3.629c0-22.091-17.909-40-40-40z\"\n      ></path>\n      <path\n        fill=\"#fef0ae\"\n        d=\"M411.5 57.5h-311c-13.807 0-25-11.193-25-25s11.193-25 25-25h311c13.807 0 25 11.193 25 25s-11.193 25-25 25z\"\n      ></path>\n      <path\n        fill=\"#fee97d\"\n        d=\"M411.5 7.5h-30c13.807 0 25 11.193 25 25s-11.193 25-25 25h30c13.807 0 25-11.193 25-25s-11.193-25-25-25zM256 362.5c-83.119 0-150.5-67.381-150.5-150.5V57.5h301V212c0 83.119-67.381 150.5-150.5 150.5z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M376.5 57.5V212c0 78.056-59.424 142.229-135.5 149.757 4.934.488 9.937.743 15 .743 83.119 0 150.5-67.381 150.5-150.5V57.5z\"\n      ></path>\n      <circle cx=\"256\" cy=\"207.96\" r=\"94.169\" fill=\"#fff\"></circle>\n      <path\n        fill=\"#fee97d\"\n        d=\"M262.277 154.391l13.139 26.623a7 7 0 005.271 3.829l29.38 4.269c5.742.834 8.034 7.89 3.879 11.94l-21.26 20.723a6.998 6.998 0 00-2.013 6.196l5.019 29.261c.981 5.718-5.021 10.079-10.157 7.379l-26.278-13.815a7.001 7.001 0 00-6.515 0l-26.278 13.815c-5.135 2.7-11.137-1.661-10.157-7.379l5.019-29.261a7 7 0 00-2.013-6.196l-21.26-20.723c-4.155-4.05-1.862-11.106 3.879-11.94l29.38-4.269a7 7 0 005.271-3.829l13.139-26.623c2.569-5.203 9.987-5.203 12.555 0z\"\n      ></path>\n      <path\n        fill=\"#f4da6e\"\n        d=\"M313.946 201.052c4.155-4.05 1.862-11.106-3.88-11.94l-29.38-4.269a6.997 6.997 0 01-5.27-3.829l-13.139-26.623c-2.568-5.203-9.987-5.203-12.554 0l-10.888 22.061 3.874 7.85a18.632 18.632 0 0014.03 10.193c15.284 2.221 21.386 21.003 10.327 31.783a18.632 18.632 0 00-5.359 16.493l1.755 10.236 22.073 11.604c5.135 2.7 11.137-1.661 10.157-7.379l-5.019-29.261a7 7 0 012.013-6.196z\"\n      ></path>\n      <path d=\"M282.025 177.458l-13.022-26.387c-2.462-4.985-7.443-8.082-13.003-8.082s-10.541 3.097-13.003 8.083l-13.022 26.387-29.119 4.231c-5.502.799-9.987 4.581-11.706 9.868-1.718 5.288-.312 10.983 3.669 14.865l21.071 20.539-4.975 29.003c-.939 5.479 1.271 10.914 5.77 14.182s10.349 3.691 15.271 1.104L256 257.557l26.045 13.693c4.903 2.578 10.759 2.174 15.271-1.104 4.498-3.268 6.709-8.702 5.769-14.182l-4.974-29.003 21.071-20.539c3.981-3.881 5.387-9.577 3.669-14.865-1.719-5.287-6.204-9.068-11.706-9.867zm5.426 38.946a14.494 14.494 0 00-4.169 12.834l4.847 28.264-25.382-13.345a14.498 14.498 0 00-13.495 0l-25.381 13.344 4.847-28.262a14.495 14.495 0 00-4.169-12.835l-20.534-20.016 28.377-4.124a14.494 14.494 0 0010.918-7.932L256 158.618l12.69 25.714a14.494 14.494 0 0010.918 7.932l28.377 4.124zm194.096-99.749c-17.941-19.36-41.716-31.799-67.547-35.49v-16.27c16.756-1.282 30-15.316 30-32.394C444 14.58 429.421 0 411.5 0h-311C82.579 0 68 14.58 68 32.5c0 17.078 13.244 31.112 30 32.394v16.27c-25.714 3.676-49.409 16.029-67.321 35.248a7.5 7.5 0 0010.972 10.228C56.721 110.471 76.495 99.908 98 96.352v15.236c-39.204 7.62-68 42.024-68 82.652 0 22.509 8.765 43.663 24.675 59.561 15.532 15.543 36.076 24.242 57.996 24.641a157.847 157.847 0 008.007 15.038h-6.438c-54.722 0-99.24-44.519-99.24-99.24 0-14.091 2.904-27.711 8.633-40.48a7.5 7.5 0 00-13.685-6.14C3.347 162.333 0 178.019 0 194.24c0 62.992 51.248 114.24 114.24 114.24h16.729c17.756 22.957 41.679 40.906 69.267 51.348l-6.089 36.917c-18.396 5.522-32.123 21.915-33.701 41.685-25.112 1.221-45.167 22.032-45.167 47.441V497.5c0 7.995 6.505 14.5 14.5 14.5H382.22c7.995 0 14.5-6.505 14.5-14.5v-11.629c0-25.409-20.055-46.22-45.167-47.441-1.579-19.771-15.306-36.163-33.701-41.685l-6.089-36.917c27.588-10.441 51.511-28.391 69.267-51.348h16.729c62.992 0 114.24-51.248 114.24-114.24.001-28.841-10.814-56.394-30.452-77.585zM65.281 243.195C52.203 230.126 45 212.74 45 194.24c0-32.392 22.265-59.968 53-67.308V212c0 17.851 2.98 35.018 8.461 51.034-15.554-1.728-29.958-8.609-41.18-19.839zM100.5 50C90.851 50 83 42.149 83 32.5S90.851 15 100.5 15h311c9.649 0 17.5 7.851 17.5 17.5S421.149 50 411.5 50zM414 126.932c30.735 7.34 53 34.916 53 67.308 0 18.5-7.203 35.886-20.286 48.958-11.218 11.227-25.621 18.108-41.175 19.836C411.02 247.018 414 229.851 414 212zm-77.518 311.439h-22.895c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h35.634c17.921 0 32.5 14.58 32.5 32.5V497H130.279v-11.129c0-17.92 14.579-32.5 32.5-32.5h115.808c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5H175.518c1.921-16.101 15.651-28.629 32.261-28.629h96.441c16.611-.001 30.342 12.527 32.262 28.629zm-126.801-43.63l4.987-30.237C227.849 368.08 241.703 370 256 370s28.151-1.92 41.332-5.496l4.987 30.237zM256 355c-78.851 0-143-64.149-143-143V65h286v147c0 78.851-64.149 143-143 143zm141.76-61.52h-6.438a157.741 157.741 0 008.007-15.038c21.919-.399 42.463-9.097 57.991-24.637C473.235 237.903 482 216.749 482 194.24c0-40.627-28.796-75.032-68-82.652V96.352c21.605 3.57 41.449 14.208 56.545 30.498C487.604 145.259 497 169.192 497 194.24c0 54.721-44.519 99.24-99.24 99.24zM256 106.291c-56.061 0-101.67 45.609-101.67 101.669S199.939 309.629 256 309.629 357.67 264.02 357.67 207.96 312.061 106.291 256 106.291zm0 188.338c-47.79 0-86.67-38.88-86.67-86.669s38.88-86.669 86.67-86.669 86.67 38.88 86.67 86.669-38.88 86.669-86.67 86.669z\"></path>\n    </svg>\n  );\n}\n","export const ACTIONS = {\n  SUBMIT_CHALLENGE: 'SUBMIT_CHALLENGE',\n  SUBMIT_CONTENDERS: 'SUBMIT_CONTENDERS',\n  SUBMIT_BETS: 'SUBMIT_BETS',\n  SUBMIT_VOTES: 'SUBMIT_VOTES',\n};\n\nexport const voteTarget: Record<number, number> = {\n  0: 8,\n  1: 8,\n  2: 9,\n  3: 9,\n  4: 10,\n  5: 10,\n  6: 11,\n  7: 11,\n  8: 12,\n  9: 12,\n  10: 13,\n  11: 13,\n  12: 14,\n  13: 14,\n};\n\nexport const targetByTier: Record<WBracketTier, number> = {\n  quarter: 4,\n  semi: 2,\n  final: 1,\n  winner: 0,\n};\n","import { getRandomItem, shuffle } from 'utils/helpers';\nimport { voteTarget } from './constants';\n\nexport function mockSelectChallenge(challenges: DefaultTextCard[]): CardId {\n  return getRandomItem(challenges).id;\n}\n\nexport function mockSelectContender(contenders: WContender[]): CardId {\n  return getRandomItem(contenders).id;\n}\n\nexport function mockBets(brackets: WBracket[]) {\n  const contenders = shuffle(\n    brackets.filter((entry) => entry.tier === 'quarter').map((entry) => ({ id: entry.id, name: entry.name }))\n  );\n\n  return {\n    quarter: contenders[0].id,\n    semi: contenders[1].id,\n    final: contenders[2].id,\n  };\n}\n\nexport function mockVotes(bracketedContenders: WBracket[][]) {\n  return bracketedContenders.reduce((acc: NumberDictionary, pair) => {\n    const vote = getRandomItem(pair);\n    acc[voteTarget[vote.position]] = vote.position;\n    return acc;\n  }, {});\n}\n","import clsx from 'clsx';\n// Ant Design resources\nimport { Image } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\nimport { useBlurCards } from 'hooks/useBlurCards';\n\ntype ContenderCardProps = {\n  size: number;\n  overlayColor: string;\n  contender: WContender | WBracket;\n  className?: string;\n  hideName?: boolean;\n};\n\nexport function ContenderCard({ size, overlayColor, contender, className, hideName }: ContenderCardProps) {\n  const { language } = useLanguage();\n  const { shouldBeBlurred } = useBlurCards();\n\n  const isBlurred = shouldBeBlurred(contender.id);\n\n  const imageURL = contender.id.replace(/-/g, '/');\n\n  return (\n    <div className={clsx('w-contender', className)} style={{ width: `${size}px` }}>\n      {!hideName && <span className=\"w-contender-name\">{contender.name[language]}</span>}\n      <img\n        src={`${PUBLIC_URL.IN_GAME}/w-overlay-${overlayColor}.png`}\n        className=\"w-contender-overlay\"\n        alt=\"contender\"\n        style={{ width: `${size}px` }}\n      />\n      <Image\n        src={`${process.env.REACT_APP_TD_IMAGES_URL}${imageURL}.jpg`}\n        width={size}\n        className={clsx('w-contender-image', isBlurred && 'w-contender-image--blur')}\n        fallback={`${PUBLIC_URL.IN_GAME}/w-no-image.jpg`}\n        alt={contender.name[language]}\n      />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\n// Components\nimport { FloatingHand } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { ContenderCard } from './ContenderCard';\n\ntype ContendersHandProps = {\n  contenders: WContender[];\n  onSelect?: GenericFunction;\n};\n\nexport function ContendersHand({ contenders, onSelect }: ContendersHandProps) {\n  const cardWidth = useCardWidth(5, 32, 100);\n\n  return (\n    <FloatingHand>\n      <ul className=\"w-contenders-hand\">\n        {contenders.map((contender) => (\n          <li key={contender.id} className=\"w-contenders-hand__entry\">\n            {Boolean(onSelect) && (\n              <Button\n                onClick={() => onSelect!(contender.id)}\n                shape=\"round\"\n                ghost\n                className=\"w-contenders-hand__button\"\n              >\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              </Button>\n            )}\n            <ContenderCard contender={contender} overlayColor=\"gray\" size={cardWidth} />\n          </li>\n        ))}\n      </ul>\n    </FloatingHand>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { mockSelectChallenge } from './utils/mock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\nimport { ContendersHand } from './components/ContendersHand';\n\ntype StepSelectChallengeProps = {\n  onSubmitChallenge: GenericFunction;\n  challenges: DefaultTextCard[];\n  userContenders: WContender[];\n  players: GamePlayers;\n};\n\nexport function StepSelectChallenge({\n  onSubmitChallenge,\n  challenges,\n  userContenders,\n  players,\n}: StepSelectChallengeProps) {\n  useMock(() => {\n    onSubmitChallenge({ challengeId: mockSelectChallenge(challenges) });\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Selecione o desafio da rodada\" en=\"Select the theme for the round\" />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Cada rodada é feita ao redor de um desafio. Você tem competidores em mãos (na barra abaixo) e um\n              deles irá participar desta rodada.\n              <br />\n              Selecione o desafio que você acha que um dos seus competidores tem mais change de vencer.\n              <br />\n              Você ganha 2 pontos se ele(a) vencer.\n            </>\n          }\n          en={\n            <>\n              Each round has a challenge for the contenders to battle on! You have a hand of contenders and\n              one of them will participate in this round.\n              <br />\n              Select a challenge you think one of your contenders have the best chance of winning.\n              <br />\n              You get 2 points if they win.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" align=\"center\">\n        {challenges.map((challenge, index) => {\n          return (\n            <TransparentButton\n              key={challenge.id}\n              onClick={() => onSubmitChallenge({ challengeId: challenge.id })}\n            >\n              <Card header={LETTERS[index]} randomColor>\n                {challenge.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n\n      <ContendersHand contenders={userContenders} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\nimport { useOnSubmitChallengeAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepSelectChallenge } from './StepSelectChallenge';\nimport { SelectListIcon } from 'components/icons/SelectListIcon';\nimport { ContendersHand } from './components/ContendersHand';\n\nfunction PhaseChallengeSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitChallenge = useOnSubmitChallengeAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.SUPER_CAMPEONATO.CHALLENGE_SELECTION}\n    >\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoomContent={<ContendersHand contenders={user.contenders} />}\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={4} circleColor=\"pink\">\n          <Instruction contained>\n            {state.round.current === state.round.total ? (\n              <Translate pt=\"Rodada final: Somente os finalistas!\" en=\"Final Round: Only finalists\" />\n            ) : (\n              <Translate pt=\"Quem vai ganhar a medalha de ouro?\" en=\"Who's gonna get the gold medal?\" />\n            )}\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<SelectListIcon />}\n          title={translate('Desafio', 'Challenge')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Qual o desafio da rodada?\" en=\"What's the round's challenge?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepSelectChallenge\n          onSubmitChallenge={onSubmitChallenge}\n          challenges={state.challenges}\n          userContenders={user.contenders}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseChallengeSelection;\n","import { SUPER_CAMPEONATO_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { ACTIONS } from './constants';\n\nexport function useOnSubmitChallengeAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-challenge',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Desafio enviado com sucesso!', 'Challenge send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o desafio',\n      'Oops, the application failed to submit the challenge'\n    ),\n  });\n\n  return (payload: SubmitChallengePayload) => {\n    request({\n      action: ACTIONS.SUBMIT_CHALLENGE,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitContenderAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-contender',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Competidor enviado com sucesso!', 'Contender send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o competidor',\n      'Oops, the application failed to submit the contender'\n    ),\n  });\n\n  return (payload: SubmitContendersPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_CONTENDERS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitBetsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-bets',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Apostas enviadas com sucesso!', 'Bets send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar apostas',\n      'Oops, the application failed to submit bets'\n    ),\n  });\n\n  return (payload: SubmitBetsPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_BETS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SUPER_CAMPEONATO_API.submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Votos enviados com sucesso!', 'Votes send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar votos',\n      'Oops, the application failed to submit votes'\n    ),\n  });\n\n  return (payload: SubmitBattleVotesPayload) => {\n    request({\n      action: ACTIONS.SUBMIT_VOTES,\n      ...payload,\n    });\n  };\n}\n","// Ant Design resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Card } from 'components/cards';\n\ntype ChallengeProps = {\n  challenge: DefaultTextCard;\n};\n\nexport function Challenge({ challenge }: ChallengeProps) {\n  const { translate } = useLanguage();\n  return (\n    <Space className=\"space-container\" align=\"center\">\n      <Card header={translate('Desafio', 'Challenge')} color=\"purple\">\n        {challenge.text}\n      </Card>\n    </Space>\n  );\n}\n","// Ant Design Resources\n// Hooks\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockSelectContender } from './utils/mock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ContendersHand } from './components/ContendersHand';\nimport { Challenge } from './components/Challenge';\n\ntype StepSelectContendersProps = {\n  onSubmitContender: GenericFunction;\n  challenge: DefaultTextCard;\n  userContenders: WContender[];\n  players: GamePlayers;\n};\n\nexport function StepSelectContenders({\n  onSubmitContender,\n  challenge,\n  userContenders,\n  players,\n}: StepSelectContendersProps) {\n  useMock(() => {\n    onSubmitContender({ contendersId: mockSelectContender(userContenders) });\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Quem pode ganhar esse desafio?\" en=\"Who can win this challenge?\" />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Instruction contained>\n        <Translate\n          pt=\"Selecione um de seus competidores para entrar no campeonato\"\n          en=\"Select one of your contenders to join the championship\"\n        />\n      </Instruction>\n\n      <ContendersHand\n        contenders={userContenders}\n        onSelect={(id) => onSubmitContender({ contendersId: id })}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\nimport { useOnSubmitContenderAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepSelectContenders } from './StepSelectContenders';\nimport { AnonymousIcon } from 'components/icons/AnonymousIcon';\nimport { ContendersHand } from './components/ContendersHand';\n\nfunction PhaseContenderSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitContender = useOnSubmitContenderAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.SUPER_CAMPEONATO.CONTENDER_SELECTION}\n    >\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoomContent={<ContendersHand contenders={user.contenders} />}\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<AnonymousIcon />}\n          title={translate('Competidores', 'Contenders')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Instruction>\n            <Translate pt=\"Quem tem chance de ganhar?\" en=\"Who has what it takes?\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSelectContenders\n          onSubmitContender={onSubmitContender}\n          challenge={state.challenge}\n          userContenders={user.contenders}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseContenderSelection;\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Avatar } from 'components/avatars';\n\ntype BracketContenderVotesProps = {\n  bracket: WBracket;\n  players: GamePlayers;\n};\n\nexport function BracketContenderVotes({ bracket, players }: BracketContenderVotesProps) {\n  return (bracket.votes ?? []).length > 0 ? (\n    <AntAvatar.Group className=\"w-contender-votes\" maxCount={3} size=\"small\">\n      {bracket.votes?.map((vote) => (\n        <Avatar\n          size=\"small\"\n          id={players[vote].avatarId}\n          alt={players[vote].name}\n          key={`${bracket.id}-${bracket.votes}`}\n        />\n      ))}\n    </AntAvatar.Group>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\n// Components\nimport { Translate } from 'components/language';\nimport { BracketContenderVotes } from './BracketContenderVotes';\nimport { ContenderCard } from './ContenderCard';\n\ntype BracketsProps = {\n  brackets: WBracket[];\n  activeTier: WBracketTier;\n  players: GamePlayers;\n};\n\ntype BracketTiers = {\n  quarter: WBracket[];\n  semi: WBracket[];\n  final: WBracket[];\n  winner: WBracket[];\n};\n\nconst getContenderColor = (index: number, activeTier: WBracketTier) => {\n  if (activeTier === 'semi') {\n    return index % 2 === 0 ? 'orange' : 'green';\n  }\n  return index % 2 === 0 ? 'red' : 'blue';\n};\n\nexport function Brackets({ brackets, activeTier, players }: BracketsProps) {\n  const { quarter, semi, final, winner } = brackets.reduce(\n    (acc: BracketTiers, entry) => {\n      acc[entry.tier].push(entry);\n\n      return acc;\n    },\n    {\n      quarter: [],\n      semi: [],\n      final: [],\n      winner: [],\n    }\n  );\n  return (\n    <div className=\"w-brackets-container\">\n      <div className=\"tournament-headers\">\n        <h3>\n          <Translate pt=\"Quartas\" en=\"Quarter-finals\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Semifinais\" en=\"Semifinals\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Final\" en=\"Final\" />\n        </h3>\n        <h3>\n          <Translate pt=\"Campeão\" en=\"Winner\" />\n        </h3>\n      </div>\n      <div className=\"w-tournament-brackets\">\n        <ul className=\"w-bracket w-bracket--1\">\n          {quarter.map((entry, index) => (\n            <li\n              key={`${entry.id}-${entry.position}`}\n              className={clsx('w-team-item', entry.win && 'w-team-item--win')}\n            >\n              <ContenderCard\n                size={100}\n                overlayColor={activeTier === entry.tier ? getContenderColor(index, activeTier) : 'gray'}\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n              <BracketContenderVotes bracket={entry} players={players} />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--2\">\n          {semi.map((entry) => (\n            <li\n              key={`${entry.id}-${entry.position}`}\n              className={clsx('w-team-item', entry.win && 'w-team-item--win')}\n            >\n              <ContenderCard\n                size={100}\n                overlayColor=\"gray\"\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n              <BracketContenderVotes bracket={entry} players={players} />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--3\">\n          {final.map((entry) => (\n            <li\n              key={`${entry.id}-${entry.position}`}\n              className={clsx('w-team-item', entry.win && 'w-team-item--win')}\n            >\n              <ContenderCard\n                size={100}\n                overlayColor=\"gray\"\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n              <BracketContenderVotes bracket={entry} players={players} />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"w-bracket w-bracket--4\">\n          {winner.map((entry) => (\n            <li\n              key={`${entry.id}-${entry.position}`}\n              className={clsx('w-team-item', entry.name.pt !== 'TBD' && 'w-team-item--win')}\n            >\n              <ContenderCard\n                size={100}\n                overlayColor={entry.name.pt !== 'TBD' ? 'yellow' : 'gray'}\n                contender={{\n                  id: entry.id,\n                  name: entry.name,\n                }}\n                className=\"w-bracket-contender\"\n              />\n              <BracketContenderVotes bracket={entry} players={players} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","// Ant Design resources\nimport { Select } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype ContendersSelectProps = {\n  contenders: WContender[];\n  updateBet: GenericFunction;\n  language: Language;\n  betTier: WBracketTier;\n};\n\nexport function ContendersSelect({ contenders, updateBet, language, betTier }: ContendersSelectProps) {\n  return (\n    <Select className=\"w-bet-form__select\" defaultValue=\"\" onChange={(id) => updateBet({ [betTier]: id })}>\n      <Select.Option value=\"\">\n        <Translate pt=\"Selecione\" en=\"Select\" />\n      </Select.Option>\n      {contenders.map((contender) => (\n        <Select.Option value={contender.id} key={`option-${betTier}-${contender.id}`}>\n          {contender.name[language]}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n}\n","import clsx from 'clsx';\nimport { useState } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { ContendersSelect } from './ContendersSelect';\nimport { MedalIcon } from 'components/icons/MedalIcon';\nimport { getAnimationClass } from 'utils/helpers';\nimport { IconAvatar } from 'components/icons/IconAvatar';\nimport { TrophyIcon } from 'components/icons/TrophyIcon';\nimport { ThumbsUpIcon } from 'components/icons/ThumbsUpIcon';\n\ntype BetsFormProps = {\n  brackets: WBracket[];\n  onSubmitBets: GenericFunction;\n};\n\nexport function BetsForm({ brackets, onSubmitBets }: BetsFormProps) {\n  const { language } = useLanguage();\n  const [step, setStep] = useState(0);\n\n  const [bets, setBets] = useState({ quarter: '', semi: '', final: '' });\n\n  const updateBet = (value: StringDictionary) => {\n    setBets((s) => ({ ...s, ...value }));\n  };\n\n  const contenders = orderBy(\n    brackets.filter((entry) => entry.tier === 'quarter').map((entry) => ({ id: entry.id, name: entry.name })),\n    `name.${language}`\n  );\n\n  const availableContenders = contenders.filter((contender) => !Object.values(bets).includes(contender.id));\n\n  return (\n    <div className=\"w-bet-form\">\n      {step === 0 && (\n        <Instruction\n          contained\n          className={clsx(\n            'w-bet-form__container',\n            'w-bet-form__container--final',\n            getAnimationClass('zoomIn')\n          )}\n        >\n          <IconAvatar icon={<TrophyIcon />} size=\"large\" />\n          <p className=\"w-bet-form__instruction\">\n            <Translate\n              pt={\n                <>\n                  Selecione o competidor que você acha que <u>vai ganhar a final</u>.\n                  <br />\n                  Se ele ganhar, você recebe 5 pontos.\n                </>\n              }\n              en={\n                <>\n                  Select the contender you think will <u>win the final</u>.\n                  <br />\n                  If they win, you gain 5 points.\n                </>\n              }\n            />\n          </p>\n\n          <ContendersSelect\n            contenders={availableContenders}\n            updateBet={updateBet}\n            language={language}\n            betTier=\"final\"\n          />\n\n          <Space className=\"space-container\">\n            <Button onClick={() => setStep(step + 1)} disabled={Boolean(!bets.final)}>\n              <Translate pt=\"Próximo\" en=\"Next\" />\n            </Button>\n          </Space>\n        </Instruction>\n      )}\n      {step === 1 && (\n        <Instruction\n          contained\n          className={clsx(\n            'w-bet-form__container',\n            'w-bet-form__container--semi',\n            getAnimationClass('zoomIn')\n          )}\n        >\n          <IconAvatar icon={<MedalIcon />} size=\"large\" />\n          <p className=\"w-bet-form__instruction\">\n            <Translate\n              pt={\n                <>\n                  Selecione o competidor que você acha que ganha uma <u>semifinal</u>.\n                  <br />\n                  Se ele ganhar, você recebe 3 pontos.\n                </>\n              }\n              en={\n                <>\n                  Select the contender you think will win at least a <u>semifinal</u>.\n                  <br />\n                  If they win, you gain 3 points.\n                </>\n              }\n            />\n          </p>\n\n          <ContendersSelect\n            contenders={availableContenders}\n            updateBet={updateBet}\n            language={language}\n            betTier=\"semi\"\n          />\n\n          <Space className=\"space-container\">\n            <Button onClick={() => setStep(step + 1)} disabled={Boolean(!bets.semi)}>\n              <Translate pt=\"Próximo\" en=\"Next\" />\n            </Button>\n          </Space>\n        </Instruction>\n      )}\n      {step === 2 && (\n        <Instruction\n          contained\n          className={clsx(\n            'w-bet-form__container',\n            'w-bet-form__container--quarter',\n            getAnimationClass('zoomIn')\n          )}\n        >\n          <IconAvatar icon={<ThumbsUpIcon />} size=\"large\" />\n          <p className=\"w-bet-form__instruction\">\n            <Translate\n              pt={\n                <>\n                  Selecione o competidor que você acha que ganha uma <u>quarta de final</u>.\n                  <br />\n                  Se ele ganhar, você recebe 1 pontos.\n                </>\n              }\n              en={\n                <>\n                  Select the contender you think will win at least a <u>quarterfinal</u>.\n                  <br />\n                  If they win, you gain 1 points.\n                </>\n              }\n            />\n          </p>\n\n          <ContendersSelect\n            contenders={availableContenders}\n            updateBet={updateBet}\n            language={language}\n            betTier=\"quarter\"\n          />\n\n          <Space className=\"space-container\">\n            <Button onClick={() => onSubmitBets(bets)} type=\"primary\" disabled={Boolean(!bets.quarter)}>\n              <Translate pt=\"Enviar Apostas\" en=\"Submit Bets\" />\n            </Button>\n          </Space>\n        </Instruction>\n      )}\n    </div>\n  );\n}\n","// Hooks\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockBets } from './utils/mock';\n// Components\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Brackets } from './components/Brackets';\nimport { BetsForm } from './components/BetsForm';\nimport { Challenge } from './components/Challenge';\n\ntype StepMakeYourBetsProps = {\n  onSubmitBets: GenericFunction;\n  challenge: DefaultTextCard;\n  brackets: WBracket[];\n  players: GamePlayers;\n};\n\nexport function StepMakeYourBets({ onSubmitBets, challenge, brackets, players }: StepMakeYourBetsProps) {\n  useMock(() => {\n    onSubmitBets(mockBets(brackets));\n  });\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Faça suas apostas!\" en=\"Make your bets!\" />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <BetsForm brackets={brackets} onSubmitBets={onSubmitBets} />\n\n      <Brackets brackets={brackets} activeTier=\"quarter\" players={players} />\n    </Step>\n  );\n}\n","/**\n * Finds the contender for each of the players bets and selected contender\n * @param brackets\n * @param bets\n * @param selectedContenderId\n * @returns\n */\nexport const findBetContenders = (brackets: WBracket[], bets: WBets, selectedContenderId: CardId) => {\n  return {\n    quarterCard: brackets.find((bracket) => bracket.id === bets.quarter),\n    semiCard: brackets.find((bracket) => bracket.id === bets.semi),\n    finalCard: brackets.find((bracket) => bracket.id === bets.final),\n    selectedCard: brackets.find((bracket) => bracket.id === selectedContenderId),\n  };\n};\n\nexport const parsedBrackets = (brackets: WBracket[]) =>\n  brackets.reduce((acc: Record<string, WBracketTier[]>, bracket) => {\n    if (acc[bracket.id] === undefined) {\n      acc[bracket.id] = [];\n    }\n    acc[bracket.id].push(bracket.tier);\n    return acc;\n  }, {});\n\nexport const getContenderIdsByTier = (brackets: WBracket[]) =>\n  brackets.reduce((acc: WContenderByTier, bracket) => {\n    if (acc[bracket.tier] === undefined) {\n      acc[bracket.tier] = {};\n    }\n    acc[bracket.tier][bracket.id] = true;\n    return acc;\n  }, {});\n","import { useMemo } from 'react';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { findBetContenders } from '../utils/helpers';\n// Components\nimport { FloatingHand, ImageBlurButtonContainer } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { ContenderCard } from './ContenderCard';\n\ntype BetsFloatingHandProps = {\n  bets: WBets;\n  brackets: WBracket[];\n  selectedContenderId?: CardId;\n};\n\nexport function BetsFloatingHand({ bets, brackets, selectedContenderId = '' }: BetsFloatingHandProps) {\n  const cardWidth = useCardWidth(5, 32, 100);\n\n  const { quarterCard, semiCard, finalCard, selectedCard } = useMemo(\n    () => findBetContenders(brackets, bets, selectedContenderId),\n    [bets.final, bets.quarter, bets.semi] // eslint-disable-line\n  );\n\n  if (!quarterCard || !semiCard || !finalCard) return <></>;\n\n  return (\n    <FloatingHand>\n      <div className=\"w-bets-floating-hand\">\n        <Title size=\"xx-small\" level={3}>\n          <Translate pt=\"Suas Apostas\" en=\"Your Bets\" />\n        </Title>\n\n        <ul className=\"w-floating-bets\">\n          <li className=\"w-floating-bets__entry\">\n            <span className=\"w-floating-bets__label\">\n              <Translate pt=\"Quartas de finais\" en=\"Quarterfinals\" />\n            </span>\n            <ContenderCard contender={quarterCard!} overlayColor=\"gray\" size={cardWidth} />\n          </li>\n\n          <li className=\"w-floating-bets__entry\">\n            <span className=\"w-floating-bets__label\">\n              <Translate pt=\"Semifinais\" en=\"Semifinals\" />\n            </span>\n            <ContenderCard contender={semiCard!} overlayColor=\"gray\" size={cardWidth} />\n          </li>\n\n          <li className=\"w-floating-bets__entry\">\n            <span className=\"w-floating-bets__label\">\n              <Translate pt=\"Final\" en=\"Final\" />\n            </span>\n            <ContenderCard contender={finalCard!} overlayColor=\"gray\" size={cardWidth} />\n          </li>\n\n          {Boolean(selectedCard) && (\n            <li className=\"w-floating-bets__entry w-floating-bets__entry--your-contender\">\n              <span className=\"w-floating-bets__label\">\n                <Translate pt=\"Seu competidor\" en=\"Your contender\" />\n              </span>\n              <ImageBlurButtonContainer cardId={selectedCard!.id}>\n                <ContenderCard contender={selectedCard!} overlayColor=\"gray\" size={cardWidth} />\n              </ImageBlurButtonContainer>\n            </li>\n          )}\n        </ul>\n      </div>\n    </FloatingHand>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitBetsAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { StepMakeYourBets } from './StepMakeYourBets';\nimport { GamblingChipIcon } from 'components/icons/GamblingChipIcon';\nimport { useUser } from 'hooks/useUser';\nimport { BetsFloatingHand } from './components/BetsFloatingHand';\n\nfunction PhaseBets({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n\n  const onSubmitBets = useOnSubmitBetsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.BETS}>\n      <StepSwitcher\n        step={step}\n        players={players}\n        waitingRoomContent={\n          Boolean(user.bets?.final) && (\n            <BetsFloatingHand\n              bets={user.bets}\n              brackets={state.brackets}\n              selectedContenderId={user.selectedContenderId}\n            />\n          )\n        }\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<GamblingChipIcon />}\n          title={translate('Apostas', 'Bets')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Selecione quem você acha que ganha as quartas de final, semi final e final\"\n              en=\"Place bet on who you think will win the quarter-finals, semifinals, and finals\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepMakeYourBets\n          onSubmitBets={onSubmitBets}\n          challenge={state.challenge}\n          brackets={state.brackets}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseBets;\n","// Components\nimport { Translate } from 'components/language';\n\ntype TierTitleProps = {\n  tier: WBracketTier;\n};\n\nexport function TierTitle({ tier }: TierTitleProps) {\n  if (tier === 'quarter') return <Translate pt=\"Quartas de finais\" en=\"Quarterfinals\" />;\n  if (tier === 'semi') return <Translate pt=\"Semifinais\" en=\"Semifinals\" />;\n  return <Translate pt=\"Final\" en=\"Final\" />;\n}\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { ContenderCard } from './ContenderCard';\n\ntype TierContendersProps = {\n  contenders: WBracket[][];\n};\n\nexport function TierContenders({ contenders }: TierContendersProps) {\n  const flatContenders = contenders.flat();\n  const cardWidth = useCardWidth(flatContenders.length + 2, 16, 30, 100);\n\n  return (\n    <ul className=\"w-tier-contenders\">\n      {flatContenders.map((contender) => (\n        <li className=\"w-tier-contender\" key={`w-tier-contender-${contender.id}`}>\n          <ContenderCard contender={contender} overlayColor=\"gray\" size={cardWidth} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport clsx from 'clsx';\n// Ant Design resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useMock } from 'hooks/useMock';\nimport { useStep } from 'hooks/useStep';\nimport { useBracketVoting } from '../utils/useBracketVoting';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\nimport { mockVotes } from '../utils/mock';\n// Components\nimport { TransparentButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { ContenderCard } from './ContenderCard';\nimport { TierContenders } from './TierContenders';\n\ntype VotingProps = {\n  brackets: WBracket[];\n  tier: WBracketTier;\n  onSubmitVotes: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function Voting({ brackets, tier, onSubmitVotes, players }: VotingProps) {\n  const { step, goToNextStep } = useStep(0);\n\n  const { seconds } = useCountdown({\n    duration: 5,\n    autoStart: true,\n    onExpire: goToNextStep,\n  });\n\n  const bracketedContenders: WBracket[][] = useMemo(\n    () =>\n      brackets\n        .filter((entry) => entry.tier === tier)\n        .map((entry, index, arr) => {\n          if (index % 2 === 0) {\n            return [entry, arr[index + 1]];\n          }\n          return [];\n        })\n        .filter((entry) => entry.length > 0),\n    [brackets, tier]\n  );\n\n  const { votes, updateVote, isComplete, checkActiveVote } = useBracketVoting(tier);\n\n  const colors = getContenderColor(tier);\n\n  useMock(() => {\n    onSubmitVotes({ votes: mockVotes(bracketedContenders) });\n  });\n\n  return (\n    <StepSwitcher step={step} players={players}>\n      {/* Step 0 */}\n\n      <Instruction contained>\n        <p>\n          {tier === 'quarter' ? (\n            <Translate pt=\"Competidores:\" en=\"Contenders:\" />\n          ) : (\n            <Translate pt=\"Foram para a próxima fase:\" en=\"Moved to the next bracket:\" />\n          )}\n        </p>\n        <TierContenders contenders={bracketedContenders} />\n        <p>\n          <Translate pt={<>Votação começando em {seconds}</>} en={<>Voting starting in {seconds}</>} />\n        </p>\n      </Instruction>\n\n      {/* Step 1 */}\n      <div>\n        <ul>\n          {bracketedContenders.map((contenderPair) => (\n            <VotingOptions\n              left={contenderPair[0]}\n              right={contenderPair[1]}\n              onClick={updateVote}\n              colorLeft={colors.left}\n              colorRight={colors.right}\n              checkActiveVote={checkActiveVote}\n            />\n          ))}\n        </ul>\n\n        <Space className=\"space-container\">\n          <Button type=\"primary\" size=\"large\" onClick={() => onSubmitVotes({ votes })} disabled={!isComplete}>\n            <Translate pt=\"Enviar votos\" en=\"Submit votes\" />\n          </Button>\n        </Space>\n      </div>\n    </StepSwitcher>\n  );\n}\n\ntype VotingOptionsProps = {\n  left: WBracket;\n  right: WBracket;\n  onClick: GenericFunction;\n  colorLeft: string;\n  colorRight: string;\n  checkActiveVote: (pos: number) => boolean;\n};\n\nfunction VotingOptions({ left, right, colorLeft, colorRight, onClick, checkActiveVote }: VotingOptionsProps) {\n  return (\n    <li className={clsx('w-voting-options', getAnimationClass('flipInX'))}>\n      <TransparentButton\n        onClick={() => onClick(left)}\n        active={checkActiveVote(left.position)}\n        className=\"w-vote\"\n        activeClass=\"w-vote--active\"\n      >\n        <ContenderCard size={200} contender={left} overlayColor={colorLeft} />\n      </TransparentButton>\n      <span className=\"w-voting-options__vs\">VS</span>\n      <TransparentButton\n        onClick={() => onClick(right)}\n        active={checkActiveVote(right.position)}\n        className=\"w-vote\"\n        activeClass=\"w-vote--active\"\n      >\n        <ContenderCard size={200} contender={right} overlayColor={colorRight} />\n      </TransparentButton>\n    </li>\n  );\n}\n\nconst getContenderColor = (tier: WBracketTier) => {\n  switch (tier) {\n    case 'quarter':\n      return {\n        left: 'red',\n        right: 'blue',\n      };\n    case 'semi':\n      return {\n        left: 'green',\n        right: 'orange',\n      };\n    default:\n      return {\n        left: 'red',\n        right: 'blue',\n      };\n  }\n};\n","import { useState } from 'react';\nimport { targetByTier, voteTarget } from './constants';\n\nexport function useBracketVoting(tier: WBracketTier) {\n  const [votes, setVotes] = useState<NumberDictionary>({});\n\n  function updateVote(vote: WBracket) {\n    setVotes((v) => ({ ...v, [voteTarget[vote.position]]: vote.position }));\n  }\n\n  function checkActiveVote(position: number) {\n    return Object.values(votes).includes(position);\n  }\n\n  return {\n    votes,\n    updateVote,\n    isComplete: Object.keys(votes).length === targetByTier[tier],\n    checkActiveVote,\n  };\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Brackets } from './components/Brackets';\nimport { TierTitle } from './components/TierTitle';\nimport { Challenge } from './components/Challenge';\nimport { Voting } from './components/Voting';\nimport { BetsFloatingHand } from './components/BetsFloatingHand';\nimport { ReadyPlayersBar } from 'components/players';\n\ntype StepBattleProps = {\n  onSubmitVotes: GenericFunction;\n  challenge: DefaultTextCard;\n  brackets: WBracket[];\n  tier: WBracketTier;\n  bets: WBets;\n  selectedContenderId: CardId;\n  players: GamePlayers;\n};\n\nexport function StepBattle({\n  onSubmitVotes,\n  challenge,\n  brackets,\n  tier,\n  bets,\n  selectedContenderId,\n  players,\n}: StepBattleProps) {\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <TierTitle tier={tier} />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Voting brackets={brackets} tier={tier} onSubmitVotes={onSubmitVotes} players={players} />\n\n      <Brackets brackets={brackets} activeTier={tier} players={players} />\n\n      <ReadyPlayersBar players={players} />\n\n      <BetsFloatingHand bets={bets} brackets={brackets} selectedContenderId={selectedContenderId} />\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\nimport { useOnSubmitVotesAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { BoxingGlovesIcon } from 'components/icons/BoxingGlovesIcon';\nimport { StepBattle } from './StepBattle';\n\nfunction PhaseBattle({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [previousTier, setPreviousTier] = useState<string>('');\n  const user = useUser(players);\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  useEffect(() => {\n    if (state.tier !== previousTier) {\n      setPreviousTier(state.tier);\n      setStep(0);\n    }\n  }, [state.tier, previousTier, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.BATTLE}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<BoxingGlovesIcon />}\n          title={translate('Batalha!', 'Battle!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Vote em quem você acha que melhor se encaixa no desafio\"\n              en=\"Vote on who you think best fit the challenge\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepBattle\n          onSubmitVotes={onSubmitVotes}\n          challenge={state.challenge}\n          brackets={state.brackets}\n          tier={state.tier}\n          bets={user.bets}\n          selectedContenderId={user.selectedContenderId}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseBattle;\n","import clsx from 'clsx';\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { getAvatarColorById } from 'utils/helpers';\nimport { findBetContenders, getContenderIdsByTier } from '../utils/helpers';\nimport { ContenderCard } from './ContenderCard';\n\ntype PlayersBetsProps = {\n  players: GamePlayers;\n  brackets: WBracket[];\n};\n\nexport function PlayersBets({ players, brackets }: PlayersBetsProps) {\n  const playersList = orderBy(Object.values(players), 'name');\n  const contendersByTiers = getContenderIdsByTier(brackets);\n  return (\n    <ul className=\"w-players-bets\" style={{ gridTemplateColumns: `repeat(${playersList.length + 1}, auto)` }}>\n      <li className=\"w-players-bets__player w-players-bets__player--header\">\n        <div className=\"w-players-bets__square\">\n          <Avatar shape=\"square\" size=\"large\" className=\"w-players-bets__avatar\" id=\"N\" />\n        </div>\n        <div className=\"w-players-bets__square\">\n          <Translate pt=\"Final\" en=\"Final\" />\n        </div>\n        <div className=\"w-players-bets__square\">\n          <Translate pt=\"Semi\" en=\"Semi\" />\n        </div>\n        <div className=\"w-players-bets__square\">\n          <Translate pt=\"Quartas\" en=\"Quarter\" />\n        </div>\n        <div className=\"w-players-bets__square\">\n          <Translate pt=\"Competidor\" en=\"Contender\" />\n        </div>\n      </li>\n\n      {playersList.map((player) => (\n        <PlayersBetEntry\n          key={`players-bets-${player.id}`}\n          brackets={brackets}\n          player={player}\n          contendersByTiers={contendersByTiers}\n        />\n      ))}\n    </ul>\n  );\n}\ntype PlayersBetEntryProps = {\n  player: GamePlayer;\n  brackets: WBracket[];\n  contendersByTiers: WContenderByTier;\n};\n\nfunction PlayersBetEntry({ player, brackets, contendersByTiers }: PlayersBetEntryProps) {\n  const { quarterCard, semiCard, finalCard, selectedCard } = useMemo(\n    () => findBetContenders(brackets, player.bets, player.selectedContenderId),\n    [brackets, player.bets, player.selectedContenderId]\n  );\n\n  return (\n    <li\n      key={`players-bets-${player.id}`}\n      className=\"w-players-bets__player\"\n      style={{ backgroundColor: getAvatarColorById(player.avatarId) }}\n    >\n      <div className=\"w-players-bets__square\">\n        <Avatar shape=\"square\" size=\"large\" className=\"w-players-bets__avatar\" id={player.avatarId} />\n      </div>\n\n      <div\n        className={clsx(\n          'w-players-bets__square',\n          contendersByTiers.winner[finalCard!.id] && 'w-players-bets__square--win'\n        )}\n      >\n        <ContenderCard\n          size={50}\n          overlayColor={contendersByTiers.winner[finalCard!.id] ? 'yellow' : 'gray'}\n          contender={finalCard!}\n          hideName\n        />\n      </div>\n      <div\n        className={clsx(\n          'w-players-bets__square',\n          contendersByTiers.final[semiCard!.id] && 'w-players-bets__square--win'\n        )}\n      >\n        <ContenderCard\n          size={50}\n          overlayColor={contendersByTiers.final[semiCard!.id] ? 'yellow' : 'gray'}\n          contender={semiCard!}\n          hideName\n        />\n      </div>\n      <div\n        className={clsx(\n          'w-players-bets__square',\n          contendersByTiers.semi[quarterCard!.id] && 'w-players-bets__square--win'\n        )}\n      >\n        <ContenderCard\n          size={50}\n          overlayColor={contendersByTiers.semi[quarterCard!.id] ? 'yellow' : 'gray'}\n          contender={quarterCard!}\n          hideName\n        />\n      </div>\n      {selectedCard ? (\n        <div\n          className={clsx(\n            'w-players-bets__square',\n            contendersByTiers.winner[selectedCard!.id] && 'w-players-bets__square--win'\n          )}\n        >\n          <ContenderCard\n            size={50}\n            overlayColor={contendersByTiers.winner[selectedCard!.id] ? 'yellow' : 'gray'}\n            contender={selectedCard!}\n            hideName\n          />\n        </div>\n      ) : (\n        <div className={clsx('w-players-bets__square', 'w-players-bets__square--none')}>-</div>\n      )}\n    </li>\n  );\n}\n","// Components\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { RoundsLeftInstruction } from 'components/text';\nimport { BetsFloatingHand } from './components/BetsFloatingHand';\nimport { Brackets } from './components/Brackets';\nimport { PlayersBets } from './components/PlayersBets';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  isGameOver: boolean;\n  round: GameRound;\n  isLastRound?: boolean;\n  brackets: WBracket[];\n  selectedContenderId: CardId;\n  bets: WBets;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  isGameOver,\n  round,\n  isLastRound = false,\n  brackets,\n  bets,\n  selectedContenderId,\n}: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Apostou na final corretamente\" en=\"Correct final bet\" />,\n        <Translate pt=\"Apostou nas semifinais corretamente\" en=\"Correct semifinal bet\" />,\n        <Translate pt=\"Apostou nas quartas de finais corretamente\" en=\"Correct quarterfinal bet\" />,\n        <Translate pt=\"Seu competidor ganhou\" en=\"Your competitor won\" />,\n      ]}\n    >\n      {!isGameOver && <RoundsLeftInstruction round={round} lastRound={isLastRound} />}\n\n      <PlayersBets players={players} brackets={brackets} />\n\n      <AdminNextPhaseButton round={round} lastRound={isLastRound} />\n\n      <Brackets brackets={brackets} activeTier=\"winner\" players={players} />\n\n      <BetsFloatingHand bets={bets} brackets={brackets} selectedContenderId={selectedContenderId} />\n    </StepRankingWrapper>\n  );\n}\n","// Ant Design resources\nimport { Space } from 'antd';\nimport { TrophyOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { BetsFloatingHand } from './components/BetsFloatingHand';\nimport { Challenge } from './components/Challenge';\nimport { ContenderCard } from './components/ContenderCard';\n\ntype StepWinnerProps = {\n  challenge: DefaultTextCard;\n  brackets: WBracket[];\n  bets: WBets;\n  goToNextStep: GenericFunction;\n  selectedContenderId: CardId;\n};\n\nexport function StepWinner({\n  challenge,\n  brackets,\n  bets,\n  goToNextStep,\n  selectedContenderId,\n}: StepWinnerProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Vencedor\" en=\"Winner\" />\n      </Title>\n\n      <Challenge challenge={challenge} />\n\n      <Space className=\"space-container margin\" align=\"center\">\n        <ContenderCard size={200} overlayColor=\"yellow\" contender={brackets[brackets.length - 1]} />\n      </Space>\n\n      <Space className=\"space-container \" align=\"center\">\n        <TimedButton duration={7} icon={<TrophyOutlined />} onExpire={goToNextStep} onClick={goToNextStep}>\n          <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n        </TimedButton>\n      </Space>\n\n      <BetsFloatingHand bets={bets} brackets={brackets} selectedContenderId={selectedContenderId} />\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useUser } from 'hooks/useUser';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TournamentIcon } from 'components/icons/TournamentIcon';\nimport { StepRanking } from './StepRanking';\nimport { StepWinner } from './StepWinner';\n\nfunction PhaseResults({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [previousTier, setPreviousTier] = useState<string>('');\n  const user = useUser(players);\n\n  useEffect(() => {\n    if (state.tier !== previousTier) {\n      setPreviousTier(state.tier);\n      setStep(0);\n    }\n  }, [state.tier, previousTier, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SUPER_CAMPEONATO.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<TournamentIcon />}\n          title={translate('Resultado!', 'Resultado!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          duration={7}\n        >\n          <Instruction>\n            <Translate pt=\"Só pode haver um...\" en=\"There's only one...\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepWinner\n          brackets={state.brackets}\n          challenge={state.challenge}\n          bets={user.bets}\n          goToNextStep={goToNextStep}\n          selectedContenderId={user.selectedContenderId}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          isGameOver={false}\n          round={state.round}\n          brackets={state.brackets}\n          isLastRound={state?.lastRound}\n          bets={user.bets}\n          selectedContenderId={user.selectedContenderId}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResults;\n","// Ant Design resources\nimport { Space } from 'antd';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { TrophyIcon } from 'components/icons/TrophyIcon';\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { ContenderCard } from './components/ContenderCard';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon={<TrophyIcon />}>\n      <Title size=\"xx-small\" className=\"padding\">\n        <Translate pt=\"Campeão Ultimate\" en=\"Ultimate Champion\" />\n      </Title>\n\n      <Space className=\"space-container margin\" align=\"center\">\n        <ContenderCard size={200} overlayColor=\"yellow\" contender={state.finalWinner} />\n      </Space>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseChallengeSelection from './PhaseChallengeSelection';\nimport PhaseContenderSelection from './PhaseContendersSelection';\nimport PhaseBets from './PhaseBets';\nimport PhaseBattle from './PhaseBattle';\nimport PhaseResults from './PhaseResults';\nimport PhaseGameOver from './PhaseGameOver';\n// Fonts\nimport 'assets/fonts/bangers.scss';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: THEME_COLORS.RUSSIAN_VIOLET,\n  },\n});\n\nfunction SessionSuperCampeonato({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.SUPER_CAMPEONATO.CHALLENGE_SELECTION:\n        return PhaseChallengeSelection;\n      case PHASES.SUPER_CAMPEONATO.CONTENDER_SELECTION:\n        return PhaseContenderSelection;\n      case PHASES.SUPER_CAMPEONATO.BETS:\n        return PhaseBets;\n      case PHASES.SUPER_CAMPEONATO.BATTLE:\n        return PhaseBattle;\n      case PHASES.SUPER_CAMPEONATO.RESULTS:\n        return PhaseResults;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.SUPER_CAMPEONATO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionSuperCampeonato;\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\n\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar TrophyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 00-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 00-44-44zM184 352V232h64v207.6a91.99 91.99 0 01-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z\" } }] }, \"name\": \"trophy\", \"theme\": \"outlined\" };\nexport default TrophyOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport TrophyOutlinedSvg from \"@ant-design/icons-svg/es/asn/TrophyOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar TrophyOutlined = function TrophyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: TrophyOutlinedSvg\n  }));\n};\n\nTrophyOutlined.displayName = 'TrophyOutlined';\nexport default /*#__PURE__*/React.forwardRef(TrophyOutlined);"],"names":["TrophyIcon","props","xmlns","viewBox","fill","d","cx","cy","r","ACTIONS","voteTarget","targetByTier","quarter","semi","final","winner","mockSelectChallenge","challenges","getRandomItem","id","mockVotes","bracketedContenders","reduce","acc","pair","vote","position","ContenderCard","size","overlayColor","contender","className","hideName","language","useLanguage","isBlurred","shouldBeBlurred","useBlurCards","imageURL","replace","clsx","style","width","name","src","PUBLIC_URL","alt","process","fallback","ContendersHand","contenders","onSelect","cardWidth","useCardWidth","map","Boolean","onClick","shape","ghost","pt","en","StepSelectChallenge","onSubmitChallenge","userContenders","players","useMock","challengeId","fullWidth","contained","align","challenge","index","header","LETTERS","randomColor","text","state","info","translate","useStep","step","goToNextStep","setStep","user","useUser","request","useAPICall","apiFunction","SUPER_CAMPEONATO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitChallengeAPIRequest","phase","allowedPhase","PHASES","waitingRoomContent","round","onPressButton","time","circleColor","current","total","icon","SelectListIcon","title","onClose","currentRound","duration","Challenge","color","StepSelectContenders","onSubmitContender","contendersId","useOnSubmitContenderAPIRequest","AnonymousIcon","BracketContenderVotes","bracket","votes","length","maxCount","avatarId","getContenderColor","activeTier","Brackets","brackets","entry","tier","push","win","ContendersSelect","updateBet","betTier","defaultValue","onChange","value","BetsForm","onSubmitBets","useState","bets","setBets","s","availableContenders","orderBy","filter","Object","values","includes","getAnimationClass","IconAvatar","disabled","MedalIcon","ThumbsUpIcon","type","StepMakeYourBets","shuffle","mockBets","findBetContenders","selectedContenderId","quarterCard","find","semiCard","finalCard","selectedCard","BetsFloatingHand","useMemo","level","cardId","useOnSubmitBetsAPIRequest","GamblingChipIcon","TierTitle","TierContenders","flatContenders","flat","Voting","onSubmitVotes","seconds","useCountdown","autoStart","onExpire","arr","setVotes","updateVote","v","isComplete","keys","checkActiveVote","useBracketVoting","colors","contenderPair","VotingOptions","left","right","colorLeft","colorRight","active","activeClass","StepBattle","previousTier","setPreviousTier","useOnSubmitVotesAPIRequest","useEffect","BoxingGlovesIcon","PlayersBets","playersList","contendersByTiers","undefined","getContenderIdsByTier","gridTemplateColumns","player","PlayersBetEntry","backgroundColor","getAvatarColorById","StepRanking","ranking","isGameOver","isLastRound","gainedPointsDescriptions","lastRound","StepWinner","useTemporarilyHidePlayersBar","TrophyOutlined","TournamentIcon","announcementIcon","finalWinner","ConfigProvider","theme","primaryColor","THEME_COLORS","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseChallengeSelection","PhaseContenderSelection","PhaseBets","PhaseBattle","PhaseResults","PhaseGameOver","PageError","CrownFilled","ref","React","AntdIcon","_objectSpread","CrownFilledSvg","displayName","TrophyOutlinedSvg"],"sourceRoot":""}