{"version":3,"file":"static/js/506.ff7f4da0.chunk.js","mappings":"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","sources":["games/cruza-palavras/WordGrid.tsx","../node_modules/@ant-design/icons-svg/es/asn/FormOutlined.js","../node_modules/@ant-design/icons/es/icons/FormOutlined.js","games/cruza-palavras/PreviousClue.tsx","games/cruza-palavras/WordForm.tsx","games/cruza-palavras/WritingCell.tsx","games/cruza-palavras/RulesBlobs.tsx","games/cruza-palavras/StepClueWriting.tsx","games/cruza-palavras/PhaseClueWriting.tsx","games/cruza-palavras/api-requests.ts","games/cruza-palavras/helpers.ts","games/cruza-palavras/ClueCard.tsx","games/cruza-palavras/SelectableCell.tsx","games/cruza-palavras/Clues.tsx","games/cruza-palavras/StepGuessing.tsx","games/cruza-palavras/PhaseGuessing.tsx","../node_modules/@ant-design/icons-svg/es/asn/CheckSquareFilled.js","../node_modules/@ant-design/icons/es/icons/CheckSquareFilled.js","../node_modules/@ant-design/icons-svg/es/asn/CloseSquareFilled.js","../node_modules/@ant-design/icons/es/icons/CloseSquareFilled.js","games/cruza-palavras/StepReveal.tsx","games/cruza-palavras/StepRanking.tsx","games/cruza-palavras/PhaseReveal.tsx","games/cruza-palavras/PhaseGameOver.tsx","games/cruza-palavras/SessionCruzaPalavras.tsx","../node_modules/@ant-design/icons-svg/es/asn/PlusCircleFilled.js","../node_modules/@ant-design/icons/es/icons/PlusCircleFilled.js","../node_modules/@ant-design/icons-svg/es/asn/WarningOutlined.js","../node_modules/@ant-design/icons/es/icons/WarningOutlined.js"],"sourcesContent":["import clsx from 'clsx';\n\ntype WordGridProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  CellComponent: any;\n  cellComponentProps: any;\n};\n\nexport function WordGrid({ grid, user, CellComponent, cellComponentProps = {} }: WordGridProps) {\n  const length = Math.sqrt(grid.length);\n\n  const gridStyle = {\n    gridTemplateColumns: `repeat(${length}, 1fr)`,\n    gridTemplateRows: `repeat(${length}, auto)`,\n  };\n\n  return (\n    <div className=\"x-grid\" style={gridStyle}>\n      {grid.map((cell) => (\n        <div className={clsx('x-grid-cell', `x-grid-cell--${cell.kind}`)} key={`${cell.index}-${cell.kind}`}>\n          {cell.kind === 'header' && cell.text}\n\n          {cell.kind === 'cell' && <CellComponent {...cellComponentProps} cell={cell} user={user} />}\n        </div>\n      ))}\n    </div>\n  );\n}\n","// This icon file is generated automatically.\nvar FormOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M904 512h-56c-4.4 0-8 3.6-8 8v320H184V184h320c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V520c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M355.9 534.9L354 653.8c-.1 8.9 7.1 16.2 16 16.2h.4l118-2.9c2-.1 4-.9 5.4-2.3l415.9-415c3.1-3.1 3.1-8.2 0-11.3L785.4 114.3c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1.8-5.7 2.3l-415.8 415a8.3 8.3 0 00-2.3 5.6zm63.5 23.6L779.7 199l45.2 45.1-360.5 359.7-45.7 1.1.7-46.4z\" } }] }, \"name\": \"form\", \"theme\": \"outlined\" };\nexport default FormOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport FormOutlinedSvg from \"@ant-design/icons-svg/es/asn/FormOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar FormOutlined = function FormOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: FormOutlinedSvg\n  }));\n};\n\nFormOutlined.displayName = 'FormOutlined';\nexport default /*#__PURE__*/React.forwardRef(FormOutlined);","type PreviousClueProps = {\n  clue: string;\n};\n\nexport function PreviousClue({ clue }: PreviousClueProps) {\n  return <div className=\"x-previous-clue\">{clue}</div>;\n}\n","import { useEffect, useRef, useState } from 'react';\n//Design Resources\nimport { Button, Input, Space } from 'antd';\n// Hooks\nimport { useMock } from 'hooks';\n// Components\nimport { Translate } from 'components';\n\ntype WordFormProps = {\n  x: string;\n  y: string;\n  onSubmit: GenericFunction;\n  disabled?: boolean;\n};\n\nexport function WordForm({ x, y, onSubmit, disabled }: WordFormProps) {\n  const [clue, setClue] = useState('');\n  const textInput = useRef<Input | null>(null);\n\n  const onChange = (e: any) => {\n    setClue(e.target.value);\n  };\n\n  useEffect(() => textInput && textInput.current!.focus(), []);\n\n  // DEV: Submit made-up words\n  useMock(() => {\n    onSubmit(`${x.substring(0, x.length / 2)}${y.substring(y.length / 2)}`);\n  }, []);\n\n  return (\n    <Space direction=\"vertical\">\n      <Input\n        ref={textInput}\n        placeholder={`${x} + ${y}`}\n        onChange={onChange}\n        onPressEnter={() => onSubmit(clue)}\n      />\n      <Button type=\"primary\" onClick={() => onSubmit(clue)} disabled={disabled || !clue.length}>\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n    </Space>\n  );\n}\n","//Design Resources\nimport { Button, Popover } from 'antd';\nimport { FormOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components';\nimport { PreviousClue } from './PreviousClue';\nimport { WordForm } from './WordForm';\n\ntype WritingCellProps = {\n  onSubmitClue: GenericFunction;\n  cell: CruzaPalavrasGridCell;\n  disabled?: boolean;\n  user: GamePlayer;\n};\n\nexport function WritingCell({ onSubmitClue, cell, user, disabled }: WritingCellProps) {\n  if (cell.writable && user.id === cell.playerId) {\n    return (\n      <Popover\n        content={<WordForm x={cell.xText ?? ''} y={cell.yText ?? ''} onSubmit={onSubmitClue} />}\n        title={<Translate pt=\"Escreva\" en=\"Write\" />}\n        trigger=\"click\"\n      >\n        <Button shape=\"circle\" type=\"primary\" disabled={disabled}>\n          <FormOutlined />\n        </Button>\n      </Popover>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return <></>;\n}\n","import { Instruction, Translate } from 'components';\n\nexport function WritingCluesRule({ playerCount }: { playerCount: number }) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Você tem uma coordenada específica e única na grade de palavras.\n            <br />\n            Escreva uma dica (palavra única) que conecte as palavras da linha e da coluna assinalada a você.\n            <br />\n            Escreva algo bem simples e óbvio porque se ninguém entender você perderá {playerCount} pontos.\n          </>\n        }\n        en={\n          <>\n            You will get an unique coordinate in the word grid.\n            <br />\n            You must write a single word clue that connects the word in the column and in the row of your\n            coordinate.\n            <br />\n            Write something simple and obvious because if nobody gets your clue you will lose {\n              playerCount\n            }{' '}\n            points.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ScoringRule({ playerCount }: { playerCount: number }) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Você ganha 2 pontos para cada célula com uma resposta correta sua.\n            <br />\n            + 1 ponto para cada célula com uma dica mas uma resposta errada sua.\n            <br />\n            + 1 ponto para cada voto correto que sua dica recebeu.\n            <br />\n            Mas se ninguém acertar sua dica, você perde {playerCount} pontos.\n          </>\n        }\n        en={\n          <>\n            You get 2 points for each cell with your correct answer.\n            <br />\n            + 1 point for each cell with a clue but with a wrong answer of yours.\n            <br />\n            + 1 point for each correct vote your clue received.\n            <br />\n            But if nobody gets your clue correctly, you lose {playerCount} points.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Hooks\nimport { useLoading } from 'hooks';\n// Components\nimport { Instruction, PopoverRule, ReadyPlayersBar, Title, Translate } from 'components';\nimport { WordGrid } from './WordGrid';\nimport { WritingCell } from './WritingCell';\nimport { WritingCluesRule } from './RulesBlobs';\n\ntype StepClueWritingProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  onSubmitClue: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepClueWriting({ grid, user, onSubmitClue, players }: StepClueWritingProps) {\n  const { isLoading } = useLoading();\n\n  const onSubmitClueClick = (payload: string) => {\n    onSubmitClue({\n      clue: payload.trim().toLowerCase(),\n    });\n  };\n\n  return (\n    <div className=\"x-step\">\n      <Title>\n        <Translate pt=\"Escreva sua dica\" en=\"Write your clue\" />\n      </Title>\n\n      <PopoverRule content={<WritingCluesRule playerCount={Object.keys(players).length} />} />\n\n      <Instruction contained>\n        <Translate\n          pt=\"Clique no ícone azul e escreva sua dica. Sua dica deve conter apenas uma palavra.\"\n          en=\"Click on the blue icon and write your clue. Your clue must be a single word clue.\"\n        />\n      </Instruction>\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={WritingCell}\n        cellComponentProps={{ onSubmitClue: onSubmitClueClick, disabled: isLoading }}\n      />\n\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitClueAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, RoundAnnouncement, StepSwitcher } from 'components';\nimport { StepClueWriting } from './StepClueWriting';\nimport { WritingCluesRule } from './RulesBlobs';\n\nfunction PhaseClueWriting({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const isUserReady = useIsUserReady(players, state);\n  const user = useUser(players);\n\n  const onSubmitClue = useOnSubmitClueAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.CLUE_WRITING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          circleColor=\"forest\"\n        />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"grid\"\n          title={translate('Escreva!', 'Write!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WritingCluesRule playerCount={Object.keys(players).length} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepClueWriting user={user} grid={state.grid} onSubmitClue={onSubmitClue} players={players} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseClueWriting;\n","import { CRUZA_PALAVRAS_API } from 'adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitClueAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRUZA_PALAVRAS_API.submitAction,\n    actionName: 'submit-clue',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Dica enviada com sucesso', 'Clue submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua dica',\n      'Oops, the application failed to send your clue'\n    ),\n  });\n\n  return (payload: SubmitCluePayload) => {\n    request({\n      action: 'SUBMIT_CLUE',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: CRUZA_PALAVRAS_API.submitAction,\n    actionName: 'submit-guesses',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Respostas enviadas com sucesso', 'Guesses submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas respostas',\n      'Oops, the application failed to send your guesses'\n    ),\n  });\n\n  return (payload: SubmitGuessesPayload) => {\n    request({\n      action: 'SUBMIT_GUESSES',\n      ...payload,\n    });\n  };\n}\n","import { SEPARATOR } from 'utils/constants';\n\n/**\n * Checks if an instance is a clue\n * @param instance\n * @returns\n */\nexport const isClue = (instance?: any) => Boolean(instance?.clue);\n\n/**\n *\n * @param clueObj\n * @returns\n */\nexport const getClueKey = (clueObj?: CruzaPalavrasClue): string =>\n  `${clueObj?.clue}${SEPARATOR}${clueObj?.playerId}`;\n\n/**\n *\n * @param key\n * @returns\n */\nexport const getClueFromKey = (key: string): string[] => key.split(SEPARATOR) ?? ['', ''];\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { CheckCircleFilled, PlusCircleFilled } from '@ant-design/icons';\n// Utils\nimport { getColorFromIndex } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components';\n\ntype ClueCardProps = {\n  isMatched?: boolean;\n  isSelected?: boolean;\n  clue?: string;\n  indexColor?: number;\n  color?: string;\n  player?: GamePlayer;\n  strikeMatches?: boolean;\n};\n\nexport function ClueCard({\n  isMatched,\n  isSelected,\n  clue,\n  indexColor = 0,\n  color,\n  player,\n  strikeMatches = false,\n}: ClueCardProps) {\n  const colorClass = getColorFromIndex(indexColor);\n  return (\n    <div\n      className={clsx(\n        'x-clue-card',\n        isSelected && 'x-clue-card--selected',\n        !Boolean(color) && `color-border--${colorClass}`\n      )}\n      style={{ borderColor: color }}\n    >\n      <span\n        className={clsx('x-clue-card__icon', !Boolean(color) && `color-background--${colorClass}`)}\n        style={{ backgroundColor: color }}\n      >\n        {isMatched ? (\n          Boolean(player) ? (\n            <Avatar id={player?.avatarId} />\n          ) : (\n            <CheckCircleFilled />\n          )\n        ) : (\n          <PlusCircleFilled style={isSelected ? { color: 'gold' } : { color: 'white' }} />\n        )}\n      </span>\n      <span className={clsx('x-clue-card__clue', isMatched && strikeMatches && 'x-clue-card__clue--matched')}>\n        {clue}\n      </span>\n    </div>\n  );\n}\n","//Design Resources\nimport { Button } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n// Utils\nimport { getClueFromKey } from './helpers';\n// Components\nimport { ClueCard } from './ClueCard';\nimport { PreviousClue } from './PreviousClue';\n\ntype SelectableCellProps = {\n  onSelectCell: GenericFunction;\n  onClearCell: GenericFunction;\n  cell: CruzaPalavrasGridCell;\n  active: any;\n  guesses: any;\n  clues: CruzaPalavrasClue[];\n  user: GamePlayer;\n};\n\nexport function SelectableCell({\n  onSelectCell,\n  onClearCell,\n  cell,\n  active,\n  guesses,\n  clues,\n  user,\n}: SelectableCellProps) {\n  const isSelected = cell.index === active;\n  const matchEntry = Object.entries(guesses).find((arr) => arr[1] === cell.index);\n  const [clueKey, coordinate] = matchEntry ?? [];\n  const [clue, playerId] = getClueFromKey(clueKey ?? '');\n\n  const isMatched = coordinate === cell.index;\n\n  if (isMatched) {\n    const clueIndexColor = clues.findIndex((c) => c.clue === clue && c.playerId === playerId);\n    return (\n      <Button\n        onClick={user.id !== playerId ? () => onClearCell(clueKey) : () => {}}\n        type=\"text\"\n        style={{ height: 'auto' }}\n      >\n        <ClueCard isMatched={isMatched} isSelected={isSelected} clue={clue} indexColor={clueIndexColor} />\n      </Button>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return (\n    <Button onClick={() => onSelectCell(cell.index)} shape=\"circle\">\n      <PlusCircleFilled style={isSelected ? { color: 'gold' } : {}} />\n    </Button>\n  );\n}\n","// Helpers\nimport { getClueKey } from './helpers';\n// Components\nimport { ClueCard } from './ClueCard';\n\ntype CluesProps = {\n  clues: CruzaPalavrasClue[];\n  onSelectClue: GenericFunction;\n  active: any;\n  guesses: PlainObject;\n};\n\nexport function Clues({ clues, onSelectClue, active, guesses }: CluesProps) {\n  return (\n    <ul className=\"x-clue-cards\">\n      {clues.map((clueObj, index: number) => {\n        const isSelected = clueObj.coordinate === active?.coordinate;\n        const isMatched = Boolean(guesses[getClueKey(clueObj)]);\n        return (\n          <li key={`${clueObj.coordinate}-${clueObj.clue}`} className=\"x-clue-card-li\">\n            <button className=\"x-clue-card-button\" onClick={() => onSelectClue(clueObj)}>\n              <ClueCard\n                isMatched={isMatched}\n                isSelected={isSelected}\n                clue={clueObj.clue}\n                indexColor={index}\n                strikeMatches\n              />\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState, useCallback, useEffect } from 'react';\n//Design Resources\nimport { Button } from 'antd';\n// Utils\nimport { shuffle } from 'utils/helpers';\nimport { getClueFromKey, getClueKey, isClue } from './helpers';\n// Components\nimport { ButtonContainer, Instruction, ReadyPlayersBar, Title, Translate } from 'components';\nimport { WordGrid } from './WordGrid';\nimport { SelectableCell } from './SelectableCell';\nimport { Clues } from './Clues';\n\ntype StepGuessingProps = {\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  clues: CruzaPalavrasClue[];\n  onSubmitGuesses: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepGuessing({ grid, user, clues, onSubmitGuesses, players }: StepGuessingProps) {\n  const [active, setActive] = useState(null);\n  const [guesses, setGuesses] = useState({});\n\n  const onSelectClue = useCallback(\n    (clueObj) => {\n      if (!active || isClue(active)) {\n        setActive(clueObj);\n      } else {\n        setGuesses((s) => ({\n          ...s,\n          [getClueKey(clueObj)]: active,\n        }));\n        setActive(null);\n      }\n    },\n    [active]\n  );\n\n  const onSelectCell = useCallback(\n    (cellCoordinate) => {\n      if (!isClue(active)) {\n        setActive(cellCoordinate);\n      } else {\n        setGuesses((state) => {\n          const newState = Object.entries(state).reduce((acc: PlainObject, [key, value]) => {\n            if (key && value && value !== cellCoordinate) {\n              acc[key] = value;\n            }\n            return acc;\n          }, {});\n\n          newState[getClueKey(active!)] = cellCoordinate;\n\n          setActive(null);\n          return newState;\n        });\n      }\n    },\n    [active]\n  );\n\n  const onClearCell = (clueKey: string) => {\n    setGuesses((state: PlainObject) => {\n      const newState = { ...state };\n      delete newState[clueKey];\n      return newState;\n    });\n  };\n\n  const prepareSubmitGuesses = useCallback(() => {\n    const result = Object.entries(guesses).reduce((acc: PlainObject, [clueKey, value]) => {\n      const [, playerId] = getClueFromKey(clueKey);\n      acc[playerId] = value;\n      return acc;\n    }, {});\n\n    onSubmitGuesses({ guesses: result });\n  }, [guesses, onSubmitGuesses]);\n\n  // Select player's own clue\n  useEffect(() => {\n    const playersOwnClue = clues.find((clue) => clue.playerId === user.id);\n\n    setGuesses({\n      [getClueKey(playersOwnClue)]: playersOwnClue?.coordinate,\n    });\n  }, []); // eslint-disable-line\n\n  const randomGuessThem = () => {\n    const usedCells = Object.values(guesses);\n    const usedClues = Object.keys(guesses);\n\n    const availableCells = shuffle(\n      grid.filter((cell) => cell.available && cell.playerId !== user.id && !usedCells.includes(cell.index))\n    );\n    const availableClues = clues.filter((clue) => !usedClues.includes(getClueKey(clue)));\n    const newGuesses = availableClues.reduce((acc: PlainObject, clueObj, index) => {\n      if (clueObj.playerId === user.id) {\n        acc[getClueKey(clueObj)] = clueObj.coordinate;\n      } else {\n        acc[getClueKey(clueObj)] = availableCells[index].index;\n      }\n      return acc;\n    }, {});\n    setGuesses({\n      ...newGuesses,\n      ...guesses,\n    });\n  };\n\n  return (\n    <div className=\"x-step\">\n      <Title>\n        <Translate pt=\"Decifre as dicas!\" en=\"Guess the cells!\" />\n      </Title>\n\n      <Clues clues={clues} onSelectClue={onSelectClue} active={active} guesses={guesses} />\n      <Instruction contained>\n        <Translate\n          pt=\"Clique em uma dica acima e em uma célula abaixo, ou vice-versa.\"\n          en=\"Click on a clue above then on a cell below, or vice-versa.\"\n        />\n      </Instruction>\n\n      <ButtonContainer>\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          onClick={prepareSubmitGuesses}\n          disabled={Object.keys(guesses).length !== clues.length}\n        >\n          <Translate pt=\"Enviar respostas\" en=\"Send guesses\" />\n        </Button>\n        <Button size=\"large\" type=\"dashed\" onClick={randomGuessThem}>\n          <Translate pt=\"Desistir\" en=\"Give up\" />\n        </Button>\n      </ButtonContainer>\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={SelectableCell}\n        cellComponentProps={{ onSelectCell, onClearCell, active, guesses, clues, user }}\n      />\n\n      <ReadyPlayersBar players={players} />\n    </div>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitGuessesAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepGuessing } from './StepGuessing';\n\nfunction PhaseGuessing({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitGuesses = useOnSubmitGuessesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.GUESSING}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"guess\"\n          title={translate('Match!', 'Combine!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora combine as dicas de cada jogador com as coordenadas corretas!\n                  <br />\n                  Basta clicar em uma das dicas no topo e então em uma das células da grade.\n                </>\n              }\n              en={\n                <>\n                  Now match the clues from each player with the correct coordinates\n                  <br />\n                  Just click on one of the clues on top then in one of the cells in the grid.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGuessing\n          user={user}\n          grid={state.grid}\n          clues={state.clues}\n          onSubmitGuesses={onSubmitGuesses}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGuessing;\n","// This icon file is generated automatically.\nvar CheckSquareFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM695.5 365.7l-210.6 292a31.8 31.8 0 01-51.7 0L308.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H689c6.5 0 10.3 7.4 6.5 12.7z\" } }] }, \"name\": \"check-square\", \"theme\": \"filled\" };\nexport default CheckSquareFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CheckSquareFilledSvg from \"@ant-design/icons-svg/es/asn/CheckSquareFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CheckSquareFilled = function CheckSquareFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CheckSquareFilledSvg\n  }));\n};\n\nCheckSquareFilled.displayName = 'CheckSquareFilled';\nexport default /*#__PURE__*/React.forwardRef(CheckSquareFilled);","// This icon file is generated automatically.\nvar CloseSquareFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM676.1 657.9c4.4 5.2.7 13.1-6.1 13.1h-58.9c-4.7 0-9.2-2.1-12.3-5.7L512 561.8l-86.8 103.5c-3 3.6-7.5 5.7-12.3 5.7H354c-6.8 0-10.5-7.9-6.1-13.1L470.2 512 347.9 366.1A7.95 7.95 0 01354 353h58.9c4.7 0 9.2 2.1 12.3 5.7L512 462.2l86.8-103.5c3-3.6 7.5-5.7 12.3-5.7H670c6.8 0 10.5 7.9 6.1 13.1L553.8 512l122.3 145.9z\" } }] }, \"name\": \"close-square\", \"theme\": \"filled\" };\nexport default CloseSquareFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloseSquareFilledSvg from \"@ant-design/icons-svg/es/asn/CloseSquareFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CloseSquareFilled = function CloseSquareFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CloseSquareFilledSvg\n  }));\n};\n\nCloseSquareFilled.displayName = 'CloseSquareFilled';\nexport default /*#__PURE__*/React.forwardRef(CloseSquareFilled);","import clsx from 'clsx';\nimport { orderBy } from 'lodash';\n//Design Resources\nimport { Table } from 'antd';\nimport { CheckSquareFilled, CloseSquareFilled, TrophyOutlined, WarningOutlined } from '@ant-design/icons';\n// Utils\nimport { AVATARS as avatars } from 'utils/constants';\nimport { useLanguage } from 'hooks';\n// Components\nimport {\n  AvatarName,\n  ButtonContainer,\n  Instruction,\n  PopoverRule,\n  TimedButton,\n  Title,\n  Translate,\n} from 'components';\nimport { WordGrid } from './WordGrid';\nimport { ClueCard } from './ClueCard';\nimport { PreviousClue } from './PreviousClue';\nimport { ScoringRule } from './RulesBlobs';\n\nconst AVATARS: PlainObject = avatars;\n\ntype PlayersInCellProps = {\n  cellPlayers: {\n    playerId: PlayerId;\n    isCorrect?: boolean;\n    color?: string;\n  }[];\n  players: GamePlayers;\n};\n\nfunction PlayersInCell({ cellPlayers, players }: PlayersInCellProps) {\n  return (\n    <ul>\n      {cellPlayers.map(({ playerId, isCorrect }: any) =>\n        isCorrect ? (\n          <li\n            key={`players-in-cell-${playerId}`}\n            className={clsx(isCorrect && 'x-players-in-cell-player--correct')}\n          >\n            <AvatarName player={players[playerId]} size=\"small\" />\n          </li>\n        ) : (\n          <></>\n        )\n      )}\n    </ul>\n  );\n}\n\ntype ResultCellProps = {\n  cell: any;\n  clues: CruzaPalavrasClue[];\n  players: GamePlayers;\n  playerPerVotedCell: any;\n  colorCodedCluesPerPlayer: any;\n};\n\nfunction ResultCell({ cell, clues, players, playerPerVotedCell, colorCodedCluesPerPlayer }: ResultCellProps) {\n  const clue = clues.find((c) => c.coordinate === cell.index);\n  const cellPlayers = playerPerVotedCell[cell.index] ?? [];\n\n  if (clue) {\n    return (\n      <div>\n        <ClueCard\n          isMatched\n          clue={clue.clue}\n          color={colorCodedCluesPerPlayer[clue.playerId!]}\n          player={players[clue.playerId!]}\n        />\n        {Boolean(cellPlayers.length) && <PlayersInCell cellPlayers={cellPlayers} players={players} />}\n      </div>\n    );\n  }\n\n  if (cell.text) {\n    return <PreviousClue clue={cell.text} />;\n  }\n\n  return (\n    <span>\n      {Boolean(cellPlayers.length) && <PlayersInCell cellPlayers={cellPlayers} players={players} />}\n    </span>\n  );\n}\n\ntype AnswersListProps = {\n  players: GamePlayers;\n  grid: CruzaPalavraGrid;\n  correctCoordinatesPerPlayer: any;\n};\n\nfunction AnswersList({ players, grid, correctCoordinatesPerPlayer }: AnswersListProps) {\n  const { translate } = useLanguage();\n\n  const columns = [\n    {\n      title: translate('Jogador', 'Player'),\n      dataIndex: 'player',\n      key: 'player',\n      render: (data: any) => <AvatarName player={data} />,\n      sorter: (a: any, b: any) => (a.name > b.name ? -1 : 1),\n    },\n    {\n      title: translate('Achou que', 'Thought that'),\n      dataIndex: 'guess',\n      key: 'guess',\n      render: (guess: string) => guess.toUpperCase(),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n    {\n      title: translate('Era', 'Was'),\n      dataIndex: 'clue',\n      key: 'clue',\n      render: (clue: string) => clue.toUpperCase(),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n    {\n      title: translate('Resultado', 'Result'),\n      dataIndex: 'result',\n      key: 'result',\n      render: (value: any) =>\n        value ? (\n          <CheckSquareFilled style={{ color: 'green' }} />\n        ) : (\n          <CloseSquareFilled style={{ color: 'red' }} />\n        ),\n      sorter: (a: any, b: any) => (a > b ? -1 : 1),\n    },\n  ];\n\n  const parsedData = Object.values(players).map((player) => {\n    return Object.entries(player?.guesses ?? {}).reduce(\n      (acc: PlainObject, [guessedPlayerId, guessedCoordinate]: any) => {\n        if (guessedPlayerId === player.id) return acc;\n\n        const cell = grid[guessedCoordinate];\n\n        acc.push({\n          playerName: player.name,\n          player,\n          clue: `${cell.yText} + ${cell.xText}`,\n          guess: players[guessedPlayerId].clue,\n          result: correctCoordinatesPerPlayer?.[guessedCoordinate] === guessedPlayerId,\n        });\n\n        return acc;\n      },\n      []\n    );\n  });\n\n  const dataSource: any = orderBy(parsedData.flat(), ['playerName', 'guess'], ['asc', 'asc']);\n\n  return <Table size=\"small\" columns={columns} dataSource={dataSource} pagination={false} />;\n}\n\ntype BadCluesPlayersListProps = {\n  badCluesPlayersList: GamePlayer[];\n};\n\nfunction BadCluesPlayersList({ badCluesPlayersList }: BadCluesPlayersListProps) {\n  return (\n    <span>\n      {badCluesPlayersList.map((player, index) => (\n        <span key={`bad-clue-${player.id}-${index}`}>\n          <AvatarName player={player} key={`bad-clue-${player.id}`} size=\"small\" />\n          {badCluesPlayersList.length > 0 && index < badCluesPlayersList.length - 1 ? ', ' : ''}\n        </span>\n      ))}\n    </span>\n  );\n}\n\ntype StepRevealProps = {\n  players: GamePlayers;\n  grid: CruzaPalavraGrid;\n  user: GamePlayer;\n  clues: CruzaPalavrasClue[];\n  goToNextStep: GenericFunction;\n  whoGotNoPoints: PlayerId[];\n};\n\nexport function StepReveal({ grid, user, players, clues, goToNextStep, whoGotNoPoints }: StepRevealProps) {\n  const correctCoordinatesPerPlayer = clues.reduce((acc: PlainObject, clue) => {\n    acc[clue.coordinate] = clue.playerId;\n    return acc;\n  }, {});\n\n  const colorCodedCluesPerPlayer = clues.reduce((acc: PlainObject, clue) => {\n    acc[clue.playerId!] = AVATARS[players[clue.playerId!].avatarId].color;\n    return acc;\n  }, {});\n\n  const playerPerVotedCell = Object.values(players).reduce((acc: PlainObject, player) => {\n    Object.entries(player.guesses ?? {}).forEach(([playerId, coordinate]: any) => {\n      if (playerId !== player.id) {\n        if (acc[coordinate] === undefined) {\n          acc[coordinate] = [];\n        }\n        acc[coordinate].push({\n          playerId: player.id,\n          color: colorCodedCluesPerPlayer[playerId],\n          isCorrect: correctCoordinatesPerPlayer[coordinate] === playerId,\n        });\n      }\n    });\n\n    return acc;\n  }, {});\n\n  const whoGotNoPointsNames = whoGotNoPoints.map((playerId) => players[playerId]);\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <div className=\"x-step\">\n      <Title>\n        <Translate pt=\"Resultado\" en=\"Results\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRule playerCount={playerCount} />} />\n\n      {Boolean(whoGotNoPoints.length) && (\n        <Instruction contained>\n          <WarningOutlined style={{ color: 'red' }} />\n          <Translate\n            pt={\n              <>\n                Ninguém acertou a(s) dica(s) dadas por\n                <BadCluesPlayersList badCluesPlayersList={whoGotNoPointsNames} />, então ele(s) perde(m){' '}\n                {playerCount} pontos.\n              </>\n            }\n            en={\n              <>\n                Nobody got the clues given by\n                <BadCluesPlayersList badCluesPlayersList={whoGotNoPointsNames} />, so they lose {playerCount}{' '}\n                points.\n              </>\n            }\n          />\n        </Instruction>\n      )}\n\n      <WordGrid\n        grid={grid}\n        user={user}\n        CellComponent={ResultCell}\n        cellComponentProps={{ clues, players, playerPerVotedCell, colorCodedCluesPerPlayer }}\n      />\n\n      <ButtonContainer>\n        <TimedButton\n          duration={60}\n          label={<Translate pt=\"Ver Ranking\" en=\"See ranking\" />}\n          icon={<TrophyOutlined />}\n          onExpire={goToNextStep}\n          showTimer\n          onClick={goToNextStep}\n        />\n      </ButtonContainer>\n\n      <Title level={3}>\n        <Translate pt=\"Todas as respostas\" en=\"All Answers\" />\n      </Title>\n      <AnswersList correctCoordinatesPerPlayer={correctCoordinatesPerPlayer} players={players} grid={grid} />\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\n// Components\nimport {\n  AdminNextRoundButton,\n  ButtonContainer,\n  Instruction,\n  PopoverRule,\n  RankingBoard,\n  Step,\n  Title,\n  Translate,\n} from 'components';\nimport { ScoringRule } from './RulesBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  playerCount: number;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: GenericFunction;\n  isLastRound?: boolean;\n};\n\nexport function StepRanking({\n  players,\n  playerCount,\n  ranking,\n  goToPreviousStep,\n  round,\n  isLastRound,\n}: StepRankingProps) {\n  return (\n    <Step fullWidth>\n      <Title>Ranking</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Distribuição de pontos: Votos corretos | Votos recebidos | Penalidade se ninguém acertou a sua dica\"\n          en=\"Points Distribution: Correct guesses | Received votes | Penalty for nobody getting your clue correctly\"\n        />\n      </Instruction>\n\n      <PopoverRule content={<ScoringRule playerCount={playerCount} />} />\n\n      <RankingBoard ranking={ranking} players={players} />\n\n      <ButtonContainer>\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </ButtonContainer>\n      <AdminNextRoundButton round={round} lastRound={isLastRound} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\nimport { StepReveal } from './StepReveal';\nimport { StepRanking } from './StepRanking';\nimport { ScoringRule } from './RulesBlobs';\n\nfunction PhaseReveal({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const playerCount = Object.keys(players).length;\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.CRUZA_PALAVRAS.REVEAL}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"rank\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <ScoringRule playerCount={playerCount} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepReveal\n          user={user}\n          grid={state.grid}\n          clues={state.clues}\n          goToNextStep={goToNextStep}\n          players={players}\n          whoGotNoPoints={state.whoGotNoPoints ?? []}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          playerCount={playerCount}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n          isLastRound={state?.lastRound}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Components\nimport { GameOverWrapper } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseClueWriting from './PhaseClueWriting';\nimport PhaseGuessing from './PhaseGuessing';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionCruzaPalavras({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.CRUZA_PALAVRAS.CLUE_WRITING:\n        return PhaseClueWriting;\n      case PHASES.CRUZA_PALAVRAS.GUESSING:\n        return PhaseGuessing;\n      case PHASES.CRUZA_PALAVRAS.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.CRUZA_PALAVRAS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionCruzaPalavras;\n","// This icon file is generated automatically.\nvar PlusCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm192 472c0 4.4-3.6 8-8 8H544v152c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V544H328c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h152V328c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v152h152c4.4 0 8 3.6 8 8v48z\" } }] }, \"name\": \"plus-circle\", \"theme\": \"filled\" };\nexport default PlusCircleFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusCircleFilledSvg from \"@ant-design/icons-svg/es/asn/PlusCircleFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlusCircleFilled = function PlusCircleFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusCircleFilledSvg\n  }));\n};\n\nPlusCircleFilled.displayName = 'PlusCircleFilled';\nexport default /*#__PURE__*/React.forwardRef(PlusCircleFilled);","// This icon file is generated automatically.\nvar WarningOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\" } }] }, \"name\": \"warning\", \"theme\": \"outlined\" };\nexport default WarningOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport WarningOutlinedSvg from \"@ant-design/icons-svg/es/asn/WarningOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar WarningOutlined = function WarningOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: WarningOutlinedSvg\n  }));\n};\n\nWarningOutlined.displayName = 'WarningOutlined';\nexport default /*#__PURE__*/React.forwardRef(WarningOutlined);"],"names":["WordGrid","grid","user","CellComponent","cellComponentProps","length","Math","sqrt","gridStyle","gridTemplateColumns","gridTemplateRows","className","style","map","cell","clsx","kind","text","index","FormOutlined","props","ref","React","AntdIcon","_objectSpread","icon","FormOutlinedSvg","displayName","PreviousClue","clue","WordForm","x","y","onSubmit","disabled","useState","setClue","textInput","useRef","useEffect","current","focus","useMock","substring","direction","placeholder","onChange","e","target","value","onPressEnter","type","onClick","pt","en","WritingCell","onSubmitClue","writable","id","playerId","content","xText","yText","title","trigger","shape","WritingCluesRule","playerCount","ScoringRule","StepClueWriting","players","isLoading","useLoading","Object","keys","contained","payload","trim","toLowerCase","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useUser","request","useAPICall","apiFunction","CRUZA_PALAVRAS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","action","useOnSubmitClueAPIRequest","phase","allowedPhase","PHASES","conditions","round","onPressButton","buttonText","time","circleColor","onClose","currentRound","isClue","instance","Boolean","getClueKey","clueObj","SEPARATOR","getClueFromKey","key","split","ClueCard","isMatched","isSelected","indexColor","color","player","strikeMatches","colorClass","getColorFromIndex","borderColor","backgroundColor","avatarId","CheckCircleFilled","PlusCircleFilled","SelectableCell","onSelectCell","onClearCell","active","guesses","clues","matchEntry","entries","find","arr","clueKey","coordinate","clueIndexColor","findIndex","c","height","Clues","onSelectClue","StepGuessing","onSubmitGuesses","setActive","setGuesses","useCallback","s","cellCoordinate","newState","reduce","acc","prepareSubmitGuesses","result","playersOwnClue","size","usedCells","values","usedClues","availableCells","shuffle","filter","available","includes","newGuesses","useOnSubmitGuessesAPIRequest","CheckSquareFilled","CheckSquareFilledSvg","CloseSquareFilled","CloseSquareFilledSvg","AVATARS","avatars","PlayersInCell","cellPlayers","isCorrect","ResultCell","playerPerVotedCell","colorCodedCluesPerPlayer","AnswersList","correctCoordinatesPerPlayer","columns","dataIndex","render","data","sorter","a","b","name","guess","toUpperCase","parsedData","guessedPlayerId","guessedCoordinate","push","playerName","dataSource","orderBy","flat","pagination","BadCluesPlayersList","badCluesPlayersList","StepReveal","whoGotNoPoints","forEach","undefined","whoGotNoPointsNames","WarningOutlined","duration","label","TrophyOutlined","onExpire","showTimer","level","StepRanking","ranking","goToPreviousStep","isLastRound","fullWidth","lastRound","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseClueWriting","PhaseGuessing","PhaseReveal","PhaseGameOver","PageError","PlusCircleFilledSvg","WarningOutlinedSvg"],"sourceRoot":""}