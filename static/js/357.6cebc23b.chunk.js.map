{"version":3,"file":"static/js/357.6cebc23b.chunk.js","mappings":"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","sources":["games/ue-so-isso/StepWordSelection.tsx","games/ue-so-isso/GameProgressBar.tsx","games/ue-so-isso/GuesserWaitingRoom.tsx","games/ue-so-isso/PhaseWordSelection.tsx","games/ue-so-isso/api-requests.ts","games/ue-so-isso/SuggestionEasel.tsx","games/ue-so-isso/RulesBlobs.tsx","games/ue-so-isso/UeSoIssoCard.tsx","games/ue-so-isso/StepSuggestion.tsx","games/ue-so-isso/PhaseSuggest.tsx","games/ue-so-isso/SuggestionCard.tsx","games/ue-so-isso/StepCompareSuggestions.tsx","games/ue-so-isso/PhaseCompare.tsx","games/ue-so-isso/Guess.tsx","games/ue-so-isso/StepGuessing.tsx","games/ue-so-isso/StepGuessVerification.tsx","games/ue-so-isso/PhaseGuess.tsx","games/ue-so-isso/PhaseGameOver.tsx","games/ue-so-isso/SessionUeSoIsso.tsx","../node_modules/@ant-design/icons-svg/es/asn/CloudUploadOutlined.js","../node_modules/@ant-design/icons/es/icons/CloudUploadOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/MinusOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/WarningOutlined.js","../node_modules/@ant-design/icons/es/icons/WarningOutlined.js"],"sourcesContent":["import { useState } from 'react';\n// Ant Design Resources\nimport { CheckCircleFilled, CloudUploadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarName, Instruction, Step, TimedButton, Title, Translate } from 'components';\n\ntype StepWordSelectionProps = {\n  guesser: GamePlayer;\n  onSendSelectedWords: GenericFunction;\n  words: UeSoIssoCard[];\n};\n\nexport function StepWordSelection({ guesser, onSendSelectedWords, words = [] }: StepWordSelectionProps) {\n  const [selectedWords, setSelectedWords] = useState<PlainObject>({});\n  const { translate } = useLanguage();\n\n  const selectedWordsArray = Object.keys(selectedWords);\n  const noSelection = selectedWordsArray.length === 0;\n\n  const autoSelectRandomWord = () => {\n    const randomSelection = words[0].id;\n    onSendSelectedWords({ votes: [randomSelection] });\n  };\n\n  const onSelectWord = (wordId: string) => {\n    setSelectedWords((s: PlainObject) => {\n      const newState = { ...s };\n      if (newState[wordId]) {\n        delete newState[wordId];\n      } else {\n        newState[wordId] = true;\n      }\n      return newState;\n    });\n  };\n\n  return (\n    <Step fullWidth>\n      <Title white>\n        <Translate\n          pt={\n            <>\n              Selecione a Palavra Secreta para <AvatarName player={guesser} />\n            </>\n          }\n          en={\n            <>\n              {' '}\n              Select a Secret Word for <AvatarName player={guesser} />\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              A palavra com mais votos será escolhida para essa rodada. Você pode selecionar quantas quiser!\n            </>\n          }\n          en={\n            <>\n              The word with the most votes will be selected for the round. You can choose as many as you wish!\n            </>\n          }\n        />\n      </Instruction>\n\n      <ul className=\"u-word-card\">\n        {words.map((word) => {\n          return (\n            <li className=\"u-word-card__word\" key={word.id}>\n              <button className=\"u-word-card__button\" onClick={() => onSelectWord(word.id)}>\n                <span className=\"u-word-card__text\">{word.text}</span>\n                <span className=\"u-word-card__icon\">\n                  {Boolean(selectedWords[word.id]) && <CheckCircleFilled />}\n                </span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n\n      <TimedButton\n        label={translate('Enviar votos', 'Send votes')}\n        icon={<CloudUploadOutlined />}\n        type=\"primary\"\n        onClick={() => onSendSelectedWords({ votes: selectedWordsArray })}\n        disabled={noSelection}\n        onExpire={autoSelectRandomWord}\n        duration={15}\n        showTimer={noSelection}\n      />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Progress } from 'antd';\n// Components\nimport { Translate } from 'components';\n\ntype GameProgressBarProps = {\n  groupScore: number;\n  round: GameRound;\n};\n\nexport function GameProgressBar({ groupScore, round }: GameProgressBarProps) {\n  const totalProgress = Math.round((100 * (round.current - 1)) / round.total);\n\n  return (\n    <div className=\"u-word-selection-phase__game-progress-bar\">\n      <Translate pt=\"Progresso:\" en=\"Group Progress\" />\n      <br />\n      <Progress\n        percent={totalProgress}\n        success={{ percent: groupScore ?? 0, strokeColor: '#bbec6c' }}\n        status=\"active\"\n        strokeColor=\"#fe646f\"\n      />\n    </div>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Step, WaitingRoom } from 'components';\n\ntype GuesserWaitingRoomProps = {\n  players: GamePlayers;\n  instructionSuffix: {\n    pt: string;\n    en: string;\n  };\n};\n\nexport function GuesserWaitingRoom({ players, instructionSuffix }: GuesserWaitingRoomProps) {\n  const { language, translate } = useLanguage();\n\n  const instructionPrefix = translate('Aguarde os outros jogadores', 'Please wait while the other players');\n\n  return (\n    <Step fullWidth>\n      <WaitingRoom\n        players={players}\n        title={translate('Você é o(a) adivinhador(a)', \"You're the guesser\")}\n        instruction={`${instructionPrefix} ${instructionSuffix[language]}.`}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useWhichPlayerIsThe, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n  ViewOr,\n} from 'components';\nimport { StepWordSelection } from './StepWordSelection';\nimport { GameProgressBar } from './GameProgressBar';\nimport { GuesserWaitingRoom } from './GuesserWaitingRoom';\nimport { useOnSubmitVotesAPIRequest } from './api-requests';\n\ntype RoundAnnouncementTextProps = {\n  guesser: GamePlayer;\n  groupScore: number;\n  round: GameRound;\n};\n\nfunction RoundAnnouncementText({ guesser, groupScore, round }: RoundAnnouncementTextProps) {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Para essa rodada, <AvatarName player={guesser} addressUser /> será o(a) adivinhador(a).\n          </>\n        }\n        en={\n          <>\n            For this round, <AvatarName player={guesser} addressUser /> will be the guesser.\n          </>\n        }\n      />\n      <br />\n      <GameProgressBar groupScore={groupScore} round={round} />\n    </Instruction>\n  );\n}\n\nfunction PhaseWordSelection({ state, players, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const [guesser, isUserTheGuesser] = useWhichPlayerIsThe('guesserId', state, players);\n  const { step, goToNextStep, setStep } = useStep(0);\n\n  const onSendSelectedWords = useOnSubmitVotesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UE_SO_ISSO.WORD_SELECTION}\n      className=\"u-word-selection-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={() => setStep(1)} time={7} circleColor=\"cream\">\n          <RoundAnnouncementText guesser={guesser} groupScore={state.groupScore} round={state.round} />\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"opinions\"\n          title={translate('Seleção da Palavra Secreta', 'Secret Word Selection')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          {isUserTheGuesser ? (\n            <Instruction>\n              <Translate\n                pt={\n                  <>\n                    Os outros jogadores escolherão a palavra secreta.\n                    <br />\n                    Aguarde...\n                  </>\n                }\n                en={\n                  <>\n                    The other players will now choose the secret word.\n                    <br />\n                    Just wait...\n                  </>\n                }\n              />\n            </Instruction>\n          ) : (\n            <Instruction>\n              <Translate\n                pt={\n                  <>\n                    Selecione a palavra secreta para essa rodada.\n                    <br />\n                    Você pode selecionar quantas quiser.\n                    <br />A palavra mais votada será usada nessa rodada!\n                  </>\n                }\n                en={\n                  <>\n                    Choose the secret word for this round.\n                    <br />\n                    You may select as many as you wish.\n                    <br />\n                    The most voted word would be used this round!\n                  </>\n                }\n              />\n            </Instruction>\n          )}\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n\n        <ViewOr orCondition={isUserTheGuesser}>\n          <GuesserWaitingRoom\n            players={players}\n            instructionSuffix={{\n              pt: 'decidirem a palavra secreta',\n              en: 'choose a secret word',\n            }}\n          />\n\n          <StepWordSelection\n            words={state?.words}\n            onSendSelectedWords={onSendSelectedWords}\n            guesser={guesser}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { UE_SO_ISSO_API } from 'adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(1),\n    successMessage: translate('Votos enviados com sucesso!', 'Votes send successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus votos',\n      'Oops, the application failed to send your votes'\n    ),\n  });\n\n  return (payload: SubmitVotesPayload) => {\n    request({\n      action: 'SUBMIT_VOTES',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitSuggestionsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'submit-suggestion',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Dicas enviada com sucesso!', 'Suggestions sent successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas dicas',\n      'Oops, the application failed to send your suggestions'\n    ),\n  });\n\n  return (payload: SubmitSuggestionsPayload) => {\n    request({\n      action: 'SUBMIT_SUGGESTIONS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitValidationsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'submit-validations',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Validação enviada com sucesso!', 'Validation sent successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar a validação das sugestões',\n      'Oops, the application failed to send the validation'\n    ),\n  });\n\n  return (payload: SubmitValidationsPayload) => {\n    request({\n      action: 'SUBMIT_VALIDATION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnValidateSuggestionAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'validate-suggestion',\n    successMessage: translate('Atualizado!', 'Updated!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar atualizar',\n      'Oops, the application failed to update'\n    ),\n  });\n\n  return (payload: ValidateSuggestionPayload) => {\n    request({\n      action: 'VALIDATE_SUGGESTION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitOutcomeAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'submit-outcome',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('Resultado enviado com sucesso!', 'Outcome sent successfully!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar o resultado',\n      'Oops, the application failed to submit the outcome'\n    ),\n  });\n\n  return (payload: SubmitOutcomePayload) => {\n    request({\n      action: 'SUBMIT_OUTCOME',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSendGuessAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: UE_SO_ISSO_API.submitAction,\n    actionName: 'send-guess',\n    successMessage: translate('Chute enviado!', 'Guess sent!'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar atualizar',\n      'Oops, the application failed to update'\n    ),\n  });\n\n  return (payload: SendGuessPayload) => {\n    request({\n      action: 'SEND_GUESS',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Input } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n\ntype SuggestionEaselProps = {\n  id: string;\n  onChangeInput?: GenericFunction;\n  onPressEnter?: GenericFunction;\n  value?: string;\n};\n\nexport function SuggestionEasel({ id, onChangeInput, onPressEnter, value }: SuggestionEaselProps) {\n  const { translate } = useLanguage();\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 230 60\"\n      overflow=\"visible\"\n      width=\"230\"\n      className=\"u-suggestion-easel\"\n    >\n      <path fill=\"#fff\" d=\"M26.7 59.5L14.1.5h202.7l12.6 59z\" />\n      <path fill=\"#4d4d4d\" d=\"M216.4 1l12.4 58H27.1L14.7 1h201.7m.8-1H13.5l12.8 60H230L217.2 0z\" />\n      <path fill=\"#4d4d4d\" d=\"M24.2 48.3L13.5 0 0 48.3z\" />\n      <foreignObject x=\"32.6\" y=\"13.9\" width=\"185\" height=\"300\">\n        <div>\n          <Input\n            placeholder={translate('Escreva dica aqui', 'Write here')}\n            key={id}\n            id={id}\n            value={value}\n            onChange={onChangeInput}\n            className=\"u-suggestion-easel__input\"\n            bordered={false}\n            onPressEnter={onPressEnter}\n            autoComplete=\"off\"\n          />\n        </div>\n      </foreignObject>\n      <path opacity=\".2\" d=\"M0 48.3L26.3 60l-2.1-11.7z\" />\n    </svg>\n  );\n}\n","// Ant Design Resources\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n// Components\nimport { AvatarName, Instruction, Translate } from 'components';\n\nexport function WritingRules(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Hora de escrever uma dica para a palavra secreta!\n            <br />\n            A dica tem que ser uma palavra única que ajude o adivinhador... adivinhar.\n            <br />\n            É proibido usar derivados, partes da palavra ou traduções em outras línguas.\n            <br />E não seja tão óbvio, já que dicas similares são eliminadas!\n          </>\n        }\n        en={\n          <>\n            Time to write a clue for the secret word!\n            <br />\n            The clue MUST be a single word or compound word that helps the guesser... guess.\n            <br />\n            You can't use parts of the Secret word, translations, words in the same family (prince/princess),\n            made-up words, or phonetically identical (weather/whether).\n            <br />\n            Don't be too obvious, identical words (and variants) will be eliminated!\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ComparisonRules(): JSX.Element {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Hora de comparar as dicas e eliminar as similares!\n            <br />O aplicativo elimina automaticamente todas as palavras idênticas, mas os jogadores precisam\n            eliminar as inválidas e similares.\n          </>\n        }\n        en={\n          <>\n            Time to compare the clues and eliminate variants\n            <br />\n            The app has already eliminated any identical clues.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function ComparisonDetailedRules(): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Já eliminamos todas as palavras idênticas, agora, elimine palavras inválidas ou similares.\n            <br />\n            Lembre-se que são consideradas dicas iguais palavras derivadas e conjugações:{' '}\n            <code>piloto = pilotar = pilotando</code>. Variações como pluralidade, gênero e erros ortográficos\n            também devem ser eliminadas: <code>príncipe = princesa = príncipes = pryncipi</code>.\n          </>\n        }\n        en={\n          <>\n            The app has already eliminated all identical clues, not it's time to eliminate all invalid clues.\n            <br />\n            Remember that the following clue types are considered invalid:\n            <br />\n            Variants: <code>pilot = pilots = piloting</code>.\n            <br />\n            Words on the same family: <code>prince = princess</code>\n            <br />\n            Misspelled or made-up words.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\nexport function ComparisonPhaseRules({ controller }: { controller: GamePlayer }): JSX.Element {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            <ExclamationCircleOutlined /> Para não virar bagunça, somente{' '}\n            <AvatarName player={controller} addressUser />\n            pode clicar nas palavras para eliminá-las ou ativá-las, mas todos podem discutir.\n            <br />\n            Uma dica ser muito ruim não significa que ela seja inválida.\n            <br />\n            Refiram às palavras por letra, o Adivinhador pode estar ouvindo!\n          </>\n        }\n        en={\n          <>\n            <ExclamationCircleOutlined /> <AvatarName player={controller} />\n            is in charge of clicking on the clues to disable or enable them as valid but everybody (but the\n            guesser) should discuss.\n            <br />\n            A terrible clue is still valid if it follow the rules.\n            <br />\n            Refer to the clues by letter, the Guesser is listening!\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GuessingRules({ guesserName }: { guesserName: string }): JSX.Element {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Hora de {guesserName} brilhar!\n            <br />\n            Você tem uma única change de adivinhar a palavra secreta!\n            <br />\n            Pense em voz alta! (É mais divertido para os outros jogadores)\n          </>\n        }\n        en={\n          <>\n            It's time to shine, {guesserName}!\n            <br />\n            You have a single chance to guess the secret word!\n            <br />\n            Think out loud! (It's more entertaining to the other players)\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Ant Design Resources\nimport { WarningOutlined } from '@ant-design/icons';\n// Hooks\nimport { Card } from 'components';\n// Components\nimport { useLanguage } from 'hooks';\n\ntype UeSoIssoCardProps = {\n  word?: any;\n  header?: any;\n};\n\nexport function UeSoIssoCard({ word, header }: UeSoIssoCardProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <Card color=\"purple\" header={translate('A Palavra Secreta é', 'Secret Word', header)} size=\"large\">\n      {word ?? <WarningOutlined />}\n    </Card>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\n// Components\nimport { AvatarName, Instruction, ReadyPlayersBar, Step, Title, Translate } from 'components';\nimport { SuggestionEasel } from './SuggestionEasel';\nimport { WritingRules } from './RulesBlobs';\nimport { UeSoIssoCard as Card } from './UeSoIssoCard';\n\ntype StepSuggestionProps = {\n  guesser: GamePlayer;\n  onSendSuggestions: GenericFunction;\n  secretWord: UeSoIssoCard;\n  suggestionsNumber?: number;\n  players: GamePlayers;\n};\n\nexport function StepSuggestion({\n  guesser,\n  onSendSuggestions,\n  secretWord,\n  players,\n  suggestionsNumber = 1,\n}: StepSuggestionProps) {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onChangeInput = (e: any) => {\n    const { id, value } = e.target;\n    if (id && value?.length > 1) {\n      const indexStr = id.split('-')[1];\n      const index = Number(indexStr) - 1;\n      setSuggestions((s: any) => {\n        const newState = { ...s };\n        newState[index] = value.toUpperCase().trim();\n        return newState;\n      });\n    }\n  };\n\n  const suggestionsValues = Object.values(suggestions);\n\n  // On enter in the easel if only one suggestion is necessary\n  const onPressEnter = () => {\n    if (suggestionsNumber === suggestionsValues.length) {\n      onSendSuggestions({ suggestions: suggestionsValues });\n    }\n  };\n\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Escreva uma dica para <AvatarName player={guesser} />\n            </>\n          }\n          en={\n            <>\n              Write a clue for <AvatarName player={guesser} />\n            </>\n          }\n        />\n      </Title>\n\n      <WritingRules />\n\n      <Card word={secretWord.text} />\n\n      {suggestionsNumber > 1 && (\n        <Instruction contained>\n          <Translate\n            pt={\n              <>Já que esse jogo tem menos jogadores, você tem que escrever {suggestionsNumber} sugestões</>\n            }\n            en={<>Since we have fewer players you must write {suggestionsNumber} clues</>}\n          />\n        </Instruction>\n      )}\n\n      <Space className=\"u-word-suggestion-step__inputs\">\n        {Array(suggestionsNumber)\n          .fill(1)\n          .map((entry, index) => {\n            const id = `suggestion-${entry + index}`;\n            return (\n              <SuggestionEasel key={id} id={id} onChangeInput={onChangeInput} onPressEnter={onPressEnter} />\n            );\n          })}\n      </Space>\n\n      <Space className=\"u-word-suggestion-step__submit\">\n        <Button\n          icon={<CloudUploadOutlined />}\n          type=\"primary\"\n          onClick={() => onSendSuggestions({ suggestions: suggestionsValues })}\n          disabled={suggestionsValues.length < suggestionsNumber}\n          size=\"large\"\n        >\n          <Translate pt=\"Enviar dica\" en=\"Send clue\" />\n          {suggestionsNumber > 1 && 's'}\n        </Button>\n      </Space>\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useWhichPlayerIsThe, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitSuggestionsAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate, ViewOr } from 'components';\nimport { StepSuggestion } from './StepSuggestion';\nimport { WritingRules } from './RulesBlobs';\nimport { GuesserWaitingRoom } from './GuesserWaitingRoom';\n\nfunction PhaseSuggest({ state, players, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [guesser, isUserTheGuesser] = useWhichPlayerIsThe('guesserId', state, players);\n\n  const onSendSuggestions = useOnSubmitSuggestionsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.UE_SO_ISSO.SUGGEST}\n      className=\"word-selection-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"writing\"\n          title={translate('Escreva uma dica!', 'Write a Clue!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WritingRules />\n          {isUserTheGuesser && (\n            <Instruction contained>\n              <Translate\n                pt=\"Já que você é o adivinhador, relaxe e aguarde...\"\n                en=\"Since you're the guesser, just relax and wait...\"\n              />\n            </Instruction>\n          )}\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n\n        <ViewOr orCondition={isUserTheGuesser}>\n          <GuesserWaitingRoom\n            players={players}\n            instructionSuffix={{\n              pt: 'escrevem dicas',\n              en: 'write clues',\n            }}\n          />\n\n          <StepSuggestion\n            guesser={guesser}\n            onSendSuggestions={onSendSuggestions}\n            secretWord={state.secretWord}\n            suggestionsNumber={state.suggestionsNumber}\n            players={players}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseSuggest;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\nimport { CloseOutlined } from '@ant-design/icons';\n// Utils\nimport { getColorFromIndex } from 'utils/helpers';\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Avatar, Card } from 'components';\n\ntype SuggestionCardProps = {\n  avatarId: string;\n  index: number;\n  playerName?: PlayerName;\n  invalid?: boolean;\n  suggestion: string;\n};\n\nexport function SuggestionCard({ avatarId, playerName, index, invalid, suggestion }: SuggestionCardProps) {\n  return (\n    <Card\n      size=\"medium\"\n      color={getColorFromIndex(index)}\n      className={clsx(invalid && 'u-suggestion-card__invalid')}\n      header={playerName ? `${LETTERS[index]} (${playerName})` : LETTERS[index]}\n    >\n      {invalid ? (\n        <AntAvatar size=\"small\" className=\"u-suggestion-card__suggestion-avatar\">\n          <CloseOutlined />\n        </AntAvatar>\n      ) : (\n        <Avatar id={avatarId} size=\"small\" className=\"u-suggestion-card__suggestion-avatar\" />\n      )}\n      {suggestion}\n    </Card>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { Button, message, Space } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useGlobalState, useLanguage, useLoading } from 'hooks';\n// Utils\nimport { deepCopy } from 'utils/helpers';\n// Components\nimport { AdminOnlyButton, Step, Title, Translate, PopoverRule, messageContent } from 'components';\nimport { UeSoIssoCard as Card } from './UeSoIssoCard';\nimport { SuggestionCard } from './SuggestionCard';\nimport { ComparisonDetailedRules, ComparisonPhaseRules } from './RulesBlobs';\n\ntype StepCompareSuggestionsProps = {\n  isUserTheController: boolean;\n  controller: GamePlayer;\n  onValidateSuggestions: GenericFunction;\n  onUpdateSuggestions: GenericFunction;\n  players: GamePlayers;\n  secretWord: UeSoIssoCard;\n  suggestions: UseSoIssoSuggestion[];\n};\n\nexport function StepCompareSuggestions({\n  isUserTheController,\n  controller,\n  onValidateSuggestions,\n  onUpdateSuggestions,\n  players,\n  secretWord,\n  suggestions,\n}: StepCompareSuggestionsProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [myRecommendation, setMyRecommendation] = useState<UseSoIssoSuggestion[]>(deepCopy(suggestions));\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [wasMessageShown, setWasMessageShown] = useState(false);\n\n  const onSetValidation = (index: number, suggestionEntry: UseSoIssoSuggestion, notAllowed?: boolean) => {\n    if (notAllowed) return;\n\n    const newRecommendation = [...myRecommendation];\n    if (newRecommendation[index]) {\n      newRecommendation[index].invalid = !newRecommendation[index].invalid;\n    } else {\n      newRecommendation[index] = {\n        ...suggestionEntry,\n        invalid: true,\n      };\n    }\n\n    onUpdateSuggestions({ suggestions: newRecommendation });\n    setMyRecommendation(newRecommendation);\n  };\n\n  useEffect(() => {\n    if (isUserTheController && !wasMessageShown && !isLoading) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate('Siga as instruções na página', 'Follow the instructions on the page'),\n          controller.id,\n          3\n        )\n      );\n      setWasMessageShown(true);\n    }\n  }, [isUserTheController, controller.id, translate, wasMessageShown, isLoading]);\n\n  const suggestionsValues = Object.values(myRecommendation);\n\n  return (\n    <Step fullWidth>\n      <Title white>\n        <Translate pt=\"Comparem as Dicas\" en=\"Compare Clues\" />\n      </Title>\n\n      <Card word={secretWord.text} />\n\n      <PopoverRule content={<ComparisonDetailedRules />} showLabel />\n\n      <ComparisonPhaseRules controller={controller} />\n\n      <Space className=\"u-word-compare-suggestions-step__suggestions\">\n        {suggestions.map((suggestionEntry, index) => {\n          if (!isUserTheController && !isAdmin) {\n            return (\n              <div key={`${suggestionEntry.suggestion}-${index}`}>\n                <SuggestionCard\n                  suggestion={suggestionEntry.suggestion}\n                  invalid={suggestionEntry.invalid}\n                  playerName={players[suggestionEntry.playerId].name}\n                  avatarId={players[suggestionEntry.playerId].avatarId}\n                  index={index}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <button\n              key={`${suggestionEntry.suggestion}-${index}`}\n              className=\"u-word-compare-suggestions-step__suggestion-button\"\n              onClick={() => onSetValidation(index, suggestionEntry)}\n              disabled={isLoading}\n            >\n              <SuggestionCard\n                suggestion={suggestionEntry.suggestion}\n                invalid={myRecommendation?.[index]?.invalid}\n                avatarId={players[suggestionEntry.playerId].avatarId}\n                playerName={players[suggestionEntry.playerId].name}\n                index={index}\n              />\n            </button>\n          );\n        })}\n      </Space>\n\n      {isUserTheController && (\n        <Space className=\"u-word-compare-suggestions-step__submit\">\n          <Button\n            icon={<CloudUploadOutlined />}\n            type=\"primary\"\n            onClick={() =>\n              onValidateSuggestions({\n                validSuggestions: suggestionsValues.filter((suggestion) => !suggestion.invalid),\n              })\n            }\n            disabled={isLoading}\n          >\n            <Translate pt=\"Confirmar dicas válidas\" en=\"Confirm valid clues\" />\n          </Button>\n        </Space>\n      )}\n\n      <AdminOnlyButton\n        onClick={() =>\n          onValidateSuggestions({\n            validSuggestions: suggestionsValues.filter((suggestion) => !suggestion.invalid),\n          })\n        }\n        label={translate('Confirmar dicas válidas como Admin', 'Confirm valid clues as Admin')}\n      />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitValidationsAPIRequest, useOnValidateSuggestionAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n  ViewOr,\n  WaitingRoom,\n} from 'components';\nimport { StepCompareSuggestions } from './StepCompareSuggestions';\nimport { ComparisonRules } from './RulesBlobs';\nimport { GuesserWaitingRoom } from './GuesserWaitingRoom';\n\nfunction PhaseCompare({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [, isUserTheGuesser] = useWhichPlayerIsThe('guesserId', state, players);\n  const [controller, isUserTheController] = useWhichPlayerIsThe('controllerId', state, players);\n\n  const onValidateSuggestions = useOnSubmitValidationsAPIRequest(setStep);\n\n  const onUpdateSuggestions = useOnValidateSuggestionAPIRequest();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.UE_SO_ISSO.COMPARE}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"verify-list\"\n          title={translate('Comparação de dicas!', 'Clue Check!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <ComparisonRules />\n          {isUserTheGuesser && (\n            <Instruction contained>\n              <Translate\n                pt=\"Já que você é o adivinhador, relaxe e aguarde... novamente\"\n                en=\"Since you're the guesser, just relax and wait... again\"\n              />\n            </Instruction>\n          )}\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <ViewOr orCondition={isUserTheGuesser}>\n          <GuesserWaitingRoom\n            players={players}\n            instructionSuffix={{\n              pt: 'validam dicas',\n              en: 'validate the clues',\n            }}\n          />\n\n          <StepCompareSuggestions\n            controller={controller}\n            isUserTheController={isUserTheController}\n            secretWord={state.secretWord}\n            suggestions={state.suggestions}\n            players={players}\n            onValidateSuggestions={onValidateSuggestions}\n            onUpdateSuggestions={onUpdateSuggestions}\n          />\n        </ViewOr>\n\n        {/* Step 2 */}\n        <WaitingRoom\n          players={players}\n          title={translate('Enviando a confirmação de dicas', 'Sending confirmation')}\n          instruction=\"...\"\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCompare;\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input, Space } from 'antd';\nimport { CloudUploadOutlined, MinusOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage, useLoading } from 'hooks';\n// Components\nimport { Translate } from 'components';\n\ntype GuessProps = {\n  onSubmitOutcome: GenericFunction;\n  onSendGuess: GenericFunction;\n};\n\nexport function Guess({ onSubmitOutcome, onSendGuess }: GuessProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [guess, setGuess] = useState('');\n\n  const onPressEnter = () => {\n    if (guess && guess.length > 0) {\n      onSendGuess({ guess });\n    }\n  };\n\n  return (\n    <Space className=\"u-word-guess-phase__suggestions\">\n      <Input\n        placeholder={translate('Digite aqui seu chute', 'Type your guess here')}\n        onChange={(e) => setGuess(e.target.value)}\n        onPressEnter={onPressEnter}\n        size=\"large\"\n      />\n      <Button\n        icon={<CloudUploadOutlined />}\n        type=\"primary\"\n        onClick={() => onSendGuess({ guess })}\n        disabled={guess.length < 3 || isLoading}\n        size=\"large\"\n      >\n        <Translate pt=\"Enviar\" en=\"Submit\" />\n      </Button>\n      <span>\n        <Translate pt=\"OU\" en=\"OR\" />\n      </span>\n      <Button\n        icon={<MinusOutlined />}\n        type=\"default\"\n        onClick={() => onSubmitOutcome({ outcome: 'PASS' })}\n        disabled={isLoading}\n      >\n        <Translate pt=\"Passar a vez...\" en=\"Skip turn\" />\n      </Button>\n    </Space>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Components\nimport { AvatarName, Instruction, Step, Title, Translate, ViewIf } from 'components';\nimport { UeSoIssoCard as Card } from './UeSoIssoCard';\nimport { Guess } from './Guess';\nimport { SuggestionEasel } from './SuggestionEasel';\n\ntype StepGuessingProps = {\n  guesser: GamePlayer;\n  isUserTheGuesser: boolean;\n  secretWord: UeSoIssoCard;\n  onSendGuess: GenericFunction;\n  onSubmitOutcome: GenericFunction;\n  validSuggestions: UseSoIssoSuggestion[];\n};\n\nexport function StepGuessing({\n  guesser,\n  isUserTheGuesser,\n  secretWord,\n  onSendGuess,\n  onSubmitOutcome,\n  validSuggestions,\n}: StepGuessingProps) {\n  return (\n    <Step>\n      <ViewIf isVisible={isUserTheGuesser}>\n        <Title>\n          <Translate pt=\"Hora de brilhar\" en=\"Time to shine\" />, <AvatarName player={guesser} />!\n        </Title>\n        <Instruction contained>\n          <Translate\n            pt=\"Você tem uma única change de adivinhar a palavra secreta!\"\n            en=\"You have a single chance to guess the secret word!\"\n          />\n        </Instruction>\n\n        <Card word={<QuestionCircleOutlined />} />\n\n        <Instruction contained>\n          <Translate pt=\"Escreva seu chute no campo abaixo\" en=\"Write your guess below\" />\n        </Instruction>\n        <Guess onSubmitOutcome={onSubmitOutcome} onSendGuess={onSendGuess} />\n\n        <Space className=\"u-word-guess-phase__suggestions\">\n          {validSuggestions.map((suggestionEntry, index) => {\n            const id = `${suggestionEntry.suggestion}-${index}`;\n            return <SuggestionEasel key={id} id={id} value={suggestionEntry.suggestion} />;\n          })}\n        </Space>\n      </ViewIf>\n\n      <ViewIf isVisible={!isUserTheGuesser}>\n        <Title>\n          <Translate\n            pt={\n              <>\n                Hora de <AvatarName player={guesser} /> brilhar!\n              </>\n            }\n            en={\n              <>\n                Time for <AvatarName player={guesser} /> to shine!\n              </>\n            }\n          />\n        </Title>\n\n        <Instruction contained>\n          {guesser.name}{' '}\n          <Translate\n            pt=\"tem uma única chance de adivinhar a palavra secreta!\"\n            en=\"has a single chance to guess the secret word!\"\n          />\n        </Instruction>\n\n        <Card word={secretWord.text} />\n\n        <Instruction contained>\n          {guesser.name} <Translate pt=\"está pensando...\" en=\"is thinking...\" />\n        </Instruction>\n\n        <Space className=\"u-word-guess-phase__suggestions\">\n          {validSuggestions.map((suggestionEntry, index) => {\n            const id = `${suggestionEntry.suggestion}-${index}`;\n            return <SuggestionEasel key={id} id={id} value={suggestionEntry.suggestion} />;\n          })}\n        </Space>\n      </ViewIf>\n    </Step>\n  );\n}\n","import { useEffect } from 'react';\nimport clsx from 'clsx';\n// Ant Design Resources\nimport { Button, message, Space } from 'antd';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  messageContent,\n  Step,\n  Title,\n  TitleHighlight,\n  Translate,\n  ViewIf,\n} from 'components';\nimport { UeSoIssoCard as Card } from './UeSoIssoCard';\nimport { SuggestionEasel } from './SuggestionEasel';\n\ntype StepGuessVerificationProps = {\n  guess: string;\n  guesser: GamePlayer;\n  isAdmin: boolean;\n  isLoading: boolean;\n  isUserTheGuesser: boolean;\n  isUserTheController: boolean;\n  controller: GamePlayer;\n  secretWord: UeSoIssoCard;\n  onSubmitOutcome: GenericFunction;\n  validSuggestions: UseSoIssoSuggestion[];\n};\n\nexport function StepGuessVerification({\n  guess,\n  guesser,\n  isAdmin,\n  isLoading,\n  isUserTheGuesser,\n  isUserTheController,\n  controller,\n  secretWord,\n  onSubmitOutcome,\n  validSuggestions,\n}: StepGuessVerificationProps) {\n  const { translate } = useLanguage();\n\n  useEffect(() => {\n    if (isUserTheController && !isLoading) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate('Selecione se o adivinhador acertou ou não', 'Select if the guesser got it right or not'),\n          controller.id,\n          3\n        )\n      );\n    }\n  }, [isUserTheController, controller.id, translate, isLoading]);\n\n  return (\n    <Step>\n      <Title>\n        <AvatarName player={guesser} addressUser /> <Translate pt=\"disse\" en=\"said\" />{' '}\n        <TitleHighlight>{guess}</TitleHighlight>\n      </Title>\n\n      <Card word={secretWord.text} />\n\n      <ViewIf isVisible={isUserTheGuesser}>\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                <AvatarName player={controller} /> está encarregado(a) de apertar os botões se você acertou ou\n                não. <br />\n                São 3 pontos se você acertar, -1 se errar, mas você pode passar e não tentar, covarde!..{' '}\n                <br />\n                As dicas foram:\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={controller} /> is in charge of confirming if you got it right or not.\n                <br />\n                It's 3 points if you get it right but -1 if you get it wrong. <br />\n                The clues were:\n              </>\n            }\n          />\n        </Instruction>\n      </ViewIf>\n\n      <ViewIf isVisible={!isUserTheGuesser}>\n        <Instruction contained>\n          <Translate\n            pt={\n              <>\n                <AvatarName player={controller} addressUser /> está encarregado(a) de apertar os botões se{' '}\n                <AvatarName player={guesser} />\n                acertou ou não. <br />\n                São 3 pontos se você acertar, -1 se errar, mas você pode passar e não tentar, covarde!..{' '}\n                <br />\n                As dicas são:\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={controller} addressUser /> is in charge to confirm if{' '}\n                <AvatarName player={guesser} /> got it correct or not. <br />\n                It's 3 points if they got it right but -1 if they got it wrong. <br />\n                The clues were:\n              </>\n            }\n          />\n        </Instruction>\n      </ViewIf>\n      <Space className=\"u-word-guess-phase__suggestions\">\n        {validSuggestions.map((suggestionEntry, index) => {\n          const id = `${suggestionEntry.suggestion}-${index}`;\n          return <SuggestionEasel key={id} id={id} value={suggestionEntry.suggestion} />;\n        })}\n      </Space>\n\n      {(isUserTheController || isAdmin) && (\n        <Space className={clsx('u-word-guess-phase__guess-submit', isAdmin && 'admin-container')}>\n          <Button\n            icon={<CheckOutlined />}\n            type=\"primary\"\n            style={{ backgroundColor: 'green' }}\n            onClick={() => onSubmitOutcome({ outcome: 'CORRECT' })}\n            disabled={isLoading}\n          >\n            <Translate pt=\"Acertou\" en=\"Correct\" />\n          </Button>\n          <Button\n            icon={<CloseOutlined />}\n            type=\"primary\"\n            danger\n            onClick={() => onSubmitOutcome({ outcome: 'WRONG' })}\n            disabled={isLoading}\n          >\n            <Translate pt=\"Errou\" en=\"Wrong\" />\n          </Button>\n        </Space>\n      )}\n    </Step>\n  );\n}\n","import { useEffect } from 'react';\n// Hooks\nimport { useGlobalState, useLoading, useWhichPlayerIsThe, useLanguage, useStep } from 'hooks';\nimport { useOnSendGuessAPIRequest, useOnSubmitOutcomeAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\nimport { StepGuessing } from './StepGuessing';\nimport { StepGuessVerification } from './StepGuessVerification';\nimport { GuessingRules } from './RulesBlobs';\n\nfunction PhaseGuess({ state, players, info }: PhaseProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [guesser, isUserTheGuesser] = useWhichPlayerIsThe('guesserId', state, players);\n  const [controller, isUserTheController] = useWhichPlayerIsThe('controllerId', state, players);\n\n  const onSubmitOutcome = useOnSubmitOutcomeAPIRequest(setStep);\n\n  const onSendGuess = useOnSendGuessAPIRequest();\n\n  // If guess is present in the state, move to the next step\n  useEffect(() => {\n    if (state?.guess) {\n      setStep(2);\n    }\n  }, [state, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.UE_SO_ISSO.GUESS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"guess\"\n          title={translate('Adivinhação', 'Guessing')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <GuessingRules guesserName={guesser.name} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGuessing\n          guesser={guesser}\n          isUserTheGuesser={isUserTheGuesser}\n          onSubmitOutcome={onSubmitOutcome}\n          onSendGuess={onSendGuess}\n          validSuggestions={state.validSuggestions}\n          secretWord={state.secretWord}\n        />\n\n        {/* Step 2 */}\n        <StepGuessVerification\n          guesser={guesser}\n          guess={state.guess}\n          isUserTheGuesser={isUserTheGuesser}\n          onSubmitOutcome={onSubmitOutcome}\n          validSuggestions={state.validSuggestions}\n          secretWord={state.secretWord}\n          controller={controller}\n          isUserTheController={isUserTheController}\n          isAdmin={isAdmin}\n          isLoading={isLoading}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseGuess;\n","// Components\nimport { GameOverWrapper } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"flag\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseSuggest from './PhaseSuggest';\nimport PhaseCompare from './PhaseCompare';\nimport PhaseGuess from './PhaseGuess';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionUeSoIsso({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.UE_SO_ISSO.WORD_SELECTION:\n        return PhaseWordSelection;\n      case PHASES.UE_SO_ISSO.SUGGEST:\n        return PhaseSuggest;\n      case PHASES.UE_SO_ISSO.COMPARE:\n        return PhaseCompare;\n      case PHASES.UE_SO_ISSO.GUESS:\n        return PhaseGuess;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.UE_SO_ISSO}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionUeSoIsso;\n","// This icon file is generated automatically.\nvar CloudUploadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.3 459a8 8 0 00-12.6 0l-112 141.7a7.98 7.98 0 006.3 12.9h73.9V856c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V613.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 459z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M811.4 366.7C765.6 245.9 648.9 160 512.2 160S258.8 245.8 213 366.6C127.3 389.1 64 467.2 64 560c0 110.5 89.5 200 199.9 200H304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8h-40.1c-33.7 0-65.4-13.4-89-37.7-23.5-24.2-36-56.8-34.9-90.6.9-26.4 9.9-51.2 26.2-72.1 16.7-21.3 40.1-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0152.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10C846.1 454.5 884 503.8 884 560c0 33.1-12.9 64.3-36.3 87.7a123.07 123.07 0 01-87.6 36.3H720c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h40.1C870.5 760 960 670.5 960 560c0-92.7-63.1-170.7-148.6-193.3z\" } }] }, \"name\": \"cloud-upload\", \"theme\": \"outlined\" };\nexport default CloudUploadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloudUploadOutlinedSvg from \"@ant-design/icons-svg/es/asn/CloudUploadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CloudUploadOutlined = function CloudUploadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CloudUploadOutlinedSvg\n  }));\n};\n\nCloudUploadOutlined.displayName = 'CloudUploadOutlined';\nexport default /*#__PURE__*/React.forwardRef(CloudUploadOutlined);","// This icon file is generated automatically.\nvar MinusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M872 474H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"minus\", \"theme\": \"outlined\" };\nexport default MinusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MinusOutlined = function MinusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: MinusOutlinedSvg\n  }));\n};\n\nMinusOutlined.displayName = 'MinusOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusOutlined);","// This icon file is generated automatically.\nvar WarningOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\" } }] }, \"name\": \"warning\", \"theme\": \"outlined\" };\nexport default WarningOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport WarningOutlinedSvg from \"@ant-design/icons-svg/es/asn/WarningOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar WarningOutlined = function WarningOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: WarningOutlinedSvg\n  }));\n};\n\nWarningOutlined.displayName = 'WarningOutlined';\nexport default /*#__PURE__*/React.forwardRef(WarningOutlined);"],"names":["StepWordSelection","guesser","onSendSelectedWords","words","useState","selectedWords","setSelectedWords","translate","useLanguage","selectedWordsArray","Object","keys","noSelection","length","fullWidth","white","pt","player","en","contained","className","map","word","onClick","wordId","id","s","newState","text","Boolean","CheckCircleFilled","label","icon","CloudUploadOutlined","type","votes","disabled","onExpire","randomSelection","duration","showTimer","GameProgressBar","groupScore","round","totalProgress","Math","current","total","percent","success","strokeColor","status","GuesserWaitingRoom","players","instructionSuffix","language","instructionPrefix","title","instruction","RoundAnnouncementText","addressUser","state","info","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheGuesser","useStep","step","goToNextStep","setStep","request","useAPICall","apiFunction","UE_SO_ISSO_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitVotesAPIRequest","phase","allowedPhase","PHASES","conditions","onPressButton","time","circleColor","onClose","currentRound","orCondition","SuggestionEasel","onChangeInput","onPressEnter","value","xmlns","viewBox","overflow","width","fill","d","x","y","height","placeholder","onChange","bordered","autoComplete","opacity","WritingRules","ComparisonRules","ComparisonDetailedRules","ComparisonPhaseRules","controller","ExclamationCircleOutlined","GuessingRules","guesserName","UeSoIssoCard","header","color","size","WarningOutlined","StepSuggestion","onSendSuggestions","secretWord","suggestionsNumber","suggestions","setSuggestions","e","target","indexStr","split","index","Number","toUpperCase","trim","suggestionsValues","values","Array","entry","useOnSubmitSuggestionsAPIRequest","SuggestionCard","avatarId","playerName","invalid","suggestion","getColorFromIndex","clsx","LETTERS","CloseOutlined","StepCompareSuggestions","isUserTheController","onValidateSuggestions","onUpdateSuggestions","isLoading","useLoading","deepCopy","myRecommendation","setMyRecommendation","useGlobalState","isAdmin","wasMessageShown","setWasMessageShown","useEffect","message","messageContent","content","showLabel","suggestionEntry","notAllowed","newRecommendation","onSetValidation","playerId","name","validSuggestions","filter","useOnSubmitValidationsAPIRequest","useOnValidateSuggestionAPIRequest","Guess","onSubmitOutcome","onSendGuess","guess","setGuess","MinusOutlined","outcome","StepGuessing","isVisible","QuestionCircleOutlined","StepGuessVerification","CheckOutlined","style","backgroundColor","danger","useOnSubmitOutcomeAPIRequest","useOnSendGuessAPIRequest","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseSuggest","PhaseCompare","PhaseGuess","PhaseGameOver","PageError","props","ref","React","AntdIcon","_objectSpread","CloudUploadOutlinedSvg","displayName","MinusOutlinedSvg","WarningOutlinedSvg"],"sourceRoot":""}