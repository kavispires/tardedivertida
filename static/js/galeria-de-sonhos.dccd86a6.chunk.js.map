{"version":3,"file":"static/js/galeria-de-sonhos.dccd86a6.chunk.js","mappings":"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","sources":["components/icons/RankIcon.tsx","components/points/StarPoints.tsx","components/icons/RulesIcon.tsx","components/pop-up/messageContent.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/galeria-de-sonhos/components/RulesBlobs.tsx","games/galeria-de-sonhos/StepWordSelection.tsx","games/galeria-de-sonhos/PhaseWordSelection.tsx","games/galeria-de-sonhos/utils/api-requests.ts","games/galeria-de-sonhos/utils/mock.ts","games/galeria-de-sonhos/components/SelectTable.tsx","games/galeria-de-sonhos/StepDreamsSelection.tsx","hooks/useBooleanDictionary.ts","games/galeria-de-sonhos/PhaseDreamsSelections.tsx","games/galeria-de-sonhos/components/PlayTable.tsx","games/galeria-de-sonhos/components/PlayersDreamsCount.tsx","games/galeria-de-sonhos/StepPlayDream.tsx","games/galeria-de-sonhos/components/ListPlayers.tsx","games/galeria-de-sonhos/components/MatchCount.tsx","games/galeria-de-sonhos/StepAnnounceDream.tsx","games/galeria-de-sonhos/utils/constants.ts","games/galeria-de-sonhos/PhaseCardPlay.tsx","games/galeria-de-sonhos/PhaseResolution.tsx","games/galeria-de-sonhos/components/BestMatches.tsx","games/galeria-de-sonhos/components/GameOverTable.tsx","games/galeria-de-sonhos/PhaseGameOver.tsx","games/galeria-de-sonhos/SessionGaleriaDeSonhos.tsx","hooks/useWhichPlayerIsThe.ts"],"sourcesContent":["export function RankIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fb5f7a\"\n        d=\"M305.709 123.258L256 87.857l-49.709 35.401a24.745 24.745 0 00-10.391 20.157v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.746 24.746 0 00-10.392-20.157z\"\n      ></path>\n      <path\n        fill=\"#f74455\"\n        d=\"M316.1 143.42v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67L256 87.86l49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"256\" cy=\"53.83\" r=\"46.33\" fill=\"#fb5f7a\"></circle>\n      <path\n        fill=\"#f74455\"\n        d=\"M302.33 53.83c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83S259.13 16.26 240.94 10c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#99e6fc\"\n        d=\"M395.942 258.439l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M406.333 278.601v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"346.233\" cy=\"189.011\" r=\"46.33\" fill=\"#99e6fc\"></circle>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M392.563 189.011c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#99e6fc\"\n        d=\"M215.477 258.439l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707v-54.673a24.752 24.752 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M225.867 278.601v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"165.767\" cy=\"189.011\" r=\"46.33\" fill=\"#99e6fc\"></circle>\n      <path\n        fill=\"#62dbfb\"\n        d=\"M212.097 189.011c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M486.175 409.962l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M496.566 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"436.466\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M482.796 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M305.709 409.962L256 374.561l-49.709 35.401A24.746 24.746 0 00195.9 430.12v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.747 24.747 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M316.1 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"256\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M302.33 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path\n        fill=\"#ffe177\"\n        d=\"M125.244 409.962l-49.709-35.401-49.709 35.401a24.746 24.746 0 00-10.391 20.158v54.673c0 10.884 8.823 19.707 19.707 19.707h80.787c10.884 0 19.707-8.823 19.707-19.707V430.12a24.75 24.75 0 00-10.392-20.158z\"\n      ></path>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M135.634 430.124v54.67c0 10.88-8.82 19.71-19.71 19.71h-30.13c10.89 0 19.71-8.83 19.71-19.71v-54.67c0-8.01-3.87-15.52-10.39-20.16l-34.64-24.67 15.06-10.73 49.71 35.4a24.738 24.738 0 0110.39 20.16z\"\n      ></path>\n      <circle cx=\"75.534\" cy=\"340.535\" r=\"46.33\" fill=\"#ffe177\"></circle>\n      <path\n        fill=\"#ffd15b\"\n        d=\"M121.864 340.534c0 25.59-20.74 46.33-46.33 46.33-5.27 0-10.34-.88-15.06-2.5 18.19-6.26 31.26-23.52 31.26-43.83s-13.07-37.57-31.26-43.83c4.72-1.62 9.79-2.5 15.06-2.5 25.59 0 46.33 20.74 46.33 46.33z\"\n      ></path>\n      <path d=\"M490.525 403.853l-25.175-17.929c14.982-9.568 24.946-26.332 24.946-45.389 0-29.682-24.148-53.83-53.83-53.83a53.5 53.5 0 00-22.632 5.006v-13.115a32.308 32.308 0 00-13.541-26.267l-25.177-17.928c14.983-9.568 24.948-26.332 24.948-45.39 0-29.682-24.148-53.83-53.831-53.83a53.497 53.497 0 00-22.801 5.083c-.909-9.214-5.756-17.692-13.372-23.115L284.884 99.22c14.983-9.568 24.946-26.332 24.946-45.389C309.83 24.148 285.682 0 256 0s-53.83 24.148-53.83 53.831c0 19.059 9.965 35.824 24.95 45.392l-25.18 17.926c-7.616 5.424-12.463 13.902-13.372 23.115a53.49 53.49 0 00-22.801-5.083c-5.992 0-11.881.979-17.501 2.911a7.499 7.499 0 104.875 14.185 38.767 38.767 0 0112.626-2.097c21.411 0 38.83 17.419 38.83 38.83s-17.419 38.831-38.83 38.831-38.831-17.419-38.831-38.831c0-6.247 1.436-12.208 4.268-17.717a7.5 7.5 0 10-13.342-6.856c-3.877 7.544-5.926 16.041-5.926 24.574 0 19.059 9.965 35.824 24.95 45.392l-25.18 17.926a32.306 32.306 0 00-13.541 26.267v13.115a53.485 53.485 0 00-22.632-5.006c-29.682 0-53.83 24.148-53.83 53.83 0 19.057 9.963 35.821 24.946 45.389l-25.175 17.929a32.304 32.304 0 00-13.54 26.267v54.673C7.934 499.795 20.139 512 35.141 512h80.787c15.002 0 27.207-12.205 27.207-27.208v-11.664c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v11.664c0 6.731-5.476 12.208-12.207 12.208H35.141c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.276 17.276 0 017.242-14.048l32.632-23.239c6.901 1.642 16.289 2.274 25.454 0l32.631 23.24a17.276 17.276 0 017.242 14.048v7.251c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-7.251a32.303 32.303 0 00-13.541-26.267l-25.175-17.929c9.444-6.032 16.886-14.922 21.1-25.447h80.468c4.215 10.526 11.656 19.416 21.101 25.447l-25.176 17.929a32.303 32.303 0 00-13.54 26.267v54.673c0 15.002 12.205 27.208 27.207 27.208h80.787c15.002 0 27.207-12.205 27.207-27.208V430.12a32.303 32.303 0 00-13.541-26.267l-25.175-17.929c14.982-9.568 24.946-26.332 24.946-45.389 0-15.033-6.201-28.639-16.171-38.414v-23.524a17.28 17.28 0 017.241-14.048l32.641-23.238c6.899 1.641 16.281 2.271 25.442-.001l32.635 23.238a17.282 17.282 0 017.242 14.049v23.498c-9.986 9.778-16.198 23.394-16.198 38.44 0 1.667.087 3.313.236 4.942h-44.226c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h47.836c4.215 10.526 11.656 19.416 21.1 25.447l-25.175 17.929a32.303 32.303 0 00-13.541 26.267v54.673c0 15.002 12.205 27.208 27.207 27.208h80.787c15.002 0 27.207-12.205 27.207-27.208V430.12c0-10.41-5.062-20.23-13.541-26.267zM217.17 53.831C217.17 32.419 234.589 15 256 15s38.83 17.419 38.83 38.831-17.419 38.83-38.83 38.83-38.83-17.419-38.83-38.83zm-13.771 96.74v-7.156a17.274 17.274 0 017.241-14.047l32.641-23.238c6.9 1.641 16.282 2.271 25.445-.002l32.632 23.24a17.275 17.275 0 017.242 14.048v7.156c-9.986 9.778-16.198 23.394-16.198 38.44a53.53 53.53 0 004.389 21.27c-1.4.029-80.329.028-81.583 0a53.525 53.525 0 004.389-21.269c.001-15.048-6.212-28.665-16.198-38.442zM36.704 340.535c0-21.411 17.419-38.83 38.83-38.83s38.83 17.419 38.83 38.83-17.419 38.831-38.83 38.831-38.83-17.42-38.83-38.831zm92.424 4.942c1.766-14.97-5.012-33.199-15.962-43.382v-23.498a17.28 17.28 0 017.241-14.048l32.641-23.238c6.899 1.641 16.282 2.272 25.445-.002l32.632 23.239a17.282 17.282 0 017.242 14.049v23.471c-10.717 10.473-17.63 26.704-15.99 43.409zm172.203 70.594a17.276 17.276 0 017.242 14.048v54.673c0 6.731-5.476 12.208-12.207 12.208h-80.787c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.278 17.278 0 017.241-14.048l32.633-23.239c6.9 1.642 16.288 2.274 25.453 0zm-6.528-75.536c0 21.411-17.419 38.831-38.83 38.831-21.31-.228-38.682-17.17-38.831-38.831 0-21.411 17.42-38.83 38.831-38.83s38.83 17.419 38.83 38.83zm-2.63-88.205a32.306 32.306 0 00-13.541 26.267v13.127a53.485 53.485 0 00-22.659-5.019 53.484 53.484 0 00-22.604 4.994v-13.102a32.308 32.308 0 00-13.541-26.267l-25.175-17.929a54.259 54.259 0 0012.134-10.586 27.154 27.154 0 008.82 1.481h80.787c3.033 0 6.002-.516 8.82-1.482a54.225 54.225 0 0012.139 10.589zm15.229-63.319c0-21.411 17.419-38.83 38.83-38.83s38.831 17.419 38.831 38.83-17.42 38.831-38.831 38.831-38.83-17.42-38.83-38.831zm129.064 112.694c21.411 0 38.83 17.419 38.83 38.83s-17.419 38.831-38.83 38.831-38.83-17.419-38.83-38.831 17.419-38.83 38.83-38.83zm52.6 183.087c0 6.731-5.476 12.208-12.207 12.208h-80.787c-6.731 0-12.207-5.476-12.207-12.208V430.12a17.276 17.276 0 017.242-14.048l32.632-23.239c6.901 1.642 16.288 2.274 25.453 0l32.631 23.24a17.276 17.276 0 017.242 14.048v54.671z\"></path>\n    </svg>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { StarFilled } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\n\ntype StarPointsProps = {\n  keyPrefix: string;\n  quantity?: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  hideText?: boolean;\n};\n\nexport const StarPoints = ({ keyPrefix, quantity, className, hideText }: StarPointsProps) => {\n  if (!quantity) {\n    return <span />;\n  }\n\n  const isNegative = quantity < 0;\n  const num = Math.abs(quantity);\n\n  const StarsArray = Array.from({ length: num }, (_, i) => <StarFilled key={`${keyPrefix}-${i}`} />);\n\n  return (\n    <span className={clsx('star-points', isNegative && 'star-points--negative', className)}>\n      {isNegative ? '-' : '+'} <span className=\"star-points__stars\">{StarsArray}</span>\n      {!hideText && (\n        <>\n          <Translate pt=\"ponto\" en=\"point\" />\n          {num > 1 ? 's' : ''}\n        </>\n      )}\n    </span>\n  );\n};\n","export function RulesIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ccad76\"\n        d=\"M489.5 100.5c8.284 0 15 6.716 15 15v301c0 22.091-17.909 40-40 40H276c-11.046 0-20-8.954-20-20v-336z\"\n      ></path>\n      <path\n        fill=\"#b5884d\"\n        d=\"M504.5 115.5v301c0 22.09-17.91 40-40 40h-30c22.09 0 40-17.91 40-40v-301c0-8.28-6.72-15-15-15h30c8.28 0 15 6.72 15 15z\"\n      ></path>\n      <path\n        fill=\"#ccad76\"\n        d=\"M22.5 100.5c-8.284 0-15 6.716-15 15v301c0 22.091 17.909 40 40 40H236c11.046 0 20-8.954 20-20v-336z\"\n      ></path>\n      <path\n        fill=\"#f2f2f2\"\n        d=\"M241 426.572H52.5c-8.284 0-15-6.716-15-15V85.5c0-8.284 6.716-15 15-15H241c8.284 0 15 6.716 15 15v326.072c0 8.284-6.716 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#fff\"\n        d=\"M459.5 426.57l-188.5.002c-8.284 0-15-6.716-15-15V85.5c0-8.284 6.716-15 15-15l188.5-.002c8.284 0 15 6.716 15 15V411.57c0 8.284-6.716 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#e8e8e8\"\n        d=\"M429.5 426.568h30c8.28 0 15-6.71 15-15V85.498c0-8.28-6.72-15-15-15h-30c8.28 0 15 6.72 15 15v326.07c0 8.29-6.72 15-15 15z\"\n      ></path>\n      <path\n        fill=\"#f7aa74\"\n        d=\"M129.212 142.267l-15.925-13.898a5 5 0 00-6.575 0l-15.925 13.898c-3.234 2.823-8.288.526-8.288-3.767v-78a5 5 0 015-5h45a5 5 0 015 5v78c.001 4.293-5.052 6.59-8.287 3.767z\"\n      ></path>\n      <path\n        fill=\"#f49595\"\n        d=\"M395.638 208.929l11.314-11.314c5.858-5.858 5.858-15.355 0-21.213-5.858-5.858-15.355-5.858-21.213 0l-11.314 11.314c-3.905 3.905-10.237 3.905-14.142 0l-12.021-12.021c-5.858-5.858-15.355-5.858-21.213 0-5.858 5.858-5.858 15.355 0 21.213l12.021 12.021c3.905 3.905 3.905 10.237 0 14.142l-12.021 12.021c-5.858 5.858-5.858 15.355 0 21.213 5.858 5.858 15.355 5.858 21.213 0l12.021-12.021c3.905-3.905 10.237-3.905 14.142 0l11.314 11.314c5.858 5.858 15.355 5.858 21.213 0 5.858-5.858 5.858-15.355 0-21.213l-11.314-11.314c-3.905-3.905-3.905-10.237 0-14.142z\"\n      ></path>\n      <path\n        fill=\"#90d399\"\n        d=\"M112.352 205.04l16.263 16.263a5 5 0 007.071 0l45.962-45.962c5.858-5.858 15.355-5.858 21.213 0 5.858 5.858 5.858 15.355 0 21.213l-60.104 60.104c-5.858 5.858-15.355 5.858-21.213 0l-30.406-30.406c-5.858-5.858-5.858-15.355 0-21.213 5.858-5.857 15.356-5.857 21.214.001z\"\n      ></path>\n      <path d=\"M504.5 369a7.5 7.5 0 007.5-7.5v-246c0-12.407-10.093-22.5-22.5-22.5H482v-7.5c0-12.407-10.093-22.5-22.5-22.5H271c-5.758 0-11.016 2.177-15 5.747-3.984-3.57-9.242-5.747-15-5.747h-68.5a7.5 7.5 0 000 15H241c4.136 0 7.5 3.365 7.5 7.5V105H245a7.5 7.5 0 000 15h3.5v39H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v40H244a7.5 7.5 0 000 15h4.5v17.572c0 4.135-3.364 7.5-7.5 7.5H52.5c-4.136 0-7.5-3.365-7.5-7.5V85.5c0-4.135 3.364-7.5 7.5-7.5H75v60.5c0 4.965 2.808 9.325 7.328 11.38a12.578 12.578 0 005.213 1.143c2.944 0 5.834-1.059 8.178-3.104L110 135.455l14.281 12.463c3.741 3.265 8.872 4.016 13.392 1.962 4.52-2.055 7.328-6.415 7.328-11.38v-78c0-6.893-5.607-12.5-12.5-12.5h-45C80.607 48 75 53.607 75 60.5V63H52.5C40.093 63 30 73.093 30 85.5V93h-7.5C10.093 93 0 103.093 0 115.5v301C0 442.691 21.309 464 47.5 464H236c7.875 0 14.982-3.332 20-8.655 5.018 5.322 12.125 8.655 20 8.655h188.5c26.191 0 47.5-21.309 47.5-47.5v-20a7.5 7.5 0 00-15 0v20c0 17.92-14.58 32.5-32.5 32.5H276c-6.893 0-12.5-5.607-12.5-12.5v-3.718a22.38 22.38 0 007.5 1.29h188.5c12.407 0 22.5-10.093 22.5-22.5V108h7.5c4.136 0 7.5 3.364 7.5 7.5v246a7.5 7.5 0 007.5 7.5zM90 63h40v70l-11.781-10.282c-2.343-2.044-5.281-3.067-8.219-3.067s-5.876 1.022-8.219 3.067L90 133zm146 386H47.5C29.58 449 15 434.42 15 416.5v-301c0-4.136 3.364-7.5 7.5-7.5H30v303.572c0 12.407 10.093 22.5 22.5 22.5H241c2.629 0 5.153-.458 7.5-1.29v3.718c0 6.893-5.607 12.5-12.5 12.5zm231-37.428c0 4.135-3.364 7.5-7.5 7.5H271c-4.136 0-7.5-3.365-7.5-7.5V394h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-40h3.5a7.5 7.5 0 000-15h-3.5v-39h4.5a7.5 7.5 0 000-15h-4.5V85.5c0-4.135 3.364-7.5 7.5-7.5h188.5c4.136 0 7.5 3.365 7.5 7.5z\"></path>\n      <path d=\"M321.745 229.789c-8.773 8.773-8.773 23.047 0 31.82 4.386 4.386 10.148 6.58 15.91 6.58s11.524-2.193 15.91-6.58l12.021-12.021c.637-.637 1.381-.732 1.768-.732s1.131.095 1.768.732l11.313 11.314c4.25 4.25 9.9 6.59 15.91 6.59s11.661-2.34 15.91-6.59c4.25-4.25 6.59-9.9 6.59-15.91s-2.34-11.66-6.59-15.91l-11.314-11.313c-.637-.637-.732-1.381-.732-1.768s.095-1.131.732-1.768l11.314-11.313c4.25-4.25 6.59-9.9 6.59-15.91s-2.34-11.661-6.59-15.91c-4.25-4.25-9.9-6.59-15.91-6.59s-11.66 2.34-15.91 6.59l-11.313 11.314c-.637.637-1.381.732-1.768.732s-1.131-.095-1.768-.732l-12.021-12.021c-8.772-8.773-23.047-8.772-31.82 0-8.773 8.773-8.773 23.047 0 31.82l12.021 12.021c.637.637.732 1.381.732 1.768s-.095 1.131-.732 1.768zm22.628-26.164l-12.021-12.021c-2.924-2.924-2.924-7.683 0-10.607a7.478 7.478 0 015.304-2.193c1.92 0 3.841.731 5.303 2.193l12.021 12.021c6.823 6.823 17.926 6.823 24.749 0l11.313-11.314c2.926-2.924 7.683-2.923 10.607 0 2.924 2.924 2.924 7.683 0 10.607l-11.314 11.313c-6.823 6.823-6.823 17.926 0 24.749l11.314 11.313c2.924 2.924 2.924 7.683 0 10.607s-7.683 2.924-10.607 0l-11.313-11.314c-6.823-6.823-17.926-6.823-24.749 0L342.959 251c-2.925 2.925-7.682 2.924-10.607 0-2.924-2.924-2.924-7.683 0-10.607l12.021-12.021c6.823-6.821 6.823-17.923 0-24.747zm-136.208-33.587c-8.772-8.772-23.047-8.772-31.819 0l-44.194 44.194-14.496-14.496c-4.25-4.25-9.9-6.59-15.91-6.59s-11.66 2.34-15.91 6.59c-8.773 8.772-8.773 23.047 0 31.819l30.405 30.406c4.386 4.387 10.148 6.58 15.91 6.58s11.524-2.193 15.91-6.58l60.104-60.104c8.772-8.772 8.772-23.046 0-31.819zm-10.607 21.213l-60.104 60.104a7.45 7.45 0 01-5.304 2.197 7.448 7.448 0 01-5.303-2.197L96.442 220.95c-1.417-1.417-2.197-3.3-2.197-5.303s.78-3.887 2.197-5.303 3.3-2.197 5.303-2.197 3.887.78 5.303 2.197l16.264 16.263c2.361 2.361 5.5 3.661 8.839 3.661s6.478-1.3 8.839-3.661l45.962-45.962c2.924-2.924 7.683-2.924 10.606 0a7.45 7.45 0 012.197 5.304c0 2.002-.78 3.886-2.197 5.302zM204.5 301.5a7.5 7.5 0 00-7.5-7.5H97a7.5 7.5 0 000 15h100a7.5 7.5 0 007.5-7.5zM117 324a7.5 7.5 0 000 15h60a7.5 7.5 0 000-15zm300-30H317a7.5 7.5 0 000 15h100a7.5 7.5 0 000-15zm-20 30h-60a7.5 7.5 0 000 15h60a7.5 7.5 0 000-15z\"></path>\n    </svg>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { message } from 'antd';\n// Components\nimport { RulesIcon } from 'components/icons/RulesIcon';\nimport { VideoGameControllerIcon } from 'components/icons/VideoGameControllerIcon';\nimport { Translate } from 'components/language';\n\n/**\n * Pops up a modal with a confirmation button but also closing timeout\n * @param title\n * @param description\n * @param id\n * @param duration\n * @param type\n * @returns\n */\nexport const messageContent = (\n  title: ReactNode,\n  description: ReactNode,\n  id: string,\n  duration = 30,\n  type: 'control' | 'rules' = 'control'\n) => {\n  const key = `${id} - ${title}`;\n\n  return {\n    content: (\n      <div>\n        <h2>{title}</h2>\n        <div>{description}</div>\n        <p>\n          <small>\n            <Translate\n              pt=\"Popup fecha automaticamente ou clique para fechar\"\n              en=\"Auto-close or click to close\"\n            />\n          </small>\n        </p>\n      </div>\n    ),\n    top: window.innerWidth / 2 - 100,\n    duration,\n    key,\n    icon:\n      type === 'control' ? (\n        <VideoGameControllerIcon style={{ width: '64px' }} />\n      ) : (\n        <RulesIcon style={{ width: '64px' }} />\n      ),\n    onClick: () => message.destroy(key),\n  };\n};\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  isVisible?: boolean;\n};\n\nexport function ViewIf({ isVisible = false, children }: ViewIfProps) {\n  return isVisible ? <>{children}</> : <></>;\n}\n","type ViewOrProps = {\n  children: [any, any];\n  orCondition?: boolean;\n};\n\nexport function ViewOr({ orCondition = false, children }: ViewOrProps) {\n  return orCondition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\n\ntype WordSelectionRulesProps = {\n  scout: GamePlayer;\n};\n\nexport function WordSelectionRules({ scout }: WordSelectionRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Cada rodada tem seu tema... uma palavra.\n            <br />\n            Para essa rodada, <AvatarName player={scout} addressUser size=\"small\" /> escolherá o tema.\n          </>\n        }\n        en={\n          <>\n            Every round has a theme... a word.\n            <br />\n            For this round,\n            <AvatarName player={scout} addressUser size=\"small\" /> will choose the theme.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GeneralRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Somos caçadores de sonhos!\n            <br />\n            Dentro do tema escolhido, podemos visitar os sonhos de até 10 das 15 pessoas (cartas-imagens)\n            disponíveis.\n            <br />\n            O objetivo é encontrar uns aos outros em cada sonho, então escolha apenas sonhos que você acredita\n            que outros jogadores também irão escolher.\n            <br />\n            Parece fácil, mas se você escolher um sonho que ninguém mais escolheu... vixi...\n          </>\n        }\n        en={\n          <>\n            We are dream scouts!\n            <br />\n            Given the chosen theme, we can visit dreams of 10 of the 15 people (image cards) available.\n            <br />\n            The goal of the game is to match the same visited dreams of other players, therefore choose dreams\n            that you think other players will also choose.\n            <br />\n            It seems easy, but if you choose a dream that nobody else has chosen... well...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionRules({ contained = false }) {\n  return (\n    <Instruction contained={contained}>\n      <Translate\n        pt={\n          <>\n            Selecione sonhos (cartas) que você acha que se relacionam com a palavra-tema da rodada.\n            <br />\n            Você deve selecionar pelo menos 1 e no máximo 10.\n          </>\n        }\n        en={\n          <>\n            Now select cards that you think match the round's card.\n            <br />\n            You must select at least 1 card and a maximum of 10.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionExtendedRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Na próxima fase, de um a um, cada jogador vai escolher um de seus sonhos visitados.\n            <br />\n            Se pelo menos um jogador visitou o mesmo sonho, eles ganham pontos. Se ninguém escolheu, o jogador\n            está fora da rodada!\n            <br />\n            Dai passa-se a vez para o próximo jogador!\n            <br />\n            Sonhos só podem ser escolhidos uma vez por rodada...\n          </>\n        }\n        en={\n          <>\n            On the next phase, one by one, each player will select one of their visited dreams.\n            <br />\n            If at least one other player visited the same dream, they get points! If nobody visited the same\n            dream, you are out of the round!\n            <br />\n            Each dream can be chosen once per round only...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function CardPlayRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            De um em um, cada jogador vai escolher um de seus sonhos visitados se você ainda tem algum\n            disponível.\n            <br />\n            Selecione o sonho que você mais acha que tem chance de outro jogador ter também visitado.\n            <br />\n            Você ganha 3 pontos se apenas mais 1 jogador visitou o mesmo sonho.\n            <br />\n            Você ganha 2 pontos se mais de 1 jogador visitou o mesmo sonho.\n            <br />\n            Você está eliminado da rodada se ninguém mais visitou o sonho escolhido.\n          </>\n        }\n        en={\n          <>\n            One by one, each player chooses one of their visited dreams, if you have any still available.\n            <br />\n            Select the dream you think you have the most chances of matching another player.\n            <br />\n            You get 3 points if only 1 player visited the same dream.\n            <br />\n            You get 2 points if many players have visited the same dream.\n            <br />\n            You are eliminated for this round if nobody else has visited the chosen dream.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Card } from 'components/cards';\n\ntype StepWordSelectionProps = {\n  onSubmitWord: GenericFunction;\n  words: GWord[];\n};\n\nexport function StepWordSelection({ onSubmitWord, words }: StepWordSelectionProps) {\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione o tema da rodada\" en=\"Select the theme for the round\" />\n      </Title>\n\n      <Space className=\"space-container\" align=\"center\">\n        {words.map((word, index) => {\n          return (\n            <TransparentButton key={word.id} onClick={() => onSubmitWord({ wordId: word.id })}>\n              <Card header={LETTERS[index]} randomColor>\n                {word.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { useOnSubmitWordAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { GeneralRules, WordSelectionRules } from './components/RulesBlobs';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { RoundAnnouncement } from 'components/round';\nimport { Instruction } from 'components/text';\nimport { Translate } from 'components/language';\nimport { ViewOr } from 'components/views';\nimport { WaitingRoom } from 'components/players';\nimport { AvatarName } from 'components/avatars';\nimport { StepWordSelection } from './StepWordSelection';\nimport { SleepIcon } from 'components/icons/SleepIcon';\n\nfunction PhaseWordSelection({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n  const [scout, isUserTheScout] = useWhichPlayerIsThe('scoutId', state, players);\n\n  const onSubmitWord = useOnSubmitWordAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.WORD_SELECTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos caçadores de sonhos tentando encontrar uns aos outros...\"\n              en=\"We're dream scouts trying to find each other...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          icon={<SleepIcon />}\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WordSelectionRules scout={scout} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewOr orCondition={isUserTheScout}>\n          <StepWordSelection onSubmitWord={onSubmitWord} words={state.words} />\n\n          <WaitingRoom\n            players={players}\n            title={<Translate pt=\"Aguarde...\" en=\"Please wait...\" />}\n            instruction={\n              <Translate\n                pt={\n                  <>\n                    <AvatarName player={scout} /> está escolhendo o tema.\n                  </>\n                }\n                en={\n                  <>\n                    <AvatarName player={scout} /> is choosing the theme.\n                  </>\n                }\n              />\n            }\n          >\n            <GeneralRules />\n          </WaitingRoom>\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { GALERIA_DE_SONHOS_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitWordAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-word',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Palavra enviada com sucesso', 'Word submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua palavra',\n      'Oops, the application failed to send your word'\n    ),\n  });\n\n  return (payload: SubmitWordPayload) => {\n    request({\n      action: 'SUBMIT_WORD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitCardsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-cards',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Cartas enviadas com sucesso', 'Cards submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas cartas',\n      'Oops, the application failed to send your cards'\n    ),\n  });\n\n  return (payload: SubmitCardsPayload) => {\n    request({\n      action: 'SUBMIT_CARDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'play-card',\n    // onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to send your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n","import { shuffle } from 'utils/helpers';\n\nexport const mockDreamSelection = (cards: GImageCard[]): string[] => {\n  const selectionOrder = [2, 11, 6, 8, 9, 3, 13];\n  const numberOfCards = shuffle([1, 2, 3, 3, 3, 4, 4, 5, 6])[0];\n  const selections = selectionOrder.slice(0, numberOfCards);\n  return selections.map((cardIndex) => cards[cardIndex].id);\n};\n","import clsx from 'clsx';\n// Design Resources\nimport { Button, Image } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { ImageBlurButton, ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\n\ntype SelectTableProps = {\n  table: GImageCard[];\n  onSelectCard: GenericFunction;\n  selectedCards: BooleanDictionary;\n};\n\nexport function SelectTable({ table, onSelectCard, selectedCards }: SelectTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  return (\n    <Image.PreviewGroup>\n      <ul className=\"g-table\">\n        {table.map((card) => {\n          const isSelected = selectedCards[card.id];\n\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <div className=\"center\">\n                <ImageBlurButton cardId={card.id} />\n              </div>\n              <ImageCard\n                imageId={card.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n                className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n              />\n\n              <Button\n                shape=\"round\"\n                size=\"small\"\n                ghost={!isSelected}\n                className=\"g-table-item-button\"\n                onClick={() => onSelectCard(card.id)}\n              >\n                <UpCircleOutlined />\n                {isSelected ? (\n                  <Translate pt=\"Desmarcar\" en=\"Deselect\" />\n                ) : (\n                  <Translate pt=\"Selecionar\" en=\"Select\" />\n                )}\n                <UpCircleOutlined />\n              </Button>\n            </li>\n          );\n        })}\n      </ul>\n    </Image.PreviewGroup>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { mockDreamSelection } from './utils/mock';\n// Components\nimport { Translate } from 'components/language';\nimport { PopoverRule } from 'components/rules';\nimport { Step } from 'components/steps';\nimport { TextHighlight, Title } from 'components/text';\nimport { DreamSelectionExtendedRules, DreamSelectionRules } from './components/RulesBlobs';\nimport { SelectTable } from './components/SelectTable';\n\nconst validateSelectedCards = (v: BooleanDictionary) => {\n  return Object.keys(v).length < 10;\n};\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onSubmitCards: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepDreamsSelection({ table, word, onSubmitCards, players }: StepDreamsSelectionProps) {\n  const [selectedCards, onSelectCard] = useBooleanDictionary({}, validateSelectedCards);\n\n  const selectedCount = Object.keys(selectedCards).length;\n\n  useMock(() => {\n    onSubmitCards({ cardsIds: mockDreamSelection(table) });\n  }, []);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"medium\">\n        <Translate pt=\"Visite sonhos relacionados a \" en=\"Visit dreams related to \" />\n        <TextHighlight>{word.text}</TextHighlight>\n      </Title>\n      <DreamSelectionRules contained />\n\n      <PopoverRule content={<DreamSelectionExtendedRules />} />\n\n      <Space className=\"space-container\" align=\"center\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={selectedCount < 1 || selectedCount > 10}\n          onClick={() => onSubmitCards({ cardsIds: Object.keys(selectedCards) })}\n        >\n          <Translate pt={`Visitar ${selectedCount} sonhos`} en={`Visit ${selectedCount} dreams`} />\n        </Button>\n      </Space>\n      <SelectTable table={table} onSelectCard={onSelectCard} selectedCards={selectedCards} />\n    </Step>\n  );\n}\n","import { useState } from 'react';\n\nexport function useBooleanDictionary(\n  initialState: BooleanDictionary,\n  validation?: BooleanFunction\n): [BooleanDictionary, GenericFunction] {\n  const [dict, setDict] = useState(initialState);\n\n  const updateDict = (key: string) => {\n    const isValid = !validation || validation(dict);\n    if (!dict[key] && isValid) {\n      setDict((s) => ({\n        ...s,\n        [key]: true,\n      }));\n    } else {\n      const dictCopy = { ...dict };\n      delete dictCopy[key];\n      setDict(dictCopy);\n    }\n  };\n\n  return [dict, updateDict];\n}\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitCardsAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { ImageCardPreloadHand } from 'components/cards';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { DreamSelectionRules } from './components/RulesBlobs';\nimport { StepDreamsSelection } from './StepDreamsSelection';\nimport { DreamIcon } from 'components/icons/DreamIcon';\n\nfunction PhaseDreamsSelections({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitCards = useOnSubmitCardsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DreamIcon />}\n          title={translate('Visite sonhos!', 'Visit dreams!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <DreamSelectionRules />\n          <ImageCardPreloadHand hand={state.table.map((entry: GImageCard) => entry.id)} />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepDreamsSelection\n          table={state.table}\n          word={state.word}\n          onSubmitCards={onSubmitCards}\n          players={players}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamsSelections;\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Image } from 'antd';\nimport { UpCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageBlurButton, ImageCard, ImageCardBack } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { StarIcon } from 'components/icons/StarIcon';\n\ntype PlayTableProps = {\n  table: GImageCard[];\n  onPlayCard: GenericFunction;\n  userCards: PlainObject;\n  isPlayAvailable: boolean;\n};\n\nexport function PlayTable({ table, onPlayCard, userCards, isPlayAvailable }: PlayTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  const { isLoading } = useLoading();\n\n  return (\n    <Image.PreviewGroup>\n      <ul className=\"g-table\">\n        {table.map((card) => {\n          const isSelected = Boolean((userCards ?? {})[card.id]);\n          const userCardEntry = userCards[card.id] ?? {};\n          if (card.used) {\n            return (\n              <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n                <div className=\"center\">\n                  <ImageBlurButton cardId={card.id} />\n                </div>\n                <ImageCardBack\n                  cardWidth={cardWidth - 6}\n                  className={clsx(\n                    'g-table-image',\n                    isSelected && 'g-table-image--selected',\n                    getAnimationClass('zoomIn')\n                  )}\n                  previewImageId={card.id}\n                />\n                {userCardEntry.used && (\n                  <div className=\"g-star-points\">\n                    {userCardEntry.score === 3 && <StarIcon className=\"g-star g-star--super-spark\" />}\n                    {userCardEntry.score > 1 && <StarIcon className=\"g-star g-star--spark\" />}\n                    {userCardEntry.score > 0 && <StarIcon className=\"g-star g-star--spark\" />}\n                  </div>\n                )}\n              </li>\n            );\n          }\n\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <div className=\"center\">\n                <ImageBlurButton cardId={card.id} />\n              </div>\n              <ImageCard\n                imageId={card.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n                className={clsx(\n                  'g-table-image',\n                  isSelected && 'g-table-image--selected',\n                  getAnimationClass('zoomIn')\n                )}\n              />\n              {isPlayAvailable && userCards[card.id] && (\n                <Button\n                  shape=\"round\"\n                  size=\"small\"\n                  ghost\n                  className=\"g-table-item-button\"\n                  onClick={() => onPlayCard(card.id)}\n                  disabled={isLoading}\n                >\n                  <UpCircleOutlined />\n                  <Translate pt=\"Selecionar\" en=\"Select\" />\n                  <UpCircleOutlined />\n                </Button>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </Image.PreviewGroup>\n  );\n}\n","import { Tooltip } from 'antd';\nimport clsx from 'clsx';\n// Helpers\n\n// Colors\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { getAnimationClass, getAvatarColorById } from 'utils/helpers';\n\ntype PlayersDreamsCountProps = {\n  players: Players;\n  playerInNightmareId?: PlayerId;\n};\n\nexport function PlayersDreamsCount({ players, playerInNightmareId }: PlayersDreamsCountProps) {\n  return (\n    <div className=\"g-players-dreams-count\">\n      <header className=\"g-players-dreams-count__title\">\n        <Translate en=\"Player Dream Count\" pt=\"Sonhos por Jogador\" />\n      </header>\n      <ul className=\"g-players-dreams-count__players\">\n        {Object.values(players).map((player) => {\n          const cards: GCardInHand[] = Object.values(player.cards);\n          const cardsLeft = cards.filter((card) => !card.used);\n          const isPlayerInNightmare = player.id === playerInNightmareId;\n          const showTooltip = isPlayerInNightmare && !player.fallen;\n\n          return (\n            <span\n              key={`player-dream-count-${player.id}`}\n              className={clsx(\n                'g-players-dreams-count__player',\n                isPlayerInNightmare &&\n                  !player.fallen &&\n                  `g-players-dreams-count__player--nightmare ${getAnimationClass(\n                    'pulse',\n                    undefined,\n                    'faster',\n                    false,\n                    3\n                  )}`\n              )}\n              style={{ backgroundColor: getAvatarColorById(player.avatarId) }}\n            >\n              <Tooltip\n                title={\n                  showTooltip ? (\n                    <div className={getAnimationClass('tada', undefined, 'fast', true)}>\n                      {player.name} <Translate pt=\"tá em apuros!\" en=\"is in danger\" />\n                    </div>\n                  ) : undefined\n                }\n                color=\"black\"\n                placement=\"bottom\"\n                visible={showTooltip}\n              >\n                <Avatar shape=\"square\" id={player.avatarId} alt={player.name} />\n\n                <div\n                  className={clsx(\n                    'g-players-dreams-count__count',\n                    player.fallen && 'g-players-dreams-count__count--fallen'\n                  )}\n                >\n                  {cardsLeft.length}\n                </div>\n              </Tooltip>\n            </span>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Ant Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { CardPlayRules } from './components/RulesBlobs';\nimport { PlayTable } from './components/PlayTable';\nimport { messageContent } from 'components/pop-up';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { Card } from 'components/cards';\nimport { AvatarName } from 'components/avatars';\nimport { PopoverRule } from 'components/rules';\nimport { TurnOrder } from 'components/players';\nimport { PlayersDreamsCount } from './components/PlayersDreamsCount';\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onPlayCard: GenericFunction;\n  user: GamePlayer;\n  activePlayer: GamePlayer;\n  isActivePlayer: boolean;\n  isLoading?: boolean;\n  players: GamePlayers;\n  gameOrder: GameOrder;\n\n  setLastTurnCount: GenericFunction;\n  playerInNightmareId?: PlayerId;\n};\n\nexport function StepPlayDream({\n  table,\n  word,\n  onPlayCard,\n  user,\n  activePlayer,\n  isActivePlayer,\n  isLoading,\n  players,\n  gameOrder,\n  setLastTurnCount,\n  playerInNightmareId,\n}: StepDreamsSelectionProps) {\n  useTemporarilyHidePlayersBar();\n  const { translate } = useLanguage();\n  const [showedMessage, setShowedMessage] = useState(false);\n\n  useEffect(() => {\n    setLastTurnCount(activePlayer.id);\n  });\n\n  useEffect(() => {\n    if (isActivePlayer && !isLoading && !showedMessage) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate(\n            'Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!',\n            'Select the dream card you think will match at least one player'\n          ),\n          activePlayer.id,\n          3\n        )\n      );\n      setShowedMessage(true);\n    }\n  }, [isActivePlayer, activePlayer.id, translate, isLoading, showedMessage]);\n\n  return (\n    <Step fullWidth>\n      <Title size=\"small\">\n        <Translate pt=\"Bingo dos Sonhos\" en=\"Dream Bingo\" />\n      </Title>\n      <Card header={translate('Tema', 'Theme')} randomColor>\n        {word.text}\n      </Card>\n\n      <PlayersDreamsCount players={players} playerInNightmareId={playerInNightmareId} />\n\n      {Boolean(user.fallen) && (\n        <Instruction contained>\n          <Translate\n            pt=\"Você estava em apuros e não conseguiu dar match em uma de suas cartas, então perdeu um ponto por carta que você deu match.\"\n            en=\"You were in danger and didn't get a match in one of your cards. You lost 1 point per scored card.\"\n          />\n        </Instruction>\n      )}\n\n      <Instruction contained>\n        {isActivePlayer ? (\n          <Translate\n            pt=\"Selecione a carta-sonho que você acha que vai dar match com pelo menos um jogador!\"\n            en=\"Select the dream card you think will match at least one player\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('flash')} /> está selecionando\n                um sonho.\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={activePlayer} className={getAnimationClass('flash')} /> is selecting a\n                dream.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <PopoverRule content={<CardPlayRules />} />\n\n      <PlayTable\n        table={table}\n        onPlayCard={(cardId: string) => onPlayCard({ cardId })}\n        userCards={user.cards}\n        isPlayAvailable={isActivePlayer}\n      />\n\n      <TurnOrder players={players} order={gameOrder} activePlayerId={activePlayer.id} />\n    </Step>\n  );\n}\n","// Components\nimport { AvatarName } from 'components/avatars';\n\ntype ListPlayersProps = {\n  listPlayers: GamePlayer[];\n  className: string;\n};\n\nexport function ListPlayers({ listPlayers, className }: ListPlayersProps) {\n  return (\n    <ul className={className}>\n      {listPlayers.map((player) => (\n        <li key={`${className}-${player.id}`}>\n          <AvatarName player={player} addressUser />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// Ant Design\nimport { Avatar } from 'antd';\n// Utils\nimport { pluralize } from 'utils/helpers';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\n\ntype MatchCountProps = {\n  matchCount: number;\n  lastActivePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n};\n\nexport function MatchCount({ matchCount, lastActivePlayer, playerInNightmare }: MatchCountProps) {\n  const isSpark = matchCount > 0;\n  const isSuperSpark = matchCount === 1;\n\n  const isPlayerInNightmare = playerInNightmare?.id === lastActivePlayer.id;\n\n  return (\n    <div>\n      {isSpark ? (\n        <Translate\n          pt={\n            <p>\n              E encontrou <Avatar>{matchCount}</Avatar> {pluralize(matchCount, 'jogador', 'jogadores')} lá!\n              <br />\n              {isSuperSpark && 'Brilho total!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n          en={\n            <p>\n              And met <Avatar>{matchCount}</Avatar> {pluralize(matchCount, 'player', 'players')} there!\n              <br />\n              {isSuperSpark && 'Super Spark!'}\n              <StarPoints keyPrefix=\"dream-result\" quantity={isSuperSpark ? 3 : 2} />\n            </p>\n          }\n        />\n      ) : (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">Vixi...</h2>\n              Não sei o que dizer... Ninguém visitou esse sonho e{' '}\n              <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> está fora da rodada{' '}\n              <small>(as cartas restantes ainda contarão pontos para outros jogadores)</small>.{' '}\n              {isPlayerInNightmare && (\n                <>\n                  Para piorar, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> vai perder 1\n                  ponto por sonho usado até então.\n                </>\n              )}\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">Oops...</h2>I don't know what to say... no one has visited this\n              dream and <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> is/are out of the\n              round <small>(the remaining cards will still count towards scoring for other players)</small>.\n              {isPlayerInNightmare && (\n                <>\n                  To make this worse, <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> will\n                  lose a point for each scored dream.\n                </>\n              )}\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Alert, Divider, Space } from 'antd';\nimport { useMemo } from 'react';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Constants\nimport { GO_TO_CARD_PLAY_STEP } from './utils/constants';\n// Helpers\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { ImageCard } from 'components/cards';\nimport { TimedButton } from 'components/buttons';\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { ListPlayers } from './components/ListPlayers';\nimport { MatchCount } from './components/MatchCount';\nimport { TurnOrder } from 'components/players';\n\ntype MatchingPlayersReduceResult = {\n  matchingPlayers: GamePlayer[];\n  fallenMatchingPlayers: GamePlayer[];\n};\n\ntype StepAnnounceDreamProps = {\n  latest: LatestInfo;\n  lastActivePlayer: GamePlayer;\n  activePlayer: GamePlayer;\n  playerInNightmare?: GamePlayer;\n  setStep: GenericFunction;\n  players: GamePlayers;\n  gameOrder: TurnOrder;\n};\n\nexport function StepAnnounceDream({\n  latest,\n  lastActivePlayer,\n  activePlayer,\n  setStep,\n  players,\n  playerInNightmare,\n  gameOrder,\n}: StepAnnounceDreamProps) {\n  useTemporarilyHidePlayersBar();\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n\n  const { matchingPlayers, fallenMatchingPlayers } = useMemo(\n    () =>\n      (latest?.matchedPlayers ?? []).reduce(\n        (acc: MatchingPlayersReduceResult, playerId) => {\n          const player = players[playerId];\n          if (player?.fallen) {\n            if (lastActivePlayer.id !== playerId) {\n              acc.fallenMatchingPlayers.push(player);\n            }\n          } else {\n            acc.matchingPlayers.push(player);\n          }\n          return acc;\n        },\n        { matchingPlayers: [], fallenMatchingPlayers: [] }\n      ),\n    [latest?.matchedPlayers, players, lastActivePlayer.id]\n  );\n\n  const completedPlayers = Object.values(players).filter((player) => player?.skip || player?.fallen);\n\n  return (\n    <Step fullWidth>\n      <div className=\"g-dream-result\">\n        <header\n          className=\"g-dream-result__header\"\n          style={{ backgroundColor: getAvatarColorById(lastActivePlayer.avatarId) }}\n        >\n          <AvatarName player={lastActivePlayer} size=\"large\" />\n          <Translate pt=\"escolheu visitar o sonho\" en=\"chose to visit the dream\" />:\n        </header>\n        <div className=\"g-dream-result__card\">\n          <ImageCard imageId={latest.cardId} cardWidth={cardWidth} />\n        </div>\n        <div className=\"g-dream-result__match-result\">\n          <MatchCount\n            matchCount={latest.matchCount}\n            lastActivePlayer={lastActivePlayer}\n            playerInNightmare={playerInNightmare}\n          />\n        </div>\n        <div className=\"g-dream-result__matching-players\">\n          {matchingPlayers.length > 0 && (\n            <>\n              <p>\n                <Translate pt=\"Ganharam pontos:\" en=\"Scored points:\" />\n              </p>\n\n              <ListPlayers listPlayers={matchingPlayers} className=\"g-dream-result__matched-players-list\" />\n            </>\n          )}\n        </div>\n        <div className=\"g-dream-result__fallen-matching-players\">\n          {fallenMatchingPlayers.length > 0 && (\n            <>\n              <p className=\"g-dream-result__label\">\n                <Translate\n                  pt=\"Ganhariam pontos, mas já estão eliminados:\"\n                  en=\"Matched by are out of the round:\"\n                />\n              </p>\n\n              <ListPlayers\n                listPlayers={fallenMatchingPlayers}\n                className=\"g-dream-result__matched-players-list fallen\"\n              />\n            </>\n          )}\n        </div>\n        <footer className=\"g-dream-result__footer\">\n          {latest.isPhaseOver || latest.cardsLeft === 0 ? (\n            <Space align=\"center\" className=\"full-width padding\" direction=\"vertical\">\n              <p className=\"center\">\n                <Translate\n                  pt=\"Todos jogadores já usaram seus sonhos ou não deram match com ninguém. Vamos para a próxima rodada?\"\n                  en=\"All players have used their dreams or didn't match anybody. Ready for the next round?\"\n                />\n              </p>\n              {gameOrder.length === 1 && (\n                <Alert\n                  className=\"center\"\n                  type=\"error\"\n                  message={\n                    playerInNightmare?.id === gameOrder[0] ? (\n                      <Translate\n                        pt={\n                          <>\n                            <AvatarName player={playerInNightmare} /> foi ganancioso(a) não conseguiu usar\n                            todos os sonhos.\n                          </>\n                        }\n                        en={\n                          <>\n                            <AvatarName player={playerInNightmare} /> was too greedy and wasn't able to use of\n                            all their dreams.\n                          </>\n                        }\n                      />\n                    ) : (\n                      <Translate\n                        pt={\n                          <>\n                            Não há mais jogadores pra dar match com{' '}\n                            <AvatarName player={players[gameOrder[0]]} />\n                          </>\n                        }\n                        en={\n                          <>\n                            There are no players to match anymore with{' '}\n                            <AvatarName player={players[gameOrder[0]]} />\n                          </>\n                        }\n                      />\n                    )\n                  }\n                />\n              )}\n            </Space>\n          ) : (\n            <Space align=\"center\" className=\"full-width padding\" direction=\"vertical\">\n              <p className=\"center\">\n                <Translate pt=\"Próximo jogador:\" en=\"Next player:\" />\n                <AvatarName player={activePlayer} addressUser />\n              </p>\n\n              <TimedButton\n                type=\"primary\"\n                duration={12}\n                disabled\n                onExpire={() => setStep(GO_TO_CARD_PLAY_STEP)}\n              >\n                <Translate pt=\"Continuando em...\" en=\"Continuing in...\" />\n              </TimedButton>\n            </Space>\n          )}\n          {completedPlayers.length > 0 && (\n            <>\n              <Divider />\n              <div className=\"g-dream-result__completed-players\">\n                <p className=\"g-dream-result__label center\">\n                  <Translate pt=\"Jogadores fora do rodízio\" en=\"Players out of rotation\" />:\n                </p>\n                <ListPlayers\n                  listPlayers={completedPlayers}\n                  className=\"g-dream-result__matched-players-list g-dream-result__matched-players-list--centered\"\n                />\n              </div>\n            </>\n          )}\n        </footer>\n      </div>\n\n      {gameOrder.length > 1 && (\n        <TurnOrder players={players} order={gameOrder} activePlayerId={activePlayer.id} />\n      )}\n\n      {(latest.isPhaseOver || latest.cardsLeft === 0) && (\n        <AdminNextPhaseButton autoTriggerTime={15}>Ranking</AdminNextPhaseButton>\n      )}\n    </Step>\n  );\n}\n","export const GO_TO_PLAYER_WITH_NIGHTMARE_STEP = 1;\nexport const GO_TO_SEE_CARD_STEP = 3;\nexport const GO_TO_CARD_PLAY_STEP = 5;\n","import { useEffect, useState } from 'react';\n// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useUser } from 'hooks/useUser';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\nimport { useLoading } from 'hooks/useLoading';\nimport { useOnPlayCardAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport {\n  GO_TO_CARD_PLAY_STEP,\n  GO_TO_PLAYER_WITH_NIGHTMARE_STEP,\n  GO_TO_SEE_CARD_STEP,\n} from './utils/constants';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, PhaseTimerReset } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Translate } from 'components/language';\nimport { AvatarName } from 'components/avatars';\nimport { Instruction } from 'components/text';\nimport { CardPlayRules } from './components/RulesBlobs';\nimport { StepPlayDream } from './StepPlayDream';\nimport { StepAnnounceDream } from './StepAnnounceDream';\nimport { DoorSignIcon } from 'components/icons/DoorSignIcon';\nimport { NightmareIcon } from 'components/icons/NightmareIcon';\n\nfunction PhaseCardPlay({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep, setStep } = useStep();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const [activePlayer, isActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [lastActivePlayer] = useWhichPlayerIsThe('lastActivePlayerId', state, players);\n  const [playerInNightmare] = useWhichPlayerIsThe('playerInNightmareId', state, players);\n\n  const [lastTurnCount, setLastTurnCount] = useState('');\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  useEffect(() => {\n    if (lastTurnCount && state.turnCount !== lastTurnCount) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.turnCount]); // eslint-disable-line\n\n  useEffect(() => {\n    if (!state.activePlayerId) {\n      setStep(GO_TO_SEE_CARD_STEP);\n    }\n  }, [state.activePlayerId, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.CARD_PLAY}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<DoorSignIcon />}\n          title={translate('Hora do Bingo dos Sonhos!', 'Time for the Dream Bingo!')}\n          onClose={() =>\n            setStep(playerInNightmare.id ? GO_TO_PLAYER_WITH_NIGHTMARE_STEP : GO_TO_CARD_PLAY_STEP)\n          }\n          duration={state.round.current < 2 ? 20 : 5}\n          unskippable\n        >\n          <CardPlayRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 2 */}\n        <PhaseAnnouncement\n          icon={<NightmareIcon />}\n          animationType=\"tada\"\n          title={\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> está em apuros!\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInNightmare} size=\"large\" addressUser /> is in danger!\n                </>\n              }\n            />\n          }\n          onClose={() => setStep(GO_TO_CARD_PLAY_STEP)}\n          currentRound={state?.round?.current}\n          duration={state.round.current < 3 ? 10 : 5}\n          unskippable\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quando um jogador sozinho selecionou o maior número de sonhos, ele é considerado estar em um pesadelo! Se ele não conseguir achar outro jogador que marcou o mesmo sonho para cada uma das cartas selecionadas, ele perde 1 ponto por carta.\"\n              en=\"When a player alone selected the most dream cards they are considered to be in a nightmare! If they are not able to match every single dream, they will lose 1 point per card.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 3 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 4 */}\n        <StepAnnounceDream\n          latest={state.latest}\n          lastActivePlayer={lastActivePlayer}\n          setStep={setStep}\n          players={players}\n          activePlayer={activePlayer}\n          playerInNightmare={playerInNightmare}\n          gameOrder={state.gameOrder}\n        />\n\n        {/* Step 5 */}\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 6 */}\n        <StepPlayDream\n          table={state.table}\n          word={state.word}\n          onPlayCard={onPlayCard}\n          user={user}\n          activePlayer={activePlayer}\n          isActivePlayer={isActivePlayer}\n          players={players}\n          gameOrder={state.gameOrder}\n          isLoading={isLoading}\n          setLastTurnCount={setLastTurnCount}\n          playerInNightmareId={state.playerInNightmareId}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","// State & Hooks\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { Instruction, RoundsLeftInstruction } from 'components/text';\nimport { AdminNextPhaseButton } from 'components/admin';\nimport { RankIcon } from 'components/icons/RankIcon';\n\nfunction PhaseResolution({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.RESOLUTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<RankIcon />}\n          title={translate('Ranking', 'Ranking')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate pt=\"E quem deu mais matches foi...\" en=\"And who matched the most was...\" />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepRankingWrapper\n          players={players}\n          ranking={state.ranking}\n          gainedPointsDescriptions={[\n            <Translate pt=\"Pontos por encontrar só um jogador\" en=\"Points for matching only 1 player\" />,\n            <Translate\n              pt=\"Pontos por encontrar mais de um jogador\"\n              en=\"Points for matching with more players\"\n            />,\n            <Translate\n              pt=\"Pontos perdidos por não ter dado match e estar em um pesadelo\"\n              en=\"Points lost for not matching any player while in a nightmare\"\n            />,\n          ]}\n        >\n          <RoundsLeftInstruction round={state.round} lastRound={state.lastRound} />\n          <AdminNextPhaseButton round={state.round} lastRound={state.lastRound} />\n        </StepRankingWrapper>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar, Divider } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\n\ntype BestMatchesProps = {\n  bestMatches: GImageCardMatch[];\n};\n\nexport function BestMatches({ bestMatches }: BestMatchesProps) {\n  const cardWidth = useCardWidth(8, 8, 100, 150);\n\n  return (\n    <Step>\n      <Divider />\n      <Title size=\"x-small\" level={3}>\n        <Translate pt=\"Sonhos mais visitados\" en=\"Most visited dreams\" />\n      </Title>\n\n      <ul className=\"g-best-matches\">\n        {orderBy(bestMatches, 'matchedPlayers.length', 'desc').map((entry, index) => {\n          return (\n            <div key={`${entry.id}-${index}`} className=\"g-best-matches__entry\">\n              <div className=\"g-best-matches__label\">\n                <Avatar size=\"small\">{entry.matchedPlayers.length}</Avatar>\n                <span>{entry.text}</span>\n              </div>\n              <ImageCard\n                imageId={entry.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n              />\n            </div>\n          );\n        })}\n      </ul>\n    </Step>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Helpers\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ImageBlurButton, ImageCard } from 'components/cards';\n\ntype TableProps = {\n  table: GImageCard[];\n};\n\nexport function GameOverTable({ table }: TableProps) {\n  const cardWidth = useCardWidth(12, 8, 60, 100);\n  return (\n    <Image.PreviewGroup>\n      <ul className=\"g-table g-table--game-over\">\n        {table.map((card) => {\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <ImageBlurButton cardId={card.id} />\n              <ImageCard\n                imageId={card.id}\n                cardWidth={cardWidth - 6} // 6 is the border total size\n                className={clsx('g-table-image', getAnimationClass('zoomIn'))}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </Image.PreviewGroup>\n  );\n}\n","// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { LadderIcon } from 'components/icons/LadderIcon';\n\nimport { BestMatches } from './components/BestMatches';\nimport { GameOverTable } from './components/GameOverTable';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon={<LadderIcon />}>\n      <BestMatches bestMatches={state.bestMatches} />\n\n      <GameOverTable table={state.table} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseDreamsSelection from './PhaseDreamsSelections';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nConfigProvider.config({\n  theme: {\n    primaryColor: THEME_COLORS.PLUMP_PURPLE,\n  },\n});\n\nfunction SessionGaleriaDeSonhos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.GALERIA_DE_SONHOS.WORD_SELECTION:\n        return PhaseWordSelection;\n      case PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION:\n        return PhaseDreamsSelection;\n      case PHASES.GALERIA_DE_SONHOS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.GALERIA_DE_SONHOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.GALERIA_DE_SONHOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionGaleriaDeSonhos;\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: Players = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>({});\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n"],"names":["RankIcon","props","xmlns","viewBox","fill","d","cx","cy","r","StarPoints","keyPrefix","quantity","className","hideText","isNegative","num","Math","abs","StarsArray","Array","from","length","_","i","StarFilled","clsx","pt","en","RulesIcon","messageContent","title","description","id","duration","type","key","content","top","window","innerWidth","icon","VideoGameControllerIcon","style","width","onClick","message","View","children","ViewIf","isVisible","ViewOr","orCondition","ViewSwitch","cases","Error","console","warn","WordSelectionRules","scout","player","addressUser","size","GeneralRules","contained","DreamSelectionRules","DreamSelectionExtendedRules","CardPlayRules","StepWordSelection","onSubmitWord","words","fullWidth","align","map","word","index","wordId","header","LETTERS","randomColor","text","players","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheScout","request","useAPICall","apiFunction","GALERIA_DE_SONHOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitWordAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstructionType","round","onPressButton","buttonText","time","SleepIcon","onClose","currentRound","current","instruction","mockDreamSelection","cards","numberOfCards","shuffle","slice","cardIndex","SelectTable","table","onSelectCard","selectedCards","cardWidth","useCardWidth","card","isSelected","cardId","imageId","shape","ghost","UpCircleOutlined","validateSelectedCards","v","Object","keys","StepDreamsSelection","onSubmitCards","initialState","validation","useState","dict","setDict","isValid","s","dictCopy","useBooleanDictionary","selectedCount","useMock","cardsIds","disabled","useOnSubmitCardsAPIRequest","DreamIcon","hand","entry","PlayTable","onPlayCard","userCards","isPlayAvailable","isLoading","useLoading","Boolean","userCardEntry","used","getAnimationClass","previewImageId","score","StarIcon","PlayersDreamsCount","playerInNightmareId","values","cardsLeft","filter","isPlayerInNightmare","showTooltip","fallen","undefined","backgroundColor","getAvatarColorById","avatarId","name","color","placement","visible","alt","StepPlayDream","user","activePlayer","isActivePlayer","gameOrder","setLastTurnCount","useTemporarilyHidePlayersBar","showedMessage","setShowedMessage","useEffect","order","activePlayerId","ListPlayers","listPlayers","MatchCount","matchCount","lastActivePlayer","playerInNightmare","isSpark","isSuperSpark","pluralize","StepAnnounceDream","latest","useMemo","matchedPlayers","reduce","acc","playerId","fallenMatchingPlayers","push","matchingPlayers","completedPlayers","skip","isPhaseOver","direction","onExpire","autoTriggerTime","useUser","lastTurnCount","useOnPlayCardAPIRequest","turnCount","DoorSignIcon","unskippable","NightmareIcon","animationType","ranking","gainedPointsDescriptions","lastRound","BestMatches","bestMatches","level","orderBy","GameOverTable","announcementIcon","LadderIcon","ConfigProvider","theme","primaryColor","THEME_COLORS","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseDreamsSelection","PhaseCardPlay","PhaseResolution","PhaseGameOver","PageError","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser"],"sourceRoot":""}