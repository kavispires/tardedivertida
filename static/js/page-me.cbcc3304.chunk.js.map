{"version":3,"file":"static/js/page-me.cbcc3304.chunk.js","mappings":"6TAeO,SAASA,EAAT,GAA6C,IAA3BC,EAA0B,EAA1BA,UACvB,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eACQC,GAAcC,EAAAA,EAAAA,KAAdD,UAER,GAAwCE,EAAAA,EAAAA,UAAS,CAC/CC,SAAU,UACVC,QAAQ,WAAD,wBAAE,+FAAkBC,EAAAA,EAAAA,IAAON,EAAKO,cAAc,YAAaP,EAAKO,cAAc,aAA5E,mFAAF,kDAAC,GACRC,SAAS,EACTV,UAAW,WACTA,GACD,IANKW,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,QAa5B,OACE,iBAAKC,UAAU,UAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,SAAC,IAAD,CAAOC,IAAKC,EAAAA,EAAMC,SAAS,OAG7B,UAAC,IAAD,CACEC,KAAK,QACLhB,KAAMA,EACNiB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,MAAO,CAAEC,SAAU,KACnBC,cAAe,CAAEC,UAAU,GAC3BC,SAjBW,WACfd,GACD,EAgBKe,aAAa,MARf,WAUE,SAAC,SAAD,CACEC,OAAO,SAAC,KAAD,CAAWC,GAAG,QAAQC,GAAG,UAChCZ,KAAK,WACLa,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS9B,EAAU,sCAAiC,wBAJ1E,UAOE,SAAC,IAAD,OAGF,SAAC,SAAD,CACEyB,OAAO,SAAC,KAAD,CAAWC,GAAG,QAAQC,GAAG,aAChCZ,KAAK,WACLa,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS9B,EAAU,sCAAiC,wBAExE+B,KAAM/B,EAAU,yBAAuB,2BANzC,UAQE,SAAC,aAAD,MAGDU,IACC,SAAC,SAAD,CAAWQ,WAAY,CAAEc,OAAQ,EAAGf,KAAM,IAA1C,UACE,SAAC,IAAD,CACEgB,aACE,SAAC,KAAD,CACEP,GAAG,mCACHC,GAAG,2CAGPO,KAAK,QACLC,UAAQ,EACRxB,UAAU,4BAKhB,SAAC,SAAD,CAAWO,WAAY,CAAEc,OAAQ,EAAGf,KAAM,IAA1C,UACE,SAAC,KAAD,CAAQiB,KAAK,UAAUE,SAAS,SAASC,SAAU7B,EAAnD,UACE,SAAC,KAAD,CAAWkB,GAAG,SAASC,GAAG,oBAMrC,C,gKCjFM,SAASW,EAAT,GAA2D,IAArCC,EAAoC,EAApCA,gBAC3B,OACE,SAAC,IAAD,CACEC,MAAOD,EACPE,OAAO,SAAC,KAAD,CAAWf,GAAG,QAAQC,GAAG,UAChCe,YAAY,SAAC,KAAD,CAAWhB,GAAG,WAAWC,GAAG,WACxCgB,SAAUC,EAAAA,GACVC,cAAe,CACb1B,MAAO,CAAE2B,QAAS,SAEpBC,kBAAmB,CACjB5B,MAAO,CAAE2B,QAAS,SAEpBE,UAAU,EAXZ,UAaE,SAACpD,EAAA,EAAD,CAAQC,UAAW+C,EAAAA,MAGxB,C,+CCHD,MAhBA,YACEK,EAAAA,EAAAA,GAAS,wBACT,OAAyCC,EAAAA,EAAAA,KAAjCX,EAAR,EAAQA,gBAAiBY,EAAzB,EAAyBA,YACzB,GAAwBC,EAAAA,EAAAA,IAAe,YAA9BC,GAAT,eAQA,OANAC,EAAAA,EAAAA,YAAU,WACJH,EAAYI,UACdF,EAAYF,EAAYI,SAE3B,GAAE,CAACJ,EAAYI,SAAUF,KAGxB,SAACG,EAAA,EAAD,CAAWC,KAAMN,EAAaO,mBAAmB,SAACpB,EAAD,CAAYC,gBAAiBA,KAEjF,C","sources":["components/auth/SignIn.tsx","pages/Me/components/LoginModal.tsx","pages/Me/Me.tsx"],"sourcesContent":["import { useQuery } from 'react-query';\n// Ant Design Resources\nimport { Button, Form, Input, Alert, Image } from 'antd';\n// API\nimport { signIn } from 'services/firebase';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Image\nimport logo from 'assets/images/tarde-divertida-logo.svg';\nimport { Translate } from 'components/language';\n\ntype SignInProps = {\n  onSuccess: GenericFunction;\n};\n\nexport function SignIn({ onSuccess }: SignInProps) {\n  const [form] = Form.useForm();\n  const { translate } = useLanguage();\n\n  const { isLoading, refetch, isError } = useQuery({\n    queryKey: 'sign-in',\n    queryFn: async () => await signIn(form.getFieldValue('username'), form.getFieldValue('password')),\n    enabled: false,\n    onSuccess: () => {\n      onSuccess();\n    },\n  });\n\n  const onFinish = () => {\n    refetch();\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"sign-in__logo\">\n        <Image src={logo} preview={false} />\n      </div>\n\n      <Form\n        name=\"basic\"\n        form={form}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        style={{ maxWidth: 600 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label={<Translate pt=\"Email\" en=\"Email\" />}\n          name=\"username\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label={<Translate pt=\"Senha\" en=\"Password\" />}\n          name=\"password\"\n          rules={[\n            { required: true, message: translate('e-mail é um campo obrigatório', 'e-mail is required') },\n          ]}\n          help={translate('Mínimo 6 caracteres', 'Minimum of 6 characters')}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {isError && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Alert\n              description={\n                <Translate\n                  pt=\"Algo deu errado, tente novamente\"\n                  en=\"Something went wrong. Please try again\"\n                />\n              }\n              type=\"error\"\n              showIcon\n              className=\"sign-in__error-alert\"\n            />\n          </Form.Item>\n        )}\n\n        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n            <Translate pt=\"Enviar\" en=\"Submit\" />\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Modal } from 'antd';\n// Utils\nimport { NOOP } from 'utils/constants';\n// Components\nimport { SignIn } from 'components/auth/SignIn';\nimport { Translate } from 'components/language';\n\ntype LoginModalProps = {\n  isAuthenticated: boolean;\n};\n\nexport function LoginModal({ isAuthenticated }: LoginModalProps) {\n  return (\n    <Modal\n      open={!isAuthenticated}\n      title={<Translate pt=\"Logar\" en=\"LogIn\" />}\n      cancelText={<Translate pt=\"Cancelar\" en=\"Cancel\" />}\n      onCancel={NOOP}\n      okButtonProps={{\n        style: { display: 'none' },\n      }}\n      cancelButtonProps={{\n        style: { display: 'none' },\n      }}\n      closable={false}\n    >\n      <SignIn onSuccess={NOOP} />\n    </Modal>\n  );\n}\n","import { useTitle } from 'react-use';\n// Hooks\nimport { useCurrentUserContext } from 'hooks/useCurrentUserContext';\n// Components\nimport { LoginModal } from './components/LoginModal';\nimport { MeContent } from './MeContent';\n// Sass\nimport './Me.scss';\nimport { useEffect } from 'react';\nimport { useGlobalState } from 'hooks/useGlobalState';\n\nfunction Me() {\n  useTitle('Me - Tarde Divertida');\n  const { isAuthenticated, currentUser } = useCurrentUserContext();\n  const [, setLanguage] = useGlobalState('language');\n\n  useEffect(() => {\n    if (currentUser.language) {\n      setLanguage(currentUser.language);\n    }\n  }, [currentUser.language, setLanguage]);\n\n  return (\n    <MeContent user={currentUser} additionalContent={<LoginModal isAuthenticated={isAuthenticated} />} />\n  );\n}\n\nexport default Me;\n"],"names":["SignIn","onSuccess","Form","form","translate","useLanguage","useQuery","queryKey","queryFn","signIn","getFieldValue","enabled","isLoading","refetch","isError","className","src","logo","preview","name","labelCol","span","wrapperCol","style","maxWidth","initialValues","remember","onFinish","autoComplete","label","pt","en","rules","required","message","help","offset","description","type","showIcon","htmlType","disabled","LoginModal","isAuthenticated","open","title","cancelText","onCancel","NOOP","okButtonProps","display","cancelButtonProps","closable","useTitle","useCurrentUserContext","currentUser","useGlobalState","setLanguage","useEffect","language","MeContent","user","additionalContent"],"sourceRoot":""}