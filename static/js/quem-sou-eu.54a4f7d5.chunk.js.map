{"version":3,"file":"static/js/quem-sou-eu.54a4f7d5.chunk.js","mappings":"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","sources":["components/cards/CharacterCard.tsx","components/cards/ImageBlurButton.tsx","components/cards/ImageBlurButtonContainer.tsx","components/general/Achievements.tsx","components/metrics/CardHighlight.tsx","games/quem-sou-eu/utils/mock.ts","games/quem-sou-eu/StepSelectCharacters.tsx","games/quem-sou-eu/PhaseCharacterFiltering.tsx","games/quem-sou-eu/utils/api-requests.ts","games/quem-sou-eu/components/Table.tsx","games/quem-sou-eu/components/Highlights.tsx","games/quem-sou-eu/StepSelectGlyphs.tsx","games/quem-sou-eu/PhaseCharacterDescription.tsx","games/quem-sou-eu/components/RulesBlobs.tsx","games/quem-sou-eu/StepGuessing.tsx","games/quem-sou-eu/PhaseGuessing.tsx","games/quem-sou-eu/components/GalleryGuesses.tsx","games/quem-sou-eu/StepGallery.tsx","games/quem-sou-eu/utils/constants.ts","games/quem-sou-eu/StepRanking.tsx","games/quem-sou-eu/PhaseResults.tsx","games/quem-sou-eu/components/FinalCharacter.tsx","games/quem-sou-eu/PhaseGameOver.tsx","games/quem-sou-eu/SessionQuemSouEu.tsx","games/quem-sou-eu/components/PlayerGlyphs.tsx","games/quem-sou-eu/utils/achievements.ts","games/quem-sou-eu/utils/helpers.ts","hooks/useBooleanDictionary.ts","icons/FilterIcon.tsx","icons/PlayerIconsIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js","../node_modules/@ant-design/icons-svg/es/asn/MessageFilled.js","../node_modules/@ant-design/icons/es/icons/MessageFilled.js","../node_modules/@ant-design/icons-svg/es/asn/PictureOutlined.js","../node_modules/@ant-design/icons/es/icons/PictureOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/StepBackwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepBackwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/StepForwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepForwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/TrophyOutlined.js","../node_modules/@ant-design/icons/es/icons/TrophyOutlined.js"],"sourcesContent":["import clsx from 'clsx';\n// Ant Design resources\nimport { Image } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useTDBaseUrl } from 'hooks/useTDBaseUrl';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { DualTranslate } from 'components/language';\nimport { ImageBlurButtonContainer } from './ImageBlurButtonContainer';\n// Sass\nimport './CharacterCard.scss';\n\nexport type OverlayColor = 'blue' | 'gray' | 'green' | 'orange' | 'pink' | 'purple' | 'red' | 'yellow';\n\ntype CharacterCardProps = {\n  /**\n   * The size of the card\n   */\n  size: number;\n  /**\n   * The color of the overlay\n   */\n  overlayColor?: OverlayColor;\n  /**\n   * The character object\n   */\n  character: ContenderCard;\n  /**\n   * The class name to be appended to the container\n   */\n  className?: string;\n  /**\n   * Whether the name should be hidden or not\n   */\n  hideName?: boolean;\n};\n\nexport function CharacterCard({ size, overlayColor, character, className, hideName }: CharacterCardProps) {\n  const { dualTranslate } = useLanguage();\n  const { shouldBeBlurred } = useBlurCards();\n  const baseUrl = useTDBaseUrl('tdi');\n\n  const isBlurred = shouldBeBlurred(character.id);\n\n  const imageURL = character.id.replace(/-/g, '/');\n\n  return (\n    <ImageBlurButtonContainer cardId={character.id}>\n      <div className={clsx('character-card', className)} style={{ width: `${size}px` }}>\n        {!hideName && (\n          <span className=\"character-card__name\">\n            <DualTranslate>{character.name}</DualTranslate>\n          </span>\n        )}\n        {overlayColor && (\n          <img\n            src={`${PUBLIC_URL.IN_GAME}/w-overlay-${overlayColor}.png`}\n            className=\"character-card__overlay\"\n            alt=\"character\"\n            style={{ width: `${size}px` }}\n          />\n        )}\n        <Image\n          src={`${baseUrl}${imageURL}.jpg`}\n          width={size}\n          className={clsx('character-card__image', isBlurred && 'character-card__image--blur')}\n          fallback={`${PUBLIC_URL.IN_GAME}/w-no-image.jpg`}\n          alt={dualTranslate(character.name)}\n          preview={false}\n          title={dualTranslate(character.name)}\n        />\n      </div>\n    </ImageBlurButtonContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\n// Utils\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n// Sass\nimport './ImageBlurButton.scss';\n\ntype ImageBlurButtonProps = {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n};\n\nexport function ImageBlurButton({ cardId }: ImageBlurButtonProps) {\n  const { blurCard, isBlurEnabled, shouldBeBlurred } = useBlurCards();\n\n  return isBlurEnabled ? (\n    <Tooltip\n      placement=\"top\"\n      title={\n        <Translate\n          pt=\"Aperte o botão para embaçar a foto caso você tenha alguma fobia\"\n          en=\"Use this button to blur the image in case of any phobia\"\n        />\n      }\n    >\n      <Button ghost onClick={() => blurCard(cardId)} size=\"small\" className=\"image-blur-button\">\n        {shouldBeBlurred(cardId) ? (\n          <>\n            <EyeOutlined /> <Translate pt=\"Descredar\" en=\"Unblur\" />\n          </>\n        ) : (\n          <>\n            <EyeInvisibleOutlined /> <Translate pt=\"Credo\" en=\"Blur\" />\n          </>\n        )}\n      </Button>\n    </Tooltip>\n  ) : (\n    <></>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n// Components\nimport { ImageBlurButton } from './ImageBlurButton';\n// Sass\nimport './ImageBlurButtonContainer';\n\ninterface ImageBlurButtonContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The card to be blurred\n   */\n  cardId: string;\n  /**\n   * The content the component is wrapping\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n}\n\nexport function ImageBlurButtonContainer({\n  cardId,\n  children,\n  className = '',\n  ...rest\n}: ImageBlurButtonContainerProps) {\n  return (\n    <div className={clsx('image-blur-button-container', className)} {...rest}>\n      {children}\n      <ImageBlurButton cardId={cardId} />\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Button, Popover } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { Medal } from './Medal';\n\ntype AchievementsProps = {\n  players: GamePlayers;\n  achievements: Achievement[];\n  reference: AchievementReference;\n};\n\nconst unknownText = { pt: 'Desconhecido', en: 'Unknown' };\n\nexport function Achievements({ players, achievements, reference }: AchievementsProps) {\n  return (\n    <div className={clsx('achievements', getAnimationClass('fadeIn'))}>\n      <Title size=\"small\" level={3}>\n        <Translate pt=\"Medalhas\" en=\"Achievements\" />\n      </Title>\n      <ul className=\"achievements-list\">\n        {achievements.map((achievement, index) => {\n          const { icon = 'star', ...achievementObj } = reference[achievement.type] ?? {};\n          const player = players[achievement.playerId];\n          return (\n            <li\n              key={`achievement-${achievement.type}`}\n              className={clsx(\n                'achievements-entry',\n                getAnimationClass('flipInY', {\n                  delay: index < achievements.length / 2 ? index : achievements.length - 1 - index,\n                })\n              )}\n            >\n              <div className=\"achievement__medal\">\n                <Medal id={icon} />\n              </div>\n              <h4 className=\"achievement__title\">\n                <DualTranslate>{achievementObj.title ?? unknownText}</DualTranslate>\n              </h4>\n              <div className=\"achievement__avatar\">\n                <Avatar id={player.avatarId} />\n              </div>\n              <div className=\"achievement__name\">{player.name}</div>\n              {Boolean(achievementObj.description) && (\n                <div className=\"achievement__description\">\n                  <Popover\n                    content={\n                      <>\n                        <DualTranslate>{achievementObj.description ?? unknownText}</DualTranslate> (\n                        {achievement.value})\n                      </>\n                    }\n                  >\n                    <Button icon={<QuestionCircleOutlined />} shape=\"circle\" type=\"text\" size=\"small\" />\n                  </Popover>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { ImageCardsIcon } from 'icons/ImageCardsIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function CardHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<ImageCardsIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { sample, sampleSize } from 'lodash';\n\nexport const mockSelectCharacters = (characters: Character[]) => {\n  return sampleSize(characters, 6).map((c) => c.id);\n};\n\nexport const mockGlyphs = (glyphs: string[]) => {\n  const positiveQuantity = sample([1, 1, 2, 2, 2, 3]) ?? 2;\n  const negativeQuantity = sample([0, 0, 0, 1, 1, 1, 2, 2, 3]) ?? 0;\n  const selected = glyphs.slice(0, positiveQuantity + negativeQuantity);\n  const dict: BooleanDictionary = {};\n  selected.slice(0, positiveQuantity).forEach((key) => (dict[key] = true));\n  selected.slice(positiveQuantity).forEach((key) => (dict[key] = false));\n\n  return dict;\n};\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\n// Utils\nimport { mockSelectCharacters } from './utils/mock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\nimport { CharacterCard } from 'components/cards/CharacterCard';\n\ntype StepSelectCharactersProps = {\n  user: GamePlayer;\n  onSelectCharacters: GenericFunction;\n} & AnnouncementProps;\n\nexport function StepSelectCharacters({ user, announcement, onSelectCharacters }: StepSelectCharactersProps) {\n  const { isLoading } = useLoading();\n  const cardWidth = useCardWidth(12, {\n    gap: 16,\n    minWidth: 100,\n    maxWidth: 200,\n  });\n  const {\n    dict: selection,\n    updateDict: update,\n    length: count,\n    keys: selectedCharacters,\n  } = useBooleanDictionary({});\n\n  const availableCharacters = user.availableCharacters ?? [];\n\n  useMock(() => {\n    onSelectCharacters({ characters: mockSelectCharacters(availableCharacters) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={\n            <>\n              Selecione <CardHighlight>6</CardHighlight> cartas\n            </>\n          }\n          en={\n            <>\n              Select <CardHighlight>6</CardHighlight> cards\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Não queremos que você receba uma carta que não conheça, então das cartas abaixo, selecione 6\n              para entrar no jogo.\n            </>\n          }\n          en={\n            <>\n              We don't want a card you don't know to be assigned to you, so from the cards below, select 6 to\n              be in the game.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\" wrap>\n        {availableCharacters.map((character: ContenderCard) => (\n          <TransparentButton\n            key={character.id}\n            disabled={user.ready || isLoading}\n            onClick={() => update(character.id)}\n            active={selection[character.id]}\n          >\n            <CharacterCard size={cardWidth} character={character} />\n          </TransparentButton>\n        ))}\n      </Space>\n\n      <Space className=\"space-container\">\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          onClick={() => onSelectCharacters({ characters: selectedCharacters })}\n          disabled={isLoading || user.ready || count !== 6}\n        >\n          <Translate pt={<>Enviar {count} cartas</>} en={<>Submit {count} cards</>} />\n        </Button>\n        <Button\n          size=\"large\"\n          onClick={() => onSelectCharacters({ characters: mockSelectCharacters(availableCharacters) })}\n          disabled={isLoading || user.ready}\n        >\n          <Translate pt={<>Escolha pra mim</>} en={<>Choose for me</>} />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitCharactersAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { FilterIcon } from 'icons/FilterIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSelectCharacters } from './StepSelectCharacters';\nimport { CardHighlight } from 'components/metrics/CardHighlight';\n\nexport function PhaseCharacterFiltering({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSelectCharacters = useOnSubmitCharactersAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<FilterIcon />}\n      title={<Translate pt=\"Quem você conhece?\" en=\"Who do you know?\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt={\n            <>\n              Selecione <CardHighlight>6 cartas</CardHighlight> com personagens/pessoas que você conhece\n            </>\n          }\n          en={\n            <>\n              Select <CardHighlight>6 cards</CardHighlight> with characters/people you know\n            </>\n          }\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.CHARACTER_FILTERING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepSelectCharacters\n          user={user}\n          onSelectCharacters={onSelectCharacters}\n          announcement={announcement}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { QUEM_SOU_EU_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitCharactersAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: QUEM_SOU_EU_API.submitAction,\n    actionName: 'submit-characters',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action'\n    ),\n  });\n\n  return (payload: SubmitCharactersPayload) => {\n    request({\n      action: 'SUBMIT_CHARACTERS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGlyphsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: QUEM_SOU_EU_API.submitAction,\n    actionName: 'submit-glyphs',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action'\n    ),\n  });\n\n  return (payload: SubmitGlyphsPayload) => {\n    request({\n      action: 'SUBMIT_GLYPHS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: QUEM_SOU_EU_API.submitAction,\n    actionName: 'submit-guesses',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Ação submetida com sucesso', 'Action submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua ação',\n      'Oops, the application found an error while trying to submit your action'\n    ),\n  });\n\n  return (payload: SubmitGuessesPayload) => {\n    request({\n      action: 'SUBMIT_GUESSES',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { CharacterCard } from 'components/cards/CharacterCard';\n\ntype TableProps = {\n  characters: Characters;\n  tableOrder: CardId[];\n  playerCharacterId: CardId;\n  showAll?: boolean;\n};\n\nexport function Table({ characters, playerCharacterId, tableOrder, showAll = true }: TableProps) {\n  const width = useCardWidth(8, {\n    gap: 16,\n    minWidth: 150,\n    maxWidth: 200,\n  });\n\n  const topKeys = tableOrder.slice(0, Math.floor(tableOrder.length / 2));\n  const bottomKeys = tableOrder.slice(Math.floor(tableOrder.length / 2));\n\n  if (!showAll) {\n    return (\n      <Space className=\"space-container q-table\">\n        <CharacterCard\n          character={characters[playerCharacterId]}\n          size={width}\n          className=\"q-character-player\"\n        />\n      </Space>\n    );\n  }\n\n  return (\n    <Space className=\"space-container q-table\" wrap>\n      <Space className=\"space-container\" wrap>\n        {topKeys.map((key) => (\n          <CharacterCard\n            character={characters[key]}\n            key={key}\n            size={width}\n            className={clsx(key === playerCharacterId && 'q-character-player')}\n          />\n        ))}\n      </Space>\n      <Space className=\"space-container\" wrap>\n        {bottomKeys.map((key) => (\n          <CharacterCard\n            character={characters[key]}\n            key={key}\n            size={width}\n            className={clsx(key === playerCharacterId && 'q-character-player')}\n          />\n        ))}\n      </Space>\n    </Space>\n  );\n}\n","// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PositiveHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<YesIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n\nexport function NegativeHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<NoIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","// Ant Design Resources\nimport { Button, Popover, Space, Tooltip } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useBooleanDictionary } from 'hooks/useBooleanDictionary';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useMock } from 'hooks/useMock';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { prepareGlyphs } from './utils/helpers';\nimport { mockGlyphs } from './utils/mock';\n// Icons\nimport { YesIcon } from 'icons/YesIcon';\nimport { NoIcon } from 'icons/NoIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { Table } from './components/Table';\nimport { GlyphCard } from 'components/cards/GlyphCard';\nimport { IconAvatar } from 'components/avatars';\nimport { NegativeHighlight, PositiveHighlight } from './components/Highlights';\n\ntype StepSelectGlyphsProps = {\n  user: GamePlayer;\n  onSelectGlyphs: GenericFunction;\n  characters: Characters;\n  tableOrder: CardId[];\n  roundType: 'SHOW' | 'HIDE';\n} & AnnouncementProps;\n\nconst SELECTIONS_PLACEHOLDER = [0, 1, 2];\n\nexport function StepSelectGlyphs({\n  user,\n  announcement,\n  onSelectGlyphs,\n  characters,\n  tableOrder,\n  roundType,\n}: StepSelectGlyphsProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 50,\n    maxWidth: 75,\n  });\n  const selectedWidth = glyphWidth + 15;\n\n  const {\n    dict: positiveSelection,\n    updateDict: updatePositive,\n    keys: positiveSelections,\n  } = useBooleanDictionary({});\n\n  const {\n    dict: negativeSelection,\n    updateDict: updateNegative,\n    keys: negativeSelections,\n  } = useBooleanDictionary({});\n\n  const glyphs = user.glyphs ?? [];\n\n  useMock(() => {\n    onSelectGlyphs({ glyphs: mockGlyphs(glyphs) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate\n          pt={<>Descreva seu personagem com ícones</>}\n          en={<>Describe your character with glyphs</>}\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Dos ícones abaixo, você pode selecionar até <PositiveHighlight>3</PositiveHighlight> positivos e\n              até <NegativeHighlight>3</NegativeHighlight> negativos.\n              <br /> Quando você clica em ícone, você determina se ele é relacionado ao seu personagem ou não.\n              <br />\n              <strong>A sua carta é a que tem a borda de bolinhas amarelas!</strong>\n            </>\n          }\n          en={\n            <>\n              From the glyphs below, you may select up to <PositiveHighlight>3</PositiveHighlight> positive\n              and <NegativeHighlight>3</NegativeHighlight> negative glyphs.\n              <br />\n              When you click on a glyph, you will determine if it's related or not to your character.\n              <br />\n              <strong>Your card is highlighted with the dotted yellow border!</strong>\n            </>\n          }\n        />\n        {roundType === 'SHOW' ? (\n          <Translate\n            pt={\n              <>\n                <br />\n                Você também pode ver todos os personagens abaixo caso queira evitar conflito com outros\n                jogadores.\n              </>\n            }\n            en={\n              <>\n                <br />\n                You can also take a look at all the characters for this round so you don't give clues that\n                match others.\n              </>\n            }\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <br />\n                De agora em diante, você vê apenas o seu personagem.\n              </>\n            }\n            en={\n              <>\n                <br />\n                From now on, you only see your own character.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <Table\n        characters={characters}\n        playerCharacterId={user.character?.id}\n        tableOrder={tableOrder}\n        showAll={roundType === 'SHOW'}\n      />\n\n      <Space className=\"space-container q-selections\">\n        <div className=\"q-selections__section q-selections__section--positive\">\n          {SELECTIONS_PLACEHOLDER.map((entry) => {\n            const id = positiveSelections[entry];\n\n            return (\n              <div className=\"q-selections__positive\" key={`pos-${entry}-${id}`}>\n                <div className=\"q-selections__entry\">\n                  <IconAvatar icon={<YesIcon />} />\n                  {id !== undefined ? (\n                    <TransparentButton\n                      onClick={() => updatePositive(id)}\n                      title={translate('Remover', 'Remove')}\n                    >\n                      <Tooltip title={<Translate pt=\"Remover\" en=\"Remove\" />}>\n                        <GlyphCard width={selectedWidth} id={id} />\n                      </Tooltip>\n                    </TransparentButton>\n                  ) : (\n                    <div\n                      className=\"q-selections__no-glyph\"\n                      style={{ width: `${selectedWidth}px`, height: `${selectedWidth}px` }}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"q-selections__section q-selections__section--negative\">\n          {SELECTIONS_PLACEHOLDER.map((entry) => {\n            const id = negativeSelections[entry];\n            return (\n              <div className=\"q-selections__positive\" key={`neg-${entry}-${id}`}>\n                <div className=\"q-selections__entry\">\n                  <IconAvatar icon={<NoIcon />} />\n                  {id !== undefined ? (\n                    <TransparentButton onClick={() => updateNegative(id)}>\n                      <Tooltip title={<Translate pt=\"Remover\" en=\"Remove\" />} trigger=\"hover\">\n                        <GlyphCard width={selectedWidth} id={id} />\n                      </Tooltip>\n                    </TransparentButton>\n                  ) : (\n                    <div\n                      className=\"q-selections__no-glyph\"\n                      style={{ width: `${selectedWidth}px`, height: `${selectedWidth}px` }}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Space>\n\n      <Space className=\"glyphs\" wrap>\n        {glyphs.map((glyphId: string) => (\n          <Popover\n            content={\n              <PopoverGlyph\n                id={glyphId}\n                updatePositive={updatePositive}\n                updateNegative={updateNegative}\n                disablePositive={positiveSelections.length === 3}\n                disableNegative={negativeSelections.length === 3}\n              />\n            }\n            title={<Translate pt=\"Positivo ou Negativo?\" en=\"Positive or Negative\" />}\n            trigger=\"click\"\n          >\n            <TransparentButton>\n              <GlyphCard width={glyphWidth} id={glyphId} />\n            </TransparentButton>\n          </Popover>\n        ))}\n      </Space>\n\n      <Space className=\"space-container\">\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          onClick={() => onSelectGlyphs({ glyphs: prepareGlyphs(positiveSelection, negativeSelection) })}\n          disabled={\n            isLoading || user.ready || (positiveSelections.length < 1 && negativeSelections.length < 1)\n          }\n        >\n          <Translate pt={<>Enviar ícones</>} en={<>Submit glyphs</>} />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n\ntype PopoverGlyphProps = {\n  id: CardId;\n  updatePositive: GenericFunction;\n  updateNegative: GenericFunction;\n  disablePositive: boolean;\n  disableNegative: boolean;\n};\n\nfunction PopoverGlyph({\n  id,\n  updatePositive,\n  updateNegative,\n  disablePositive,\n  disableNegative,\n}: PopoverGlyphProps) {\n  return (\n    <Space>\n      <TransparentButton onClick={() => updatePositive(id)} disabled={disablePositive}>\n        <IconAvatar icon={<YesIcon />} size=\"large\" />\n      </TransparentButton>\n      <TransparentButton onClick={() => updateNegative(id)} disabled={disableNegative}>\n        <IconAvatar icon={<NoIcon />} size=\"large\" />\n      </TransparentButton>\n    </Space>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\nimport { useOnSubmitGlyphsAPIRequest } from './utils/api-requests';\n// Icons\nimport { PlayerIconsIcon } from 'icons/PlayerIconsIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSelectGlyphs } from './StepSelectGlyphs';\nimport { RoundAnnouncement } from 'components/round';\n\nexport function PhaseCharacterDescription({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, goToNextStep, setStep } = useStep();\n\n  const onSelectGlyphs = useOnSubmitGlyphsAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<PlayerIconsIcon />}\n      title={<Translate pt=\"Descreva seu personagem com ícones\" en=\"Describe your character with glyphs\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt={<>Selecione até 6 ícones que ajudem os outros jogadores a adivinhar o seu personagem</>}\n          en={<>Select up to 6 glyphs that would help other players to guess who your character is</>}\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.CHARACTER_DESCRIPTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state?.round}\n          onPressButton={goToNextStep}\n          buttonText=\" \"\n          time={5}\n          circleColor={info?.appearance?.color}\n        ></RoundAnnouncement>\n\n        {/* Step 0 */}\n        <StepSelectGlyphs\n          user={user}\n          onSelectGlyphs={onSelectGlyphs}\n          characters={state.characters}\n          tableOrder={state.tableOrder}\n          announcement={announcement}\n          roundType={state.roundType}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { Translate } from 'components/language';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\nexport function ScoringRules({ currentRound }: { currentRound: number }) {\n  return (\n    <Translate\n      pt={\n        <>\n          Você ganha <PointsHighlight>{currentRound}</PointsHighlight>ponto para cada par que acertar e também{' '}\n          <PointsHighlight>{currentRound}</PointsHighlight>ponto para cada jogador que acertar o seu.\n        </>\n      }\n      en={\n        <>\n          You get <PointsHighlight>{currentRound}</PointsHighlight>point for each pair you get correctly and\n          also <PointsHighlight>{currentRound}</PointsHighlight>point for each player who gets your character\n          correctly\n        </>\n      }\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { shuffle } from 'lodash';\nimport { useEffectOnce } from 'react-use';\nimport { useCallback, useState } from 'react';\n// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useMock } from 'hooks/useMock';\nimport { useVotingMatch } from 'hooks/useVotingMatch';\n// Utils\nimport { getEntryId, sortPlayers } from 'utils/helpers';\nimport { getRibbons, prepareGuesses } from './utils/helpers';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\nimport { CharacterCard } from 'components/cards/CharacterCard';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { RibbonGroup } from 'components/ribbons';\nimport { PlayerGlyphs } from './components/PlayerGlyphs';\n\ntype StepGuessingProps = {\n  user: GamePlayer;\n  players: GamePlayers;\n  onSubmitGuesses: GenericFunction;\n  characters: Characters;\n  tableOrder: CardId[];\n  round: GameRound;\n} & AnnouncementProps;\n\nexport function StepGuessing({\n  user,\n  announcement,\n  onSubmitGuesses,\n  players,\n  characters,\n  tableOrder,\n  round,\n}: StepGuessingProps) {\n  const { isLoading } = useLoading();\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 45,\n    maxWidth: 60,\n  });\n  const characterWidth = useCardWidth(8, {\n    gap: 16,\n    minWidth: 120,\n    maxWidth: 200,\n  });\n  const { votes, setVotes, activateItem, isVotingComplete, isItemActive } = useVotingMatch(\n    'player',\n    true,\n    Object.keys(players).length,\n    {}\n  );\n  const [choseRandomly, setChoseRandomly] = useState(false);\n\n  const onGuessForMe = () => {\n    setChoseRandomly(true);\n    const usedPlayers = Object.keys(votes);\n    const usedCharacters = Object.values(votes);\n    const playerKeys = Object.keys(players)\n      .map((playerId: string) => getEntryId(['player', playerId]))\n      .filter((key: string) => !usedPlayers.includes(key));\n    const characterKeys = shuffle(\n      Object.keys(characters)\n        .map((cardId: CardId) => getEntryId(['char', cardId]))\n        .filter((key: string) => !usedCharacters.includes(key))\n    );\n    const newVotes = { ...votes };\n    playerKeys.forEach((playerKey: string, index: number) => {\n      if (!newVotes[playerKey]) {\n        newVotes[playerKey] = characterKeys[index];\n      }\n    });\n    setVotes(newVotes);\n    return newVotes;\n  };\n\n  const selectOwnCard = useCallback(() => {\n    if (user.character) {\n      return { [getEntryId(['player', user.id])]: getEntryId(['char', user.character.id]) };\n    }\n  }, [user]);\n\n  // Dev Mocks\n  useMock(() => {\n    onSubmitGuesses({ guesses: prepareGuesses(onGuessForMe()), choseRandomly });\n  });\n\n  // Auto-select the players own drawing and word\n  useEffectOnce(() => {\n    const selection = selectOwnCard();\n    if (selection) {\n      setVotes((s: any) => ({ ...s, ...selection }));\n    }\n  });\n\n  const ribbons = getRibbons(players, votes);\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title>\n        <Translate pt={<>Pareie os cada personagem com um jogador</>} en={<>Pair player and characters</>} />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={<>De acordo com a seleção de ícones de cada jogador, tente adivinhar todos os pares.</>}\n          en={<>Based on each player's glyphs selection, try to guess the pairs.</>}\n        />\n        <br />\n        <ScoringRules currentRound={round.current} />\n      </Instruction>\n\n      <div className=\"q-voting-container\">\n        <div className=\"q-voting-characters\">\n          {tableOrder.map((cardId) => {\n            const entryId = getEntryId(['char', cardId]);\n            const labels = ribbons[cardId] ?? [];\n\n            return (\n              <TransparentButton\n                key={cardId}\n                onClick={() => activateItem(entryId)}\n                active={isItemActive(entryId)}\n                className=\"q-voting-characters__button\"\n              >\n                <RibbonGroup labels={labels} />\n                <CharacterCard\n                  character={characters[cardId]}\n                  size={characterWidth}\n                  className={clsx(cardId === 'a' && 'q-character-player')}\n                />\n              </TransparentButton>\n            );\n          })}\n        </div>\n\n        <div className=\"q-players-glyphs\">\n          {sortPlayers(players).map((player) => {\n            const entryId = getEntryId(['player', player.id]);\n\n            return (\n              <TransparentButton\n                key={`glyphs-for-${player.id}`}\n                onClick={() => activateItem(entryId)}\n                active={isItemActive(entryId)}\n              >\n                <PlayerGlyphs player={player} glyphWidth={glyphWidth} done={Boolean(votes[entryId])} />\n              </TransparentButton>\n            );\n          })}\n        </div>\n      </div>\n\n      <Space className=\"space-container\">\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          onClick={() => onSubmitGuesses({ guesses: prepareGuesses(votes), choseRandomly })}\n          disabled={isLoading || user.ready || !isVotingComplete}\n        >\n          <Translate pt={<>Enviar pares</>} en={<>Submit guesses</>} />\n        </Button>\n        <Button size=\"large\" onClick={() => onGuessForMe()} disabled={isLoading || user.ready}>\n          <Translate pt={<>Desistir</>} en={<>Guess for me</>} />\n        </Button>\n      </Space>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitGuessesAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { EvaluateIcon } from 'icons/EvaluateIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepGuessing } from './StepGuessing';\nimport { ScoringRules } from './components/RulesBlobs';\n\nexport function PhaseGuessing({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n\n  const onSubmitGuesses = useOnSubmitGuessesAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<EvaluateIcon />}\n      title={\n        <Translate pt=\"Pareie os personagens e símbolos\" en=\"Pair characters with the players' glyphs\" />\n      }\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <ScoringRules currentRound={state.round.current} />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.GUESSING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepGuessing\n          user={user}\n          onSubmitGuesses={onSubmitGuesses}\n          characters={state.characters}\n          tableOrder={state.tableOrder}\n          players={players}\n          announcement={announcement}\n          round={state.round}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Avatar as AntAvatar, Space, Typography } from 'antd';\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\n// Utils\nimport { getPlayersFromIds } from 'utils/helpers';\n// Icons\nimport { GarbageIcon } from 'icons/GarbageIcon';\n// Components\nimport { Avatar, IconAvatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { StarPoints } from 'components/points';\n\ntype GalleryGuessesProps = {\n  players: GamePlayers;\n  playersSay: Record<CardId, PlayerId[]>;\n  playersPoints: NumberDictionary;\n  characters: Characters;\n  currentColor: string;\n  currentPlayer: GamePlayer;\n  round: GameRound;\n};\n\nexport function GalleryGuesses({\n  players,\n  playersSay,\n  playersPoints,\n  characters,\n  currentColor,\n  currentPlayer,\n  round,\n}: GalleryGuessesProps) {\n  const entries = orderBy(\n    Object.entries(playersSay).map(([cardId, playersIds]) => {\n      return {\n        cardId,\n        character: characters[cardId],\n        playersIds,\n        count: playersIds.length,\n        isCorrect: currentPlayer.character.id === cardId,\n      };\n    }),\n    ['isCorrect', 'count', 'card.text'],\n    ['desc', 'desc', 'asc']\n  );\n  const correctGuesses = playersSay[currentPlayer.character.id];\n\n  return (\n    <Space className=\"q-gallery__info-container\" direction=\"vertical\">\n      <Space className=\"q-gallery__votes\" direction=\"vertical\">\n        <div className=\"q-gallery__label\">\n          <Translate pt=\"Jogadores votaram\" en=\"Players voted\" />\n        </div>\n        {entries.map((entry, index) => {\n          return (\n            <div key={`guess-${entry.cardId}-${index}`} className=\"q-gallery__guess\">\n              <div\n                className=\"q-gallery__speech-bubble\"\n                style={entry.isCorrect ? { backgroundColor: currentColor, color: 'white' } : {}}\n              >\n                {entry.isCorrect ? (\n                  <CrownFilled className=\"q-gallery__speech-bubble-icon\" style={{ color: 'white' }} />\n                ) : (\n                  <MessageFilled className=\"q-gallery__speech-bubble-icon\" />\n                )}\n                <DualTranslate>{entry.character.name}</DualTranslate>\n              </div>\n              <div className=\"q-gallery__players\">\n                <AntAvatar.Group>\n                  {entry.playersIds.map((playerId) => (\n                    <Avatar\n                      id={players[playerId].avatarId}\n                      key={`guess-avatar-${players[playerId].avatarId}`}\n                    />\n                  ))}\n                </AntAvatar.Group>\n                <span className=\"q-gallery__players-names\">\n                  {getPlayersFromIds(entry.playersIds, players, true).join(', ')}\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </Space>\n\n      <Space className=\"q-gallery__votes\" direction=\"vertical\">\n        <div className=\"q-gallery__label\">\n          <Translate pt=\"Pontos\" en=\"Points\" />\n        </div>\n\n        {correctGuesses.length ? (\n          <>\n            <div className=\"q-gallery__players\">\n              <AntAvatar.Group>\n                {correctGuesses.map((playerId) => {\n                  return <Avatar key={`correct-guess-avatar-${playerId}`} id={players[playerId].avatarId} />;\n                })}\n              </AntAvatar.Group>\n              <StarPoints quantity={round.current} keyPrefix={`guessers-points-${currentPlayer.id}`} />\n              <span className=\"q-gallery__players-names\">\n                {getPlayersFromIds(correctGuesses, players, true).join(', ')}\n              </span>\n            </div>\n            <div className=\"q-gallery__player-points\">\n              <Avatar id={currentPlayer.avatarId} />{' '}\n              <StarPoints\n                quantity={playersPoints?.[currentPlayer.id]}\n                keyPrefix={`artist-points-${currentPlayer.id}`}\n              />{' '}\n              <span className=\"q-gallery__players-names\">{currentPlayer.name}</span>\n            </div>\n          </>\n        ) : (\n          <Typography.Text className=\"q-gallery__no-wins\">\n            <IconAvatar icon={<GarbageIcon />} size=\"large\" shape=\"square\" />\n            <Translate\n              pt=\"Nossa, ninguém acertou. Esses ícones devem ter sido uma bosta heim.\"\n              en=\"Wow, nobody got it. You must have chosen terrible glyphs. Shame...\"\n            />\n          </Typography.Text>\n        )}\n      </Space>\n    </Space>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { PAGE_DURATION } from './utils/constants';\nimport { getAvatarColorById } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { PopoverRule } from 'components/rules';\nimport { SlideShow } from 'components/slide-show';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { AvatarName } from 'components/avatars';\nimport { PlayerGlyphs } from './components/PlayerGlyphs';\nimport { CharacterCard } from 'components/cards/CharacterCard';\nimport { GalleryGuesses } from './components/GalleryGuesses';\n\ntype StepGalleryProps = {\n  players: GamePlayers;\n  characters: Characters;\n  gallery: GalleryEntry[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n  round: GameRound;\n};\n\nexport function StepGallery({\n  players,\n  gallery,\n  characters,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n  round,\n}: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n  const glyphWidth = useCardWidth(20, {\n    gap: 16,\n    minWidth: 45,\n    maxWidth: 60,\n  });\n  const characterWidth = useCardWidth(8, {\n    gap: 16,\n    minWidth: 120,\n    maxWidth: 200,\n  });\n  const { playerId, characterId, playersPoints, playersSay } = gallery[activeIndex];\n\n  const currentPlayer = players[playerId];\n  const currentColor = getAvatarColorById(currentPlayer.avatarId);\n\n  return (\n    <Step className=\"l-step-album\">\n      <Title>\n        <Translate pt=\"Galeria\" en=\"Gallery\" />\n      </Title>\n\n      <PopoverRule content={<ScoringRules currentRound={round.current} />} />\n\n      <SlideShow\n        players={players}\n        length={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={currentColor}\n        windowDuration={PAGE_DURATION}\n        leftClassName=\"q-gallery__result\"\n        rightClassName=\"q-gallery__info\"\n      >\n        <div className=\"q-gallery__result-container\">\n          <div className=\"q-gallery__player\" style={{ backgroundColor: currentColor }}>\n            <AvatarName player={currentPlayer} size=\"large\" />\n          </div>\n          <Space className=\"space-container\" direction=\"vertical\">\n            <CharacterCard character={characters[characterId]} size={characterWidth} />\n            <PlayerGlyphs player={currentPlayer} glyphWidth={glyphWidth} />\n          </Space>\n        </div>\n\n        <GalleryGuesses\n          players={players}\n          playersSay={playersSay}\n          playersPoints={playersPoints}\n          characters={characters}\n          currentColor={currentColor}\n          currentPlayer={currentPlayer}\n          round={round}\n        />\n      </SlideShow>\n    </Step>\n  );\n}\n","export const PAGE_DURATION = 10;\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Components\nimport { RoundsLeftInstruction } from 'components/text';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { PopoverRule } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { VIPNextPhaseButton } from 'components/vip';\nimport { ScoringRules } from './components/RulesBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  round: GameRound;\n  goToPreviousStep: GenericFunction;\n  setActiveIndex: GenericFunction;\n};\n\nexport function StepRanking({ players, ranking, round, goToPreviousStep, setActiveIndex }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n        <Translate\n          pt=\"Votos corretos em seu personagem por outros jogadores\"\n          en=\"Correct guesses on your character by other players\"\n        />,\n      ]}\n    >\n      <PopoverRule content={<ScoringRules currentRound={round.current} />} />\n\n      <RoundsLeftInstruction round={round} />\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria Novamente\" en=\"See Gallery Again\" />\n      </Button>\n\n      <VIPNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// State & Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useSlideShow } from 'hooks/useSlideShow';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { MirrorIcon } from 'icons/MirrorIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { ScoringRules } from './components/RulesBlobs';\nimport { StepGallery } from './StepGallery';\nimport { StepRanking } from './StepRanking';\n\nexport function PhaseResults({ players, state, info }: PhaseProps) {\n  const { step, setStep, goToPreviousStep, goToNextStep } = useStep();\n  const { activeIndex, setActiveIndex, isFirstGalleryRunThrough } = useSlideShow(state.gallery?.length ?? 1);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.QUEM_SOU_EU.RESULTS}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<MirrorIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n          unskippable\n          type=\"block\"\n        >\n          <Instruction>\n            <ScoringRules currentRound={state.round.current} />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          players={players}\n          gallery={state.gallery}\n          characters={state.characters}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          round={state.round}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { useMemo } from 'react';\n// Utils\nimport { parseSelectedGlyphs } from '../utils/helpers';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\n// Components\nimport { AvatarStrip, IconAvatar } from 'components/avatars';\nimport { GlyphCard } from 'components/cards/GlyphCard';\nimport { CharacterCard } from 'components/cards/CharacterCard';\n\ntype FinalCharacterProps = {\n  players: GamePlayers;\n  character: FinalCharacter;\n  glyphWidth: number;\n};\n\nexport function FinalCharacter({ players, character, glyphWidth }: FinalCharacterProps) {\n  const [positive, negative] = useMemo(() => parseSelectedGlyphs(character.glyphs ?? {}), [character.glyphs]);\n\n  return (\n    <div className=\"q-player-glyphs q-final-character\">\n      <AvatarStrip player={players[character.playerId]} withName className=\"q-player-glyphs__strip\" />\n      <CharacterCard size={100} character={character} />\n\n      {positive.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--positive\"\n            key={`pos-${character.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<YesIcon />} size=\"small\" />\n            {Boolean(id) ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n      {negative.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--negative\"\n            key={`neg-${character.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<NoIcon />} size=\"small\" />\n            {Boolean(id) ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { achievementsReference } from './utils/achievements';\n// Icons\nimport { TrophyIcon } from 'icons/TrophyIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Achievements } from 'components/general/Achievements';\nimport { FinalCharacter } from './components/FinalCharacter';\n\nfunction PhaseGameOver({ state, players, info, meta }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} players={players} announcementIcon={<TrophyIcon />}>\n      <Achievements players={players} achievements={state.achievements} reference={achievementsReference} />\n\n      <Space className=\"space-container\" wrap>\n        {orderBy(state.gallery, `name.${meta.language}`).map((entry: FinalCharacter) => (\n          <FinalCharacter players={players} character={entry} glyphWidth={30} key={entry.id} />\n        ))}\n      </Space>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseCharacterFiltering } from './PhaseCharacterFiltering';\nimport { PhaseCharacterDescription } from './PhaseCharacterDescription';\nimport { PhaseGuessing } from './PhaseGuessing';\nimport { PhaseResults } from './PhaseResults';\nimport PhaseGameOver from './PhaseGameOver';\n// Sass\nimport './quem-sou-eu.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.QUEM_SOU_EU.CHARACTER_FILTERING:\n      return PhaseCharacterFiltering;\n    case PHASES.QUEM_SOU_EU.CHARACTER_DESCRIPTION:\n      return PhaseCharacterDescription;\n    case PHASES.QUEM_SOU_EU.GUESSING:\n      return PhaseGuessing;\n    case PHASES.QUEM_SOU_EU.RESULTS:\n      return PhaseResults;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionQuemSouEu() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.DARK_BLUE,\n          colorLink: THEME_COLORS.DARK_BLUE,\n        },\n      }}\n    >\n      <Session gameCollection={GAME_COLLECTION.QUEM_SOU_EU} getActiveComponent={getActiveComponent} />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionQuemSouEu;\n","import { useMemo } from 'react';\n// Utils\nimport { parseSelectedGlyphs } from '../utils/helpers';\n// Icons\nimport { NoIcon } from 'icons/NoIcon';\nimport { YesIcon } from 'icons/YesIcon';\nimport { BoxCheckMarkIcon } from 'icons/BoxCheckMarkIcon';\n// Components\nimport { AvatarStrip, IconAvatar } from 'components/avatars';\nimport { GlyphCard } from 'components/cards/GlyphCard';\n\ntype PlayerGlyphsProps = {\n  player: GamePlayer;\n  glyphWidth: number;\n  done?: boolean;\n};\n\nexport function PlayerGlyphs({ player, glyphWidth, done }: PlayerGlyphsProps) {\n  const [positive, negative] = useMemo(\n    () => parseSelectedGlyphs(player.selectedGlyphs ?? {}),\n    [player.selectedGlyphs]\n  );\n\n  return (\n    <div className=\"q-player-glyphs\">\n      <AvatarStrip\n        player={player}\n        withName\n        className=\"q-player-glyphs__strip\"\n        icon={done ? <BoxCheckMarkIcon /> : undefined}\n      />\n      {positive.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--positive\"\n            key={`pos-${player.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<YesIcon />} size=\"small\" />\n            {Boolean(id) ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n      {negative.map((id, index) => {\n        return (\n          <div\n            className=\"q-player-glyphs__entry q-player-glyphs__entry--negative\"\n            key={`neg-${player.id}-${id}-${index}`}\n          >\n            <IconAvatar icon={<NoIcon />} size=\"small\" />\n            {Boolean(id) ? (\n              <GlyphCard width={glyphWidth} id={id} />\n            ) : (\n              <div\n                className=\"q-selections__no-glyph\"\n                style={{ width: `${glyphWidth}px`, height: `${glyphWidth}px` }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","const ACHIEVEMENTS = {\n  MOST_GLYPHS: 'MOST_GLYPHS',\n  LEAST_GLYPHS: 'LEAST_GLYPHS',\n  MOST_POSITIVE: 'MOST_POSITIVE',\n  LEAST_POSITIVE: 'LEAST_POSITIVE',\n  MOST_NEGATIVE: 'MOST_NEGATIVE',\n  LEAST_NEGATIVE: 'LEAST_NEGATIVE',\n  SINGLE_ICON: 'SINGLE_ICON',\n  TABLE_VOTES: 'TABLE_VOTES',\n  CHOOSE_FOR_ME: 'CHOOSE_FOR_ME',\n};\n\nexport const achievementsReference: AchievementReference = {\n  [ACHIEVEMENTS.MOST_GLYPHS]: {\n    icon: 'arrow-up',\n    title: {\n      pt: 'Melhor Uso dos Ícones',\n      en: 'Best Glyph User',\n    },\n    description: {\n      pt: 'Usou o maior número de ícones durante o jogo',\n      en: 'Used the most glyphs during the game',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_GLYPHS]: {\n    icon: 'arrow-down',\n    title: {\n      pt: 'Mais Sucinto',\n      en: 'Most Succinct',\n    },\n    description: {\n      pt: 'Usou o menor número de ícones durante o jogo',\n      en: 'Used the fewest glyphs during the game',\n    },\n  },\n  [ACHIEVEMENTS.MOST_POSITIVE]: {\n    icon: 'thumbs-up',\n    title: {\n      pt: 'Mais Positivo',\n      en: 'Most Positive',\n    },\n    description: {\n      pt: 'Usou mais ícones no lado positivo',\n      en: 'Used the most glyphs on the positive side',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_POSITIVE]: {\n    icon: 'arrow-left',\n    title: {\n      pt: 'Menos Positivo',\n      en: 'Least Positive',\n    },\n    description: {\n      pt: 'Usou menos ícones no lado positivo',\n      en: 'Used the least glyphs on the positive side',\n    },\n  },\n  [ACHIEVEMENTS.MOST_NEGATIVE]: {\n    icon: 'thumbs-down',\n    title: {\n      pt: 'Mais Negativo',\n      en: 'Most Negative',\n    },\n    description: {\n      pt: 'Usou mais ícones no lado negativo',\n      en: 'Used the most glyphs on the negative side',\n    },\n  },\n  [ACHIEVEMENTS.LEAST_NEGATIVE]: {\n    icon: 'arrow-right',\n    title: {\n      pt: 'Menos Negativo',\n      en: 'Least Negative',\n    },\n    description: {\n      pt: 'Usou menos ícones no lado negativo',\n      en: 'Used the least glyphs on the negative side',\n    },\n  },\n  [ACHIEVEMENTS.SINGLE_ICON]: {\n    icon: 'one',\n    title: {\n      pt: 'Mais Único',\n      en: 'Most Unique',\n    },\n    description: {\n      pt: 'Usou apenas um ícone mais vezes',\n      en: 'Used a single icon most times',\n    },\n  },\n  [ACHIEVEMENTS.TABLE_VOTES]: {\n    icon: 'table',\n    title: {\n      pt: 'Melhor Votador Pra Mesa',\n      en: 'Best Table Voter',\n    },\n    description: {\n      pt: 'Votou nas cartas extras que não eram de nenhum jogador mais vezes',\n      en: \"Voted for extra cards that didn't belong to any player the most\",\n    },\n  },\n  [ACHIEVEMENTS.CHOOSE_FOR_ME]: {\n    icon: 'dice',\n    title: {\n      pt: 'Menos Brasileiro',\n      en: 'The Shirker',\n    },\n    description: {\n      pt: 'Apertou o botão Chutar Restantes mais vezes',\n      en: \"Pressed 'Guess for me' the most\",\n    },\n  },\n};\n\nexport default achievementsReference;\n","import { SEPARATOR } from 'utils/constants';\n\n/**\n * Creates a glyph reference dictionary where true means positive and false means negative\n * @param positive\n * @param negative\n * @returns\n */\nexport const prepareGlyphs = (\n  positive: BooleanDictionary,\n  negative: BooleanDictionary\n): BooleanDictionary => {\n  const dict: BooleanDictionary = {};\n  Object.keys(positive).forEach((key) => (dict[key] = true));\n  Object.keys(negative).forEach((key) => (dict[key] = false));\n\n  return dict;\n};\n\nexport const parseSelectedGlyphs = (glyphs: BooleanDictionary) => {\n  const positive: string[] = [];\n  const negative: string[] = [];\n\n  Object.keys(glyphs).forEach((id) => {\n    if (glyphs[id]) {\n      positive.push(id);\n    } else {\n      negative.push(id);\n    }\n  });\n\n  while (positive.length < 3) {\n    positive.push('');\n  }\n\n  while (negative.length < 3) {\n    negative.push('');\n  }\n\n  return [positive, negative];\n};\n\n/**\n * Get list of players on each voted character\n * @param players\n * @param votes\n * @returns\n */\nexport const getRibbons = (players: GamePlayers, votes: StringDictionary): Record<string, GamePlayer[]> => {\n  const votesDict: Record<string, GamePlayer[]> = {};\n\n  Object.keys(votes).forEach((playerEntry) => {\n    const playerId = playerEntry.split(SEPARATOR)[1];\n    const characterId = votes[playerEntry].split(SEPARATOR)[1];\n\n    if (votesDict[characterId] === undefined) {\n      votesDict[characterId] = [];\n    }\n\n    votesDict[characterId].push(players[playerId]);\n  });\n\n  return votesDict;\n};\n\n/**\n * Removes prefixes from votes\n * @param votes\n * @returns\n */\nexport const prepareGuesses = (votes: StringDictionary): StringDictionary => {\n  const result: StringDictionary = {};\n\n  Object.keys(votes).forEach((playerEntry) => {\n    const playerId = playerEntry.split(SEPARATOR)[1];\n    const characterId = votes[playerEntry].split(SEPARATOR)[1];\n\n    result[playerId] = characterId;\n  });\n\n  return result;\n};\n","import { Dispatch, useState } from 'react';\n\ntype UseBooleanDictionaryReturnValue = {\n  /**\n   * The dictionary\n   */\n  dict: BooleanDictionary;\n  /**\n   * Set the dictionary\n   */\n  setDict: Dispatch<React.SetStateAction<BooleanDictionary>>;\n  /**\n   * Add or remove an entry from the dictionary\n   * @param key - The key to add or remove\n   */\n  updateDict: (key: string) => void;\n  /**\n   * Reset the dictionary to the initial state\n   */\n  reset: () => void;\n  /**\n   * The number of entries in the dictionary\n   */\n  length: number;\n  /**\n   * The list of keys in the dictionary\n   */\n  keys: string[];\n};\n\n/**\n * A dictionary of booleans\n * @param initialState - The initial state, usually an empty object\n * @param validation - A function to validate if an entry can be added to the dictionary\n * @returns - A dictionary of booleans and its functions\n */\nexport function useBooleanDictionary(\n  initialState: BooleanDictionary,\n  validation?: BooleanFunction\n): UseBooleanDictionaryReturnValue {\n  const [dict, setDict] = useState(initialState);\n\n  const updateDict = (key: string) => {\n    const isValid = !validation || validation(dict);\n    if (!dict[key] && isValid) {\n      setDict((s) => ({\n        ...s,\n        [key]: true,\n      }));\n    } else {\n      const dictCopy = { ...dict };\n      delete dictCopy[key];\n      setDict(dictCopy);\n    }\n  };\n\n  const reset = () => setDict(initialState);\n\n  const keys = Object.keys(dict);\n\n  return {\n    dict,\n    setDict,\n    updateDict,\n    reset,\n    keys,\n    length: keys.length,\n  };\n}\n","export function FilterIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffe17d\"\n        d=\"M215.92 304.64v191.83a8 8 0 0011.6 7.17l59.7-29.85a16 16 0 008.86-14.34V304.64a24.06 24.06 0 015.41-15.2L467 86.28a24.08 24.08 0 005.4-15.19V23.53a16 16 0 00-16-16H55.6a16 16 0 00-16 16v47.56A24.08 24.08 0 0045 86.28l165.51 203.17a24 24 0 015.41 15.19z\"\n      ></path>\n      <path\n        fill=\"#ffd164\"\n        d=\"M400 71.63H191.87V7.5H55.6a16 16 0 00-16 16v47.59A24.08 24.08 0 0045 86.28l165.51 203.16a24 24 0 015.41 15.2v191.83a8 8 0 0011.6 7.17l16.6-8.3V296.08H272L410.68 91.76A12.9 12.9 0 00400 71.63z\"\n      ></path>\n      <path\n        fill=\"#ffc350\"\n        d=\"M143.77 71.63H39.61A24.09 24.09 0 0045 86.28l165.52 203.16a24 24 0 013.78 6.64H232z\"\n      ></path>\n      <path d=\"M456.4 0H55.6a23.56 23.56 0 00-23.53 23.53v47.56A31.67 31.67 0 0039.16 91L204.7 294.18a16.61 16.61 0 013.72 10.46v191.83a15.49 15.49 0 0022.45 13.88l59.7-29.85a23.41 23.41 0 0013-21.05V304.64a16.61 16.61 0 013.72-10.46L472.84 91a31.67 31.67 0 007.09-19.93V23.53A23.56 23.56 0 00456.4 0zM288.58 459.45a8.48 8.48 0 01-4.72 7.63l-59.69 29.85a.46.46 0 01-.51 0 .45.45 0 01-.24-.44V303.58h65.2v155.87zm7.09-174.74a32.21 32.21 0 00-2.69 3.87H219a31.1 31.1 0 00-2.69-3.87L50.79 81.54a16.72 16.72 0 01-1.63-2.41h22.48a7.5 7.5 0 000-15H47.07v-40.6A8.54 8.54 0 0155.6 15h400.8a8.54 8.54 0 018.53 8.53v40.6h-24.56a7.5 7.5 0 000 15h22.48a17 17 0 01-1.63 2.41z\"></path>\n      <path d=\"M408.3 64.13H103.69a7.5 7.5 0 000 15H408.3a7.5 7.5 0 000-15z\"></path>\n    </svg>\n  );\n}\n","export function PlayerIconsIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"none\" d=\"M0 0h512v512H0z\"></path>\n      <path fill=\"#fbf4db\" d=\"M199.89 103.69a96.2 96.2 0 11-96.2-96.19 96.2 96.2 0 0196.2 96.19\"></path>\n      <path\n        fill=\"#8ceea1\"\n        d=\"M114.3 57a23.81 23.81 0 00-10.41 16.91 5.77 5.77 0 004.28 6.25 23.79 23.79 0 0029.89-20 5.8 5.8 0 00-4.28-6.26A23.84 23.84 0 00114.3 57\"\n      ></path>\n      <path fill=\"#ffe077\" d=\"M504.5 103.69A96.2 96.2 0 11408.31 7.5a96.2 96.2 0 0196.19 96.19\"></path>\n      <path fill=\"#7ad7ee\" d=\"M504.5 408.31a96.2 96.2 0 11-96.19-96.2 96.2 96.2 0 0196.19 96.2\"></path>\n      <path fill=\"#eceaec\" d=\"M448.39 416.32h-80.16v-24.05h80.16z\"></path>\n      <path fill=\"#8ceea1\" d=\"M199.89 408.31a96.2 96.2 0 11-96.2-96.2 96.2 96.2 0 0196.2 96.2\"></path>\n      <path\n        fill=\"#736572\"\n        d=\"M456.4 440.37h-16a8 8 0 01-8-8v-48.11a8 8 0 018-8h16a8 8 0 018 8v48.09a8 8 0 01-8 8\"\n      ></path>\n      <path\n        fill=\"#ff7e92\"\n        d=\"M89 79.73a25.07 25.07 0 00-25.39 25.53c.46 21.78 10.43 46.53 32.05 46.53a30.43 30.43 0 004.91-.42 19 19 0 016.21 0 30.43 30.43 0 004.91.42c22.14 0 32.06-26 32.06-48.1 0-26.87-26.45-23.94-54.75-24\"\n      ></path>\n      <path\n        fill=\"#ff744d\"\n        d=\"M392.27 133.51a16 16 0 11-16-16 16 16 0 0116 16m64.13-8.01a16 16 0 11-16-16 16 16 0 0116 16\"\n      ></path>\n      <path\n        fill=\"#736572\"\n        d=\"M376.24 440.37h-16a8 8 0 01-8-8v-48.11a8 8 0 018-8h16a8 8 0 018 8v48.09a8 8 0 01-8 8\"\n      ></path>\n      <path\n        fill=\"#615260\"\n        d=\"M352.19 416.32v16a8 8 0 008 8h16a8 8 0 008-8v-16zm80.16 0v16a8 8 0 008 8h16a8 8 0 008-8v-16z\"\n      ></path>\n      <path fill=\"#fbbd80\" d=\"M280.05 183.85a24.05 24.05 0 11-24.05-24 24 24 0 0124.05 24\"></path>\n      <path\n        fill=\"#dbd8db\"\n        d=\"M288.06 232h-64.12a32.07 32.07 0 00-32.07 32v32.06c0 13.28 32.07 24.05 32.07 24.05h72.14a24.05 24.05 0 0024.05-24.05V264a32.07 32.07 0 00-32.07-32\"\n      ></path>\n      <path\n        fill=\"#c9c5c9\"\n        d=\"M256 232h-32.06a32.07 32.07 0 00-32.07 32v32.06a24.05 24.05 0 0024 24.05h8V264A32.06 32.06 0 01256 232\"\n      ></path>\n      <path\n        fill=\"#f8ebcc\"\n        d=\"M119.73 183.85A96.09 96.09 0 0144.22 28.19a96.13 96.13 0 10135 135 95.71 95.71 0 01-59.47 20.68\"\n      ></path>\n      <path\n        fill=\"#ffd05b\"\n        d=\"M424.34 183.85a96.1 96.1 0 01-75.51-155.66 96.13 96.13 0 10135 135 95.71 95.71 0 01-59.47 20.68\"\n      ></path>\n      <path\n        fill=\"#4ce1a1\"\n        d=\"M119.73 488.47A96.1 96.1 0 0144.22 332.8a96.13 96.13 0 10135 135 95.66 95.66 0 01-59.47 20.69\"\n      ></path>\n      <path\n        fill=\"#4bc3ef\"\n        d=\"M424.34 488.47a96.11 96.11 0 01-75.51-155.67 96.13 96.13 0 10135 135 95.66 95.66 0 01-59.47 20.69\"\n      ></path>\n      <path fill=\"#fff\" d=\"M119.73 440.37h32.06v-64.13h-32.06a16 16 0 00-16 16v64.16a16 16 0 0116-16\"></path>\n      <path fill=\"#f8ebcc\" d=\"M87.66 440.37H55.6v-64.13h32.06a16 16 0 0116 16v64.16a16 16 0 00-16-16\"></path>\n      <path\n        fill=\"#ff5f7a\"\n        d=\"M87.68 105.26a25 25 0 0124.58-25.45c-7.22-.29-15.14-.07-23.24-.08a25.07 25.07 0 00-25.39 25.53c.46 21.78 10.43 46.53 32.05 46.53a30.43 30.43 0 004.91-.42 19 19 0 016.21 0 30.43 30.43 0 004.91.42 26.21 26.21 0 004-.3c-18.85-2.85-27.62-25.84-28-46.23\"\n      ></path>\n      <path d=\"M103.69 207.39A103.7 103.7 0 00187.92 43.2a7.5 7.5 0 10-12.17 8.8 88.7 88.7 0 11-23-22.18A7.5 7.5 0 00161 17.29a103.7 103.7 0 10-57.35 190.1m.04 289.61a88.7 88.7 0 1188.7-88.69 88.8 88.8 0 01-88.7 88.69m0-192.39a103.7 103.7 0 10103.7 103.7 103.82 103.82 0 00-103.7-103.7M408.31 497A88.7 88.7 0 11497 408.31 88.8 88.8 0 01408.31 497m0-192.39A103.7 103.7 0 10512 408.31a103.82 103.82 0 00-103.69-103.7M256 167.31a16.55 16.55 0 11-16.55 16.54A16.57 16.57 0 01256 167.31m0 48.09a31.55 31.55 0 10-31.55-31.55A31.58 31.58 0 00256 215.4M184.37 264v40.1a7.5 7.5 0 0015 0V264a24.6 24.6 0 0124.57-24.57h64.12A24.6 24.6 0 01312.63 264v40.1a7.5 7.5 0 0015 0V264a39.61 39.61 0 00-39.57-39.57h-64.12A39.61 39.61 0 00184.37 264\"></path>\n      <path d=\"M223.94 264.53a7.5 7.5 0 00-7.5 7.5v48.1a7.5 7.5 0 0015 0V272a7.5 7.5 0 00-7.5-7.5m64.12.03a7.5 7.5 0 00-7.5 7.5v48.1a7.5 7.5 0 0015 0V272a7.5 7.5 0 00-7.5-7.5M408.31 15a88.7 88.7 0 11-88.7 88.69A88.8 88.8 0 01408.31 15m0 192.39a103.7 103.7 0 10-103.7-103.7 103.82 103.82 0 00103.7 103.7\"></path>\n      <path d=\"M376.24 125a8.53 8.53 0 11-8.53 8.53 8.54 8.54 0 018.53-8.53m64.13 9a8.54 8.54 0 118.53-8.53 8.54 8.54 0 01-8.53 8.53m-64.13 23a23.55 23.55 0 0023.53-23.53V81.9a8.52 8.52 0 016.47-8.28l42-10.5a.5.5 0 01.64.5v39.95a23.53 23.53 0 1015 21.93V63.62a15.52 15.52 0 00-19.28-15.06l-42 10.51a23.49 23.49 0 00-17.83 22.83v29.69a23.23 23.23 0 00-8.53-1.61 23.53 23.53 0 000 47.06m80.68 275.31a.52.52 0 01-.52.52h-16a.52.52 0 01-.52-.52v-48.09a.52.52 0 01.52-.52h16a.52.52 0 01.52.52zm-65.16-32.58h33.09v17.07h-33.09zm-15 32.58a.52.52 0 01-.52.52h-16a.52.52 0 01-.52-.52v-48.09a.52.52 0 01.52-.52h16a.52.52 0 01.52.52zm79.64-63.61h-16a15.53 15.53 0 00-15.52 15.52v.51h-33.12v-.51a15.53 15.53 0 00-15.52-15.52h-16a15.53 15.53 0 00-15.52 15.52v48.09a15.53 15.53 0 0015.52 15.52h16a15.53 15.53 0 0015.52-15.52v-.51h33.09v.51a15.53 15.53 0 0015.52 15.52h16a15.53 15.53 0 0015.52-15.52v-48.09a15.53 15.53 0 00-15.52-15.52M118.46 61.89a16.21 16.21 0 0111.89-2.49 16.29 16.29 0 01-18.75 12.5 16.15 16.15 0 016.86-10m-6.75 82.4a23.11 23.11 0 01-3.71-.3 26.22 26.22 0 00-8.66 0 22.9 22.9 0 01-3.68.32c-17.41 0-24.22-23.43-24.55-39.18a17.22 17.22 0 014.93-12.52A18 18 0 0189 87.23h7.77c15.51-.13 30.16-.27 36 5.56 2.33 2.3 3.45 5.88 3.45 10.94 0 29.79-14.69 40.6-24.56 40.6M89 72.23a32.82 32.82 0 00-23.65 9.86 32.13 32.13 0 00-9.22 23.33c.28 13.11 3.52 25.57 9.13 35.08 7.14 12.12 17.94 18.79 30.42 18.79a38.34 38.34 0 006.13-.52 11.3 11.3 0 013.76 0 38.46 38.46 0 006.14.52c26 0 39.56-28 39.56-55.6 0-9.14-2.65-16.41-7.89-21.6a26.92 26.92 0 00-6.38-4.62 31.7 31.7 0 008.65-23.76 7.49 7.49 0 00-4.18-6.28 31.62 31.62 0 00-31.37 2 30.78 30.78 0 00-6.62 6l-.73-2.17A7.5 7.5 0 1088.56 58l4.75 14.24H89m55.29 360.63h-24.56a23.53 23.53 0 00-8.54 1.6v-42.2a8.55 8.55 0 018.54-8.53h24.56zm-56.63 0H63.1v-49.13h24.56a8.54 8.54 0 018.53 8.53v42.2a23.43 23.43 0 00-8.53-1.6m64.13-64.13h-32.06a23.46 23.46 0 00-16 6.33 23.43 23.43 0 00-16-6.33H55.6a7.5 7.5 0 00-7.5 7.5v64.13a7.5 7.5 0 007.5 7.5h32.06a8.54 8.54 0 018.53 8.53 7.5 7.5 0 0015 0 8.55 8.55 0 018.54-8.53h32.06a7.5 7.5 0 007.5-7.5v-64.13a7.5 7.5 0 00-7.5-7.5\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  CrownFilled.displayName = 'CrownFilled';\n}\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);","// This icon file is generated automatically.\nvar MessageFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M924.3 338.4a447.57 447.57 0 00-96.1-143.3 443.09 443.09 0 00-143-96.3A443.91 443.91 0 00512 64h-2c-60.5.3-119 12.3-174.1 35.9a444.08 444.08 0 00-141.7 96.5 445 445 0 00-95 142.8A449.89 449.89 0 0065 514.1c.3 69.4 16.9 138.3 47.9 199.9v152c0 25.4 20.6 46 45.9 46h151.8a447.72 447.72 0 00199.5 48h2.1c59.8 0 117.7-11.6 172.3-34.3A443.2 443.2 0 00827 830.5c41.2-40.9 73.6-88.7 96.3-142 23.5-55.2 35.5-113.9 35.8-174.5.2-60.9-11.6-120-34.8-175.6zM312.4 560c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.4 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48z\" } }] }, \"name\": \"message\", \"theme\": \"filled\" };\nexport default MessageFilled;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport MessageFilledSvg from \"@ant-design/icons-svg/es/asn/MessageFilled\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar MessageFilled = function MessageFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: MessageFilledSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  MessageFilled.displayName = 'MessageFilled';\n}\nexport default /*#__PURE__*/React.forwardRef(MessageFilled);","// This icon file is generated automatically.\nvar PictureOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z\" } }] }, \"name\": \"picture\", \"theme\": \"outlined\" };\nexport default PictureOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport PictureOutlinedSvg from \"@ant-design/icons-svg/es/asn/PictureOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar PictureOutlined = function PictureOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: PictureOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  PictureOutlined.displayName = 'PictureOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(PictureOutlined);","// This icon file is generated automatically.\nvar StepBackwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 000 33.9M330 864h-64a8 8 0 01-8-8V168a8 8 0 018-8h64a8 8 0 018 8v688a8 8 0 01-8 8\" } }] }, \"name\": \"step-backward\", \"theme\": \"outlined\" };\nexport default StepBackwardOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport StepBackwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepBackwardOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar StepBackwardOutlined = function StepBackwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: StepBackwardOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  StepBackwardOutlined.displayName = 'StepBackwardOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(StepBackwardOutlined);","// This icon file is generated automatically.\nvar StepForwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 010 33.9M694 864h64a8 8 0 008-8V168a8 8 0 00-8-8h-64a8 8 0 00-8 8v688a8 8 0 008 8\" } }] }, \"name\": \"step-forward\", \"theme\": \"outlined\" };\nexport default StepForwardOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport StepForwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepForwardOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar StepForwardOutlined = function StepForwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: StepForwardOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  StepForwardOutlined.displayName = 'StepForwardOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(StepForwardOutlined);","// This icon file is generated automatically.\nvar TrophyOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 00-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 00-44-44zM184 352V232h64v207.6a91.99 91.99 0 01-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z\" } }] }, \"name\": \"trophy\", \"theme\": \"outlined\" };\nexport default TrophyOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport TrophyOutlinedSvg from \"@ant-design/icons-svg/es/asn/TrophyOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar TrophyOutlined = function TrophyOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: TrophyOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  TrophyOutlined.displayName = 'TrophyOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(TrophyOutlined);"],"names":["CharacterCard","size","overlayColor","character","className","hideName","dualTranslate","useLanguage","shouldBeBlurred","useBlurCards","baseUrl","useTDBaseUrl","isBlurred","id","imageURL","replace","ImageBlurButtonContainer","cardId","clsx","style","width","name","src","PUBLIC_URL","alt","fallback","preview","title","ImageBlurButton","blurCard","isBlurEnabled","placement","pt","en","ghost","onClick","EyeOutlined","EyeInvisibleOutlined","children","rest","unknownText","Achievements","players","achievements","reference","getAnimationClass","level","map","achievement","index","type","icon","achievementObj","player","playerId","delay","length","avatarId","Boolean","description","content","value","shape","CardHighlight","iconSize","mockSelectCharacters","characters","sampleSize","c","mockGlyphs","glyphs","positiveQuantity","sample","negativeQuantity","selected","slice","dict","forEach","key","StepSelectCharacters","user","announcement","onSelectCharacters","isLoading","useLoading","cardWidth","useCardWidth","gap","minWidth","maxWidth","useBooleanDictionary","selection","update","updateDict","count","selectedCharacters","keys","availableCharacters","useMock","fullWidth","contained","wrap","disabled","ready","active","PhaseCharacterFiltering","state","info","useUser","useStep","step","setStep","translate","request","useAPICall","apiFunction","QUEM_SOU_EU_API","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitCharactersAPIRequest","FilterIcon","currentRound","round","current","phase","allowedPhase","PHASES","Table","playerCharacterId","tableOrder","showAll","topKeys","Math","floor","bottomKeys","PositiveHighlight","MetricHighlight","YesIcon","NegativeHighlight","NoIcon","SELECTIONS_PLACEHOLDER","StepSelectGlyphs","onSelectGlyphs","roundType","glyphWidth","selectedWidth","positiveSelection","updatePositive","positiveSelections","negativeSelection","updateNegative","negativeSelections","entry","undefined","GlyphCard","height","trigger","glyphId","PopoverGlyph","disablePositive","disableNegative","prepareGlyphs","PhaseCharacterDescription","goToNextStep","useOnSubmitGlyphsAPIRequest","PlayerIconsIcon","onPressButton","buttonText","time","circleColor","appearance","color","ScoringRules","PointsHighlight","StepGuessing","onSubmitGuesses","characterWidth","useVotingMatch","Object","votes","setVotes","activateItem","isVotingComplete","isItemActive","useState","choseRandomly","setChoseRandomly","onGuessForMe","usedPlayers","usedCharacters","values","playerKeys","getEntryId","filter","includes","characterKeys","shuffle","newVotes","playerKey","selectOwnCard","useCallback","guesses","prepareGuesses","useEffectOnce","s","ribbons","getRibbons","entryId","labels","sortPlayers","PlayerGlyphs","done","PhaseGuessing","useOnSubmitGuessesAPIRequest","EvaluateIcon","GalleryGuesses","playersSay","playersPoints","currentColor","currentPlayer","entries","orderBy","playersIds","isCorrect","correctGuesses","direction","backgroundColor","CrownFilled","MessageFilled","getPlayersFromIds","join","quantity","keyPrefix","GarbageIcon","StepGallery","gallery","activeIndex","setActiveIndex","isFirstGalleryRunThrough","useTemporarilyHidePlayersBar","characterId","getAvatarColorById","disableControls","barColor","windowDuration","leftClassName","rightClassName","StepRanking","ranking","goToPreviousStep","gainedPointsDescriptions","PictureOutlined","PhaseResults","useSlideShow","MirrorIcon","onClose","unskippable","FinalCharacter","useMemo","parseSelectedGlyphs","positive","negative","withName","meta","announcementIcon","TrophyIcon","achievementsReference","language","getActiveComponent","LoadingPage","PhaseLobby","PhaseRules","PhaseSetup","PhaseGameOver","PageError","theme","token","colorPrimary","THEME_COLORS","colorLink","gameCollection","GAME_COLLECTION","selectedGlyphs","ACHIEVEMENTS","push","votesDict","playerEntry","split","SEPARATOR","result","initialState","validation","setDict","isValid","dictCopy","reset","props","xmlns","viewBox","fill","d","ref","React","AntdIcon","_extends","CrownFilledSvg","MessageFilledSvg","PictureOutlinedSvg","StepBackwardOutlined","StepBackwardOutlinedSvg","StepForwardOutlined","StepForwardOutlinedSvg","TrophyOutlined","TrophyOutlinedSvg"],"sourceRoot":""}