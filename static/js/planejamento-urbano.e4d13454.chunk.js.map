{"version":3,"file":"static/js/planejamento-urbano.e4d13454.chunk.js","mappings":"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","sources":["components/general/FloatingHand.tsx","components/layout/Container.tsx","components/metrics/PointsHighlight.tsx","assets/images/round-title-en.svg","assets/images/round-title-pt.svg","components/round/RoundAnnouncement.tsx","components/slide-show/SlideShowControls.tsx","components/slide-show/SlideShow.tsx","components/slide-show/SlideShowComposableComponents.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/planejamento-urbano/utils/constants.ts","games/planejamento-urbano/components/RulesBlobs.tsx","games/planejamento-urbano/utils/helpers.ts","games/planejamento-urbano/utils/mocks.ts","components/toolKits/GridMap/GridMap.tsx","components/toolKits/GridMap/grid-map.ts","games/planejamento-urbano/utils/custom-hooks.ts","games/planejamento-urbano/components/LocationCard.tsx","games/planejamento-urbano/components/MapSlot.tsx","games/planejamento-urbano/components/CityMap.tsx","games/planejamento-urbano/components/Highlights.tsx","games/planejamento-urbano/StepPlanLocations.tsx","games/planejamento-urbano/StepWaitForPlanning.tsx","games/planejamento-urbano/PhasePlanning.tsx","games/planejamento-urbano/utils/api-requests.ts","games/planejamento-urbano/StepPlaceLocations.tsx","games/planejamento-urbano/PhasePlacing.tsx","games/planejamento-urbano/components/CityMapSnippet.tsx","games/planejamento-urbano/StepGallery.tsx","games/planejamento-urbano/StepResults.tsx","games/planejamento-urbano/PhaseResolution.tsx","games/planejamento-urbano/PhaseGameOver.tsx","games/planejamento-urbano/SessionPlanejamentoUrbano.tsx","hooks/useSlideShow.ts","hooks/useWhichPlayerIsThe.ts","icons/GarbageIcon.tsx","icons/HandOfCardsIcon.tsx","icons/SealOfApprovalIcon.tsx","icons/StarIcon.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport { type ReactNode, useState } from 'react';\nimport { useMeasure, useToggle } from 'react-use';\n// Ant Design Resources\nimport { Drawer } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Icons\nimport { HandOfCardsIcon } from 'icons/HandOfCardsIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n// Sass\nimport './FloatingHand.scss';\n\ntype FloatingHandProps = {\n  /**\n   * The content of the floating hand\n   */\n  children: ReactNode;\n  /**\n   * The title of the floating hand\n   */\n  title?: ReactNode;\n  /**\n   * The icon (default: Hand of Cards)\n   */\n  icon?: ReactNode;\n};\n\nexport function FloatingHand({ children, icon, title }: FloatingHandProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { translate } = useLanguage();\n\n  return (\n    <>\n      <div className=\"floating-hand-added-white-space\"></div>\n      <div\n        className={clsx('floating-hand', isExpanded && 'floating-hand--expanded')}\n        onMouseOver={() => setIsExpanded(true)}\n        onMouseLeave={() => setIsExpanded(false)}\n        onFocus={() => setIsExpanded(true)}\n        onBlur={() => setIsExpanded(false)}\n      >\n        <h3 className=\"floating-hand__label\">\n          <IconAvatar\n            icon={icon ?? <HandOfCardsIcon />}\n            size={isExpanded ? 30 : 40}\n            className=\"floating-hand__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <span className=\"floating-hand__label-text\">\n            {title ?? <Translate pt=\"Suas Cartas\" en=\"Your Cards\" />}\n            <span className=\"floating-hand__label-text-hint\">\n              (<Translate pt=\"Passe o mouse para expandir\" en=\"Hover to expand\" />)\n            </span>\n          </span>\n        </h3>\n        <div className=\"floating-hand__children\">{children}</div>\n      </div>\n    </>\n  );\n}\n\nexport function FloatingHandDrawer({ children, icon, title }: FloatingHandProps) {\n  const [open, toggleDrawer] = useToggle(false);\n  const { translate } = useLanguage();\n  const [ref, { height }] = useMeasure<HTMLDivElement>();\n\n  return (\n    <>\n      <div className=\"floating-hand-drawer__white-space\" />\n      <button\n        type=\"button\"\n        className=\"floating-hand-drawer__button\"\n        onClick={toggleDrawer}\n        onMouseOver={() => toggleDrawer(true)}\n        onFocus={() => toggleDrawer(true)}\n      >\n        <span className=\"floating-hand-drawer__label\">\n          <IconAvatar\n            icon={icon ?? <HandOfCardsIcon />}\n            className=\"floating-hand-drawer__icon\"\n            alt={translate('Mão de Cartas', 'Hand of Cards')}\n          />\n          <span className=\"floating-hand-drawer__label-text\">\n            {title ?? <Translate pt=\"Suas Cartas\" en=\"Your Cards\" />}\n            <span className=\"floating-hand-drawer__label-text-hint\">\n              (<Translate pt=\"Passe o mouse para expandir\" en=\"Hover to expand\" />)\n            </span>\n          </span>\n        </span>\n      </button>\n      <Drawer\n        title={\n          <span\n            className=\"floating-hand-drawer__label floating-hand-drawer__label-open\"\n            onClick={() => toggleDrawer(false)}\n            onKeyDown={(e) => e.key === 'Enter' && toggleDrawer(false)}\n          >\n            <IconAvatar\n              icon={icon ?? <HandOfCardsIcon />}\n              className=\"floating-hand-drawer__icon\"\n              alt={translate('Mão de Cartas', 'Hand of Cards')}\n            />\n            <span className=\"floating-hand-drawer__label-text\">\n              {title ?? <Translate pt=\"Suas Cartas\" en=\"Your Cards\" />}\n              <span className=\"floating-hand-drawer__label-text-hint\">\n                (<Translate pt=\"Clique aqui para fechar\" en=\"Click here to close\" />)\n              </span>\n            </span>\n          </span>\n        }\n        placement=\"bottom\"\n        onClose={toggleDrawer}\n        open={open}\n        mask={false}\n        height={Math.max(378, height)}\n      >\n        <div ref={ref}>{children}</div>\n      </Drawer>\n    </>\n  );\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n// Ant Design Resources\nimport { Space, type SpaceProps } from 'antd';\n// Components\nimport { Title, type TitleProps } from 'components/text';\n// Sass\nimport './Container.scss';\n\ntype ContainerProps = {\n  title: ReactNode;\n  children: ReactNode;\n  contained?: boolean;\n  className?: string;\n  titleProps?: Omit<TitleProps, 'children'>;\n  contentProps?: SpaceProps;\n} & Omit<SpaceProps, 'title' | 'children'>;\n\n/**\n * Container component with title and center aligned children\n */\nexport function Container({\n  title,\n  children,\n  className,\n  contained,\n  titleProps,\n  contentProps,\n  ...spaceProps\n}: ContainerProps) {\n  const { level = 4, size = 'xx-small', ...restTitleProps } = titleProps ?? {};\n\n  const {\n    className: childrenClassName,\n    wrap = true,\n    direction: childrenDirection = 'horizontal',\n    ...restChildrenContainerProps\n  } = contentProps ?? {};\n\n  return (\n    <Space direction=\"vertical\" className={clsx('container-wrapper', className)} {...spaceProps}>\n      <Title level={level} size={size} {...restTitleProps}>\n        {title}\n      </Title>\n\n      <Space\n        direction={childrenDirection}\n        wrap={wrap}\n        className={clsx(\n          'container-wrapper__children',\n          contained && 'container-wrapper__children--contained',\n          childrenClassName,\n        )}\n        {...restChildrenContainerProps}\n      >\n        {children}\n      </Space>\n    </Space>\n  );\n}\n","// Icons\nimport { StarIcon } from 'icons/StarIcon';\n// Components\nimport { type HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","var _style, _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRoundTitleEn(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 130 50\",\n    style: {\n      enableBackground: \"new 0 0 130 50\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#9EC5E7;}\\n\\t.st1{fill:#FFFFFF;}\\n\\t.st2{fill:#3A7CA5;}\\n\\t.st3{fill:#44BBA4;}\\n\\t.st4{fill:#F2E863;}\\n\\t.st5{fill:#F45B69;}\\n\\t.st6{fill:#E6E6F5;}\\n\\t.st7{display:none;}\\n\\t.st8{display:inline;}\\n\\t.st9{display:inline;fill:none;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st10{fill:#DA70D6;}\\n\\t.st11{fill:#008080;}\\n\\t.st12{fill:#D2691E;}\\n\\t.st13{fill:#4682B4;}\\n\\t.st14{fill:#B22222;}\\n\\t.st15{fill:#DFB231;}\\n\\t.st16{fill:#FF6347;}\\n\\t.st17{fill:#9370DB;}\\n\\t.st18{fill:#3C58AC;}\\n\\t.st19{fill:#7CC44F;}\\n\\t.st20{fill:#040303;}\\n\\t.st21{fill:#FCBF00;}\\n\\t.st22{fill:#D70027;}\\n\\t.st23{fill:#EA384D;}\\n\\t.st24{fill:#BFB8B8;}\\n\\t.st25{fill:#F8EFEF;}\\n\\t.st26{fill:#FE2A25;}\\n\\t.st27{fill:#FE9A00;}\\n\\t.st28{fill:#FEE901;}\\n\\t.st29{fill:#FEF6A5;}\\n\\t.st30{fill:#FEF05C;}\\n\\t.st31{fill:#FEFDFD;}\\n\\t.st32{fill:url(#SVGID_1_);}\\n\\t.st33{fill:#D40000;}\\n\\t.st34{clip-path:url(#SVGID_3_);}\\n\\t.st35{fill:url(#SVGID_4_);}\\n\\t.st36{clip-path:url(#SVGID_6_);}\\n\\t.st37{fill:url(#SVGID_7_);}\\n\\t.st38{fill:#008C72;}\\n\\t.st39{clip-path:url(#SVGID_9_);}\\n\\t.st40{clip-path:url(#SVGID_11_);}\\n\\t.st41{clip-path:url(#SVGID_13_);}\\n\\t.st42{clip-path:url(#SVGID_15_);}\\n\\t.st43{clip-path:url(#SVGID_17_);}\\n\\t.st44{clip-path:url(#SVGID_19_);}\\n\\t.st45{fill:#575757;}\\n\\t.st46{clip-path:url(#SVGID_21_);}\\n\\t.st47{fill:url(#SVGID_22_);}\\n\\t.st48{fill:none;stroke:#FFFFFF;stroke-miterlimit:10;}\\n\\t.st49{display:inline;fill:#5C3400;}\\n\\t.st50{fill:none;}\\n\\t.st51{fill:#5C3400;}\\n\\t.st52{display:inline;fill:none;}\\n\\t.st53{display:inline;fill:#FFFFFF;}\\n\\t.st54{display:none;fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st55{display:inline;fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st56{display:none;fill:#F2F25F;}\\n\\t.st57{display:inline;fill:#F2F2F2;}\\n\\t.st58{display:inline;fill:#E6E6E6;}\\n\\t.st59{display:inline;fill:#808080;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st60{fill:#808080;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st61{display:inline;fill:#808080;}\\n\\t.st62{fill:#29E257;}\\n\\t.st63{fill:#E2DC29;}\\n\\t.st64{fill:#29ABE2;}\\n\\t.st65{fill:#E22929;}\\n\\t.st66{fill:#E6E6E6;}\\n\\t.st67{fill:#F2F2F2;}\\n\\t.st68{fill:#F9C303;}\\n\\t.st69{fill:#3A3939;}\\n\\t.st70{fill:#FF0000;}\\n\\t.st71{fill:#FEFEFD;}\\n\\t.st72{fill:#181D44;}\\n\\t.st73{fill:#F7931E;}\\n\\t.st74{fill:#A45467;}\\n\\t.st75{fill:#C33F48;}\\n\\t.st76{fill:#866A86;}\\n\\t.st77{fill:#6780A4;}\\n\\t.st78{fill:#4895C3;}\\n\\t.st79{fill:#4D4D4D;}\\n\\t.st80{opacity:0.2;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M31.6,8.3c3.6,1.3,5.1,4.6,5.1,8.1c0,5.5-3.8,11.9-9.9,13.3c2.8,2.9,6,8.6,8.4,8.6c0.6,0,1.2-0.4,1.7-1.3 c0.2-0.4,0.5-0.5,0.8-0.5c0.5,0,1.1,0.4,1.1,1.1c0,0.1-0.1,0.4-0.1,0.5c-1,1.8-2.6,2.7-4.3,2.7c-1.5,0-3-0.6-4.2-1.7 c-3-2.7-4.4-5.6-4.6-5.6c-0.1,0-0.1,0.1-0.1,0.1c0,0.6,0.5,2.7,1.3,7.4c0,0.2,0.1,0.4,0.1,0.6c0,1.5-1.1,2.7-2.8,2.7 c-0.2,0-0.4,0-0.7-0.1c-2-0.3-4.5-8.1-4.5-17.6c0-4.2,0.5-8.8,1.8-13.2c0.4-1.5,1.5-2.1,2.6-2.1c1.5,0,3.2,1.2,3.2,3.1 c0,0.1,0,0.4-0.1,0.6c-0.6,3.3-1.1,6.5-1.3,9.7c4.1-2.5,5.7-5.5,5.7-8.1c0-3.5-2.8-6.4-5.6-6.5h-0.3c-4.4,0-9.1,4.4-9.1,9 c0,0.9,0.2,1.8,0.6,2.7c0.1,0.1,0.1,0.3,0.1,0.4c0,0.6-0.4,1.1-0.9,1.1c-0.1,0-0.4-0.1-0.5-0.1c-1.5-0.7-2.1-2-2.1-3.7 c0-4.8,5.5-12.1,13.5-12.1C28,7.3,29.8,7.6,31.6,8.3z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M49,22.7c1.8,2.4,2.6,5.3,2.6,7.9c0,5.5-3.1,10.4-6.9,10.5h-0.1c-4.6,0-6.7-4.3-6.7-8.8 c0-3.3,1.1-6.8,3.2-8.9c-0.6,0-0.8-0.3-0.8-0.7c0-1,1.8-2.7,4.1-2.7C45.8,19.9,47.5,20.6,49,22.7z M42.1,22.6 c0.9-0.6,1.7-0.8,2.4-0.8c1.5,0,2.5,1.3,2.5,2.5c0,0.2,0,0.4-0.1,0.6c-0.6,2.5-2.7,4.1-2.9,6.8c0,0.3-0.1,0.7-0.1,1.1 c0,0.8,0.1,1.5,0.5,2c0.3,0.4,0.7,0.4,1.2,0.4c0.6,0,1.3-0.2,1.8-0.5c1.7-1,2.5-3.2,2.5-5.6c0-3.4-1.5-7-4.3-7.7 c-0.3-0.1-0.6-0.1-0.8-0.1C43.6,21.2,42.6,21.7,42.1,22.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M59.9,23.2v0.4c-0.3,2.1-1.2,6.3-1.2,9.4c0,1.8,0.3,3.2,1.1,3.7c0.1,0.1,0.3,0.1,0.4,0.1 c1.3,0,2.9-4.1,4.1-7.9c0.1-6,2-7.9,3.6-7.9c1.4,0,2.7,1.3,2.9,2.7c0,0.4,0.1,0.6,0.1,0.9c0,1.6-0.4,2.8-0.4,5.5 c0,1.2,0.1,2.8,0.4,4.8v0.8c0,0.7,0.1,1.3,0.8,1.3c0.1,0,0.2-0.1,0.4-0.1c1.9-0.4,3.6-6.5,4-8.3c0.1-0.2,0.2-0.4,0.4-0.4 s0.4,0.2,0.4,0.4v0.1c-0.8,3.5-2.3,11.2-7,11.2c-0.4,0-0.8-0.1-1.3-0.2c-3.1-0.8-3.7-3.9-3.9-6.7c-2,5.7-4.6,8.1-6.8,8.1 c-2.7,0-4.9-3.6-4.9-9.4c0-2.6,0.4-5.6,1.5-9c0.4-1.3,1.8-2,2.9-2C58.6,20.8,59.9,21.6,59.9,23.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M80.6,20.6c0.1,0.5,0.1,0.9,0.1,1.4c0,2.5-1,4.9-1,7.7v0.8c1.7-5.3,4.1-11.4,7.6-11.4c0.6,0,1.4,0.2,2.2,0.7 c2.3,1.5,3,5.2,3,8.8c0,4.6-1.1,9-1.1,9c0.1,0,3.7-4.8,4.8-8.5c0.1-0.3,0.3-0.4,0.6-0.4c0.3,0,0.6,0.2,0.6,0.6v0.1 c-0.6,2.8-3.1,9.1-5.5,10.2c-0.4,0.1-0.7,0.2-1.1,0.2c-2.6,0-4.2-3.9-4.5-5.9c-0.1-0.5-0.1-1.1-0.1-1.7c0-1.2,0.1-2.5,0.1-3.8 c0-1.9-0.1-3.7-0.7-5c-0.1-0.1-0.1-0.2-0.2-0.2c-1.1,0-4.3,7.9-4.8,15.6c-0.1,1.2-0.8,2-1.8,2c-1.9,0-4.7-2.9-5.1-10.2 c-0.1-0.8-0.1-1.5-0.1-2.2c0-7.2,2.6-9.5,4.6-9.6C79.4,18.8,80.4,19.6,80.6,20.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M111.3,5.7c1.4,0,2.9,1,2.9,2.5v0.2c-0.5,5-2.4,9.1-3.6,20.6c-0.2,1.9-0.3,3.4-0.3,4.6c0,2.5,0.4,3.5,1,3.5 c1.1,0,3-3.6,4.5-8.5c0.1-0.4,0.4-0.5,0.7-0.5c0.4,0,0.7,0.2,0.7,0.6c0,0.1-0.1,0.1-0.1,0.2c-0.9,3.4-2.2,8.1-4.7,10.7 c-0.8,0.8-1.6,1.2-2.5,1.2c-2.6,0-5.1-3.6-5.5-7.3c-2,5.1-4.1,7.1-5.8,7.1c-2.4,0-4.1-4.1-4.1-8.6c0-4.7,1.8-9.8,6.5-11.2 c0.4-0.1,0.7-0.1,1-0.1c1.8,0,3.2,1.2,3.4,1.2h0.1c0.8-4.9,1.4-10.3,3.4-14.9c0.4-0.9,1.3-1.3,2.2-1.3H111.3z M99.7,35.1v0.5 c0,0.2-0.1,0.4-0.1,0.6c0,0.4,0.1,0.7,0.4,0.7c1,0,3.9-4.8,4.9-11.1c-0.4-0.4-0.7-0.6-1.1-0.6C101.8,25.2,99.7,31.3,99.7,35.1z\"\n  })))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"avatars\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Time_Bomb\"\n  })), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_4\"\n  })), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_8\"\n  })), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_6\"\n  })), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"dial_svg\"\n  })), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Sheeps\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRoundTitleEn);\nexport default __webpack_public_path__ + \"static/media/round-title-en.2ad07e1f265a85634ad7940a33f96552.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _g, _g2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRoundTitlePt(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 130 50\",\n    style: {\n      enableBackground: \"new 0 0 130 50\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#3E1E68;}\\n\\t.st1{fill:#9EC5E7;}\\n\\t.st2{display:none;}\\n\\t.st3{display:inline;fill:#9EC5E7;}\\n\\t.st4{fill:#3A7CA5;}\\n\\t.st5{fill:#44BBA4;}\\n\\t.st6{fill:#F2E863;}\\n\\t.st7{fill:#F45B69;}\\n\\t.st8{fill:#FFFFFF;}\\n\\t.st9{opacity:0.9;fill:#FFFFFF;}\\n\\t.st10{stroke:#000000;stroke-width:8;stroke-miterlimit:10;}\\n\\t.st11{fill:#E6E6F5;}\\n\\t.st12{fill:#DA70D6;}\\n\\t.st13{fill:#008080;}\\n\\t.st14{fill:#D2691E;}\\n\\t.st15{fill:#556B2F;}\\n\\t.st16{fill:#7CC44F;}\\n\\t.st17{fill:#2F4F4F;}\\n\\t.st18{fill:#FF6347;}\\n\\t.st19{fill:#4682B4;}\\n\\t.st20{fill:#D2A467;}\\n\\t.st21{fill:#7FB5C7;}\\n\\t.st22{fill:#B22222;}\\n\\t.st23{fill:#9370DB;}\\n\\t.st24{fill:#778899;}\\n\\t.st25{fill:#663399;}\\n\\t.st26{fill:#696969;}\\n\\t.st27{fill:#20212E;}\\n\\t.st28{fill:#9884B4;}\\n\\t.st29{fill:#DFB231;}\\n\\t.st30{fill:#875131;}\\n\\t.st31{fill:#DB8A34;}\\n\\t.st32{fill:#EB3465;}\\n\\t.st33{fill:#2B1752;}\\n\\t.st34{fill:#3C58AC;}\\n\\t.st35{fill:#BDB74C;}\\n\\t.st36{fill:#C7A4B3;}\\n\\t.st37{display:inline;}\\n\\t.st38{display:inline;fill:none;stroke:#000000;stroke-miterlimit:10;}\\n\\t.st39{fill:#939598;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M27.8,37.4c-0.4,0-0.6,0.1-0.8,0.5c-0.5,0.9-1.1,1.3-1.7,1.3c-2.5,0-5.6-5.8-8.4-8.6 c6.1-1.4,9.9-7.7,9.9-13.3c0-3.6-1.5-6.8-5.1-8.1c-1.8-0.7-3.6-1.1-5.3-1.1c-8,0.1-13.5,7.3-13.5,12.1c0,1.7,0.6,3,2.1,3.7 c0.1,0.1,0.4,0.1,0.5,0.1c0.5,0,0.9-0.5,0.9-1.1c0-0.1,0-0.3-0.1-0.4c-0.4-0.8-0.6-1.8-0.6-2.7c0-4.6,4.7-9,9.1-9h0.3 c2.8,0.1,5.6,2.9,5.6,6.5c0,2.6-1.5,5.6-5.7,8.1c0.2-3.2,0.7-6.4,1.3-9.7c0.1-0.2,0.1-0.4,0.1-0.6c0-1.9-1.6-3.1-3.2-3.1 c-1.1,0-2.2,0.6-2.6,2.1c-1.3,4.4-1.8,9-1.8,13.2c0,9.5,2.5,17.3,4.5,17.6c0.3,0.1,0.5,0.1,0.7,0.1c1.8,0,2.8-1.2,2.8-2.7 c0-0.2-0.1-0.4-0.1-0.6c-0.8-4.8-1.3-6.9-1.3-7.4c0-0.1,0-0.1,0.1-0.1c0.2,0,1.6,2.9,4.6,5.6c1.2,1.1,2.7,1.7,4.2,1.7 c1.8,0,3.4-0.8,4.4-2.7c0.1-0.1,0.1-0.4,0.1-0.5C29,37.9,28.3,37.4,27.8,37.4z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M34.4,20.8c-2.3,0-4.1,1.8-4.1,2.7c0,0.4,0.2,0.7,0.8,0.7c-2.1,2.1-3.2,5.6-3.2,8.9c0,4.6,2.1,8.8,6.7,8.8 h0.1c3.9-0.1,6.9-5.1,6.9-10.5c0-2.7-0.8-5.5-2.6-7.9C37.5,21.5,35.8,20.8,34.4,20.8z M37.3,35.6c-0.4,0.3-1.1,0.5-1.8,0.5 c-0.5,0-0.9-0.1-1.2-0.4c-0.4-0.4-0.5-1.2-0.5-2c0-0.4,0.1-0.8,0.1-1.1c0.3-2.7,2.3-4.3,2.9-6.8c0.1-0.2,0.1-0.4,0.1-0.6 c0-1.2-0.9-2.5-2.5-2.5c-0.7,0-1.5,0.2-2.4,0.8c0.5-0.9,1.5-1.3,2.5-1.3c0.3,0,0.6,0.1,0.8,0.1c2.7,0.7,4.3,4.4,4.3,7.7 C39.8,32.4,39,34.6,37.3,35.6z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M124.8,29.5c-0.3,0-0.5,0.1-0.6,0.4c-0.8,4.2-3.4,7.4-4.1,7.4h-0.1v-0.1c0-0.2-0.3-1.3-0.4-1.6 c-0.1-0.7-0.2-1.4-0.2-2.1c0-2.8,1.1-5.7,1.8-8.3c0.1-0.2,0.1-0.4,0.1-0.6c0-1.5-1.4-2.9-2.9-2.9c-1.1,0-2.2,0.6-3,2.5 c-0.7-1.8-3.4-3-5.3-3h-0.6c-4.9,0.6-7.4,8.4-7.4,12.6c0,0,0,0.1,0,0.1c-1.1,2.6-2.2,4.2-2.9,4.2c-0.6,0-1-1.1-1-3.5 c0-1.2,0.1-2.7,0.3-4.6c1.2-11.5,3.1-15.6,3.6-20.6V9.1c0-1.5-1.5-2.5-2.9-2.5h-0.1c-0.9,0-1.8,0.4-2.2,1.3c-2,4.6-2.6,10-3.4,15 h-0.1c-0.2,0-1.6-1.2-3.4-1.2c-0.3,0-0.6,0.1-1,0.1c-4.7,1.3-6.5,6.5-6.5,11.2c0,0.5,0,1,0.1,1.5c-1,1.8-2,2.9-2.5,2.9h-0.1v-0.1 c0-0.2-0.3-1.3-0.4-1.6c-0.1-0.7-0.2-1.4-0.2-2.1c0-2.8,1.1-5.7,1.8-8.3c0.1-0.2,0.1-0.4,0.1-0.6c0-1.5-1.4-2.9-2.9-2.9 c-1.1,0-2.2,0.6-3,2.5c-0.7-1.8-3.4-3-5.3-3h-0.6c-4.9,0.6-7.4,8.4-7.4,12.6c0,0,0,0.1,0,0.1c-1.1,2.6-2.2,4.2-2.9,4.2 c-0.6,0-1-1.1-1-3.5c0-1.2,0.1-2.7,0.3-4.6c1.2-11.5,3.1-15.6,3.6-20.6V9.1c0-1.5-1.5-2.5-2.9-2.5h-0.1c-0.9,0-1.8,0.4-2.2,1.3 c-2,4.6-2.6,10-3.4,15h-0.1c-0.2,0-1.6-1.2-3.4-1.2c-0.3,0-0.6,0.1-1,0.1c-4.7,1.3-6.5,6.5-6.5,11.2c0,4.5,1.7,8.6,4.1,8.6 c1.7,0,3.7-2,5.8-7.1c0.4,3.7,2.9,7.3,5.5,7.3c0.8,0,1.7-0.4,2.5-1.2c0.9-1,1.7-2.2,2.3-3.5c0.7,2.1,2.1,3.5,3.9,3.5 c2,0,4.4-1.8,6.6-6.1c0.1,2.8,1,5.1,3.4,6c0.6,0.2,1.2,0.3,1.7,0.3c2.1,0,3.5-1.6,4.6-3.6c0.7,2.6,2,4.4,3.6,4.4 c1.7,0,3.7-2,5.8-7.1c0.4,3.7,2.9,7.3,5.5,7.3c0.8,0,1.7-0.4,2.5-1.2c0.9-1,1.7-2.2,2.3-3.5c0.7,2.1,2.1,3.5,3.9,3.5 c2,0,4.4-1.8,6.6-6.1c0.1,2.8,1,5.1,3.4,6c0.6,0.2,1.2,0.3,1.7,0.3c4.5,0,5.9-7,6.9-10.4c0-0.1,0.1-0.1,0.1-0.2 C125.5,29.7,125,29.5,124.8,29.5z M48.2,37.8c-0.2,0-0.4-0.3-0.4-0.7c0-0.2,0.1-0.4,0.1-0.6V36c0-3.9,2.1-9.9,4.1-9.9 c0.4,0,0.7,0.1,1.1,0.6C52,32.9,49.2,37.8,48.2,37.8z M73.7,30.4c-1.1,2.4-3,5.5-4.3,5.5c-0.4,0-0.8-0.4-1-1.3 c-0.1-0.2-0.1-0.4-0.1-0.7c0-3.1,3-9.4,5.1-9.4c0.6,0,1.1,0.5,1.3,1.8C74.8,26.6,74.2,28,73.7,30.4z M88,37.8 c-0.2,0-0.4-0.3-0.4-0.7c0-0.2,0.1-0.4,0.1-0.6V36c0-3.9,2.1-9.9,4.1-9.9c0.4,0,0.7,0.1,1.1,0.6C91.9,32.9,89,37.8,88,37.8z  M113.6,30.4c-1.1,2.4-3,5.5-4.3,5.5c-0.4,0-0.8-0.4-1-1.3c-0.1-0.2-0.1-0.4-0.1-0.7c0-3.1,3-9.4,5.1-9.4c0.6,0,1.1,0.5,1.3,1.8 C114.6,26.6,114.1,28,113.6,30.4z\"\n  })))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"avatars\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRoundTitlePt);\nexport default __webpack_public_path__ + \"static/media/round-title-pt.2e3f9c1deb85d58d118aa6e3dfa7af23.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { TimedButton } from 'components/buttons';\nimport { Translate } from 'components/language';\nimport { useGameAppearance } from 'components/session/GameInfoContext';\n// Images\nimport roundTitleEn from 'assets/images/round-title-en.svg';\nimport roundTitlePt from 'assets/images/round-title-pt.svg';\n\ntype RoundAnnouncementProps = {\n  /**\n   * The round object\n   */\n  round: GameRound;\n  /**\n   * Function to be called when the continue button is pressed\n   */\n  onPressButton?: GenericFunction;\n  /**\n   * Text to be displayed on the continue button\n   */\n  buttonText?: string;\n  /**\n   * Time in seconds to automatically press the continue button\n   */\n  time: number;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Optional children\n   */\n  children?: ReactNode;\n  /**\n   * If the announcement is unskippable\n   */\n  unskippable?: boolean;\n};\n\nexport function RoundAnnouncement({\n  round,\n  onPressButton,\n  buttonText,\n  time = 0,\n  className,\n  children,\n  unskippable = false,\n}: RoundAnnouncementProps) {\n  const appearance = useGameAppearance();\n  const circleColor = appearance.primaryColor;\n  useTemporarilyHidePlayersBar();\n  const { translate } = useLanguage();\n\n  const circleStyle = circleColor ? { borderColor: circleColor } : {};\n\n  return (\n    <div className={clsx('round-announcement', className)}>\n      <div className=\"round-announcement__main\">\n        <div\n          className={clsx(\n            'round-announcement__title',\n            appearance.colorScheme === 'dark' && 'round-announcement__title--dark',\n          )}\n        >\n          <img src={translate(roundTitlePt, roundTitleEn)} alt={translate('Rodada', 'Round')} />\n        </div>\n        <div className={clsx('round-announcement__round-wrapper', getAnimationClass('zoomIn'))}>\n          <div className=\"round-announcement__circle\" style={circleStyle} />\n          <div className=\"round-announcement__circle-2\" style={circleStyle} />\n          <div\n            className={clsx(\n              'round-announcement__number',\n              appearance.colorScheme === 'dark' && 'round-announcement__number--dark',\n            )}\n          >\n            {round?.current ?? round ?? 0}\n          </div>\n        </div>\n\n        {children}\n\n        {Boolean(onPressButton) && !time && (\n          <Button type=\"primary\" onClick={onPressButton} className=\"round-announcement__go-button\">\n            {buttonText}\n          </Button>\n        )}\n\n        {Boolean(onPressButton) && Boolean(time) && (\n          <TimedButton\n            type=\"primary\"\n            onClick={onPressButton}\n            onExpire={onPressButton}\n            duration={time}\n            disabled={unskippable}\n          >\n            <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n          </TimedButton>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useMemo } from 'react';\n// Ant Design Resources\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  TrophyOutlined,\n} from '@ant-design/icons';\nimport { Button, type ButtonProps, Space } from 'antd';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport type { SlideShowConfig } from 'hooks/useSlideShow';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\n\ntype SlideShowControlsProps = {\n  /**\n   * Slide show configuration provided by useSlideShow\n   */\n  config: SlideShowConfig;\n  /**\n   * The color of the progress bar (default: gray)\n   */\n  barColor: string;\n  /**\n   * Prop indicating if the controls should be disabled\n   */\n  disableControls?: boolean;\n  /**\n   * Next Button props (See Ranking Button)\n   */\n  nextButtonProps?: ButtonProps;\n};\n\nexport function SlideShowControls({\n  config,\n  disableControls,\n  barColor = 'gray',\n  nextButtonProps,\n}: SlideShowControlsProps) {\n  const slideDuration = config.slideDuration ?? 10;\n  const totalDuration = slideDuration * config.length;\n  const { timeLeft, isRunning, pause, resume } = useCountdown({\n    duration: totalDuration,\n    autoStart: true,\n    onExpire: () => config.onExpire(),\n  });\n  const disableControlsFlag = disableControls ?? config.isFirstGalleryRunThrough;\n\n  // Automatically go to the next window every {windowDuration} seconds\n  // biome-ignore lint/correctness/useExhaustiveDependencies: isRunning shouldn't retrigger the effect\n  useEffect(() => {\n    const expectedSlideIndex = Math.max(\n      0,\n      Math.min(config.length - 1, Math.floor((totalDuration - timeLeft) / slideDuration)),\n    );\n    if (isRunning && timeLeft < totalDuration && timeLeft > 0 && expectedSlideIndex !== config.slideIndex) {\n      config.setSlideIndex(expectedSlideIndex);\n    }\n    return () => {};\n  }, [timeLeft, config, slideDuration, totalDuration]);\n\n  const goToPreviousSlide = () => {\n    pause();\n    config.setSlideIndex((s: number) => Math.max(s - 1, 0));\n  };\n\n  const goToNextSlide = () => {\n    pause();\n    config.setSlideIndex((s: number) => Math.min(s + 1, config.length - 1));\n  };\n\n  const slots = useMemo(() => {\n    return Array(config.length)\n      .fill('')\n      .map((e, i) => {\n        return (\n          <div\n            key={`control-timer-bar-${e + i}`}\n            className=\"slide-show__controls-timer-bar-node\"\n            style={{ width: `${99 / config.length}%` }}\n          >\n            {e}\n          </div>\n        );\n      });\n  }, [config.length]);\n\n  return (\n    <div className=\"slide-show__controls\">\n      <div className=\"slide-show__controls-timer-bar\">\n        <div className=\"slide-show__controls-timer-bar-base\">{slots}</div>\n        <span\n          className=\"slide-show__controls-timer-bar-pill\"\n          style={{\n            width: `${calculateProgress(totalDuration, timeLeft)}%`,\n            backgroundColor: barColor,\n          }}\n        ></span>\n      </div>\n\n      <Space style={{ opacity: disableControlsFlag ? 0 : 100 }} className={getAnimationClass('fadeIn')}>\n        <Button\n          size=\"large\"\n          icon={<StepBackwardOutlined />}\n          onClick={goToPreviousSlide}\n          disabled={disableControlsFlag || config.slideIndex === 0}\n        >\n          <Translate pt=\"Anterior\" en=\"Previous\" />\n        </Button>\n        <Button\n          size=\"large\"\n          icon={isRunning ? <PauseOutlined /> : <PlayCircleOutlined />}\n          onClick={isRunning ? pause : resume}\n        />\n        <Button\n          size=\"large\"\n          onClick={goToNextSlide}\n          disabled={disableControlsFlag || config.slideIndex === config.length - 1}\n        >\n          <Translate pt=\"Próximo\" en=\"Next\" /> <StepForwardOutlined />\n        </Button>\n        <Button\n          {...nextButtonProps}\n          size=\"large\"\n          onClick={() => config.onExpire()}\n          icon={nextButtonProps?.icon ?? <TrophyOutlined />}\n          disabled={disableControlsFlag}\n        >\n          {nextButtonProps?.children ?? <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />}\n        </Button>\n      </Space>\n    </div>\n  );\n}\n\nfunction calculateProgress(totalDuration: number, timeLeft: number): number {\n  if (totalDuration === 0) return 100; // Handle case to avoid division by zero\n  return (1 - timeLeft / totalDuration) * 100;\n}\n","import clsx from 'clsx';\nimport type { ReactNode } from 'react';\n// Ant Design Resources\nimport type { ButtonProps } from 'antd';\n// Hooks\nimport type { SlideShowConfig } from 'hooks/useSlideShow';\n// Internal\nimport { SlideShowControls } from './SlideShowControls';\n\ntype SlideShowProps = {\n  /**\n   * Slide show configuration provided by useSlideShow\n   */\n  config: SlideShowConfig;\n  /**\n   * The left and right active pages of the slide\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The color of the progress bar (default: gray)\n   */\n  barColor: string;\n  /**\n   * Prop indicating if the controls should be disabled\n   */\n  disableControls?: boolean;\n  /**\n   * Optional class name for the wrapper\n   */\n  className?: string;\n  /**\n   * Optional class name for the left page\n   */\n  leftClassName?: string;\n  /**\n   * Optional class name for the right page\n   */\n  rightClassName?: string;\n  /**\n   * Next Button props (See Ranking Button)\n   */\n  nextButtonProps?: ButtonProps;\n};\n\n/**\n * Display Slick show with a left and right sides with full navigation controls\n * @param props\n * @returns\n */\nexport function SlideShow({\n  children,\n  disableControls,\n  barColor,\n  className = '',\n  leftClassName = '',\n  rightClassName = '',\n  nextButtonProps,\n  config,\n}: SlideShowProps) {\n  return (\n    <div className={clsx('slide-show', className)}>\n      <div className={clsx('slide-show__left', leftClassName)} id=\"gallery-left\">\n        {children[0]}\n      </div>\n      <div className={clsx('slide-show__right', rightClassName)} id=\"gallery-right\">\n        {children[1]}\n      </div>\n      <SlideShowControls\n        config={config}\n        disableControls={disableControls}\n        barColor={barColor}\n        nextButtonProps={nextButtonProps}\n      />\n    </div>\n  );\n}\n","import type { TextProps } from 'antd/es/typography/Text';\nimport clsx from 'clsx';\nimport { type ReactNode, useMemo } from 'react';\n// Ant Design Resources\nimport { CrownFilled, MessageFilled } from '@ant-design/icons';\nimport { Avatar as AntAvatar, Typography } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Utils\nimport { getContrastColor, getPlayerNamesFromIds } from 'utils/helpers';\n// Icons\nimport { GarbageIcon } from 'icons/GarbageIcon';\n// Components\nimport { Avatar, IconAvatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\n/**\n * A functional component that renders a label for the slide show.\n */\nexport function SlideShowLabel({ children, className, ...props }: ElementPropsWithChildren) {\n  return (\n    <div className={clsx('slide-show-composable__label', className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\ntype SlideShowBubbleProps = {\n  /**\n   * If true, the bubble will display a crown icon.\n   */\n  winner?: boolean;\n  /**\n   * The background color of the bubble.\n   */\n  backgroundColor?: string;\n  /**\n   * Extra content to be displayed on the right\n   */\n  extra?: ReactNode;\n} & ElementPropsWithChildren;\n\n/**\n * A component that displays a bubble value in a slide show.\n * It conditionally renders a crown icon if the `winner` prop is true,\n * otherwise, it renders a message icon.\n */\nexport function SlideShowBubbleValue({\n  children,\n  winner,\n  backgroundColor,\n  className,\n  extra,\n  ...props\n}: SlideShowBubbleProps) {\n  return (\n    <div\n      className={clsx('slide-show-composable__bubble-value', className)}\n      style={winner && backgroundColor ? { backgroundColor, color: getContrastColor(backgroundColor) } : {}}\n      {...props}\n    >\n      {winner ? (\n        <CrownFilled\n          className=\"slide-show-composable__bubble-icon\"\n          style={backgroundColor ? { color: getContrastColor(backgroundColor) } : {}}\n        />\n      ) : (\n        <MessageFilled className=\"slide-show-composable__bubble-icon\" />\n      )}\n\n      <span>{children}</span>\n\n      <span>{extra}</span>\n    </div>\n  );\n}\n\ntype SlideShowPlayersListProps = {\n  /**\n   * The player objects.\n   */\n  players: GamePlayers;\n  /**\n   * The player IDs to be displayed.\n   */\n  playersIds: PlayerId[];\n} & ElementProps;\n\n/**\n * SlideShowPlayersList component displays a list of player avatars and their names.\n */\nexport function SlideShowPlayersList({\n  players,\n  playersIds,\n  className,\n  children,\n  ...props\n}: SlideShowPlayersListProps) {\n  const selectedPlayersNames = useMemo(\n    () => getPlayerNamesFromIds(playersIds, players).join(', '),\n    [playersIds, players],\n  );\n\n  return (\n    <div className={clsx('slide-show-composable__players', className)} {...props}>\n      <AntAvatar.Group>\n        {playersIds.map((playerId) => (\n          <Avatar id={players[playerId].avatarId} key={`slide-show-player-${playerId}`} />\n        ))}\n      </AntAvatar.Group>\n      {children}\n      <span className=\"slide-show-composable__players-names\">{selectedPlayersNames}</span>\n    </div>\n  );\n}\n\ntype SlideShowNoWinsProps = TextProps & {\n  /**\n   * Custom icon to replace the garbage icon.\n   */\n  icon?: ReactNode;\n};\n\n/**\n * SlideShowNoWins displays a message indicating that no one won in the slide show.\n */\nexport function SlideShowNoWins({ children, icon, className, ...props }: SlideShowNoWinsProps) {\n  return (\n    <Typography.Text className={clsx('slide-show-composable__no-wins', className)} {...props}>\n      <IconAvatar icon={icon ?? <GarbageIcon />} size=\"large\" shape=\"square\" />\n      <div>\n        <Translate pt=\"Nossa, ninguém acertou.\" en=\"Wow, nobody got it.\" />\n        <br />\n        {children}\n      </div>\n    </Typography.Text>\n  );\n}\n","import type { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import type { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import type { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","export const PLANEJAMENTO_URBANO_ACTIONS = {\n  SUBMIT_PLANNING: 'SUBMIT_PLANNING',\n  UPDATE_PLACEMENT: 'UPDATE_PLACEMENT',\n  SUBMIT_PLACEMENTS: 'SUBMIT_PLACEMENTS',\n};\n\nexport const SLIDE_DURATION = 8;\n","// Components\nimport { Translate } from 'components/language';\n\nexport function PlanningRules() {\n  return (\n    <Translate\n      pt={\n        <>\n          Fazemos parte do comitê de planejamento urbano da cidade e somos responsáveis por decidir onde novos\n          prédios e estabelecimentos serão construídos. Em cada rodada, um jogador assumirá o papel de\n          engenheiro-chefe, encarregado de planejar as melhores localizações para as novas construções.\n        </>\n      }\n      en={\n        <>\n          We are part of the city's urban planning committee and are responsible for deciding where new\n          buildings and establishments will be built. In each round, a player will take on the role of chief\n          engineer, responsible for planning the best locations for new constructions\n        </>\n      }\n    />\n  );\n}\n","export const getConeColor = (id: string): string => {\n  return (\n    {\n      A: 'green',\n      B: 'red',\n      C: 'yellow',\n      D: 'purple',\n    }?.[id] ?? 'gray'\n  );\n};\n","import { shuffle } from 'lodash';\n// Utils\nimport { LETTERS } from 'utils/constants';\n\nexport function mockAction(placements: number, availableProjectsIds: string[]) {\n  const siteIds = shuffle(Array.from({ length: placements }, (_, index) => LETTERS[index]));\n\n  return availableProjectsIds.reduce((acc: Record<string, string>, siteId, index) => {\n    acc[siteId] = siteIds[index];\n    return acc;\n  }, {});\n}\n","import clsx from 'clsx';\nimport type React from 'react';\nimport { type ComponentProps, Fragment } from 'react';\nimport { TransformWrapper, TransformComponent, useControls } from 'react-zoom-pan-pinch';\n// Ant Design Resources\nimport { FullscreenExitOutlined, ZoomInOutlined, ZoomOutOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n// Internal\nimport type { GridMapType, GridMapCellType } from './grid-map';\n// Sass\nimport './GridMap.scss';\n\nexport type GridMapCellComponentProps<TCellData, TCellAdditionalProps = any> = {\n  cell: GridMapCellType<TCellData | null>;\n  grid: GridMapType<TCellData>;\n  cellProps?: TCellAdditionalProps;\n};\n\nexport type GridMapProps<TCellData, TCellAdditionalProps = any> = {\n  maxWidth: number;\n  maxHeight?: number | 'auto';\n  className?: string;\n  contentClassName?: string;\n  contentStyle?: React.CSSProperties;\n  grid: GridMapType<TCellData>;\n  cellComponent: React.ComponentType<GridMapCellComponentProps<TCellData, TCellAdditionalProps>>;\n  cellProps?: any;\n  transformWrapperProps?: ComponentProps<typeof TransformWrapper>;\n  hideControls?: boolean;\n  additionalContent?: React.ReactNode;\n};\n\nexport function GridMap<TCellData, TCellAdditionalProps = any>({\n  maxWidth,\n  maxHeight,\n  grid,\n  cellComponent,\n  className,\n  contentClassName,\n  contentStyle = {},\n  cellProps,\n  transformWrapperProps,\n  hideControls = false,\n  additionalContent,\n}: GridMapProps<TCellData, TCellAdditionalProps>) {\n  const CellComponent = cellComponent;\n\n  const {\n    initialScale = 1,\n    minScale = 0.25,\n    maxScale = 4,\n    wheel = { step: 0.5 },\n    centerOnInit = true,\n    ...restTransformWrapperProps\n  } = transformWrapperProps ?? {};\n\n  return (\n    <div className={clsx('grid-map-container')}>\n      <TransformWrapper\n        initialScale={initialScale}\n        minScale={minScale}\n        maxScale={maxScale}\n        wheel={wheel}\n        centerOnInit={centerOnInit}\n        {...restTransformWrapperProps}\n      >\n        <Fragment>\n          {!hideControls && <GridMapControls position=\"top\" />}\n          {additionalContent}\n\n          <TransformComponent\n            wrapperClass={clsx('grid-map-wrapper', className)}\n            wrapperStyle={{ maxWidth, maxHeight }}\n            contentClass={clsx('grid-map', contentClassName)}\n            contentStyle={{\n              display: 'grid',\n              gridTemplateColumns: `repeat(${grid.width}, 1fr)`,\n              gridTemplateRows: `repeat(${grid.height}, 1fr)`,\n              ...contentStyle,\n            }}\n          >\n            {grid.cells.map((cell: GridMapCellType<TCellData | null>) => (\n              <CellComponent key={cell.id} cell={cell} grid={grid} cellProps={cellProps} />\n            ))}\n          </TransformComponent>\n\n          {!hideControls && <GridMapControls position=\"bottom\" />}\n        </Fragment>\n      </TransformWrapper>\n    </div>\n  );\n}\n\ntype GridMapControlsProps = {\n  position: 'top' | 'bottom';\n};\n\nfunction GridMapControls({ position }: GridMapControlsProps) {\n  const { zoomIn, zoomOut, resetTransform } = useControls();\n  return (\n    <Button.Group size=\"small\" className={clsx('grid-map-controls', `grid-map-controls--${position}`)}>\n      <Button onClick={() => zoomIn()}>\n        <ZoomInOutlined />\n      </Button>\n      <Button onClick={() => zoomOut()}>\n        <ZoomOutOutlined />\n      </Button>\n      <Button onClick={() => resetTransform()}>\n        <FullscreenExitOutlined />\n      </Button>\n    </Button.Group>\n  );\n}\n","import { flatten, sample } from 'lodash';\n\nexport type GridMapOrigin = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';\nexport type GridMapCellState = 'available' | 'used' | 'locked' | 'unavailable' | string;\nexport type GridMapAdjacency = 'any' | 'orthogonal' | 'diagonal' | 'surrounding';\n\n/**\n * TD GRID MAP TOOLKIT FUNCTIONS\n * Version 1.0.0\n */\n\n/**\n * Represents a cell in a grid with optional coordinates and state.\n */\nexport type SeedCell<TCellData> = {\n  /**\n   * The x-coordinate of the cell\n   */\n  x?: number;\n  /**\n   * The y-coordinate of the cell\n   */\n  y?: number;\n  /**\n   * The data contained in the cell\n   */\n  data: TCellData | null;\n  /**\n   * The state of the cell\n   */\n  state?: GridMapCellState;\n};\n\nexport type GridMapCellType<TCellData> = {\n  /**\n   * The unique identifier of the cell composed of its x and y coordinates\n   */\n  id: string;\n  /**\n   * The x-coordinate of the cell\n   */\n  x: number;\n  /**\n   * The y-coordinate of the cell\n   */\n  y: number;\n  /**\n   * The data contained in the cell\n   */\n  data: TCellData | null;\n  /**\n   * The state of the cell (it accepts an arbitrary string for custom states)\n   */\n  state: GridMapCellState;\n};\n\nexport type GridMapType<TCellData> = {\n  /**\n   * The width of the grid\n   */\n  width: number;\n  /**\n   * The height of the grid\n   **/\n  height: number;\n  /**\n   * The origin of the grid\n   **/\n  origin: GridMapOrigin;\n  /**\n   * The cells of the grid\n   **/\n  cells: GridMapCellType<TCellData | null>[];\n  /**\n   * The adjacency of the grid\n   * - 'any': any empty cell is available\n   * - 'surrounding': only cells surrounding used cells are available\n   * - 'orthogonal': only cells orthogonally adjacent to used cells are available\n   * - 'diagonal': only cells diagonally adjacent to used cells are available\n   **/\n  adjacency: GridMapAdjacency;\n};\n\nexport type GridMapOptions<TCellData> = {\n  /**\n   * The origin of the grid\n   */\n  origin?: GridMapOrigin;\n  /**\n   * The default data to populate the grid with\n   */\n  defaultData?: SeedCell<TCellData> | SeedCell<TCellData>[];\n  /**\n   * The adjacency of the grid\n   */\n  adjacency?: GridMapAdjacency;\n};\n\n/**\n * Creates a grid with specified width and height, and initializes cells with optional data and state.\n * @template TCellData - The type of data stored in each cell.\n * @param width - The number of columns in the grid.\n * @param height - The number of rows in the grid.\n * @param [options={}] - Optional configuration for the grid.\n * @param [options.origin='top-left'] - The origin point of the grid.\n * @param [options.adjacency='any'] - The initial adjacency state of the cells.\n * @param [options.defaultData] - Default data to initialize the cells.\n * @returns The created grid object.\n */\nfunction createGridMap<TCellData>(\n  width: number,\n  height: number,\n  options: GridMapOptions<TCellData> = {},\n): GridMapType<TCellData> {\n  const origin = options.origin || 'top-left';\n  const adjacency = options.adjacency || 'any';\n\n  // Create a flattened array of cells\n  const cells: GridMapCellType<TCellData>[] = [];\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      cells.push({\n        id: composeCellId(x, y),\n        x,\n        y,\n        data: null,\n        state: adjacency === 'any' ? 'available' : 'unavailable',\n      });\n    }\n  }\n\n  // Apply default data to specific cells if provided\n  const defaultData = options.defaultData;\n  if (defaultData && Array.isArray(defaultData)) {\n    defaultData.forEach(({ x, y, data, state }) => {\n      const cell = cells.find((cell) => cell.x === x && cell.y === y);\n      if (cell) {\n        cell.data = data;\n        cell.state = state || 'used';\n      }\n    });\n  } else if (defaultData) {\n    cells.forEach((cell) => {\n      cell.data = defaultData.data;\n      cell.state = defaultData.state || 'used';\n    });\n  }\n\n  return { width, height, origin, cells, adjacency };\n}\n\n/**\n * Composes a unique identifier for a cell based on its x and y coordinates.\n * @param x - The x-coordinate of the cell.\n * @param y - The y-coordinate of the cell.\n * @returns The unique identifier of the cell.\n */\nfunction composeCellId(x: number, y: number): string {\n  return `${x}-${y}`;\n}\n\n/**\n * Parses a cell identifier into its x and y coordinates.\n * @param id - The unique identifier of the cell.\n * @returns An object containing the x and y coordinates of the cell.\n */\nfunction parseCellId(id: string): { x: number; y: number } {\n  const [x, y] = id.split('-').map(Number);\n  return { x, y };\n}\n\n/**\n * Retrieves the index of a cell in the grid based on its x and y coordinates.\n * @param grid - The grid containing the cell.\n * @param x - The x-coordinate of the cell.\n * @param y - The y-coordinate of the cell.\n * @returns The index of the cell in the grid.\n */\nfunction getCellIndex<TCellData = unknown>(grid: GridMapType<TCellData>, x: number, y: number): number {\n  return grid.width * y + x;\n}\n\n/**\n * Retrieves a cell from the grid based on the provided x and y coordinates.\n *\n * @template TCellData - The type of data stored in the cell.\n * @param grid - The grid from which to retrieve the cell.\n * @param x - The x-coordinate of the cell.\n * @param y - The y-coordinate of the cell.\n * @returns {GridMapCellType<TCellData> | null} - The cell at the specified coordinates, or null if no cell exists at those coordinates.\n */\nfunction getCellByCoordinates<TCellData>(\n  grid: GridMapType<TCellData>,\n  x: number,\n  y: number,\n): GridMapCellType<TCellData | null> | null {\n  return grid.cells.find((cell) => cell.x === x && cell.y === y) || null;\n}\n\n/**\n * Retrieves a cell from the grid using its unique identifier.\n *\n * @template TCellData - The type of data stored in the cell.\n * @param grid - The grid from which to retrieve the cell.\n * @param id - The unique identifier of the cell, formatted as \"x-y\".\n * @returns {GridMapCellType<TCellData> | null} - The cell corresponding to the given id, or null if no such cell exists.\n */\nfunction getCellById<TCellData>(\n  grid: GridMapType<TCellData>,\n  id: string,\n): GridMapCellType<TCellData | null> | null {\n  return grid.cells.find((cell) => cell.id === id) || null;\n}\n\n/**\n * Retrieves the origin cell of the grid based on the specified origin point.\n */\nfunction getOrigin<TCellData>(grid: GridMapType<TCellData>): GridMapCellType<TCellData | null> | null {\n  const { width, height, origin } = grid;\n\n  let originX: number;\n  let originY: number;\n\n  switch (origin) {\n    case 'top-left':\n      originX = 0;\n      originY = 0;\n      break;\n    case 'top-right':\n      originX = width - 1;\n      originY = 0;\n      break;\n    case 'bottom-left':\n      originX = 0;\n      originY = height - 1;\n      break;\n    case 'bottom-right':\n      originX = width - 1;\n      originY = height - 1;\n      break;\n    case 'center':\n      originX = Math.floor(width / 2);\n      originY = Math.floor(height / 2);\n      break;\n    default:\n      originX = 0;\n      originY = 0;\n  }\n\n  return getCellByCoordinates(grid, originX, originY);\n}\n\n/**\n * Retrieves the unique identifier of the origin cell in the grid.\n */\nfunction getOriginId<TCellData>(grid: GridMapType<TCellData>): string | null {\n  const origin = getOrigin(grid);\n  return origin ? origin.id : null;\n}\n\n/**\n * Retrieves the coordinates of available cells in a grid based on the specified adjacency criteria.\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid to search for available cells.\n * @param [adjacency] - The adjacency criteria for selecting cells.\n *   - 'any': Selects any available cell.\n *   - 'orthogonal': Selects cells that are orthogonally adjacent to used cells.\n *   - 'diagonal': Selects cells that are diagonally adjacent to used cells.\n *  - 'surrounding': Selects cells that are surrounding used cells.\n * @param cellState - The state of the cells to search for.\n * @param [adjacentCellState='used'] - The state of the adjacent cells to check against.\n * @returns An array of coordinates of the available cells.\n */\nfunction getAllAdjacentCoordinates<TCellData>(\n  grid: GridMapType<TCellData>,\n  adjacency?: GridMapAdjacency,\n  cellState?: GridMapCellState,\n  adjacentCellState: GridMapCellState = 'used',\n): { x: number; y: number }[] {\n  const availableCells: { x: number; y: number }[] = [];\n  const chosenAdjacency = adjacency || grid.adjacency;\n\n  for (let y = 0; y < grid.height; y++) {\n    for (let x = 0; x < grid.width; x++) {\n      const cell = getCellByCoordinates(grid, x, y);\n\n      if (cell && (cellState ? cell.state === cellState : true) && cell.data === null) {\n        if (chosenAdjacency === 'any') {\n          availableCells.push({ x, y });\n        } else if (\n          chosenAdjacency === 'surrounding' &&\n          _isSurroundingAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push({ x, y });\n        } else if (\n          chosenAdjacency === 'orthogonal' &&\n          _isOrthogonallyAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push({ x, y });\n        } else if (\n          chosenAdjacency === 'diagonal' &&\n          _isDiagonallyAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push({ x, y });\n        }\n      }\n    }\n  }\n\n  return availableCells;\n}\n\n/**\n * Retrieves the ids of cells in a grid based on the specified adjacency criteria.\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid to search for available cells.\n * @param [adjacency] - The adjacency criteria for selecting cells.\n *   - 'any': Selects any available cell.\n *   - 'orthogonal': Selects cells that are orthogonally adjacent to used cells.\n *   - 'diagonal': Selects cells that are diagonally adjacent to used cells.\n *  - 'surrounding': Selects cells that are surrounding used cells.\n * @param [cellState='available'] - The state of the cells to search for.\n * @param [adjacentCellState='used'] - The state of the adjacent cells to check against.\n * @returns An array of ids of the cells.\n */\nfunction getAllAdjacentIds(\n  grid: GridMapType<unknown>,\n  adjacency?: GridMapAdjacency,\n  cellState?: GridMapCellState,\n  adjacentCellState: GridMapCellState = 'used',\n): string[] {\n  const availableCells: string[] = [];\n  const chosenAdjacency = adjacency || grid.adjacency;\n\n  for (let y = 0; y < grid.height; y++) {\n    for (let x = 0; x < grid.width; x++) {\n      const cell = getCellByCoordinates(grid, x, y);\n\n      if (cell && (cellState ? cell.state === cellState : true) && cell.data === null) {\n        if (chosenAdjacency === 'any') {\n          availableCells.push(cell.id);\n        } else if (\n          chosenAdjacency === 'surrounding' &&\n          _isSurroundingAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push(cell.id);\n        } else if (\n          chosenAdjacency === 'orthogonal' &&\n          _isOrthogonallyAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push(cell.id);\n        } else if (\n          chosenAdjacency === 'diagonal' &&\n          _isDiagonallyAdjacentToUsed(grid, x, y, adjacentCellState)\n        ) {\n          availableCells.push(cell.id);\n        }\n      }\n    }\n  }\n\n  return availableCells;\n}\n\nconst ORTHOGONAL_OFFSETS = [\n  { dx: 0, dy: -1 },\n  { dx: 0, dy: 1 },\n  { dx: -1, dy: 0 },\n  { dx: 1, dy: 0 },\n];\nconst DIAGONAL_OFFSETS = [\n  { dx: -1, dy: -1 },\n  { dx: 1, dy: -1 },\n  { dx: -1, dy: 1 },\n  { dx: 1, dy: 1 },\n];\nconst SURROUNDING_OFFSETS = [\n  { dx: -1, dy: -1 },\n  { dx: 0, dy: -1 },\n  { dx: 1, dy: -1 },\n  { dx: -1, dy: 0 },\n  { dx: 1, dy: 0 },\n  { dx: -1, dy: 1 },\n  { dx: 0, dy: 1 },\n  { dx: 1, dy: 1 },\n];\n\nconst OFFSETS = {\n  orthogonal: ORTHOGONAL_OFFSETS,\n  diagonal: DIAGONAL_OFFSETS,\n  surrounding: SURROUNDING_OFFSETS,\n  any: SURROUNDING_OFFSETS,\n};\n\n/**\n * Retrieves the available cell IDs from the grid based on the specified adjacency.\n *\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid map containing cell data.\n * @param [adjacency] - Optional parameter specifying the adjacency rules for determining available cells.\n * @returns An array of available cell IDs.\n */\nfunction _isOrthogonallyAdjacentToUsed<TCellData>(\n  grid: GridMapType<TCellData>,\n  x: number,\n  y: number,\n  cellState: GridMapCellState,\n): boolean {\n  return ORTHOGONAL_OFFSETS.some(({ dx, dy }) => {\n    const nx = x + dx;\n    const ny = y + dy;\n    return _isWithinBounds(grid, nx, ny) && getCellByCoordinates(grid, nx, ny)?.state === cellState;\n  });\n}\n\n/**\n * Checks if a cell in the grid is diagonally adjacent to any cell that is marked as 'used'.\n *\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid to check within.\n * @param x - The x-coordinate of the cell to check.\n * @param y - The y-coordinate of the cell to check.\n * @returns - Returns true if the cell is diagonally adjacent to a 'used' cell, otherwise false.\n */\nfunction _isDiagonallyAdjacentToUsed<TCellData>(\n  grid: GridMapType<TCellData>,\n  x: number,\n  y: number,\n  cellState: GridMapCellState,\n): boolean {\n  return DIAGONAL_OFFSETS.some(({ dx, dy }) => {\n    const nx = x + dx;\n    const ny = y + dy;\n    return _isWithinBounds(grid, nx, ny) && getCellByCoordinates(grid, nx, ny)?.state === cellState;\n  });\n}\n\nfunction _isSurroundingAdjacentToUsed<TCellData>(\n  grid: GridMapType<TCellData>,\n  x: number,\n  y: number,\n  cellState: GridMapCellState = 'used',\n): boolean {\n  return SURROUNDING_OFFSETS.some(({ dx, dy }) => {\n    const nx = x + dx;\n    const ny = y + dy;\n    return _isWithinBounds(grid, nx, ny) && getCellByCoordinates(grid, nx, ny)?.state === cellState;\n  });\n}\n\n/**\n * Checks if the given coordinates (x, y) are within the bounds of the grid.\n *\n * @template TCellData - The type of data stored in the grid cells.\n * @param grid - The grid to check the bounds against.\n * @param x - The x-coordinate to check.\n * @param y - The y-coordinate to check.\n * @returns - Returns `true` if the coordinates are within the bounds of the grid, otherwise `false`.\n */\nfunction _isWithinBounds<TCellData>(grid: GridMapType<TCellData>, x: number, y: number): boolean {\n  return x >= 0 && x < grid.width && y >= 0 && y < grid.height;\n}\n\n/**\n * Retrieves all empty cells from the given grid.\n *\n * @template TCellData - The type of data stored in the grid cells.\n * @param grid - The grid from which to retrieve empty cells.\n * @returns An array of cells that contain null data.\n */\nfunction getEmptyCells<TCellData>(grid: GridMapType<TCellData>): GridMapCellType<TCellData | null>[] {\n  return flatten(grid.cells).filter((cell): cell is GridMapCellType<TCellData | null> => cell.data === null);\n}\n\n/**\n * Updates the data and state of a specific cell in the grid.\n *\n * @template TCellData - The type of data stored in the cell.\n * @param grid - The grid containing the cell to be updated.\n * @param id - The unique identifier of the cell to be updated.\n * @param newData - The new data to be set in the cell. If null, the cell's data will be cleared.\n * @param [state] - The new state to be set for the cell. If not provided, defaults to 'available' if newData is null, otherwise 'used'.\n * @returns - The updated grid.\n */\nfunction updateCell<TCellData>(\n  grid: GridMapType<TCellData>,\n  id: string,\n  newData: TCellData | null,\n  state?: GridMapCellState,\n): GridMapType<TCellData> {\n  const cell = getCellById(grid, id);\n\n  if (cell) {\n    // Update the cell's data and state\n    if (newData === null) {\n      cell.data = null;\n      cell.state = state || 'available';\n    } else {\n      cell.data = newData;\n      cell.state = cell.state === 'locked' ? 'locked' : state || 'used';\n    }\n\n    // Update surrounding cells based on grid adjacency\n    _updateSurroundingCells(grid, cell.x, cell.y);\n  }\n\n  return grid;\n}\n\nfunction _updateSurroundingCells<TCellData>(grid: GridMapType<TCellData>, x: number, y: number) {\n  const adjacency = grid.adjacency;\n\n  const updateIfEmpty = (nx: number, ny: number) => {\n    const cell = getCellByCoordinates(grid, nx, ny);\n    if (cell && cell.data === null && cell.state !== 'locked') {\n      cell.state = 'available';\n    }\n  };\n\n  const offsets = OFFSETS[adjacency];\n  offsets.forEach(({ dx, dy }) => updateIfEmpty(x + dx, y + dy));\n}\n\n/**\n * Updates the state of a cell in the grid identified by the given identifier.\n *\n * @template TCellData - The type of data stored in the grid cells.\n * @param grid - The grid containing the cell to update.\n * @param identifier - The identifier of the cell to update.\n * @param newState - The new state to set for the cell.\n * @returns The updated grid.\n */\nfunction updateCellState<TCellData>(\n  grid: GridMapType<TCellData>,\n  identifier: string,\n  newState: GridMapCellState,\n): GridMapType<TCellData> {\n  const cell: GridMapCellType<TCellData | null> | null = getCellById(grid, identifier);\n\n  if (cell) {\n    cell.state = newState;\n  }\n\n  return grid;\n}\n\n/**\n * Helper function to retrieve adjacent cell IDs based on grid adjacency.\n * Uses orthogonal offsets if grid adjacency is 'orthogonal',\n * or all offsets (including diagonals) if 'diagonal'.\n *\n * @template TCellData - The type of data stored in the grid cells.\n * @param grid - The grid object.\n * @param x - The x-coordinate of the cell.\n * @param y - The y-coordinate of the cell.\n * @returns {string[]} - Array of adjacent cell IDs.\n */\nfunction _getAdjacentIdsByCoordinate<TCellData>(\n  grid: GridMapType<TCellData>,\n  x: number,\n  y: number,\n): string[] {\n  const offsets = OFFSETS[grid.adjacency];\n\n  const adjacentIds: string[] = [];\n\n  for (const { dx, dy } of offsets) {\n    const nx = x + dx;\n    const ny = y + dy;\n    if (_isWithinBounds(grid, nx, ny)) {\n      const adjacentCell = getCellByCoordinates(grid, nx, ny);\n      if (adjacentCell) adjacentIds.push(adjacentCell.id);\n    }\n  }\n\n  return adjacentIds;\n}\n\nfunction getAdjacentIdsToCellId<TCellData>(\n  grid: GridMapType<TCellData>,\n  id: string,\n  adjacency: GridMapAdjacency,\n  cellState?: GridMapCellState,\n): string[] {\n  const { x, y } = parseCellId(id);\n  const offsets = OFFSETS[adjacency];\n\n  const adjacentIds: string[] = [];\n\n  for (const { dx, dy } of offsets) {\n    const nx = x + dx;\n    const ny = y + dy;\n    if (_isWithinBounds(grid, nx, ny)) {\n      const adjacentCell = getCellByCoordinates(grid, nx, ny);\n      if (adjacentCell && (cellState ? adjacentCell.state === cellState : true))\n        adjacentIds.push(adjacentCell.id);\n    }\n  }\n\n  return adjacentIds;\n}\n\n/**\n * Creates a path on the grid starting from a specified cell and extending to a specified length.\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid where the path will be created.\n * @param length - The desired length of the path.\n * @param startId - The starting cell's ID.\n * @param options - Optional parameters for the path generation.\n * @param options.endId - The optional endpoint cell's ID.\n * @param options.allowRepetition - Whether to allow cells to be visited multiple times.\n * @returns An object with the generated path ID and the path array of cell IDs.\n */\nfunction createPath<TCellData>(\n  grid: GridMapType<TCellData | null>,\n  length: number,\n  startId: string,\n  options: { endId?: string; allowRepetition?: boolean } = {},\n): { id: string; path: string[] } | null {\n  const { endId, allowRepetition = false } = options;\n  const path: string[] = [startId];\n  let currentId = startId;\n\n  for (let i = 1; i < length; i++) {\n    const currentCell = getCellById(grid, currentId);\n    if (!currentCell) break;\n\n    // Get adjacent cells (orthogonal only to avoid circular paths)\n    const adjacentIds = _getAdjacentIdsByCoordinate(grid, currentCell.x, currentCell.y);\n\n    // Filter out cells already in the path if repetition is not allowed\n    const validNextIds = adjacentIds.filter((id) => allowRepetition || !path.includes(id));\n    if (validNextIds.length === 0) break;\n\n    // Choose the next cell, prioritizing endId if it's the final step\n    const nextId =\n      i === length - 1 && endId && validNextIds.includes(endId) ? endId : sample(validNextIds) || null;\n\n    if (!nextId) break;\n\n    path.push(nextId);\n    currentId = nextId;\n  }\n\n  // Ensure path length and endpoint match requirements\n  if (path.length !== length || (endId && path[path.length - 1] !== endId)) {\n    return null; // Path couldn't meet requirements\n  }\n\n  return { id: path.join(';;'), path };\n}\n\n/**\n * Creates multiple unique paths on the grid using the createPath function.\n * @template TCellData - The type of data stored in each cell of the grid.\n * @param grid - The grid where the paths will be created.\n * @param numPaths - The number of unique paths to create.\n * @param startIds - An array of starting cell IDs for each path.\n * @param pathLength - The length of each path.\n * @param allowRepetition - Whether cells can be visited multiple times within paths.\n * @returns An array of path objects, each containing an id and the path array of cell IDs.\n */\nfunction createPaths<TCellData>(\n  grid: GridMapType<TCellData | null>,\n  numPaths: number,\n  startIds: string[],\n  pathLength: number,\n  allowRepetition = false,\n): { id: string; path: string[] }[] {\n  const paths: { id: string; path: string[] }[] = [];\n\n  for (let i = 0; i < numPaths; i++) {\n    const startId = startIds[i % startIds.length];\n    const newPath = createPath(grid, pathLength, startId, { allowRepetition });\n\n    // Ensure uniqueness of paths\n    if (newPath && !paths.some((p) => p.id === newPath.id)) {\n      paths.push(newPath);\n    } else {\n      i--; // Retry if path is not unique or couldn't be created\n    }\n  }\n\n  return paths;\n}\n\nexport const gridMapUtils = {\n  createGridMap,\n  getCellById,\n  getCellByCoordinates,\n  updateCell,\n  updateCellState,\n  getEmptyCells,\n  getOrigin,\n  getOriginId,\n  getAllAdjacentCoordinates,\n  getAllAdjacentIds,\n  getAdjacentIdsToCellId,\n  createPath,\n  createPaths,\n  composeCellId,\n  parseCellId,\n  getCellIndex,\n};\n","// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n\nexport const useLocationWidth = (cityWidth: number) => {\n  return useCardWidth(cityWidth + 2, {\n    maxWidth: 300,\n    gap: 16,\n  });\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport {\n  BankFilled,\n  BulbFilled,\n  CloudFilled,\n  CustomerServiceFilled,\n  ExperimentFilled,\n  GiftFilled,\n  HomeFilled,\n  MedicineBoxFilled,\n  QuestionCircleFilled,\n  ReadFilled,\n  ShopFilled,\n  StarFilled,\n  TruckFilled,\n} from '@ant-design/icons';\nimport { Typography } from 'antd';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { DualTranslate } from 'components/language';\n// Internal\nimport type { CityLocationsDict } from '../utils/types';\n\ntype LocationCardProps = {\n  locationId: string;\n  cityLocationsDict: CityLocationsDict;\n  width: number;\n  className?: string;\n  fontSize?: 'normal' | 'small';\n};\n\nexport function LocationCard({\n  locationId,\n  cityLocationsDict,\n  width,\n  className,\n  fontSize,\n}: LocationCardProps) {\n  const location = cityLocationsDict?.[locationId];\n  return (\n    <div\n      className={clsx('city-site city-site--constructed', className)}\n      style={{\n        width,\n        height: width,\n        backgroundImage: `url('${PUBLIC_URL.IN_GAME}city-image.jpg')`,\n      }}\n    >\n      <span>\n        <div className=\"city-site-category\">{getLocationCategoryIcon(location.category)}</div>\n        <Typography.Text className={clsx('city-site-name', `city-site-name--${fontSize}`)}>\n          <DualTranslate>{location.name}</DualTranslate>\n        </Typography.Text>\n      </span>\n    </div>\n  );\n}\n\nconst getLocationCategoryIcon = (category: string) => {\n  switch (category) {\n    case 'Accommodation':\n      return <GiftFilled />;\n    case 'Government':\n      return <BankFilled />;\n    case 'Commercial':\n      return <ShopFilled />;\n    case 'Cultural':\n      return <BulbFilled />;\n    case 'Education':\n      return <ReadFilled />;\n    case 'Entertainment':\n      return <CustomerServiceFilled />;\n    case 'Industrial':\n      return <ExperimentFilled />;\n    case 'Infrastructure':\n      return <MedicineBoxFilled />;\n    case 'Natural':\n      return <CloudFilled />;\n    case 'Residential':\n      return <HomeFilled />;\n    case 'Transportation':\n      return <TruckFilled />;\n    case 'Special':\n      return <StarFilled />;\n    default:\n      return <QuestionCircleFilled />;\n  }\n};\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Tag } from 'antd';\n// Icons\nimport { ConeIcon } from 'icons/ConeIcon';\n// Components\nimport type { GridMapCellComponentProps } from 'components/toolKits/GridMap/GridMap';\n// Internal\nimport type { CityLocationsDict, Construction, Cone } from '../utils/types';\nimport { getConeColor } from '../utils/helpers';\nimport { LocationCard } from './LocationCard';\n\ntype MapSlotProps = {\n  cellWidth: number;\n  cityLocationsDict: CityLocationsDict;\n  mapEvaluations?: Record<string, string>;\n};\n\nexport function MapSlot({\n  cell,\n  grid,\n  cellProps,\n}: GridMapCellComponentProps<Construction | Cone | null, MapSlotProps>) {\n  const { cityLocationsDict = {}, mapEvaluations = {} } = cellProps ?? {};\n  const sizes: React.CSSProperties = {\n    width: cellProps?.cellWidth,\n    height: cellProps?.cellWidth,\n  };\n\n  if (!cell.data) {\n    return (\n      <div style={sizes} className=\"city-site city-site--unavailable\">\n        .\n      </div>\n    );\n  }\n\n  if (cell.data?.locationId) {\n    return (\n      <div style={sizes} id={`cell-${cell.id}`}>\n        <LocationCard\n          locationId={cell.data.locationId}\n          cityLocationsDict={cityLocationsDict}\n          width={Number(sizes.width ?? 75)}\n        />\n      </div>\n    );\n  }\n\n  if (cell.data?.coneId) {\n    const color = getConeColor(cell.data.coneId);\n\n    const locationId = mapEvaluations[cell.data.coneId];\n\n    return (\n      <div style={sizes} className=\"city-site\" id={`cell-${cell.id}`}>\n        {locationId && (\n          <>\n            <span className=\"city-site--temp-construction-cone\">\n              <ConeIcon color={color} width={32} />\n            </span>\n            <LocationCard\n              locationId={locationId}\n              cityLocationsDict={cityLocationsDict}\n              width={Number(sizes.width ?? 75)}\n              className={clsx(\n                'city-site--temp-construction',\n                `city-site--temp-construction-${cell.data?.coneId}`,\n              )}\n            />\n          </>\n        )}\n        <div className=\"city-site-available\">\n          <ConeIcon color={color} width={64} />\n          <Tag color={color}>{cell.data.coneId ?? 'U'}</Tag>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={sizes} id={`cell-${cell.id}`} className=\"city-site city-site--unavailable\">\n      .\n    </div>\n  );\n}\n","import { useWindowSize } from 'react-use';\n// Components\nimport { GridMap } from 'components/toolKits/GridMap';\n// Internal\nimport type { City, CityLocationsDict } from '../utils/types';\nimport { useLocationWidth } from '../utils/custom-hooks';\nimport { MapSlot } from './MapSlot';\n\ntype CityMapProps = {\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n  mapEvaluations?: Record<string, string>;\n};\n\nexport function CityMap({ city, cityLocationsDict, mapEvaluations }: CityMapProps) {\n  const sizes = useWindowSize();\n  const cellWidth = useLocationWidth(city.width);\n\n  return (\n    <GridMap\n      maxWidth={sizes.width}\n      maxHeight={sizes.height}\n      grid={city}\n      cellComponent={MapSlot}\n      cellProps={{ cellWidth, cityLocationsDict, mapEvaluations }}\n    />\n  );\n}\n","// Icons\nimport { BrickWallIcon } from 'icons/BrickWallIcon';\nimport { ConeIcon } from 'icons/ConeIcon';\n// Components\nimport { type HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function ConstructionHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<BrickWallIcon />}>{children}</MetricHighlight>;\n}\n\nexport function ConeHighlight({ children }: HighlightProps) {\n  return <MetricHighlight icon={<ConeIcon />}>{children}</MetricHighlight>;\n}\n","import { useMemo, useState } from 'react';\n// Ant Design Resources\nimport { Button, Flex, Select } from 'antd';\n// Types\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Icons\nimport { BrickWallIcon } from 'icons/BrickWallIcon';\nimport { ConeIcon } from 'icons/ConeIcon';\n// Components\nimport { IconAvatar } from 'components/avatars';\nimport { FloatingHandDrawer } from 'components/general/FloatingHand';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { City, CityLocationsDict } from './utils/types';\nimport { getConeColor } from './utils/helpers';\nimport type { useOnSubmitPlanningAPIRequest } from './utils/api-requests';\nimport { mockAction } from './utils/mocks';\nimport { CityMap } from './components/CityMap';\nimport { ConeHighlight, ConstructionHighlight } from './components/Highlights';\nimport { LocationCard } from './components/LocationCard';\n\ntype StepPlanLocationsProps = {\n  players: GamePlayers;\n  activePlayerId: PlayerId;\n  gameOrder: GameOrder;\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n  placements: number;\n  availableProjectsIds: string[];\n  onSubmitPlanning: ReturnType<typeof useOnSubmitPlanningAPIRequest>;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepPlanLocations({\n  players,\n  announcement,\n  gameOrder,\n  activePlayerId,\n  availableProjectsIds,\n  city,\n  cityLocationsDict,\n  placements,\n  onSubmitPlanning,\n}: StepPlanLocationsProps) {\n  const { isLoading } = useLoading();\n  const constructionWidth = useCardWidth(placements + 3, { maxWidth: 256 });\n\n  const coneOptions = useMemo(() => {\n    return Array.from({ length: placements }, (_, index) => ({\n      value: LETTERS[index],\n      label: (\n        <span>\n          <IconAvatar size=\"small\" icon={<ConeIcon color={getConeColor(LETTERS[index])} width={24} />} />\n          {LETTERS[index]}\n        </span>\n      ),\n    }));\n  }, [placements]);\n\n  const [playerSelections, setPlayerSelections] = useState<Record<string, string>>({});\n\n  const onSelectConstrictionCone = (locationId: string, cone: string) => {\n    setPlayerSelections((prev) => ({ ...prev, [locationId]: cone }));\n  };\n\n  const isComplete =\n    Object.keys(playerSelections).length === placements &&\n    new Set(Object.values(playerSelections)).size === placements;\n\n  useMock(() => {\n    onSubmitPlanning({ planning: mockAction(placements, availableProjectsIds) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle size=\"small\">\n        <Translate\n          pt={<>Decida onde as {placements} novos projetos devem ser construídos</>}\n          en={<>Decide where the {placements} new projects should be built</>}\n        />\n      </StepTitle>\n\n      <RuleInstruction type=\"action\">\n        <Translate\n          pt={\n            <>\n              No mapa, existem <ConeHighlight>{placements} cones</ConeHighlight> representando onde as\n              terrenos onde os projetos podem ser feitos.\n              <br />\n              Na barra no final da tela, você tem os{' '}\n              <ConstructionHighlight>{placements} projetos</ConstructionHighlight>, em segredo, decida qual\n              projeto vai para qual cone.\n            </>\n          }\n          en={\n            <>\n              On the map, there are <ConeHighlight>{placements} cones</ConeHighlight> representing the land\n              where the projects can be built.\n              <br />\n              At the bottom of the screen, you have{' '}\n              <ConstructionHighlight>{placements} projects</ConstructionHighlight>, in secret, decide which\n              project goes to which cone.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <CityMap city={city} cityLocationsDict={cityLocationsDict} />\n\n      <TurnOrder players={players} activePlayerId={activePlayerId} order={gameOrder} />\n\n      <FloatingHandDrawer\n        icon={<BrickWallIcon />}\n        title={<Translate pt=\"Novos Projetos\" en=\"New Projects\" />}\n      >\n        <Flex justify=\"center\">\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            disabled={isLoading || !isComplete}\n            onClick={() => onSubmitPlanning({ planning: playerSelections })}\n          >\n            <Translate pt=\"Confirmar\" en=\"Confirm\" />\n          </Button>\n        </Flex>\n        <Flex justify=\"center\" className=\"mt-2\" gap={6}>\n          {availableProjectsIds.map((locationId) => (\n            <Flex key={locationId} vertical align=\"center\">\n              <Select\n                options={coneOptions}\n                className=\"full-width\"\n                placeholder={<Translate pt=\"Selecione um cone\" en=\"Select a cone\" />}\n                value={playerSelections[locationId]}\n                onChange={(value) => onSelectConstrictionCone(locationId, value)}\n              />\n              <LocationCard\n                locationId={locationId}\n                cityLocationsDict={cityLocationsDict}\n                width={constructionWidth}\n              />\n            </Flex>\n          ))}\n        </Flex>\n      </FloatingHandDrawer>\n    </Step>\n  );\n}\n","// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { TurnOrder } from 'components/players';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { City, CityLocationsDict } from './utils/types';\nimport { CityMap } from './components/CityMap';\n// Icons\n// Hooks\n\ntype StepWaitForPlanningProps = {\n  players: GamePlayers;\n  gameOrder: GameOrder;\n  activePlayer: GamePlayer;\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepWaitForPlanning({\n  announcement,\n  players,\n  gameOrder,\n  activePlayer,\n  city,\n  cityLocationsDict,\n}: StepWaitForPlanningProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle size=\"small\" wait>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={activePlayer} /> está planejando a cidade.\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={activePlayer} /> is planning the city.\n            </>\n          }\n        />\n      </StepTitle>\n\n      <RuleInstruction type=\"wait\">\n        <Translate\n          pt=\"Aguarde enquanto o engenheiro chefe planeja a cidade. Você pode observar o mapa e os cones representando as possíveis localizações para a construção\"\n          en=\"Wait while the chief engineer plans the city. You can observe the map and the cones representing the possible locations for construction\"\n        />\n      </RuleInstruction>\n\n      <CityMap city={city} cityLocationsDict={cityLocationsDict} />\n\n      <TurnOrder players={players} activePlayerId={activePlayer.id} order={gameOrder} />\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { MapBlueprintIcon } from 'icons/MapBlueprintIcon';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { RoundAnnouncement } from 'components/round';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { ViewOr } from 'components/views';\n// Internal\nimport { useOnSubmitPlanningAPIRequest } from './utils/api-requests';\nimport { PlanningRules } from './components/RulesBlobs';\nimport { StepPlanLocations } from './StepPlanLocations';\nimport { StepWaitForPlanning } from './StepWaitForPlanning';\n// Icons\n\nexport function PhasePlanning({ players, state }: PhaseProps) {\n  const { step, goToNextStep, setStep } = useStep();\n  const [activePlayer, isTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const onSubmitPlanning = useOnSubmitPlanningAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<MapBlueprintIcon />}\n      title={<Translate pt=\"Planejamento\" en=\"Planning\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <PlanningRules />\n        <br />\n        <Translate\n          pt={\n            <>\n              Para essa rodada, <AvatarName player={activePlayer} addressUser /> é o engenheiro chefe.\n            </>\n          }\n          en={\n            <>\n              In this round, <AvatarName player={activePlayer} addressUser /> is the chief engineer.\n            </>\n          }\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.PLANEJAMENTO_URBANO.PLANNING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} onPressButton={goToNextStep} time={3}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos arquitetos e urbanistas, e estamos planejando a cidade!\"\n              en=\"We are architects and urban planners, and we are planning a city!\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <ViewOr condition={isTheActivePlayer}>\n          <StepPlanLocations\n            announcement={announcement}\n            players={players}\n            activePlayerId={state.activePlayerId}\n            gameOrder={state.gameOrder}\n            city={state.city}\n            cityLocationsDict={state.cityLocationsDict}\n            placements={state.placements}\n            availableProjectsIds={state.availableProjectsIds}\n            onSubmitPlanning={onSubmitPlanning}\n          />\n\n          <StepWaitForPlanning\n            announcement={announcement}\n            players={players}\n            gameOrder={state.gameOrder}\n            activePlayer={activePlayer}\n            city={state.city}\n            cityLocationsDict={state.cityLocationsDict}\n          />\n        </ViewOr>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Hooks\nimport { useGameActionRequest } from 'hooks/useGameActionRequest';\nimport { useLanguage } from 'hooks/useLanguage';\nimport type { UseStep } from 'hooks/useStep';\n// Internal\nimport type { SubmitPlacingPayload, SubmitPlanningPayload } from './types';\nimport { PLANEJAMENTO_URBANO_ACTIONS } from './constants';\n\nexport function useOnSubmitPlanningAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-planning',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Planejamento submetido com sucesso', 'Planning submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu planejamento',\n      'Oops, the application found an error while trying to submit your planning',\n    ),\n  });\n\n  return (payload: SubmitPlanningPayload) => {\n    request({\n      action: PLANEJAMENTO_URBANO_ACTIONS.SUBMIT_PLANNING,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitPlacingAPIRequest(setStep: UseStep['setStep']) {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'submit-placing',\n    onSuccess: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Construção submetida com sucesso', 'Construction submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua construção',\n      'Oops, the application found an error while trying to submit your construction',\n    ),\n  });\n\n  return (payload: SubmitPlacingPayload) => {\n    request({\n      action: PLANEJAMENTO_URBANO_ACTIONS.SUBMIT_PLACEMENTS,\n      ...payload,\n    });\n  };\n}\n\nexport function useOnUpdatePlacementAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useGameActionRequest({\n    actionName: 'update-placing',\n    successMessage: translate('Construção atualizada com sucesso', 'Construction updated successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua construção',\n      'Oops, the application found an error while trying to submit your construction',\n    ),\n  });\n\n  return (payload: SubmitPlacingPayload) => {\n    request({\n      action: PLANEJAMENTO_URBANO_ACTIONS.UPDATE_PLACEMENT,\n      ...payload,\n    });\n  };\n}\n","import { invert } from 'lodash';\nimport { useMemo, useState } from 'react';\n// Ant Design Resources\nimport { Button, Flex, Select } from 'antd';\n// Types\nimport type { GamePlayer, GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\nimport { useMock } from 'hooks/useMock';\n// Utils\nimport { LETTERS } from 'utils/constants';\n// Icons\nimport { BrickWallIcon } from 'icons/BrickWallIcon';\nimport { ConeIcon } from 'icons/ConeIcon';\n// Components\nimport { AvatarName, IconAvatar } from 'components/avatars';\nimport { FloatingHandDrawer } from 'components/general/FloatingHand';\nimport { Translate } from 'components/language';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { TurnOrder } from 'components/players';\nimport { Step, type StepProps } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { City, CityLocationsDict } from './utils/types';\nimport { getConeColor } from './utils/helpers';\nimport type { useOnSubmitPlacingAPIRequest, useOnUpdatePlacementAPIRequest } from './utils/api-requests';\nimport { mockAction } from './utils/mocks';\nimport { CityMap } from './components/CityMap';\nimport { ConeHighlight } from './components/Highlights';\nimport { LocationCard } from './components/LocationCard';\n\ntype StepPlaceLocationsProps = {\n  players: GamePlayers;\n  gameOrder: GameOrder;\n  controller: GamePlayer;\n  isTheController: boolean;\n  isTheActivePlayer: boolean;\n  activePlayer: GamePlayer;\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n  placements: number;\n  availableProjectsIds: string[];\n  evaluations: Record<string, string>;\n  planning: Record<string, string>;\n  onSubmitConstruction: ReturnType<typeof useOnSubmitPlacingAPIRequest>;\n  onUpdateConstruction: ReturnType<typeof useOnUpdatePlacementAPIRequest>;\n} & Pick<StepProps, 'announcement'>;\n\nexport function StepPlaceLocations({\n  players,\n  announcement,\n  gameOrder,\n  availableProjectsIds,\n  controller,\n  isTheController,\n  isTheActivePlayer,\n  activePlayer,\n  city,\n  cityLocationsDict,\n  placements,\n  evaluations,\n  planning,\n  onSubmitConstruction,\n  onUpdateConstruction,\n}: StepPlaceLocationsProps) {\n  const { isLoading } = useLoading();\n  const constructionWidth = useCardWidth(placements + 3, { maxWidth: 256 });\n\n  const coneOptions = useMemo(() => {\n    return Array.from({ length: placements }, (_, index) => ({\n      value: LETTERS[index],\n      label: (\n        <Flex justify=\"center\" align=\"center\">\n          <IconAvatar size=\"small\" icon={<ConeIcon color={getConeColor(LETTERS[index])} width={24} />} />\n          {LETTERS[index]}\n        </Flex>\n      ),\n    }));\n  }, [placements]);\n\n  const [playerSelections, setPlayerSelections] = useState<Record<string, string>>(evaluations);\n\n  const mapEvaluations = useMemo(() => {\n    return invert(evaluations);\n  }, [evaluations]);\n\n  const onSelectConstrictionCone = (locationId: string, cone: string) => {\n    const newEvaluation = { ...playerSelections };\n    const existingCone = Object.values(newEvaluation).find((selectedCone) => selectedCone === cone);\n    if (existingCone) {\n      const locationToRemove = Object.keys(newEvaluation).find((key) => newEvaluation[key] === existingCone);\n      if (locationToRemove) {\n        delete newEvaluation[locationToRemove];\n      }\n    }\n    newEvaluation[locationId] = cone;\n\n    onUpdateConstruction({ evaluations: newEvaluation });\n    setPlayerSelections(newEvaluation);\n  };\n\n  const isComplete =\n    Object.keys(playerSelections).length === placements &&\n    new Set(Object.values(playerSelections)).size === placements;\n\n  useMock(() => {\n    if (isTheController) {\n      onSubmitConstruction({\n        evaluations: mockAction(placements, availableProjectsIds),\n      });\n    }\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <StepTitle size=\"small\" wait={isTheActivePlayer}>\n        {isTheActivePlayer ? (\n          <Translate\n            pt={<>Aguarde enquanto os jogadores discutem e decidem onde cada projeto deve ir</>}\n            en={<>Wait while the players discuss and decide where each project should go</>}\n          />\n        ) : (\n          <Translate\n            pt={<>Discutam e decidam onde cada projeto deve ir</>}\n            en={<>Discuss and decide where each project should go</>}\n          />\n        )}\n      </StepTitle>\n\n      <RuleInstruction type={isTheActivePlayer ? 'wait' : 'action'}>\n        <Translate\n          pt={\n            <>\n              No mapa, existem <ConeHighlight>{placements} cones</ConeHighlight> representando onde as\n              terrenos onde os projetos podem ser feitos. <br />O objetivo é fazer as construções de acordo\n              com o que\n              <AvatarName player={activePlayer} /> planejou.\n              <br />\n              <AvatarName player={controller} addressUser /> é o pedreiro e controlará as decisões do grupo.\n            </>\n          }\n          en={\n            <>\n              On the map, there are <ConeHighlight>{placements} cones</ConeHighlight> representing the land\n              where the projects can be built. <br />\n              <br />\n              <AvatarName player={controller} addressUser /> {isTheController ? 'are' : 'is'} the bricklayer\n              and will control the group's decisions.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      {isTheController && (\n        <SpaceContainer>\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            disabled={isLoading || !isComplete}\n            onClick={() => onSubmitConstruction({ evaluations: playerSelections })}\n          >\n            <Translate pt=\"Confirmar Seleções\" en=\"Confirm Selections\" />\n          </Button>\n        </SpaceContainer>\n      )}\n\n      {!isTheController && (\n        <Flex justify=\"center\" className=\"mt-2\" gap={6}>\n          {availableProjectsIds.map((locationId) => (\n            <Flex key={locationId} vertical align=\"center\">\n              <Select\n                options={coneOptions}\n                className=\"full-width\"\n                value={evaluations[locationId]}\n                disabled\n                variant=\"borderless\"\n              />\n              <LocationCard\n                locationId={locationId}\n                cityLocationsDict={cityLocationsDict}\n                width={constructionWidth / 1.75}\n                fontSize=\"small\"\n              />\n              {isTheActivePlayer && (\n                <Select\n                  options={coneOptions}\n                  className=\"full-width\"\n                  value={planning[locationId]}\n                  variant=\"filled\"\n                  disabled\n                />\n              )}\n            </Flex>\n          ))}\n        </Flex>\n      )}\n\n      <CityMap city={city} cityLocationsDict={cityLocationsDict} mapEvaluations={mapEvaluations} />\n\n      <TurnOrder players={players} activePlayerId={activePlayer.id} order={gameOrder} />\n\n      {isTheController && (\n        <FloatingHandDrawer\n          icon={<BrickWallIcon />}\n          title={<Translate pt=\"Construções\" en=\"Constructions\" />}\n        >\n          <Flex justify=\"center\">\n            {availableProjectsIds.map((locationId) => (\n              <Flex key={locationId} vertical align=\"center\">\n                <Select\n                  options={coneOptions}\n                  className=\"full-width\"\n                  placeholder={<Translate pt=\"Selecione um cone\" en=\"Select a cone\" />}\n                  value={playerSelections[locationId]}\n                  onChange={(value) => onSelectConstrictionCone(locationId, value)}\n                  disabled={isLoading}\n                />\n\n                <LocationCard\n                  locationId={locationId}\n                  cityLocationsDict={cityLocationsDict}\n                  width={constructionWidth}\n                />\n              </Flex>\n            ))}\n          </Flex>\n        </FloatingHandDrawer>\n      )}\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useStep } from 'hooks/useStep';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { MapCityZonesIcon } from 'icons/MapCityZonesIcon';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { useOnSubmitPlacingAPIRequest, useOnUpdatePlacementAPIRequest } from './utils/api-requests';\nimport { StepPlaceLocations } from './StepPlaceLocations';\n// Icons\n\nexport function PhasePlacing({ players, state }: PhaseProps) {\n  const { step, setStep } = useStep();\n  const [activePlayer, isTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [controller, isTheController] = useWhichPlayerIsThe('controllerId', state, players);\n  const onSubmitConstruction = useOnSubmitPlacingAPIRequest(setStep);\n  const onUpdateConstruction = useOnUpdatePlacementAPIRequest();\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<MapCityZonesIcon />}\n      title={<Translate pt=\"Construção\" en=\"Construction\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n    >\n      <Instruction>\n        <Translate\n          pt={\n            <>\n              Agora, é hora de colocar as construções de acordo com o planejamento do engenheiro chefe.\n              <br />\n              <AvatarName player={controller} addressUser /> é o responsável por essa etapa.\n            </>\n          }\n          en={\n            <>\n              Now, it's time to place the buildings according to the chief engineer's planning.\n              <br />\n              <AvatarName player={controller} addressUser /> is responsible for this step.\n            </>\n          }\n        />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.PLANEJAMENTO_URBANO.PLACING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepPlaceLocations\n          announcement={announcement}\n          players={players}\n          activePlayer={activePlayer}\n          controller={controller}\n          gameOrder={state.gameOrder}\n          city={state.city}\n          cityLocationsDict={state.cityLocationsDict}\n          placements={state.placements}\n          availableProjectsIds={state.availableProjectsIds}\n          onSubmitConstruction={onSubmitConstruction}\n          onUpdateConstruction={onUpdateConstruction}\n          evaluations={state.evaluations ?? {}}\n          planning={state.planning ?? {}}\n          isTheController={isTheController}\n          isTheActivePlayer={isTheActivePlayer}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { useEffect } from 'react';\nimport { useWindowSize } from 'react-use';\nimport { useControls } from 'react-zoom-pan-pinch';\n// Components\nimport { GridMap } from 'components/toolKits/GridMap';\n// Internal\nimport type { City, CityLocationsDict } from '../utils/types';\nimport { useLocationWidth } from '../utils/custom-hooks';\nimport { MapSlot } from './MapSlot';\n\ntype CityMapSnippetProps = {\n  width: number;\n  height: number;\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n  mapEvaluations?: Record<string, string>;\n  focusedCellId?: string;\n};\n\nexport function CityMapSnippet({\n  city,\n  cityLocationsDict,\n  mapEvaluations,\n  height,\n  width,\n  focusedCellId,\n}: CityMapSnippetProps) {\n  const sizes = useWindowSize();\n  const cellWidth = useLocationWidth(city.width);\n\n  return (\n    <GridMap\n      maxWidth={Math.min(height, sizes.width / 2)}\n      maxHeight={Math.min(width, sizes.height / 2)}\n      grid={city}\n      cellComponent={MapSlot}\n      cellProps={{ cellWidth, cityLocationsDict, mapEvaluations }}\n      additionalContent={<ZoomToLocation focusedCellId={focusedCellId} />}\n    />\n  );\n}\n\nfunction ZoomToLocation({ focusedCellId }: Pick<CityMapSnippetProps, 'focusedCellId'>) {\n  const { zoomToElement } = useControls();\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (focusedCellId) {\n      zoomToElement(`cell-${focusedCellId}`, 1.1);\n    }\n  }, [focusedCellId]);\n\n  return <></>;\n}\n","import { useMeasure } from 'react-use';\n// Ant Design Resources\nimport { DragOutlined } from '@ant-design/icons';\nimport { Divider, Flex, Typography } from 'antd';\n// Types\nimport type { GamePlayer } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport type { SlideShowConfig } from 'hooks/useSlideShow';\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Icons\nimport { AngryMayorIcon } from 'icons/AngryMayorIcon';\nimport { ConeIcon } from 'icons/ConeIcon';\nimport { SealOfApprovalIcon } from 'icons/SealOfApprovalIcon';\n// Components\nimport { AvatarName, IconAvatar } from 'components/avatars';\nimport { DualTranslate, Translate } from 'components/language';\nimport { SlideShow } from 'components/slide-show';\nimport { Step } from 'components/steps';\nimport { StepTitle } from 'components/text';\n// Internal\nimport type { City, CityLocationsDict, GalleryEntry } from './utils/types';\nimport { getConeColor } from './utils/helpers';\nimport { LocationCard } from './components/LocationCard';\nimport { CityMapSnippet } from './components/CityMapSnippet';\n\ntype StepGalleryProps = {\n  activePlayer: GamePlayer;\n  city: City;\n  cityLocationsDict: CityLocationsDict;\n  placements: number;\n  gallery: GalleryEntry[];\n  slideShowConfig: SlideShowConfig;\n};\n\nexport function StepGallery({\n  activePlayer,\n  city,\n  cityLocationsDict,\n  placements,\n  gallery,\n  slideShowConfig,\n}: StepGalleryProps) {\n  useTemporarilyHidePlayersBar();\n  const [ref, { width, height }] = useMeasure<HTMLDivElement>();\n\n  const constructionWidth = useCardWidth(placements + 5, { maxWidth: 256 });\n\n  const galleryEntry = gallery[slideShowConfig.slideIndex];\n  const coneColor = getConeColor(galleryEntry.cone);\n\n  return (\n    <Step fullWidth>\n      <StepTitle size=\"small\">\n        <Translate pt=\"Construções\" en=\"Constructions\" />\n      </StepTitle>\n\n      <SlideShow\n        config={slideShowConfig}\n        barColor={coneColor}\n        leftClassName=\"pu-gallery__map\"\n        rightClassName=\"pu-gallery__info\"\n        nextButtonProps={{ children: <Translate pt=\"Ver Resultado\" en=\"See Results\" /> }}\n      >\n        <div style={{ height: '100%' }} ref={ref}>\n          <CityMapSnippet\n            city={city}\n            cityLocationsDict={cityLocationsDict}\n            width={Math.max(width, 200)}\n            height={Math.max(height, 200)}\n            focusedCellId={galleryEntry.correctCellId}\n          />\n        </div>\n\n        <div>\n          <div className=\"pu-gallery__label\">\n            <Translate pt=\"Projeto\" en=\"Project\" />\n          </div>\n          <div className=\"pu-gallery__construction\">\n            <LocationCard\n              locationId={galleryEntry.locationId}\n              cityLocationsDict={cityLocationsDict}\n              width={constructionWidth}\n              fontSize=\"small\"\n            />\n          </div>\n          <Divider className=\"my-2\" />\n\n          <div className=\"pu-gallery__label\">\n            <Translate pt=\"Plano do Engenheiro Chefe\" en=\"Chief Engineer's Plan\" />{' '}\n            <AvatarName player={activePlayer} />\n          </div>\n\n          <Cone\n            cone={galleryEntry.cone}\n            adjacentLocationsIds={galleryEntry.coneAdjacentLocationsIds}\n            cityLocationsDict={cityLocationsDict}\n          />\n\n          <Divider className=\"my-2\" />\n\n          <div className=\"pu-gallery__label\">\n            <Translate pt=\"Decisão dos Pedreiros\" en=\"Builders' Decision\" />\n          </div>\n\n          <Cone\n            cone={galleryEntry.guess}\n            adjacentLocationsIds={galleryEntry.guessAdjacentLocationsIds}\n            cityLocationsDict={cityLocationsDict}\n          />\n\n          <Divider className=\"my-2\" />\n\n          <div className=\"pu-gallery__label\">\n            <Translate pt=\"Resultado\" en=\"Result\" />\n          </div>\n\n          <div>\n            {galleryEntry.result === 'CORRECT' ? (\n              <Flex gap={8} align=\"center\">\n                <IconAvatar icon={<SealOfApprovalIcon />} size={64} />\n                <Typography.Text italic>\n                  <Translate\n                    pt=\"O público aprovou esse projeto e ele será construído!\"\n                    en=\"The public approved this project and it will be built!\"\n                  />\n                </Typography.Text>\n              </Flex>\n            ) : (\n              <Flex gap={8} align=\"center\">\n                <IconAvatar icon={<AngryMayorIcon />} size={64} />\n                <Typography.Text italic>\n                  <Translate\n                    pt=\"Prefeito: Como vocês podem ser tão burros? Isso é um desastre! Eu tive 2.41% de desaprovação! Vou colocar a construção onde ele quiser!\"\n                    en=\"Mayor: How can you be so dumb? This is a disaster! I had 2.41% disapproval! I'll put the construction wherever I want!\"\n                  />\n                </Typography.Text>\n              </Flex>\n            )}\n          </div>\n        </div>\n      </SlideShow>\n    </Step>\n  );\n}\n\ntype ConeProps = {\n  cone: GalleryEntry['cone'];\n  adjacentLocationsIds: string[];\n  cityLocationsDict: CityLocationsDict;\n};\n\nexport function Cone({ cone, adjacentLocationsIds, cityLocationsDict }: ConeProps) {\n  return (\n    <Flex gap={8} align=\"center\">\n      <Flex justify=\"center\" align=\"center\">\n        {cone}\n        <IconAvatar size={48} icon={<ConeIcon color={getConeColor(cone)} width={48} />} />\n      </Flex>\n      <Divider type=\"vertical\" />\n\n      <Flex vertical>\n        {adjacentLocationsIds.map((locationId) => (\n          <Typography.Text key={locationId}>\n            <DragOutlined /> <DualTranslate>{cityLocationsDict?.[locationId]?.name}</DualTranslate>\n          </Typography.Text>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n","import { useMemo } from 'react';\n// Ant Design Resources\nimport { Button, Typography } from 'antd';\n// Types\nimport type { GameRound } from 'types/game';\nimport type { GamePlayers } from 'types/player';\n// Hooks\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Components\nimport { HostNextPhaseButton } from 'components/host';\nimport { Translate } from 'components/language';\nimport { Container } from 'components/layout/Container';\nimport { SpaceContainer } from 'components/layout/SpaceContainer';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { TurnOrder } from 'components/players';\nimport { Step } from 'components/steps';\nimport { RuleInstruction, StepTitle } from 'components/text';\n// Internal\nimport type { CityLocationsDict, GalleryEntry } from './utils/types';\nimport { LocationCard } from './components/LocationCard';\n\ntype StepResultsProps = {\n  players: GamePlayers;\n  round: GameRound;\n  onGoBack: () => void;\n  isLastRound?: boolean;\n  groupScore: number;\n  correct: number;\n  status: 'CONTINUE' | 'PERFECT';\n  placements: number;\n  cityLocationsDict: CityLocationsDict;\n  gallery: GalleryEntry[];\n  gameOrder: GameOrder;\n  controllerId: PlayerId;\n};\n\nexport function StepResults({\n  players,\n  onGoBack,\n  round,\n  status,\n  correct,\n  placements,\n  gallery,\n  cityLocationsDict,\n  gameOrder,\n  controllerId,\n  groupScore,\n}: StepResultsProps) {\n  const correctProjects = useMemo(() => gallery.filter((entry) => entry.result === 'CORRECT'), [gallery]);\n  const incorrectProjects = useMemo(() => gallery.filter((entry) => entry.result === 'INCORRECT'), [gallery]);\n  const constructionWidth = useCardWidth(placements + 5, { maxWidth: 256 });\n\n  return (\n    <Step fullWidth>\n      <StepTitle size=\"small\">\n        <Translate pt=\"Resultado\" en=\"Summary\" />\n      </StepTitle>\n\n      <RuleInstruction type=\"scoring\">\n        <Translate\n          pt={\n            <>\n              O grupo ganha um ponto por cada projeto construído corretamente.\n              <br />\n              Nessa rodada, ganhamos <PointsHighlight>{correct}</PointsHighlight>. Total{' '}\n              <PointsHighlight>{groupScore}</PointsHighlight>.\n            </>\n          }\n          en={\n            <>\n              The group earns one point for each project built correctly.\n              <br />\n              This round, we earned <PointsHighlight>{correct}</PointsHighlight>. Total{' '}\n              <PointsHighlight>{groupScore}</PointsHighlight>.\n            </>\n          }\n        />\n      </RuleInstruction>\n\n      <Container title={<Translate pt=\"Projetos Corretos\" en=\"Correct Projects\" />}>\n        {correctProjects.map((galleryEntry) => (\n          <LocationCard\n            key={galleryEntry.locationId}\n            locationId={galleryEntry.locationId}\n            cityLocationsDict={cityLocationsDict}\n            width={constructionWidth}\n            fontSize=\"small\"\n          />\n        ))}\n        {correctProjects.length === 0 && (\n          <RuleInstruction type=\"alert\">\n            <Typography.Text>\n              <Translate pt=\"Nenhum projeto construído corretamente\" en=\"No project built correctly\" />\n            </Typography.Text>\n          </RuleInstruction>\n        )}\n      </Container>\n\n      {incorrectProjects.length > 0 && (\n        <Container title={<Translate pt=\"Projetos Incorretos\" en=\"Incorrect Projects\" />}>\n          {incorrectProjects.map((galleryEntry) => (\n            <LocationCard\n              key={galleryEntry.locationId}\n              locationId={galleryEntry.locationId}\n              cityLocationsDict={cityLocationsDict}\n              width={constructionWidth}\n              fontSize=\"small\"\n            />\n          ))}\n        </Container>\n      )}\n\n      {incorrectProjects.length > 0 && (\n        <RuleInstruction type=\"event\">\n          <Translate\n            pt=\"Quando um projeto não é construído corretamente, o prefeito coloca o projeto em uma localização diagonal aleatória, fazendo o jogo ficar mais difícil.\"\n            en=\"When a project is not built correctly, the mayor places the project in a random diagonal location, making the game more difficult.\"\n          />\n        </RuleInstruction>\n      )}\n\n      {status === 'PERFECT' && (\n        <RuleInstruction type=\"event\">\n          <Translate\n            pt={\n              <>\n                Todos os projetos foram construídos corretamente! Parabéns!\n                <br />A partir de agora, serão {placements} projetos por rodada.\n                <br />\n                <PointsHighlight>1 ponto</PointsHighlight> extra!\n              </>\n            }\n            en={\n              <>\n                All projects were built correctly! Congratulations!\n                <br />\n                From now on, there will be {placements} projects per round.\n                <br />\n                <PointsHighlight>1 bonus</PointsHighlight> point!\n              </>\n            }\n          />\n        </RuleInstruction>\n      )}\n\n      <TurnOrder players={players} activePlayerId={controllerId} order={gameOrder} />\n\n      <SpaceContainer>\n        <Button onClick={onGoBack}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </SpaceContainer>\n      <HostNextPhaseButton round={round} />\n    </Step>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Hooks\nimport { useSlideShow } from 'hooks/useSlideShow';\nimport { useStep } from 'hooks/useStep';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { MapCityIcon } from 'icons/MapCityIcon';\n// Components\nimport { Translate } from 'components/language';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\n// Internal\nimport { SLIDE_DURATION } from './utils/constants';\nimport { StepGallery } from './StepGallery';\nimport { StepResults } from './StepResults';\n// Icons\n\nexport function PhaseResolution({ players, state }: PhaseProps) {\n  const { step, goToNextStep, goToPreviousStep } = useStep(0);\n  const slideShowConfig = useSlideShow({\n    length: state.gallery.length,\n    slideDuration: SLIDE_DURATION,\n    onExpire: goToNextStep,\n  });\n\n  const onGoBack = () => {\n    slideShowConfig.reset();\n    goToPreviousStep();\n  };\n  const [activePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  return (\n    <PhaseContainer phase={state?.phase} allowedPhase={PHASES.PLANEJAMENTO_URBANO.RESOLUTION}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          icon={<MapCityIcon />}\n          title={<Translate pt=\"Resultado\" en=\"Results\" />}\n          currentRound={state?.round?.current}\n          type=\"block\"\n          unskippable\n          duration={3}\n          onClose={goToNextStep}\n        >\n          <Instruction>\n            <Translate\n              pt={<>Vamos ver se vocês, pedreiros, pensaram como o engenheiro chefe,</>}\n              en={<>Let's see if you, builders, thought like the chief engineer,</>}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepGallery\n          activePlayer={activePlayer}\n          city={state.city}\n          cityLocationsDict={state.cityLocationsDict}\n          placements={state.placements}\n          gallery={state.gallery}\n          slideShowConfig={slideShowConfig}\n        />\n\n        <StepResults\n          players={players}\n          round={state.round}\n          cityLocationsDict={state.cityLocationsDict}\n          placements={state.placements}\n          gallery={state.gallery}\n          correct={state.correct}\n          status={state.status}\n          onGoBack={onGoBack}\n          groupScore={state.groupScore}\n          gameOrder={state.gameOrder}\n          controllerId={state.controllerId}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Types\nimport type { PhaseProps } from 'types/game';\n// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Translate } from 'components/language';\nimport { Container } from 'components/layout/Container';\n// Internal\nimport { CityMap } from './components/CityMap';\n// import { Achievements } from 'components/general/Achievements';\n// Internal\n// import { getReference } from './utils/helpers';\n// import achievementsReference from './utils/achievements';\n\nexport function PhaseGameOver({ state, players }: PhaseProps) {\n  return (\n    <GameOverWrapper state={state} players={players} announcementIcon={<FlagIcon />}>\n      {/* <Achievements\n        achievements={state.achievements}\n        players={players}\n        reference={achievementsReference}\n      /> */}\n\n      <Container title={<Translate pt=\"Cidade Inaugurada\" en=\"Final City\" />}>\n        {state.city && state.cityLocationsDict && (\n          <CityMap city={state.city} cityLocationsDict={state.cityLocationsDict} />\n        )}\n      </Container>\n    </GameOverWrapper>\n  );\n}\n","// Types\nimport type { GameState } from 'types/game';\n// Utils\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PageError } from 'components/errors';\nimport { LoadingPage } from 'components/loaders';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { Session } from 'components/session';\n// Internal\nimport { PhasePlanning } from './PhasePlanning';\nimport { PhasePlacing } from './PhasePlacing';\nimport { PhaseResolution } from './PhaseResolution';\nimport { PhaseGameOver } from './PhaseGameOver';\n// Sass\nimport './utils/styles.scss';\n\nfunction getActiveComponent(state: GameState) {\n  // If phase is not defined, it is likely that the game is still loading\n  if (state && !state.phase) return LoadingPage;\n\n  switch (state.phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.PLANEJAMENTO_URBANO.PLANNING:\n      return PhasePlanning;\n    case PHASES.PLANEJAMENTO_URBANO.PLACING:\n      return PhasePlacing;\n    case PHASES.PLANEJAMENTO_URBANO.RESOLUTION:\n      return PhaseResolution;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionPlanejamentoUrbano() {\n  return (\n    <Session gameCollection={GAME_COLLECTION.PLANEJAMENTO_URBANO} getActiveComponent={getActiveComponent} />\n  );\n}\n\nexport default SessionPlanejamentoUrbano;\n","import { useEffect, useState } from 'react';\n\nexport type SlideShowConfig = {\n  /**\n   * The total number of slides\n   */\n  length: number;\n  /**\n   * The duration of each slide\n   */\n  slideDuration?: number;\n  /**\n   * The index of the current slide\n   * @default 0\n   **/\n  slideIndex: number;\n  /**\n   * Set the index of the current slide\n   */\n  setSlideIndex: React.Dispatch<React.SetStateAction<number>>;\n  /**\n   * Flag to indicate if this is the first run through of the gallery\n   */\n  isFirstGalleryRunThrough: boolean;\n  /**\n   * Set the flag to indicate if this is the first run through of the gallery\n   */\n  setIsFirstGalleryRunThrough: React.Dispatch<React.SetStateAction<boolean>>;\n  /**\n   * Callback function to execute when the slide show expires\n   */\n  onExpire: () => void;\n  /**\n   * Reset the slide show to the first slide\n   */\n  reset: () => void;\n};\n\n/**\n * Controls slide show\n * @param length\n */\nexport function useSlideShow(options: {\n  length: number;\n  slideDuration: number;\n  onExpire: () => void;\n}): SlideShowConfig {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && slideIndex === options.length - 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [isFirstGalleryRunThrough, slideIndex, options.length]);\n\n  return {\n    ...options,\n    slideIndex,\n    setSlideIndex,\n    reset: () => setSlideIndex(0),\n    isFirstGalleryRunThrough,\n    setIsFirstGalleryRunThrough,\n  };\n}\n","import { useEffect, useState } from 'react';\n// Types\nimport type { GamePlayers, GamePlayer } from 'types/player';\n// Utils\nimport { PLACEHOLDER_PLAYER } from 'utils/constants';\n// Internal\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: GamePlayers = {},\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>(PLACEHOLDER_PLAYER);\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function GarbageIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#f7f3f1\"\n        d=\"M199.02 408.89h-19.67a5 5 0 01-5-5V290.5a5 5 0 015-5h19.67a5 5 0 015 5v113.4a5 5 0 01-5 5z\"\n      ></path>\n      <path\n        fill=\"#e38523\"\n        d=\"M411.84 215.02c-1.39-9.14-9.04-16.98-18.13-18.6-9.15-1.62-18.34 3.41-23.99 10.73a5.25 5.25 0 01-8.34 0c-5.64-7.32-14.84-12.35-23.98-10.72-9.1 1.61-16.75 9.45-18.13 18.59-.94 6.17.79 12.55 3.94 17.94 5.86 10.03 16.25 15.4 23.54 24.12h37.6c7.3-8.72 17.68-14.1 23.55-24.12 3.14-5.39 4.87-11.77 3.94-17.94z\"\n      ></path>\n      <path\n        fill=\"#e9a52d\"\n        d=\"M365.55 245.72c-39.32 0-71.2 55.63-71.2 91.73s31.88 65.38 71.2 65.38 71.2-29.27 71.2-65.37-31.88-91.74-71.2-91.74z\"\n      ></path>\n      <path\n        fill=\"#e38523\"\n        d=\"M388.03 251.79c18.94 19.47 31.4 49.66 31.4 72.23 0 36.11-31.88 65.38-71.2 65.38-13.4 0-25.92-3.4-36.62-9.3 13.05 13.9 32.37 22.73 53.94 22.73 39.32 0 71.2-29.27 71.2-65.38 0-28.89-20.42-70.28-48.72-85.66z\"\n      ></path>\n      <path\n        fill=\"#5ea570\"\n        d=\"M104.99 268.48a18.95 18.95 0 00-19.37-9.33c-7.57 1.33-13.3 7.84-15.62 15.13a4.34 4.34 0 01-6.49 2.36c-6.46-4.09-15.04-5.4-21.7-1.55a18.95 18.95 0 00-8.83 19.6c1.02 5.07 4.17 9.54 8.15 12.84 7.4 6.14 17 7.38 25.13 12.1l29.26-10.65c3.2-8.85 9.76-15.97 11.48-25.43.93-5.08.46-10.53-2.01-15.07z\"\n      ></path>\n      <path\n        fill=\"#6dc17d\"\n        d=\"M78.8 308.56c-36.94 13.45-47.87 76.62-35.52 110.55s52.31 50.54 89.26 37.1 56.89-51.86 44.54-85.8-61.33-75.3-98.28-61.85z\"\n      ></path>\n      <path\n        fill=\"#a87c72\"\n        d=\"M476.3 403.63a4.19 4.19 0 01-3.12-4.88 51.27 51.27 0 00-64.43-59.42 6.9 6.9 0 01-7.18-2.2 98.46 98.46 0 00-75.29-34.88 98.29 98.29 0 00-65.88 25.21 6.26 6.26 0 01-6.31 1.21 78.15 78.15 0 00-26.5-4.6 78.24 78.24 0 00-61.63 29.96 3.86 3.86 0 01-5.7.43 42.62 42.62 0 00-65.02 7.93 5.7 5.7 0 01-5.62 2.56 48.62 48.62 0 00-54.36 35.59 6.8 6.8 0 01-4.1 4.56A37.38 37.38 0 007.5 439.87v23.96a5 5 0 005 5h487a5 5 0 005-5v-23.96a37.36 37.36 0 00-28.2-36.24z\"\n      ></path>\n      <path\n        fill=\"#9a695e\"\n        d=\"M476.3 403.63a4.19 4.19 0 01-3.12-4.88 51.27 51.27 0 00-62.74-59.88 51.28 51.28 0 0137.74 59.88 4.19 4.19 0 003.12 4.88 37.36 37.36 0 0128.2 36.24v23.95a5 5 0 01-5 5h25a5 5 0 005-5v-23.95a37.36 37.36 0 00-28.2-36.24z\"\n      ></path>\n      <path\n        fill=\"#de5791\"\n        d=\"M249.31 269.6l8.26 22.67 33.77-12.3-8.26-22.67a7.59 7.59 0 00-9.72-4.53l-19.51 7.1a7.59 7.59 0 00-4.54 9.72z\"\n      ></path>\n      <path\n        fill=\"#91dafa\"\n        d=\"M318.11 322.21c-1.78-4.88-.66-10.16 2.5-14.23a7.77 7.77 0 001.04-7.4l-4.74-13.04a15.85 15.85 0 00-20.32-9.48l-44.28 16.12a15.85 15.85 0 00-9.47 20.32l4.74 13.03a7.77 7.77 0 005.57 5c5.03 1.1 9.27 4.42 11.05 9.3s.66 10.16-2.49 14.23a7.77 7.77 0 00-1.05 7.4l23.96 65.84 74.07-26.96-23.96-65.83a7.77 7.77 0 00-5.57-5c-5.02-1.09-9.27-4.41-11.05-9.3z\"\n      ></path>\n      <path\n        fill=\"#6cbff8\"\n        d=\"M334.73 336.5a7.77 7.77 0 00-5.57-5c-5.02-1.08-9.27-4.4-11.05-9.29s-.66-10.16 2.5-14.23a7.77 7.77 0 001.04-7.4l-4.74-13.04a15.85 15.85 0 00-20.32-9.48l-18.14 6.6c7.97-2.9 16.86 1.42 19.86 9.65l4.74 13.03c.9 2.5.61 5.3-.95 7.38-3.03 4.02-4.06 9.27-2.28 14.15s5.94 8.24 10.84 9.37a7.84 7.84 0 015.47 5.04l23.96 65.83 18.6-6.77z\"\n      ></path>\n      <path\n        fill=\"#a87c72\"\n        d=\"M410.44 432.03a26.44 26.44 0 00-31.2-26 4.75 4.75 0 01-5.44-3.55 45.62 45.62 0 00-82.3-13.59 5.38 5.38 0 01-7.04 1.77 26.45 26.45 0 00-39.09 23.23v35h165.07z\"\n      ></path>\n      <path d=\"M481.06 397.2a58.85 58.85 0 00-36.92-63.4 95.22 95.22 0 00-3.21-19.66 7.5 7.5 0 00-14.5 3.86 86.2 86.2 0 012.36 12.12 58.59 58.59 0 00-21.72 1.9 106.05 106.05 0 00-79.55-37.26l-3.56-9.8a23.39 23.39 0 00-1.78-3.78c10.27-14.3 25.77-27.96 43.37-27.96 20.13 0 37.28 17.5 47.81 34.63a7.5 7.5 0 0012.78-7.85c-7.31-11.9-15.79-21.52-24.9-28.52 4.77-4.14 9.53-8.59 13.13-14.74 4.27-7.3 6-15.42 4.89-22.85-1.86-12.24-12.06-22.69-24.24-24.85-10.3-1.84-21.6 2.6-29.47 11.4-7.86-8.8-19.16-13.24-29.45-11.4-12.2 2.16-22.4 12.61-24.24 24.85-1.13 7.42.6 15.53 4.87 22.85 3.6 6.17 8.39 10.62 13.18 14.76a98.34 98.34 0 00-19.11 19.84 23.28 23.28 0 00-14.95-.9l-5.72-15.7a15.1 15.1 0 00-19.34-9.03l-19.5 7.1c-3.8 1.38-6.82 4.15-8.52 7.8s-1.88 7.76-.5 11.54l5.71 15.72a23.15 23.15 0 00-11.41 11.33 23.19 23.19 0 00-.81 17.75 86.77 86.77 0 00-24.24 1.11v-27.55c0-6.9-5.6-12.5-12.5-12.5h-19.67c-6.9 0-12.5 5.6-12.5 12.5v48.47c-10.1-12.15-22.8-22.8-36.02-30.04a88.17 88.17 0 00-22.46-8.8c2.46-4.44 4.95-9.42 6-15.24 1.32-7.17.33-14.28-2.8-20.02a26.28 26.28 0 00-27.25-13.12c-8.7 1.53-16.15 7.8-20.12 16.7-8.7-4.2-18.62-4.22-26.14.14-9.33 5.41-14.56 17-12.43 27.56 1.28 6.39 5.09 12.47 10.7 17.14 4.57 3.79 9.7 6 14.43 7.82a85.38 85.38 0 00-10.06 17.51c-6.65 15.35-10.08 33.6-9.74 51.62a55.84 55.84 0 00-2.85 8A44.63 44.63 0 000 439.86v23.96c0 6.9 5.6 12.5 12.5 12.5h86.87a7.5 7.5 0 100-15H15v-21.46a29.71 29.71 0 0118.93-27.8 14.34 14.34 0 008.58-9.61 37.14 37.14 0 012.81-7.53 41.14 41.14 0 0143.2-22.56 13.26 13.26 0 0013.02-5.9 35.04 35.04 0 0129.52-16.08 35 35 0 0124.05 9.52 11.39 11.39 0 0016.74-1.24 71 71 0 0170.12-25.62 15.01 15.01 0 009.6 6.81c2.71.59 4.75 2.24 5.58 4.54.84 2.29.34 4.86-1.37 7.06a15.35 15.35 0 00-2.17 14.58l5.9 16.22a34 34 0 00-21.64 31.63v15.45a7.5 7.5 0 1015 0V413.9a18.97 18.97 0 0128-16.65 12.92 12.92 0 0016.9-4.23 38.02 38.02 0 0131.87-17.23 38.08 38.08 0 0136.9 28.57 12.3 12.3 0 0014.04 9.05 18.96 18.96 0 0122.36 18.63v3a7.5 7.5 0 1015 0v-3a33.97 33.97 0 00-37.54-33.75 53.03 53.03 0 00-26.77-31.78l-11.86-32.57a15.17 15.17 0 00-11.02-9.75c-2.72-.6-4.76-2.25-5.6-4.54-.83-2.29-.33-4.86 1.36-7.05.68-.87 1.25-1.82 1.71-2.82a91.08 91.08 0 0167.62 32.2 14.41 14.41 0 0014.99 4.57 43.82 43.82 0 0155 50.7 11.68 11.68 0 008.63 13.66A29.82 29.82 0 01497 439.87v21.46H134.37a7.5 7.5 0 100 15H499.5c6.9 0 12.5-5.6 12.5-12.5v-23.96a44.8 44.8 0 00-30.94-42.67zM196.52 293v29.35a84.97 84.97 0 00-14.67 7.38V293zm-156.19.2a11.54 11.54 0 015.25-11.62c4.23-2.45 10.03-1.06 13.93 1.42a11.8 11.8 0 0010.41 1.1 11.78 11.78 0 007.23-7.55c1.4-4.37 4.95-9.17 9.76-10.01a11.54 11.54 0 0111.5 5.52c1.48 2.73 1.91 6.33 1.21 10.15-.78 4.32-3.09 8.4-5.53 12.73-.65 1.15-1.3 2.33-1.95 3.53-5.53.2-10.85 1.2-15.9 3.04a51.38 51.38 0 00-14.1 7.9c-5.99-2.38-11.98-4.13-16.22-7.65-3-2.48-4.98-5.52-5.59-8.55zm49.24 64.17a56.06 56.06 0 00-42.29 11.77c4.45-28.7 19.1-48.08 34.08-53.53 19.2-6.99 44.04 4.24 63.06 21.59a50.24 50.24 0 00-13.36-1.81 49.97 49.97 0 00-41.49 21.98zm240.12-128.2c-2.55-4.36-3.62-8.98-3-13.03.9-5.97 6.07-11.27 12.03-12.33 5.67-1 12.23 2.1 16.72 7.92 2.44 3.17 6.13 4.98 10.11 4.98s7.67-1.81 10.1-4.98c4.5-5.82 11.07-8.92 16.74-7.91 5.95 1.05 11.13 6.35 12.03 12.32.61 4.04-.46 8.67-3 13.04-3.18 5.42-8.47 9.61-13.66 14.1a53.19 53.19 0 00-22.21-5.06 53.04 53.04 0 00-22.18 5.08c-5.13-4.43-10.52-8.7-13.68-14.13zm-73.28 37.74l19.51-7.1c.05-.02.1 0 .12.06l5.68 15.62-19.67 7.16-5.69-15.62c-.01-.04.01-.1.05-.12zm71.1 71.9c.02.02.12.1.17.26l8.03 22.06a52.98 52.98 0 00-49.4 22.06 34 34 0 00-11.62-3.11l-6.99-19.19c-.05-.15-.03-.27-.06-.24 4.85-6.27 6.2-14.26 3.61-21.38-2.59-7.13-8.76-12.4-16.44-14.05a.58.58 0 01-.18-.26l-4.74-13.03a8.3 8.3 0 01.27-6.4 8.28 8.28 0 014.72-4.3l44.27-16.12a8.37 8.37 0 0110.71 5l4.75 13.03.02.11c0 .06 0 .11.02.16-4.84 6.27-6.18 14.26-3.59 21.37a22.3 22.3 0 0016.45 14.04zM167.72 146.83a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.74-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.42c6.81 4.61 7.4 15.66 5.08 23.97-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.89 16.8-6.1 20.03 1.17 34.5 9.25 40.79zm83.85 0a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.74-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.43c6.8 4.6 7.4 15.65 5.08 23.96-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.9 16.8-6.09 20.03 1.18 34.5 9.26 40.79zm83.85 0a7.47 7.47 0 0010.52-1.3 7.5 7.5 0 00-1.3-10.53c-6.48-5.05-6.74-15.99-4.12-24.59 1.5-4.94 3.75-9.74 6.13-14.81 2.69-5.75 5.47-11.7 7.3-18.2 5.35-19.12-1.73-34.09-11.13-40.44a7.5 7.5 0 00-8.4 12.42c6.81 4.61 7.4 15.66 5.08 23.97-1.49 5.31-3.9 10.45-6.44 15.89-2.5 5.33-5.07 10.84-6.89 16.8-6.1 20.03 1.17 34.5 9.25 40.79z\"></path>\n    </svg>\n  );\n}\n","export function HandOfCardsIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffcbbe\"\n        d=\"M264.64 146.27c-.48.74-.94 1.49-1.4 2.27-14.58 24.74 6.45 45.81 6.45 45.81l42.82 42.84c-13.18 49.55 10.6 77.06 10.6 77.06l-14.15 4.26L208.86 398l37 37a133.18 133.18 0 0066.33 36.05 82.51 82.51 0 0141.1 22.32l8.19 8.19 129.21-129.24z\"\n      ></path>\n      <path\n        fill=\"#eaac9d\"\n        d=\"M373.41 473.24a82.28 82.28 0 00-41.11-22.32 133.16 133.16 0 01-66.35-36.06l-22.76-22.77 68.17-70.43s11.76-7.41 19.45.55l-7.69-8-14.15 4.26-77.67 61.73-22.45 17.8 37 37a133.24 133.24 0 0066.34 36.05 82.49 82.49 0 0141.11 22.32l8.19 8.19 20.13-20.13z\"\n      ></path>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M410.19 282.56L251.6 330.32a13.52 13.52 0 01-16.84-9.05L159.19 70.4a13.52 13.52 0 019.05-16.84L326.9 5.81a13.52 13.52 0 0116.84 9.05l75.52 250.86a13.5 13.5 0 01-9.07 16.84z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M326.9 5.81L313.11 10l62.45 207.4a58.41 58.41 0 01-39.11 72.79l-101.82 30.66.13.42a13.52 13.52 0 0016.84 9.05l158.59-47.76a13.5 13.5 0 009-16.84L343.74 14.86a13.53 13.53 0 00-16.84-9z\"\n      ></path>\n      <path\n        fill=\"#da9438\"\n        d=\"M362.93 169.84l4.87 38a42.58 42.58 0 01-29.95 46.17 29.27 29.27 0 01-22.27-2.24 1.51 1.51 0 00-2.05.61 29.21 29.21 0 01-17.34 14.2 42.56 42.56 0 01-50.46-21.95l-16.94-34.41a36.25 36.25 0 0149.67-47.95 12.24 12.24 0 0016.57-5 36.25 36.25 0 0167.89 12.55z\"\n      ></path>\n      <path fill=\"#d80a61\" d=\"M364.19 179.56l-1.24-9.72a36.1 36.1 0 00-6.76-16.94z\"></path>\n      <path\n        fill=\"#86f1a7\"\n        d=\"M250.87 159.5a36.2 36.2 0 0127.6 2.77 12.24 12.24 0 0016.57-5 36.25 36.25 0 0159.45-6.46l-19.18-63.7a3.21 3.21 0 00-4-2.14l-123 37a3.19 3.19 0 00-2.15 4l19.19 63.72a36.21 36.21 0 0125.52-30.19zm116.93 48.38a42.58 42.58 0 01-29.95 46.17 29.27 29.27 0 01-22.27-2.24 1.51 1.51 0 00-2.05.61 29.21 29.21 0 01-17.34 14.16 42.56 42.56 0 01-50.46-21.95l-10-20.23 21.3 70.74a3.2 3.2 0 004 2.14l123-37a3.21 3.21 0 002.14-4l-21.29-70.74z\"\n      ></path>\n      <path\n        fill=\"#64b57d\"\n        d=\"M386.19 256.26L377.72 228a58.34 58.34 0 01-8.2 36.65l14.57-4.38a3.21 3.21 0 002.14-4z\"\n      ></path>\n      <path d=\"M329.81 80l-123 37a8.45 8.45 0 00-5.62 10.5l18.88 62.71a41.4 41.4 0 004.08 22.32l6.8 13.8 21.17 70.32a8.43 8.43 0 0010.5 5.64l123-37a8.45 8.45 0 005.64-10.51l-21.17-70.32-1.95-15.26a41.42 41.42 0 00-8.95-20.89L340.32 85.6a8.45 8.45 0 00-10.51-5.6zm-89.3 142.21c0-.06 0-.11-.07-.16l-6.95-14.1a31 31 0 0142.5-41 17.49 17.49 0 0023.66-7.12 31 31 0 0158.09 10.74c2.75 21.51 1.79 14.22 2 15.76l2.86 22.29A37.23 37.23 0 01336.34 249a23.81 23.81 0 01-18.28-1.84 6.76 6.76 0 00-9.14 2.76 23.9 23.9 0 01-14.23 11.62 37.21 37.21 0 01-44.25-19.25zm90.37-131.6l14 46.44a41.47 41.47 0 00-54.24 17.45l-3.95-13.12a14.45 14.45 0 013.94-14.75 5.231 5.231 0 10-7.18-7.61 24.84 24.84 0 00-6.78 25.38l4 13.12a41.48 41.48 0 00-54.87 15.4l-14-46.45 119.08-35.9zM261.5 291.69l-9-29.76a47.69 47.69 0 0045.17 9.67 34.29 34.29 0 0018.6-13.66 34.21 34.21 0 0023 1.12 47.63 47.63 0 0032.32-33l9 29.76-119.09 35.87z\"></path>\n      <path d=\"M420.07 282.38a18.82 18.82 0 001.5-1.84l.08-.11.48-.72.23-.37.24-.41c2-3.54 3.23-8.39 1.72-14.75l-2.21-7.18-3.08-10.21-17.84-59.21-3.07-10.21-6-19.94-3.21-10.65-3.68-12.21-27.5-91.36-9-29.86A18.77 18.77 0 00325.39.8l-80.1 24.11a5.24 5.24 0 103 10l80.1-24.12a8.29 8.29 0 0110.32 5.55l75.52 250.86a8.29 8.29 0 01-5.54 10.32L340.77 298l-25.25 7.6-65.43 19.7a8.29 8.29 0 01-10.32-5.54L164.25 68.89a8.29 8.29 0 015.54-10.32L224.92 42a5.24 5.24 0 00-3-10l-55.13 16.6a18.77 18.77 0 00-12.6 23.31l75.53 250.87a18.77 18.77 0 0023.36 12.55l41.62-12.53 14.23-4.29 10-3 17.65-5.32 10-3 23.78-7.19 9-2.71 35.17-10.59a20.2 20.2 0 005.54-4.32z\"></path>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M319.49 304.06l-130 102.65a13.52 13.52 0 01-19-2.23L8.19 198.86a13.52 13.52 0 012.23-19l130-102.65a13.51 13.51 0 0119 2.23l162.3 205.63a13.54 13.54 0 01-2.23 18.99z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M140.38 77.22l-11.3 8.92 134.25 170a58.45 58.45 0 01-9.65 82.08l-83.49 65.91.27.35a13.52 13.52 0 0019 2.23l130-102.65a13.54 13.54 0 002.23-19L159.36 79.45a13.51 13.51 0 00-19-2.23z\"\n      ></path>\n      <path\n        fill=\"#f4dd45\"\n        d=\"M234.11 216.57l18.5 33.6a42.57 42.57 0 01-10.91 53.93 29.21 29.21 0 01-21.51 6.09 1.52 1.52 0 00-1.68 1.33 29.19 29.19 0 01-10.92 19.53 42.55 42.55 0 01-55-1.89l-28.4-25.79a36.25 36.25 0 0128.61-62.83 12.25 12.25 0 0013.58-10.73 36.24 36.24 0 0167.75-13.24z\"\n      ></path>\n      <path fill=\"#d80a61\" d=\"M238.84 225.15l-4.73-8.58a36 36 0 00-12.52-13.27z\"></path>\n      <path\n        fill=\"#7ad0df\"\n        d=\"M126.08 248.09a36.22 36.22 0 0126.7-7.55 12.25 12.25 0 0013.58-10.73A36.25 36.25 0 01219.28 202l-41.23-52.22a3.2 3.2 0 00-4.5-.53L72.72 228.84a3.21 3.21 0 00-.53 4.5l41.24 52.22a36.2 36.2 0 0112.65-37.47zm126.53 2.08a42.57 42.57 0 01-10.91 53.93 29.21 29.21 0 01-21.51 6.09 1.52 1.52 0 00-1.68 1.33 29.19 29.19 0 01-10.92 19.53 42.55 42.55 0 01-55-1.89L135.88 314l45.78 58a3.2 3.2 0 004.49.53l100.84-79.64a3.21 3.21 0 00.53-4.5l-45.78-58z\"\n      ></path>\n      <path\n        fill=\"#64abb8\"\n        d=\"M287.52 288.4l-18.33-23.18a58.36 58.36 0 015.83 37.1l11.94-9.43a3.2 3.2 0 00.53-4.49z\"\n      ></path>\n      <path d=\"M170.31 145.12L69.48 224.74a8.44 8.44 0 00-1.4 11.84L108.66 288a41.35 41.35 0 0012 19.26l11.38 10.34 45.51 57.64a8.45 8.45 0 0011.85 1.4L290.19 297a8.44 8.44 0 001.39-11.85l-45.51-57.64L238.7 214a41.46 41.46 0 00-16-16.13l-40.51-51.36a8.44 8.44 0 00-11.88-1.39zm-30.85 165.06l-.13-.11-11.64-10.57a31 31 0 0124.5-53.77 17.49 17.49 0 0019.39-15.31 31 31 0 0158-11.33c10.45 19 6.89 12.56 7.66 13.92l10.84 19.68a37.22 37.22 0 01-9.57 47.3 23.84 23.84 0 01-17.68 5 6.75 6.75 0 00-7.49 5.92 23.89 23.89 0 01-9 16 37.22 37.22 0 01-48.23-1.67zm35.73-155.59l30.06 38.07a41.47 41.47 0 00-44 36.15l-8.49-10.75a14.45 14.45 0 01-1.75-15.17 5.24 5.24 0 00-9.48-4.45 24.87 24.87 0 003 26.1l8.49 10.75a41.49 41.49 0 00-45.37 34.47l-30.09-38.07 97.63-77.1zm9.31 212.55l-19.26-24.39a47.67 47.67 0 0045.56-7.59 34.22 34.22 0 0012.28-19.53 34.24 34.24 0 0021.85-7.42 47.66 47.66 0 0017.95-42.56L282.19 290l-97.64 77.1z\"></path>\n      <path d=\"M328.59 300.27a22 22 0 00.72-2.26v-.13c.07-.28.13-.57.18-.85s.06-.29.08-.43.05-.31.07-.46c.58-4-.07-9-3.81-14.35l-4.66-5.9-6.61-8.37L276.19 219l-6.61-8.37-12.9-16.34-6.9-8.74-7.9-10-59.12-74.87-19.29-24.47a18.77 18.77 0 00-26.34-3.1L71.48 125a5.24 5.24 0 006.49 8.22l65.65-51.84a8.3 8.3 0 0111.64 1.37l162.35 205.56a8.29 8.29 0 01-1.37 11.69l-55.69 44-20.68 16.34-53.63 42.26a8.29 8.29 0 01-11.64-1.37L12.25 195.61A8.29 8.29 0 0113.61 184l45.19-35.7a5.233 5.233 0 10-6.49-8.21L7.13 175.76a18.77 18.77 0 00-3.1 26.34l162.36 205.62a18.77 18.77 0 0026.33 3.1l34.11-26.94 11.67-9.21 8.21-6.48 14.48-11.43 8.22-6.48 19.44-15.35 7.37-5.82 28.83-22.76a20.26 20.26 0 003.54-6.08z\"></path>\n      <path d=\"M63.25 187.7l-.42-20.7a5.141 5.141 0 00-10.28.21l.37 17.79-17.2-4.47a5.164 5.164 0 10-2.58 10l20 5.2.42 20.66a5.14 5.14 0 005.25 5 5.06 5.06 0 003.07-1.1 5.12 5.12 0 002-4.14l-.36-17.76 17.19 4.47a5.14 5.14 0 102.59-9.95z\"></path>\n      <path\n        fill=\"#f1f4f6\"\n        d=\"M345.38 281.81l-147 76.3a13.51 13.51 0 01-18.22-5.77L59.44 119.81a13.53 13.53 0 015.75-18.23l147-76.3a13.51 13.51 0 0118.22 5.77l120.78 232.53a13.53 13.53 0 01-5.81 18.23z\"\n      ></path>\n      <path\n        fill=\"#dfeaef\"\n        d=\"M212.24 25.28l-12.78 6.63 99.79 192.28A58.43 58.43 0 01274.3 303l-94.38 49 .21.39a13.51 13.51 0 0018.22 5.77l147-76.3a13.53 13.53 0 005.84-18.28L230.46 31.05a13.51 13.51 0 00-18.22-5.77z\"\n      ></path>\n      <path\n        fill=\"#da387d\"\n        d=\"M278.03 179.79l11.83 36.49a42.58 42.58 0 01-20.88 50.91 29.27 29.27 0 01-22.3 1.92 1.51 1.51 0 00-1.9 1 29.21 29.21 0 01-14.41 17.12A42.56 42.56 0 01176.72 275l-23-30.68A36.25 36.25 0 01193.63 188a12.24 12.24 0 0015.36-8 36.25 36.25 0 0169-.24z\"\n      ></path>\n      <path fill=\"#d80a61\" d=\"M281.05 189.11l-3-9.32a36 36 0 00-9.8-15.38z\"></path>\n      <path\n        fill=\"#8078bc\"\n        d=\"M165.99 190.39a36.25 36.25 0 0127.64-2.39 12.24 12.24 0 0015.36-8 36.26 36.26 0 0157.2-17.33l-30.65-59.06a3.19 3.19 0 00-4.31-1.36l-114.04 59.18a3.19 3.19 0 00-1.36 4.31l30.65 59.07a36.22 36.22 0 0119.51-34.42zm123.87 25.89a42.58 42.58 0 01-20.88 50.91 29.27 29.27 0 01-22.3 1.92 1.51 1.51 0 00-1.9 1 29.21 29.21 0 01-14.41 17.12A42.56 42.56 0 01176.72 275l-13.53-18 34 65.56a3.2 3.2 0 004.31 1.37l114-59.18a3.2 3.2 0 001.36-4.32l-34-65.57z\"\n      ></path>\n      <path\n        fill=\"#6b61b1\"\n        d=\"M316.93 260.4l-13.6-26.21a58.34 58.34 0 01-1.27 37.54l13.51-7a3.2 3.2 0 001.36-4.32z\"\n      ></path>\n      <path d=\"M228.83 97.6l-114 59.18a8.45 8.45 0 00-3.6 11.37l30.17 58.13a41.42 41.42 0 008.14 21.18l9.23 12.3 33.83 65.18a8.45 8.45 0 0011.37 3.61l114-59.19a8.44 8.44 0 003.6-11.37l-33.83-65.18-4.74-14.63a41.38 41.38 0 00-12.64-18.85l-30.17-58.13a8.46 8.46 0 00-11.36-3.6zm-61.41 156.29l-.1-.14-9.44-12.57A31 31 0 01192.05 193a17.49 17.49 0 0021.93-11.38 31 31 0 0159.07-.2c6.68 20.62 4.4 13.63 4.9 15.11l6.93 21.37a37.22 37.22 0 01-18.31 44.65 23.82 23.82 0 01-18.31 1.58 6.75 6.75 0 00-8.47 4.4 23.9 23.9 0 01-11.83 14.06 37.21 37.21 0 01-47.05-10.73zm64.43-146.06l22.34 43.05a41.47 41.47 0 00-50.08 27.19l-6.31-12.15a14.46 14.46 0 011.14-15.23 5.23 5.23 0 10-8.46-6.15 24.85 24.85 0 00-2 26.2l6.31 12.15a41.5 41.5 0 00-51.06 25.3l-22.34-43.05 110.42-57.31zm-30.92 210.49l-14.32-27.59a47.65 47.65 0 0046.17 1.14A34.22 34.22 0 00248.53 275a34.16 34.16 0 0022.86-3.17 47.62 47.62 0 0025.64-38.41L311.35 261l-110.42 57.32z\"></path>\n      <path d=\"M355.03 279.8a19 19 0 001.13-2.08l.06-.13c.12-.26.23-.53.34-.8s.11-.27.16-.41.11-.29.16-.44c1.32-3.85 1.62-8.84-1-14.81l-3.46-6.66-5-9.47-28.49-54.9-4.92-9.47-9.59-18.48-5.12-9.87-5.88-11.28-43.94-84.68-14.37-27.68a18.77 18.77 0 00-25.28-8l-74.25 38.53a5.233 5.233 0 104.82 9.29l74.25-38.54a8.3 8.3 0 0111.17 3.54L346.5 266a8.29 8.29 0 01-3.53 11.17l-63 32.69L256.59 322l-60.65 31.48a8.3 8.3 0 01-11.17-3.54L64.09 117.4a8.29 8.29 0 013.53-11.17l51.1-26.52a5.233 5.233 0 10-4.82-9.29L62.8 96.94a18.76 18.76 0 00-8 25.28l120.68 232.53a18.77 18.77 0 0025.28 8l38.58-20 13.19-6.85 9.29-4.82 16.37-8.5 9.29-4.82 22-11.41 8.31-4.35 32.6-16.92a20 20 0 004.64-5.28z\"></path>\n      <path d=\"M97.93 99.76a19.66 19.66 0 00-8.38 26.48l5.29 10.2a19.64 19.64 0 1034.86-18.1l-5.29-10.2a19.66 19.66 0 00-26.48-8.38zm22.65 23.32a9.36 9.36 0 01-16.61 8.62l-5.3-10.2a9.36 9.36 0 1116.61-8.62z\"></path>\n      <path\n        fill=\"#ffcbbe\"\n        d=\"M360.32 330.89a70.09 70.09 0 01-47.8-66.46v-27.24l-8-8-34.83-34.84A38.45 38.45 0 11324.06 140l125.13 125.1a55 55 0 0116.08 38.9v26.31a40.16 40.16 0 0011.74 28.38l13.68 13.67\"\n      ></path>\n      <path\n        fill=\"#eaac9d\"\n        d=\"M401.19 343.9l-40.91-13a70.11 70.11 0 01-47.8-66.46v-27.25l-8-8-34.79-34.84a38.45 38.45 0 0141.14-63 38.45 38.45 0 00-13.23 63l34.81 34.82 8 8v27.25a70.11 70.11 0 0047.78 66.48z\"\n      ></path>\n      <path\n        fill=\"none\"\n        d=\"M307.9 285.42a77.79 77.79 0 01-2.88-21v-24.13l-5.22-5.21-5.42 24.73s12.81 22.94 13.52 25.61zm-18.71-60.95l-24.8-24.82a45.41 45.41 0 01-10.56-16.48l-3.05 15.75zm27.63-98.7a46 46 0 0112.54 8.89l23.69 23.7-17.76-26.25s-11.04-3.32-18.47-6.34zm-68.99-2.97s2.33 29.43 3.19 42a45.88 45.88 0 0143.5-43.5l-8.12-9.08z\"\n      ></path>\n      <path d=\"M240.51 440.3a140.48 140.48 0 0070.11 38.09 74.93 74.93 0 0137.35 20.28l8.19 8.19a7.5 7.5 0 0010.61-10.6l-8.19-8.19a89.89 89.89 0 00-44.84-24.35 125.43 125.43 0 01-62.63-34l-36.57-36.58-14.12 7.09zm203.36-191.11l-79.8-79.81-11-11-23.69-23.7a46 46 0 00-12.54-8.89c-1.25-.51-2.41-1-3.38-1.48-6.78-3.28-18.92-3-18.92-3a45.88 45.88 0 00-43.5 43.5c.87 12.53 2.81 18.4 2.81 18.4a45.41 45.41 0 0010.56 16.48l24.78 24.78 10.6 10.61 5.22 5.21v24.15a77.79 77.79 0 002.88 21c.7 2.67 6.05 15.16 6.05 15.16a77.51 77.51 0 0044 37.43 7.38 7.38 0 002.39.39 7.5 7.5 0 002.38-14.61 62.54 62.54 0 01-42.68-59.35v-27.27a7.52 7.52 0 00-2.19-5.3l-42.85-42.84a31 31 0 0143.77-43.78l114.51 114.52a7.5 7.5 0 0010.6-10.6z\"></path>\n      <path d=\"M316.82 125.77c-1.11-.53-2.23-1-3.38-1.48.97.47 2.13.97 3.38 1.48zM495.99 367l-13.67-13.66a32.81 32.81 0 01-9.55-23.08V304a62.56 62.56 0 00-8-30.58 7.504 7.504 0 10-13.08 7.36 47.37 47.37 0 016.08 23.22v26.3a48 48 0 0013.94 33.7l13.68 13.67a7.52 7.52 0 1010.6-10.67z\"></path>\n    </svg>\n  );\n}\n","export function SealOfApprovalIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path fill=\"#de5540\" d=\"M337 273l104 176-56-8-32 48-104-176z\"></path>\n      <path fill=\"#de5540\" d=\"M177 273L73 449l56-8 32 48 104-176z\"></path>\n      <path\n        fill=\"#ffb431\"\n        d=\"M287.43 66.41A54 54 0 00322 75.66a53.91 53.91 0 0152.7 30.42 53.88 53.88 0 0025.27 25.27 53.91 53.91 0 0130.42 52.7 54 54 0 009.25 34.52 53.9 53.9 0 010 60.86 54 54 0 00-9.3 34.57 53.91 53.91 0 01-30.42 52.7 53.88 53.88 0 00-25.27 25.27A53.91 53.91 0 01322 422.34a54 54 0 00-34.52 9.25 53.9 53.9 0 01-60.86 0 54 54 0 00-34.52-9.25 53.91 53.91 0 01-52.7-30.42 53.88 53.88 0 00-25.27-25.27A53.91 53.91 0 0183.66 314a54 54 0 00-9.25-34.52 53.9 53.9 0 010-60.86 54 54 0 009.25-34.52 53.91 53.91 0 0130.42-52.7 53.88 53.88 0 0025.27-25.27 53.91 53.91 0 0152.7-30.42 54 54 0 0034.52-9.25 53.9 53.9 0 0160.86-.05z\"\n      ></path>\n      <circle cx=\"257\" cy=\"249\" r=\"144\" fill=\"#f99e0c\"></circle>\n      <path fill=\"#426887\" d=\"M161 200.68h72.26V313H161z\"></path>\n      <path\n        fill=\"#fdc8a2\"\n        d=\"M289.53 201.24l9.72-30.31a17.64 17.64 0 00-11.42-22.18c-.36-.12-.73-.22-1.1-.32a17.65 17.65 0 00-20.06 9.23L257 177l-23.74 24v112H321a24 24 0 0024-24v-48l6-11.91a19.37 19.37 0 00-17.31-28h-.08z\"\n      ></path>\n      <path fill=\"#2d475c\" d=\"M197 265a12 12 0 1012 12 12 12 0 00-12-12z\"></path>\n      <path\n        fill=\"#fade8d\"\n        d=\"M17 249h24v16H17zM39.33 50.66l11.31-11.31 60 60-11.32 11.3zm-27.99-28l11.31-11.31 16 16-11.31 11.3zm2.55 137.72l6.37-14.69 48 20.82-6.34 14.69zm-.23 193.3l48-22.4 6.77 14.49-48 22.41zm-2.38 137.63l40-40 11.32 11.31-40 40zM249 465h16v32h-16zm0-448h16v16h-16zm-103.27 3.13l14.69-6.37 16 36.94-14.69 6.37zM473 249h24v16h-24zM403.29 99.38l60-60L474.6 50.7l-60 60zm72.01-71.97l16-16 11.31 11.31-16 16zm-29.22 138.94l48-20.82 6.37 14.69-48 20.82zM445.61 346l6.77-14.49 48 22.4-6.77 14.5zm5.64 116.66l11.31-11.31 40 40-11.31 11.31zM337.81 50.61l16-36.94L368.52 20 352.5 57z\"\n      ></path>\n      <path d=\"M75.68 184.66a46.09 46.09 0 01-7.88 29.4 61.53 61.53 0 000 69.88 46.09 46.09 0 017.88 29.4 61.49 61.49 0 0033 59.55l-42.58 72a8 8 0 008 12l51-7.29 29.2 43.81A8 8 0 00161 497h.22a8 8 0 006.67-3.93L204.58 431a46 46 0 0117.48 7.21 61.53 61.53 0 0069.88 0 46 46 0 0117.48-7.21l36.69 62.09a8 8 0 006.67 3.93h.22a8 8 0 006.66-3.56l29.2-43.81 51 7.29a8 8 0 008-12l-37.82-64-13.77 8.14 29.34 49.65-39.5-5.64a8 8 0 00-7.79 3.48L353.41 474l-25.7-43.49a61.47 61.47 0 0054.15-35.1 46.12 46.12 0 0121.52-21.52 61.54 61.54 0 0034.94-60.52 46.09 46.09 0 017.88-29.4 61.53 61.53 0 000-69.88 46.07 46.07 0 01-7.88-29.4 61.54 61.54 0 00-34.94-60.52 46.12 46.12 0 01-21.52-21.52 61.54 61.54 0 00-60.52-34.94 46.07 46.07 0 01-29.4-7.88 61.53 61.53 0 00-69.88 0 46.07 46.07 0 01-29.4 7.88 61.54 61.54 0 00-60.52 34.94 46.07 46.07 0 01-21.52 21.52 61.54 61.54 0 00-34.94 60.53zM160.59 474l-24.93-37.4a8 8 0 00-7.79-3.48l-39.5 5.64 33.7-57a46 46 0 0110.07 13.69 61.47 61.47 0 0054.15 35.1zm-14-364.43a45.63 45.63 0 0144.87-25.91A62.15 62.15 0 00231.09 73a45.63 45.63 0 0151.82 0 62.15 62.15 0 0039.65 10.62 45.65 45.65 0 0144.88 25.91 62.06 62.06 0 0029 29 45.63 45.63 0 0125.91 44.88A62.14 62.14 0 00433 223.09a45.63 45.63 0 010 51.82 62.15 62.15 0 00-10.62 39.65 45.65 45.65 0 01-25.91 44.88 62 62 0 00-29 29 45.63 45.63 0 01-44.88 25.91A62.15 62.15 0 00282.91 425a45.63 45.63 0 01-51.82 0 62.19 62.19 0 00-35-10.8q-2.32 0-4.65.18a45.62 45.62 0 01-44.88-25.91 62.06 62.06 0 00-29-29 45.65 45.65 0 01-25.91-44.88A62.15 62.15 0 0081 274.91a45.63 45.63 0 010-51.82 62.15 62.15 0 0010.62-39.65 45.63 45.63 0 0125.91-44.87 62.12 62.12 0 0029-29zM105 249a150.58 150.58 0 0131.68-92.89l12.66 9.79A134.65 134.65 0 00121 249c0 75 61 136 136 136s136-61 136-136-61-136-136-136a134.81 134.81 0 00-98.22 41.93l-11.56-11.06A150.72 150.72 0 01257 97c83.81 0 152 68.19 152 152s-68.19 152-152 152-152-68.19-152-152zm199.86-95.92a25.64 25.64 0 00-45.34 1l-9.1 18.2-20.18 20.4H161a8 8 0 00-8 8V313a8 8 0 008 8h120v-16h-39.74V204.29l21.43-21.66a8.16 8.16 0 001.46-2l9.68-19.34a9.64 9.64 0 0117.8 7.25l-9.72 30.31a8 8 0 001.17 7.17 8.13 8.13 0 006.48 3.27l44-.17a11.36 11.36 0 0110.16 16.44l-6 11.91A8.08 8.08 0 00337 241v48a16 16 0 01-16 16h-24v16h24a32 32 0 0032-32v-46.11l5.11-10.22a27.36 27.36 0 00-24.46-39.6h-.11l-33 .13 6.36-19.82a25.79 25.79 0 00-2-20.3zM225.26 305H169v-96.32h56.26zM185 277a12 12 0 1112 12 12 12 0 01-12-12zM17 265v-16h24v16zm82.34-154.34l-60-60 11.32-11.32 60 60zm-72-72l-16-16 11.32-11.32 16 16zm34.48 142.48l-48-20.8 6.36-14.68 48 20.8zm-48.2 172.61l48-22.4 6.77 14.5-48 22.4zm9 148.91l-11.28-11.32 40-40 11.32 11.32zM265 465v32h-16v-32zm0-432h-16V17h16zM161.66 57.1l-16-36.92 14.68-6.37 16 36.93zM497 265h-24v-16h24zm-82.34-154.34l-11.32-11.32 60-60 11.32 11.32zm72-72l-11.32-11.32 16-16 11.32 11.32zm13.52 121.68l-48 20.8-6.36-14.68 48-20.8zm-47.8 171l48 22.4-6.77 14.5-48-22.4zm50.27 160l-11.31 11.32-40-40 11.31-11.32zM352.34 57.1l-14.68-6.36 16-36.93 14.68 6.37z\"></path>\n    </svg>\n  );\n}\n","export function StarIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffb820\"\n        d=\"M491.64 188.725l-153.53-22.31-68.66-139.12c-2.75-5.57-8.1-8.36-13.45-8.36l.02 400.2 137.3 72.19c11.01 5.78 23.86-3.56 21.76-15.81l-26.22-152.92 111.09-108.29c8.91-8.68 3.99-23.79-8.31-25.58z\"\n      ></path>\n      <path\n        fill=\"#ffd06a\"\n        d=\"M356.62 312.125s23.68 138.03 23.76 138.49c-.08-.01-122.45-31-124.36-31.48-.02-.01-137.34 72.19-137.34 72.19-11.01 5.78-23.86-3.56-21.76-15.81l26.22-152.92-111.09-108.29c-8.91-8.68-3.99-23.79 8.31-25.58l153.53-22.31 68.66-139.12c2.75-5.57 8.1-8.36 13.45-8.36l62.19 174.9 139.06 20.21z\"\n      ></path>\n      <path d=\"M510.883 196.615c-2.666-8.204-9.625-14.07-18.16-15.311l-149.632-21.743-66.918-135.588c-3.817-7.735-11.547-12.54-20.173-12.54s-16.356 4.805-20.173 12.54L168.91 159.561 19.278 181.305c-8.537 1.24-15.495 7.106-18.161 15.311s-.484 17.04 5.693 23.062l108.274 105.541-9.911 57.786a7.501 7.501 0 006.124 8.66 7.499 7.499 0 008.66-6.125l10.578-61.672a7.502 7.502 0 00-2.157-6.639L17.28 208.934c-2.089-2.036-2.798-4.909-1.897-7.684.902-2.775 3.164-4.683 6.052-5.103l153.534-22.31a7.498 7.498 0 005.647-4.103l68.662-139.125c1.292-2.617 3.804-4.179 6.722-4.179s5.431 1.562 6.722 4.179l68.663 139.125a7.5 7.5 0 005.647 4.103l153.534 22.31c2.888.42 5.15 2.327 6.051 5.102.902 2.775.193 5.648-1.896 7.685L383.622 317.228a7.499 7.499 0 00-2.157 6.639l26.227 152.913c.494 2.876-.621 5.617-2.982 7.332-2.361 1.714-5.312 1.929-7.895.57L259.49 412.487a7.504 7.504 0 00-6.98 0l-137.325 72.195c-2.583 1.358-5.535 1.144-7.894-.57-2.361-1.715-3.476-4.456-2.982-7.332l10.578-61.673a7.501 7.501 0 00-6.124-8.66 7.501 7.501 0 00-8.66 6.125l-10.578 61.673c-1.458 8.502 1.971 16.933 8.95 22.003 3.943 2.865 8.557 4.32 13.201 4.32a22.51 22.51 0 0010.49-2.608L256 427.6l133.834 70.36c7.635 4.014 16.713 3.357 23.692-1.712 6.979-5.07 10.408-13.502 8.949-22.003l-25.56-149.027L505.19 219.677c6.177-6.022 8.359-14.859 5.693-23.062z\"></path>\n    </svg>\n  );\n}\n"],"names":["FloatingHand","children","icon","title","useState","isExpanded","setIsExpanded","translate","useLanguage","className","clsx","onMouseOver","onMouseLeave","onFocus","onBlur","HandOfCardsIcon","size","alt","pt","en","FloatingHandDrawer","useToggle","open","toggleDrawer","useMeasure","ref","height","type","onClick","onKeyDown","e","key","placement","onClose","mask","Math","max","Container","contained","titleProps","contentProps","spaceProps","level","restTitleProps","childrenClassName","wrap","direction","childrenDirection","restChildrenContainerProps","PointsHighlight","iconSize","RoundAnnouncement","round","onPressButton","buttonText","time","unskippable","appearance","useGameAppearance","circleColor","primaryColor","useTemporarilyHidePlayersBar","circleStyle","borderColor","colorScheme","src","roundTitlePt","roundTitleEn","getAnimationClass","style","current","Boolean","onExpire","duration","disabled","custom","SlideShowControls","config","disableControls","barColor","nextButtonProps","slideDuration","totalDuration","length","useCountdown","autoStart","timeLeft","isRunning","pause","resume","disableControlsFlag","isFirstGalleryRunThrough","useEffect","expectedSlideIndex","min","floor","slideIndex","setSlideIndex","slots","useMemo","Array","fill","map","i","width","calculateProgress","backgroundColor","opacity","s","SlideShow","leftClassName","rightClassName","id","SlideShowLabel","props","SlideShowBubbleValue","winner","extra","color","getContrastColor","CrownFilled","MessageFilled","SlideShowPlayersList","players","playersIds","selectedPlayersNames","getPlayerNamesFromIds","join","A","Group","playerId","avatarId","SlideShowNoWins","Text","GarbageIcon","shape","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","PLANEJAMENTO_URBANO_ACTIONS","PlanningRules","getConeColor","B","C","D","mockAction","placements","availableProjectsIds","siteIds","shuffle","from","_","index","LETTERS","reduce","acc","siteId","GridMap","maxWidth","maxHeight","grid","cellComponent","contentClassName","contentStyle","cellProps","transformWrapperProps","hideControls","additionalContent","CellComponent","initialScale","minScale","maxScale","wheel","step","centerOnInit","restTransformWrapperProps","Fragment","GridMapControls","position","wrapperClass","wrapperStyle","contentClass","display","gridTemplateColumns","gridTemplateRows","cells","cell","useControls","zoomIn","zoomOut","resetTransform","ZoomInOutlined","ZoomOutOutlined","FullscreenExitOutlined","useLocationWidth","cityWidth","useCardWidth","gap","LocationCard","locationId","cityLocationsDict","fontSize","location","backgroundImage","PUBLIC_URL","IN_GAME","getLocationCategoryIcon","category","name","GiftFilled","BankFilled","ShopFilled","BulbFilled","ReadFilled","CustomerServiceFilled","ExperimentFilled","MedicineBoxFilled","CloudFilled","HomeFilled","TruckFilled","StarFilled","QuestionCircleFilled","MapSlot","mapEvaluations","sizes","cellWidth","data","Number","coneId","ConeIcon","CityMap","city","useWindowSize","ConstructionHighlight","MetricHighlight","BrickWallIcon","ConeHighlight","StepPlanLocations","announcement","gameOrder","activePlayerId","onSubmitPlanning","isLoading","useLoading","constructionWidth","coneOptions","value","label","playerSelections","setPlayerSelections","isComplete","Object","keys","Set","values","useMock","planning","fullWidth","order","justify","vertical","align","options","placeholder","onChange","cone","prev","onSelectConstrictionCone","StepWaitForPlanning","activePlayer","wait","player","PhasePlanning","state","useStep","goToNextStep","setStep","useWhichPlayerIsThe","isTheActivePlayer","request","useGameActionRequest","actionName","onSuccess","onError","successMessage","errorMessage","payload","action","useOnSubmitPlanningAPIRequest","MapBlueprintIcon","currentRound","addressUser","phase","allowedPhase","PHASES","PLANEJAMENTO_URBANO","PLANNING","StepPlaceLocations","controller","isTheController","evaluations","onSubmitConstruction","onUpdateConstruction","invert","SpaceContainer","variant","newEvaluation","existingCone","find","selectedCone","locationToRemove","PhasePlacing","useOnSubmitPlacingAPIRequest","useOnUpdatePlacementAPIRequest","MapCityZonesIcon","PLACING","CityMapSnippet","focusedCellId","ZoomToLocation","zoomToElement","StepGallery","gallery","slideShowConfig","galleryEntry","coneColor","correctCellId","Cone","adjacentLocationsIds","coneAdjacentLocationsIds","guess","guessAdjacentLocationsIds","result","SealOfApprovalIcon","italic","AngryMayorIcon","DragOutlined","StepResults","onGoBack","status","correct","controllerId","groupScore","correctProjects","filter","entry","incorrectProjects","PhaseResolution","goToPreviousStep","useSlideShow","RESOLUTION","MapCityIcon","reset","PhaseGameOver","announcementIcon","FlagIcon","getActiveComponent","LoadingPage","DEFAULT","LOBBY","PhaseLobby","RULES","PhaseRules","SETUP","PhaseSetup","GAME_OVER","PageError","gameCollection","GAME_COLLECTION","setIsFirstGalleryRunThrough","propertyName","useGlobalState","userId","PLACEHOLDER_PLAYER","setActivePlayer","isUser","setIsUser","xmlns","viewBox","d","cx","cy","r","StarIcon"],"sourceRoot":""}