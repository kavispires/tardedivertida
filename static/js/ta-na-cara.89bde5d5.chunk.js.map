{"version":3,"file":"static/js/ta-na-cara.89bde5d5.chunk.js","mappings":"4LAkCO,SAASA,EAAT,GAOmB,IANxBC,EAMuB,EANvBA,SACAC,EAKuB,EALvBA,KACAC,EAIuB,EAJvBA,KACAC,EAGuB,EAHvBA,UAGuB,IAFvBC,SAAAA,OAEuB,MAFZ,QAEY,MADvBC,cAAAA,OACuB,MADP,QACO,EACvB,OACE,kBAAMF,WAAWG,EAAAA,EAAAA,GAAK,mBAAoBJ,GAAI,4BAAyBA,GAAQC,GAA/E,UACqB,WAAlBE,IACC,iCACE,SAAC,IAAD,CAAYE,KAAMH,EAAUH,KAAMA,IAAS,OAG9CD,EACkB,UAAlBK,IACC,gCACG,KACD,SAAC,IAAD,CAAYE,KAAMH,EAAUH,KAAMA,SAK3C,C,6FCvDM,SAASO,EAAT,GAAmF,IAAxDR,EAAuD,EAAvDA,SAAUE,EAA6C,EAA7CA,KAAME,EAAuC,EAAvCA,SAAUD,EAA6B,EAA7BA,UAC1D,OACE,SAAC,IAAD,CAAiBF,MAAM,SAAC,IAAD,IAAcC,KAAMA,EAAME,SAAUA,EAAUD,UAAWA,EAAhF,SACGH,GAGN,C,uGCwBM,SAASS,EAAT,GAA6F,IAApEC,EAAmE,EAAnEA,QAASC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,OAAQV,EAAiC,EAAjCA,UAChE,OAAIS,GACK,iBAAMT,UAAWA,EAAjB,SAA6BQ,EAAKG,KAAI,SAACC,GAAD,OAAcL,EAAQK,GAAUC,IAAhC,IAAsCC,KAAK,QAIxF,iBAAMd,UAAWA,EAAjB,SACGQ,EAAKG,KAAI,SAACC,EAAUG,GAAX,OACR,UAAC,EAAAC,SAAD,YACE,SAAC,KAAD,CAAYC,OAAQV,EAAQK,KAC3BG,EAAQP,EAAKU,OAAS,GAAK,IAC3BH,IAAUP,EAAKU,OAAS,IAAK,SAAC,KAAD,CAAWC,GAAG,IAAIC,GAAG,UAHrD,UAAkBV,EAAlB,YAA4BE,GADpB,KASf,C,0OC7BD,SAASS,EAAT,GAA0F,IAAnEC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,YACnCC,EAAaH,EAAc,EAC3BI,EAAaJ,EAAc,EACjC,OACE,eACEtB,WAAWG,EAAAA,EAAAA,GACT,8BACAsB,GAAc,oCACdC,GAAc,qCAHD,uCAImBH,IALpC,UAQE,UAAC,IAAD,CACEI,MAAK,OAAEH,QAAF,IAAEA,EAAAA,GAAe,SAAC,KAAD,CAAWL,GAAG,gBAAgBC,GAAG,kBACvDQ,MAAOH,EAAa,OAASC,EAAa,MAAQ,OAFpD,UAIGD,EAAa,IAAM,GACnBH,MAIR,CAQD,SAASO,EAAT,GAIoC,IAHlCC,EAGiC,EAHjCA,aACAlB,EAEiC,EAFjCA,SAEiC,IADjCmB,yBAAAA,OACiC,MADN,GACM,EAC3BC,EAASC,MAAMC,QAAQJ,GAAgBA,EAAe,CAACA,GAC7D,OACE,eAAI9B,UAAU,oCAAd,SACGgC,EAAOrB,KAAI,SAACW,EAAaP,GAAd,OACV,SAACM,EAAD,CAEEC,YAAaA,EACbC,MAAOR,EACPS,YAAaO,EAAyBhB,IAJxC,uBACuBH,EADvB,YACmCG,GAFzB,KAUjB,CAUM,SAASoB,EAAT,GAM6B,IALlC5B,EAKiC,EALjCA,QACA6B,EAIiC,EAJjCA,QACAL,EAGiC,EAHjCA,yBAGiC,IAFjCM,iBAAAA,OAEiC,aADjCC,MAAAA,OACiC,MADzB,EACyB,EACjC,GAAsCC,EAAAA,EAAAA,UAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAsB,IAAhE,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAmBC,EAAAA,EAAAA,GAAc,iBAAxBC,GAAT,eAEMC,GAAYC,EAAAA,EAAAA,UAAQ,kBAAMC,KAAKC,IAAL,MAAAD,MAAI,OAAQd,EAAQzB,KAAI,SAACyC,GAAD,OAAYA,EAAOC,QAAnB,KAA9B,GAA6D,CAACjB,IAEhFkB,GAAYC,EAAAA,EAAAA,GAAa,CAC/BC,SAAU,EAAIlB,EACdmB,WAAW,EACXC,SAAU,WACRb,EAAU,GACVJ,EAAe,EAChB,IANKa,QA6DR,OAnDAK,EAAAA,EAAAA,IAAc,WACZ,IAAMC,EAAyB,CAAC,EAC5BC,EAAe,EACfC,EAAa,EAEXC,GAAuBC,EAAAA,EAAAA,SAAQ5B,EAAS,CAAC,WAAY,QAAS,CAAC,OAAQ,QAAQ6B,QACnF,SAACC,EAAkBC,EAAOpD,GAQxB,OAPAmD,EAAIC,EAAMvD,UAAYG,GAEH,IAAf+C,GAAoBK,EAAMd,SAAWS,KACvCA,EAAaK,EAAMd,SACnBQ,GAAgB,GAElBD,EAAUO,EAAMvD,UAAY,CAAC,EAAGiD,GACzBK,CACR,GACD,CAAC,GAGGE,GAAsBJ,EAAAA,EAAAA,SAAQ5B,EAAS,CAAC,gBAAiB,QAAS,CAAC,OAAQ,QAGjFyB,EAAe,EACfC,EAAa,EAEb,IAAMO,EAAiCD,EAAoBzD,KAAI,SAACwD,EAAOpD,GACrE,IAAMuD,GAAQ,UAAQH,GAUtB,OARAG,EAAS/C,MAAQ,CAACR,EAAOgD,EAAqBO,EAAS1D,WACvD0D,EAASC,SAAWX,EAAUU,EAAS1D,WAEpB,IAAfkD,GAAoBK,EAAMK,cAAgBV,KAC5CA,EAAaK,EAAMK,cACnBX,GAAgB,GAElBS,EAASC,SAAS,GAAKV,EAChBS,CACR,IAED3B,EAAiB0B,EAClB,KAGDI,EAAAA,EAAAA,YAAU,WACJnB,IAAY,EAAIhB,EAClBG,EAAe,GACNa,IAAY,EAAIhB,GACzBG,EAAe,EAElB,GAAE,CAACa,EAAShB,KAGX,gBACEtC,UAAU,gBACV0E,MAAO,CAAE3B,OAAO,GAAD,QAAMG,KAAKC,IAAI,GAAIJ,GAAU,GAAKL,EAAcxB,OAAhD,OAFjB,SAIGwB,EAAc/B,KAAI,SAACwD,EAAOpD,GAAW,IAAD,IAC3BH,EAAqEuD,EAArEvD,SAAUyC,EAA2Dc,EAA3Dd,SAAUmB,EAAiDL,EAAjDK,cAAe1C,EAAkCqC,EAAlCrC,aAAcP,EAAoB4C,EAApB5C,MAAOgD,EAAaJ,EAAbI,SAC1DI,GAAazB,KAAKC,IAAI,GAAIJ,GAAU,IAAxB,UAA8BxB,EAAMqB,UAApC,QAA+C,GAEjE,OACE,iBACE5C,UAAS,iDAA4Ce,GAErD6D,GAAE,sBAAiB7D,GACnB2D,MAAO,CAAEG,IAAI,GAAD,OAAKF,EAAL,OAJd,WAME,gBAAK3E,UAAU,4BAAf,SACGqD,EAAW,GAAKL,IAAcK,GAAYb,GAAe,IACxD,SAACsC,EAAA,EAAD,CAAa9E,UAAU,iCAG3B,iBAAKA,UAAU,+BAAf,wBAAgDuE,EAAS3B,UAAzD,QAAoE,OACpE,iBAAK5C,UAAU,6BAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAAC,KAAD,CAAQ4E,GAAIrE,EAAQK,GAAUmE,cAEhC,gBAAK/E,UAAU,sBAAf,SAAsCO,EAAQK,GAAUC,WAE1D,SAAC,IAAD,CAASc,OAAO,SAAC,KAAD,CAAWR,GAAG,oBAAoBC,GAAG,oBAAsBQ,MAAM,OAAjF,UACE,gBAAK5B,UAAU,6BAAf,SAA6CwE,OAE7CnC,GAAoBG,GAAe,QAAsBwC,IAAjBlD,IACxC,SAACD,EAAD,CACEC,aAAcA,EACdlB,SAAUA,EACVmB,yBAA0BA,IAG7BS,GAAe,IACd,SAAC,IAAD,CAASb,MAAM,QAAQC,MAAM,OAA7B,UACE,iBAAM5B,UAAU,mCAAhB,SAAoDqD,QA9B1D,kBAEkBzC,GAiCrB,KAGN,C,gDClKM,SAASqE,EAAT,GAOsB,IAN3B1E,EAM0B,EAN1BA,QACA6B,EAK0B,EAL1BA,QACAL,EAI0B,EAJ1BA,yBACAlC,EAG0B,EAH1BA,SACA8B,EAE0B,EAF1BA,MACAuD,EAC0B,EAD1BA,SAIA,OAFAC,EAAAA,EAAAA,MAGE,UAAC,IAAD,YACE,SAAC,KAAD,iBAAQxD,QAAR,IAAQA,EAAAA,EAAS,YAEhBuD,GAED,SAAC/C,EAAD,CAAc5B,QAASA,EAAS6B,QAASA,EAASL,yBAA0BA,KAC5E,UAAC,KAAD,CAAa/B,UAAU,iDAAvB,WACE,SAACoF,EAAA,EAAD,KACA,SAAC,KAAD,CACEjE,GAAG,iFACHC,GAAG,0DAEL,SAACgE,EAAA,EAAD,OAGDvF,IAGN,C,gJC1DM,SAASwF,EAAT,GAAwC,IAAxBxF,EAAuB,EAAvBA,SACrB,OAAO,8BAAGA,GACX,CCKM,SAASyF,EAAT,GAA+D,IAAD,IAA5CC,UAAAA,OAA4C,SAAzB1F,EAAyB,EAAzBA,SAC1C,OAAO0F,GAAY,8BAAG1F,KAAe,uBACtC,CCFM,SAAS2F,EAAT,GAA+D,IAAD,IAA5CD,UAAAA,OAA4C,SAAzB1F,EAAyB,EAAzBA,SAC1C,OAAO0F,GAAY,8BAAG1F,EAAS,MAAS,8BAAGA,EAAS,IACrD,CCVM,SAAS4F,EAAT,GAA2D,IAArCC,EAAoC,EAApCA,MAAO7F,EAA6B,EAA7BA,SAClC,GAAI6F,EAAMxE,OAAS,EACjB,MAAMyE,MAAM,0CAGd,OAAID,EAAM,IAAM7F,EAAS,GAChBA,EAAS,GAGd6F,EAAM,IAAM7F,EAAS,GAChBA,EAAS,GAGd6F,EAAM,IAAM7F,EAAS,GAChBA,EAAS,GAGd6F,EAAM,IAAM7F,EAAS,GAChBA,EAAS,GAGd6F,EAAM,IAAM7F,EAAS,GAChBA,EAAS,IAElB+F,QAAQC,KAAK,4CACNhG,EACR,C,iTCPM,SAASiG,EAAUC,EAAsCC,EAAkBC,GAChF,OAAOC,EAAAA,EAAAA,GACLC,OAAOC,OAAOL,GACXM,QACC,SAACC,GAAD,eACEA,EAAU1B,KAAOoB,EAAKO,cACrBD,EAAUE,YACV,oBAACR,EAAKS,eAAN,aAAC,EAAeR,UAAhB,QAA6B,IAAIS,SAASJ,EAAU1B,GAHvD,IAKDjE,KAAI,SAAC2F,GAAD,OAAeA,EAAU1B,EAAzB,IAEV,C,4FClBM,SAAS+B,EAAT,GAMmB,IALxBZ,EAKuB,EALvBA,eACAa,EAIuB,EAJvBA,cACAC,EAGuB,EAHvBA,gBACAC,EAEuB,EAFvBA,YAEuB,IADvBC,aAAAA,OACuB,MADR,GACQ,EACvB,GAAgCC,EAAAA,EAAAA,KAAxBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,GAAcC,EAAAA,EAAAA,KAAdD,UACFE,GAAYC,EAAAA,EAAAA,GAAa,GAAI,GAAI,GAAI,IAAK,IAEhD,OAAIR,GAEA,gBAAK9G,UAAU,mBAAmB0E,MAAO,CAAE6C,MAAM,GAAD,OAAiB,EAAZF,EAAL,OAAhD,SACGT,EAAcjG,KAAI,SAAC4F,GAClB,IAAMD,EAAYP,EAAeQ,GAC3B1F,EAAOyF,EAAUzF,KAAKoG,GAEtBO,EAAcT,EAAaL,SAASJ,EAAU1B,IAC9C4B,EAAQ,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAWE,SACtBiB,EAAeZ,IAAoBP,EAAU1B,GAEnD,OACE,SAAC,IAAD,CAEEjD,MAAOuF,EAAU,iCAAD,OACmBrG,EADnB,+CAEqBA,EAFrB,MAIhB6G,UAAW,kBAAMZ,EAAY,CAAEP,YAAaD,EAAU1B,IAA3C,EACX+C,OAAQT,EAAU,MAAO,OACzBU,WAAYV,EAAU,SAAO,MAC7BW,SAAUL,GAAehB,GAAYiB,GAAgBN,EATvD,UAWE,UAAC,KAAD,CACEnH,UAAU,iEACV6H,SAAUL,GAAehB,GAAYiB,GAAgBN,EAFvD,WAIE,SAAC,KAAD,CACEW,QAAStB,EAAW,QAAUF,EAAU1B,GACxC5E,WAAWG,EAAAA,EAAAA,GACT,oCACA0G,IAAoBP,EAAU1B,IAAM,6CACnC4C,GAAehB,GAAYiB,IAAiB,+CAE/CJ,UAAWA,EAAY,GACvBU,SAAS,KAETP,IAAe,gBAAKxH,UAAU,mCAAf,SAAmDa,QAxBjEyF,EAAU1B,GA4BpB,OAML,gBAAK5E,UAAU,mBAAmB0E,MAAO,CAAE6C,MAAM,GAAD,OAAwB,GAAlBF,EAAY,IAAlB,OAAhD,UACE,SAAC,iBAAD,UACGT,EAAcjG,KAAI,SAAC4F,GAClB,IAAMD,EAAYP,EAAeQ,GACjC,OACE,iBAAKvG,UAAU,8BAAf,WACE,SAAC,KAAD,CACE8H,QAAkB,OAATxB,QAAS,IAATA,GAAAA,EAAWE,SAAW,QAAUF,EAAU1B,GACnDoD,eAAgB1B,EAAU1B,GAC1B5E,WAAWG,EAAAA,EAAAA,GACT,oCACA0G,IAAoBP,EAAU1B,IAAM,6CAEtCyC,UAAWA,MAEZ,OAACf,QAAD,IAACA,GAAAA,EAAWE,YACX,gBAAKxG,UAAU,mCAAf,UACE,SAAC,KAAD,UAAgBsG,EAAUzF,WAZkByF,EAAU1B,GAiB/D,OAIR,C,yDCrFM,SAASqD,EAAT,GAA8E,IAArD1H,EAAoD,EAApDA,QAASyF,EAA2C,EAA3CA,KAAMkC,EAAqC,EAArCA,cACvCC,GAAcC,EAAAA,EAAAA,IAAY7H,EAAS,QACnC8G,GAAYC,EAAAA,EAAAA,GAAa,GAAI,GAAI,GAAI,IAAK,IAEhD,OACE,SAAC,IAAD,CAAOe,MAAI,EAACrI,UAAU,iCAAtB,SACGmI,EAAYxH,KAAI,SAACM,GAAD,aACf,SAACqH,EAAD,CAEErH,OAAQA,EACRoG,UAAWA,EAAY,EACvBR,gBAAiB5F,EAAO2D,KAAOoB,EAAKpB,GAAKoB,EAAKO,iBAAcvB,EAC5DkD,cAAeA,EACfzB,QAAO,UAAET,EAAKS,eAAP,aAAE,EAAexF,EAAO2D,KAL1B3D,EAAO2D,GAFC,KAYtB,CAUM,SAAS0D,EAAT,GAMe,IAAD,MALnBrH,EAKmB,EALnBA,OACAoG,EAImB,EAJnBA,UACAR,EAGmB,EAHnBA,gBACAqB,EAEmB,EAFnBA,cACAzB,EACmB,EADnBA,QAEA,OACE,iBACEzG,UAAU,eACV0E,MAAO,CAAE6D,iBAAiBC,EAAAA,EAAAA,IAAmBvH,EAAO8D,UAAW0D,QAAS,QAF1E,WAIE,gBAAKzI,UAAU,sBAAf,UACE,SAAC,KAAD,CACE8H,QAAO,OAAEjB,QAAF,IAAEA,EAAAA,EAAmB,aAC5BQ,UAAWA,EACXrH,UAAU,uCAGd,gBAAKA,UAAU,uBAAf,UACE,SAACK,EAAA,EAAD,UAAkB6C,KAAKC,IAAI,qBAAMlC,QAAN,IAAMA,GAAN,UAAMA,EAAQyH,eAAd,aAAM,EAAiBxH,cAAvB,QAAiC,GAAI,QAElE,gBAAKlB,UAAU,uBAAf,UACE,SAAC,KAAD,CAAYiB,OAAQA,EAAQb,KAAK,QAAQuI,UAAQ,EAACC,kBAAgB,EAACC,aAAW,OAEhF,gBAAI7I,UAAU,wBAAd,UACG8I,QAAO,OAAC7H,QAAD,IAACA,GAAD,UAACA,EAAQyH,eAAT,aAAC,EAAiBxH,SACxBD,EAAOyH,QAAQ/H,KAAI,SAACwD,GAClB,cAA6BgC,OAAO4C,QAAQ5E,GAAO,GAAnD,GAAO6E,EAAP,KAAmBC,EAAnB,KAEA,OACE,0BACGf,EAAcc,GAAYE,UAC3B,SAAC,KAAD,CACEpJ,KAAMmJ,GAAS,SAACE,EAAA,EAAD,KAA+B,SAACC,EAAA,EAAD,IAC9ChJ,KAAK,YAJT,UAAYa,EAAO2D,GAAnB,YAAyBoE,GAQ5B,IACFF,QAAQrC,KAAR,OACCA,QADD,IACCA,OADD,EACCA,EAAS9F,KAAI,SAAC4F,GACZ,OACE,gBAAwCvG,UAAU,uCAAlD,WACE,SAAC,KAAD,CAAW8H,QAASvB,EAAac,UAAWA,EAAY,KACxD,SAAC,KAAD,CAAYvH,MAAM,SAACsJ,EAAA,EAAD,IAA8BhJ,KAAK,YAFvD,UAAYa,EAAO2D,GAAnB,YAAyB2B,GAK5B,UAIV,C,eC7EM,SAAS8C,EAAT,GAMiB,IAAD,IALrB9I,EAKqB,EALrBA,QACAyF,EAIqB,EAJrBA,KACAkC,EAGqB,EAHrBA,cACAoB,EAEqB,EAFrBA,eACAC,EACqB,EADrBA,eAEQpC,GAAcC,EAAAA,EAAAA,KAAdD,UACR,OACE,UAAC,KAAD,CAAaqC,WAAS,EAAtB,WACE,eAAGxJ,UAAU,GAAb,WACE,SAAC,IAAD,CAAQI,KAAK,QAAb,eAAgC,KAChC,6BACE,SAAC,KAAD,CACEe,IAAI,0EACJC,IAAI,iFAIV,UAAC,IAAD,CAAOiH,MAAI,EAACrI,UAAU,2BAAtB,UACqC,KAAlC,UAACgG,EAAKyD,iBAAN,QAAmB,IAAIvI,SACtB,SAAC,KAAD,CAAasI,WAAS,EAAtB,UACE,SAAC,KAAD,CACErI,GAAG,0FACHC,GAAG,0EAIR,UAAC4E,EAAKyD,iBAAN,QAAmB,IAAI9I,KAAI,SAACqI,EAAoBjI,GAC/C,OACE,SAAC,KAAD,CACE2I,QAAS,kBAAMJ,EAAe,CAAEN,WAAAA,GAAvB,EACTnB,SAAUV,GAAanB,EAAK2D,MAC5B3J,UAAU,mCAHZ,UAKE,SAAC,KAAD,CAEE4J,OAAQC,EAAAA,GAAQ9I,GAChBa,OAAOkI,EAAAA,EAAAA,IAAmBD,EAAAA,GAAQ9I,IAClCf,UAAU,iCAJZ,SAMGkI,EAAcc,GAAYE,UALtBF,IASZ,QAEH,0BACE,SAAC,IAAD,CAAQ5I,KAAK,QAAb,eAAgC,KAChC,6BACE,SAAC,KAAD,CACEe,IAAI,6EACJC,IAAI,yEAIV,SAAC,IAAD,CAAOiH,MAAI,EAACrI,UAAU,kBAAtB,UACGoI,EAAAA,EAAAA,IAAY7H,EAAS,QACnB8F,QAAO,SAACpF,GAAD,OAAYA,EAAO2D,KAAOoB,EAAKpB,EAA/B,IACPjE,KAAI,SAACM,GACJ,OACE,SAAC,KAAD,CACEyI,QAAS,kBAAMH,EAAe,CAAEtD,SAAUhF,EAAO2D,IAAxC,EACTiD,SAAUV,GAAanB,EAAK2D,MAF9B,UAIE,SAAC,KAAD,CAAY1I,OAAQA,EAAQb,KAAK,QAAQuI,UAAQ,EAACC,kBAAgB,KAGvE,QAIV,C,eCrEM,SAASmB,EAAT,GAWoB,IAVzBxJ,EAUwB,EAVxBA,QACAyF,EASwB,EATxBA,KACAgE,EAQwB,EARxBA,aACAC,EAOwB,EAPxBA,UACAlE,EAMwB,EANxBA,eACAa,EAKwB,EALxBA,cACAsB,EAIwB,EAJxBA,cACAoB,EAGwB,EAHxBA,eACAC,EAEwB,EAFxBA,eACAW,EACwB,EADxBA,eAOA,OAJAC,EAAAA,EAAAA,IAAe,YJpCV,SACLnE,EACAzF,EACA+I,EACAC,GAEA,IAAMa,EAAO,kBACRpE,EAAKyD,YADG,OAGRtD,OAAOkE,KAAK9J,GAAS8F,QAAO,SAACiE,GAAD,OAASA,IAAQtE,EAAKpB,EAAtB,MAG3B2F,GAASrE,EAAAA,EAAAA,GAAckE,GAEzBG,EAAOC,WAAW,MACpBlB,EAAe,CAAEN,WAAYuB,IAE7BhB,EAAe,CAAEtD,SAAUsE,GAE9B,CIkBGE,CAAmBzE,EAAMzF,EAAS+I,EAAgBC,EACnD,KAGC,UAAC,IAAD,CAAMmB,WAAS,EAACV,aAAcA,EAA9B,WACE,SAAC,KAAD,CAAO5J,KAAK,SAAZ,UACE,SAAC,KAAD,CAAWe,IAAI,iEAA+BC,IAAI,iEAGpD,SAAC,KAAD,CAAaoI,WAAS,EAAtB,UACE,SAAC,KAAD,CACErI,GAAG,2JACHC,GAAG,4JAIP,SAACiI,EAAD,CACE9I,QAASA,EACTyF,KAAMA,EACNkC,cAAeA,EACfoB,eAAgBA,EAChBC,eAAgBA,KAGlB,SAACtB,EAAD,CAAe1H,QAASA,EAASyF,KAAMA,EAAMkC,cAAeA,KAE5D,SAACvB,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAK2E,UAGxB,SAAC,KAAD,CAAWpK,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,MAGpE,C,eC5DM,SAASU,EAAT,GAAqE,IAAD,EAA3C5E,EAA2C,EAA3CA,KAAMkC,EAAqC,EAArCA,cACpC,OACE,SAAC,KAAD,CAAcvG,OAAO,SAAC,KAAD,CAAWR,GAAG,iBAAiBC,GAAG,mBAAvD,UACE,SAAC,IAAD,WACG,UAAC4E,EAAKyD,iBAAN,QAAmB,IAAI9I,KAAI,SAACqI,EAAoBjI,GAC/C,OACE,SAAC,KAAD,CAAuB6I,OAAQC,EAAAA,GAAQ9I,GAAQa,OAAOkI,EAAAA,EAAAA,IAAmBD,EAAAA,GAAQ9I,IAAjF,SACGmH,EAAcc,GAAYE,UADlBF,EAId,OAIR,C,eCLM,SAAS6B,EAAT,GAUwB,IAT7BtK,EAS4B,EAT5BA,QACAyF,EAQ4B,EAR5BA,KACAgE,EAO4B,EAP5BA,aACAjE,EAM4B,EAN5BA,eACAa,EAK4B,EAL5BA,cACAkE,EAI4B,EAJ5BA,aACAb,EAG4B,EAH5BA,UACA/B,EAE4B,EAF5BA,cACAgC,EAC4B,EAD5BA,eAEA,OACE,UAAC,IAAD,CAAMQ,WAAS,EAACV,aAAcA,EAA9B,WACE,UAAC,KAAD,CAAO5J,KAAK,SAAZ,WACE,SAAC,KAAD,CAAYN,MAAM,SAACiL,EAAA,EAAD,OAClB,SAAC,KAAD,CACE5J,IACE,qDACmB,SAAC,KAAD,CAAYF,OAAQ6J,IADvC,yBAIF1J,IACE,sDACoB,SAAC,KAAD,CAAYH,OAAQ6J,IADxC,4BAON,SAAC,KAAD,CAAatB,WAAS,EAAtB,UACE,SAAC,KAAD,CACErI,GAAG,uFACHC,GAAG,0EAIP,SAACuF,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAK2E,UAGxB,SAAC1C,EAAD,CAAe1H,QAASA,EAASyF,KAAMA,EAAMkC,cAAeA,KAE5D,SAAC,KAAD,CAAW3H,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,KAE/D,SAACU,EAAD,CAAe1C,cAAeA,EAAelC,KAAMA,MAGxD,CCrDM,SAASgF,EAAT,GAA4D,IAAD,EAApCzK,EAAoC,EAApCA,QAAS0K,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACtClF,GAAOmF,EAAAA,EAAAA,GAAQ5K,EAAS0K,GAC9B,GAA0BG,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,GAA8CC,EAAAA,EAAAA,GAAoB,iBAAkBN,EAAO1K,GAA3F,eAAOuK,EAAP,KAAqBU,EAArB,KAEMlC,ECpBD,SAAqCgC,GAC1C,IAAQpE,GAAcF,EAAAA,EAAAA,KAAdE,UAEFuE,GAAUC,EAAAA,EAAAA,GAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZC,UAAW,kBAAMR,EAAQ,EAAd,EACXS,eAAgB7E,EAAU,iCAAkC,mCAC5D8E,aAAc9E,EACZ,qEACA,+EAIJ,OAAO,SAAC+E,GACNR,GAAQ,QACNS,OAAQ,iBACLD,GAEN,CACF,CDAwBE,CAA4Bb,GAC7C/B,ECCD,SAAqC+B,GAC1C,IAAQpE,GAAcF,EAAAA,EAAAA,KAAdE,UAEFuE,GAAUC,EAAAA,EAAAA,GAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZC,UAAW,kBAAMR,EAAQ,EAAd,EACXS,eAAgB7E,EAAU,6BAA8B,iCACxD8E,aAAc9E,EACZ,iEACA,6EAIJ,OAAO,SAAC+E,GACNR,GAAQ,QACNS,OAAQ,iBACLD,GAEN,CACF,CDrBwBG,CAA4Bd,GAE7CtB,GACJ,SAAC,KAAD,CACElK,MAAM,SAACuM,EAAA,EAAD,IACN1K,OAAO,SAAC,KAAD,CAAWR,GAAG,WAAWC,GAAG,aACnCkL,aAAY,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAOsB,aAAT,aAAE,EAAcC,QAC5BzM,KAAK,UACLyD,SAAU,EALZ,UAOE,SAAC,KAAD,UACGgI,GACC,SAAC,KAAD,CAAWrK,GAAG,kBAAeC,GAAG,qBAEhC,SAAC,KAAD,CACED,IACE,qDACgB,SAAC,KAAD,CAAYF,OAAQ6J,OAGtC1J,IACE,yCACO,SAAC,KAAD,CAAYH,OAAQ6J,IAD3B,kBAUZ,OACE,SAAC,KAAD,CAAgBI,KAAMA,EAAMuB,MAAK,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAOwB,MAAOC,aAAcC,EAAAA,EAAAA,WAAAA,OAA/D,UACE,UAAC,IAAD,CAActB,KAAMA,EAAMuB,WAAY,EAAE5G,EAAK6G,SAAU7G,EAAK6G,SAAU7G,EAAK6G,SAAUtM,QAASA,EAA9F,WAEE,UAAC,KAAD,CAAQgF,UAAWiG,EAAnB,WACE,SAACzB,EAAD,CACEC,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBsB,cAAe+C,EAAM/C,cACrBoB,eAAgBA,EAChBC,eAAgBA,EAChBW,eAAgBe,EAAMf,kBAGxB,SAACW,EAAD,CACEb,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBsB,cAAe+C,EAAM/C,cACrB4C,aAAcA,EACdZ,eAAgBe,EAAMf,qBAK1B,4BAIP,C,eE5DM,SAAS4C,EAAT,GAWyB,IAV9BvM,EAU6B,EAV7BA,QACAyF,EAS6B,EAT7BA,KACAgE,EAQ6B,EAR7BA,aACAC,EAO6B,EAP7BA,UACAlE,EAM6B,EAN7BA,eACAa,EAK6B,EAL7BA,cACAoC,EAI6B,EAJ7BA,WACAd,EAG6B,EAH7BA,cACA6E,EAE6B,EAF7BA,eACA7C,EAC6B,EAD7BA,eAEQ/C,GAAcC,EAAAA,EAAAA,KAAdD,UAOR,OAJAgD,EAAAA,EAAAA,IAAe,WACb4C,EAAe,CAAE9D,QTxBZ/C,EAAAA,EAAAA,GAAc,EAAC,GAAM,KSyB3B,KAGC,UAAC,IAAD,CAAMwE,WAAS,EAACV,aAAcA,EAA9B,WACE,SAAC,KAAD,CAAO5J,KAAK,SAAZ,UACE,SAAC,KAAD,CAAWe,GAAG,YAAYC,GAAG,sBAG/B,iBAAKpB,UAAU,eAAf,WACE,SAACsI,EAAD,CACErH,OAAQ+E,EACRqB,UAAW,IACXR,gBAAiBb,EAAKO,YACtB2B,cAAeA,KAEjB,iBAAKlI,UAAU,qBAAf,WACE,SAAC,KAAD,CAAOI,KAAK,UAAU4M,MAAO,EAAGhN,UAAU,yBAA1C,SACGkI,EAAcc,GAAYE,YAG7B,UAAC,IAAD,YACE,SAAC,KAAD,CAAQ3D,eAAkCP,IAAvBgB,EAAKiH,gBAAsD,IAAvBjH,EAAKiH,cAA5D,UACE,UAAC,KAAD,CACEjN,UAAU,iDACV6H,SAAU7B,EAAK2D,OAASxC,EACxBuC,QAAS,kBAAMqD,EAAe,CAAE9D,QAAQ,GAA/B,EAHX,WAKE,SAAC,KAAD,CAAYnJ,MAAM,SAACqJ,EAAA,EAAD,IAA8B/I,KAAK,WACrD,SAAC,KAAD,CAAWe,GAAG,MAAMC,GAAG,cAG3B,SAAC,KAAD,CAAQmE,eAAkCP,IAAvBgB,EAAKiH,gBAAsD,IAAvBjH,EAAKiH,cAA5D,UACE,UAAC,KAAD,CACEjN,UAAU,gDACV6H,SAAU7B,EAAK2D,OAASxC,EACxBuC,QAAS,kBAAMqD,EAAe,CAAE9D,QAAQ,GAA/B,EAHX,WAKE,SAAC,KAAD,CAAYnJ,MAAM,SAACsJ,EAAA,EAAD,IAA8BhJ,KAAK,UALvD,KAKkE,SAAC,KAAD,CAAWe,GAAG,SAAMC,GAAG,sBAOjG,SAACuF,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAK2E,UAGxB,SAAC,KAAD,CAAWpK,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,MAGpE,CCxFM,SAASgD,EAAT,GAA4D,IAAD,EAApC3M,EAAoC,EAApCA,QAAS0K,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACtClF,GAAOmF,EAAAA,EAAAA,GAAQ5K,EAAS0K,GACtBI,GAASD,EAAAA,EAAAA,KAATC,KAEF0B,EF8BD,WACL,IAAQ7F,GAAcF,EAAAA,EAAAA,KAAdE,UAEFuE,GAAUC,EAAAA,EAAAA,GAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbC,WAAY,gBACZE,eAAgB7E,EAAU,iCAAkC,iCAC5D8E,aAAc9E,EACZ,qEACA,6EAIJ,OAAO,SAAC+E,GACNR,GAAQ,QACNS,OAAQ,iBACLD,GAEN,CACF,CEjDwBkB,GAEjBnD,GACJ,SAAC,KAAD,CACElK,MAAM,SAACsN,EAAA,EAAD,IACNzL,OAAO,SAAC,KAAD,CAAWR,GAAG,YAAYC,GAAG,yBACpCkL,aAAY,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAOsB,aAAT,aAAE,EAAcC,QAC5BzM,KAAK,UACLyD,SAAU,IAId,OACE,SAAC,KAAD,CAAgB0H,KAAMA,EAAMuB,MAAK,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAOwB,MAAOC,aAAcC,EAAAA,EAAAA,WAAAA,UAA/D,UACE,UAAC,IAAD,CAActB,KAAMA,EAAM9K,QAASA,EAAnC,WAEE,SAACuM,EAAD,CACE9C,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBoC,WAAYiC,EAAMoC,kBAClBnF,cAAe+C,EAAM/C,cACrB6E,eAAgBA,EAChB7C,eAAgBe,EAAMf,kBAIxB,4BAIP,C,eCvBM,SAASoD,GAAT,GAYmB,IAAD,IAXvB/M,EAWuB,EAXvBA,QACAyF,EAUuB,EAVvBA,KACAgE,EASuB,EATvBA,aACAC,EAQuB,EARvBA,UACAlE,EAOuB,EAPvBA,eACAa,EAMuB,EANvBA,cACA2G,EAKuB,EALvBA,eACArF,EAIuB,EAJvBA,cACAsF,EAGuB,EAHvBA,cACAtD,EAEuB,EAFvBA,eACAlI,EACuB,EADvBA,OAMA,OAJAmI,EAAAA,EAAAA,IAAe,WACbqD,EAAc,CAAEjH,YAAaT,EAAUC,EAAgBC,EAAMuH,EAAe3I,KAC7E,KAGC,UAAC,IAAD,CAAM8F,WAAS,EAACV,aAAcA,EAA9B,WACE,SAAC,KAAD,CAAO5J,KAAK,SAAZ,UACE,SAAC,KAAD,CAAWe,GAAG,0BAAuBC,GAAG,2BAG1C,SAAC,KAAD,CAAaoI,WAAS,EAAtB,UACE,SAAC,KAAD,CACErI,IACE,sGACgE,KAC9D,SAAC,KAAD,CAAYF,OAAQsM,IAFtB,sCAEsE,KACpE,UAAClN,EAAA,EAAD,WACG2B,EADH,KACYyL,EAAAA,EAAAA,IAAUzL,EAAQ,YAJhC,kCASFZ,IACE,0FACwD,SAAC,KAAD,CAAYH,OAAQsM,IAD5E,iCAE4B,KAC1B,UAAClN,EAAA,EAAD,WACG2B,EADH,KACYyL,EAAAA,EAAAA,IAAUzL,EAAQ,YAJhC,0CAYN,SAAC,IAAD,CAAOhC,UAAU,kBAAjB,UACE,SAACsI,EAAD,CACErH,OAAQsM,EACRlG,UAAW,IACXa,cAAeA,EACfzB,QAAO,UAAET,EAAKS,eAAP,aAAE,EAAe8G,EAAe3I,SAI3C,SAAC+B,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAKO,YACtBO,YAAa0G,EACbzG,aAAY,UAAEf,EAAKS,eAAP,aAAE,EAAe8G,EAAe3I,OAG9C,SAAC,KAAD,CAAWrE,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,MAGpE,CC3EM,SAASwD,GAAT,GASyB,IAR9BnN,EAQ6B,EAR7BA,QACAyF,EAO6B,EAP7BA,KACAgE,EAM6B,EAN7BA,aACAjE,EAK6B,EAL7BA,eACAa,EAI6B,EAJ7BA,cACAqD,EAG6B,EAH7BA,UACA/B,EAE6B,EAF7BA,cACAgC,EAC6B,EAD7BA,eAEA,OACE,UAAC,IAAD,CAAMQ,WAAS,EAACV,aAAcA,EAA9B,WACE,UAAC,KAAD,CAAO5J,KAAK,SAAZ,WACE,SAAC,KAAD,CAAYN,MAAM,SAACiL,EAAA,EAAD,OAClB,SAAC,KAAD,CACE5J,IAAI,mGACJC,IAAI,qGAIR,SAAC,KAAD,CAAaoI,WAAS,EAAtB,UACE,SAAC,KAAD,CACErI,IACE,kDACa,SAACd,EAAA,EAAD,sBADb,oCAIFe,IACE,4CACU,SAACf,EAAA,EAAD,sBADV,kDAON,SAACsG,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAK2E,UAGxB,SAAC1C,EAAD,CAAe1H,QAASA,EAASyF,KAAMA,EAAMkC,cAAeA,KAE5D,SAAC,KAAD,CAAW3H,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,MAGpE,CCjDM,SAASyD,GAAT,GAA8D,IAAD,IAApCpN,EAAoC,EAApCA,QAAS0K,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACxClF,GAAOmF,EAAAA,EAAAA,GAAQ5K,EAAS0K,GAC9B,GAA0BG,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,GAAkDC,EAAAA,EAAAA,GAAoB,WAAYN,EAAO1K,GAAzF,eAAOgN,EAAP,KAAuBK,EAAvB,KACMJ,EL8CD,SAAoClC,GACzC,IAAQpE,GAAcF,EAAAA,EAAAA,KAAdE,UAEFuE,GAAUC,EAAAA,EAAAA,GAAW,CACzBC,YAAaC,EAAAA,GAAAA,aACbE,UAAW,kBAAMR,EAAQ,EAAd,EACXO,WAAY,eACZE,eAAgB7E,EAAU,gCAAiC,gCAC3D8E,aAAc9E,EACZ,oEACA,4EAIJ,OAAO,SAAC+E,GACNR,GAAQ,QACNS,OAAQ,gBACLD,GAEN,CACF,CKlEuB4B,CAA2BvC,GAE3CtB,GACJ,SAAC,KAAD,CACElK,MAAM,SAACgO,EAAA,EAAD,IACNnM,OAAO,SAAC,KAAD,CAAWR,GAAG,yBAAsBC,GAAG,gBAC9CkL,aAAY,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAOsB,aAAT,aAAE,EAAcC,QAC5BzM,KAAK,UACLyD,SAAU,EALZ,UAOE,SAAC,KAAD,UACGoK,GACC,SAAC,KAAD,CAAWzM,GAAG,+BAAyBC,GAAG,yBAE1C,SAAC,KAAD,CACED,IACE,qDACgB,SAAC,KAAD,CAAYF,OAAQsM,IADpC,OAIFnM,IACE,kDACgB,SAAC,KAAD,CAAYH,OAAQsM,IADpC,aAUZ,OACE,SAAC,KAAD,CAAgBrC,KAAMA,EAAMuB,MAAK,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAOwB,MAAOC,aAAcC,EAAAA,EAAAA,WAAAA,SAA/D,UACE,UAAC,IAAD,CAActB,KAAMA,EAAM9K,QAASA,EAAnC,WAEE,UAAC,KAAD,CAAQgF,WAAYqI,EAApB,WACE,SAACN,GAAD,CACEtD,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBsB,cAAe+C,EAAM/C,cACrBsF,cAAeA,EACftD,eAAgBe,EAAMf,eACtBqD,eAAgBA,EAChBvL,OAAM,UAAEiJ,EAAMjJ,cAAR,QAAkB,KAG1B,SAAC0L,GAAD,CACE1D,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBsB,cAAe+C,EAAM/C,cACrBgC,eAAgBe,EAAMf,qBAK1B,4BAIP,C,4BC1DM,SAAS6D,GAAT,GAcc,IAbnBxN,EAakB,EAblBA,QACAyF,EAYkB,EAZlBA,KACAgE,EAWkB,EAXlBA,aACAC,EAUkB,EAVlBA,UACAlE,EASkB,EATlBA,eACAa,EAQkB,EARlBA,cACA2G,EAOkB,EAPlBA,eACArF,EAMkB,EANlBA,cACAlG,EAKkB,EALlBA,OACAgM,EAIkB,EAJlBA,QACA9D,EAGkB,EAHlBA,eACA+D,EAEkB,EAFlBA,aACAC,EACkB,EADlBA,OAEMC,EAAYH,EAAQ9M,OAAS,EAEnC,OACE,UAAC,IAAD,CAAMwJ,WAAS,EAACV,aAAcA,EAA9B,WACE,SAAC,KAAD,CAAO5J,KAAK,SAAZ,UACE,UAAC,KAAD,CAAQmF,UAAW4I,EAAnB,WACE,SAAC,KAAD,CACEhN,IACE,iCACE,SAAC,KAAD,CAAYF,OAAQsM,IADtB,oBAIFnM,IACE,iCACE,SAAC,KAAD,CAAYH,OAAQsM,IADtB,uBAMJ,SAAC,KAAD,CAAWpM,GAAG,2BAAwBC,GAAG,qCAI7C,SAAC,KAAD,CAAaoI,WAAS,EAAtB,UACE,UAAC,KAAD,CAAQjE,UAAW4I,EAAnB,WACE,iCACE,SAAC7N,GAAA,EAAD,CAAeC,QAASA,EAASC,KAAMwN,EAAStN,OAAO,aACvD,SAAC,KAAD,CACES,IACE,uDACuB,KACrB,UAACd,EAAA,EAAD,WACG2B,EADH,KACYyL,EAAAA,EAAAA,IAAUzL,EAAQ,YAHhC,OAQFZ,IACE,wDAEE,UAACf,EAAA,EAAD,WACG2B,EADH,KACYyL,EAAAA,EAAAA,IAAUzL,EAAQ,qBAOtC,+BACE,SAAC,KAAD,CACEb,IACE,oDACkB,SAAC,KAAD,CAAYF,OAAQsM,IADtC,oGAKFnM,IACE,qEACmC,SAAC,KAAD,CAAYH,OAAQsM,IADvD,mDAUV,SAAC,IAAD,CAAOvN,UAAU,kBAAjB,SACG8I,QAAQoF,KACP,SAAC5F,EAAD,CACErH,OAAQiN,EACR7G,UAAW,IACXa,cAAeA,EACfrB,gBAAiBqH,EAAQ3H,iBAK/B,SAACI,EAAD,CACEZ,eAAgBA,EAChBa,cAAeA,EACfC,gBAAiBb,EAAK2E,UAGxB,SAAC,IAAD,CAAO3K,UAAU,kBAAkBoO,MAAM,SAAzC,UACE,SAAC,KAAD,CAAa5K,SAAU2K,EAAY,GAAK,EAAGzK,SAAUuK,EAAcvE,QAASuE,EAA5E,UACE,SAAC,KAAD,CAAW9M,GAAG,cAAcC,GAAG,qBAInC,SAAC,KAAD,CAAWb,QAASA,EAASgB,MAAO0I,EAAWC,eAAgBA,MAGpE,C,wCC9HM,SAASmE,GAAT,GAAuF,IAAhE9N,EAA+D,EAA/DA,QAAS6B,EAAsD,EAAtDA,QAASkM,EAA6C,EAA7CA,iBAAkB/B,EAA2B,EAA3BA,MAChE,OACE,UAAC,KAAD,CACEhM,QAASA,EACT6B,QAASA,EACTL,yBAA0B,EACxB,SAAC,KAAD,CAAWZ,GAAG,yBAAyBC,GAAG,mBAC1C,SAAC,KAAD,CAAWD,GAAG,2CAA2CC,GAAG,2BALhE,WAQE,SAAC,IAAD,CAAOpB,UAAU,kBAAkBoO,MAAM,SAAzC,UACE,SAAC,MAAD,CAAQ1E,QAAS4E,EAAjB,UACE,SAAC,KAAD,CAAWnN,GAAG,0BAA0BC,GAAG,2BAG/C,SAAC,MAAD,CAAsBmL,MAAOA,MAGlC,CChBM,SAASgC,GAAT,GAA4D,IAAD,IAApChO,EAAoC,EAApCA,QAAS0K,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KACtClF,GAAOmF,EAAAA,EAAAA,GAAQ5K,EAAS0K,GAC9B,GAAiDG,EAAAA,EAAAA,KAAzCC,EAAR,EAAQA,KAAM4C,EAAd,EAAcA,aAAcK,EAA5B,EAA4BA,iBAC5B,GAAyB/C,EAAAA,EAAAA,GAAoB,WAAYN,EAAO1K,GAAzDgN,GAAP,eAEMvD,GACJ,SAAC,KAAD,CACElK,MAAM,SAAC0O,GAAA,EAAD,IACN7M,OAAO,SAAC,KAAD,CAAWR,GAAG,6BAA6BC,GAAG,6BACrDkL,aAAY,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAOsB,aAAT,aAAE,EAAcC,QAC5BzM,KAAK,UACLyD,SAAU,EALZ,UAOE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWrC,GAAG,qBAAqBC,GAAG,yBAK5C,OACE,SAAC,KAAD,CAAgB8J,KAAMA,EAAMuB,MAAK,OAAExB,QAAF,IAAEA,OAAF,EAAEA,EAAOwB,MAAOC,aAAcC,EAAAA,EAAAA,WAAAA,OAA/D,UACE,UAAC,IAAD,CAActB,KAAMA,EAAM9K,QAASA,EAAnC,WAEE,SAACwN,GAAD,CACE/D,aAAcA,EACdzJ,QAASA,EACTyF,KAAMA,EACNiE,UAAWgB,EAAMhB,UACjBlE,eAAgBkF,EAAMlF,eACtBa,cAAeqE,EAAMrE,cACrBsB,cAAe+C,EAAM/C,cACrBgC,eAAgBe,EAAMf,eACtBqD,eAAgBA,EAChBvL,OAAM,UAAEiJ,EAAMjJ,cAAR,QAAkB,EACxBgM,QAAS/C,EAAM+C,QACfC,aAAcA,EACdC,OAAQjD,EAAMiD,UAIhB,SAACG,GAAD,CACE9N,QAASA,EACTgM,MAAOtB,EAAMsB,MACbnK,QAAS6I,EAAM7I,QACfkM,iBAAkBA,QAK3B,C,4BCtCD,OApBA,YAAqD,IAA5BrD,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAC9B,OACE,SAAC,KAAD,CAAiBA,KAAMA,EAAMD,MAAOA,EAAOwD,kBAAkB,SAACC,GAAA,EAAD,IAA7D,UACE,SAAC,IAAD,CAAO1O,UAAU,kBAAkBqI,MAAI,EAAvC,SACG4C,EAAM0D,QAAQhO,KAAI,SAACwD,GAClB,OACE,SAACmE,EAAD,CAEErH,OAAQkD,EACRkD,UAAW,IACXa,cAAe+C,EAAM/C,cACrBrB,gBAAiB1C,EAAMoC,aALzB,iBACiBpC,EAAMoC,aAO1B,OAIR,ECTD,SAASqI,GAAmBnC,GAC1B,OAAQA,GACN,KAAKE,EAAAA,EAAAA,QAAAA,MACH,OAAOkC,EAAAA,GACT,KAAKlC,EAAAA,EAAAA,QAAAA,MACH,OAAOmC,EAAAA,GACT,KAAKnC,EAAAA,EAAAA,QAAAA,MACH,OAAOoC,EAAAA,GACT,KAAKpC,EAAAA,EAAAA,WAAAA,OACH,OAAO3B,EACT,KAAK2B,EAAAA,EAAAA,WAAAA,UACH,OAAOO,EACT,KAAKP,EAAAA,EAAAA,WAAAA,SACH,OAAOgB,GACT,KAAKhB,EAAAA,EAAAA,WAAAA,OACH,OAAO4B,GACT,KAAK5B,EAAAA,EAAAA,QAAAA,UACH,OAAOqC,GACT,QACE,OAAOC,EAAAA,EAEZ,CAqBD,OAnBA,YAAoD,IAAzBC,EAAwB,EAAxBA,OACzB,OACE,SAAC,KAAD,CACEC,MAAO,CACLC,MAAO,CACLC,aAAcC,EAAAA,GAAAA,UAHpB,UAOE,SAAC,IAAD,CACEJ,OAAQA,EACRK,eAAgBC,EAAAA,GAAAA,WAChBZ,mBAAoBA,GACpBa,oBAAoB,kBAI3B,C,6FC9CM,SAASlE,IAIU,IAHxBmE,EAGuB,uDAHR,eACfzE,EAEuB,uDAFF,CAAC,EACtB1K,EACuB,uDADJ,CAAC,EAEpB,GAAiBoP,EAAAA,EAAAA,IAAe,UAAhC,eAAOC,EAAP,KACA,GAAwCrN,EAAAA,EAAAA,UAAqB,CAAC,GAA9D,eAAOuI,EAAP,KAAqB+E,EAArB,KACA,GAA4BtN,EAAAA,EAAAA,WAAS,GAArC,eAAOuN,EAAP,KAAeC,EAAf,KASA,OANAtL,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRqG,EAAY,OAAGG,QAAH,IAAGA,OAAH,EAAGA,EAAQyE,GAC7BG,EAAe,iBAACtP,QAAD,IAACA,OAAD,EAACA,EAAUuK,UAAX,QAA4B,CAAC,GAC5CiF,GAAe,OAAL9E,QAAK,IAALA,OAAA,EAAAA,EAAQyE,MAAkBE,EACrC,GAAE,CAACrP,EAASmP,EAAczE,EAAO2E,IAE3B,CAAC9E,EAAcgF,EACvB,C,kFC3BM,SAAS/E,EAAkBiF,GAChC,OACE,iCAAKC,MAAM,6BAA6BC,QAAQ,eAAkBF,GAAlE,eACE,iBACEG,KAAK,UACLC,EAAE,yFAEJ,iBACED,KAAK,UACLC,EAAE,8JAEJ,iBACED,KAAK,UACLC,EAAE,4JAEJ,iBACED,KAAK,UACLC,EAAE,8KAEJ,iBAAMA,EAAE,waACR,iBAAMA,EAAE,gSAER,0BACE,iBACED,KAAK,UACLC,EAAE,kOAEJ,iBAAMA,EAAE,iZACR,6BACEC,cAAc,YACdC,IAAI,KACJC,KAAK,YACLC,YAAY,aACZC,GAAG,cACH1Q,KAAK,iBAKd,C,kFCvCM,SAAS+N,EAAckC,GAC5B,OACE,iCAAKC,MAAM,6BAA6BC,QAAQ,eAAkBF,GAAlE,eACE,iBACEG,KAAK,UACLC,EAAE,sFAEJ,iBACED,KAAK,UACLC,EAAE,6LAEJ,eAAGD,KAAK,UAAR,WACE,mBAAQO,GAAG,KAAKC,GAAG,UAAUC,EAAE,QAC/B,mBAAQF,GAAG,MAAMC,GAAG,UAAUC,EAAE,WAElC,iBACET,KAAK,UACLC,EAAE,8MAEJ,iBACED,KAAK,UACLC,EAAE,4OAEJ,eAAGD,KAAK,UAAR,WACE,iBAAMC,EAAE,ydACR,mBAAQM,GAAG,UAAUC,GAAG,UAAUC,EAAE,eAEtC,iBAAMR,EAAE,8oDACR,iBAAMA,EAAE,qsCAGb,C,iFC/BM,SAASjH,EAAyB6G,GACvC,OACE,iCAAKC,MAAM,6BAA6BC,QAAQ,eAAkBF,GAAlE,eACE,iBACEG,KAAK,UACLC,EAAE,8SAEJ,mBAAQM,GAAG,MAAMC,GAAG,UAAUC,EAAE,UAAUT,KAAK,aAC/C,iBACEA,KAAK,UACLC,EAAE,kQAEJ,mBAAQM,GAAG,MAAMC,GAAG,UAAUC,EAAE,UAAUT,KAAK,aAC/C,iBACEA,KAAK,UACLC,EAAE,6PAEJ,iBACED,KAAK,UACLC,EAAE,wQAEJ,0BACE,iBAAMA,EAAE,4gCACR,iBAAMA,EAAE,yjBACR,iBAAMA,EAAE,o3BAIf,C,kFC5BM,SAAShH,EAAyB4G,GACvC,OACE,iCAAKC,MAAM,6BAA6BC,QAAQ,eAAkBF,GAAlE,eACE,iBACEG,KAAK,UACLC,EAAE,+SAEJ,mBAAQM,GAAG,MAAMC,GAAG,SAASC,EAAE,UAAUT,KAAK,aAC9C,iBACEA,KAAK,UACLC,EAAE,gQAEJ,mBAAQM,GAAG,MAAMC,GAAG,MAAMC,EAAE,UAAUT,KAAK,aAC3C,iBACEA,KAAK,UACLC,EAAE,sPAEJ,iBACED,KAAK,UACLC,EAAE,kZAEJ,0BACE,iBAAMA,EAAE,miCACR,iBAAMA,EAAE,yvBACR,iBAAMA,EAAE,ssCAIf,C,kFC5BM,SAASS,EAASb,GACvB,OACE,iCAAKC,MAAM,6BAA6BC,QAAQ,eAAkBF,GAAlE,eACE,iBACEG,KAAK,UACLC,EAAE,oMAEJ,iBACED,KAAK,UACLC,EAAE,iSAEJ,iBAAMA,EAAE,0xCAGb,C,iFCZD,EADsB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,0HAA8H,KAAQ,WAAY,MAAS,Y,WCKpThL,EAAkB,SAAyB4K,EAAOc,GACpD,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,CAAC,EAAGjB,GAAQ,CAAC,EAAG,CAC5Fc,IAAKA,EACLhR,KAAMoR,IAET,EACD9L,EAAgB+L,YAAc,kBAC9B,MAA4BJ,EAAAA,WAAiB3L,E,iFCX7C,EADkB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,qaAAya,KAAQ,QAAS,MAAS,U,WCKxlBN,EAAc,SAAqBkL,EAAOc,GAC5C,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,CAAC,EAAGjB,GAAQ,CAAC,EAAG,CAC5Fc,IAAKA,EACLhR,KAAMsR,IAET,EACDtM,EAAYqM,YAAc,cAC1B,MAA4BJ,EAAAA,WAAiBjM,E","sources":["components/metrics/MetricHighlight.tsx","components/metrics/PointsHighlight.tsx","components/players/ListOfPlayers.tsx","components/ranking/RankingBoard.tsx","components/ranking/StepRankingWrapper.tsx","components/views/View.tsx","components/views/ViewIf.tsx","components/views/ViewOr.tsx","components/views/ViewSwitch.tsx","games/ta-na-cara/utils/mock.ts","games/ta-na-cara/components/CharactersBoard.tsx","games/ta-na-cara/components/PlayersBoards.tsx","games/ta-na-cara/components/PlayerChoices.tsx","games/ta-na-cara/StepSelectPrompt.tsx","games/ta-na-cara/components/UserQuestions.tsx","games/ta-na-cara/StepWaitingForPrompt.tsx","games/ta-na-cara/PhasePrompt.tsx","games/ta-na-cara/utils/api-requests.ts","games/ta-na-cara/StepAnswerTheQuestion.tsx","games/ta-na-cara/PhaseAnswering.tsx","games/ta-na-cara/StepGuessPlayer.tsx","games/ta-na-cara/StepWaitingForGuesses.tsx","games/ta-na-cara/PhaseGuessing.tsx","games/ta-na-cara/StepReveal.tsx","games/ta-na-cara/StepRanking.tsx","games/ta-na-cara/PhaseReveal.tsx","games/ta-na-cara/PhaseGameOver.tsx","games/ta-na-cara/SessionTaNaCara.tsx","hooks/useWhichPlayerIsThe.ts","icons/AnimatedClockIcon.tsx","icons/AnonymousIcon.tsx","icons/SpeechBubbleAcceptedIcon.tsx","icons/SpeechBubbleDeclinedIcon.tsx","icons/StarIcon.tsx","../node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js","../node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/CrownFilled.js","../node_modules/@ant-design/icons/es/icons/CrownFilled.js"],"sourcesContent":["import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Components\nimport { IconAvatar } from 'components/avatars/IconAvatar';\n\nimport { AvatarSize } from 'antd/lib/avatar/SizeContext';\n\nexport type MetricHighlightProps = {\n  /**\n   * The text to be highlighted\n   */\n  children: ReactNode;\n  /**\n   * The icon representing the metric\n   */\n  icon: ReactNode;\n  /**\n   * Indicates if it's a negative metric\n   */\n  type?: 'positive' | 'negative' | 'default';\n  /**\n   * The size of the avatar (default: small)\n   */\n  iconSize?: AvatarSize;\n  /**\n   * Custom class\n   */\n  className?: string;\n  /**\n   * Icon placement (default: after)\n   */\n  iconPlacement?: 'before' | 'after';\n};\n\nexport function MetricHighlight({\n  children,\n  icon,\n  type,\n  className,\n  iconSize = 'small',\n  iconPlacement = 'after',\n}: MetricHighlightProps) {\n  return (\n    <span className={clsx('metric-highlight', type && `metric-highlight--${type}`, className)}>\n      {iconPlacement === 'before' && (\n        <>\n          <IconAvatar size={iconSize} icon={icon} />{' '}\n        </>\n      )}\n      {children}\n      {iconPlacement === 'after' && (\n        <>\n          {' '}\n          <IconAvatar size={iconSize} icon={icon} />\n        </>\n      )}\n    </span>\n  );\n}\n\nexport type HighlightProps = Pick<MetricHighlightProps, 'children' | 'type' | 'iconSize' | 'className'>;\n","import { StarIcon } from 'icons/StarIcon';\nimport { HighlightProps, MetricHighlight } from 'components/metrics/MetricHighlight';\n\nexport function PointsHighlight({ children, type, iconSize, className }: HighlightProps) {\n  return (\n    <MetricHighlight icon={<StarIcon />} type={type} iconSize={iconSize} className={className}>\n      {children}\n    </MetricHighlight>\n  );\n}\n","import { Fragment } from 'react';\n// Components\nimport { AvatarName } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype ListOfPlayersProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ordered subset of players to be listed\n   */\n  list: PlayerId[];\n  /**\n   * The key prefix\n   */\n  prefix: string;\n  /**\n   * Flag indicating if only the names should be listed\n   */\n  namesOnly?: boolean;\n  /**\n   * Optional class name\n   */\n  className?: string;\n};\n\n/**\n * Renders player names from a list of playerIds\n * @param props\n * @returns\n */\nexport function ListOfPlayers({ players, list, namesOnly, prefix, className }: ListOfPlayersProps) {\n  if (namesOnly) {\n    return <span className={className}>{list.map((playerId) => players[playerId].name).join(',')}</span>;\n  }\n\n  return (\n    <span className={className}>\n      {list.map((playerId, index) => (\n        <Fragment key={`${prefix}-${playerId}`}>\n          <AvatarName player={players[playerId]} />\n          {index < list.length - 2 && ','}\n          {index === list.length - 2 && <Translate pt=\"e\" en=\"and\" />}\n        </Fragment>\n      ))}\n    </span>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { orderBy } from 'lodash';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Tooltip } from 'antd';\nimport { CrownFilled } from '@ant-design/icons';\n// Hooks\nimport { useCountdown } from 'hooks/useCountdown';\nimport { useDimensions } from 'hooks/useDimensions';\n// Components\nimport { Translate } from 'components/language';\nimport { Avatar } from 'components/avatars';\n\ntype GainedPointProps = {\n  gainedPoint: number;\n  order: number;\n  description?: any;\n};\n\nfunction GainedPoint({ gainedPoint, order, description }: GainedPointProps): JSX.Element {\n  const isPositive = gainedPoint > 0;\n  const isNegative = gainedPoint < 0;\n  return (\n    <li\n      className={clsx(\n        'ranking-board__gained-point',\n        isPositive && 'ranking-board__gained-point--plus',\n        isNegative && 'ranking-board__gained-point--minus',\n        `ranking-board__gained-point--${order}`\n      )}\n    >\n      <Tooltip\n        title={description ?? <Translate pt=\"Pontos ganhos\" en=\"Gained Points\" />}\n        color={isPositive ? 'gold' : isNegative ? 'red' : 'gray'}\n      >\n        {isPositive ? '+' : ''}\n        {gainedPoint}\n      </Tooltip>\n    </li>\n  );\n}\n\ntype GainedPointsProps = {\n  gainedPoints: number[] | number;\n  playerId: PlayerId;\n  gainedPointsDescriptions?: any[];\n};\n\nfunction GainedPoints({\n  gainedPoints,\n  playerId,\n  gainedPointsDescriptions = [],\n}: GainedPointsProps): JSX.Element {\n  const points = Array.isArray(gainedPoints) ? gainedPoints : [gainedPoints];\n  return (\n    <ul className=\"ranking-board__cell-gained-points\">\n      {points.map((gainedPoint, index) => (\n        <GainedPoint\n          key={`gained-point-${playerId}-${index}`}\n          gainedPoint={gainedPoint}\n          order={index}\n          description={gainedPointsDescriptions[index]}\n        />\n      ))}\n    </ul>\n  );\n}\n\ntype RankingBoardProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  gainedPointsDescriptions?: ReactNode[];\n  hideGainedPoints?: boolean;\n  delay?: number;\n};\n\nexport function RankingBoard({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  hideGainedPoints = false,\n  delay = 0,\n}: RankingBoardProps): JSX.Element {\n  const [displayStep, setDisplayStep] = useState(0);\n  const [sortedRanking, setSortedRanking] = useState<GameRanking>([]);\n  const [reRank, setReRank] = useState(0);\n  const [, height] = useDimensions('ranking-row-0');\n\n  const maxPoints = useMemo(() => Math.max(...ranking.map((scores) => scores.newScore)), [ranking]);\n\n  const { seconds } = useCountdown({\n    duration: 5 + delay,\n    autoStart: true,\n    onExpire: () => {\n      setReRank(1);\n      setDisplayStep(3);\n    },\n  });\n\n  // Rank by previousScore\n  useEffectOnce(() => {\n    const positions: PlainObject = {};\n    let lastPosition = 0;\n    let lastPoints = 0;\n\n    const rankByFinalScoreDict = orderBy(ranking, ['newScore', 'name'], ['desc', 'asc']).reduce(\n      (acc: PlainObject, entry, index) => {\n        acc[entry.playerId] = index;\n        // Calculate position\n        if (lastPoints === 0 || entry.newScore < lastPoints) {\n          lastPoints = entry.newScore;\n          lastPosition += 1;\n        }\n        positions[entry.playerId] = [0, lastPosition];\n        return acc;\n      },\n      {}\n    );\n\n    const rankByPreviousScore = orderBy(ranking, ['previousScore', 'name'], ['desc', 'asc']);\n\n    // Reset position trackers\n    lastPosition = 0;\n    lastPoints = 0;\n\n    const tempSortedRanking: GameRanking = rankByPreviousScore.map((entry, index) => {\n      const newEntry = { ...entry };\n\n      newEntry.order = [index, rankByFinalScoreDict[newEntry.playerId]];\n      newEntry.position = positions[newEntry.playerId];\n      // Calculate position\n      if (lastPoints === 0 || entry.previousScore < lastPoints) {\n        lastPoints = entry.previousScore;\n        lastPosition += 1;\n      }\n      newEntry.position[0] = lastPosition;\n      return newEntry;\n    });\n\n    setSortedRanking(tempSortedRanking);\n  });\n\n  // Show gained points\n  useEffect(() => {\n    if (seconds === 4 + delay) {\n      setDisplayStep(1);\n    } else if (seconds === 2 + delay) {\n      setDisplayStep(2);\n    }\n  }, [seconds, delay]);\n\n  return (\n    <div\n      className=\"ranking-board\"\n      style={{ height: `${(Math.max(60, height) + 8) * sortedRanking.length}px` }}\n    >\n      {sortedRanking.map((entry, index) => {\n        const { playerId, newScore, previousScore, gainedPoints, order, position } = entry;\n        const hPosition = (Math.max(60, height) + 8) * (order[reRank] ?? 0);\n\n        return (\n          <div\n            className={`ranking-board__row ranking-board__row--${index}`}\n            key={`ranking-${playerId}`}\n            id={`ranking-row-${index}`}\n            style={{ top: `${hPosition}px` }}\n          >\n            <div className=\"ranking-board__cell-crown\">\n              {newScore > 0 && maxPoints === newScore && displayStep >= 3 && (\n                <CrownFilled className=\"ranking-board__crown-icon\" />\n              )}\n            </div>\n            <div className=\"ranking-board__cell-position\">#{position[reRank] ?? ''}</div>\n            <div className=\"ranking-board__cell-player\">\n              <div className=\"ranking-board__avatar\">\n                <Avatar id={players[playerId].avatarId} />\n              </div>\n              <div className=\"ranking-board__name\">{players[playerId].name}</div>\n            </div>\n            <Tooltip title={<Translate pt=\"Pontos Anteriores\" en=\"Previous Points\" />} color=\"gray\">\n              <div className=\"ranking-board__cell-points\">{previousScore}</div>\n            </Tooltip>\n            {!hideGainedPoints && displayStep >= 1 && gainedPoints !== undefined && (\n              <GainedPoints\n                gainedPoints={gainedPoints}\n                playerId={playerId}\n                gainedPointsDescriptions={gainedPointsDescriptions}\n              />\n            )}\n            {displayStep >= 2 && (\n              <Tooltip title=\"Total\" color=\"gold\">\n                <span className=\"ranking-board__cell-points-total\">{newScore}</span>\n              </Tooltip>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { CaretUpOutlined } from '@ant-design/icons';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Components\nimport { Translate } from 'components/language';\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { RankingBoard } from './RankingBoard';\n\ntype StepRankingWrapperProps = {\n  /**\n   * The players\n   */\n  players: GamePlayers;\n  /**\n   * The ranking array\n   */\n  ranking: GameRanking;\n  /**\n   * Gained points descriptions for the popover\n   */\n  gainedPointsDescriptions: ReactNode[];\n  /**\n   * Additional content\n   */\n  children?: ReactNode;\n  /**\n   * Replacement title for Ranking\n   */\n  title?: ReactNode;\n  /**\n   * Optional node that goes under the title\n   */\n  subtitle?: ReactNode;\n};\n\nexport function StepRankingWrapper({\n  players,\n  ranking,\n  gainedPointsDescriptions,\n  children,\n  title,\n  subtitle,\n}: StepRankingWrapperProps) {\n  useTemporarilyHidePlayersBar();\n\n  return (\n    <Step>\n      <Title>{title ?? 'Ranking'}</Title>\n\n      {subtitle}\n\n      <RankingBoard players={players} ranking={ranking} gainedPointsDescriptions={gainedPointsDescriptions} />\n      <Instruction className=\"step-ranking-wrapper-gained-points-instruction\">\n        <CaretUpOutlined />\n        <Translate\n          pt=\"Passe o mouse em cada um dos pontos para saber como eles foram distribuídos\"\n          en=\"Hover over the scores to learn how they were granted\"\n        />\n        <CaretUpOutlined />\n      </Instruction>\n\n      {children}\n    </Step>\n  );\n}\n","import { ReactNode } from 'react';\n\ntype ViewProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\nexport function View({ children }: ViewProps) {\n  return <>{children}</>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewIfProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Displays children only if condition is truthy\n   */\n  condition?: boolean;\n};\n\n/**\n * Wrapper component that only renders the children if the condition is truthy\n */\nexport function ViewIf({ condition = false, children }: ViewIfProps) {\n  return condition ? <>{children}</> : <></>;\n}\n","import { ReactNode } from 'react';\n\ntype ViewOrProps = {\n  /**\n   * The content of the component to be toggled\n   */\n  children: [ReactNode, ReactNode];\n  /**\n   * The condition to be met to render the first children\n   */\n  condition?: boolean;\n};\n\n/**\n * View wrapper that renders one of two children depending on a condition\n */\nexport function ViewOr({ condition = false, children }: ViewOrProps) {\n  return condition ? <>{children[0]}</> : <>{children[1]}</>;\n}\n","type ViewSwitchProps = {\n  cases: boolean[];\n  /**\n   * The content of the component\n   */\n  children: any;\n};\n\nexport function ViewSwitch({ cases, children }: ViewSwitchProps) {\n  if (cases.length > 5) {\n    throw Error('ViewSwitch only supports up to 5 cases');\n  }\n\n  if (cases[0] && children[0]) {\n    return children[0];\n  }\n\n  if (cases[1] && children[1]) {\n    return children[1];\n  }\n\n  if (cases[2] && children[2]) {\n    return children[2];\n  }\n\n  if (cases[3] && children[3]) {\n    return children[3];\n  }\n\n  if (cases[4] && children[4]) {\n    return children[4];\n  }\n  console.warn('Rendering all children in the ViewSwitch');\n  return children;\n}\n","import { getRandomItem } from 'utils/helpers';\n\nexport function mockPromptDecision(\n  user: GamePlayer,\n  players: GamePlayers,\n  onSubmitPrompt: GenericFunction,\n  onSubmitTarget: GenericFunction\n) {\n  const options = [\n    ...user.questions,\n    // ...user.questions,\n    ...Object.keys(players).filter((pId) => pId !== user.id),\n  ];\n\n  const choice = getRandomItem(options);\n\n  if (choice.startsWith('t-')) {\n    onSubmitPrompt({ questionId: choice });\n  } else {\n    onSubmitTarget({ targetId: choice });\n  }\n}\n\nexport function mockAnswer() {\n  return getRandomItem([true, false]);\n}\n\nexport function mockGuess(charactersDict: CharactersDictionary, user: GamePlayer, targetId: PlayerId) {\n  return getRandomItem(\n    Object.values(charactersDict)\n      .filter(\n        (character) =>\n          character.id !== user.characterId &&\n          !character.revealed &&\n          !(user.history?.[targetId] ?? []).includes(character.id)\n      )\n      .map((character) => character.id)\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Image, Popconfirm } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useLoading } from 'hooks/useLoading';\n// Components\nimport { ImageCard } from 'components/cards';\nimport { DualTranslate } from 'components/language';\nimport { TransparentButton } from 'components/buttons';\n\ntype CharactersBoardProps = {\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  userCharacterId: CardId;\n  onCardClick?: GenericFunction;\n  historyEntry?: PlayerId[];\n};\n\nexport function CharactersBoard({\n  charactersDict,\n  charactersIds,\n  userCharacterId,\n  onCardClick,\n  historyEntry = [],\n}: CharactersBoardProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const cardWidth = useCardWidth(10, 16, 80, 150, 16);\n\n  if (onCardClick) {\n    return (\n      <div className=\"characters-table\" style={{ width: `${cardWidth * 6}px` }}>\n        {charactersIds.map((characterId) => {\n          const character = charactersDict[characterId];\n          const name = character.name[language];\n\n          const unavailable = historyEntry.includes(character.id);\n          const revealed = character?.revealed;\n          const ownCharacter = userCharacterId === character.id;\n\n          return (\n            <Popconfirm\n              key={character.id}\n              title={translate(\n                `Tem certeza que quer escolher ${name}?`,\n                `Are you sure you want to choose ${name}?`\n              )}\n              onConfirm={() => onCardClick({ characterId: character.id })}\n              okText={translate('Sim', 'Yes')}\n              cancelText={translate('Não', 'No')}\n              disabled={unavailable || revealed || ownCharacter || isLoading}\n            >\n              <TransparentButton\n                className=\"characters-table__character characters-table__character-button\"\n                disabled={unavailable || revealed || ownCharacter || isLoading}\n              >\n                <ImageCard\n                  imageId={revealed ? 'us-00' : character.id}\n                  className={clsx(\n                    'characters-table__character-image',\n                    userCharacterId === character.id && 'characters-table__character-image--active',\n                    (unavailable || revealed || ownCharacter) && 'characters-table__character-image--disabled'\n                  )}\n                  cardWidth={cardWidth - 16}\n                  preview={false}\n                />\n                {!unavailable && <div className=\"characters-table__character-name\">{name}</div>}\n              </TransparentButton>\n            </Popconfirm>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"characters-table\" style={{ width: `${(cardWidth + 16) * 6}px` }}>\n      <Image.PreviewGroup>\n        {charactersIds.map((characterId) => {\n          const character = charactersDict[characterId];\n          return (\n            <div className=\"characters-table__character\" key={character.id}>\n              <ImageCard\n                imageId={character?.revealed ? 'us-00' : character.id}\n                previewImageId={character.id}\n                className={clsx(\n                  'characters-table__character-image',\n                  userCharacterId === character.id && 'characters-table__character-image--active'\n                )}\n                cardWidth={cardWidth}\n              />\n              {!character?.revealed && (\n                <div className=\"characters-table__character-name\">\n                  <DualTranslate>{character.name}</DualTranslate>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </Image.PreviewGroup>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hook\nimport { useCardWidth } from 'hooks/useCardWidth';\n// Utils\nimport { getAvatarColorById, sortPlayers } from 'utils/helpers';\n// Components\nimport { AvatarCard, IconAvatar } from 'components/avatars';\nimport { ImageCard } from 'components/cards';\nimport { SpeechBubbleAcceptedIcon } from 'icons/SpeechBubbleAcceptedIcon';\nimport { SpeechBubbleDeclinedIcon } from 'icons/SpeechBubbleDeclinedIcon';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype PlayersBoardsProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  questionsDict: QuestionsDictionary;\n};\n\nexport function PlayersBoards({ players, user, questionsDict }: PlayersBoardsProps) {\n  const playersList = sortPlayers(players, 'name');\n  const cardWidth = useCardWidth(10, 16, 80, 150, 16);\n\n  return (\n    <Space wrap className=\"players-boards space-container\">\n      {playersList.map((player) => (\n        <PlayerBoard\n          key={player.id}\n          player={player}\n          cardWidth={cardWidth / 2}\n          userCharacterId={player.id === user.id ? user.characterId : undefined}\n          questionsDict={questionsDict}\n          history={user.history?.[player.id]}\n        />\n      ))}\n    </Space>\n  );\n}\n\ntype PlayerBoardProps = {\n  player: GamePlayer;\n  cardWidth: number;\n  userCharacterId?: CardId;\n  questionsDict: QuestionsDictionary;\n  history?: CardId[];\n};\n\nexport function PlayerBoard({\n  player,\n  cardWidth,\n  userCharacterId,\n  questionsDict,\n  history,\n}: PlayerBoardProps) {\n  return (\n    <div\n      className=\"player-board\"\n      style={{ backgroundColor: getAvatarColorById(player.avatarId), opacity: '0.95' }}\n    >\n      <div className=\"player-board__image\">\n        <ImageCard\n          imageId={userCharacterId ?? 'us-unknown'}\n          cardWidth={cardWidth}\n          className=\"player-board__unknown-character\"\n        />\n      </div>\n      <div className=\"player-board__points\">\n        <PointsHighlight>{Math.max(10 - (player?.answers?.length ?? 0), 1)}</PointsHighlight>\n      </div>\n      <div className=\"player-board__avatar\">\n        <AvatarCard player={player} size=\"small\" withName withRoundCorners addressUser />\n      </div>\n      <ul className=\"player-board__history\">\n        {Boolean(player?.answers?.length) &&\n          player.answers.map((entry: BooleanDictionary) => {\n            const [questionId, answer] = Object.entries(entry)[0];\n\n            return (\n              <li key={`${player.id}-${questionId}`}>\n                {questionsDict[questionId].question}\n                <IconAvatar\n                  icon={answer ? <SpeechBubbleAcceptedIcon /> : <SpeechBubbleDeclinedIcon />}\n                  size=\"small\"\n                />\n              </li>\n            );\n          })}\n        {Boolean(history) &&\n          history?.map((characterId) => {\n            return (\n              <li key={`${player.id}-${characterId}`} className=\"player-board__history-previous-guess\">\n                <ImageCard imageId={characterId} cardWidth={cardWidth / 3} />\n                <IconAvatar icon={<SpeechBubbleDeclinedIcon />} size=\"small\" />\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Avatar, Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getColorFromLetter, sortPlayers } from 'utils/helpers';\n// Components\nimport { AvatarCard } from 'components/avatars';\nimport { Card } from 'components/cards';\nimport { Translate } from 'components/language';\nimport { Instruction } from 'components/text';\nimport { TransparentButton } from 'components/buttons';\n\ntype PlayerChoicesProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  questionsDict: QuestionsDictionary;\n  onSubmitPrompt: GenericFunction;\n  onSubmitTarget: GenericFunction;\n};\n\nexport function PlayerChoices({\n  players,\n  user,\n  questionsDict,\n  onSubmitPrompt,\n  onSubmitTarget,\n}: PlayerChoicesProps) {\n  const { isLoading } = useLoading();\n  return (\n    <Instruction contained>\n      <p className=\"\">\n        <Avatar size=\"large\">A</Avatar>{' '}\n        <strong>\n          <Translate\n            pt={<>Uma pergunta a ser respondida por todos</>}\n            en={<>A question to be answered by everybody</>}\n          />\n        </strong>\n      </p>\n      <Space wrap className=\"questions-container-grid\">\n        {(user.questions ?? []).length === 0 && (\n          <Instruction contained>\n            <Translate\n              pt=\"Você não tem mais perguntas disponíveis, então só resta tentar adivinhar\"\n              en=\"You don't have available questions, so try to guess who someone is\"\n            />\n          </Instruction>\n        )}\n        {(user.questions ?? []).map((questionId: CardId, index: number) => {\n          return (\n            <TransparentButton\n              onClick={() => onSubmitPrompt({ questionId })}\n              disabled={isLoading || user.ready}\n              className=\"questions-container-grid__button\"\n            >\n              <Card\n                key={questionId}\n                header={LETTERS[index]}\n                color={getColorFromLetter(LETTERS[index])}\n                className=\"questions-container-grid__card\"\n              >\n                {questionsDict[questionId].question}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </Space>\n      <p>\n        <Avatar size=\"large\">B</Avatar>{' '}\n        <strong>\n          <Translate\n            pt={<>Um jogador para adivinhar quem ele(a) é</>}\n            en={<>A player to guess who they are</>}\n          />\n        </strong>\n      </p>\n      <Space wrap className=\"space-container\">\n        {sortPlayers(players, 'name')\n          .filter((player) => player.id !== user.id)\n          .map((player) => {\n            return (\n              <TransparentButton\n                onClick={() => onSubmitTarget({ targetId: player.id })}\n                disabled={isLoading || user.ready}\n              >\n                <AvatarCard player={player} size=\"small\" withName withRoundCorners />\n              </TransparentButton>\n            );\n          })}\n      </Space>\n    </Instruction>\n  );\n}\n","// Hooks\nimport { useDelayedMock } from 'hooks/useMock';\n// Mocks\nimport { mockPromptDecision } from './utils/mock';\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { PlayersBoards } from './components/PlayersBoards';\nimport { PlayerChoices } from './components/PlayerChoices';\nimport { TurnOrder } from 'components/players';\n\ntype StepSelectPromptProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionsDict: QuestionsDictionary;\n  onSubmitPrompt: GenericFunction;\n  onSubmitTarget: GenericFunction;\n  activePlayerId: PlayerId;\n} & AnnouncementProps;\n\nexport function StepSelectPrompt({\n  players,\n  user,\n  announcement,\n  turnOrder,\n  charactersDict,\n  charactersIds,\n  questionsDict,\n  onSubmitPrompt,\n  onSubmitTarget,\n  activePlayerId,\n}: StepSelectPromptProps) {\n  // DEV: Auto decision\n  useDelayedMock(() => {\n    mockPromptDecision(user, players, onSubmitPrompt, onSubmitTarget);\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <Translate pt={<>Selecione uma das opções</>} en={<>Select one of the options</>} />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt=\"Escolha uma das opções abaixo lembrando que todos responderam à pergunta que você escolher ou todos tentaram adivinhar quem um jogador é.\"\n          en=\"Choose one of the options below, remember that everybody will answer the question you choose or everybody will attempt to guess the targeted player.\"\n        />\n      </Instruction>\n\n      <PlayerChoices\n        players={players}\n        user={user}\n        questionsDict={questionsDict}\n        onSubmitPrompt={onSubmitPrompt}\n        onSubmitTarget={onSubmitTarget}\n      />\n\n      <PlayersBoards players={players} user={user} questionsDict={questionsDict} />\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.cardId}\n      />\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Utils\nimport { LETTERS } from 'utils/constants';\nimport { getColorFromLetter } from 'utils/helpers';\n// Components\nimport { Card, FloatingHand } from 'components/cards';\nimport { Translate } from 'components/language';\n\ntype UserQuestionsProps = {\n  user: GamePlayer;\n  questionsDict: QuestionsDictionary;\n};\n\nexport function UserQuestions({ user, questionsDict }: UserQuestionsProps) {\n  return (\n    <FloatingHand title={<Translate pt=\"Suas Perguntas\" en=\"Your Questions\" />}>\n      <Space>\n        {(user.questions ?? []).map((questionId: CardId, index: number) => {\n          return (\n            <Card key={questionId} header={LETTERS[index]} color={getColorFromLetter(LETTERS[index])}>\n              {questionsDict[questionId].question}\n            </Card>\n          );\n        })}\n      </Space>\n    </FloatingHand>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { AvatarName, IconAvatar } from 'components/avatars';\nimport { PlayersBoards } from './components/PlayersBoards';\nimport { UserQuestions } from './components/UserQuestions';\n// Icons\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { TurnOrder } from 'components/players';\n\ntype StepWaitingForPromptProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionsDict: QuestionsDictionary;\n  activePlayer: GamePlayer;\n  activePlayerId: PlayerId;\n} & AnnouncementProps;\n\nexport function StepWaitingForPrompt({\n  players,\n  user,\n  announcement,\n  charactersDict,\n  charactersIds,\n  activePlayer,\n  turnOrder,\n  questionsDict,\n  activePlayerId,\n}: StepWaitingForPromptProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <IconAvatar icon={<AnimatedClockIcon />} />\n        <Translate\n          pt={\n            <>\n              Aguarde enquanto <AvatarName player={activePlayer} /> decide o que fazer\n            </>\n          }\n          en={\n            <>\n              Please wait while <AvatarName player={activePlayer} /> takes an action\n            </>\n          }\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt=\"Cada jogador é uma das figuras abaixo. Você consegue adivinhar quem é quem?\"\n          en=\"Each player is one of the figures below. Can you guess who is who?\"\n        />\n      </Instruction>\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.cardId}\n      />\n\n      <PlayersBoards players={players} user={user} questionsDict={questionsDict} />\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n\n      <UserQuestions questionsDict={questionsDict} user={user} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitPromptAPIRequest, useOnSubmitTargetAPIRequest } from './utils/api-requests';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { ChoiceIcon } from 'icons/ChoiceIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { Instruction } from 'components/text';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepSelectPrompt } from './StepSelectPrompt';\nimport { ViewOr } from 'components/views';\nimport { StepWaitingForPrompt } from './StepWaitingForPrompt';\nimport { AvatarName } from 'components/avatars';\n\nexport function PhasePrompt({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n  const [activePlayer, isUserTheActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n\n  const onSubmitPrompt = useOnSubmitPromptAPIRequest(setStep);\n  const onSubmitTarget = useOnSubmitTargetAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<ChoiceIcon />}\n      title={<Translate pt=\"Pergunta\" en=\"Question\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={4}\n    >\n      <Instruction>\n        {isUserTheActivePlayer ? (\n          <Translate pt=\"É a sua vez!\" en=\"It's your turn!\" />\n        ) : (\n          <Translate\n            pt={\n              <>\n                É a vez do(a) <AvatarName player={activePlayer} />\n              </>\n            }\n            en={\n              <>\n                It's <AvatarName player={activePlayer} /> turn!\n              </>\n            }\n          />\n        )}\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.TA_NA_CARA.PROMPT}>\n      <StepSwitcher step={step} conditions={[!user.isReady, !user.isReady, !user.isReady]} players={players}>\n        {/* Step 0 */}\n        <ViewOr condition={isUserTheActivePlayer}>\n          <StepSelectPrompt\n            announcement={announcement}\n            players={players}\n            user={user}\n            turnOrder={state.turnOrder}\n            charactersDict={state.charactersDict}\n            charactersIds={state.charactersIds}\n            questionsDict={state.questionsDict}\n            onSubmitPrompt={onSubmitPrompt}\n            onSubmitTarget={onSubmitTarget}\n            activePlayerId={state.activePlayerId}\n          />\n\n          <StepWaitingForPrompt\n            announcement={announcement}\n            players={players}\n            user={user}\n            turnOrder={state.turnOrder}\n            charactersDict={state.charactersDict}\n            charactersIds={state.charactersIds}\n            questionsDict={state.questionsDict}\n            activePlayer={activePlayer}\n            activePlayerId={state.activePlayerId}\n          />\n        </ViewOr>\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","import { TA_NA_CARA_API } from 'services/adapters';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\n\nexport function useOnSubmitPromptAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TA_NA_CARA_API.submitAction,\n    actionName: 'submit-prompt',\n    onSuccess: () => setStep(2),\n    successMessage: translate('Pergunta submetida com sucesso', 'Question submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua pergunta',\n      'Oops, the application found an error while trying to submit your question'\n    ),\n  });\n\n  return (payload: SubmitPromptPayload) => {\n    request({\n      action: 'SUBMIT_PROMPT',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitTargetAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TA_NA_CARA_API.submitAction,\n    actionName: 'submit-target',\n    onSuccess: () => setStep(2),\n    successMessage: translate('Alvo submetida com sucesso', 'Target submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu alvo',\n      'Oops, the application found an error while trying to submit your target'\n    ),\n  });\n\n  return (payload: SubmitTargetPayload) => {\n    request({\n      action: 'SUBMIT_TARGET',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitAnswerAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TA_NA_CARA_API.submitAction,\n    actionName: 'submit-answer',\n    successMessage: translate('Resposta submetida com sucesso', 'Answer submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua resposta',\n      'Oops, the application found an error while trying to submit your answer'\n    ),\n  });\n\n  return (payload: SubmitAnswerPayload) => {\n    request({\n      action: 'SUBMIT_ANSWER',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitGuessAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TA_NA_CARA_API.submitAction,\n    onSuccess: () => setStep(2),\n    actionName: 'submit-guess',\n    successMessage: translate('Palpite submetido com sucesso', 'Guess submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu palpite',\n      'Oops, the application found an error while trying to submit your guess'\n    ),\n  });\n\n  return (payload: SubmitAnswerPayload) => {\n    request({\n      action: 'SUBMIT_GUESS',\n      ...payload,\n    });\n  };\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\n// Icons\nimport { SpeechBubbleAcceptedIcon } from 'icons/SpeechBubbleAcceptedIcon';\nimport { SpeechBubbleDeclinedIcon } from 'icons/SpeechBubbleDeclinedIcon';\n// Components\nimport { Step } from 'components/steps';\nimport { Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { PlayerBoard } from './components/PlayersBoards';\nimport { TurnOrder } from 'components/players';\nimport { TransparentButton } from 'components/buttons';\nimport { IconAvatar } from 'components/avatars';\nimport { ViewIf } from 'components/views';\nimport { useDelayedMock } from 'hooks/useMock';\nimport { mockAnswer } from './utils/mock';\n\ntype StepAnswerTheQuestionProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionId: CardId;\n  questionsDict: QuestionsDictionary;\n  onSubmitAnswer: GenericFunction;\n  activePlayerId: PlayerId;\n} & AnnouncementProps;\n\nexport function StepAnswerTheQuestion({\n  players,\n  user,\n  announcement,\n  turnOrder,\n  charactersDict,\n  charactersIds,\n  questionId,\n  questionsDict,\n  onSubmitAnswer,\n  activePlayerId,\n}: StepAnswerTheQuestionProps) {\n  const { isLoading } = useLoading();\n\n  // Dev Mock\n  useDelayedMock(() => {\n    onSubmitAnswer({ answer: mockAnswer() });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <Translate pt=\"Responda:\" en=\"Please answer:\" />\n      </Title>\n\n      <div className=\"answer-board\">\n        <PlayerBoard\n          player={user}\n          cardWidth={100}\n          userCharacterId={user.characterId}\n          questionsDict={questionsDict}\n        />\n        <div className=\"answer-board__text\">\n          <Title size=\"x-small\" level={3} className=\"answer-board__question\">\n            {questionsDict[questionId].question}\n          </Title>\n\n          <Space>\n            <ViewIf condition={user.currentAnswer === undefined || user.currentAnswer === true}>\n              <TransparentButton\n                className=\"answer-board__button answer-board__button--yes\"\n                disabled={user.ready || isLoading}\n                onClick={() => onSubmitAnswer({ answer: true })}\n              >\n                <IconAvatar icon={<SpeechBubbleAcceptedIcon />} size=\"large\" />\n                <Translate pt=\"Sim\" en=\"Yes\" />\n              </TransparentButton>\n            </ViewIf>\n            <ViewIf condition={user.currentAnswer === undefined || user.currentAnswer === false}>\n              <TransparentButton\n                className=\"answer-board__button answer-board__button--no\"\n                disabled={user.ready || isLoading}\n                onClick={() => onSubmitAnswer({ answer: false })}\n              >\n                <IconAvatar icon={<SpeechBubbleDeclinedIcon />} size=\"large\" /> <Translate pt=\"Não\" en=\"No\" />\n              </TransparentButton>\n            </ViewIf>\n          </Space>\n        </div>\n      </div>\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.cardId}\n      />\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitAnswerAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { ChatIcon } from 'icons/ChatIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { StepAnswerTheQuestion } from './StepAnswerTheQuestion';\n\nexport function PhaseAnswer({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step } = useStep();\n\n  const onSubmitAnswer = useOnSubmitAnswerAPIRequest();\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<ChatIcon />}\n      title={<Translate pt=\"Responda!\" en=\"Answer the question!\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={4}\n    ></PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.TA_NA_CARA.ANSWERING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepAnswerTheQuestion\n          announcement={announcement}\n          players={players}\n          user={user}\n          turnOrder={state.turnOrder}\n          charactersDict={state.charactersDict}\n          charactersIds={state.charactersIds}\n          questionId={state.currentQuestionId}\n          questionsDict={state.questionsDict}\n          onSubmitAnswer={onSubmitAnswer}\n          activePlayerId={state.activePlayerId}\n        />\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\n// Hooks\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { PlayerBoard } from './components/PlayersBoards';\nimport { TurnOrder } from 'components/players';\nimport { Space } from 'antd';\nimport { AvatarName } from 'components/avatars';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { pluralize } from 'utils/helpers';\nimport { useDelayedMock } from 'hooks/useMock';\nimport { mockGuess } from './utils/mock';\n\ntype StepGuessPlayerProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionsDict: QuestionsDictionary;\n  onSubmitGuess: GenericFunction;\n  targetedPlayer: GamePlayer;\n  activePlayerId: PlayerId;\n  points: number;\n} & AnnouncementProps;\n\nexport function StepGuessPlayer({\n  players,\n  user,\n  announcement,\n  turnOrder,\n  charactersDict,\n  charactersIds,\n  targetedPlayer,\n  questionsDict,\n  onSubmitGuess,\n  activePlayerId,\n  points,\n}: StepGuessPlayerProps) {\n  useDelayedMock(() => {\n    onSubmitGuess({ characterId: mockGuess(charactersDict, user, targetedPlayer.id) });\n  });\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <Translate pt=\"Quem é esse jogador?\" en=\"Who is this player?\" />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Analise as respostas e selecione a pessoa que você acha que é{' '}\n              <AvatarName player={targetedPlayer} />. Se você acertar, você ganha{' '}\n              <PointsHighlight>\n                {points} {pluralize(points, 'ponto')}\n              </PointsHighlight>\n              . Clique na foto para votar.\n            </>\n          }\n          en={\n            <>\n              Analyze the answer and select the character you think <AvatarName player={targetedPlayer} /> is.\n              If you're correct you get{' '}\n              <PointsHighlight>\n                {points} {pluralize(points, 'point')}\n              </PointsHighlight>\n              . Click on the picture to vote.\n            </>\n          }\n        />\n      </Instruction>\n\n      <Space className=\"space-container\">\n        <PlayerBoard\n          player={targetedPlayer}\n          cardWidth={100}\n          questionsDict={questionsDict}\n          history={user.history?.[targetedPlayer.id]}\n        />\n      </Space>\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.characterId}\n        onCardClick={onSubmitGuess}\n        historyEntry={user.history?.[targetedPlayer.id]}\n      />\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n    </Step>\n  );\n}\n","// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { IconAvatar } from 'components/avatars';\nimport { PlayersBoards } from './components/PlayersBoards';\n// Icons\nimport { AnimatedClockIcon } from 'icons/AnimatedClockIcon';\nimport { TurnOrder } from 'components/players';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\n\ntype StepWaitingForGuessesProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionsDict: QuestionsDictionary;\n  activePlayerId: PlayerId;\n} & AnnouncementProps;\n\nexport function StepWaitingForGuesses({\n  players,\n  user,\n  announcement,\n  charactersDict,\n  charactersIds,\n  turnOrder,\n  questionsDict,\n  activePlayerId,\n}: StepWaitingForGuessesProps) {\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <IconAvatar icon={<AnimatedClockIcon />} />\n        <Translate\n          pt={<>Aguarde enquanto os jogadores tentam adivinhar quem você é</>}\n          en={<>Please wait while the other players try to guess who you are</>}\n        />\n      </Title>\n\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              Você ganha <PointsHighlight>1 ponto</PointsHighlight> por cada jogador que acertar.\n            </>\n          }\n          en={\n            <>\n              You get <PointsHighlight>1 point</PointsHighlight> for each player who gets it correctly.\n            </>\n          }\n        />\n      </Instruction>\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.cardId}\n      />\n\n      <PlayersBoards players={players} user={user} questionsDict={questionsDict} />\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\nimport { useOnSubmitGuessAPIRequest } from './utils/api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\nimport { AnonymousIcon } from 'icons/AnonymousIcon';\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { AvatarName } from 'components/avatars';\nimport { ViewOr } from 'components/views';\nimport { StepGuessPlayer } from './StepGuessPlayer';\nimport { Instruction } from 'components/text';\nimport { StepWaitingForGuesses } from './StepWaitingForGuesses';\n\nexport function PhaseGuessing({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, setStep } = useStep();\n  const [targetedPlayer, isUserTheTargetedPlayer] = useWhichPlayerIsThe('targetId', state, players);\n  const onSubmitGuess = useOnSubmitGuessAPIRequest(setStep);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<AnonymousIcon />}\n      title={<Translate pt=\"Quem é essa pessoa?\" en=\"Who's that?\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={4}\n    >\n      <Instruction>\n        {isUserTheTargetedPlayer ? (\n          <Translate pt=\"Você está na berlinda!\" en=\"You are the target!\" />\n        ) : (\n          <Translate\n            pt={\n              <>\n                O alvo é o(a) <AvatarName player={targetedPlayer} />!\n              </>\n            }\n            en={\n              <>\n                The target is <AvatarName player={targetedPlayer} />!\n              </>\n            }\n          />\n        )}\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.TA_NA_CARA.GUESSING}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <ViewOr condition={!isUserTheTargetedPlayer}>\n          <StepGuessPlayer\n            announcement={announcement}\n            players={players}\n            user={user}\n            turnOrder={state.turnOrder}\n            charactersDict={state.charactersDict}\n            charactersIds={state.charactersIds}\n            questionsDict={state.questionsDict}\n            onSubmitGuess={onSubmitGuess}\n            activePlayerId={state.activePlayerId}\n            targetedPlayer={targetedPlayer}\n            points={state.points ?? 1}\n          />\n\n          <StepWaitingForGuesses\n            announcement={announcement}\n            players={players}\n            user={user}\n            turnOrder={state.turnOrder}\n            charactersDict={state.charactersDict}\n            charactersIds={state.charactersIds}\n            questionsDict={state.questionsDict}\n            activePlayerId={state.activePlayerId}\n          />\n        </ViewOr>\n\n        {/* Step 1 */}\n        <></>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\n// Hooks\n// Components\nimport { Step } from 'components/steps';\nimport { Instruction, Title } from 'components/text';\nimport { Translate } from 'components/language';\nimport { CharactersBoard } from './components/CharactersBoard';\nimport { PlayerBoard } from './components/PlayersBoards';\nimport { TurnOrder } from 'components/players';\nimport { Space } from 'antd';\nimport { AvatarName } from 'components/avatars';\nimport { PointsHighlight } from 'components/metrics/PointsHighlight';\nimport { pluralize } from 'utils/helpers';\nimport { ViewOr } from 'components/views';\nimport { ListOfPlayers } from 'components/players/ListOfPlayers';\nimport { TimedButton } from 'components/buttons';\n\ntype StepRevealProps = {\n  players: GamePlayers;\n  user: GamePlayer;\n  turnOrder: TurnOrder;\n  charactersIds: CardId[];\n  charactersDict: CharactersDictionary;\n  questionsDict: QuestionsDictionary;\n  targetedPlayer: GamePlayer;\n  activePlayerId: PlayerId;\n  points: number;\n  correct: PlayerId[];\n  goToNextStep: GenericFunction;\n  result: GamePlayer | null;\n} & AnnouncementProps;\n\nexport function StepReveal({\n  players,\n  user,\n  announcement,\n  turnOrder,\n  charactersDict,\n  charactersIds,\n  targetedPlayer,\n  questionsDict,\n  points,\n  correct,\n  activePlayerId,\n  goToNextStep,\n  result,\n}: StepRevealProps) {\n  const isCorrect = correct.length > 0;\n\n  return (\n    <Step fullWidth announcement={announcement}>\n      <Title size=\"medium\">\n        <ViewOr condition={isCorrect}>\n          <Translate\n            pt={\n              <>\n                <AvatarName player={targetedPlayer} /> foi revelado!\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={targetedPlayer} /> was revealed!\n              </>\n            }\n          />\n\n          <Translate pt=\"Vixi, ninguém acertou\" en=\"Oh no! Nobody got it right\" />\n        </ViewOr>\n      </Title>\n\n      <Instruction contained>\n        <ViewOr condition={isCorrect}>\n          <>\n            <ListOfPlayers players={players} list={correct} prefix=\"winners\" />\n            <Translate\n              pt={\n                <>\n                  acertaram e ganharam{' '}\n                  <PointsHighlight>\n                    {points} {pluralize(points, 'ponto')}\n                  </PointsHighlight>\n                  !\n                </>\n              }\n              en={\n                <>\n                  got it right and got\n                  <PointsHighlight>\n                    {points} {pluralize(points, 'point')}\n                  </PointsHighlight>\n                </>\n              }\n            />\n          </>\n\n          <>\n            <Translate\n              pt={\n                <>\n                  A identidade de <AvatarName player={targetedPlayer} /> permanecerá desconhecida. Jogadores\n                  podem tentar adivinhar novamente na próxima rodada.\n                </>\n              }\n              en={\n                <>\n                  The identity remains unknown for <AvatarName player={targetedPlayer} />. Players may try\n                  again next round.\n                </>\n              }\n            />\n          </>\n        </ViewOr>\n      </Instruction>\n\n      <Space className=\"space-container\">\n        {Boolean(result) && (\n          <PlayerBoard\n            player={result!}\n            cardWidth={100}\n            questionsDict={questionsDict}\n            userCharacterId={result!.characterId}\n          />\n        )}\n      </Space>\n\n      <CharactersBoard\n        charactersDict={charactersDict}\n        charactersIds={charactersIds}\n        userCharacterId={user.cardId}\n      />\n\n      <Space className=\"space-container\" align=\"center\">\n        <TimedButton duration={isCorrect ? 15 : 7} onExpire={goToNextStep} onClick={goToNextStep}>\n          <Translate pt=\"Ver Ranking\" en=\"See Ranking\" />\n        </TimedButton>\n      </Space>\n\n      <TurnOrder players={players} order={turnOrder} activePlayerId={activePlayerId} />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Button, Space } from 'antd';\n// Components\nimport { Translate } from 'components/language';\nimport { StepRankingWrapper } from 'components/ranking';\nimport { AdminNextPhaseButton } from 'components/admin';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  round: GameRound;\n  ranking: GameRanking;\n  goToPreviousStep: GenericFunction;\n};\n\nexport function StepRanking({ players, ranking, goToPreviousStep, round }: StepRankingProps) {\n  return (\n    <StepRankingWrapper\n      players={players}\n      ranking={ranking}\n      gainedPointsDescriptions={[\n        <Translate pt=\"Adivinhou corretamente\" en=\"Correct guess\" />,\n        <Translate pt=\"Era o alvo e foi adivinhado corretamente\" en=\"Was guessed correctly\" />,\n      ]}\n    >\n      <Space className=\"space-container\" align=\"center\">\n        <Button onClick={goToPreviousStep}>\n          <Translate pt=\"Ver resultado novamente\" en=\"See results again\" />\n        </Button>\n      </Space>\n      <AdminNextPhaseButton round={round} />\n    </StepRankingWrapper>\n  );\n}\n","// State & Hooks\nimport { useUser } from 'hooks/useUser';\nimport { useStep } from 'hooks/useStep';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Icons\n// Components\nimport { StepSwitcher } from 'components/steps';\nimport { PhaseAnnouncement, PhaseContainer } from 'components/phases';\nimport { Translate } from 'components/language';\nimport { useWhichPlayerIsThe } from 'hooks/useWhichPlayerIsThe';\nimport { Instruction } from 'components/text';\nimport { SpotlightIcon } from 'icons/SpotlightIcon';\nimport { StepReveal } from './StepReveal';\nimport { StepRanking } from './StepRanking';\n\nexport function PhaseReveal({ players, state, info }: PhaseProps) {\n  const user = useUser(players, state);\n  const { step, goToNextStep, goToPreviousStep } = useStep();\n  const [targetedPlayer] = useWhichPlayerIsThe('targetId', state, players);\n\n  const announcement = (\n    <PhaseAnnouncement\n      icon={<SpotlightIcon />}\n      title={<Translate pt=\"E a pessoa foi descoberta?\" en=\"Was the person revealed?\" />}\n      currentRound={state?.round?.current}\n      type=\"overlay\"\n      duration={4}\n    >\n      <Instruction>\n        <Translate pt=\"Quem? O que? Esse?\" en=\"Who? What? That?\" />\n      </Instruction>\n    </PhaseAnnouncement>\n  );\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.TA_NA_CARA.REVEAL}>\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <StepReveal\n          announcement={announcement}\n          players={players}\n          user={user}\n          turnOrder={state.turnOrder}\n          charactersDict={state.charactersDict}\n          charactersIds={state.charactersIds}\n          questionsDict={state.questionsDict}\n          activePlayerId={state.activePlayerId}\n          targetedPlayer={targetedPlayer}\n          points={state.points ?? 1}\n          correct={state.correct}\n          goToNextStep={goToNextStep}\n          result={state.result}\n        />\n\n        {/* Step 1 */}\n        <StepRanking\n          players={players}\n          round={state.round}\n          ranking={state.ranking}\n          goToPreviousStep={goToPreviousStep}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n","// Icons\nimport { FlagIcon } from 'icons/FlagIcon';\n// Components\nimport { GameOverWrapper } from 'components/game-over';\nimport { Space } from 'antd';\nimport { PlayerBoard } from './components/PlayersBoards';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return (\n    <GameOverWrapper info={info} state={state} announcementIcon={<FlagIcon />}>\n      <Space className=\"space-container\" wrap>\n        {state.gallery.map((entry: GamePlayer) => {\n          return (\n            <PlayerBoard\n              key={`result-${entry.characterId}`}\n              player={entry}\n              cardWidth={100}\n              questionsDict={state.questionsDict}\n              userCharacterId={entry.characterId}\n            />\n          );\n        })}\n      </Space>\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","import { ConfigProvider } from 'antd';\n// Constants\nimport { GAME_COLLECTION, THEME_COLORS } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session } from 'components/session';\nimport { PhaseLobby, PhaseRules, PhaseSetup } from 'components/phases';\nimport { PageError } from 'components/errors';\nimport { PhasePrompt } from './PhasePrompt';\nimport { PhaseAnswer } from './PhaseAnswering';\n// Sass\nimport './ta-na-cara.scss';\nimport { PhaseGuessing } from './PhaseGuessing';\nimport { PhaseReveal } from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction getActiveComponent(phase: string) {\n  switch (phase) {\n    case PHASES.DEFAULT.LOBBY:\n      return PhaseLobby;\n    case PHASES.DEFAULT.RULES:\n      return PhaseRules;\n    case PHASES.DEFAULT.SETUP:\n      return PhaseSetup;\n    case PHASES.TA_NA_CARA.PROMPT:\n      return PhasePrompt;\n    case PHASES.TA_NA_CARA.ANSWERING:\n      return PhaseAnswer;\n    case PHASES.TA_NA_CARA.GUESSING:\n      return PhaseGuessing;\n    case PHASES.TA_NA_CARA.REVEAL:\n      return PhaseReveal;\n    case PHASES.DEFAULT.GAME_OVER:\n      return PhaseGameOver;\n    default:\n      return PageError;\n  }\n}\n\nfunction SessionTaNaCara({ gameId }: SessionProps) {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: THEME_COLORS.DEFAULT,\n        },\n      }}\n    >\n      <Session\n        gameId={gameId}\n        gameCollection={GAME_COLLECTION.TA_NA_CARA}\n        getActiveComponent={getActiveComponent}\n        backgroundClassName=\"t-background\"\n      />\n    </ConfigProvider>\n  );\n}\n\nexport default SessionTaNaCara;\n","import { useEffect, useState } from 'react';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Gets player that is assigned to a property in the state\n * @param propertyName\n * @param state\n * @param players\n * @returns a player instance, a boolean if the player is assigned to given property\n */\nexport function useWhichPlayerIsThe(\n  propertyName = 'activePlayer',\n  state: PlainObject = {},\n  players: Players = {}\n): [GamePlayer, boolean] {\n  const [userId] = useGlobalState('userId');\n  const [activePlayer, setActivePlayer] = useState<GamePlayer>({});\n  const [isUser, setIsUser] = useState(false);\n\n  // Determine if user is active as the guesser, the clue giver, the psychic, the storyteller, etc\n  useEffect(() => {\n    const activePlayer = state?.[propertyName];\n    setActivePlayer(players?.[activePlayer] ?? {});\n    setIsUser(state?.[propertyName] === userId);\n  }, [players, propertyName, state, userId]);\n\n  return [activePlayer, isUser];\n}\n","export function AnimatedClockIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fbfbfb\"\n        d=\"M464 256c0 114.9-93.1 208-208 208S48 370.9 48 256 141.1 48 256 48s208 93.1 208 208z\"\n      ></path>\n      <path\n        fill=\"#e3effa\"\n        d=\"M464 256c0-114.9-93.2-208-208.1-207.9-67 0-130 32.4-169 86.9 93.4-66.9 223.3-45.4 290.2 47.9 51.9 72.4 51.9 169.8 0 242.3C431.7 386.1 464 323.1 464 256z\"\n      ></path>\n      <path\n        fill=\"#fcc369\"\n        d=\"M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm0 456c114.9 0 208-93.1 208-208S370.9 48 256 48 48 141.1 48 256s93.1 208 208 208z\"\n      ></path>\n      <path\n        fill=\"#ed9b52\"\n        d=\"M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 432c-114.9 0-208-93.1-208-208S141.1 48 256 48s208 93.1 208 208-93.1 208-208 208z\"\n      ></path>\n      <path d=\"M256 496c-132.5-.1-239.9-107.5-240-240 0-4.4-3.6-8-8-8s-8 3.6-8 8c0 141.4 114.6 256 256 256.1 109.6 0 207-69.7 242.4-173.5l-15.1-5.2C450.1 430.7 358.7 496 256 496zm0-496C133.8.1 28.6 86.6 4.8 206.5l15.7 3.1C46.3 79.5 172.6-5 302.6 20.7s214.6 152.1 188.8 282.1c-1 5.1-2.2 10.1-3.5 15.1l15.5 4.1c36.4-136.7-45-277-181.8-313.4C300.2 2.9 278.1 0 256 0zM18 225l-15.9-2c-.7 5.4-1.2 10.9-1.6 16.5l16 1c.3-5.2.8-10.4 1.5-15.5z\"></path>\n      <path d=\"M256 472c119.3 0 216-96.7 216-216S375.3 40 256 40 40 136.7 40 256c.1 119.2 96.8 215.9 216 216zm-8-415.8V88h16V56.2c104.1 4.3 187.5 87.7 191.8 191.8H424v16h31.8c-4.3 104.1-87.7 187.5-191.8 191.8V424h-16v31.8C143.9 451.5 60.5 368.1 56.2 264H88v-16H56.2C60.5 143.9 143.9 60.5 248 56.2z\"></path>\n\n      <g>\n        <path\n          fill=\"#555fa3\"\n          d=\"M273 141.6v114.24a15.55 15.55 0 01-3.68 10.16l-50.24 61.12a14.47 14.47 0 01-20.42 1.25 14.32 14.32 0 01-2.78-3.33 18.75 18.75 0 012.4-22.64l40.8-48.16A7.77 7.77 0 00241 249V141.6a16.07 16.07 0 1132-3 15.44 15.44 0 010 3z\"\n        ></path>\n        <path d=\"M206.6 339.94c.56 0 1.11.06 1.67.06a22.7 22.7 0 0016.95-7.83l50.31-61.05a24 24 0 005.47-15.26V141.6a24 24 0 10-48-3 25.69 25.69 0 000 3v107.47l-40.62 48a26.49 26.49 0 00-3.2 32.38 23.05 23.05 0 0017.42 10.49zm-2.18-32.34l40.8-48.18a16.1 16.1 0 003.78-10.36V141.6a8.14 8.14 0 1116 0v114.26a8 8 0 01-1.82 5.08l-50.05 60.76a6.37 6.37 0 01-5.32 2.28 7.05 7.05 0 01-5.29-3.39 10.81 10.81 0 011.89-13z\"></path>\n        <animateTransform\n          attributeName=\"transform\"\n          dur=\"2s\"\n          from=\"0 256 256\"\n          repeatCount=\"indefinite\"\n          to=\"360 256 256\"\n          type=\"rotate\"\n        ></animateTransform>\n      </g>\n    </svg>\n  );\n}\n","export function AnonymousIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#8288cb\"\n        d=\"M407 504.5c0-68.448-46.024-127.184-109.866-145.293h-66.418l-43.402 43.402V504.5z\"\n      ></path>\n      <path\n        fill=\"#676fb2\"\n        d=\"M297.134 359.207a150.489 150.489 0 00-41.135-5.709C172.757 353.498 105 421.27 105 504.5h82.314c0-25.721 6.505-49.977 17.931-71.228l-.021-.009c19.155-35.633 52.203-62.784 91.91-74.056z\"\n      ></path>\n      <g fill=\"#676fb2\">\n        <circle cx=\"75\" cy=\"188.501\" r=\"45\"></circle>\n        <circle cx=\"437\" cy=\"188.501\" r=\"45\"></circle>\n      </g>\n      <path\n        fill=\"#8288cb\"\n        d=\"M285.999 9.975h-34.574a74.83 74.83 0 00-58.882 28.651L75 188.501l117.543 149.876a74.821 74.821 0 0058.882 28.641h34.574C371.766 352.683 437 278.179 437 188.501c0-89.744-65.314-164.233-151.001-178.526z\"\n      ></path>\n      <path\n        fill=\"#676fb2\"\n        d=\"M135 188.502C135 98.758 200.317 24.27 285.999 9.975A182.095 182.095 0 00255.998 7.5C156.038 7.5 75 88.537 75 188.502 75 288.463 156.038 369.5 255.998 369.5c10.222 0 20.241-.853 30.001-2.482C200.317 352.723 135 278.242 135 188.502z\"\n      ></path>\n      <g fill=\"#efedff\">\n        <path d=\"M332.238 130.058c-2.379-38.327-33.075-69.023-71.402-71.402-44.916-2.823-81.225 33.043-81.225 76.238 0 11.337 9.191 20.528 20.528 20.528s20.528-9.191 20.528-20.528c0-20.383 17.118-36.541 37.624-35.261 17.407 1.08 31.889 15.562 32.97 32.969.965 15.546-8.114 29.727-22.591 35.291-20.167 7.751-33.199 26.59-33.199 47.993v20.245c0 11.337 9.191 20.528 20.528 20.528s20.528-9.191 20.528-20.528v-20.245c0-4.27 2.697-8.065 6.871-9.669 31.295-12.025 50.922-42.632 48.84-76.159z\"></path>\n        <circle cx=\"256.008\" cy=\"306.972\" r=\"20.528\"></circle>\n      </g>\n      <path d=\"M437.04 136.034c-7.407-25.566-20.187-49.471-37.711-69.967C364.718 25.585 313.163 0 255.999 0c-42.434 0-82.501 13.767-115.871 39.813a7.5 7.5 0 00-1.297 10.527 7.498 7.498 0 0010.527 1.297C180.065 27.669 216.941 15 255.999 15 351.983 15 429.5 92.043 429.5 188.502 429.5 284.169 351.668 362 255.999 362 160.331 362 82.5 284.169 82.5 188.502c0-43.604 16.246-85.292 45.744-117.385a7.5 7.5 0 10-11.044-10.15C97.287 82.63 82.938 108.32 74.922 136.031c-29.155.054-52.422 23.679-52.422 52.471 0 28.79 23.285 52.439 52.443 52.484 16.085 55.4 56.963 100.35 109.773 122.004C132.57 389.303 97.5 443.233 97.5 504.5a7.5 7.5 0 007.5 7.5h302c4.143 0 7.5-3.357 7.5-7.5 0-23.743-5.166-46.615-15.354-67.982a7.5 7.5 0 10-13.539 6.457c8.142 17.075 12.739 35.215 13.702 54.025h-30.072c-1.869-27.452-13.909-53.84-33.692-73.342a7.5 7.5 0 10-10.53 10.681c16.94 16.7 27.347 39.202 29.189 62.66H157.797c1.843-23.455 12.253-45.957 29.196-62.66a7.5 7.5 0 10-10.53-10.681c-19.787 19.506-31.83 45.894-33.699 73.342h-30.063c2.98-55.622 38.874-105.724 91.203-126.199a7.488 7.488 0 001.406-.732A188.042 188.042 0 00255.999 377a188.05 188.05 0 0050.567-6.897c2.78 1.617 37.032 12.122 64.304 48.518a7.5 7.5 0 0012.004-8.994c-14.786-19.734-33.806-35.642-55.582-46.64 52.807-21.655 93.682-66.604 109.766-122.001 29.153-.046 52.443-23.683 52.443-52.483-.001-28.702-23.169-52.424-52.461-52.469zM37.5 188.502c0-19.009 14.312-35.313 33.714-37.284a189.092 189.092 0 00-3.714 37.284c0 12.772 1.283 25.249 3.716 37.314C52.11 223.964 37.5 207.679 37.5 188.502zm403.29 37.282a188.682 188.682 0 003.71-37.282c0-12.609-1.266-25.107-3.733-37.317 19.049 1.835 33.733 18.072 33.733 37.317 0 19.009-14.312 35.308-33.71 37.282z\"></path>\n      <path d=\"M286.088 213.218c34.368-13.206 55.921-46.812 53.634-83.625-2.612-42.095-36.327-75.809-78.416-78.422-49.879-3.136-89.195 36.862-89.195 83.724 0 15.454 12.573 28.027 28.028 28.027s28.028-12.573 28.028-28.027c0-15.995 13.376-28.798 29.66-27.775 13.7.85 25.098 12.248 25.949 25.948.761 12.26-6.391 23.441-17.797 27.824-23.089 8.876-38.008 30.462-38.008 54.995v20.244c0 15.455 12.573 28.028 28.028 28.028s28.028-12.573 28.028-28.028v-20.244c0-1.158.79-2.181 2.061-2.669zm-5.381-14.002c-7.095 2.728-11.68 9.271-11.68 16.671v20.244c0 7.184-5.844 13.028-13.028 13.028s-13.028-5.845-13.028-13.028v-20.244c0-18.273 11.144-34.364 28.39-40.993 17.549-6.744 28.555-23.926 27.387-42.756-1.312-21.115-18.878-38.681-39.989-39.99-24.828-1.547-45.591 17.98-45.591 42.747 0 7.184-5.844 13.027-13.028 13.027s-13.028-5.844-13.028-13.027c0-38.388 32.186-71.334 73.26-68.752 34.558 2.145 62.236 29.822 64.381 64.38 1.878 30.243-15.822 57.848-44.046 68.693zm-24.699 79.728c-15.455 0-28.028 12.573-28.028 28.027 0 15.455 12.573 28.028 28.028 28.028s28.028-12.573 28.028-28.028c0-15.453-12.574-28.027-28.028-28.027zm0 41.056c-7.184 0-13.028-5.845-13.028-13.028s5.844-13.027 13.028-13.027 13.028 5.844 13.028 13.027S263.191 320 256.008 320z\"></path>\n    </svg>\n  );\n}\n","export function SpeechBubbleAcceptedIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#23f1a8\"\n        d=\"M252.932 7.518C115.087 9.181 5.716 121.473 7.522 259.316c.53 40.45 10.739 78.56 28.394 112.144L11.518 485.69c-1.887 8.834 5.957 16.678 14.791 14.791l114.23-24.398c33.584 17.655 71.694 27.864 112.144 28.394 137.843 1.806 250.135-107.565 251.798-245.409C506.167 119.394 392.605 5.832 252.932 7.518z\"\n      ></path>\n      <circle cx=\"256\" cy=\"290.169\" r=\"186.061\" fill=\"#26d192\"></circle>\n      <path\n        fill=\"#26d192\"\n        d=\"M504.495 255.995c0 136.564-108.744 246.767-245.295 248.482a247.716 247.716 0 01-33.52-1.823c124.788-13.532 220.756-118.467 220.756-246.659 0-127.854-96.711-233.126-220.958-246.659A252.799 252.799 0 01256 7.499c137.239 0 248.495 111.256 248.495 248.496z\"\n      ></path>\n      <circle cx=\"256\" cy=\"255.999\" r=\"186.066\" fill=\"#f5f7f8\"></circle>\n      <path\n        fill=\"#d9e7eb\"\n        d=\"M442.061 255.999c0 102.764-83.296 186.061-186.061 186.061-14.762 0-29.119-1.718-42.882-4.966 98.007-2.342 176.743-82.516 176.743-181.095S311.125 77.247 213.118 74.904c13.763-3.248 28.119-4.966 42.882-4.966 102.765 0 186.061 83.297 186.061 186.061z\"\n      ></path>\n      <path\n        fill=\"#26d192\"\n        d=\"M229.364 328.182a24.499 24.499 0 01-17.324-7.176l-30.104-30.104c-9.568-9.568-9.568-25.08 0-34.648s25.08-9.568 34.648 0l12.78 12.78 66.047-66.048c9.568-9.568 25.08-9.568 34.648 0 9.567 9.567 9.567 25.08 0 34.648l-83.371 83.372a24.499 24.499 0 01-17.324 7.176z\"\n      ></path>\n      <g>\n        <path d=\"M483.889 139.28a7.499 7.499 0 00-10.097-3.249 7.5 7.5 0 00-3.249 10.097c17.77 34.627 26.912 73.649 26.439 112.849-.78 64.621-26.529 124.899-72.504 169.731-46.016 44.871-107.019 69.09-171.697 68.27-38.366-.502-74.955-9.766-108.752-27.533a7.513 7.513 0 00-5.056-.696l-114.23 24.398c-2.382.513-3.972-.771-4.546-1.344-.574-.574-1.853-2.165-1.344-4.546l24.398-114.23a7.504 7.504 0 00-.696-5.057c-17.767-33.796-27.03-70.385-27.533-108.752-.848-64.705 23.397-125.682 68.27-171.697 44.832-45.976 105.11-71.724 169.73-72.504 78.884-.979 153.324 36.827 199.209 101.059a7.5 7.5 0 1012.205-8.719C415.701 39.134 336.616-.986 252.841.019c-68.63.827-132.658 28.184-180.289 77.029C24.881 125.935-.878 190.7.023 259.415c.522 39.838 9.94 77.878 27.997 113.111L4.183 484.124c-1.419 6.645.602 13.48 5.407 18.285s11.641 6.822 18.286 5.407l111.598-23.837c35.234 18.058 73.274 27.476 113.112 27.996 1.166.016 2.32.023 3.484.023 67.413-.003 130.825-25.689 178.882-72.552 48.846-47.631 76.202-111.659 77.029-180.289.502-41.632-9.212-83.086-28.092-119.877z\"></path>\n        <path d=\"M78.312 273.759a7.496 7.496 0 00-8.201-6.728 7.5 7.5 0 00-6.727 8.2c4.694 47.557 26.81 91.548 62.275 123.87 35.705 32.542 81.995 50.463 130.341 50.463 106.732 0 193.566-86.833 193.566-193.565S362.733 62.433 256 62.433c-48.474 0-94.853 18.005-130.594 50.697-35.509 32.48-57.559 76.647-62.087 124.366a7.5 7.5 0 1014.933 1.417c4.176-44.009 24.518-84.749 57.278-114.715C168.5 94.041 211.284 77.433 256 77.433c98.462 0 178.566 80.104 178.566 178.566 0 98.461-80.104 178.565-178.566 178.565-44.6 0-87.301-16.531-120.237-46.549-32.719-29.82-53.122-70.397-57.451-114.256z\"></path>\n        <path d=\"M306.03 251.056a7.5 7.5 0 0010.607 10.607l18.726-18.727c12.476-12.478 12.476-32.778 0-45.255-12.479-12.477-32.777-12.477-45.256 0l-60.743 60.745-7.477-7.478c-12.476-12.476-32.777-12.478-45.255.001-12.477 12.477-12.477 32.777 0 45.255l30.104 30.104c6.044 6.044 14.08 9.372 22.627 9.372s16.583-3.328 22.627-9.372l38.986-38.985a7.5 7.5 0 00-10.607-10.607l-38.985 38.985c-3.211 3.211-7.48 4.979-12.021 4.979s-8.81-1.769-12.021-4.979l-30.104-30.104c-6.628-6.629-6.628-17.414 0-24.042 6.629-6.629 17.413-6.629 24.042 0l12.78 12.78a7.5 7.5 0 0010.606 0l66.047-66.048c6.627-6.629 17.414-6.629 24.041 0 6.629 6.628 6.628 17.413 0 24.041zm-133.271-54.747a7.5 7.5 0 00-7.5 7.5v4.493h-4.493c-4.142 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5h4.493v4.493c0 4.143 3.358 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-4.493h4.493c4.142 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.5-7.5h-4.493v-4.493a7.5 7.5 0 00-7.5-7.5z\"></path>\n      </g>\n    </svg>\n  );\n}\n","export function SpeechBubbleDeclinedIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#fb4a59\"\n        d=\"M252.932 7.519C115.087 9.182 5.716 121.475 7.523 259.317c.53 40.45 10.739 78.56 28.394 112.144l-24.398 114.23c-1.887 8.834 5.957 16.678 14.791 14.791l114.23-24.398c33.584 17.655 71.694 27.864 112.144 28.394 137.843 1.806 250.135-107.565 251.798-245.409 1.685-139.674-111.877-253.236-251.55-251.55z\"\n      ></path>\n      <circle cx=\"256\" cy=\"290.17\" r=\"186.061\" fill=\"#f82f40\"></circle>\n      <path\n        fill=\"#f82f40\"\n        d=\"M504.495 255.996c0 136.564-108.744 246.767-245.295 248.482a247.716 247.716 0 01-33.52-1.823c124.788-13.532 220.756-118.467 220.756-246.659 0-127.854-96.711-233.126-220.958-246.659A252.799 252.799 0 01256 7.5c137.239 0 248.495 111.256 248.495 248.496z\"\n      ></path>\n      <circle cx=\"256\" cy=\"256\" r=\"186.066\" fill=\"#f5f7f8\"></circle>\n      <path\n        fill=\"#d9e7eb\"\n        d=\"M442.061 256c0 102.764-83.296 186.061-186.061 186.061-14.762 0-29.119-1.718-42.882-4.966C311.125 434.753 389.862 354.58 389.862 256S311.125 77.248 213.119 74.905c13.763-3.248 28.119-4.966 42.882-4.966 102.764 0 186.06 83.297 186.06 186.061z\"\n      ></path>\n      <path\n        fill=\"#fb4a59\"\n        d=\"M320.38 291.528L290.853 262l29.528-29.528c9.624-9.624 9.624-25.228 0-34.852-9.624-9.624-25.228-9.624-34.852 0L256 227.148l-29.528-29.528c-9.624-9.624-25.228-9.624-34.852 0-9.624 9.624-9.624 25.228 0 34.852L221.148 262l-29.528 29.528c-9.624 9.624-9.624 25.228 0 34.852 9.624 9.624 25.228 9.624 34.852 0L256 296.853l29.528 29.528c9.624 9.624 25.228 9.624 34.852 0 9.624-9.625 9.624-25.229 0-34.853z\"\n      ></path>\n      <g>\n        <path d=\"M437.02 74.981C388.591 26.552 324.434 0 256.035 0c-1.06 0-2.132.006-3.193.02-68.678.828-132.736 28.217-180.376 77.118a7.498 7.498 0 00.139 10.605 7.5 7.5 0 0010.605-.139c44.84-46.027 105.147-71.806 169.812-72.587 65.506-.771 127.093 24.272 173.392 70.569 46.297 46.298 71.359 107.876 70.569 173.391-.78 64.621-26.529 124.9-72.504 169.732-46.016 44.871-106.987 69.078-171.697 68.269-38.366-.502-74.956-9.766-108.752-27.533a7.512 7.512 0 00-5.056-.696l-114.23 24.398c-2.382.513-3.972-.771-4.546-1.344-.574-.574-1.853-2.165-1.344-4.546l24.398-114.23a7.504 7.504 0 00-.696-5.057c-17.767-33.796-27.03-70.385-27.533-108.752-.688-52.544 15.087-102.61 45.622-144.787a7.501 7.501 0 00-12.15-8.797C16.055 150.445-.706 203.62.024 259.415c.522 39.838 9.94 77.878 27.997 113.111L4.184 484.125A19.892 19.892 0 009.59 502.41a19.902 19.902 0 0018.286 5.407l111.598-23.837c35.233 18.058 73.273 27.476 113.112 27.996 1.166.016 2.32.023 3.484.023 67.413-.003 130.824-25.689 178.881-72.551 48.846-47.632 76.203-111.66 77.031-180.29.839-69.588-25.783-134.998-74.962-184.177z\"></path>\n        <path d=\"M273.698 433.695a7.5 7.5 0 001.468 14.928c47.572-4.679 91.58-26.789 123.917-62.258 32.555-35.709 50.484-82.007 50.484-130.364 0-44.422-14.647-86.207-42.359-120.839a7.5 7.5 0 10-11.712 9.371c25.561 31.944 39.071 70.488 39.071 111.468 0 44.61-16.539 87.318-46.569 120.258-29.834 32.723-70.427 53.12-114.3 57.436zm107.178-325.58C346.025 78.657 301.677 62.434 256 62.434 149.268 62.434 62.435 149.267 62.435 256c0 48.462 17.997 94.833 50.676 130.57 32.466 35.506 76.617 57.562 124.321 62.104a7.502 7.502 0 008.178-6.755 7.5 7.5 0 00-6.755-8.177c-43.996-4.19-84.721-24.538-114.673-57.295C94.036 343.483 77.435 300.706 77.435 256c0-98.462 80.104-178.566 178.566-178.566 42.136 0 83.045 14.964 115.193 42.136a7.497 7.497 0 0010.569-.886 7.5 7.5 0 00-.887-10.569z\"></path>\n        <path d=\"M186.317 331.684c12.533 12.531 32.926 12.531 45.459 0L256 307.459l24.224 24.225c6.267 6.266 14.498 9.399 22.729 9.399s16.463-3.134 22.729-9.399c12.533-12.533 12.533-32.927 0-45.46L301.459 262l24.224-24.224c12.533-12.533 12.533-32.927 0-45.46-12.533-12.531-32.926-12.531-45.458 0L256 216.541l-24.225-24.225c-12.533-12.531-32.925-12.532-45.458 0-12.533 12.533-12.533 32.927 0 45.46L210.541 262l-24.224 24.224c-12.533 12.533-12.533 32.927 0 45.46zm10.607-34.853l29.528-29.527a7.5 7.5 0 000-10.608l-29.528-29.527c-6.685-6.685-6.685-17.561 0-24.245 6.685-6.686 17.562-6.685 24.246 0l29.528 29.527a7.501 7.501 0 0010.606 0l29.528-29.527c6.685-6.686 17.561-6.686 24.246 0 6.685 6.685 6.685 17.561 0 24.245l-29.528 29.527a7.5 7.5 0 000 10.608l29.528 29.527c6.685 6.685 6.685 17.561 0 24.245-6.685 6.685-17.562 6.685-24.246 0l-29.527-29.527c-1.464-1.464-3.384-2.196-5.303-2.196s-3.839.732-5.303 2.196l-29.527 29.527c-6.685 6.685-17.562 6.685-24.246 0s-6.687-17.56-.002-24.245zm-30.165-110.196a7.5 7.5 0 007.5-7.5v-4.492h4.493c4.142 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.5-7.5h-4.493v-4.493c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v4.493h-4.493c-4.142 0-7.5 3.357-7.5 7.5s3.358 7.5 7.5 7.5h4.493v4.492a7.5 7.5 0 007.5 7.5z\"></path>\n      </g>\n    </svg>\n  );\n}\n","export function StarIcon(props: React.SVGProps<SVGSVGElement>): JSX.Element {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" {...props}>\n      <path\n        fill=\"#ffb820\"\n        d=\"M491.64 188.725l-153.53-22.31-68.66-139.12c-2.75-5.57-8.1-8.36-13.45-8.36l.02 400.2 137.3 72.19c11.01 5.78 23.86-3.56 21.76-15.81l-26.22-152.92 111.09-108.29c8.91-8.68 3.99-23.79-8.31-25.58z\"\n      ></path>\n      <path\n        fill=\"#ffd06a\"\n        d=\"M356.62 312.125s23.68 138.03 23.76 138.49c-.08-.01-122.45-31-124.36-31.48-.02-.01-137.34 72.19-137.34 72.19-11.01 5.78-23.86-3.56-21.76-15.81l26.22-152.92-111.09-108.29c-8.91-8.68-3.99-23.79 8.31-25.58l153.53-22.31 68.66-139.12c2.75-5.57 8.1-8.36 13.45-8.36l62.19 174.9 139.06 20.21z\"\n      ></path>\n      <path d=\"M510.883 196.615c-2.666-8.204-9.625-14.07-18.16-15.311l-149.632-21.743-66.918-135.588c-3.817-7.735-11.547-12.54-20.173-12.54s-16.356 4.805-20.173 12.54L168.91 159.561 19.278 181.305c-8.537 1.24-15.495 7.106-18.161 15.311s-.484 17.04 5.693 23.062l108.274 105.541-9.911 57.786a7.501 7.501 0 006.124 8.66 7.499 7.499 0 008.66-6.125l10.578-61.672a7.502 7.502 0 00-2.157-6.639L17.28 208.934c-2.089-2.036-2.798-4.909-1.897-7.684.902-2.775 3.164-4.683 6.052-5.103l153.534-22.31a7.498 7.498 0 005.647-4.103l68.662-139.125c1.292-2.617 3.804-4.179 6.722-4.179s5.431 1.562 6.722 4.179l68.663 139.125a7.5 7.5 0 005.647 4.103l153.534 22.31c2.888.42 5.15 2.327 6.051 5.102.902 2.775.193 5.648-1.896 7.685L383.622 317.228a7.499 7.499 0 00-2.157 6.639l26.227 152.913c.494 2.876-.621 5.617-2.982 7.332-2.361 1.714-5.312 1.929-7.895.57L259.49 412.487a7.504 7.504 0 00-6.98 0l-137.325 72.195c-2.583 1.358-5.535 1.144-7.894-.57-2.361-1.715-3.476-4.456-2.982-7.332l10.578-61.673a7.501 7.501 0 00-6.124-8.66 7.501 7.501 0 00-8.66 6.125l-10.578 61.673c-1.458 8.502 1.971 16.933 8.95 22.003 3.943 2.865 8.557 4.32 13.201 4.32a22.51 22.51 0 0010.49-2.608L256 427.6l133.834 70.36c7.635 4.014 16.713 3.357 23.692-1.712 6.979-5.07 10.408-13.502 8.949-22.003l-25.56-149.027L505.19 219.677c6.177-6.022 8.359-14.859 5.693-23.062z\"></path>\n    </svg>\n  );\n}\n","// This icon file is generated automatically.\nvar CaretUpOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z\" } }] }, \"name\": \"caret-up\", \"theme\": \"outlined\" };\nexport default CaretUpOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CaretUpOutlinedSvg from \"@ant-design/icons-svg/es/asn/CaretUpOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar CaretUpOutlined = function CaretUpOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CaretUpOutlinedSvg\n  }));\n};\nCaretUpOutlined.displayName = 'CaretUpOutlined';\nexport default /*#__PURE__*/React.forwardRef(CaretUpOutlined);","// This icon file is generated automatically.\nvar CrownFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M899.6 276.5L705 396.4 518.4 147.5a8.06 8.06 0 00-12.9 0L319 396.4 124.3 276.5c-5.7-3.5-13.1 1.2-12.2 7.9L188.5 865c1.1 7.9 7.9 14 16 14h615.1c8 0 14.9-6 15.9-14l76.4-580.6c.8-6.7-6.5-11.4-12.3-7.9zM512 734.2c-62.1 0-112.6-50.5-112.6-112.6S449.9 509 512 509s112.6 50.5 112.6 112.6S574.1 734.2 512 734.2zm0-160.9c-26.6 0-48.2 21.6-48.2 48.3 0 26.6 21.6 48.3 48.2 48.3s48.2-21.6 48.2-48.3c0-26.6-21.6-48.3-48.2-48.3z\" } }] }, \"name\": \"crown\", \"theme\": \"filled\" };\nexport default CrownFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CrownFilledSvg from \"@ant-design/icons-svg/es/asn/CrownFilled\";\nimport AntdIcon from '../components/AntdIcon';\nvar CrownFilled = function CrownFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CrownFilledSvg\n  }));\n};\nCrownFilled.displayName = 'CrownFilled';\nexport default /*#__PURE__*/React.forwardRef(CrownFilled);"],"names":["MetricHighlight","children","icon","type","className","iconSize","iconPlacement","clsx","size","PointsHighlight","ListOfPlayers","players","list","namesOnly","prefix","map","playerId","name","join","index","Fragment","player","length","pt","en","GainedPoint","gainedPoint","order","description","isPositive","isNegative","title","color","GainedPoints","gainedPoints","gainedPointsDescriptions","points","Array","isArray","RankingBoard","ranking","hideGainedPoints","delay","useState","displayStep","setDisplayStep","sortedRanking","setSortedRanking","reRank","setReRank","useDimensions","height","maxPoints","useMemo","Math","max","scores","newScore","seconds","useCountdown","duration","autoStart","onExpire","useEffectOnce","positions","lastPosition","lastPoints","rankByFinalScoreDict","orderBy","reduce","acc","entry","rankByPreviousScore","tempSortedRanking","newEntry","position","previousScore","useEffect","style","hPosition","id","top","CrownFilled","avatarId","undefined","StepRankingWrapper","subtitle","useTemporarilyHidePlayersBar","CaretUpOutlined","View","ViewIf","condition","ViewOr","ViewSwitch","cases","Error","console","warn","mockGuess","charactersDict","user","targetId","getRandomItem","Object","values","filter","character","characterId","revealed","history","includes","CharactersBoard","charactersIds","userCharacterId","onCardClick","historyEntry","useLanguage","language","translate","isLoading","useLoading","cardWidth","useCardWidth","width","unavailable","ownCharacter","onConfirm","okText","cancelText","disabled","imageId","preview","previewImageId","PlayersBoards","questionsDict","playersList","sortPlayers","wrap","PlayerBoard","backgroundColor","getAvatarColorById","opacity","answers","withName","withRoundCorners","addressUser","Boolean","entries","questionId","answer","question","SpeechBubbleAcceptedIcon","SpeechBubbleDeclinedIcon","PlayerChoices","onSubmitPrompt","onSubmitTarget","contained","questions","onClick","ready","header","LETTERS","getColorFromLetter","StepSelectPrompt","announcement","turnOrder","activePlayerId","useDelayedMock","options","keys","pId","choice","startsWith","mockPromptDecision","fullWidth","cardId","UserQuestions","StepWaitingForPrompt","activePlayer","AnimatedClockIcon","PhasePrompt","state","info","useUser","useStep","step","setStep","useWhichPlayerIsThe","isUserTheActivePlayer","request","useAPICall","apiFunction","TA_NA_CARA_API","actionName","onSuccess","successMessage","errorMessage","payload","action","useOnSubmitPromptAPIRequest","useOnSubmitTargetAPIRequest","ChoiceIcon","currentRound","round","current","phase","allowedPhase","PHASES","conditions","isReady","StepAnswerTheQuestion","onSubmitAnswer","level","currentAnswer","PhaseAnswer","useOnSubmitAnswerAPIRequest","ChatIcon","currentQuestionId","StepGuessPlayer","targetedPlayer","onSubmitGuess","pluralize","StepWaitingForGuesses","PhaseGuessing","isUserTheTargetedPlayer","useOnSubmitGuessAPIRequest","AnonymousIcon","StepReveal","correct","goToNextStep","result","isCorrect","align","StepRanking","goToPreviousStep","PhaseReveal","SpotlightIcon","announcementIcon","FlagIcon","gallery","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseGameOver","PageError","gameId","theme","token","colorPrimary","THEME_COLORS","gameCollection","GAME_COLLECTION","backgroundClassName","propertyName","useGlobalState","userId","setActivePlayer","isUser","setIsUser","props","xmlns","viewBox","fill","d","attributeName","dur","from","repeatCount","to","cx","cy","r","StarIcon","ref","React","AntdIcon","_objectSpread","CaretUpOutlinedSvg","displayName","CrownFilledSvg"],"sourceRoot":""}