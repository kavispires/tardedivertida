{"version":3,"file":"static/js/810.4a52b854.chunk.js","mappings":"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","sources":["games/detetives-imaginativos/StepSecretClueWrite.tsx","games/detetives-imaginativos/StepSecretClueWaiting.tsx","games/detetives-imaginativos/PhaseSecretClue.tsx","games/detetives-imaginativos/api-requests.ts","games/detetives-imaginativos/Table.tsx","games/detetives-imaginativos/StepPlayCard.tsx","games/detetives-imaginativos/PhaseCardPlay.tsx","games/detetives-imaginativos/TableFocus.tsx","games/detetives-imaginativos/StepDefending.tsx","games/detetives-imaginativos/PhaseDefense.tsx","games/detetives-imaginativos/VotingOptions.tsx","games/detetives-imaginativos/StepVoting.tsx","games/detetives-imaginativos/PhaseVoting.tsx","games/detetives-imaginativos/StepReveal.tsx","games/detetives-imaginativos/PhaseReveal.tsx","games/detetives-imaginativos/PhaseGameOver.tsx","games/detetives-imaginativos/SessionDetetivesImaginativos.tsx","../node_modules/@ant-design/icons-svg/es/asn/QuestionCircleFilled.js","../node_modules/@ant-design/icons/es/icons/QuestionCircleFilled.js"],"sourcesContent":["import { useState } from 'react';\n// Hooks\nimport { useLanguage, useLoading } from '../../hooks';\n// Design Resources\nimport { Button, Input } from 'antd';\n// Components\nimport {\n  ButtonContainer,\n  FloatingHand,\n  ImageCardHand as Hand,\n  Instruction,\n  Title,\n  Translate,\n} from '../../components';\n\ntype SecretClueWriteProps = {\n  onSubmitClue: GenericFunction;\n  user: GamePlayer;\n};\n\nfunction SecretClueWrite({ user, onSubmitClue }: SecretClueWriteProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [clue, setClue] = useState('');\n\n  const onButtonClick = () => {\n    onSubmitClue({\n      clue,\n    });\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      onButtonClick();\n    }\n  };\n\n  return (\n    <div className=\"d-secret-clue-write\">\n      <Title>\n        <Translate pt=\"Escreva a Pista!\" en=\"Write a Clue!\" />\n      </Title>\n      <Instruction contained>\n        <ul>\n          <li>\n            <Translate\n              pt=\"Escreva uma pista que relacione com duas das suas cartas.\"\n              en=\"Write a clue that relates to two of your cards.\"\n            />\n          </li>\n          <li>\n            <Translate\n              pt=\"A pista pode ser qualquer coisa que você quiser. Não há restrições!\"\n              en=\"The clue can be anything you want. There are no restrictions!\"\n            />\n          </li>\n          <li>\n            <Translate\n              pt=\"Você ganha pontos somente se o Impostor não for encontrado, então escolha algo fácil e generalizado.\"\n              en=\"You only get points if the Impostor is not found by the others, so choose something easy and general.\"\n            />\n          </li>\n        </ul>\n      </Instruction>\n      <ButtonContainer className=\"d-input-container\">\n        <Input\n          className=\"uppercase-input\"\n          placeholder={translate('Escreva sua pista aqui', 'Write your clue here')}\n          onChange={(e) => setClue(e.target.value)}\n          onKeyPress={onEnterInput}\n        />\n        <Button type=\"primary\" disabled={isLoading || clue.length < 1} onClick={onButtonClick}>\n          <Translate pt=\"Enviar pista secreta\" en=\"Send secret clue\" />\n        </Button>\n      </ButtonContainer>\n      <FloatingHand>\n        <Hand hand={user.hand} sizeRatio={6} />\n      </FloatingHand>\n    </div>\n  );\n}\n\nexport default SecretClueWrite;\n","// Components\nimport {\n  AvatarIcon,\n  AvatarName,\n  FloatingHand,\n  ImageCardHand,\n  Instruction,\n  Title,\n  Translate,\n  TurnOrder,\n} from '../../components';\n\ntype StepSecretClueWaitingProps = {\n  leader: GamePlayer;\n  user: GamePlayer;\n  players: GamePlayers;\n  turnOrder: PlayerId[];\n};\n\nfunction StepSecretClueWaiting({ leader, user, players, turnOrder }: StepSecretClueWaitingProps) {\n  return (\n    <div className=\"d-secret-clue-write\">\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" /> <Translate pt=\"Aguarde...\" en=\"Please wait...\" />\n      </Title>\n      <Instruction contained>\n        <AvatarName player={leader} addressUser />{' '}\n        <Translate pt=\"está escrevendo a pista secreta.\" en=\"is writing the secret clue.\" />\n        <br />\n        <Translate\n          pt=\"Enquanto isso, examine suas cartas! Você as usará durante esta rodada.\"\n          en=\"In the meantime, examine your cards. You're gonna use them this turn.\"\n        />\n      </Instruction>\n      <TurnOrder players={players} activePlayerId={leader.id} order={turnOrder} />\n      <FloatingHand>\n        <ImageCardHand hand={user.hand} sizeRatio={6} />\n      </FloatingHand>\n    </div>\n  );\n}\n\nexport default StepSecretClueWaiting;\n","import { useState } from 'react';\n// Hooks\nimport { useIsUserReady, useWhichPlayerIsThe, useUser, useLanguage } from '../../hooks';\nimport { useOnSubmitSecretClueAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  AvatarName,\n  ImageCardPreloadHand,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  Step,\n  StepSwitcher,\n  Translate,\n  ViewIf,\n} from '../../components';\nimport StepSecretClueWrite from './StepSecretClueWrite';\nimport StepSecretClueWaiting from './StepSecretClueWaiting';\n\nfunction PhaseSecretClue({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n  const [leader, isUserTheLeader] = useWhichPlayerIsThe('leaderId', state, players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitSecretClue = useOnSubmitSecretClueAPIRequest(setStep);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.DETETIVES_IMAGINATIVOS.SECRET_CLUE}\n      className=\"d-secret-clue-phase\"\n    >\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement\n          round={state.round}\n          buttonText=\" \"\n          onPressButton={() => setStep(1)}\n          time={5}\n          circleColor=\"grey\"\n        />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"secret\"\n          title={translate('Pista Secreta', 'Secret Clue')}\n          onClose={() => setStep(2)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Para essa rodada, <AvatarName player={leader} addressUser /> será o(a) Detetive Líder.\n                </>\n              }\n              en={\n                <>\n                  For this round, <AvatarName player={leader} addressUser /> will be the Lead Detective.\n                </>\n              }\n            />\n          </Instruction>\n          <ImageCardPreloadHand hand={user?.hand} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <Step fullWidth>\n          <ViewIf isVisible={!isUserTheLeader}>\n            <StepSecretClueWaiting\n              user={user}\n              leader={leader}\n              players={players}\n              turnOrder={state.turnOrder}\n            />\n          </ViewIf>\n\n          <ViewIf isVisible={isUserTheLeader}>\n            <StepSecretClueWrite user={user} onSubmitClue={onSubmitSecretClue} />\n          </ViewIf>\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseSecretClue;\n","import { DETETIVES_IMAGINATIVOS_API } from '../../adapters';\nimport { useAPICall, useLanguage } from '../../hooks';\n\nexport function useOnSubmitSecretClueAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: DETETIVES_IMAGINATIVOS_API.submitAction,\n    actionName: 'submit-secret-clue',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('Pista Secreta submetida com sucesso', 'Secret clue submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua pista secreta',\n      'Oops, the application found an error while trying to submit your secret clue'\n    ),\n  });\n\n  return (payload: SubmitSecretCluePayload) => {\n    request({\n      action: 'SUBMIT_CLUE',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: DETETIVES_IMAGINATIVOS_API.submitAction,\n    actionName: 'play-card',\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application found an error while trying to submit your card'\n    ),\n  });\n\n  return (payload: SubmitPlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnFinishDefenseRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: DETETIVES_IMAGINATIVOS_API.submitAction,\n    actionName: 'finish-defense',\n    successMessage: translate('Defesa concluída com sucesso', 'Defense concluded successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar concluir sua defesa',\n      'Oops, the application found an error while trying to conclude your defense'\n    ),\n  });\n\n  return () => {\n    request({\n      action: 'DEFEND',\n    });\n  };\n}\n\nexport function useOnSubmitVoteAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: DETETIVES_IMAGINATIVOS_API.submitAction,\n    actionName: 'submit-vote',\n    successMessage: translate('Voto enviado com sucesso', 'Vote submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu voto',\n      'Oops, the application found an error while trying to submit your vote'\n    ),\n  });\n\n  return (payload: SubmitVotePayload) => {\n    request({\n      action: 'SUBMIT_VOTE',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from '../../hooks';\n// Utils\nimport { AVATARS } from '../../utils/constants';\n// Components\nimport { Avatar, AvatarIcon, ImageBlurButtonContainer, ImageCard } from '../../components';\n\ntype TableProps = {\n  table: DetetivesImaginativosCardEntry[];\n  players: GamePlayers;\n};\n\nexport function Table({ table, players }: TableProps) {\n  const cardWidth = useCardWidth(12, 16);\n  const baseClass = 'd-table';\n\n  if (!table || !table?.length) {\n    return (\n      <div className={clsx(baseClass, `${baseClass}--center`)}>\n        <AvatarIcon type=\"animated-loader\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={baseClass}>\n      {table.map((entry) => {\n        const { playerId, cards } = entry;\n        const playerEntryKey = `table-${playerId}`;\n        return (\n          <div key={playerEntryKey} className=\"d-table__player-entry\">\n            <div className=\"d-table__cards\">\n              {cards.map((cardId) => {\n                if (!cardId) {\n                  return (\n                    <div\n                      key={`${playerEntryKey}-placeholder`}\n                      className=\"d-table__card d-table__card-placeholder\"\n                      style={{ width: 1 }}\n                    />\n                  );\n                }\n\n                return (\n                  <ImageBlurButtonContainer cardId={cardId} className=\"d-table__card\">\n                    <ImageCard key={`${playerEntryKey}${cardId}`} imageId={cardId} cardWidth={cardWidth} />\n                  </ImageBlurButtonContainer>\n                );\n              })}\n            </div>\n            <div className=\"d-table__player-info\">\n              <Avatar id={players[playerId].avatarId} className=\"d-table__player-avatar\" size=\"default\" />\n              <span\n                className=\"d-table__player-bar\"\n                style={{ backgroundColor: AVATARS[players[playerId].avatarId].color }}\n              />\n              <span className=\"d-table__player-name\">{players[playerId].name}</span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Table;\n","// Design Resources\nimport { QuestionCircleFilled } from '@ant-design/icons';\nimport { message } from 'antd';\nimport { useEffect } from 'react';\n// Components\nimport {\n  AvatarIcon,\n  AvatarName,\n  FloatingHand,\n  ImageCardHand,\n  Instruction,\n  messageContent,\n  Step,\n  Title,\n  TitleHighlight,\n  Translate,\n  ViewIf,\n} from '../../components';\nimport { useLanguage } from '../../hooks';\nimport Table from './Table';\n\ntype StepPlayCardProps = {\n  isUserTheImpostor: boolean;\n  isUserTheCurrentPlayer: boolean;\n  clue: string;\n  currentPlayer: GamePlayer;\n  table: DetetivesImaginativosCardEntry[];\n  players: GamePlayers;\n  user: GamePlayer;\n  onPlayCard: GenericFunction;\n  isLoading: boolean;\n};\n\nfunction StepPlayCard({\n  isUserTheImpostor,\n  isUserTheCurrentPlayer,\n  clue,\n  currentPlayer,\n  table,\n  players,\n  user,\n  onPlayCard,\n  isLoading,\n}: StepPlayCardProps) {\n  const { translate } = useLanguage();\n  const onSelectCard = (cardId: string) => onPlayCard({ cardId });\n\n  useEffect(() => {\n    if (isUserTheCurrentPlayer && !isLoading) {\n      message.info(\n        messageContent(\n          translate('Escolha uma carta!', 'Choose a card to play'),\n          translate(\n            'Aperte o botão Selecionar acima da carta escolhida',\n            'Press the select button above each card'\n          ),\n\n          currentPlayer.id,\n          3\n        )\n      );\n    }\n  }, [isUserTheCurrentPlayer, currentPlayer.id, translate, isLoading]);\n\n  return (\n    <Step key={1}>\n      <Title>\n        {isUserTheImpostor ? (\n          <>\n            <QuestionCircleFilled />{' '}\n            <Translate\n              pt=\"Pista? Que pista? Você é o impostor!\"\n              en=\"Clue? What clue? You are the impostor!\"\n            />\n          </>\n        ) : (\n          <>\n            <Translate pt=\"A pista secreta é\" en=\"The secret clue is\" />{' '}\n            <TitleHighlight>{clue}</TitleHighlight>\n          </>\n        )}\n      </Title>\n      <Instruction>\n        <ViewIf isVisible={isUserTheCurrentPlayer && !isUserTheImpostor}>\n          <>\n            <AvatarIcon type=\"image-cards\" size=\"large\" shape=\"square\" />{' '}\n            <Translate\n              pt=\"Selecione uma carta que mais combine com a pista secreta.\"\n              en=\"Select a card that best fits the secret clue.\"\n            />\n          </>\n        </ViewIf>\n        <ViewIf isVisible={isUserTheCurrentPlayer && isUserTheImpostor}>\n          <>\n            <AvatarIcon type=\"image-cards\" size=\"large\" shape=\"square\" />{' '}\n            <Translate\n              pt=\"Selecione uma carta que mais combine com as cartas que os outros\n                jogadores estão usando.\"\n              en=\"Select a card that best fits with what others are playing.\"\n            />\n          </>\n        </ViewIf>\n        <ViewIf isVisible={!isUserTheCurrentPlayer}>\n          <>\n            <AvatarIcon type=\"animated-clock\" size=\"large\" />{' '}\n            <Translate\n              pt={\n                <>\n                  Aguarde enquanto <AvatarName player={currentPlayer} addressUser /> escolhe uma carta.\n                </>\n              }\n              en={\n                <>\n                  Wait while <AvatarName player={currentPlayer} /> picks a card.\n                </>\n              }\n            />\n          </>\n        </ViewIf>\n      </Instruction>\n      <Table table={table} players={players} />\n      <FloatingHand>\n        <ImageCardHand\n          hand={user.hand}\n          onSelectCard={isUserTheCurrentPlayer ? onSelectCard : undefined}\n          disabledSelectButton={isLoading}\n          sizeRatio={6}\n        />\n      </FloatingHand>\n    </Step>\n  );\n}\n\nexport default StepPlayCard;\n","import { useEffect, useState } from 'react';\n// Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useWhichPlayerIsThe, useUser, useLoading, useLanguage } from '../../hooks';\nimport { useOnPlayCardAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  messageContent,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n} from '../../components';\n\nimport StepPlayCard from './StepPlayCard';\n\nfunction PhaseCardPlay({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const user = useUser(players);\n  const [currentPlayer, isUserTheCurrentPlayer] = useWhichPlayerIsThe('currentPlayerId', state, players);\n  const [, isUserTheImpostor] = useWhichPlayerIsThe('impostorId', state, players);\n  const [step, setStep] = useState(0);\n\n  const onPlayCard = useOnPlayCardAPIRequest();\n  // const onPlayCard = (e: any) => console.log(e);\n\n  useEffect(() => {\n    if (isUserTheCurrentPlayer && step === 1 && !isLoading) {\n      message.info(\n        messageContent(\n          translate('Escolha uma carta!', 'Choose a card to play'),\n          translate(\n            'Aperte o botão Selecionar acima da carta escolhida',\n            'Press the select button above each card'\n          ),\n\n          currentPlayer.id,\n          3\n        )\n      );\n    }\n  }, [isUserTheCurrentPlayer, currentPlayer.id, step, translate, isLoading]);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.DETETIVES_IMAGINATIVOS.CARD_PLAY}\n      className=\"d-phase d-play-card-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"hanging-photograph\"\n          title={translate('Apresentação das Evidências', 'Evidence')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Agora, jogadores selecionarão duas cartas, uma de cada vez, como evidência que eles não sao o impostor. Enquanto isso, o impostor está prestando bastante atenção nas cartas selecionadas e escolhendo algo que o(a) ajude a passar despercebido.\"\n              en=\"Now players will play 2 cards, one at a time, as evidence that they are not the impostor while the impostor is looking closely to what others are playing and trying to go unnoticed.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepPlayCard\n          clue={state.clue}\n          currentPlayer={currentPlayer}\n          isLoading={isLoading}\n          isUserTheImpostor={isUserTheImpostor}\n          isUserTheCurrentPlayer={isUserTheCurrentPlayer}\n          onPlayCard={onPlayCard}\n          players={players}\n          table={state.table}\n          user={user}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from '../../hooks';\n// Utils\nimport { AVATARS } from '../../utils/constants';\n// Components\nimport { Avatar, AvatarIcon, ImageBlurButtonContainer, ImageCard } from '../../components';\n\ntype TableFocusProps = {\n  currentPlayer: GamePlayer;\n  table: DetetivesImaginativosCardEntry[];\n};\n\nexport function TableFocus({ table, currentPlayer }: TableFocusProps) {\n  const cardWidth = useCardWidth(6, 32, 250);\n\n  const tableEntry = table.find((entry) => entry.playerId === currentPlayer.id);\n  const baseClass = 'd-table';\n\n  if (!currentPlayer || !tableEntry?.cards) {\n    return (\n      <div className={clsx(baseClass, `${baseClass}--center`)}>\n        <AvatarIcon type=\"animated-loader\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={clsx(baseClass, `${baseClass}--center`)}>\n      <div className=\"d-table__player-entry\">\n        <div className=\"d-table__cards\">\n          {tableEntry?.cards.map((cardId) => {\n            return (\n              <ImageBlurButtonContainer\n                cardId={cardId}\n                className=\"d-table__card\"\n                key={`table-focus-${cardId}`}\n              >\n                <ImageCard key={`table-focus-${cardId}`} imageId={cardId} cardWidth={cardWidth} />\n              </ImageBlurButtonContainer>\n            );\n          })}\n        </div>\n        <div className=\"d-table__player-info\">\n          <Avatar id={currentPlayer.avatarId} className=\"d-table__player-avatar\" size=\"default\" />\n          <span\n            className=\"d-table__player-bar\"\n            style={{ backgroundColor: AVATARS[currentPlayer.avatarId].color }}\n          />\n          <span className=\"d-table__player-name\">{currentPlayer.name}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TableFocus;\n","// Design Resources\nimport { Button } from 'antd';\n// Components\nimport {\n  AvatarName,\n  ButtonContainer,\n  Instruction,\n  Step,\n  Title,\n  TitleHighlight,\n  Translate,\n} from '../../components';\nimport TableFocus from './TableFocus';\n\ntype StepDefendingProps = {\n  clue: string;\n  currentPlayer: GamePlayer;\n  isUserTheCurrentPlayer: boolean;\n  table: DetetivesImaginativosCardEntry[];\n  onFinishDefenseClick: GenericFunction;\n  isLoading: boolean;\n};\n\nfunction StepDefending({\n  clue,\n  currentPlayer,\n  isUserTheCurrentPlayer,\n  table,\n  onFinishDefenseClick,\n  isLoading,\n}: StepDefendingProps) {\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Pista Secreta era: \" en=\"The Secret Clue was: \" />\n        <TitleHighlight>{clue}</TitleHighlight>\n      </Title>\n      <Instruction contained>\n        <AvatarName player={currentPlayer} />,{' '}\n        <Translate pt=\"explique porque você escolheu as cartas.\" en=\"explain why you chose your cards.\" />\n        {isUserTheCurrentPlayer && (\n          <>\n            <Translate\n              pt=\" Quando terminar sua defesa, aperte concluir.\"\n              en=\" When you're done, press 'End Defense'\"\n            />\n          </>\n        )}\n      </Instruction>\n\n      {isUserTheCurrentPlayer && (\n        <ButtonContainer>\n          <Button type=\"primary\" onClick={onFinishDefenseClick} disabled={isLoading} size=\"large\">\n            <Translate pt=\"Concluir Defesa\" en=\"End Defense\" />\n          </Button>\n        </ButtonContainer>\n      )}\n\n      <TableFocus table={table} currentPlayer={currentPlayer} />\n    </Step>\n  );\n}\n\nexport default StepDefending;\n","import { useEffect, useState } from 'react';\n// Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useWhichPlayerIsThe, useLoading, useLanguage } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport {\n  Instruction,\n  messageContent,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Title,\n  TitleHighlight,\n  Translate,\n} from '../../components';\nimport StepDefending from './StepDefending';\nimport { useOnFinishDefenseRequest } from './api-requests';\n\nfunction PhaseDefense({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [currentPlayer, isUserTheCurrentPlayer] = useWhichPlayerIsThe('currentPlayerId', state, players);\n  const [step, setStep] = useState(0);\n\n  const onFinishDefense = useOnFinishDefenseRequest();\n\n  useEffect(() => {\n    if (isUserTheCurrentPlayer && step === 1 && !isLoading) {\n      message.info(\n        messageContent(\n          translate('Sua vez de defender suas escolhas!', \"It's your turn to defend your choices\"),\n          translate(\n            'Aperte o botão Concluir Defesa quando terminar',\n            \"Press the button End Defense when you're done\"\n          ),\n\n          currentPlayer?.id,\n          4\n        )\n      );\n    }\n  }, [isUserTheCurrentPlayer, currentPlayer?.id, step, translate, isLoading]);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.DETETIVES_IMAGINATIVOS.DEFENSE}\n      className=\"d-defense-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"defense\"\n          title={translate('Defensa', 'Defense')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n          duration={5}\n        >\n          <Title>\n            <Translate pt=\"Pista Secreta era: \" en=\"The Secret Clue was: \" />\n            <TitleHighlight>{state.clue}</TitleHighlight>\n          </Title>\n          <Instruction>\n            <Translate\n              pt=\"Agora, cada jogador em ordem deve defender porque escolheu as castas que escolheu.\"\n              en=\"Now, in turn-order, each player must present the reason they chose their cards.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepDefending\n          clue={state.clue}\n          currentPlayer={currentPlayer}\n          isUserTheCurrentPlayer={isUserTheCurrentPlayer}\n          table={state.table}\n          onFinishDefenseClick={onFinishDefense}\n          isLoading={isLoading}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDefense;\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Design Resources\nimport { Button } from 'antd';\n// Components\nimport { Avatar, AvatarName, ButtonContainer, Translate } from '../../components';\n\ntype VotingOptionsProps = {\n  isAllDisabled: boolean;\n  leaderId: PlayerId;\n  players: GamePlayers;\n  user?: GamePlayer;\n  onVote: GenericFunction;\n  isLoading?: boolean;\n};\n\nexport function VotingOptions({\n  players,\n  leaderId,\n  user,\n  onVote,\n  isLoading = false,\n  isAllDisabled = false,\n}: VotingOptionsProps) {\n  const votingOptions = useMemo(\n    () =>\n      orderBy(\n        Object.values(players).filter((player) => player.id !== leaderId),\n        ['name'],\n        ['asc']\n      ),\n    [players, leaderId]\n  );\n\n  return (\n    <ButtonContainer className=\"d-voting-options\">\n      {votingOptions?.map((playerOption) => {\n        const votedForPlayer = Object.values(players).filter((player) => player?.vote === playerOption.id);\n        return (\n          <div className=\"d-voting-options__container\" key={`voting-button-${playerOption.name}`}>\n            <Button\n              onClick={() => onVote({ vote: playerOption.id })}\n              ghost\n              size=\"large\"\n              disabled={isAllDisabled || user?.vote || isLoading || user?.name === playerOption.name}\n            >\n              <AvatarName player={playerOption} uppercase />\n            </Button>\n            <div className=\"d-voting-options__vote-container\">\n              <Translate pt=\"Votos\" en=\"Votes\" />: {votedForPlayer.length}\n              <ul className=\"d-voting-options__votes\">\n                {votedForPlayer.map((vPlayer) => (\n                  <Avatar\n                    key={`voted-for-player-${vPlayer.id}`}\n                    id={vPlayer.avatarId}\n                    size=\"small\"\n                    alt={vPlayer.name}\n                  />\n                ))}\n              </ul>\n            </div>\n          </div>\n        );\n      })}\n    </ButtonContainer>\n  );\n}\n\nexport default VotingOptions;\n","// Components\nimport { AvatarIcon, Instruction, Step, Title, Translate, ViewIf } from '../../components';\nimport Table from './Table';\nimport VotingOptions from './VotingOptions';\n\ntype StepVotingProps = {\n  isLoading: boolean;\n  isUserTheLeader: boolean;\n  leaderId: PlayerId;\n  user: GamePlayer;\n  players: GamePlayers;\n  onVote: GenericFunction;\n  table: DetetivesImaginativosCardEntry[];\n};\n\nfunction StepVoting({ isLoading, isUserTheLeader, user, leaderId, players, onVote, table }: StepVotingProps) {\n  return (\n    <Step>\n      <Title>\n        {isLoading ? (\n          <AvatarIcon type=\"animated-clock\" size=\"large\" />\n        ) : (\n          <Translate pt=\"Quem é o impostor?\" en=\"Who is the impostor?\" />\n        )}\n      </Title>\n      <Instruction contained>\n        <ViewIf isVisible={isUserTheLeader}>\n          <Translate\n            pt=\"Aguarde enquanto os outros jogadores votam em quem eles acham ser o impostor. Como Líder, você não vota.\"\n            en=\"Wait while the other detectives vote. As Lead Detective, you don't vote.\"\n          />\n        </ViewIf>\n        <ViewIf isVisible={!isUserTheLeader && !user.vote}>\n          <Translate\n            pt=\"Vote para quem você acha que pode ser o impostor! Lembre-se, o impostor só perde se 2 ou mais detetives votarem nele.\"\n            en=\"Vote for who you think can be the impostor! Remember, the impostor only goes down if they get 2 or more votes.\"\n          />\n        </ViewIf>\n        <ViewIf isVisible={!isUserTheLeader && user.vote}>\n          <Translate\n            pt=\"Aguarde enquanto os outros jogadores votam...\"\n            en=\"Wait while other detectives finish voting...\"\n          />\n        </ViewIf>\n      </Instruction>\n\n      <VotingOptions\n        players={players}\n        leaderId={leaderId}\n        user={user}\n        onVote={onVote}\n        isLoading={isLoading}\n        isAllDisabled={isUserTheLeader}\n      />\n\n      <Table table={table} players={players} />\n    </Step>\n  );\n}\n\nexport default StepVoting;\n","import { useState } from 'react';\n// Hooks\nimport { useUser, useLoading, useLanguage, useWhichPlayerIsThe } from '../../hooks';\nimport { useOnSubmitVoteAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from '../../components';\nimport StepVoting from './StepVoting';\n\nfunction PhaseVoting({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const user = useUser(players);\n  const [, isUserTheLeader] = useWhichPlayerIsThe('leaderId', state, players);\n  const [step, setStep] = useState(0);\n\n  const onSubmitVote = useOnSubmitVoteAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.DETETIVES_IMAGINATIVOS.VOTING}\n      className=\"d-voting-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"vote\"\n          title={translate('Votação', 'Vote')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora você vota! Escolha o jogador que você acredita ser o impostor. Você pode discutir com\n                  os outros antes de votar, porque uma vez votado, você não pode mudar. O impostor só pede se\n                  duas pessoas votarem nele.\n                </>\n              }\n              en={\n                <>\n                  Now it's time to vote! Vote for the player you think is the impostor. You can discuss before\n                  you vote because you can't change your vote. The impostor only loses if at least two people\n                  voted for them.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepVoting\n          players={players}\n          leaderId={state.leaderId}\n          user={user}\n          onVote={onSubmitVote}\n          isLoading={isLoading}\n          isUserTheLeader={isUserTheLeader}\n          table={state.table}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseVoting;\n","// Components\nimport {\n  AdminNextRoundButton,\n  AvatarName,\n  Instruction,\n  RankingBoard,\n  RoundsLeftInstruction,\n  Step,\n  Title,\n  Translate,\n} from '../../components';\nimport VotingOptions from './VotingOptions';\n\ntype StepRevealProps = {\n  impostor: GamePlayer;\n  impostorVotes: number;\n  players: GamePlayers;\n  leaderId: PlayerId;\n  round: GameRound;\n  ranking: GameRanking;\n  lastRound?: boolean;\n};\n\nfunction StepReveal({\n  impostor,\n  impostorVotes,\n  players,\n  leaderId,\n  round,\n  ranking,\n  lastRound = false,\n}: StepRevealProps) {\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"O impostor era \" en=\"The impostor was \" />\n        {<AvatarName player={impostor} />}\n      </Title>\n      <Instruction contained>\n        {impostorVotes > 1 ? (\n          <Translate\n            pt=\"Ele(a) recebeu mais de dois votos! Quem votou nele(a) ganha 3 pontos!\"\n            en=\"They received more than 2 votes! Who voted for them gets 3 points!\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                Ele(a) não recebeu mais de 2 votos: <b>Impostor</b> ganha 5 pontos e <b>Líder</b> ganha 4\n                pontos!\n              </>\n            }\n            en={\n              <>\n                They did not get enough votes: the <b>Impostor</b> gets 5 points and the <b>Lead Detective</b>{' '}\n                gets 4 points!\n              </>\n            }\n          />\n        )}\n      </Instruction>\n      <VotingOptions players={players} isAllDisabled={true} leaderId={leaderId} onVote={(...args) => {}} />\n      <RankingBoard players={players} ranking={ranking} />\n\n      <RoundsLeftInstruction round={round} />\n\n      <AdminNextRoundButton round={round} lastRound={lastRound} />\n    </Step>\n  );\n}\n\nexport default StepReveal;\n","import { useState } from 'react';\n// Hooks\nimport { useWhichPlayerIsThe, useLanguage } from '../../hooks';\n// Resources & Utils\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from '../../components';\nimport StepReveal from './StepReveal';\n\nfunction PhaseReveal({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const [impostor] = useWhichPlayerIsThe('impostorId', state, players);\n  const [step, setStep] = useState(0);\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.DETETIVES_IMAGINATIVOS.REVEAL}\n      className=\"d-voting-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"rank\"\n          title={translate('Revelação', 'Reveal')}\n          onClose={() => setStep(1)}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Se o impostor recebeu 2 ou mais votos ele(a) é desmascarado. Quem votou nele ganha 3 pontos.\n                  <br />\n                  Se o impostor recebeu menos de 2 votos, ele ganha 5 pontos e o detetive líder ganha 4\n                  pontos.\n                </>\n              }\n              en={\n                <>\n                  If the impostor gets 2 or more votes, they are exposed. Whoever voted for him get 3 points.\n                  <br />\n                  If the impostor gets fewer than 2 votes, he gets 5 points and the Lead detective gets 4\n                  points.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepReveal\n          impostor={impostor}\n          impostorVotes={state.impostorVotes}\n          players={players}\n          leaderId={state.leaderId}\n          round={state.round}\n          ranking={state.ranking}\n          lastRound={state.lastRound}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseReveal;\n","// Components\nimport { GameOverWrapper } from '../../components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from '../../utils/constants';\nimport { PHASES } from '../../utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from '../../components';\nimport PhaseSecretClue from './PhaseSecretClue';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseDefense from './PhaseDefense';\nimport PhaseVoting from './PhaseVoting';\nimport PhaseReveal from './PhaseReveal';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionDetetivesImaginativos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.DETETIVES_IMAGINATIVOS.SECRET_CLUE:\n        return PhaseSecretClue;\n      case PHASES.DETETIVES_IMAGINATIVOS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.DETETIVES_IMAGINATIVOS.DEFENSE:\n        return PhaseDefense;\n      case PHASES.DETETIVES_IMAGINATIVOS.VOTING:\n        return PhaseVoting;\n      case PHASES.DETETIVES_IMAGINATIVOS.REVEAL:\n        return PhaseReveal;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.DETETIVES_IMAGINATIVOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionDetetivesImaginativos;\n","// This icon file is generated automatically.\nvar QuestionCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 708c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm62.9-219.5a48.3 48.3 0 00-30.9 44.8V620c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-21.5c0-23.1 6.7-45.9 19.9-64.9 12.9-18.6 30.9-32.8 52.1-40.9 34-13.1 56-41.6 56-72.7 0-44.1-43.1-80-96-80s-96 35.9-96 80v7.6c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V420c0-39.3 17.2-76 48.4-103.3C430.4 290.4 470 276 512 276s81.6 14.5 111.6 40.7C654.8 344 672 380.7 672 420c0 57.8-38.1 109.8-97.1 132.5z\" } }] }, \"name\": \"question-circle\", \"theme\": \"filled\" };\nexport default QuestionCircleFilled;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport QuestionCircleFilledSvg from \"@ant-design/icons-svg/es/asn/QuestionCircleFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar QuestionCircleFilled = function QuestionCircleFilled(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: QuestionCircleFilledSvg\n  }));\n};\n\nQuestionCircleFilled.displayName = 'QuestionCircleFilled';\nexport default /*#__PURE__*/React.forwardRef(QuestionCircleFilled);"],"names":["user","onSubmitClue","translate","useLanguage","isLoading","useLoading","useState","clue","setClue","onButtonClick","className","pt","en","contained","placeholder","onChange","e","target","value","onKeyPress","key","type","disabled","length","onClick","hand","sizeRatio","leader","players","turnOrder","size","player","addressUser","activePlayerId","id","order","state","info","useUser","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheLeader","step","setStep","onSubmitSecretClue","request","useAPICall","apiFunction","DETETIVES_IMAGINATIVOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitSecretClueAPIRequest","phase","allowedPhase","PHASES","conditions","round","buttonText","onPressButton","time","circleColor","title","onClose","currentRound","current","fullWidth","isVisible","StepSecretClueWrite","table","cardWidth","useCardWidth","baseClass","map","entry","playerId","cards","playerEntryKey","cardId","imageId","style","width","avatarId","backgroundColor","AVATARS","color","name","clsx","isUserTheImpostor","isUserTheCurrentPlayer","currentPlayer","onPlayCard","useEffect","message","messageContent","QuestionCircleFilled","shape","onSelectCard","undefined","disabledSelectButton","useOnPlayCardAPIRequest","tableEntry","find","onFinishDefenseClick","onFinishDefense","useOnFinishDefenseRequest","duration","leaderId","onVote","isAllDisabled","votingOptions","useMemo","orderBy","Object","values","filter","playerOption","votedForPlayer","vote","ghost","uppercase","vPlayer","alt","onSubmitVote","useOnSubmitVoteAPIRequest","impostor","impostorVotes","ranking","lastRound","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseSecretClue","PhaseCardPlay","PhaseDefense","PhaseVoting","PhaseReveal","PhaseGameOver","PageError","props","ref","React","AntdIcon","_objectSpread","icon","QuestionCircleFilledSvg","displayName"],"sourceRoot":""}