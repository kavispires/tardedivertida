{"version":3,"file":"static/js/69.71f4f78b.chunk.js","mappings":"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","sources":["games/sonhos-pesadelos/PhaseGameOver.tsx","games/sonhos-pesadelos/mock.ts","games/sonhos-pesadelos/DreamCard.tsx","games/sonhos-pesadelos/DreamBoard.tsx","games/sonhos-pesadelos/StepTellDream.tsx","games/sonhos-pesadelos/RulesBlobs.tsx","games/sonhos-pesadelos/PhaseDreamTelling.tsx","games/sonhos-pesadelos/api-requests.ts","games/sonhos-pesadelos/AllDreamsClues.tsx","games/sonhos-pesadelos/helpers.ts","games/sonhos-pesadelos/DreamBoardVote.tsx","games/sonhos-pesadelos/StepMatchDreams.tsx","games/sonhos-pesadelos/PhaseMatching.tsx","games/sonhos-pesadelos/GalleryDreamDisplay.tsx","games/sonhos-pesadelos/GalleryGuesses.tsx","games/sonhos-pesadelos/StepResults.tsx","games/sonhos-pesadelos/StepRanking.tsx","games/sonhos-pesadelos/PhaseResolution.tsx","games/sonhos-pesadelos/SessionSonhosPesadelos.tsx","../node_modules/@ant-design/icons-svg/es/asn/PictureOutlined.js","../node_modules/@ant-design/icons/es/icons/PictureOutlined.js"],"sourcesContent":["// Components\nimport { GameOverWrapper } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","import { shuffle } from 'utils/helpers';\n\nconst mockedDreamClues = [\n  'água',\n  'bola',\n  'calderão do huck',\n  'dedo',\n  'esmalte',\n  'fatídico',\n  'ganhar',\n  'hereditário',\n  'simpático',\n  'abismo',\n  'rola',\n  'a branca de neve',\n  'oops i did it again',\n  'pesquisa',\n  'saborosa',\n  'amargo',\n];\n\nexport const mockDream = (): string => shuffle(mockedDreamClues)[0];\n\nexport const mockVotes = (dreams: SDream[], table: ImageCard[], user: GamePlayer): StringDictionary => {\n  const playersIds = shuffle(dreams.map((dream) => dream.id).filter((playerId) => playerId !== user.id));\n  const shuffledTable = shuffle(table);\n\n  return playersIds.reduce((acc: StringDictionary, playerId, index) => {\n    acc[playerId] = shuffledTable[index];\n    return acc;\n  }, {});\n};\n","import clsx from 'clsx';\n// Components\nimport { ImageCard, ImageBlurButton } from 'components';\n\ntype DreamCardProps = {\n  cardId: string;\n  cardWidth: number;\n  isDream?: boolean;\n  isNightmare?: boolean;\n  flipped?: boolean;\n  hideBlurButton?: boolean;\n};\n\nexport function DreamCard({\n  cardId,\n  cardWidth,\n  isDream = false,\n  isNightmare = false,\n  hideBlurButton = false,\n}: DreamCardProps) {\n  const baseClass = 's-dream-board-card';\n\n  return (\n    <>\n      <ImageCard\n        imageId={cardId}\n        cardWidth={cardWidth}\n        className={clsx(\n          baseClass,\n          isDream && `${baseClass}--dream`,\n          isNightmare && `${baseClass}--nightmare`\n        )}\n      />\n      {!hideBlurButton && <ImageBlurButton cardId={cardId} />}\n    </>\n  );\n}\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport { Translate } from 'components';\nimport { DreamCard } from './DreamCard';\n\ntype DreamBoardProps = {\n  table: ImageCard[];\n  user: GamePlayer;\n  className?: string;\n};\n\nexport function DreamBoard({ table, user, className = '' }: DreamBoardProps) {\n  const cardWidth = useCardWidth(table.length + 1, 20);\n\n  return (\n    <ul className={clsx('s-dream-board', className)}>\n      {table.map((cardId) => {\n        const isDream = user.dreamId === cardId;\n        const isNightmare = user.nightmareId === cardId;\n\n        return (\n          <li\n            className=\"s-dream-board__entry\"\n            key={`board-${cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <DreamCard cardId={cardId} cardWidth={cardWidth} isDream={isDream} isNightmare={isNightmare} />\n            {isDream && (\n              <div className=\"s-dream-board__dream-label\" style={{ maxWidth: `${cardWidth}px` }}>\n                <Translate pt=\"Sonho\" en=\"Pesadelo\" />\n              </div>\n            )}\n            {isNightmare && (\n              <div className=\"s-dream-board__nightmare-label\" style={{ maxWidth: `${cardWidth}px` }}>\n                <Translate pt=\"Pesadelo\" en=\"Nightmare\" />\n              </div>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, Input } from 'antd';\n// Hooks\nimport { useLanguage, useLoading, useMock } from 'hooks';\n// Utils\nimport { mockDream } from './mock';\n// Components\nimport { Card, ButtonContainer, Instruction, ReadyPlayersBar, Step, Title, Translate } from 'components';\nimport { DreamBoard } from './DreamBoard';\n\ntype StepTellDreamProps = {\n  players: GamePlayers;\n  table: ImageCard[];\n  user: GamePlayer;\n  onSubmitDream: GenericFunction;\n};\n\nexport function StepTellDream({ players, table, user, onSubmitDream }: StepTellDreamProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n  const [dream, setDream] = useState('');\n\n  // DEV: mocks clues\n  useMock(() => {\n    onSubmitDream({ dream: mockDream() });\n  }, []);\n\n  const onSubmitDreamsClick = () => {\n    onSubmitDream({\n      dream,\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>\n        <Card\n          header={translate('Tema do Sonho', 'Dream Theme')}\n          className=\"s-theme-card\"\n          randomColor\n          footer={Array(user.theme.level).fill('•').join('')}\n          footerClassName=\"s-theme-card__description\"\n        >\n          {user.theme.text}\n        </Card>\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Dentro do tema acima, escreva sua dica no campo abaixo. Lembre-se que seu sonho é a carta de borda amarela e seu pesadelo é a carta de borda roxa.\"\n          en=\"Write a clue in the field below within the given theme. Remember that your dream is the card with the yellow border and your nightmare is the card with the purple border.\"\n        />\n      </Instruction>\n\n      <DreamBoard table={table} user={user} />\n\n      <ButtonContainer>\n        <Input\n          size=\"large\"\n          onPressEnter={onSubmitDreamsClick}\n          onChange={(e) => setDream(e.target.value)}\n          placeholder={translate('Escreva aqui', 'Write here')}\n        />\n      </ButtonContainer>\n\n      <ButtonContainer>\n        <Button type=\"primary\" disabled={isLoading || !Boolean(dream)} onClick={onSubmitDreamsClick}>\n          <Translate pt=\"Enviar Sonho\" en=\"Submit Dream\" />\n        </Button>\n      </ButtonContainer>\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","import { Translate } from 'components';\n\nexport const DreamTellingRules = () => (\n  <Translate\n    pt={\n      <>\n        Escreva uma dica dentro do tema dado para o seu sonho (carta com borda amarela).\n        <br />\n        Preste atenção em seu pesadelo (carta com borda roxa), se alguém achar que sua dica é relacionada a\n        seu pesadelo, você perde pontos.\n      </>\n    }\n    en={\n      <>\n        Write a clue for your dream (yellow bordered card).\n        <br />\n        Pay attention to your nightmare (purple bordered card) because if any player thinks that your clue is\n        related to that card, you lose points.\n      </>\n    }\n  />\n);\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitDreamAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  ImageCardPreloadHand,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepTellDream } from './StepTellDream';\nimport { DreamTellingRules } from './RulesBlobs';\n\nfunction PhaseDreamTelling({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitDream = useOnSubmitDreamAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.DREAM_TELLING}>\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <RoundAnnouncement round={state.round} buttonText=\"\" onPressButton={goToNextStep} time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Sabe quando você sonha com uma coisa, mas não consegue explicar? Então...\"\n              en=\"You know when you dream about something but you can't quite explain? So...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"dream\"\n          title={translate('Conte-nos sobre seu sonho', 'Tell us about your dream...')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <DreamTellingRules />\n          </Instruction>\n          <ImageCardPreloadHand hand={state.table} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepTellDream players={players} table={state.table} onSubmitDream={onSubmitDream} user={user} />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamTelling;\n","import { SONHOS_PESADELOS_API } from 'adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitDreamAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SONHOS_PESADELOS_API.submitAction,\n    actionName: 'submit-dream',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(0),\n    successMessage: translate('Sonho submetido com sucesso', 'Dream submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu sonho',\n      'Oops, the application found an error while trying to submit your dream'\n    ),\n  });\n\n  return (payload: SubmitDreamPayload) => {\n    request({\n      action: 'SUBMIT_DREAM',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitVotesAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: SONHOS_PESADELOS_API.submitAction,\n    actionName: 'submit-votes',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(0),\n    successMessage: translate('Votos submetidos com sucesso', 'Votes submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seus votos',\n      'Oops, the application found an error while trying to submit your votes'\n    ),\n  });\n\n  return (payload: SubmitVotesPayload) => {\n    request({\n      action: 'SUBMIT_VOTING',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Constants\nimport { LETTERS } from 'utils/constants';\n// Utils\nimport { getColorFromLetter, getEntryId } from 'utils/helpers';\n// Components\nimport { Card } from 'components';\n\ntype AllDreamsCluesProps = {\n  dreams: SDream[];\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: StringDictionary;\n  players: GamePlayers;\n};\n\nexport function AllDreamsClues({ dreams, activeItem, onActivateItem, votes, players }: AllDreamsCluesProps) {\n  const liButtonBaseClass = 'a-evaluation-all-cards__li-card-button';\n\n  return (\n    <ul className=\"a-evaluation-all-cards\">\n      {dreams.map(({ id, dream }, index) => {\n        const player = players[id];\n        const letter = LETTERS[index];\n        const cardEntryId = getEntryId(['dream', id, letter]);\n        const isActive = activeItem === cardEntryId;\n        const isUsed = Object.keys(votes).includes(cardEntryId);\n\n        return (\n          <li\n            role=\"button\"\n            key={cardEntryId}\n            className={clsx(\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`,\n              isUsed && `${liButtonBaseClass}--used`\n            )}\n            onClick={() => onActivateItem(cardEntryId)}\n          >\n            <Card\n              color={getColorFromLetter(letter)}\n              header={letter}\n              size=\"medium\"\n              footer={player.name}\n              className=\"s-clue-card\"\n              footerClassName=\"s-clue-card__footer\"\n            >\n              {dream}\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { LETTERS, SEPARATOR } from 'utils/constants';\nimport { getEntryId, shuffle } from 'utils/helpers';\n\nexport const getClueId = (votes: StringDictionary, cardEntryId: string): string[] => {\n  return Object.keys(votes).filter((key) => votes[key] === cardEntryId);\n};\n\nexport const cleanupVotes = (votes: StringDictionary, user: GamePlayer): StringDictionary => {\n  return Object.entries(votes).reduce((acc: StringDictionary, [dreamEntryKey, cardEntryKey]) => {\n    const playerId = dreamEntryKey.split(SEPARATOR)[1];\n    const cardId = cardEntryKey.split(SEPARATOR)[1];\n\n    if (playerId !== user.id) {\n      acc[playerId] = cardId;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const selectOwnVote = (dreams: SDream[], user: GamePlayer) =>\n  dreams.reduce((acc: StringDictionary, entry, index) => {\n    if (entry.id === user.id) {\n      const clueEntryId = getEntryId(['dream', entry.id, LETTERS[index]]);\n      const cardEntryId = getEntryId(['card', user.dreamId]);\n      acc[clueEntryId] = cardEntryId;\n    }\n    return acc;\n  }, {});\n\nexport const voteRandomly = (votes: StringDictionary, dreams: SDream[], table: ImageCard[]) => {\n  const randomVotes = dreams.reduce((acc: StringDictionary, entry, index) => {\n    const randomTable = shuffle(table);\n    const clueEntryId = getEntryId(['dream', entry.id, LETTERS[index]]);\n    const cardEntryId = getEntryId(['card', randomTable[0]]);\n    acc[clueEntryId] = cardEntryId;\n\n    return acc;\n  }, {});\n\n  return {\n    ...randomVotes,\n    ...votes,\n  };\n};\n","import clsx from 'clsx';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Utils\nimport { getEntryId } from 'utils/helpers';\nimport { getClueId } from './helpers';\n// Components\nimport { RibbonGroup, ImageCardSelectButton, ImageBlurButton } from 'components';\nimport { DreamCard } from './DreamCard';\n\ntype DreamBoardVoteProps = {\n  table: ImageCard[];\n  user: GamePlayer;\n  activeItem: string;\n  onActivateItem: GenericFunction;\n  votes: PlainObject;\n};\n\nexport function DreamBoardVote({ table, activeItem, onActivateItem, votes }: DreamBoardVoteProps) {\n  const cardWidth = useCardWidth(table.length, 20);\n  const liButtonBaseClass = 'a-evaluation-all-drawings__li-drawing-button';\n\n  return (\n    <ul className=\"s-dream-board\">\n      {table.map((cardId) => {\n        const cardEntryId = getEntryId(['card', cardId]);\n        const isActive = activeItem === cardEntryId;\n        const ribbonIds = getClueId(votes, cardEntryId);\n\n        return (\n          <li\n            className={clsx(\n              's-dream-board__entry',\n              liButtonBaseClass,\n              isActive && `${liButtonBaseClass}--active`\n            )}\n            key={`board-${cardId}`}\n            style={{ maxWidth: `${cardWidth + 20}px` }}\n          >\n            <div className=\"s-dream-board__card-container\">\n              <RibbonGroup labels={ribbonIds} />\n              <DreamCard cardId={cardId} cardWidth={cardWidth} hideBlurButton />\n              <ImageCardSelectButton cardId={cardEntryId} onClick={onActivateItem} />\n            </div>\n            <ImageBlurButton cardId={cardId} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import clsx from 'clsx';\nimport { useEffect } from 'react';\n// Ant Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useLanguage, useLoading, useMock, useVotingMatch } from 'hooks';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { ButtonContainer, Instruction, ReadyPlayersBar, Step, Title, Translate } from 'components';\nimport { AllDreamsClues } from './AllDreamsClues';\nimport { DreamBoardVote } from './DreamBoardVote';\nimport { cleanupVotes, selectOwnVote, voteRandomly } from './helpers';\nimport { mockVotes } from './mock';\n\ntype StepMatchDreamsProps = {\n  onSubmitVotes: GenericFunction;\n  players: GamePlayers;\n  table: ImageCard[];\n  user: GamePlayer;\n  dreams: SDream[];\n};\n\nexport function StepMatchDreams({ players, user, table, onSubmitVotes, dreams }: StepMatchDreamsProps) {\n  const { isLoading } = useLoading();\n  const { translate } = useLanguage();\n\n  const { votes, setVotes, activeItem, activateItem, isVotingComplete } = useVotingMatch(\n    'dream',\n    true,\n    dreams.length\n  );\n\n  // Auto-select own clue\n  useEffect(() => {\n    const userClues = selectOwnVote(dreams, user);\n    if (userClues) {\n      setVotes((s: StringDictionary) => ({ ...s, ...userClues }));\n    }\n  }, []); //eslint-disable-line\n\n  // DEV: Random vote\n  useMock(() => {\n    onSubmitVotes({\n      votes: mockVotes(dreams, table, user),\n    });\n  }, []);\n\n  const onSubmitDreams = () => {\n    onSubmitVotes({\n      votes: cleanupVotes(votes, user),\n    });\n  };\n\n  return (\n    <Step fullWidth className=\"s-tell-dream-step\">\n      <Title>{translate('Adivinhação', 'Match the Pairs')}</Title>\n      <Instruction contained>\n        <Translate\n          pt=\"Clique em uma carta e então uma botão da imagem correspondente ou vice e versa. Aperte enviar quando terminar te combinar todas as dicas.\"\n          en=\"Click on a clue then on an image button or vice versa. When you're done matching all clues, press Submit.\"\n        />\n      </Instruction>\n\n      <ButtonContainer>\n        <Button\n          type=\"default\"\n          disabled={isLoading}\n          onClick={() => setVotes(voteRandomly(votes, dreams, table))}\n          className={clsx(isVotingComplete && getAnimationClass('tada'))}\n          size=\"large\"\n        >\n          <Translate pt=\"Vote pra mim\" en=\"Vote for me\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          disabled={isLoading || !isVotingComplete}\n          onClick={onSubmitDreams}\n          className={clsx(isVotingComplete && getAnimationClass('tada'))}\n          size=\"large\"\n        >\n          <Translate pt=\"Enviar\" en=\"Submit\" />\n        </Button>\n      </ButtonContainer>\n\n      <DreamBoardVote\n        user={user}\n        table={table}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n      />\n\n      <AllDreamsClues\n        dreams={dreams}\n        activeItem={activeItem}\n        onActivateItem={activateItem}\n        votes={votes}\n        players={players}\n      />\n\n      <ReadyPlayersBar players={players} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useIsUserReady, useUser, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitVotesAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepMatchDreams } from './StepMatchDreams';\n\nfunction PhaseMatching({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep(0);\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitVotes = useOnSubmitVotesAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.MATCHING}>\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"evaluate\"\n          title={translate('Combine os sonhos', 'Match the dreams')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Selecione os pares de dica e carta.\n                  <br />\n                  Mais de um jogador pode ter o mesmo sonho.\n                </>\n              }\n              en={\n                <>\n                  Match the pairs of cards and clues.\n                  <br />\n                  More than one player may have the same card.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepMatchDreams\n          players={players}\n          user={user}\n          table={state.table}\n          onSubmitVotes={onSubmitVotes}\n          dreams={state.dreams}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseMatching;\n","import { AvatarName, ImageCard } from 'components';\nimport { useCardWidth } from 'hooks';\n\ntype GalleryDreamDisplayProps = {\n  entry: SGalleryEntry;\n  activePlayer: GamePlayer;\n};\n\nexport function GalleryDreamDisplay({ entry, activePlayer }: GalleryDreamDisplayProps) {\n  const cardWidth = useCardWidth(5, 40);\n  return (\n    <div className=\"s-gallery-dream-display\">\n      <div className=\"s-gallery-dream-display__player\">\n        <AvatarName player={activePlayer} />\n      </div>\n      <div className=\"s-gallery-dream-display__theme-container\">\n        <div className=\"s-gallery-dream-display__theme\">{activePlayer.theme.text}:</div>\n        <div className=\"s-gallery-dream-display__dream\">{entry.dream}</div>\n      </div>\n      <div className=\"s-gallery-dream-display__dream-image-container\">\n        <ImageCard\n          imageId={entry.dreamId}\n          cardWidth={cardWidth}\n          className=\"s-gallery-dream-display__dream-image\"\n        />\n      </div>\n    </div>\n  );\n}\n","import { Avatar, StarPoints } from 'components';\nimport { Avatar as AntAvatar } from 'antd';\nimport { useCardWidth } from 'hooks';\nimport { DreamCard } from './DreamCard';\n\ntype GalleryGuessesProps = {\n  entry: SGalleryEntry;\n  players: GamePlayers;\n  correctGuessPoints: number;\n};\n\nexport function GalleryGuesses({ entry, players, correctGuessPoints }: GalleryGuessesProps) {\n  const cardWidth = useCardWidth(8, 20);\n  return (\n    <ul className=\"s-gallery-guesses\">\n      {entry.cards.map((cardEntry) => {\n        return (\n          <li\n            key={`gallery-guess-${cardEntry.cardId}`}\n            className=\"s-gallery-guesses__votes-container\"\n            style={{ width: `${cardWidth + 16}px` }}\n          >\n            <div>\n              <DreamCard\n                cardId={cardEntry.cardId}\n                cardWidth={cardWidth}\n                isDream={cardEntry.isDream}\n                isNightmare={cardEntry.isNightmare}\n                hideBlurButton\n              />\n            </div>\n            <div className=\"s-gallery-guesses__votes\">\n              <AntAvatar.Group>\n                {cardEntry.votes.map((playerId) => {\n                  const player = players[playerId];\n                  return <Avatar id={player.avatarId} alt={player.name} size=\"small\" />;\n                })}\n              </AntAvatar.Group>\n              {cardEntry.votes.length > 0 && cardEntry.isDream && (\n                <StarPoints quantity={correctGuessPoints} keyPrefix={'dream-correct'} hideText />\n              )}\n\n              {cardEntry.votes.length > 0 && cardEntry.isNightmare && (\n                <StarPoints quantity={-1} keyPrefix={'dream-incorrect'} hideText />\n              )}\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { Gallery, Step, Title } from 'components';\nimport { GalleryDreamDisplay } from './GalleryDreamDisplay';\nimport { getAvatarColorById } from 'utils/helpers';\nimport { GalleryGuesses } from './GalleryGuesses';\n\ntype StepResultsProps = {\n  players: GamePlayers;\n  gallery: SGalleryEntry[];\n  activeIndex: number;\n  setActiveIndex: GenericFunction;\n  setStep: GenericFunction;\n  isFirstGalleryRunThrough: boolean;\n  correctGuessPoints: number;\n};\n\nexport function StepResults({\n  players,\n  gallery,\n  activeIndex,\n  setActiveIndex,\n  setStep,\n  isFirstGalleryRunThrough,\n  correctGuessPoints,\n}: StepResultsProps) {\n  const { translate } = useLanguage();\n\n  const galleryEntry = gallery[activeIndex];\n  const activePlayer = players[galleryEntry.playerId];\n\n  return (\n    <Step fullWidth className=\"s-results-step\">\n      <Title>{translate('Resultado', 'Results')}</Title>\n\n      <Gallery\n        players={players}\n        galleryLength={gallery.length}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n        setStep={setStep}\n        disableControls={isFirstGalleryRunThrough}\n        barColor={getAvatarColorById(activePlayer.avatarId)}\n        windowDuration={10}\n      >\n        <GalleryDreamDisplay entry={galleryEntry} activePlayer={activePlayer} />\n        <GalleryGuesses entry={galleryEntry} players={players} correctGuessPoints={correctGuessPoints} />\n      </Gallery>\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\nimport { PictureOutlined } from '@ant-design/icons';\n// Components\nimport { AdminNextRoundButton, RankingBoardStep, RoundsLeftInstruction, Step, Translate } from 'components';\n// import { ScoringRules } from './TextBlobs';\n\ntype StepRankingProps = {\n  players: GamePlayers;\n  ranking: GameRanking;\n  round: GameRound;\n  goToPreviousStep: GenericFunction;\n  setActiveIndex: GenericFunction;\n  isLastRound?: boolean;\n  correctGuessPoints: number;\n};\n\nexport function StepRanking({\n  players,\n  ranking,\n  round,\n  goToPreviousStep,\n  setActiveIndex,\n  isLastRound,\n  correctGuessPoints,\n}: StepRankingProps) {\n  return (\n    <Step>\n      <RankingBoardStep\n        players={players}\n        ranking={ranking}\n        gainedPointsDescriptions={[\n          <Translate pt=\"Votos corretos\" en=\"Correct guesses\" />,\n          <Translate\n            pt=\"Votos corretos em seu sonho por outros jogadores\"\n            en=\"Correct guesses on your dream by other players\"\n          />,\n          <Translate pt=\"Votos em pesadelos\" en=\"Nightmares selected\" />,\n        ]}\n      />\n\n      {/* <PopoverRule content={<ScoringRules />} /> */}\n\n      {round.current < round.total && <RoundsLeftInstruction round={round} />}\n\n      <Button\n        size=\"large\"\n        onClick={() => {\n          goToPreviousStep();\n          setActiveIndex(0);\n        }}\n        icon={<PictureOutlined />}\n      >\n        <Translate pt=\"Ver Galeria De Novo\" en=\"See Gallery Again\" />\n      </Button>\n\n      <AdminNextRoundButton round={round} lastRound={isLastRound} />\n    </Step>\n  );\n}\n","import { useEffect, useState } from 'react';\n// Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Instruction, PhaseAnnouncement, PhaseContainer, StepSwitcher, Translate } from 'components';\nimport { StepResults } from './StepResults';\nimport { StepRanking } from './StepRanking';\n\nfunction PhaseResolution({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, goToPreviousStep, setStep } = useStep(0);\n\n  const isUserReady = useIsUserReady(players, state);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isFirstGalleryRunThrough, setIsFirstGalleryRunThrough] = useState(true);\n\n  // Changes isFirstGalleryRunThrough property which disables controls, after the first gallery run through\n  useEffect(() => {\n    if (isFirstGalleryRunThrough && step > 1) {\n      setIsFirstGalleryRunThrough(false);\n    }\n  }, [step, isFirstGalleryRunThrough]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.SONHOS_PESADELOS.RESOLUTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"countdown\"\n          title={translate('Resultado', 'Results')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={<>Acertos ganham {state.correctGuessPoints} pontos nessa rodada.</>}\n              en={<>Correct guesses get {state.correctGuessPoints} points this round.</>}\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepResults\n          players={players}\n          gallery={state.gallery}\n          activeIndex={activeIndex}\n          setActiveIndex={setActiveIndex}\n          setStep={setStep}\n          isFirstGalleryRunThrough={isFirstGalleryRunThrough}\n          correctGuessPoints={state.correctGuessPoints}\n        />\n\n        {/* Step 2 */}\n        <StepRanking\n          players={players}\n          ranking={state.ranking}\n          round={state.round}\n          goToPreviousStep={goToPreviousStep}\n          setActiveIndex={setActiveIndex}\n          correctGuessPoints={state.correctGuessPoints}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseGameOver from './PhaseGameOver';\nimport PhaseDreamTelling from './PhaseDreamTelling';\nimport PhaseMatching from './PhaseMatching';\nimport PhaseResolution from './PhaseResolution';\n\nfunction SessionSonhosPesadelos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.SONHOS_PESADELOS.DREAM_TELLING:\n        return PhaseDreamTelling;\n      case PHASES.SONHOS_PESADELOS.MATCHING:\n        return PhaseMatching;\n      case PHASES.SONHOS_PESADELOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.SONHOS_PESADELOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionSonhosPesadelos;\n","// This icon file is generated automatically.\nvar PictureOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z\" } }] }, \"name\": \"picture\", \"theme\": \"outlined\" };\nexport default PictureOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PictureOutlinedSvg from \"@ant-design/icons-svg/es/asn/PictureOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PictureOutlined = function PictureOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PictureOutlinedSvg\n  }));\n};\n\nPictureOutlined.displayName = 'PictureOutlined';\nexport default /*#__PURE__*/React.forwardRef(PictureOutlined);"],"names":["state","info","announcementIcon","mockedDreamClues","mockVotes","dreams","table","user","playersIds","shuffle","map","dream","id","filter","playerId","shuffledTable","reduce","acc","index","DreamCard","cardId","cardWidth","isDream","isNightmare","hideBlurButton","baseClass","imageId","className","clsx","DreamBoard","useCardWidth","length","dreamId","nightmareId","style","maxWidth","pt","en","StepTellDream","players","onSubmitDream","isLoading","useLoading","translate","useLanguage","useState","setDream","useMock","onSubmitDreamsClick","fullWidth","header","randomColor","footer","Array","theme","level","fill","join","footerClassName","text","contained","size","onPressEnter","onChange","e","target","value","placeholder","type","disabled","Boolean","onClick","DreamTellingRules","useStep","step","goToNextStep","setStep","useUser","isUserReady","useIsUserReady","request","useAPICall","apiFunction","SONHOS_PESADELOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitDreamAPIRequest","phase","allowedPhase","PHASES","conditions","round","buttonText","onPressButton","time","title","onClose","currentRound","current","hand","AllDreamsClues","activeItem","onActivateItem","votes","liButtonBaseClass","player","letter","LETTERS","cardEntryId","getEntryId","isActive","isUsed","Object","keys","includes","role","color","getColorFromLetter","name","cleanupVotes","entries","dreamEntryKey","cardEntryKey","split","SEPARATOR","DreamBoardVote","ribbonIds","key","getClueId","labels","StepMatchDreams","onSubmitVotes","useVotingMatch","setVotes","activateItem","isVotingComplete","useEffect","userClues","entry","clueEntryId","selectOwnVote","s","randomVotes","randomTable","voteRandomly","getAnimationClass","useOnSubmitVotesAPIRequest","GalleryDreamDisplay","activePlayer","GalleryGuesses","correctGuessPoints","cards","cardEntry","width","avatarId","alt","quantity","keyPrefix","hideText","StepResults","gallery","activeIndex","setActiveIndex","isFirstGalleryRunThrough","galleryEntry","galleryLength","disableControls","barColor","getAvatarColorById","windowDuration","StepRanking","ranking","goToPreviousStep","isLastRound","gainedPointsDescriptions","total","icon","PictureOutlined","lastRound","setIsFirstGalleryRunThrough","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseDreamTelling","PhaseMatching","PhaseResolution","PhaseGameOver","PageError","props","ref","React","AntdIcon","_objectSpread","PictureOutlinedSvg","displayName"],"sourceRoot":""}