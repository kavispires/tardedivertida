{"version":3,"file":"static/js/5495.c7a601c0.chunk.js","mappings":"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","sources":["components/debug/DebugOnly.tsx","components/phases/PhaseAnnouncement.tsx","components/phases/PhaseContainer.tsx","utils/speech.ts","components/phases/lobby/Join.tsx","components/phases/lobby/Waiting.tsx","components/phases/lobby/CloudBackground.tsx","components/phases/PhaseLobby.tsx","components/phases/PhasePlaceholder.tsx","components/phases/PhaseRules.tsx","components/phases/PhaseSetup.tsx","components/phases/PhaseTimerReset.tsx","components/rules/CollapsibleRule.tsx","components/rules/PopoverRule.tsx","components/rules/RulesCarousel.tsx","components/rules/RulesList.tsx","components/rules/RulesModal.tsx","components/drawers/_internal/SectionMeta.tsx","components/drawers/_internal/SectionRankedPlayers.tsx","components/drawers/_internal/BlurOptions.tsx","components/drawers/_internal/SectionSettings.tsx","components/players/PlayersStatusBar.tsx","components/drawers/GameInfoDrawer.tsx","components/session/Session.tsx","hooks/useGamePlayers.ts","hooks/useGameState.ts","hooks/useIdleRedirect.ts","components/steps/Step.tsx","components/steps/StepSwitcher.tsx","hooks/useBlurCards.ts","hooks/useDevFeatures.ts","hooks/useIsUserReady.ts","hooks/useMock.ts","hooks/useStep.ts","hooks/useUser.ts","utils/phases.ts"],"sourcesContent":["import { useDevFeatures } from 'hooks/useDevFeatures';\nimport { ReactNode } from 'react';\n\ntype DebugOnlyProps = {\n  dev?: boolean;\n  devOnly?: boolean;\n  div?: boolean;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n};\n\n/**\n * Wrapper component for information only displayed if the debug mode is on\n * @param props\n * @returns\n */\nexport function DebugOnly({ children, div = false, dev = false, devOnly = false }: DebugOnlyProps) {\n  const { isDebugEnabled, isDevEnv } = useDevFeatures();\n\n  if (devOnly) {\n    if (div && isDevEnv) {\n      return <div>{children}</div>;\n    }\n\n    return isDevEnv ? <> {children}</> : <></>;\n  }\n\n  if ((dev && isDevEnv) || isDebugEnabled) {\n    if (div) {\n      return <div>{children}</div>;\n    }\n    return <>{children}</>;\n  }\n  return <></>;\n}\n","import { ReactNode } from 'react';\nimport clsx from 'clsx';\n// Design Resource\nimport { Button } from 'antd';\n// Hooks\nimport { useTemporarilyHidePlayersBar } from 'hooks/useTemporarilyHidePlayersBar';\n// Utils\nimport { getAnimationClass } from 'utils/helpers';\n// Components\nimport { Translate } from 'components/language';\nimport { Title } from 'components/text';\nimport { TimedButton } from 'components/buttons';\n\ntype PhaseAnnouncementProps = {\n  /**\n   * The title of the game phase\n   */\n  title: ReactNode;\n  /**\n   * The function called when the close button is clicked\n   */\n  onClose: GenericFunction;\n  /**\n   * The icon displayed to illustrate the phase (default: MultitaskIcon)\n   */\n  icon: ReactNode;\n  /**\n   * The Text\n   */\n  buttonText?: ReactNode;\n  /**\n   * Additional content of the announcement, usually a simple instruction\n   */\n  children?: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  /**\n   * Current round number (default 0)\n   */\n  currentRound?: number;\n  /**\n   * Duration to override default duration.\n   * The default duration follows the current round going for 15, 10, then 5 seconds\n   */\n  duration?: number;\n  /**\n   * Prevents user from skipping the the announcement card\n   */\n  unskippable?: boolean;\n  /**\n   * Removes timer from the continue button\n   */\n  withoutTimer?: boolean;\n  /**\n   * In animation for the announcement\n   */\n  animationType?: AnimationType;\n};\n\n/**\n * Screen displayed before any game phase with title and illustration and some simple instruction\n */\nexport function PhaseAnnouncement({\n  buttonText,\n  icon,\n  title,\n  children,\n  currentRound = 0,\n  onClose,\n  className,\n  duration,\n  withoutTimer = false,\n  unskippable,\n  animationType = 'backInDown',\n}: PhaseAnnouncementProps) {\n  useTemporarilyHidePlayersBar();\n  const durationPerRound = [15, 10, 5]?.[currentRound] ?? 5;\n\n  return (\n    <div className={clsx('phase-announcement', getAnimationClass(animationType), className)}>\n      <Title>{title}</Title>\n\n      <span className=\"phase-announcement__icon\">{icon}</span>\n\n      {children}\n\n      {withoutTimer ? (\n        <Button type=\"primary\" onClick={onClose}>\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </Button>\n      ) : (\n        <TimedButton\n          duration={duration || durationPerRound}\n          type=\"text\"\n          onClick={onClose}\n          onExpire={onClose}\n          disabled={unskippable}\n        >\n          <Translate pt=\"Prosseguir\" en=\"Continue\" custom={buttonText} />\n        </TimedButton>\n      )}\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { PageError } from 'components/errors';\n\ntype PhaseContainerProps = {\n  info?: GameInfo;\n  phase?: string;\n  allowedPhase?: string;\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  fullScreen?: boolean;\n  white?: boolean;\n};\n\n/**\n * Wrapping container around a game screen\n * @param props\n * @returns\n */\nexport function PhaseContainer({\n  info,\n  phase,\n  allowedPhase = '',\n  children,\n  className = '',\n  fullScreen = false,\n  white = false,\n}: PhaseContainerProps) {\n  const { translate } = useLanguage();\n  const screenRef = useRef<HTMLScriptElement>(null);\n  const [, setScreenSize] = useGlobalState('screenSize');\n\n  useEffect(() => {\n    if (screenRef.current) {\n      let height = screenRef.current.offsetHeight;\n      let width = screenRef.current.offsetWidth;\n      setScreenSize([width, height]);\n    }\n  }, [screenRef.current?.offsetHeight, screenRef.current?.offsetWidth, setScreenSize]);\n\n  if (!info?.gameName || allowedPhase !== phase) {\n    return <LoadingPage />;\n  }\n\n  if (!phase) {\n    return (\n      <PageError description={translate('Estado do jogo não está correto', 'Game state is not correct')} />\n    );\n  }\n\n  const baseClass = 'phase-container';\n\n  return (\n    <main\n      className={clsx(\n        baseClass,\n        fullScreen && `${baseClass}--full-screen`,\n        white && `${baseClass}--white`,\n        className\n      )}\n      id=\"screen\"\n      ref={screenRef}\n    >\n      {children}\n    </main>\n  );\n}\n","import { getRandomItem } from './helpers';\n\n/**\n * Tells browser to speak out loud given sentence in given language in given volume\n * @param text\n * @param language\n * @param volume\n */\nexport function speak(text: DualLanguageValue, language: Language, volume: number): void {\n  const utterance = new SpeechSynthesisUtterance(text[language]);\n  utterance.lang = language === 'pt' ? 'pt-BR' : 'en-US';\n  utterance.volume = volume;\n  window.speechSynthesis.speak(utterance);\n}\n\n/**\n * Give variety to the lobby greeting message\n * @param name\n * @returns\n */\nexport function getRandomWelcomeMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Bem-vindo, ${name}!`,\n      en: `Welcome, ${name}!`,\n    },\n    {\n      pt: `Olha ele, ou ela, ou elix, aqui!`,\n      en: `Look at you! Ready to play!`,\n    },\n    {\n      pt: `Eba! Você entrou`,\n      en: `Yay, you're in!`,\n    },\n    {\n      pt: `Saudações, ${name}!`,\n      en: `Greetings, ${name}!`,\n    },\n    {\n      pt: `${name} chegou para abalar essa geringonça!`,\n      en: `${name} is here!`,\n    },\n    {\n      pt: `Presente, presidente. ${name} está aqui, fessô!`,\n      en: `You are here, ${name}!`,\n    },\n    {\n      pt: `O jogo vai ser muito mais sensual agora que você entrou`,\n      en: `The game will be so much better now that you're here!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomPositiveReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Pronto! Aguarde os outros jogadores estarem prontos. Boa sorte, ${name}`,\n      en: `Done! Now wait for the other players. Good luck, ${name}`,\n    },\n    {\n      pt: `Pronto! Agora é so esperar esses manés`,\n      en: `Done and Ready to play! Were you born ready?`,\n    },\n    {\n      pt: `Pronto! Cá entre nós, estou torcendo por você!`,\n      en: `Done! And can I tell you a secret? I'm rooting for you!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNeutralReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Agora só resta rezar, ${name}, porque o jogo vai começar mesmo assim!`,\n      en: `Now all you have left is to pray ${name} because the game is starting anyway!`,\n    },\n    {\n      pt: `Tudo bem. Não se preocupe em vencer, já que as chances são bem baixas.`,\n      en: `It's alright. Don't worry too much about winning, there's very little chance anyway.`,\n    },\n    {\n      pt: `Ok, ok, ok. Respire fundo, e vamos lá!`,\n      en: `Okay, okay okay. Take deep breaths and let's go!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n\nexport function getRandomNegativeReadyMessage(name: string): DualLanguageValue {\n  const options = [\n    {\n      pt: `Vixi ${name}, se fudeu então, porque o jogo vai começar mesmo assim!`,\n      en: `Oh ${name}, you are screwed because the game is starting anyway!`,\n    },\n    {\n      pt: `Que carai, eim. As regras foram explicadas super bem. Agora vai assim mesmo!`,\n      en: `W.T.F, the rules were so clear! Well, the game is starting anyway`,\n    },\n    {\n      pt: `Segura o tchan, amarra o tchan, segura o tchan-tchan-tchan-tchan-tchan. Estou cantando pra esquecer que você vai me decepcionar`,\n      en: `Oh my... let's hope for the best!`,\n    },\n  ];\n\n  return getRandomItem(options);\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n// Ant Design Resources\nimport { Alert, Button, Divider, Image, Input, notification, Popconfirm, Tooltip } from 'antd';\nimport { CaretLeftOutlined, CaretRightOutlined, FireFilled, InfoCircleOutlined } from '@ant-design/icons';\n// API & Hooks\nimport { GAME_API } from 'services/adapters';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Services\nimport localStorage from 'services/localStorage';\n// Utils\nimport { AVAILABLE_AVATAR_IDS, AVATARS } from 'utils/avatars';\nimport { PUBLIC_URL, VIEWER_ID } from 'utils/constants';\nimport { getRandomItem, isDevEnv } from 'utils/helpers';\nimport { getRandomWelcomeMessage, speak } from 'utils/speech';\nimport { mockPlayerName } from 'mock/players';\n// Components\nimport { Translate } from 'components/language';\n\nconst randomName = isDevEnv ? mockPlayerName() : undefined;\n\ntype JoinProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Join({ players, info, meta }: JoinProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [, setUserId] = useGlobalState('userId');\n  const [, setUsername] = useGlobalState('username');\n  const [, setUserAvatarId] = useGlobalState('userAvatarId');\n  const [volume, setVolume] = useGlobalState('volume');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n\n  const [availableAvatars, setAvailableAvatars] = useState(AVAILABLE_AVATAR_IDS);\n  const [tempAvatar, setTempAvatar] = useState(getRandomItem(AVAILABLE_AVATAR_IDS));\n  const [tempUsername, setTempUsername] = useState('');\n  const [sameGameId, setSameGameId] = useState(false);\n\n  const [localStorageAvatar, setLocalStorageAvatar] = useState(null);\n\n  // Calculate available avatars and monitor if user chose a non-available one\n  useEffect(() => {\n    const usedAvatars = Object.values(players).reduce((acc: PlainObject, { avatarId, name }) => {\n      if (name !== tempUsername) {\n        acc[avatarId] = true;\n      }\n      return acc;\n    }, {});\n\n    const newAvailableAvatars = AVAILABLE_AVATAR_IDS.filter(\n      (avatarId) => usedAvatars[avatarId] === undefined\n    );\n\n    if (newAvailableAvatars.includes(tempAvatar) && !localStorageAvatar) {\n      setTempAvatar(getRandomItem(newAvailableAvatars));\n    }\n\n    setAvailableAvatars(newAvailableAvatars);\n  }, [players]); // eslint-disable-line\n\n  // Load name and avatarId from localStorage\n  useEffectOnce(() => {\n    const lsAvatarId = localStorage.get('avatarId');\n    const lsUsername = localStorage.get('username');\n    const lsGameId = localStorage.get('gameId');\n\n    if (lsAvatarId && lsUsername) {\n      setTempAvatar(localStorage.get('avatarId'));\n      setTempUsername(localStorage.get('username') ?? '');\n      setLocalStorageAvatar(lsAvatarId);\n\n      if (lsGameId === gameId) {\n        setSameGameId(true);\n      }\n    }\n  });\n\n  const onPreviousAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === 0 ? availableAvatars.length - 1 : index - 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onNextAvatar = useCallback(() => {\n    const index = availableAvatars.indexOf(tempAvatar);\n    const newIndex = index === availableAvatars.length - 1 ? 0 : index + 1;\n    setTempAvatar(availableAvatars[newIndex]);\n  }, [availableAvatars, tempAvatar]);\n\n  const onAddPlayer = useCallback(\n    async (_?: any, vol?: number) => {\n      try {\n        setLoader('add-player', true);\n        const response: PlainObject = await GAME_API.addPlayer({\n          gameId,\n          gameName,\n          playerName: tempUsername,\n          playerAvatarId: tempAvatar,\n        });\n\n        setUserId(response.data.id);\n        setUsername(response.data.name);\n        setUserAvatarId(response.data.avatarId);\n\n        localStorage.set({\n          username: response.data.name,\n          avatarId: response.data.avatarId,\n          gameId,\n        });\n\n        speak(\n          getRandomWelcomeMessage(response.data.name ?? translate('vei', 'babe')),\n          language,\n          vol ?? volume\n        );\n      } catch (e: any) {\n        notification.error({\n          message: translate(\n            'Vixi, o aplicativo encontrou um erro ao tentar te adicionar como jogador',\n            'Oops, the application failed when trying to add you as a player'\n          ),\n          description: JSON.stringify(e.message),\n          placement: 'bottomLeft',\n        });\n        console.error(e);\n      } finally {\n        setLoader('add-player', false);\n      }\n    },\n    [gameId, gameName, tempUsername, tempAvatar] // eslint-disable-line\n  );\n\n  const onEnter = () => {\n    setVolume(0.5);\n    onAddPlayer(null, 0.5);\n  };\n\n  const onEnterWithoutSound = () => {\n    setVolume(0);\n    onAddPlayer(null, 0);\n  };\n\n  const onEnterInput = (e: any) => {\n    if (e.key === 'Enter') {\n      setVolume(0.5);\n      onAddPlayer(null, 0.5);\n    }\n  };\n\n  const onEnterAsViewer = () => {\n    setUserId(VIEWER_ID);\n    setUsername(translate('Espectador', 'Viewer'));\n    setUserAvatarId('N');\n    setIsAdminEnabled(false);\n  };\n\n  return (\n    <div className=\"lobby-join\">\n      <div className=\"lobby-join__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n          className=\"lobby-join__game-image\"\n        />\n        <h1 className=\"lobby-join__title\">\n          {Boolean(localStorageAvatar) ? (\n            <Translate pt=\"Bem-vindo de volta!\" en=\"Welcome Back!\" />\n          ) : (\n            <Translate pt=\"Selecione seu avatar\" en=\"Select your avatar\" />\n          )}\n        </h1>\n        <div className=\"lobby-join__avatar-selection\">\n          <Button type=\"dashed\" onClick={onPreviousAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretLeftOutlined />\n          </Button>\n          <svg viewBox=\"0 0 100 100\" className=\"lobby-join__avatar-selection-image\">\n            <use href={avatars + `#avatar-${tempAvatar}`}></use>\n            <title>{AVATARS[tempAvatar].description[language]}</title>\n          </svg>\n          <Button type=\"dashed\" onClick={onNextAvatar} className=\"lobby-join__avatar-nav-button\">\n            <CaretRightOutlined />\n          </Button>\n        </div>\n        <div className=\"lobby-join__description\">\n          <small>{AVATARS[tempAvatar].description[language]}</small>\n        </div>\n\n        {Boolean(localStorageAvatar) ? (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"success\"\n            message={translate(\n              'Você está de volta! Lembramos seu nome e avatar!',\n              \"You're back! We saved your name and avatar!\"\n            )}\n          />\n        ) : (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"warning\"\n            message={translate(\n              'Se alguém selecionar um mesmo avatar, um avatar aleatório será atribuído à você.',\n              'If you selected the same avatar of someone else, a new random avatar will be given to you.'\n            )}\n          />\n        )}\n\n        {Boolean(sameGameId) && meta.isComplete && (\n          <Alert\n            className=\"lobby-join__avatar-alert\"\n            type=\"error\"\n            message={translate(\n              'Se você está retornando a um jogo, NÃO mude seu apelido! Se o apelido for modificado, você será adicionado como um novo jogador e tudo pode bugar.',\n              'If you are returning to a game, DO NOT change your nickname else the game might crash.'\n            )}\n          />\n        )}\n\n        <Input\n          className=\"lobby-join__name-input\"\n          onChange={(e) => setTempUsername(e.target.value.trim())}\n          placeholder={translate('Digite seu nome', 'Insert your name')}\n          value={tempUsername || randomName}\n          maxLength={10}\n          suffix={\n            <Tooltip title={translate('Máximo de 10 caracteres', '10 characters max')}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          }\n          onKeyPress={onEnterInput}\n        />\n        <Button\n          className=\"lobby-join__join-button\"\n          type=\"primary\"\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnter}\n          loading={isLoading}\n        >\n          <Translate pt=\"Entrar\" en=\"Enter\" />\n        </Button>\n        <Button\n          className=\"lobby-join__join-button-link\"\n          type=\"primary\"\n          ghost\n          disabled={!Boolean(tempUsername) || isLoading}\n          onClick={onEnterWithoutSound}\n          loading={isLoading}\n          size=\"small\"\n        >\n          <Translate pt=\"Entrar sem som\" en=\"Enter without sound\" />\n        </Button>\n\n        {isAdmin && info.tags.includes('audience-mode') && (\n          <>\n            <Divider className=\"game-card__divider\" />\n            <Popconfirm\n              title={\n                <Translate\n                  pt=\"Tem certeza que quer entrar como espectador?\"\n                  en=\"Are you sure you want to join as viewer?\"\n                />\n              }\n              onConfirm={onEnterAsViewer}\n            >\n              <Button\n                className=\"lobby-join__join-button-link\"\n                type=\"primary\"\n                disabled={!Boolean(tempUsername) || isLoading}\n                loading={isLoading}\n                size=\"small\"\n                danger\n                icon={<FireFilled />}\n              >\n                <Translate pt=\"Entrar como espectador\" en=\"Join as viewer\" />\n              </Button>\n            </Popconfirm>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useCallback } from 'react';\n// Ant Design Resources\nimport { Button, Image, message, notification, Typography } from 'antd';\n// API & Hooks\nimport { ADMIN_API } from 'services/adapters';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useLoading } from 'hooks/useLoading';\n// Images\nimport avatars from 'assets/images/avatars.svg';\n// Utils and Resources\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { AdminOnlyContainer } from 'components/admin';\nimport { Translate } from 'components/language';\n\ntype WaitingProps = {\n  info: GameInfo;\n  players: GamePlayers;\n  meta: GameMeta;\n};\n\nexport function Waiting({ info, players }: WaitingProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading, setLoader } = useLoading();\n  const [gameId] = useGlobalState('gameId');\n  const [gameName] = useGlobalState('gameName');\n  const [gameMeta] = useGlobalState('gameMeta');\n\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  const onLockGameAndStart = useCallback(async () => {\n    try {\n      setLoader('lock-game', true);\n      const response: PlainObject = await ADMIN_API.lockGame({\n        gameId,\n        gameName,\n      });\n      if (response.data.isLocked) {\n        message.success(\n          translate('Jogo trancado e iniciado com sucesso!', 'Game locked and initialized successfully')\n        );\n      }\n    } catch (e: any) {\n      notification.error({\n        message: translate(\n          'Vixi, o aplicativo encontrou um erro ao tentar trancar e iniciar o jogo',\n          'Oops, the application found an error while trying to lock and start the game'\n        ),\n        description: JSON.stringify(e.message),\n        placement: 'bottomLeft',\n      });\n      console.error(e);\n    } finally {\n      setLoader('lock-game', false);\n    }\n  }, [gameId, gameName, setLoader, translate]);\n\n  const numPlayers = Object.keys(players).length;\n  return (\n    <div className=\"lobby-waiting\">\n      <div className=\"lobby-waiting__card\">\n        <Image\n          alt={info?.title[language]}\n          src={`${PUBLIC_URL.BANNERS}${info?.gameName}-${language}.jpg`}\n          fallback={`${PUBLIC_URL.BANNERS}/em-breve.jpg`}\n        />\n\n        <h1 className=\"center\">{username || 'Fulano'},</h1>\n        <svg viewBox=\"0 0 100 100\" className=\"lobby-waiting__avatar\">\n          <use href={avatars + `#avatar-${userAvatarId}`}></use>\n        </svg>\n        <h3 className=\"center\">\n          <Translate\n            pt=\"Aguarde os outros jogadores entrarem.\"\n            en=\"Please, wait while other players join...\"\n          />\n        </h3>\n        <AdminOnlyContainer className=\"lobby-waiting__lock-button\" direction=\"vertical\">\n          <Typography.Text className=\"center padding\">\n            <Translate pt=\"Jogadores necessários\" en=\"Players needed\" />: {numPlayers}/{gameMeta.min}\n          </Typography.Text>\n          <Button\n            type=\"primary\"\n            danger\n            onClick={onLockGameAndStart}\n            disabled={isLoading || numPlayers < gameMeta.min}\n            loading={isLoading}\n            block\n          >\n            <Translate pt=\"Trancar e Iniciar Jogo\" en=\"Lock and Start Game\" />\n          </Button>\n        </AdminOnlyContainer>\n      </div>\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n\nfunction SingleCloud({ type, index }: { type: string; index?: number }) {\n  return (\n    <div className={`\"cloud-background__cloud cloud-background__cloud--${index}`}>\n      <img src={`${PUBLIC_URL.CLOUDS}${type}.png`} alt=\"cloud\" />\n    </div>\n  );\n}\n\nconst cloudData = [\n  {\n    backgroundPositionX: '0',\n  },\n  {\n    backgroundPositionX: '-300px',\n  },\n  {\n    backgroundPositionX: '-600px',\n  },\n  {\n    backgroundPositionX: '-900px',\n  },\n  {\n    backgroundPositionX: '-1200px',\n  },\n];\n\nfunction MultiCloud({ type, index }: { type: string; index: number }) {\n  return (\n    <div\n      className=\"cloud-background__cloud\"\n      style={{\n        backgroundImage: `url('${PUBLIC_URL.CLOUDS}${type}.png')`,\n        ...cloudData[index],\n      }}\n    ></div>\n  );\n}\n\nfunction getCloudComponent(type: string) {\n  if (type) {\n    const plural = type.split('-cloud')?.[1];\n\n    if (plural === 's') {\n      return MultiCloud;\n    }\n  }\n  return SingleCloud;\n}\n\ntype CloudBackgroundProps = {\n  cloudType?: string;\n  backgroundColor?: string;\n};\n\nexport function CloudBackground({ cloudType = 'cloud', backgroundColor }: CloudBackgroundProps) {\n  const CloudTypeComponent = getCloudComponent(cloudType);\n\n  const baseClass = 'cloud-background';\n\n  return (\n    <div\n      className={clsx(baseClass, `${baseClass}--${cloudType}`)}\n      style={backgroundColor ? { backgroundColor } : {}}\n    >\n      <div className=\"cloud-background__animation-0\">\n        <CloudTypeComponent index={0} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-1\">\n        <CloudTypeComponent index={1} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-2\">\n        <CloudTypeComponent index={2} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-3\">\n        <CloudTypeComponent index={3} type={cloudType} />\n      </div>\n\n      <div className=\"cloud-background__animation-4\">\n        <CloudTypeComponent index={4} type={cloudType} />\n      </div>\n    </div>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { PhaseContainer } from 'components/phases';\nimport { AvatarEntry } from 'components/avatars';\nimport { Join } from './lobby/Join';\nimport { Waiting } from './lobby/Waiting';\nimport { CloudBackground } from './lobby/CloudBackground';\nimport { orderBy } from 'lodash';\nimport { AdminMenuDrawer } from 'components/admin';\n\ntype PhaseLobbyProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  meta: GameMeta;\n};\n\nexport function PhaseLobby({ players, info, meta }: PhaseLobbyProps) {\n  const [userId] = useGlobalState('userId');\n  const [username] = useGlobalState('username');\n  const [userAvatarId] = useGlobalState('userAvatarId');\n\n  return (\n    <PhaseContainer phase=\"LOBBY\" allowedPhase={PHASES.DEFAULT.LOBBY} info={info}>\n      <div className=\"lobby__room\">\n        {orderBy(Object.values(players), 'updatedAt').map((player, index) => (\n          <AvatarEntry\n            key={player.name}\n            id={player.avatarId}\n            name={player.name}\n            className={`lobby__seat lobby__seat--${index}`}\n            animate\n          />\n        ))}\n\n        {userId && username && userAvatarId !== undefined ? (\n          <Waiting players={players} info={info} meta={meta} />\n        ) : (\n          <Join players={players} info={info} meta={meta} />\n        )}\n      </div>\n\n      <AdminMenuDrawer state={{ phase: 'LOBBY', round: { current: 0, total: 0 } }} players={players} />\n      <CloudBackground\n        cloudType={info?.appearance?.clouds}\n        backgroundColor={info?.appearance?.backgroundColor}\n      />\n    </PhaseContainer>\n  );\n}\n","// Components\nimport { PhaseContainer } from './index';\n\ntype PhasePlaceholderProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhasePlaceholder({ info, state }: PhasePlaceholderProps) {\n  return (\n    <PhaseContainer info={info} phase=\"ANY\" allowedPhase=\"ANY\" className=\"phase-placeholder\">\n      {state?.phase ?? 'Unknown Phase'}\n    </PhaseContainer>\n  );\n}\n","// Ant Design Resources\nimport { Button, Layout, Space, Typography } from 'antd';\nimport { CheckCircleFilled, MehFilled, RobotFilled, SmileFilled } from '@ant-design/icons';\n// Utils\nimport { GAME_API } from 'services/adapters';\nimport {\n  getRandomNegativeReadyMessage,\n  getRandomNeutralReadyMessage,\n  getRandomPositiveReadyMessage,\n  speak,\n} from 'utils/speech';\n// Hooks\nimport { useLoading } from 'hooks/useLoading';\nimport { useIsUserReady } from 'hooks/useIsUserReady';\nimport { useAPICall } from 'hooks/useAPICall';\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useMock } from 'hooks/useMock';\nimport { useUser } from 'hooks/useUser';\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Components\nimport { LoadingPage } from 'components/loaders';\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from '../rules';\n\ntype PhaseRulesProps = {\n  players: GamePlayers;\n  info: GameInfo;\n};\n\nexport function PhaseRules({ players, info }: PhaseRulesProps) {\n  const { isLoading } = useLoading();\n  const { language, translate } = useLanguage();\n  const isUserReady = useIsUserReady(players);\n  const user = useUser(players);\n  const [volume] = useGlobalState('volume');\n\n  const errorMessage = translate(\n    'Vixi, o aplicativo encontrou um erro ao tentar continuar',\n    'Oh no! The application found an error when trying to continue'\n  );\n\n  const onBeReady = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomPositiveReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyIDK = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Pronto! Aguarde os outros jogadores estarem prontos',\n      'Done! Now wait for the other players'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNeutralReadyMessage(user.name), language, volume);\n    },\n  });\n\n  const onBeReadyQue = useAPICall({\n    apiFunction: GAME_API.makePlayerReady,\n    actionName: 'be-ready',\n    successMessage: translate(\n      'Vixi, se fudeu então, porque o jogo vai começar!',\n      'Sorry, you are screwed because the game is starting anyway!'\n    ),\n    errorMessage,\n    onSuccess: () => {\n      speak(getRandomNegativeReadyMessage(user.name), language, volume);\n    },\n  });\n\n  // DEV: Auto-ready\n  useMock(() => onBeReady({}), []);\n\n  if (!info?.gameName) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <Layout.Content className=\"phase-rules\">\n      <Typography.Title className=\"center\">\n        <Translate pt=\"Regras do Jogo\" en=\"Game Rules\" />\n      </Typography.Title>\n\n      <RulesCarousel info={info} className=\"phase-rules__carousel\" ruleClass=\"phase-rules__rule\" />\n\n      <Space className=\"phase-rules__actions\" wrap>\n        <Button\n          type=\"primary\"\n          icon={isUserReady ? <CheckCircleFilled /> : <SmileFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReady({})}\n          loading={isLoading}\n        >\n          <Translate\n            pt=\"Entendi tudo e estou pronto para jogar!\"\n            en=\"I understood everything and I'm ready to play!\"\n          />\n        </Button>\n        <Button\n          icon={isUserReady ? <CheckCircleFilled /> : <MehFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyIDK({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Não entendi nada, mas vamos lá!\" en=\"I don't get it but let's go!\" />\n        </Button>\n        <Button\n          type=\"primary\"\n          danger\n          icon={isUserReady ? <CheckCircleFilled /> : <RobotFilled />}\n          disabled={isLoading || isUserReady}\n          onClick={() => onBeReadyQue({})}\n          loading={isLoading}\n        >\n          <Translate pt=\"Quê?\" en=\"What?\" />\n        </Button>\n      </Space>\n    </Layout.Content>\n  );\n}\n","// Constants\nimport { PHASES } from 'utils/phases';\n// Components\nimport { AnimatedGearIcon } from 'components/icons/AnimatedGearIcon';\nimport { Translate } from 'components/language';\nimport { Instruction, Title } from 'components/text';\nimport { PhaseContainer } from './PhaseContainer';\n\ntype PhaseSetupProps = {\n  info: GameInfo;\n  state: GameState;\n};\n\nexport function PhaseSetup({ info, state }: PhaseSetupProps) {\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.DEFAULT.SETUP} className=\"setup\">\n      <div className=\"phase-announcement\">\n        <Title>\n          <Translate pt=\"Preparando o jogo...\" en=\"Setting up....\" />\n        </Title>\n\n        <AnimatedGearIcon className=\"phase-announcement__icon\" />\n\n        <Instruction>\n          <Translate pt=\"Aguarde um momento\" en=\"Just a moment\" />\n        </Instruction>\n      </div>\n    </PhaseContainer>\n  );\n}\n","import { useEffectOnce } from 'react-use';\n\ntype PhaseTimerResetProps = {\n  goToNextStep: GenericFunction;\n};\n\n/**\n * Component to be place in between sequential PhaseAnnouncement to reset the automatic timer\n * @param props\n * @returns\n */\nexport function PhaseTimerReset({ goToNextStep }: PhaseTimerResetProps) {\n  useEffectOnce(() => {\n    const delay = () => new Promise((res) => setTimeout(res, 100));\n    const next = async () => {\n      await delay();\n      goToNextStep();\n    };\n\n    next();\n  });\n\n  return <div></div>;\n}\n","// Ant Design Resources\nimport { Collapse } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Instruction } from 'components/text';\nimport { ReactNode } from 'react';\n\ntype CollapsibleRuleProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * The title of the panel (default: Rules/Regras)\n   */\n  title?: string;\n};\nexport function CollapsibleRule({ children, title }: CollapsibleRuleProps): JSX.Element {\n  const { translate } = useLanguage();\n\n  return (\n    <Instruction contained>\n      <Collapse ghost>\n        <Collapse.Panel header={translate('Regras', 'Rules', title)} key=\"1\">\n          {children}\n        </Collapse.Panel>\n      </Collapse>\n    </Instruction>\n  );\n}\n","import { ReactNode } from 'react';\n// Ant Design Resources\nimport { ReadOutlined } from '@ant-design/icons';\n// Components\nimport { Translate } from 'components/language';\nimport { FixedMenuButton } from 'components/buttons';\n\ntype PopoverRuleProps = {\n  /**\n   * The rules themselves\n   */\n  content: ReactNode;\n  /**\n   * A custom label other than rules/regras\n   */\n  label?: ReactNode;\n  /**\n   * If label should be displayed\n   */\n  showLabel?: boolean;\n};\n\nexport function PopoverRule({ content, label, showLabel = false }: PopoverRuleProps): JSX.Element {\n  return (\n    <FixedMenuButton\n      type=\"popover\"\n      position={0}\n      icon={<ReadOutlined />}\n      content={content}\n      label={label || <Translate pt=\" Regras\" en=\" Rules\" />}\n      showLabel={showLabel}\n      buttonProps={{\n        type: 'primary',\n      }}\n    />\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Typography, Image, Carousel, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Constants\nimport { PUBLIC_URL } from 'utils/constants';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\n\ntype RulesCarouselProps = {\n  info: GameInfo;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n  ruleClass?: string;\n};\n\nexport function RulesCarousel({ info, className = '', ruleClass = '' }: RulesCarouselProps): JSX.Element {\n  const { language } = useLanguage();\n  const settings = {\n    prevArrow: (\n      <Button>\n        <DoubleLeftOutlined className=\"rules-carousel__nav rules-carousel__nav--left\" />\n      </Button>\n    ),\n    nextArrow: (\n      <Button>\n        <DoubleRightOutlined className=\"rules-carousel__nav rules-carousel__nav--right\" />\n      </Button>\n    ),\n  };\n\n  return (\n    <Carousel\n      className={clsx('rules-carousel', className)}\n      autoplay\n      autoplaySpeed={15000}\n      arrows\n      {...settings}\n    >\n      {info.rules[language].map((rule, index) => (\n        <div className={clsx('rules-carousel__rule', ruleClass)} key={rule}>\n          <span className=\"rules-carousel__rule-number\">{index + 1}</span>\n\n          <Image\n            className=\"rules-carousel__image\"\n            src={\n              index === 0\n                ? `${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`\n                : `${PUBLIC_URL.RULES}game-rule-${info.gameName}-${index}.jpg`\n            }\n            fallback={`${PUBLIC_URL.RULES}game-rule-not-found.jpg`}\n            alt={rule}\n          />\n          <Typography.Paragraph className=\"rules-carousel__rule-text\">{rule}</Typography.Paragraph>\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype RulesListProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function RulesList({ children, className = '' }: RulesListProps): JSX.Element {\n  return <ul className={clsx('rules-list', className)}>{children}</ul>;\n}\n","import { useState } from 'react';\n// Ant Design Resources\nimport { Button, ButtonProps, Modal } from 'antd';\nimport { ReadOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Components\nimport { Translate } from 'components/language';\nimport { RulesCarousel } from 'components/rules';\n\ntype RulesModalProps = {\n  gameInfo: GameInfo;\n  buttonProps?: ButtonProps;\n};\n\nexport function RulesModal({ gameInfo, buttonProps }: RulesModalProps): JSX.Element {\n  const { language, translate } = useLanguage();\n  const [isVisible, setVisibility] = useState(false);\n\n  const onCloseModal = () => {\n    setVisibility(false);\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={() => setVisibility(true)} icon={<ReadOutlined />} {...buttonProps}>\n        <Translate pt=\"Regras\" en=\"Rules\" />\n      </Button>\n      {isVisible && (\n        <Modal\n          title={`${translate('Regras', 'Rules')}: ${gameInfo.title[language]}`}\n          open={isVisible}\n          onCancel={onCloseModal}\n          className=\"rules-modal\"\n          footer={[\n            <Button key=\"close\" onClick={onCloseModal}>\n              <Translate pt=\"Fechar\" en=\"Close\" />\n            </Button>,\n          ]}\n        >\n          <RulesCarousel info={gameInfo} />\n        </Modal>\n      )}\n    </>\n  );\n}\n","// Ant Design Resources\nimport { Avatar as AntAvatar } from 'antd';\n// Components\nimport { Translate } from 'components/language';\n\ntype SectionMetaProps = {\n  round: GameRound;\n  groupScore?: number;\n};\n\nexport function SectionMeta({ round, groupScore }: SectionMetaProps) {\n  return (\n    <ul className=\"game-info-drawer__meta\">\n      <li>\n        <div className=\"game-info-drawer__label-inline\">\n          <Translate pt=\"Rodada:\" en=\"Round:\" />\n        </div>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.current}\n        </AntAvatar>\n        <span className=\"game-info-drawer__inline-separator\">\n          <Translate pt=\"de\" en=\"out of\" />\n        </span>\n        <AntAvatar className=\"game-info-drawer__round\" size=\"small\">\n          {round.total}\n        </AntAvatar>\n      </li>\n\n      {Boolean(groupScore) && (\n        <li>\n          <div className=\"game-info-drawer__label-inline\">\n            <Translate pt=\"Pontos:\" en=\"Points:\" />\n          </div>\n          <AntAvatar\n            className=\"game-info-drawer__round\"\n            size=\"default\"\n            style={{ backgroundColor: 'gold', color: 'black' }}\n          >\n            {groupScore}\n          </AntAvatar>\n        </li>\n      )}\n    </ul>\n  );\n}\n","import { useMemo } from 'react';\nimport { orderBy } from 'lodash';\n// Ant Design Resources\nimport { Badge, Tag } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\nimport { useUser } from 'hooks/useUser';\n// Utils\nimport { AVATARS } from 'utils/avatars';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype SectionRankedPlayersProps = {\n  players: GamePlayers;\n};\n\nexport function SectionRankedPlayers({ players }: SectionRankedPlayersProps) {\n  const { language } = useLanguage();\n  const user = useUser(players);\n\n  const rankedPlayers = useMemo(\n    () => orderBy(Object.values(players), ['score', 'name'], ['desc', 'asc']),\n    [players]\n  );\n  return (\n    <ul>\n      {rankedPlayers.map((player, index) => {\n        return (\n          <div className=\"game-info-drawer__ranked-player\" key={`ranked-${player.name}`}>\n            {index + 1}.{' '}\n            <Badge count={player.score} className=\"game-info-drawer__avatar-with-badge\">\n              <Avatar id={player.avatarId} shape=\"square\" />\n            </Badge>\n            {player.name}, {AVATARS[player.avatarId].description[language]}\n            {player.id === user.id && (\n              <Tag color={AVATARS[player.avatarId].color} className=\"game-info-drawer__avatar-tag\">\n                <Translate pt=\"VOCÊ\" en=\"YOU\" />\n              </Tag>\n            )}\n          </div>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n// Ant Design Resource\nimport { Alert, Button, Checkbox, message, Spin } from 'antd';\n// Hooks\nimport { useBlurCards } from 'hooks/useBlurCards';\n// Components\nimport { Translate } from 'components/language';\n\nexport function BlurOptions() {\n  const { blurCard } = useBlurCards();\n\n  const {\n    loading,\n    error,\n    value: data,\n  } = useAsync(async () => {\n    const response = await fetch(`${process.env.REACT_APP_TDI_DATA_URL}/credo.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const [selected, setSelected] = useState<BooleanDictionary>({\n    aliens: false,\n    cockroaches: false,\n    scorpions: false,\n    snakes: false,\n    spiders: false,\n  });\n\n  const onUpdateSelected = (key: string, value: boolean) => {\n    setSelected((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const onBlurSelected = () => {\n    // Gather all ids of all trues\n    const selectedGroups: string[][] = [];\n    Object.keys(selected).forEach((key) => {\n      if (selected[key] && data[key]) {\n        selectedGroups.push(data[key]);\n      }\n    });\n\n    selectedGroups.flat().forEach(blurCard);\n    message.success(<Translate pt=\"Cartas 'credadas' com sucesso\" en=\"Cards blurred successfully\" />);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"blur-options\">\n        <Spin />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"blur-options\">\n        <Alert\n          type=\"error\"\n          message={\n            <Translate\n              pt=\"Servidor falhou ao tentar baixar a lista de cartas credo\"\n              en=\"Server failed while trying to fetch blur cards list\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"blur-options\">\n      <p>\n        <Translate\n          pt=\"Você pode embaçar cartas automaticamente por tema\"\n          en=\"You may blur cards automatically by theme\"\n        />\n        :\n      </p>\n\n      <Checkbox\n        checked={selected.aliens}\n        disabled={!Boolean(data.aliens)}\n        onChange={(e) => onUpdateSelected('aliens', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"alienígenas\" en=\"aliens\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.cockroaches}\n        disabled={!Boolean(data.cockroaches)}\n        onChange={(e) => onUpdateSelected('cockroaches', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"baratas\" en=\"cockroaches\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.scorpions}\n        disabled={!Boolean(data.scorpions)}\n        onChange={(e) => onUpdateSelected('scorpions', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"escorpiões\" en=\"scorpions\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.snakes}\n        disabled={!Boolean(data.snakes)}\n        onChange={(e) => onUpdateSelected('snakes', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"cobras\" en=\"snakes\" />\n      </Checkbox>\n\n      <Checkbox\n        checked={selected.spiders}\n        disabled={!Boolean(data.spiders)}\n        onChange={(e) => onUpdateSelected('spiders', e.target.checked)}\n        className=\"blur-options__checkbox\"\n      >\n        <Translate pt=\"aranhas\" en=\"spiders\" />\n      </Checkbox>\n\n      <Button type=\"primary\" ghost size=\"small\" onClick={onBlurSelected}>\n        <Translate pt=\"Credar selecionados\" en=\"Blur all selected\" />\n      </Button>\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Button, Switch, Tooltip } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n// Hooks\nimport { useDevFeatures } from 'hooks/useDevFeatures';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useLocalStorage } from 'hooks/useLocalStorage';\n// Components\nimport { LanguageSwitch, Translate } from 'components/language';\nimport { BlurOptions } from './BlurOptions';\n\nexport function SectionSettings() {\n  const [blurEnabled, setBlurEnabled] = useGlobalState('blurEnabled');\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [isAdminEnabled, setIsAdminEnabled] = useGlobalState('isAdminEnabled');\n  const [volume, setVolume] = useGlobalState('volume');\n  const { isDebugEnabled, toggleDevFeatures } = useDevFeatures();\n  const [, setLocalStorage] = useLocalStorage();\n\n  const onBlurSwitchClick = (value: boolean) => {\n    setBlurEnabled(value);\n    setLocalStorage({ blurEnabled: value });\n  };\n\n  const onSoundSwitchClick = (value: boolean) => {\n    setVolume(value ? 0.5 : 0);\n    setLocalStorage({ volume: value ? 0.5 : 0 });\n  };\n\n  return (\n    <div className=\"game-info-drawer__section-settings\">\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Idioma\" en=\"Language\" />{' '}\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Mudar língua do aplicativo, as cartas do jogo continuarão em sua língua original\"\n                en=\"Change app language, the game cards will remain in its original language\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <LanguageSwitch />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Som\" en=\"Sound\" />\n          <Tooltip\n            title={<Translate pt=\"Muda ou desmuda sons no aplicativo\" en=\"Mute/Unmute sounds in the app\" />}\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={volume > 0}\n          onClick={onSoundSwitchClick}\n        />\n      </div>\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          <Translate pt=\"Botão Credo\" en=\"Blur Button\" />\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Adiciona um botão em todas Cartas-imagem para embaça-las caso você tenha alguma fobia\"\n                en=\"Adds a button to every Image Card to blur them in case you have any phobia\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={blurEnabled}\n          onClick={onBlurSwitchClick}\n        />\n      </div>\n\n      {blurEnabled && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <BlurOptions />\n        </div>\n      )}\n\n      <div className=\"game-info-drawer__settings-entry\">\n        <div className=\"game-info-drawer__switch-label\">\n          Debug\n          <Tooltip\n            title={\n              <Translate\n                pt=\"Ativa coisas para ajudar o desenvolvedor a encontrar error. Use apenas quando instruído\"\n                en=\"Activate debug mode. Only turn on when instructed\"\n              />\n            }\n          >\n            <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n          </Tooltip>\n        </div>\n\n        <Switch\n          checkedChildren=\"on\"\n          unCheckedChildren=\"off\"\n          checked={isDebugEnabled}\n          onClick={toggleDevFeatures}\n        />\n      </div>\n\n      {isAdmin && (\n        <div className=\"game-info-drawer__settings-entry\">\n          <div className=\"game-info-drawer__switch-label\">\n            Admin\n            <Tooltip title={<Translate pt=\"Ativa recursos para o administrador\" en=\"Activate admin mode\" />}>\n              <Button type=\"text\" shape=\"circle\" icon={<InfoCircleOutlined />} size=\"small\" />\n            </Tooltip>\n          </div>\n\n          <Switch\n            checkedChildren=\"on\"\n            unCheckedChildren=\"off\"\n            checked={isAdminEnabled}\n            onClick={() => setIsAdminEnabled((s) => !s)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Badge } from 'antd';\n// Hooks\nimport { useGlobalState } from 'hooks/useGlobalState';\n// Utils\nimport { getAnimationClass, sortPlayers } from 'utils/helpers';\n// Components\nimport { Avatar } from 'components/avatars';\nimport { Translate } from 'components/language';\n\ntype PlayersStatusBarProps = {\n  players: GamePlayers;\n  onClick: GenericFunction;\n};\n\nexport function PlayersStatusBar({ players, onClick }: PlayersStatusBarProps) {\n  const [showPlayersBar] = useGlobalState('showPlayersBar');\n\n  if (!showPlayersBar) {\n    return <></>;\n  }\n\n  return (\n    <button onClick={onClick} className={clsx('players-status-bar', getAnimationClass('slideInRight'))}>\n      <ul className=\"players-status-bar__list\">\n        {sortPlayers(players).map((player) => {\n          return (\n            <li className=\"players-status-bar__player\" key={`players-status-bar-${player.id}`}>\n              <Badge dot color={player.ready ? 'green' : 'gray'}>\n                <Avatar\n                  id={player.avatarId}\n                  alt={player.name}\n                  size=\"small\"\n                  className={clsx(!player.ready && 'players-status-bar__avatar-not-ready')}\n                />\n              </Badge>\n              {player.ready && (\n                <div className=\"players-status-bar__ready\">\n                  <div className=\"players-status-bar__ready-speech\">\n                    <Translate pt=\"Pronto!\" en=\"I'm ready!\" />\n                  </div>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </button>\n  );\n}\n","import { useToggle } from 'react-use';\n// Ant Design Resources\nimport { Button, Divider, Drawer, Image, Space } from 'antd';\nimport { FireOutlined, SettingOutlined } from '@ant-design/icons';\n// Hooks\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport { PUBLIC_URL } from 'utils/constants';\n// Components\nimport { SectionMeta } from './_internal/SectionMeta';\nimport { SectionRankedPlayers } from './_internal/SectionRankedPlayers';\nimport { SectionSettings } from './_internal/SectionSettings';\nimport { DebugOnly } from 'components/debug';\nimport { RulesModal } from 'components/rules';\nimport { Translate } from 'components/language';\nimport { PlayersStatusBar } from '../players/PlayersStatusBar';\nimport { useNavigate } from 'react-router-dom';\nimport { useGlobalState } from 'hooks/useGlobalState';\n\ntype GameInfoDrawerProps = {\n  players: GamePlayers;\n  info: GameInfo;\n  state: GameState;\n  userId: string;\n};\n\nexport function GameInfoDrawer({ players, state, info, userId }: GameInfoDrawerProps) {\n  const { language } = useLanguage();\n  const [isDrawerOpen, toggleDrawer] = useToggle(false);\n  const [isSettingsOpen, toggleSettingsDrawer] = useToggle(false);\n  const navigate = useNavigate();\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  if (state.phase === 'LOBBY') {\n    return <></>;\n  }\n\n  return (\n    <>\n      <PlayersStatusBar players={players} onClick={toggleDrawer} />\n      <div className=\"game-info-drawer\">\n        <Button size=\"small\" className=\"game-info-drawer__button\" onClick={toggleDrawer}>\n          {info.title?.[language] ?? '?'} <SettingOutlined />\n          <DebugOnly devOnly>{userId}</DebugOnly>\n        </Button>\n\n        <Drawer\n          title={info?.title?.[language]}\n          placement=\"right\"\n          closable={true}\n          onClose={toggleDrawer}\n          open={isDrawerOpen}\n        >\n          <Image\n            alt={info?.title?.[language]}\n            src={`${PUBLIC_URL.BANNERS}${info.gameName}-${language}.jpg`}\n            fallback={`${PUBLIC_URL.BANNERS}/em-breve-${language}.jpg`}\n            preview={false}\n          />\n\n          <Divider />\n\n          <Space>\n            <Button type=\"default\" onClick={() => toggleSettingsDrawer(true)} icon={<SettingOutlined />}>\n              <Translate pt=\"Configurações\" en=\"Settings\" />\n            </Button>\n            <RulesModal gameInfo={info} />\n            <Drawer\n              title={<Translate pt=\"Configurações\" en=\"Settings\" />}\n              width={200}\n              closable={false}\n              onClose={toggleSettingsDrawer}\n              open={isSettingsOpen}\n            >\n              <SectionSettings />\n            </Drawer>\n            {isAdmin && (\n              <Button type=\"default\" danger onClick={() => navigate('/hub')} icon={<FireOutlined />}>\n                Hub\n              </Button>\n            )}\n          </Space>\n\n          <Divider />\n\n          <SectionMeta round={state?.round || 0} groupScore={state?.groupScore} />\n\n          <Divider />\n\n          <SectionRankedPlayers players={players} />\n        </Drawer>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useTitle } from 'react-use';\n// Hooks\nimport { useGameState } from 'hooks/useGameState';\nimport { useGlobalState } from 'hooks/useGlobalState';\nimport { useGamePlayers } from 'hooks/useGamePlayers';\nimport { useLanguage } from 'hooks/useLanguage';\n// Utils\nimport GAME_LIST from 'utils/info';\nimport { isDevEnv } from 'utils/helpers';\n// Components\nimport { PhaseLobby } from 'components/phases';\nimport { GameInfoDrawer } from 'components/drawers';\nimport { AdminMenuDrawer } from 'components/admin';\nimport { useIdleRedirect } from 'hooks/useIdleRedirect';\n\ntype SessionProps = {\n  /**\n   * The id of the game\n   */\n  gameId: GameId;\n  /**\n   * The game collection name\n   */\n  gameCollection: GameName;\n  /**\n   * The active component to be rendered, usually a Phase... component\n   */\n  getActiveComponent: (args: any) => any;\n  /**\n   * The class to replace the background gradient\n   */\n  backgroundClassName?: string;\n};\n\nexport function Session({ gameId, gameCollection, getActiveComponent, backgroundClassName }: SessionProps) {\n  const { language } = useLanguage();\n  const players = useGamePlayers(gameId, gameCollection);\n  const state = useGameState(gameId, gameCollection);\n  const [userId] = useGlobalState('userId');\n  const [gameMeta] = useGlobalState('gameMeta');\n  const [info, setInfo] = useState<any>({});\n  const gameName = info?.title ?? '';\n\n  useIdleRedirect();\n\n  useTitle(`${gameName ? `${gameName[language]} | ` : ''}Tarde Divertida`);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.table(players);\n    }\n  }, [players, state]);\n\n  useEffect(() => {\n    if (isDevEnv) {\n      console.info({ state });\n    }\n  }, [state]);\n\n  // Update game description as the gameId comes in\n  useEffect(() => {\n    setInfo(gameCollection ? GAME_LIST[gameCollection] : {});\n  }, [gameCollection]);\n\n  // Colorize background\n  useEffect(() => {\n    if (backgroundClassName) {\n      const appElement = document.getElementById('app');\n      if (appElement) {\n        appElement.classList.add(backgroundClassName);\n      }\n    }\n    return () => {\n      const appElement = document.getElementById('app');\n      appElement?.classList.remove(backgroundClassName ?? '');\n    };\n  }, [backgroundClassName]);\n\n  if (!userId) {\n    return <PhaseLobby players={players} info={info} meta={gameMeta} />;\n  }\n\n  const ActiveComponent: any = getActiveComponent(state.phase);\n\n  return (\n    <>\n      <GameInfoDrawer players={players} state={state} info={info} userId={userId} />\n      <ActiveComponent players={players} state={state} info={info} meta={gameMeta} />\n      <AdminMenuDrawer state={state} players={players} />\n    </>\n  );\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGamePlayers(gameId: GameId, gameName: GameName): Players | {} {\n  const docPath = `games/${gameName}/${gameId}/players`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the players document',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing players...');\n  }\n\n  return snapshot?.data() ?? {};\n}\n","import { notification } from 'antd';\nimport { useDocument } from 'react-firebase-hooks/firestore';\nimport { doc } from 'firebase/firestore';\n// Services\nimport { firestore } from 'services/firebase';\n\nexport function useGameState(gameId: GameId, gameName: GameName): GameState {\n  const docPath = `games/${gameName}/${gameId}/state`;\n  const [snapshot, loading, error] = useDocument(doc(firestore, docPath), {\n    snapshotListenOptions: { includeMetadataChanges: true },\n  });\n\n  if (error) {\n    notification.error({\n      message: 'The application found an error while trying to update the game state',\n      description: JSON.stringify(error),\n      placement: 'bottomLeft',\n    });\n    console.error(error);\n  }\n\n  if (loading) {\n    console.count('Refreshing state...');\n  }\n\n  return snapshot?.data() as GameState;\n}\n","import { notification } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIdle } from 'react-use';\nimport { useLanguage } from './useLanguage';\n\nexport function useIdleRedirect() {\n  const navigate = useNavigate();\n  const { translate } = useLanguage();\n\n  // Considers a player idle after 15 minutes of inactivity\n  const isIdle = useIdle(9e5);\n\n  useEffect(() => {\n    if (isIdle) {\n      notification.warning({\n        message: translate(\n          'Página parada por um longo tempo, redirecionando...',\n          'The page has been idle for too long, redirecting...'\n        ),\n        duration: 5,\n        onClose: () => navigate('/'),\n        placement: 'top',\n      });\n    }\n  }, [isIdle, navigate, translate]);\n}\n","import clsx from 'clsx';\nimport { ReactNode } from 'react';\n\ntype StepProps = {\n  /**\n   * The content of the component\n   */\n  children: ReactNode;\n  fullWidth?: boolean;\n  /**\n   * Optional custom class name\n   */\n  className?: string;\n};\n\nexport function Step({ children, fullWidth = false, className }: StepProps) {\n  return <div className={clsx('step', fullWidth && 'step--full-width', className)}>{children}</div>;\n}\n","// Components\nimport { WaitingRoom } from 'components/players';\nimport { Loading } from 'components/loaders';\nimport { Translate } from 'components/language';\n\nconst getWaitingRoomInstruction = (kind: string) => {\n  switch (kind) {\n    case 'SERVER':\n      return (\n        <Translate pt=\"Aguardando o servidor dar sinal de vida\" en=\"Waiting for the server to resuscitate\" />\n      );\n    case 'PLAYERS':\n      return (\n        <Translate\n          pt=\"Vamos aguardar enquanto os outros jogadores terminam!\"\n          en=\"Please wait while other players finish!\"\n        />\n      );\n\n    default:\n      return <Translate pt=\"Aguardando algo acontecer...\" en=\"Waiting for something...\" />;\n  }\n};\n\ntype StepSwitcherProps = {\n  /**\n   * The content of the component\n   */\n  children: JSX.Element[];\n  step: number;\n  conditions?: boolean[];\n  players?: GamePlayers;\n  waitingRoomInstructionType?: 'SERVER' | 'PLAYERS';\n  waitingRoomInstruction?: any;\n  waitingRoomContent?: any;\n};\n\nexport function StepSwitcher({\n  children,\n  step,\n  conditions,\n  players,\n  waitingRoomInstruction,\n  waitingRoomInstructionType = 'PLAYERS',\n  waitingRoomContent = '',\n}: StepSwitcherProps) {\n  if (!players) console.warn('SetSwitcher is being used without `players`, please add it.');\n\n  if (players && step >= children.length) {\n    return (\n      <WaitingRoom\n        players={players}\n        title={<Translate pt=\"Pronto!\" en=\"Done!\" />}\n        instruction={waitingRoomInstruction ?? getWaitingRoomInstruction(waitingRoomInstructionType)}\n      >\n        {waitingRoomContent}\n      </WaitingRoom>\n    );\n  }\n\n  if (!children[step]) {\n    return <Loading />;\n  }\n\n  if (conditions?.[step] ?? true) {\n    return children[step];\n  }\n\n  return <div></div>;\n}\n","import { useEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useGlobalState } from './useGlobalState';\nimport { useLocalStorage } from './useLocalStorage';\n\ntype UseBlueCards = {\n  blurredCards: BooleanDictionary;\n  shouldBeBlurred: (cardId?: string) => boolean;\n  blurCard: (cardId: string) => void;\n  isBlurEnabled: boolean;\n};\n\n/**\n * Add card ids to the blur dictionary\n * @returns the dictionary of blurred ids, the function to add a blur card, the function to check if a card should be blurred, the flag indicating if the feature was enabled by the user\n */\nexport function useBlurCards(): UseBlueCards {\n  const [blurredCards, setBlurredCards] = useGlobalState('blurredCards');\n  const [blurEnabled] = useGlobalState('blurEnabled');\n  const [getLocalStorage, setLocalStorage] = useLocalStorage();\n\n  const blurCard = (cardId: string) => {\n    setBlurredCards((s: BooleanDictionary) => ({\n      ...s,\n      [cardId]: !s?.[cardId] ?? true,\n    }));\n  };\n\n  const shouldBeBlurred = (cardId?: string) => {\n    return Boolean(cardId && blurEnabled && blurredCards?.[cardId]);\n  };\n\n  useEffectOnce(() => {\n    setBlurredCards(getLocalStorage('blurredCards') ?? {});\n  });\n\n  useEffect(() => {\n    if (Object.keys(blurredCards ?? {}).length) {\n      setLocalStorage({ blurredCards: blurredCards ?? {} });\n    }\n  }, [blurredCards, setLocalStorage]);\n\n  return {\n    blurredCards,\n    shouldBeBlurred,\n    blurCard,\n    isBlurEnabled: blurEnabled,\n  };\n}\n","import { isDevEnv } from '../utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Controls debug and dev environment\n * @returns\n */\nexport function useDevFeatures() {\n  const [isDebugEnabled, setIsDebugEnabled] = useGlobalState('isDebugEnabled');\n\n  const toggleDevFeatures = () => {\n    setIsDebugEnabled((s) => !s);\n  };\n\n  return {\n    isDevEnv,\n    isDebugEnabled,\n    toggleDevFeatures,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\n// Check if user is ready\nexport function useIsUserReady(players: Players, state?: GameState) {\n  const [userId] = useGlobalState('userId');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setIsReady(false);\n      return;\n    }\n    // Check if user is ready and check if user has been ready after the last state change\n    if (userId && players?.[userId].ready === false) {\n      setIsReady(false);\n      return;\n    }\n\n    if (!state?.updatedAt) {\n      setIsReady(true);\n      return;\n    }\n\n    // If state was updated after the player was updated, data might not be synced\n    if (userId && players?.[userId]?.updatedAt < state?.updatedAt) {\n      setIsReady(false);\n      return;\n    }\n\n    setIsReady(true);\n  }, [userId, players, state?.updatedAt]);\n\n  return isReady;\n}\n","import { useEffect } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { isDevEnv } from 'utils/helpers';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Runs mock function tht performs whatever\n * @param whatToDo\n * @param [conditions]\n */\nexport function useMock(whatToDo: GenericFunction, conditions: any[] = []) {\n  const [isAdmin] = useGlobalState('isAdmin');\n  const [userId] = useGlobalState('userId');\n\n  useEffect(() => {\n    if (isDevEnv && !isAdmin && userId !== VIEWER_ID) {\n      whatToDo();\n    }\n  }, conditions); // eslint-disable-line\n}\n","import { useState } from 'react';\n\n/**\n * Controls steps\n * @param startingStep\n */\nexport function useStep(startingStep = 0): {\n  step: number;\n  setStep: React.Dispatch<React.SetStateAction<number>>;\n  goToNextStep: GenericFunction;\n  goToPreviousStep: GenericFunction;\n} {\n  const [step, setStep] = useState<number>(startingStep);\n\n  const goToNextStep = () => setStep((s) => s + 1);\n\n  const goToPreviousStep = () => setStep((s) => (s - 1 < 0 ? 0 : s - 1));\n\n  return {\n    step,\n    setStep,\n    goToNextStep,\n    goToPreviousStep,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { VIEWER_ID } from 'utils/constants';\nimport { useGlobalState } from './useGlobalState';\n\n/**\n * Get player data for the user\n * @param players\n * @returns\n */\nexport function useUser(players: Players): GamePlayer {\n  const [userId] = useGlobalState('userId');\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    if (userId === VIEWER_ID) {\n      setUser({\n        id: VIEWER_ID,\n        ready: true,\n      });\n      return;\n    }\n\n    if (userId) {\n      setUser(players?.[userId]);\n    }\n  }, [players, userId]);\n\n  return user;\n}\n","/**\n * Enum of Game Phases\n */\nexport const PHASES = {\n  DEFAULT: {\n    LOBBY: 'LOBBY',\n    RULES: 'RULES',\n    SETUP: 'SETUP',\n    GAME_OVER: 'GAME_OVER',\n  },\n  ARTE_RUIM: {\n    DRAW: 'DRAW',\n    EVALUATION: 'EVALUATION',\n    GALLERY: 'GALLERY',\n  },\n  BOMBA_RELOGIO: {\n    ROLE_ASSIGNMENT: 'ROLE_ASSIGNMENT',\n    DECLARATION: 'DECLARATION',\n    EXAMINATION: 'EXAMINATION',\n    RESULT: 'RESULT',\n  },\n  CAMINHOS_MAGICOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CINEGRAFISTAS_AMADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  CONTADORES_HISTORIAS: {\n    STORY: 'STORY',\n    CARD_PLAY: 'CARD_PLAY',\n    VOTING: 'VOTING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRUZA_PALAVRAS: {\n    CLUE_WRITING: 'CLUE_WRITING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  DETETIVES_IMAGINATIVOS: {\n    SECRET_CLUE: 'SECRET_CLUE',\n    CARD_PLAY: 'CARD_PLAY',\n    DEFENSE: 'DEFENSE',\n    VOTING: 'VOTING',\n    REVEAL: 'REVEAL',\n  },\n  DILEMA_DOS_ESQUIADORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ESPIAO_ENTRE_NOS: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    INVESTIGATION: 'INVESTIGATION',\n    ASSESSMENT: 'ASSESSMENT',\n    FINAL_ASSESSMENT: 'FINAL_ASSESSMENT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  FILEIRA_DE_FATOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  GALERIA_DE_SONHOS: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    DREAMS_SELECTION: 'DREAMS_SELECTION',\n    CARD_PLAY: 'CARD_PLAY',\n    RESOLUTION: 'RESOLUTION',\n  },\n  CRIMES_HEDIONDOS: {\n    CRIME_SELECTION: 'CRIME_SELECTION',\n    SCENE_MARKING: 'SCENE_MARKING',\n    GUESSING: 'GUESSING',\n    REVEAL: 'REVEAL',\n  },\n  PORTA_DOS_DESESPERADOS: {\n    BOOK_POSSESSION: 'BOOK_POSSESSION',\n    DOOR_CHOICE: 'DOOR_CHOICE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  INSTRUMENTOS_CODIFICADOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  LINHAS_CRUZADAS: {\n    PROMPT_SELECTION: 'PROMPT_SELECTION',\n    DRAWING: 'DRAWING',\n    NAMING: 'NAMING',\n    PRESENTATION: 'PRESENTATION',\n  },\n  MENTE_COLETIVA: {\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    EVERYBODY_WRITES: 'EVERYBODY_WRITES',\n    COMPARE: 'COMPARE',\n    RESOLUTION: 'RESOLUTION',\n  },\n  NA_RUA_DO_MEDO: {\n    TRICK_OR_TREAT: 'TRICK_OR_TREAT',\n    RESULT: 'RESULT',\n    STREET_END: 'STREET_END',\n  },\n  NAUFRAGOS: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  ONDA_TELEPATICA: {\n    DIAL_CLUE: 'DIAL_CLUE',\n    GUESS: 'GUESS',\n    REVEAL: 'REVEAL',\n  },\n  PALHETA_DE_CORES: {\n    UNKNOWN: 'UNKNOWN',\n  },\n  POLEMICA_DA_VEZ: {\n    TOPIC_SELECTION: 'TOPIC_SELECTION',\n    REACT: 'REACT',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_NAO_MATA: {\n    TARGETING: 'TARGETING',\n    STANDOFF: 'STANDOFF',\n    DUEL: 'DUEL',\n    RESOLUTION: 'RESOLUTION',\n  },\n  QUEM_SOU_EU: {\n    ASSIGNMENT: 'ASSIGNMENT',\n    QUESTIONING: 'QUESTIONING',\n    WHO_ARE_YOU: 'WHO_ARE_YOU',\n    REVEAL: 'REVEAL',\n  },\n  RETRATO_FALADO: {\n    COMPOSITE_SKETCH: 'COMPOSITE_SKETCH',\n    EVALUATION: 'EVALUATION',\n    REVEAL: 'REVEAL',\n  },\n  SONHOS_PESADELOS: {\n    DREAM_TELLING: 'DREAM_TELLING',\n    MATCHING: 'MATCHING',\n    RESOLUTION: 'RESOLUTION',\n  },\n  SUPER_CAMPEONATO: {\n    CHALLENGE_SELECTION: 'CHALLENGE_SELECTION',\n    CONTENDER_SELECTION: 'CONTENDER_SELECTION',\n    BETS: 'BETS',\n    BATTLE: 'BATTLE',\n    RESULTS: 'RESULTS',\n  },\n  TESTEMUNHA_OCULAR: {\n    WITNESS_SELECTION: 'WITNESS_SELECTION',\n    QUESTION_SELECTION: 'QUESTION_SELECTION',\n    QUESTIONING: 'QUESTIONING',\n    TRIAL: 'TRIAL',\n  },\n  TREVO_DA_SORTE: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    CLOVER_WRITING: 'CLOVER_WRITING',\n    CLOVER_GUESSING: 'CLOVER_GUESSING',\n    RESULTS: 'RESULTS',\n  },\n  UE_SO_ISSO: {\n    WORD_SELECTION: 'WORD_SELECTION',\n    SUGGEST: 'SUGGEST',\n    COMPARE: 'COMPARE',\n    GUESS: 'GUESS',\n  },\n  VENDAVAL_DE_PALPITE: {\n    BOSS_SELECTION: 'BOSS_SELECTION',\n    SECRET_WORD_SELECTION: 'SECRET_WORD_SELECTION',\n    PLAYERS_CLUES: 'PLAYERS_CLUES',\n    CLUE_EVALUATIONS: 'CLUE_EVALUATIONS',\n  },\n  TEMPLATE: {\n    UNKNOWN: 'UNKNOWN',\n  },\n};\n"],"names":["DebugOnly","children","div","dev","devOnly","useDevFeatures","isDebugEnabled","isDevEnv","PhaseAnnouncement","buttonText","icon","title","currentRound","onClose","className","duration","withoutTimer","unskippable","animationType","useTemporarilyHidePlayersBar","durationPerRound","clsx","getAnimationClass","type","onClick","pt","en","custom","onExpire","disabled","PhaseContainer","info","phase","allowedPhase","fullScreen","white","translate","useLanguage","screenRef","useRef","useGlobalState","setScreenSize","useEffect","current","height","offsetHeight","width","offsetWidth","gameName","description","baseClass","id","ref","speak","text","language","volume","utterance","SpeechSynthesisUtterance","lang","window","speechSynthesis","getRandomWelcomeMessage","name","options","getRandomItem","randomName","mockPlayerName","undefined","Join","players","meta","useLoading","isLoading","setLoader","gameId","setUserId","setUsername","setUserAvatarId","setVolume","isAdmin","setIsAdminEnabled","useState","AVAILABLE_AVATAR_IDS","availableAvatars","setAvailableAvatars","tempAvatar","setTempAvatar","tempUsername","setTempUsername","sameGameId","setSameGameId","localStorageAvatar","setLocalStorageAvatar","usedAvatars","Object","values","reduce","acc","avatarId","newAvailableAvatars","includes","useEffectOnce","lsAvatarId","localStorage","lsUsername","lsGameId","onPreviousAvatar","useCallback","index","indexOf","newIndex","length","onNextAvatar","onAddPlayer","_","vol","GAME_API","playerName","playerAvatarId","response","data","username","notification","message","JSON","stringify","placement","console","error","alt","src","PUBLIC_URL","fallback","Boolean","CaretLeftOutlined","viewBox","href","avatars","AVATARS","CaretRightOutlined","isComplete","onChange","e","target","value","trim","placeholder","maxLength","suffix","InfoCircleOutlined","onKeyPress","key","loading","ghost","size","tags","onConfirm","VIEWER_ID","danger","FireFilled","Waiting","gameMeta","userAvatarId","onLockGameAndStart","ADMIN_API","isLocked","numPlayers","keys","direction","min","block","SingleCloud","cloudData","backgroundPositionX","MultiCloud","style","backgroundImage","CloudBackground","cloudType","backgroundColor","CloudTypeComponent","split","getCloudComponent","PhaseLobby","userId","PHASES","orderBy","map","player","animate","state","round","total","appearance","clouds","PhasePlaceholder","PhaseRules","isUserReady","useIsUserReady","user","useUser","errorMessage","onBeReady","useAPICall","apiFunction","actionName","successMessage","onSuccess","getRandomPositiveReadyMessage","onBeReadyIDK","getRandomNeutralReadyMessage","onBeReadyQue","getRandomNegativeReadyMessage","useMock","ruleClass","wrap","CheckCircleFilled","SmileFilled","MehFilled","RobotFilled","PhaseSetup","AnimatedGearIcon","PhaseTimerReset","goToNextStep","next","Promise","res","setTimeout","CollapsibleRule","contained","header","PopoverRule","content","label","showLabel","position","ReadOutlined","buttonProps","RulesCarousel","settings","prevArrow","DoubleLeftOutlined","nextArrow","DoubleRightOutlined","autoplay","autoplaySpeed","arrows","rules","rule","RulesList","RulesModal","gameInfo","isVisible","setVisibility","onCloseModal","open","onCancel","footer","SectionMeta","groupScore","color","SectionRankedPlayers","rankedPlayers","useMemo","count","score","shape","BlurOptions","blurCard","useBlurCards","useAsync","fetch","process","json","result","aliens","cockroaches","scorpions","snakes","spiders","selected","setSelected","onUpdateSelected","prevState","checked","selectedGroups","forEach","push","flat","SectionSettings","blurEnabled","setBlurEnabled","isAdminEnabled","toggleDevFeatures","useLocalStorage","setLocalStorage","checkedChildren","unCheckedChildren","s","PlayersStatusBar","sortPlayers","dot","ready","GameInfoDrawer","useToggle","isDrawerOpen","toggleDrawer","isSettingsOpen","toggleSettingsDrawer","navigate","useNavigate","SettingOutlined","closable","preview","FireOutlined","Session","gameCollection","getActiveComponent","backgroundClassName","docPath","useDocument","doc","firestore","snapshotListenOptions","includeMetadataChanges","snapshot","useGamePlayers","useGameState","setInfo","isIdle","useIdle","useIdleRedirect","useTitle","table","GAME_LIST","appElement","document","getElementById","classList","add","remove","ActiveComponent","Step","fullWidth","getWaitingRoomInstruction","kind","StepSwitcher","step","conditions","waitingRoomInstruction","waitingRoomInstructionType","waitingRoomContent","warn","instruction","blurredCards","setBlurredCards","getLocalStorage","shouldBeBlurred","cardId","isBlurEnabled","setIsDebugEnabled","isReady","setIsReady","updatedAt","whatToDo","useStep","startingStep","setStep","goToPreviousStep","setUser","DEFAULT","LOBBY","RULES","SETUP","GAME_OVER","ARTE_RUIM","DRAW","EVALUATION","GALLERY","BOMBA_RELOGIO","ROLE_ASSIGNMENT","DECLARATION","EXAMINATION","RESULT","CAMINHOS_MAGICOS","UNKNOWN","CINEGRAFISTAS_AMADORES","CONTADORES_HISTORIAS","STORY","CARD_PLAY","VOTING","RESOLUTION","CRUZA_PALAVRAS","CLUE_WRITING","GUESSING","REVEAL","DETETIVES_IMAGINATIVOS","SECRET_CLUE","DEFENSE","DILEMA_DOS_ESQUIADORES","ESPIAO_ENTRE_NOS","ASSIGNMENT","INVESTIGATION","ASSESSMENT","FINAL_ASSESSMENT","FILEIRA_DE_FATOS","GALERIA_DE_SONHOS","WORD_SELECTION","DREAMS_SELECTION","CRIMES_HEDIONDOS","CRIME_SELECTION","SCENE_MARKING","PORTA_DOS_DESESPERADOS","BOOK_POSSESSION","DOOR_CHOICE","INSTRUMENTOS_CODIFICADOS","LINHAS_CRUZADAS","PROMPT_SELECTION","DRAWING","NAMING","PRESENTATION","MENTE_COLETIVA","QUESTION_SELECTION","EVERYBODY_WRITES","COMPARE","NA_RUA_DO_MEDO","TRICK_OR_TREAT","STREET_END","NAUFRAGOS","ONDA_TELEPATICA","DIAL_CLUE","GUESS","PALHETA_DE_CORES","POLEMICA_DA_VEZ","TOPIC_SELECTION","REACT","QUEM_NAO_MATA","TARGETING","STANDOFF","DUEL","QUEM_SOU_EU","QUESTIONING","WHO_ARE_YOU","RETRATO_FALADO","COMPOSITE_SKETCH","SONHOS_PESADELOS","DREAM_TELLING","MATCHING","SUPER_CAMPEONATO","CHALLENGE_SELECTION","CONTENDER_SELECTION","BETS","BATTLE","RESULTS","TESTEMUNHA_OCULAR","WITNESS_SELECTION","TRIAL","TREVO_DA_SORTE","CLOVER_WRITING","CLOVER_GUESSING","UE_SO_ISSO","SUGGEST","VENDAVAL_DE_PALPITE","BOSS_SELECTION","SECRET_WORD_SELECTION","PLAYERS_CLUES","CLUE_EVALUATIONS","TEMPLATE"],"sourceRoot":""}