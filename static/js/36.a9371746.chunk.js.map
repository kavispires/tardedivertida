{"version":3,"file":"static/js/36.a9371746.chunk.js","mappings":"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","sources":["games/testemunha-ocular/TextBlobs.tsx","games/testemunha-ocular/PhaseWitnessSelection.tsx","games/testemunha-ocular/api-requests.ts","games/testemunha-ocular/Suspects.tsx","games/testemunha-ocular/QuestionsHistory.tsx","games/testemunha-ocular/StepSelectQuestion.tsx","games/testemunha-ocular/StepQuestionWaiting.tsx","games/testemunha-ocular/PhaseQuestionSelection.tsx","games/testemunha-ocular/StepQuestioning.tsx","games/testemunha-ocular/PhaseQuestioning.tsx","games/testemunha-ocular/StepSuspectElimination.tsx","games/testemunha-ocular/PhaseTrial.tsx","games/testemunha-ocular/PhaseGameOver.tsx","games/testemunha-ocular/SessionTestemunhaOcular.tsx"],"sourcesContent":["import { Instruction, Translate } from 'components';\n\nexport function WitnessRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt=\"Em Testemunha Ocular, um jogador será a testemunha que presenciou um crime desconhecido. Essa testemunha responderá perguntas de sim-ou-não para ajudar os outros jogadores, detetives, a liberarem pelo menos um dos 12 suspeitos em cada rodada. Você quer ser a testemunha?\"\n        en=\"In Eye Witness, a player will be the witness who witnessed an unknown crime. This witness will answer yes-or-no questions to help the other players, detective, to release at least one of the 12 suspects each round. Do you want to be the witness?\"\n      />\n    </Instruction>\n  );\n}\n\ntype AnnouncementContentProps = {\n  didUserWin: boolean;\n};\n\nexport function AnnouncementContent({ didUserWin }: AnnouncementContentProps) {\n  return didUserWin ? (\n    <Instruction>\n      <Translate\n        pt=\"O criminoso foi capturado e preso e vai morrer na cadeira elétrica! Obrigado pelo seu serviço e dedicação nesse caso!\"\n        en=\"The perpetrator was captured, arrested, and will be executed by the electric chair! Thank you for your service!\"\n      />\n    </Instruction>\n  ) : (\n    <Instruction>\n      <Translate\n        pt=\"O criminoso não foi capturado. Tudo por conta da sua investigação porca. Ele(a) saiu pelo mundo a fora cometendo mais crimes. Saiu até nos jornais!\"\n        en=\"The perpetrator got away. Thanks to you and your lousy investigation. Now they are out and about committing more crimes. It was even on the news!\"\n      />\n    </Instruction>\n  );\n}\n","// Ant Design Resources\nimport { Space } from 'antd';\n// Hooks\nimport { useLoading, useLanguage, useGlobalState, useStep } from 'hooks';\nimport { useOnSelectWitnessAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarCard,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  Step,\n  StepSwitcher,\n  Title,\n  Translate,\n  AvatarIcon,\n  TransparentButton,\n} from 'components';\nimport { WitnessRules } from './TextBlobs';\n\nfunction PhaseWitnessSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n  const [isAdmin] = useGlobalState('isAdmin');\n\n  const onWitnessButtonClick = useOnSelectWitnessAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.WITNESS_SELECTION}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"crime-scene\"\n          title={translate('O Caso', 'The Case')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Um crime horrível aconteceu. Tão horrível quem não consigo nem explicar e nem podemos contar\n                  com a ciência forense para resolvê-lo. Portanto, só há uma pessoa que pode nos ajudar agora:\n                  uma testemunha ocular...\n                </>\n              }\n              en={\n                <>\n                  A horrible crime has happened. So horrible that I can't even explain, neither can't rely on\n                  forensics and science to solve it. So there's only one person that could help us now: An eye\n                  witness...\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <Step key={1}>\n          <Title>\n            <AvatarIcon type=\"animated-clock\" size=\"large\" />\n            <br />\n            <Translate pt=\"Quem quer ser a testemunha ocular?\" en=\"Who wants to be the eye witness?\" />\n          </Title>\n\n          <WitnessRules />\n\n          <Instruction contained>\n            <Space>\n              {Object.values(players).map((player) => {\n                if (isAdmin) {\n                  return (\n                    <TransparentButton\n                      key={`p-bt-${player.id}`}\n                      disabled={isLoading}\n                      onClick={() => onWitnessButtonClick({ witnessId: player.id })}\n                    >\n                      <AvatarCard key={`p-a-${player.id}`} player={player} withName addressUser />\n                    </TransparentButton>\n                  );\n                }\n\n                return <AvatarCard key={`p-a-${player.id}`} player={player} withName addressUser />;\n              })}\n            </Space>\n          </Instruction>\n\n          <Instruction>\n            (\n            <Translate pt=\"O administrator selecionará a testemunha\" en=\"The VIP will select the witness\" />)\n          </Instruction>\n        </Step>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWitnessSelection;\n","import { TESTEMUNHA_OCULAR_API } from 'adapters';\n\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSelectWitnessAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'select-witness',\n    successMessage: translate('Testemunha enviada com sucesso', 'Witness submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar selecionar a testemunha',\n      'Oops, the application found an error while trying to submit the witness'\n    ),\n  });\n\n  return (payload: SelectWitnessPayload) => {\n    request({\n      action: 'SELECT_WITNESS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSelectQuestionAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'select-question',\n    successMessage: translate('Pergunta enviada com sucesso', 'Question submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar pergunta',\n      'Oops, the application found an error while trying to submit question'\n    ),\n  });\n\n  return (payload: SelectQuestionPayload) => {\n    request({\n      action: 'SELECT_QUESTION',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitTestimonyAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'submit-testimony',\n    successMessage: translate('Testemunho enviada com sucesso', 'Testimony submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar seu testemunho',\n      'Oops, the application found an error while trying to send your testimony'\n    ),\n  });\n\n  return (payload: SubmitTestimonyPayload) => {\n    request({\n      action: 'GIVE_TESTIMONY',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnEliminateSuspectAPIRequest() {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: TESTEMUNHA_OCULAR_API.submitAction,\n    actionName: 'eliminate-suspect',\n    successMessage: translate('Suspeito eliminado com sucesso', 'Suspect release submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar eliminar o suspeito',\n      'Oops, the application found an error while trying to release the suspect'\n    ),\n  });\n\n  return (payload: EliminatePayload) => {\n    request({\n      action: 'ELIMINATE_SUSPECT',\n      ...payload,\n    });\n  };\n}\n","import clsx from 'clsx';\n// Ant Design Resources\nimport { Popconfirm } from 'antd';\n// Hooks\nimport { useDimensions, useLanguage, useLoading } from 'hooks';\n// Components\nimport { ImageCard } from 'components';\n\ntype SuspectsProps = {\n  suspects: Suspect[];\n  perpetrator?: Suspect;\n  onCardClick?: GenericFunction;\n  eliminatedSuspects?: string[];\n};\n\nexport function Suspects({ suspects, perpetrator, onCardClick, eliminatedSuspects = [] }: SuspectsProps) {\n  const { language, translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const [width] = useDimensions();\n\n  const cardWidth = Math.floor(width / 7);\n\n  if (onCardClick) {\n    return (\n      <div className=\"t-suspects-table\">\n        {suspects.map((suspect) => {\n          const wasEliminated = eliminatedSuspects.includes(suspect.id);\n          const name = suspect.name[language];\n\n          return (\n            <Popconfirm\n              key={suspect.id}\n              title={translate(\n                `Tem certeza que quer liberar ${name}?`,\n                `Are you sure you want to release ${name}?`\n              )}\n              onConfirm={() => onCardClick(suspect.id)}\n              okText={translate('Sim', 'Yes')}\n              cancelText={translate('Não', 'No')}\n              disabled={wasEliminated || isLoading}\n            >\n              <button\n                className=\"t-suspects-table__suspect t-suspects-table__suspect-button\"\n                disabled={wasEliminated || isLoading}\n              >\n                <ImageCard\n                  imageId={wasEliminated ? 'us-00' : suspect.id}\n                  className={clsx(\n                    't-suspects-table__suspect-image',\n                    perpetrator?.id === suspect.id && 't-suspects-table__suspect-image--active',\n                    wasEliminated && 't-suspects-table__suspect-image--disabled'\n                  )}\n                  cardWidth={cardWidth}\n                  preview={false}\n                />\n                {!wasEliminated && <div className=\"t-suspects-table__suspect-name\">{name}</div>}\n              </button>\n            </Popconfirm>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"t-suspects-table\">\n      {suspects.map((suspect) => {\n        const wasEliminated = eliminatedSuspects.includes(suspect.id);\n        return (\n          <div className=\"t-suspects-table__suspect\" key={suspect.id}>\n            <ImageCard\n              imageId={wasEliminated ? 'us-00' : suspect.id}\n              className={clsx(\n                't-suspects-table__suspect-image',\n                perpetrator?.id === suspect.id && 't-suspects-table__suspect-image--active'\n              )}\n              cardWidth={cardWidth}\n            />\n            {!wasEliminated && <div className=\"t-suspects-table__suspect-name\">{suspect.name[language]}</div>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","// Ant Design Resources\nimport { Tooltip } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarIcon, CollapsibleRule } from 'components';\n\ntype QuestionsHistoryProps = {\n  history: THistoryEntry[];\n};\n\nexport function QuestionsHistory({ history }: QuestionsHistoryProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <CollapsibleRule title={translate('Respostas Anteriores', 'Previous Answers')}>\n      <ol>\n        {history.map((entry) => (\n          <li key={`history-entry-${entry.id}`} className=\"t-history__entry\">\n            <span className=\"t-history__question\">{entry.question}</span>\n            {entry.answer ? (\n              <Tooltip title={translate('Sim', 'Yes')} className=\"t-history__icon\">\n                <AvatarIcon type=\"speech-bubble-accepted\" size=\"small\" />\n              </Tooltip>\n            ) : (\n              <Tooltip title={translate('Não', 'No')} className=\"t-history__icon\">\n                <AvatarIcon type=\"speech-bubble-declined\" size=\"small\" />\n              </Tooltip>\n            )}\n          </li>\n        ))}\n      </ol>\n    </CollapsibleRule>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { ButtonContainer, Card, Instruction, Step, Title, Translate } from 'components';\nimport { Suspects } from './Suspects';\nimport { QuestionsHistory } from './QuestionsHistory';\n\ntype StepSelectQuestionProps = {\n  questions: TQuestion[];\n  onSelectQuestion: GenericFunction;\n  isLoading: boolean;\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  history: THistoryEntry[];\n};\n\nexport function StepSelectQuestion({\n  questions,\n  onSelectQuestion,\n  isLoading,\n  suspects,\n  previouslyEliminatedSuspects,\n  history,\n}: StepSelectQuestionProps) {\n  return (\n    <Step>\n      <Title>\n        <Translate pt=\"Selecione uma pergunta\" en=\"Select a question\" />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt=\"A testemunha responderá a pergunta sobre o  sobre criminoso. A pergunta que você não escolher será descartada.\"\n          en=\"The witness will answer the question about the perpetrator. The unchosen question will be discarded.\"\n        />{' '}\n      </Instruction>\n\n      <ButtonContainer className=\"t-select-question\">\n        {questions.map(({ question, id }, index) => {\n          return (\n            <button\n              key={id}\n              className=\"t-select-question__button\"\n              onClick={() => onSelectQuestion({ questionId: id })}\n              disabled={isLoading}\n            >\n              <Card header={LETTERS[index]} randomColor className=\"t-card\">\n                {question}\n              </Card>\n            </button>\n          );\n        })}\n      </ButtonContainer>\n\n      <Suspects suspects={suspects} eliminatedSuspects={previouslyEliminatedSuspects} />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Components\nimport { AvatarIcon, AvatarName, Instruction, Step, Title, Translate } from 'components';\nimport { QuestionsHistory } from './QuestionsHistory';\nimport { Suspects } from './Suspects';\n\ntype StepQuestionWaitingProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  perpetrator: Suspect;\n  questioner: GamePlayer;\n  isUserTheWitness: boolean;\n  history: THistoryEntry[];\n};\n\nexport function StepQuestionWaiting({\n  suspects,\n  previouslyEliminatedSuspects,\n  perpetrator,\n  questioner,\n  isUserTheWitness,\n  history,\n}: StepQuestionWaitingProps) {\n  return (\n    <Step>\n      <Title>\n        <AvatarIcon type=\"animated-clock\" size=\"large\" />\n        <br />\n        <Translate pt={<>Examine os suspeitos</>} en={<>Examine the suspects</>} />\n      </Title>\n      <Instruction contained>\n        <Translate\n          pt={\n            <>\n              <AvatarName player={questioner} /> está escolhendo uma pergunta para essa rodada.\n            </>\n          }\n          en={\n            <>\n              <AvatarName player={questioner} /> is picking a question for this round.\n            </>\n          }\n        />{' '}\n        {isUserTheWitness && (\n          <Translate\n            pt=\"O criminoso que você viu está marcado com borda amarela\"\n            en=\"The criminal you saw is highlighted in yellow\"\n          />\n        )}\n      </Instruction>\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        eliminatedSuspects={previouslyEliminatedSuspects}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLoading, useLanguage, useStep } from 'hooks';\nimport { useOnSelectQuestionAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepSelectQuestion } from './StepSelectQuestion';\nimport { StepQuestionWaiting } from './StepQuestionWaiting';\n\nfunction PhaseQuestionSelection({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n  const [questioner, isUserTheQuestioner] = useWhichPlayerIsThe('questionerId', state, players);\n  const onSelectQuestion = useOnSelectQuestionAPIRequest();\n\n  const roundsLeft = (state?.round?.total ?? 0) - (state?.round?.current ?? 0) + 1 || 11;\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.QUESTION_SELECTION}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"investigation\"\n          title={translate('Seleção da Pergunta', 'Question Selection')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Agora que encontramos nossa testemunha (<AvatarName player={witness} />) é hora de\n                  questioná-la.\n                  <br />\n                  Só temos tempo para {roundsLeft} perguntas. Portanto, <AvatarName player={questioner} />,\n                  escolha a pergunta certa.\n                </>\n              }\n              en={\n                <>\n                  Now that we have a Witness (<AvatarName player={witness} />\n                  ), it's time to choose the question to ask them.\n                  <br />\n                  We can only have time for {roundsLeft} questions. So <AvatarName player={questioner} />,\n                  choose a question\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        {isUserTheQuestioner ? (\n          <StepSelectQuestion\n            isLoading={isLoading}\n            onSelectQuestion={onSelectQuestion}\n            previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n            questions={state.questions}\n            suspects={state.suspects}\n            history={state.history}\n          />\n        ) : (\n          <StepQuestionWaiting\n            isUserTheWitness={isUserTheWitness}\n            perpetrator={state.perpetrator}\n            previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n            questioner={questioner}\n            suspects={state.suspects}\n            history={state.history}\n          />\n        )}\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseQuestionSelection;\n","// Ant Design Resources\nimport { Avatar, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarName, Card, Icons, Step, Title, Translate } from 'components';\nimport { Suspects } from './Suspects';\nimport { QuestionsHistory } from './QuestionsHistory';\n\ntype StepQuestioningProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  perpetrator: Suspect;\n  isUserTheWitness: boolean;\n  witness: GamePlayer;\n  isLoading: boolean;\n  onAnswer: GenericFunction;\n  question: GamePlayer;\n  history: THistoryEntry[];\n};\n\nexport function StepQuestioning({\n  suspects,\n  previouslyEliminatedSuspects,\n  perpetrator,\n  isUserTheWitness,\n  witness,\n  isLoading,\n  onAnswer,\n  question,\n  history,\n}: StepQuestioningProps) {\n  const { translate } = useLanguage();\n\n  return (\n    <Step>\n      <Title level={3}>\n        <Translate\n          pt={\n            <>\n              Testemunha <AvatarName player={witness} />, responda:\n            </>\n          }\n          en={\n            <>\n              Witness <AvatarName player={witness} />, please answer:\n            </>\n          }\n        />\n        <br />\n        <div className=\"t-questioning-answer-grid\">\n          {isUserTheWitness ? (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={() => onAnswer({ testimony: false })}\n              className=\"t-questioning-answer-grid__button t-questioning-answer-grid__button--no\"\n              disabled={!isUserTheWitness || isLoading}\n            >\n              <span className=\"t-questioning-answer-grid__answer\">\n                <Translate pt=\"Não\" en=\"No\" />\n              </span>\n              <Avatar\n                size=\"large\"\n                icon={<Icons.SpeechBubbleDeclined />}\n                style={{ backgroundColor: 'transparent' }}\n                shape=\"square\"\n              />\n            </Button>\n          ) : (\n            <div></div>\n          )}\n\n          <Card header={translate('O suspeito...', 'The perpetrator...')} randomColor className=\"t-card\">\n            {question.question}\n          </Card>\n          {isUserTheWitness ? (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={() => onAnswer({ testimony: true })}\n              className=\"t-questioning-answer-grid__button t-questioning-answer-grid__button--no\"\n              disabled={!isUserTheWitness || isLoading}\n            >\n              <Avatar\n                size=\"large\"\n                icon={<Icons.SpeechBubbleAccepted />}\n                style={{ backgroundColor: 'transparent' }}\n                shape=\"square\"\n              />\n              <span className=\"t-questioning-answer-grid__answer\">\n                <Translate pt=\"Sim\" en=\"Yes\" />\n              </span>\n            </Button>\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </Title>\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        eliminatedSuspects={previouslyEliminatedSuspects}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLoading, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitTestimonyAPIRequest } from './api-requests';\n// Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepQuestioning } from './StepQuestioning';\n\nfunction PhaseQuestioning({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n\n  const onAnswer = useOnSubmitTestimonyAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.QUESTIONING}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"eye\"\n          title={translate('Questionamento', 'Questioning')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Nossa testemunha só sabe julgar por aparência.\n                  <br />\n                  <AvatarName player={witness} />, é hora de nos ajudar a pegar esse criminoso hediondo.\n                </>\n              }\n              en={\n                <>\n                  Our witness loves to judge the book by its cover.\n                  <br />\n                  <AvatarName player={witness} />, it's time to help us find this heinous perpetrator!\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepQuestioning\n          suspects={state.suspects}\n          previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n          perpetrator={state.perpetrator}\n          isUserTheWitness={isUserTheWitness}\n          witness={witness}\n          isLoading={isLoading}\n          onAnswer={onAnswer}\n          question={state.question}\n          history={state.history}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseQuestioning;\n","// Ant Design Resources\nimport { Avatar, Button } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { AvatarName, ButtonContainer, Card, Icons, Instruction, Step, Title, Translate } from 'components';\nimport { Suspects } from './Suspects';\nimport { QuestionsHistory } from './QuestionsHistory';\n\ntype StepSuspectEliminationProps = {\n  suspects: Suspect[];\n  previouslyEliminatedSuspects: string[];\n  eliminatedSuspects: string[];\n  perpetrator: Suspect;\n  isUserTheWitness: boolean;\n  isUserTheQuestioner: boolean;\n  witness: GamePlayer;\n  isLoading: boolean;\n  onEliminate: GenericFunction;\n  question: GamePlayer;\n  testimony: boolean;\n  history: THistoryEntry[];\n};\n\nexport function StepSuspectElimination({\n  suspects,\n  previouslyEliminatedSuspects,\n  eliminatedSuspects,\n  perpetrator,\n  isUserTheWitness,\n  isUserTheQuestioner,\n  witness,\n  isLoading,\n  onEliminate,\n  question,\n  testimony,\n  history,\n}: StepSuspectEliminationProps) {\n  const { translate } = useLanguage();\n\n  const onEliminateSuspect = (suspectId: string) => onEliminate({ suspectId, pass: false });\n  const onPass = () => onEliminate({ suspectId: '', pass: true });\n\n  return (\n    <Step>\n      <Title level={3}>\n        <AvatarName player={witness} />\n        <Translate en=\"answered\" pt=\"respondeu\" />{' '}\n        {testimony ? (\n          <Translate en=\"YES\" pt=\"SIM\" />\n        ) : (\n          <>\n            <Translate en=\"NO\" pt=\"NÃO\" />\n          </>\n        )}{' '}\n        <Avatar\n          size=\"large\"\n          icon={testimony ? <Icons.SpeechBubbleAccepted /> : <Icons.SpeechBubbleDeclined />}\n          style={{ backgroundColor: 'transparent' }}\n          shape=\"square\"\n        />{' '}\n        <Translate en=\"to the question\" pt=\"para a pergunta:\" />\n        <br />\n        <ButtonContainer>\n          <Card\n            header={translate('O suspeito...', 'The perpetrator...')}\n            color={testimony ? 'green' : 'red'}\n            className=\"t-card\"\n          >\n            {question.question}\n          </Card>\n        </ButtonContainer>\n      </Title>\n      {isUserTheQuestioner && (\n        <Instruction contained>\n          <Translate\n            pt=\"Clique em um suspeito para liberá-lo(a)\"\n            en=\"Click on a suspect card to release it\"\n          />\n          <br />\n          {Boolean(eliminatedSuspects?.length && isUserTheQuestioner) && (\n            <ButtonContainer>\n              <Button type=\"primary\" onClick={onPass} disabled={isLoading}>\n                <Translate\n                  pt=\"Parar de eliminar e ir para a próxima pergunta\"\n                  en=\"Stop releasing suspects and go to next question\"\n                />\n              </Button>\n            </ButtonContainer>\n          )}\n        </Instruction>\n      )}\n\n      <Suspects\n        suspects={suspects}\n        perpetrator={isUserTheWitness ? perpetrator : undefined}\n        onCardClick={isUserTheQuestioner ? onEliminateSuspect : undefined}\n        eliminatedSuspects={[...(eliminatedSuspects ?? []), ...(previouslyEliminatedSuspects ?? [])]}\n      />\n\n      <QuestionsHistory history={history} />\n    </Step>\n  );\n}\n","// Hooks\nimport { useWhichPlayerIsThe, useLoading, useLanguage, useStep } from 'hooks';\nimport { useOnEliminateSuspectAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { StepSuspectElimination } from './StepSuspectElimination';\n\nfunction PhaseTrial({ state, players, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { isLoading } = useLoading();\n  const { step, goToNextStep } = useStep(0);\n\n  const [witness, isUserTheWitness] = useWhichPlayerIsThe('witnessId', state, players);\n  const [questioner, isUserTheQuestioner] = useWhichPlayerIsThe('questionerId', state, players);\n\n  const onEliminate = useOnEliminateSuspectAPIRequest();\n\n  return (\n    <PhaseContainer\n      info={info}\n      phase={state?.phase}\n      allowedPhase={PHASES.TESTEMUNHA_OCULAR.TRIAL}\n      className=\"t-phase\"\n    >\n      <StepSwitcher step={step} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"law\"\n          title={translate('Julgamento', 'Trial')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt={\n                <>\n                  Precisamos eliminar suspeitos! Para cada pergunta, pelo menos um suspeito tem que se\n                  eliminado. Lembre-se que estamos tentando liberar testemunhas. Desvendamos o caso se o\n                  último suspeito for o criminoso!\n                  <br />\n                  <AvatarName player={questioner} addressUser /> está encarregado(a) de selecionar os\n                  inocentes.\n                </>\n              }\n              en={\n                <>\n                  We need to eliminate suspects! For each question we must eliminate at least one suspect.\n                  Remember we are trying to release witnesses. We solve the case if the last man (or woman)\n                  standing is the perpetrator!\n                  <br />\n                  <AvatarName player={questioner} /> is in charge of selecting the innocent people.\n                </>\n              }\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepSuspectElimination\n          suspects={state.suspects}\n          previouslyEliminatedSuspects={state.previouslyEliminatedSuspects}\n          perpetrator={state.perpetrator}\n          isUserTheWitness={isUserTheWitness}\n          witness={witness}\n          isLoading={isLoading}\n          onEliminate={onEliminate}\n          question={state.question}\n          eliminatedSuspects={state.eliminatedSuspects}\n          isUserTheQuestioner={isUserTheQuestioner}\n          testimony={state.testimony}\n          history={state.history}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseTrial;\n","// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport { GameOverWrapper, ImageCard, Instruction, Translate } from 'components';\nimport { AnnouncementContent } from './TextBlobs';\nimport { QuestionsHistory } from './QuestionsHistory';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  const { language, translate } = useLanguage();\n\n  const didUserWin = state.outcome === 'WIN';\n\n  return (\n    <GameOverWrapper\n      info={info}\n      state={state}\n      announcementIcon={didUserWin ? 'criminal' : 'newspaper'}\n      announcementDuration={15}\n      announcementTitle={\n        didUserWin\n          ? translate('Capturado!', 'Arrested!')\n          : translate('O criminoso escapou!', 'They got away!')\n      }\n      announcementContent={<AnnouncementContent didUserWin={didUserWin} />}\n    >\n      <Instruction contained>\n        <Translate\n          pt={<>O interrogatório durou {state.groupScore ?? '?'} horas.</>}\n          en={<>The interrogation lasted for {state.groupScore ?? '?'} hours.</>}\n        />\n        <br />\n        <Translate pt=\"O criminoso era:\" en=\"The perpetrator was:\" />\n\n        <div className=\"t-suspects-table__suspect\">\n          <ImageCard\n            imageId={state.perpetrator.id}\n            className=\"t-suspects-table__suspect-image\"\n            cardWidth={150}\n          />\n          <div className=\"t-suspects-table__suspect-name\">{state.perpetrator.name[language]}</div>\n        </div>\n      </Instruction>\n\n      <QuestionsHistory history={state.history} />\n    </GameOverWrapper>\n  );\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseWitnessSelection from './PhaseWitnessSelection';\nimport PhaseQuestionSelection from './PhaseQuestionSelection';\nimport PhaseQuestioning from './PhaseQuestioning';\nimport PhaseTrial from './PhaseTrial';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionTestemunhaOcular({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.TESTEMUNHA_OCULAR.WITNESS_SELECTION:\n        return PhaseWitnessSelection;\n      case PHASES.TESTEMUNHA_OCULAR.QUESTION_SELECTION:\n        return PhaseQuestionSelection;\n      case PHASES.TESTEMUNHA_OCULAR.QUESTIONING:\n        return PhaseQuestioning;\n      case PHASES.TESTEMUNHA_OCULAR.TRIAL:\n        return PhaseTrial;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.TESTEMUNHA_OCULAR}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionTestemunhaOcular;\n"],"names":["WitnessRules","contained","pt","en","AnnouncementContent","didUserWin","state","players","info","translate","useLanguage","isLoading","useLoading","useStep","step","goToNextStep","useGlobalState","isAdmin","onWitnessButtonClick","request","useAPICall","apiFunction","TESTEMUNHA_OCULAR_API","actionName","successMessage","errorMessage","payload","action","useOnSelectWitnessAPIRequest","phase","allowedPhase","PHASES","className","type","title","onClose","currentRound","round","current","size","Object","values","map","player","disabled","onClick","witnessId","id","withName","addressUser","Suspects","suspects","perpetrator","onCardClick","eliminatedSuspects","language","useDimensions","width","cardWidth","Math","floor","suspect","wasEliminated","includes","name","onConfirm","okText","cancelText","imageId","clsx","preview","QuestionsHistory","history","entry","question","answer","StepSelectQuestion","questions","onSelectQuestion","previouslyEliminatedSuspects","index","questionId","header","LETTERS","randomColor","StepQuestionWaiting","questioner","isUserTheWitness","undefined","useWhichPlayerIsThe","witness","isUserTheQuestioner","useOnSelectQuestionAPIRequest","roundsLeft","total","StepQuestioning","onAnswer","level","testimony","icon","style","backgroundColor","shape","useOnSubmitTestimonyAPIRequest","StepSuspectElimination","onEliminate","color","Boolean","length","suspectId","pass","useOnEliminateSuspectAPIRequest","outcome","announcementIcon","announcementDuration","announcementTitle","announcementContent","groupScore","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWitnessSelection","PhaseQuestionSelection","PhaseQuestioning","PhaseTrial","PhaseGameOver","PageError"],"sourceRoot":""}