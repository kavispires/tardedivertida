{"version":3,"file":"static/js/235.b00a2326.chunk.js","mappings":"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","sources":["games/galeria-de-sonhos/RulesBlobs.tsx","games/galeria-de-sonhos/StepWordSelection.tsx","games/galeria-de-sonhos/PhaseWordSelection.tsx","games/galeria-de-sonhos/api-requests.ts","../node_modules/@ant-design/icons-svg/es/asn/UpCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/UpCircleOutlined.js","games/galeria-de-sonhos/SelectTable.tsx","games/galeria-de-sonhos/StepDreamsSelection.tsx","games/galeria-de-sonhos/PhaseDreamsSelections.tsx","games/galeria-de-sonhos/PlayTable.tsx","games/galeria-de-sonhos/StepPlayDream.tsx","games/galeria-de-sonhos/StepAnnounceDream.tsx","games/galeria-de-sonhos/PhaseCardPlay.tsx","games/galeria-de-sonhos/PhaseResolution.tsx","games/galeria-de-sonhos/PhaseGameOver.tsx","games/galeria-de-sonhos/SessionGaleriaDeSonhos.tsx"],"sourcesContent":["import { AvatarName, Instruction, Translate } from 'components';\n\ntype WordSelectionRulesProps = {\n  scout: GamePlayer;\n};\n\nexport function WordSelectionRules({ scout }: WordSelectionRulesProps) {\n  return (\n    <Instruction>\n      <Translate\n        pt={\n          <>\n            Cada sonho tem seu tema... uma palavra.\n            <br />\n            Para essa rodada, <AvatarName player={scout} addressUser size=\"small\" /> escolherá o tema.\n          </>\n        }\n        en={\n          <>\n            Every dream has a theme... a word.\n            <br />\n            For this round,\n            <AvatarName player={scout} addressUser size=\"small\" /> will choose the theme.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function GeneralRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Somos caçadores de sonhos!\n            <br />\n            Dentro do tema escolhido, podemos visitar os sonhos de até 10 das 15 pessoas (cartas-imagens)\n            disponíveis.\n            <br />\n            O objetivo é encontrar uns aos outros em cada sonho, então escolha apenas sonhos que você acredita\n            que outros jogadores também irão escolher.\n            <br />\n            Parece fácil, mas se você escolher um sonho que ninguém mais escolheu... vixi...\n          </>\n        }\n        en={\n          <>\n            We are dream scouts!\n            <br />\n            Given the chosen theme, we can visit dreams of 10 of the 15 people (image cards) available.\n            <br />\n            The goal of the game is to match the same visited dreams of other players, therefore choose dreams\n            that you think other players will also choose.\n            <br />\n            It seems easy, but if you choose a dream that nobody else has chosen... well...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionRules({ contained = false }) {\n  return (\n    <Instruction contained={contained}>\n      <Translate\n        pt={\n          <>\n            Selecione sonhos (cartas) que você acha que se relaciona com a palavra-tema da rodada.\n            <br />\n            Você deve selecionar pelo menos uma e no máximo 10.\n          </>\n        }\n        en={\n          <>\n            Now select cards that you think match the round's word.\n            <br />\n            You must select at least one card and a maximum of 10.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function DreamSelectionExtendedRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            Na próxima fase, de um a um, cada jogador vai escolher um de seus sonhos visitados.\n            <br />\n            Se pelo menos um jogador visitou o mesmo sonho, eles ganham pontos. Se ninguém escolheu, o jogador\n            está fora da rodada!\n            <br />\n            Dai passa-se a vez para o próximo jogador!\n            <br />\n            Sonhos só podem ser escolhidos uma vez por rodada...\n          </>\n        }\n        en={\n          <>\n            On the next phase, one by one, each player will select one of their visited dreams.\n            <br />\n            If at least one other player visited the same dream, they get points! If nobody visited the same\n            dream, you are out of the round!\n            <br />\n            Each dream can be chosen once per round only...\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n\nexport function CardPlayRules() {\n  return (\n    <Instruction contained>\n      <Translate\n        pt={\n          <>\n            De um em um, cada jogador vai escolher um de seus sonhos visitados se você ainda tem algum\n            disponível.\n            <br />\n            Selecione o sonho que você mais acha que tem chance de outro jogador ter também visitado.\n            <br />\n            Você ganha 3 pontos se apenas mais 1 jogador visitou o mesmo sonho.\n            <br />\n            Você ganha 1 ponto se mais de 1 jogador visitou o mesmo sonho.\n            <br />\n            Você está eliminado da rodada se ninguém mais visitou o sonho escolhido.\n          </>\n        }\n        en={\n          <>\n            One by one, each player chooses one of their visited dreams, if you have any still available.\n            <br />\n            Select the dream you think you have the most chances of matching another player.\n            <br />\n            You get 3 points if only 1 player visited the same dream.\n            <br />\n            You get 1 point if many players have visited the same dream.\n            <br />\n            You are eliminated for this round if nobody else has visited the chosen dream.\n          </>\n        }\n      />\n    </Instruction>\n  );\n}\n","// Utils\nimport { LETTERS } from 'utils/constants';\n// Components\nimport { ButtonContainer, Card, Step, Title, Translate, TransparentButton } from 'components';\nimport { GeneralRules } from './RulesBlobs';\n\ntype StepWordSelectionProps = {\n  onSubmitWord: GenericFunction;\n  words: GWord[];\n};\n\nexport function StepWordSelection({ onSubmitWord, words }: StepWordSelectionProps) {\n  return (\n    <Step fullWidth>\n      <Title>\n        <Translate pt=\"Selecione o tema\" en=\"Select the theme\" />\n      </Title>\n      <GeneralRules />\n      <ButtonContainer>\n        {words.map((word, index) => {\n          return (\n            <TransparentButton key={word.id} onClick={() => onSubmitWord({ wordId: word.id })}>\n              <Card header={LETTERS[index]} randomColor>\n                {word.text}\n              </Card>\n            </TransparentButton>\n          );\n        })}\n      </ButtonContainer>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep, useWhichPlayerIsThe } from 'hooks';\nimport { useOnSubmitWordAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  RoundAnnouncement,\n  StepSwitcher,\n  Translate,\n  ViewSwitch,\n  WaitingRoom,\n} from 'components';\nimport { StepWordSelection } from './StepWordSelection';\nimport { GeneralRules, WordSelectionRules } from './RulesBlobs';\n\nfunction PhaseWordSelection({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n  const [scout, isUserTheScout] = useWhichPlayerIsThe('scoutId', state, players);\n\n  const onSubmitWord = useOnSubmitWordAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.WORD_SELECTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <RoundAnnouncement round={state?.round} onPressButton={goToNextStep} buttonText=\" \" time={5}>\n          <Instruction contained>\n            <Translate\n              pt=\"Somos caçadores de sonhos tentando encontrar uns aos outros...\"\n              en=\"We're dream scouts trying to find each other...\"\n            />\n          </Instruction>\n        </RoundAnnouncement>\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"sleep\"\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <WordSelectionRules scout={scout} />\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <ViewSwitch cases={[isUserTheScout, !isUserTheScout]}>\n          <StepWordSelection onSubmitWord={onSubmitWord} words={state.words} />\n\n          <WaitingRoom\n            players={players}\n            title={<Translate pt=\"Aguarde...\" en=\"Please wait...\" />}\n            instruction={\n              <Translate\n                pt={\n                  <>\n                    <AvatarName player={scout} /> está escolhendo o tema.\n                  </>\n                }\n                en={\n                  <>\n                    <AvatarName player={scout} /> is choosing the theme.\n                  </>\n                }\n              />\n            }\n          >\n            <GeneralRules />\n          </WaitingRoom>\n        </ViewSwitch>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseWordSelection;\n","import { GALERIA_DE_SONHOS_API } from 'adapters';\nimport { useAPICall, useLanguage } from 'hooks';\n\nexport function useOnSubmitWordAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-word',\n    onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Palavra enviada com sucesso', 'Word submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua palavra',\n      'Oops, the application failed to send your word'\n    ),\n  });\n\n  return (payload: SubmitWordPayload) => {\n    request({\n      action: 'SUBMIT_WORD',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnSubmitCardsAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'submit-cards',\n    onBeforeCall: () => setStep(2),\n    onError: () => setStep(1),\n    successMessage: translate('Cartas enviadas com sucesso', 'Cards submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar suas cartas',\n      'Oops, the application failed to send your cards'\n    ),\n  });\n\n  return (payload: SubmitCardsPayload) => {\n    request({\n      action: 'SUBMIT_CARDS',\n      ...payload,\n    });\n  };\n}\n\nexport function useOnPlayCardAPIRequest(setStep: GenericFunction) {\n  const { translate } = useLanguage();\n\n  const request = useAPICall({\n    apiFunction: GALERIA_DE_SONHOS_API.submitAction,\n    actionName: 'play-card',\n    // onBeforeCall: () => setStep(3),\n    onError: () => setStep(2),\n    successMessage: translate('Carta enviada com sucesso', 'Card submitted successfully'),\n    errorMessage: translate(\n      'Vixi, o aplicativo encontrou um erro ao tentar enviar sua carta',\n      'Oops, the application failed to send your card'\n    ),\n  });\n\n  return (payload: PlayCardPayload) => {\n    request({\n      action: 'PLAY_CARD',\n      ...payload,\n    });\n  };\n}\n","// This icon file is generated automatically.\nvar UpCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M518.5 360.3a7.95 7.95 0 00-12.9 0l-178 246c-3.8 5.3 0 12.7 6.5 12.7H381c10.2 0 19.9-4.9 25.9-13.2L512 460.4l105.2 145.4c6 8.3 15.6 13.2 25.9 13.2H690c6.5 0 10.3-7.4 6.5-12.7l-178-246z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"up-circle\", \"theme\": \"outlined\" };\nexport default UpCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpCircleOutlined = function UpCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpCircleOutlinedSvg\n  }));\n};\n\nUpCircleOutlined.displayName = 'UpCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpCircleOutlined);","import { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport { ImageBlurButton, ImageCard, Translate } from 'components';\nimport { useCardWidth } from 'hooks';\n\ntype SelectTableProps = {\n  table: GImageCard[];\n  onSelectCard: GenericFunction;\n  selectedCards: BooleanDictionary;\n};\n\nexport function SelectTable({ table, onSelectCard, selectedCards }: SelectTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = selectedCards[card.id];\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n            />\n\n            <Button\n              shape=\"round\"\n              size=\"small\"\n              ghost={!isSelected}\n              className=\"g-table-item-button\"\n              onClick={() => onSelectCard(card.id)}\n            >\n              <UpCircleOutlined />\n              {isSelected ? (\n                <Translate pt=\"Desmarcar\" en=\"Deselect\" />\n              ) : (\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n              )}\n              <UpCircleOutlined />\n            </Button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","// Ant Design Resources\nimport { Button } from 'antd';\n// Hooks\nimport { useBooleanDictionary } from 'hooks';\n// Components\nimport { ButtonContainer, Card, PopoverRule, Step, Title, Translate } from 'components';\nimport { DreamSelectionExtendedRules, DreamSelectionRules } from './RulesBlobs';\nimport { SelectTable } from './SelectTable';\n\nconst validateSelectedCards = (v: BooleanDictionary) => {\n  return Object.keys(v).length < 10;\n};\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onSubmitCards: GenericFunction;\n  currentRound: number;\n};\n\nexport function StepDreamsSelection({ table, word, onSubmitCards, currentRound }: StepDreamsSelectionProps) {\n  const [selectedCards, onSelectCard] = useBooleanDictionary({}, validateSelectedCards);\n\n  const selectedCount = Object.keys(selectedCards).length;\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <Translate pt=\"Visite Sonhos\" en=\"Visit Dreams\" />\n      </Title>\n      <Card randomColor>{word.text}</Card>\n      <DreamSelectionRules contained />\n      {currentRound === 1 && <DreamSelectionExtendedRules />}\n\n      <PopoverRule content={<DreamSelectionExtendedRules />} />\n      <SelectTable table={table} onSelectCard={onSelectCard} selectedCards={selectedCards} />\n\n      <ButtonContainer>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          disabled={selectedCount < 1 || selectedCount > 10}\n          onClick={() => onSubmitCards({ cardsIds: Object.keys(selectedCards) })}\n        >\n          <Translate pt={`Enviar ${selectedCount} cartas-sonho`} en={`Send ${selectedCount} dream cards`} />\n        </Button>\n      </ButtonContainer>\n    </Step>\n  );\n}\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\nimport { useOnSubmitCardsAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\nimport { DreamSelectionRules } from './RulesBlobs';\nimport { StepDreamsSelection } from './StepDreamsSelection';\n\nfunction PhaseDreamsSelections({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const isUserReady = useIsUserReady(players, state);\n\n  const onSubmitCards = useOnSubmitCardsAPIRequest(setStep);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"dream\"\n          title={translate('Visite sonhos!', 'Visit dreams!')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <DreamSelectionRules />\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <StepDreamsSelection\n          table={state.table}\n          word={state.word}\n          onSubmitCards={onSubmitCards}\n          currentRound={state.round.current}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseDreamsSelections;\n","import { UpCircleOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport { Icons, ImageBlurButton, ImageCard, ImageCardBack, Translate } from 'components';\nimport { useCardWidth, useLoading } from 'hooks';\n\ntype PlayTableProps = {\n  table: GImageCard[];\n  onPlayCard: GenericFunction;\n  userCards: PlainObject;\n  isPlayAvailable: boolean;\n};\n\nexport function PlayTable({ table, onPlayCard, userCards, isPlayAvailable }: PlayTableProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n  const { isLoading } = useLoading();\n\n  return (\n    <ul className=\"g-table\">\n      {table.map((card) => {\n        const isSelected = Boolean((userCards ?? {})[card.id]);\n        const userCardEntry = userCards[card.id];\n        if (card.used) {\n          return (\n            <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n              <ImageBlurButton cardId={card.id} />\n              <ImageCardBack\n                cardWidth={cardWidth - 6}\n                className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n              />\n              {userCardEntry.used && (\n                <div className=\"g-star-points\">\n                  {userCardEntry.score === 3 ? (\n                    <Icons.Star className=\"g-star g-star--super-spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--super-spark\" />\n                  )}\n                  {userCardEntry.score > 1 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                  {userCardEntry.score > 0 ? (\n                    <Icons.Star className=\"g-star g-star--spark\" />\n                  ) : (\n                    <Icons.StarOutline className=\"g-star g-star--spark\" />\n                  )}\n                </div>\n              )}\n            </li>\n          );\n        }\n\n        return (\n          <li key={`g-table-${card.id}`} className=\"g-table-item\" style={{ width: `${cardWidth + 8}px` }}>\n            <ImageBlurButton cardId={card.id} />\n            <ImageCard\n              imageId={card.id}\n              cardWidth={cardWidth - 6} // 6 is the border total size\n              className={clsx('g-table-image', isSelected && 'g-table-image--selected')}\n            />\n            {isPlayAvailable && userCards[card.id] && (\n              <Button\n                shape=\"round\"\n                size=\"small\"\n                ghost\n                className=\"g-table-item-button\"\n                onClick={() => onPlayCard(card.id)}\n                disabled={isLoading}\n              >\n                <UpCircleOutlined />\n                <Translate pt=\"Selecionar\" en=\"Select\" />\n                <UpCircleOutlined />\n              </Button>\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\n// Ant Design Resources\nimport { message } from 'antd';\n// Hooks\nimport { useLanguage } from 'hooks';\n// Components\nimport {\n  AvatarName,\n  Card,\n  Instruction,\n  messageContent,\n  PopoverRule,\n  Step,\n  Title,\n  Translate,\n} from 'components';\nimport { CardPlayRules } from './RulesBlobs';\nimport { PlayTable } from './PlayTable';\n\ntype StepDreamsSelectionProps = {\n  table: GImageCard[];\n  word: GWord;\n  onPlayCard: GenericFunction;\n  user: GamePlayer;\n  activePlayer: GamePlayer;\n  isActivePlayer: boolean;\n};\n\nexport function StepPlayDream({\n  table,\n  word,\n  onPlayCard,\n  user,\n  activePlayer,\n  isActivePlayer,\n}: StepDreamsSelectionProps) {\n  const { translate } = useLanguage();\n\n  useEffect(() => {\n    if (isActivePlayer) {\n      message.info(\n        messageContent(\n          translate('Você controla!', 'You control!'),\n          translate(\n            'Selecione a carta-sonho que você acha que pelo menos um jogador vai dar match!',\n            'Select the dream card you think will match at least one player'\n          ),\n          activePlayer.id,\n          3\n        )\n      );\n    }\n  }, [isActivePlayer, activePlayer.id, translate]);\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <Translate pt=\"Bingo dos Sonhos\" en=\"Dream Bingo\" />\n      </Title>\n      <Card header={translate('Tema', 'Theme')} randomColor>\n        {word.text}\n      </Card>\n\n      <Instruction contained>\n        {isActivePlayer ? (\n          <Translate\n            pt=\"Selecione a carta-sonho que você acha que pelo menos um jogador vai dar match!\"\n            en=\"Select the dream card you think will match at least one player\"\n          />\n        ) : (\n          <Translate\n            pt={\n              <>\n                <AvatarName player={activePlayer} /> está selecionando um sonho.\n              </>\n            }\n            en={\n              <>\n                <AvatarName player={activePlayer} /> is selecting a dream.\n              </>\n            }\n          />\n        )}\n      </Instruction>\n\n      <PopoverRule content={<CardPlayRules />} />\n\n      <PlayTable\n        table={table}\n        onPlayCard={(cardId: string) => onPlayCard({ cardId })}\n        userCards={user.cards}\n        isPlayAvailable={isActivePlayer}\n      />\n    </Step>\n  );\n}\n","// Ant Design Resources\nimport { Divider } from 'antd';\n// Hooks\nimport { useCardWidth } from 'hooks';\n// Components\nimport {\n  AdminNextRoundButton,\n  AvatarName,\n  ImageCard,\n  Instruction,\n  Step,\n  TimedButton,\n  Title,\n  Translate,\n} from 'components';\n\ntype StepAnnounceDreamProps = {\n  latest: LatestInfo;\n  lastActivePlayer: GamePlayer;\n  activePlayer: GamePlayer;\n  setStep: GenericFunction;\n  players: GamePlayers;\n};\n\nexport function StepAnnounceDream({\n  latest,\n  lastActivePlayer,\n  activePlayer,\n  setStep,\n  players,\n}: StepAnnounceDreamProps) {\n  const cardWidth = useCardWidth(5, 8, 140, 150);\n\n  return (\n    <Step fullWidth>\n      <Title level={2}>\n        <AvatarName player={lastActivePlayer} />\n        <Translate pt=\"escolheu\" en=\"escolheu\" />\n      </Title>\n      <ImageCard imageId={latest.cardId} cardWidth={cardWidth} />\n      <Instruction contained>\n        <MatchCount matchCount={latest.matchCount} lastActivePlayer={lastActivePlayer} />\n        {latest.matchCount > 1 && (\n          <div>\n            <h2 className=\"g-announce-title\">\n              <Translate pt=\"Ganharam pontos:\" en=\"Got points:\" />\n            </h2>\n            <ListPlayers\n              players={players}\n              listPlayersIds={latest.matchedPlayers}\n              className=\"g-matched-players-list\"\n            />\n          </div>\n        )}\n        <Divider />\n        {latest.fallenPlayers.length > 1 && (\n          <div>\n            <h2 className=\"g-announce-title\">\n              <Translate\n                pt=\"Jogadores que usaram todos os sonhos:\"\n                en=\"Players who used all of their dreams:\"\n              />\n            </h2>\n            <ListPlayers\n              players={players}\n              listPlayersIds={latest.matchedPlayers}\n              className=\"g-fallen-players-list\"\n            />\n          </div>\n        )}\n        <Divider />\n\n        <div>\n          <h2 className=\"g-announce-title\">\n            <Translate pt=\"Próximo jogador:\" en=\"Next player\" />\n          </h2>\n          <div>\n            <AvatarName player={activePlayer} addressUser size=\"large\" />\n          </div>\n        </div>\n      </Instruction>\n\n      {latest.cardsLeft > 0 ? (\n        <TimedButton\n          disabled\n          duration={15}\n          onExpire={() => setStep(2)}\n          label={<Translate pt=\"Continuando em...\" en=\"Continuing in...\" />}\n        />\n      ) : (\n        <AdminNextRoundButton buttonText=\"Ranking\" />\n      )}\n    </Step>\n  );\n}\n\ntype MatchCountProps = {\n  matchCount: number;\n  lastActivePlayer: GamePlayer;\n};\n\nfunction MatchCount({ matchCount, lastActivePlayer }: MatchCountProps) {\n  const isSpark = matchCount > 0;\n  const isSuperSpark = matchCount === 1;\n  const isRegularSpark = matchCount > 1;\n\n  return (\n    <div>\n      {isSpark ? (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">E deu match!</h2>\n              {isSuperSpark &&\n                `Somente ${matchCount} jogador visitou a mesma carta! Brilharam! 3 pontos para cada!`}\n              {isRegularSpark && `${matchCount} jogadores visitaram a mesma carta! 2 pontos para cada.`}\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">It's a match!</h2>\n              {isSuperSpark &&\n                `Only ${matchCount} player visited the same card! Super spark! Each gets 3 points!`}\n              {isRegularSpark && `${matchCount} players visited the same card! Each gets 2 points.`}\n            </>\n          }\n        />\n      ) : (\n        <Translate\n          pt={\n            <>\n              <h2 className=\"g-announce-title\">Vixi...</h2>\n              Não sei o que dizer... Ninguém visitou essa carta e{' '}\n              <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> está fora da rodada (suas\n              cartas restantes ainda contaram pontos para outros jogadores).\n            </>\n          }\n          en={\n            <>\n              <h2 className=\"g-announce-title\">Oops...</h2>I don't know what to say... no one has visited this\n              card and <AvatarName player={lastActivePlayer} size=\"small\" addressUser /> is/are out of the\n              round (your remaining cards still count towards scoring for other players).\n            </>\n          }\n        />\n      )}\n    </div>\n  );\n}\n\ntype ListPlayersProps = {\n  listPlayersIds: PlayerId[];\n  players: GamePlayers;\n  className: string;\n};\n\nfunction ListPlayers({ listPlayersIds, players, className }: ListPlayersProps) {\n  return (\n    <ul className={className}>\n      {listPlayersIds.map((playerId) => (\n        <li key={`${className}-${playerId}`}>\n          <AvatarName player={players[playerId]} addressUser />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\n// State & Hooks\nimport { useIsUserReady, useUser, useLanguage, useWhichPlayerIsThe, useStep } from 'hooks';\nimport { useOnPlayCardAPIRequest } from './api-requests';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport {\n  AvatarName,\n  Instruction,\n  PhaseAnnouncement,\n  PhaseContainer,\n  PhaseTimerReset,\n  StepSwitcher,\n  Translate,\n} from 'components';\nimport { CardPlayRules } from './RulesBlobs';\nimport { StepPlayDream } from './StepPlayDream';\nimport { StepAnnounceDream } from './StepAnnounceDream';\n\nfunction PhaseCardPlay({ players, state, info }: PhaseProps) {\n  const { translate } = useLanguage();\n  const { step, goToNextStep, setStep } = useStep();\n  const user = useUser(players);\n  const isUserReady = useIsUserReady(players, state);\n\n  const [activePlayer, isActivePlayer] = useWhichPlayerIsThe('activePlayerId', state, players);\n  const [lastActivePlayer] = useWhichPlayerIsThe('lastActivePlayerId', state, players);\n  const [playerInTheDark] = useWhichPlayerIsThe('playerHavingNightmareId', state, players);\n\n  const onPlayCard = useOnPlayCardAPIRequest(setStep);\n\n  useEffect(() => {\n    if (state.turnCount > 0) {\n      setStep(3);\n    }\n  }, [state.turnCount, setStep]);\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.CARD_PLAY}>\n      <StepSwitcher step={step} conditions={[!isUserReady, !isUserReady, !isUserReady]} players={players}>\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"door-sign\"\n          title={translate('Hora do Bingo dos Sonhos!', 'Time for the Dream Bingo!')}\n          onClose={() => setStep(playerInTheDark.id ? 1 : 3)}\n          duration={state.round.current < 3 ? 20 : 5}\n        >\n          <CardPlayRules />\n        </PhaseAnnouncement>\n\n        <PhaseTimerReset goToNextStep={goToNextStep} />\n\n        {/* Step 1 */}\n        <PhaseAnnouncement\n          type=\"nightmare\"\n          title={\n            <Translate\n              pt={\n                <>\n                  <AvatarName player={playerInTheDark} size=\"large\" addressUser /> está em apuros!\n                </>\n              }\n              en={\n                <>\n                  <AvatarName player={playerInTheDark} size=\"large\" addressUser /> is in danger!\n                </>\n              }\n            />\n          }\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          <Instruction>\n            <Translate\n              pt=\"Quanto um jogador sozinho selecionou o maior número de sonhos, ele é considerado estar tendo um pesadelo! Se ele não conseguir achar outro jogador que marcou o mesmo sonho para cada uma das cartas selecionadas, ele perde 1 ponto por carta.\"\n              en=\"When a player alone selected the most dream cards they are considered to be having a nightmare! If they are not able to match every single dream, they will lose 1 point per card.\"\n            />\n          </Instruction>\n        </PhaseAnnouncement>\n\n        {/* Step 2 */}\n        <StepPlayDream\n          table={state.table}\n          word={state.word}\n          onPlayCard={onPlayCard}\n          user={user}\n          activePlayer={activePlayer}\n          isActivePlayer={isActivePlayer}\n        />\n\n        {/* Step 3 */}\n        <StepAnnounceDream\n          latest={state.latest}\n          lastActivePlayer={lastActivePlayer}\n          setStep={setStep}\n          players={players}\n          activePlayer={activePlayer}\n        />\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseCardPlay;\n","// State & Hooks\nimport { useIsUserReady, useLanguage, useStep } from 'hooks';\n// Resources & Utils\nimport { PHASES } from 'utils/phases';\n// Components\nimport { PhaseAnnouncement, PhaseContainer, StepSwitcher } from 'components';\n\nfunction PhaseResolution({ players, state, info }: PhaseProps) {\n  const isUserReady = useIsUserReady(players, state);\n  const { translate } = useLanguage();\n  const { step, goToNextStep } = useStep();\n\n  return (\n    <PhaseContainer info={info} phase={state?.phase} allowedPhase={PHASES.GALERIA_DE_SONHOS.RESOLUTION}>\n      <StepSwitcher\n        step={step}\n        conditions={[!isUserReady, !isUserReady, !isUserReady]}\n        players={players}\n        waitingRoomInstructionType=\"SERVER\"\n      >\n        {/* Step 0 */}\n        <PhaseAnnouncement\n          type=\"sleep\"\n          title={translate('Tema dos Sonhos', 'The Dream Theme')}\n          onClose={goToNextStep}\n          currentRound={state?.round?.current}\n        >\n          TODO\n        </PhaseAnnouncement>\n\n        {/* Step 1 */}\n        <div>Resolution comes here</div>\n      </StepSwitcher>\n    </PhaseContainer>\n  );\n}\n\nexport default PhaseResolution;\n","// Components\nimport { GameOverWrapper } from 'components';\n\nfunction PhaseGameOver({ state, info }: PhaseProps) {\n  return <GameOverWrapper info={info} state={state} announcementIcon=\"trophy\" />;\n}\n\nexport default PhaseGameOver;\n","// Constants\nimport { GAME_COLLECTION } from 'utils/constants';\nimport { PHASES } from 'utils/phases';\n// Components\nimport { Session, PhaseSetup, PhaseRules, PageError, PhaseLobby } from 'components';\nimport PhaseWordSelection from './PhaseWordSelection';\nimport PhaseDreamsSelection from './PhaseDreamsSelections';\nimport PhaseCardPlay from './PhaseCardPlay';\nimport PhaseResolution from './PhaseResolution';\nimport PhaseGameOver from './PhaseGameOver';\n\nfunction SessionGaleriaDeSonhos({ gameId }: SessionProps) {\n  function getActiveComponent(phase: string) {\n    switch (phase) {\n      case PHASES.DEFAULT.LOBBY:\n        return PhaseLobby;\n      case PHASES.DEFAULT.RULES:\n        return PhaseRules;\n      case PHASES.DEFAULT.SETUP:\n        return PhaseSetup;\n      case PHASES.GALERIA_DE_SONHOS.WORD_SELECTION:\n        return PhaseWordSelection;\n      case PHASES.GALERIA_DE_SONHOS.DREAMS_SELECTION:\n        return PhaseDreamsSelection;\n      case PHASES.GALERIA_DE_SONHOS.CARD_PLAY:\n        return PhaseCardPlay;\n      case PHASES.GALERIA_DE_SONHOS.RESOLUTION:\n        return PhaseResolution;\n      case PHASES.DEFAULT.GAME_OVER:\n        return PhaseGameOver;\n      default:\n        return PageError;\n    }\n  }\n\n  return (\n    <Session\n      gameId={gameId}\n      gameCollection={GAME_COLLECTION.GALERIA_DE_SONHOS}\n      getActiveComponent={getActiveComponent}\n    />\n  );\n}\n\nexport default SessionGaleriaDeSonhos;\n"],"names":["WordSelectionRules","scout","pt","player","addressUser","size","en","GeneralRules","contained","DreamSelectionRules","DreamSelectionExtendedRules","CardPlayRules","StepWordSelection","onSubmitWord","words","fullWidth","map","word","index","onClick","wordId","id","header","LETTERS","randomColor","text","players","state","info","translate","useLanguage","useStep","step","goToNextStep","setStep","isUserReady","useIsUserReady","useWhichPlayerIsThe","isUserTheScout","request","useAPICall","apiFunction","GALERIA_DE_SONHOS_API","actionName","onBeforeCall","onError","successMessage","errorMessage","payload","action","useOnSubmitWordAPIRequest","phase","allowedPhase","PHASES","conditions","waitingRoomInstructionType","round","onPressButton","buttonText","time","type","title","onClose","currentRound","current","cases","instruction","UpCircleOutlined","props","ref","React","AntdIcon","_objectSpread","icon","UpCircleOutlinedSvg","displayName","SelectTable","table","onSelectCard","selectedCards","cardWidth","useCardWidth","className","card","isSelected","style","width","cardId","imageId","clsx","shape","ghost","validateSelectedCards","v","Object","keys","length","StepDreamsSelection","onSubmitCards","useBooleanDictionary","selectedCount","level","content","disabled","cardsIds","useOnSubmitCardsAPIRequest","PlayTable","onPlayCard","userCards","isPlayAvailable","isLoading","useLoading","Boolean","userCardEntry","used","score","StepPlayDream","user","activePlayer","isActivePlayer","useEffect","message","messageContent","cards","StepAnnounceDream","latest","lastActivePlayer","MatchCount","matchCount","ListPlayers","listPlayersIds","matchedPlayers","fallenPlayers","cardsLeft","duration","onExpire","label","isSpark","isSuperSpark","isRegularSpark","playerId","useUser","playerInTheDark","useOnPlayCardAPIRequest","turnCount","announcementIcon","gameId","gameCollection","GAME_COLLECTION","getActiveComponent","PhaseLobby","PhaseRules","PhaseSetup","PhaseWordSelection","PhaseDreamsSelection","PhaseCardPlay","PhaseResolution","PhaseGameOver","PageError"],"sourceRoot":""}